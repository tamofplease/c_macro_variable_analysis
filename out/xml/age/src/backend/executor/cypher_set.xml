<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/age/src/backend/executor/cypher_set.c"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/sysattr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/bufmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/tuptable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/execnodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/extensible.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/nodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/plannodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parsetree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parse_relation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rewrite/rewriteHandler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/ag_label.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/label_commands.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/cypher_executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/cypher_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/cypher_parse_node.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/cypher_nodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/agtype.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/graphid.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>begin_cypher_set</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name></decl></parameter>,
                                <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>TupleTableSlot</name> <modifier>*</modifier></type><name>exec_cypher_set</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>end_cypher_set</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>rescan_cypher_set</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>process_update_list</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>HeapTuple</name></type> <name>update_entity_tuple</name><parameter_list>(<parameter><decl><type><name>ResultRelInfo</name> <modifier>*</modifier></type><name>resultRelInfo</name></decl></parameter>,
                                     <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>elemTupleSlot</name></decl></parameter>,
                                     <parameter><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name></decl></parameter>, <parameter><decl><type><name>HeapTuple</name></type> <name>old_tuple</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>const</specifier> <name>CustomExecMethods</name></type> <name>cypher_set_exec_methods</name> <init>= <expr><block>{<expr><name>SET_SCAN_STATE_NAME</name></expr>,
                                                      <expr><name>begin_cypher_set</name></expr>,
                                                      <expr><name>exec_cypher_set</name></expr>,
                                                      <expr><name>end_cypher_set</name></expr>,
                                                      <expr><name>rescan_cypher_set</name></expr>,
                                                      <expr><name>NULL</name></expr>,
                                                      <expr><name>NULL</name></expr>,
                                                      <expr><name>NULL</name></expr>,
                                                      <expr><name>NULL</name></expr>,
                                                      <expr><name>NULL</name></expr>,
                                                      <expr><name>NULL</name></expr>,
                                                      <expr><name>NULL</name></expr>,
                                                      <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>begin_cypher_set</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name></decl></parameter>,
                             <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cypher_set_custom_scan_state</name> <modifier>*</modifier></type><name>css</name> <init>=
        <expr><operator>(</operator><name>cypher_set_custom_scan_state</name> <operator>*</operator><operator>)</operator><name>node</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Plan</name> <modifier>*</modifier></type><name>subplan</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>css</name><operator>-&gt;</operator><name>cs</name><operator>-&gt;</operator><name>custom_plans</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>subplan</name> <operator>=</operator> <call><name>linitial</name><argument_list>(<argument><expr><name><name>css</name><operator>-&gt;</operator><name>cs</name><operator>-&gt;</operator><name>custom_plans</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>lefttree</name></name> <operator>=</operator> <call><name>ExecInitNode</name><argument_list>(<argument><expr><name>subplan</name></expr></argument>, <argument><expr><name>estate</name></expr></argument>, <argument><expr><name>eflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ExecAssignExprContext</name><argument_list>(<argument><expr><name>estate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ExecInitScanTupleSlot</name><argument_list>(<argument><expr><name>estate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ss</name></name></expr></argument>,
                          <argument><expr><call><name>ExecGetResultType</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>lefttree</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CYPHER_CLAUSE_IS_TERMINAL</name><argument_list>(<argument><expr><name><name>css</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>TupleDesc</name></type> <name>tupdesc</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ss_ScanTupleSlot</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name></name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>ExecAssignProjectionInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name></name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Postgres does not assign the es_output_cid in queries that do
     * not write to disk, ie: SELECT commands. We need the command id
     * for our clauses, and we may need to initialize it. We cannot use
     * GetCurrentCommandId because there may be other cypher clauses
     * that have modified the command id.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>estate</name><operator>-&gt;</operator><name>es_output_cid</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>estate</name><operator>-&gt;</operator><name>es_output_cid</name></name> <operator>=</operator> <name><name>estate</name><operator>-&gt;</operator><name>es_snapshot</name><operator>-&gt;</operator><name>curcid</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>Increment_Estate_CommandId</name><argument_list>(<argument><expr><name>estate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>HeapTuple</name></type> <name>update_entity_tuple</name><parameter_list>(<parameter><decl><type><name>ResultRelInfo</name> <modifier>*</modifier></type><name>resultRelInfo</name></decl></parameter>,
                                     <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>elemTupleSlot</name></decl></parameter>,
                                     <parameter><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name></decl></parameter>, <parameter><decl><type><name>HeapTuple</name></type> <name>old_tuple</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>HeapTuple</name></type> <name>tuple</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LockTupleMode</name></type> <name>lockmode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HeapUpdateFailureData</name></type> <name>hufd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HTSU_Result</name></type> <name>lock_result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HTSU_Result</name></type> <name>update_result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Buffer</name></type> <name>buffer</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ResultRelInfo</name> <modifier>*</modifier></type><name>saved_resultRelInfo</name> <init>= <expr><name>saved_resultRelInfo</name></expr></init></decl>;</decl_stmt><empty_stmt>;</empty_stmt>
    <expr_stmt><expr><name><name>estate</name><operator>-&gt;</operator><name>es_result_relation_info</name></name> <operator>=</operator> <name>resultRelInfo</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>lockmode</name> <operator>=</operator> <call><name>ExecUpdateLockMode</name><argument_list>(<argument><expr><name>estate</name></expr></argument>, <argument><expr><name>resultRelInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>lock_result</name> <operator>=</operator> <call><name>heap_lock_tuple</name><argument_list>(<argument><expr><name><name>resultRelInfo</name><operator>-&gt;</operator><name>ri_RelationDesc</name></name></expr></argument>, <argument><expr><name>old_tuple</name></expr></argument>,
                                  <argument><expr><call><name>GetCurrentCommandId</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>,
                                  <argument><expr><name>LockWaitBlock</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hufd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>lock_result</name> <operator>==</operator> <name>HeapTupleMayBeUpdated</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ExecStoreVirtualTuple</name><argument_list>(<argument><expr><name>elemTupleSlot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>ExecMaterializeSlot</name><argument_list>(<argument><expr><name>elemTupleSlot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tuple</name><operator>-&gt;</operator><name>t_self</name></name> <operator>=</operator> <name><name>old_tuple</name><operator>-&gt;</operator><name>t_self</name></name></expr>;</expr_stmt>

        <comment type="line">// Check the constraints of the tuple</comment>
        <expr_stmt><expr><name><name>tuple</name><operator>-&gt;</operator><name>t_tableOid</name></name> <operator>=</operator> <call><name>RelationGetRelid</name><argument_list>(<argument><expr><name><name>resultRelInfo</name><operator>-&gt;</operator><name>ri_RelationDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>resultRelInfo</name><operator>-&gt;</operator><name>ri_RelationDesc</name><operator>-&gt;</operator><name>rd_att</name><operator>-&gt;</operator><name>constr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ExecConstraints</name><argument_list>(<argument><expr><name>resultRelInfo</name></expr></argument>, <argument><expr><name>elemTupleSlot</name></expr></argument>, <argument><expr><name>estate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Insert the tuple normally</comment>
        <expr_stmt><expr><name>update_result</name> <operator>=</operator> <call><name>heap_update</name><argument_list>(<argument><expr><name><name>resultRelInfo</name><operator>-&gt;</operator><name>ri_RelationDesc</name></name></expr></argument>,
                                    <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>tuple</name><operator>-&gt;</operator><name>t_self</name></name><operator>)</operator></expr></argument>, <argument><expr><name>tuple</name></expr></argument>,
                                    <argument><expr><call><name>GetCurrentCommandId</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><name><name>estate</name><operator>-&gt;</operator><name>es_crosscheck_snapshot</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hufd</name></expr></argument>,
                                    <argument><expr><operator>&amp;</operator><name>lockmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>update_result</name> <operator>!=</operator> <name>HeapTupleMayBeUpdated</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                    <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Entity failed to be updated: %i"</literal></expr></argument>, <argument><expr><name>update_result</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Insert index entries for the tuple</comment>
        <if_stmt><if>if <condition>(<expr><name><name>resultRelInfo</name><operator>-&gt;</operator><name>ri_NumIndices</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ExecInsertIndexTuples</name><argument_list>(<argument><expr><name>elemTupleSlot</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>tuple</name><operator>-&gt;</operator><name>t_self</name></name><operator>)</operator></expr></argument>, <argument><expr><name>estate</name></expr></argument>,
                                  <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>ReleaseBuffer</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>estate</name><operator>-&gt;</operator><name>es_result_relation_info</name></name> <operator>=</operator> <name>saved_resultRelInfo</name></expr>;</expr_stmt>

    <return>return <expr><name>tuple</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * When the CREATE clause is the last cypher clause, consume all input from the
 * previous clause(s) in the first call of exec_cypher_create.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>process_all_tuples</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cypher_set_custom_scan_state</name> <modifier>*</modifier></type><name>css</name> <init>= <expr><operator>(</operator><name>cypher_set_custom_scan_state</name> <operator>*</operator><operator>)</operator><name>node</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name> <init>= <expr><name><name>css</name><operator>-&gt;</operator><name>css</name><operator>.</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>state</name></name></expr></init></decl>;</decl_stmt>

    <do>do
    <block>{<block_content>
        <expr_stmt><expr><call><name>process_update_list</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>Decrement_Estate_CommandId</name><argument_list>(<argument>estate</argument>)</argument_list></macro>
        <expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>ExecProcNode</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>lefttree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>Increment_Estate_CommandId</name><argument_list>(<argument>estate</argument>)</argument_list></macro>
    </block_content>}</block> while <condition>(<expr><operator>!</operator><call><name>TupIsNull</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
</block_content>}</block></function>

<comment type="block">/*
 * Checks the path to see if the entities contained within
 * have the same graphid and the updated_id field. Returns
 * true if yes, false otherwise.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>check_path</name><parameter_list>(<parameter><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>graphid</name></type> <name>updated_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>path</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>array</name><operator>.</operator><name>num_elems</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>elem</name> <init>= <expr><operator>&amp;</operator><name><name>path</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>array</name><operator>.</operator><name>elems</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><call><name>GET_AGTYPE_VALUE_OBJECT_VALUE</name><argument_list>(<argument><expr><name>elem</name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>updated_id</name> <operator>==</operator> <name><name>id</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>int_value</name></name></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><name>true</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Construct a new agtype path with the entity with updated_id
 * replacing all of its intances in path with updated_entity
 */</comment>
<function><type><specifier>static</specifier> <name>agtype_value</name> <modifier>*</modifier></type><name>replace_entity_in_path</name><parameter_list>(<parameter><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
                                            <parameter><decl><type><name>graphid</name></type> <name>updated_id</name></decl></parameter>,
                                            <parameter><decl><type><name>agtype</name> <modifier>*</modifier></type><name>updated_entity</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>agtype_iterator</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype_iterator_token</name></type> <name>tok</name> <init>= <expr><name>WAGT_DONE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype_parse_state</name> <modifier>*</modifier></type><name>parse_state</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>parsed_agtype_value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>prop_agtype</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>agtype_value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>prop_agtype</name> <operator>=</operator> <call><name>agtype_value_to_agtype</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>agtype_iterator_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prop_agtype</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tok</name> <operator>=</operator> <call><name>agtype_iterator_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>parsed_agtype_value</name> <operator>=</operator> <call><name>push_agtype_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>,
                                            <argument><expr><ternary><condition><expr><name>tok</name> <operator>&lt;</operator> <name>WAGT_BEGIN_ARRAY</name></expr> ?</condition><then> <expr><name>r</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Iterate through the path, replace entities as necessary.</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>path</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>array</name><operator>.</operator><name>num_elems</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>id</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>elem</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>elem</name> <operator>=</operator> <operator>&amp;</operator><name><name>path</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>array</name><operator>.</operator><name>elems</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

        <comment type="line">// something unexpected happended, throw an error.</comment>
        <if_stmt><if>if <condition>(<expr><name><name>elem</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>AGTV_VERTEX</name> <operator>&amp;&amp;</operator> <name><name>elem</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>AGTV_EDGE</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
                            <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unsupported agtype found in a path"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// extract the id field</comment>
        <expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>GET_AGTYPE_VALUE_OBJECT_VALUE</name><argument_list>(<argument><expr><name>elem</name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * Either replace or keep the entity in the new path, depending on the id
         * check.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name>updated_id</name> <operator>==</operator> <name><name>id</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>int_value</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>parsed_agtype_value</name> <operator>=</operator> <call><name>push_agtype_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_state</name></expr></argument>, <argument><expr><name>WAGT_ELEM</name></expr></argument>,
                <argument><expr><call><name>get_ith_agtype_value_from_container</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>updated_entity</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>parsed_agtype_value</name> <operator>=</operator> <call><name>push_agtype_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_state</name></expr></argument>, <argument><expr><name>WAGT_ELEM</name></expr></argument>,
                                                    <argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>parsed_agtype_value</name> <operator>=</operator> <call><name>push_agtype_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_state</name></expr></argument>, <argument><expr><name>WAGT_END_ARRAY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>parsed_agtype_value</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>AGTV_PATH</name></expr>;</expr_stmt>

    <return>return <expr><name>parsed_agtype_value</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * When a vertex or edge is updated, we need to update the vertex
 * or edge if it is contained within a path. Scan through scanTupleSlot
 * to find all paths and check if they need to be updated.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>update_all_paths</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>graphid</name></type> <name>id</name></decl></parameter>,
                             <parameter><decl><type><name>agtype</name> <modifier>*</modifier></type><name>updated_entity</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cypher_set_custom_scan_state</name> <modifier>*</modifier></type><name>css</name> <init>= <expr><operator>(</operator><name>cypher_set_custom_scan_state</name> <operator>*</operator><operator>)</operator><name>node</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name> <init>= <expr><name><name>css</name><operator>-&gt;</operator><name>css</name><operator>.</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>ps_ExprContext</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>scanTupleSlot</name> <init>= <expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_scantuple</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>scanTupleSlot</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name><operator>-&gt;</operator><name>natts</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>original_entity</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>original_entity_value</name></decl>;</decl_stmt>

        <comment type="line">// skip nulls</comment>
        <if_stmt><if>if <condition>(<expr><name><name>scanTupleSlot</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>atttypid</name> <operator>!=</operator> <name>AGTYPEOID</name></expr>)</condition>
        <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// skip non agtype values</comment>
        <if_stmt><if>if <condition>(<expr><name><name>scanTupleSlot</name><operator>-&gt;</operator><name>tts_isnull</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
        <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>original_entity</name> <operator>=</operator> <call><name>DATUM_GET_AGTYPE_P</name><argument_list>(<argument><expr><name><name>scanTupleSlot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// if the value is not a scalar type, its not a path</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AGTYPE_CONTAINER_IS_SCALAR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>original_entity</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>original_entity_value</name> <operator>=</operator> <call><name>get_ith_agtype_value_from_container</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>original_entity</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// we found a path</comment>
        <if_stmt><if>if <condition>(<expr><name><name>original_entity_value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_PATH</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// check if the path contains the entity.</comment>
            <if_stmt><if>if <condition>(<expr><call><name>check_path</name><argument_list>(<argument><expr><name>original_entity_value</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// the path does contain the entity replace with the new entity.</comment>
                <decl_stmt><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>new_path</name> <init>= <expr><call><name>replace_entity_in_path</name><argument_list>(<argument><expr><name>original_entity_value</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>updated_entity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><name><name>scanTupleSlot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>AGTYPE_P_GET_DATUM</name><argument_list>(<argument><expr><call><name>agtype_value_to_agtype</name><argument_list>(<argument><expr><name>new_path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_update_list</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cypher_set_custom_scan_state</name> <modifier>*</modifier></type><name>css</name> <init>= <expr><operator>(</operator><name>cypher_set_custom_scan_state</name> <operator>*</operator><operator>)</operator><name>node</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name> <init>= <expr><name><name>css</name><operator>-&gt;</operator><name>css</name><operator>.</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>ps_ExprContext</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>scanTupleSlot</name> <init>= <expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_scantuple</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name> <init>= <expr><name><name>css</name><operator>-&gt;</operator><name>css</name><operator>.</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>state</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>luindex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>lidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* allocate an array to hold the last update index of each 'entity' */</comment>
    <expr_stmt><expr><name>luindex</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>scanTupleSlot</name><operator>-&gt;</operator><name>tts_nvalid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*
     * Iterate through the SET items list and store the loop index of each
     * 'entity' update. As there is only one entry for each entity, this will
     * have the effect of overwriting the previous loop index stored - if this
     * 'entity' is used more than once. This will create an array of the last
     * loop index for the update of that particular 'entity'. This will allow us
     * to correctly update an 'entity' after all other previous updates to that
     * 'entity' have been done.
     */</comment>
    <macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>css-&gt;set_list-&gt;set_items</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>cypher_update_item</name> <modifier>*</modifier></type><name>update_item</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>update_item</name> <operator>=</operator> <operator>(</operator><name>cypher_update_item</name> <operator>*</operator><operator>)</operator><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>luindex</name><index>[<expr><name><name>update_item</name><operator>-&gt;</operator><name>entity_position</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>lidx</name></expr>;</expr_stmt>

        <comment type="block">/* increment the loop index */</comment>
        <expr_stmt><expr><name>lidx</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block>

    <comment type="block">/* reset loop index */</comment>
    <expr_stmt><expr><name>lidx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="block">/* iterate through SET set items */</comment>
    <macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>css-&gt;set_list-&gt;set_items</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>altered_properties</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>original_entity_value</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>original_properties</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>label</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>original_entity</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>new_property_value</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ResultRelInfo</name> <modifier>*</modifier></type><name>resultRelInfo</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>scan_keys</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>HeapScanDesc</name></type> <name>scan_desc</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>remove_property</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>label_name</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>cypher_update_item</name> <modifier>*</modifier></type><name>update_item</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Datum</name></type> <name>new_entity</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>HeapTuple</name></type> <name>heap_tuple</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>clause_name</name> <init>= <expr><name><name>css</name><operator>-&gt;</operator><name>set_list</name><operator>-&gt;</operator><name>clause_name</name></name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>update_item</name> <operator>=</operator> <operator>(</operator><name>cypher_update_item</name> <operator>*</operator><operator>)</operator><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * If the entity is null, we can skip this update. this will be
         * possible when the OPTIONAL MATCH clause is implemented.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>scanTupleSlot</name><operator>-&gt;</operator><name>tts_isnull</name><index>[<expr><name><name>update_item</name><operator>-&gt;</operator><name>entity_position</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition>
        <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>scanTupleSlot</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name><operator>-&gt;</operator><name>attrs</name><index>[<expr><name><name>update_item</name><operator>-&gt;</operator><name>entity_position</name></name> <operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>atttypid</name> <operator>!=</operator> <name>AGTYPEOID</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"age %s clause can only update agtype"</literal></expr></argument>,
                            <argument><expr><name>clause_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>original_entity</name> <operator>=</operator> <call><name>DATUM_GET_AGTYPE_P</name><argument_list>(<argument><expr><name><name>scanTupleSlot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name><name>update_item</name><operator>-&gt;</operator><name>entity_position</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>original_entity_value</name> <operator>=</operator> <call><name>get_ith_agtype_value_from_container</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>original_entity</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>original_entity_value</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>AGTV_VERTEX</name> <operator>&amp;&amp;</operator>
            <name><name>original_entity_value</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>AGTV_EDGE</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"age %s clause can only update vertex and edges"</literal></expr></argument>,
                            <argument><expr><name>clause_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* get the id and label for later */</comment>
        <expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>GET_AGTYPE_VALUE_OBJECT_VALUE</name><argument_list>(<argument><expr><name>original_entity_value</name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>label</name> <operator>=</operator> <call><name>GET_AGTYPE_VALUE_OBJECT_VALUE</name><argument_list>(<argument><expr><name>original_entity_value</name></expr></argument>, <argument><expr><literal type="string">"label"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>label_name</name> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><name><name>label</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name><name>label</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* get the properties we need to update */</comment>
        <expr_stmt><expr><name>original_properties</name> <operator>=</operator> <call><name>GET_AGTYPE_VALUE_OBJECT_VALUE</name><argument_list>(<argument><expr><name>original_entity_value</name></expr></argument>,
                                                            <argument><expr><literal type="string">"properties"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * Determine if the property should be removed. This will be because
         * this is a REMOVE clause or the variable references a variable that is
         * NULL. It will be possible for a variable to be NULL when OPTIONAL
         * MATCH is implemented.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>update_item</name><operator>-&gt;</operator><name>remove_item</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>remove_property</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>remove_property</name> <operator>=</operator> <name><name>scanTupleSlot</name><operator>-&gt;</operator><name>tts_isnull</name><index>[<expr><name><name>update_item</name><operator>-&gt;</operator><name>prop_position</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="block">/*
         * If we need to remove the property, set the value to NULL. Otherwise
         * fetch the evaluated expression from the tuble slot.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name>remove_property</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>new_property_value</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>new_property_value</name> <operator>=</operator> <call><name>DATUM_GET_AGTYPE_P</name><argument_list>(<argument><expr><name><name>scanTupleSlot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name><name>update_item</name><operator>-&gt;</operator><name>prop_position</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="block">/*
         * Alter the properties Agtype value to contain or remove the updated
         * property.
         */</comment>
        <expr_stmt><expr><name>altered_properties</name> <operator>=</operator> <call><name>alter_property_value</name><argument_list>(<argument><expr><name>original_properties</name></expr></argument>,
                                                  <argument><expr><name><name>update_item</name><operator>-&gt;</operator><name>prop_name</name></name></expr></argument>,
                                                  <argument><expr><name>new_property_value</name></expr></argument>,
                                                  <argument><expr><name>remove_property</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>resultRelInfo</name> <operator>=</operator> <call><name>create_entity_result_rel_info</name><argument_list>(<argument><expr><name>estate</name></expr></argument>,
                                                      <argument><expr><name><name>css</name><operator>-&gt;</operator><name>set_list</name><operator>-&gt;</operator><name>graph_name</name></name></expr></argument>,
                                                      <argument><expr><name>label_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>ExecInitExtraTupleSlot</name><argument_list>(<argument><expr><name>estate</name></expr></argument>, <argument><expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name><name>resultRelInfo</name><operator>-&gt;</operator><name>ri_RelationDesc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         *  Now that we have the updated properties, create a either a vertex or
         *  edge Datum for the in-memory update, and setup the tupleTableSlot
         *  for the on-disc update.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>original_entity_value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_VERTEX</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>new_entity</name> <operator>=</operator> <call><name>make_vertex</name><argument_list>(<argument><expr><call><name>GRAPHID_GET_DATUM</name><argument_list>(<argument><expr><name><name>id</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>int_value</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                     <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>label_name</name></expr></argument>)</argument_list></call></expr></argument>,
                                     <argument><expr><call><name>AGTYPE_P_GET_DATUM</name><argument_list>(<argument><expr><call><name>agtype_value_to_agtype</name><argument_list>(<argument><expr><name>altered_properties</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>populate_vertex_tts</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>altered_properties</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name><name>original_entity_value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_EDGE</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>startid</name> <init>= <expr><call><name>GET_AGTYPE_VALUE_OBJECT_VALUE</name><argument_list>(<argument><expr><name>original_entity_value</name></expr></argument>, <argument><expr><literal type="string">"start_id"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>endid</name> <init>= <expr><call><name>GET_AGTYPE_VALUE_OBJECT_VALUE</name><argument_list>(<argument><expr><name>original_entity_value</name></expr></argument>, <argument><expr><literal type="string">"end_id"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>new_entity</name> <operator>=</operator> <call><name>make_edge</name><argument_list>(<argument><expr><call><name>GRAPHID_GET_DATUM</name><argument_list>(<argument><expr><name><name>id</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>int_value</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr><call><name>GRAPHID_GET_DATUM</name><argument_list>(<argument><expr><name><name>startid</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>int_value</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr><call><name>GRAPHID_GET_DATUM</name><argument_list>(<argument><expr><name><name>endid</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>int_value</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>label_name</name></expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr><call><name>AGTYPE_P_GET_DATUM</name><argument_list>(<argument><expr><call><name>agtype_value_to_agtype</name><argument_list>(<argument><expr><name>altered_properties</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>populate_edge_tts</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>startid</name></expr></argument>, <argument><expr><name>endid</name></expr></argument>,
                                     <argument><expr><name>altered_properties</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
                            <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"age %s clause can only update vertex and edges"</literal></expr></argument>,
                                   <argument><expr><name>clause_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="block">/* place the datum in its tuple table slot position. */</comment>
        <expr_stmt><expr><name><name>scanTupleSlot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name><name>update_item</name><operator>-&gt;</operator><name>entity_position</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>new_entity</name></expr>;</expr_stmt>

        <comment type="block">/*
         * If the tuple table slot has paths, we need to inspect them to see if
         * the updated entity is contained within them and replace the entity
         * if it is.
         */</comment>
        <expr_stmt><expr><call><name>update_all_paths</name><argument_list>(<argument><expr><name>node</name></expr></argument>,
                         <argument><expr><name><name>id</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>int_value</name></name></expr></argument>, <argument><expr><call><name>DATUM_GET_AGTYPE_P</name><argument_list>(<argument><expr><name>new_entity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * If the last update index for the entity is equal to the current loop
         * index, then update this tuple.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>luindex</name><index>[<expr><name><name>update_item</name><operator>-&gt;</operator><name>entity_position</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>lidx</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/*
             * Setup the scan key to require the id field on-disc to match the
             * entity's graphid.
             */</comment>
            <expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scan_keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_GRAPHIDEQ</name></expr></argument>,
                        <argument><expr><call><name>GRAPHID_GET_DATUM</name><argument_list>(<argument><expr><name><name>id</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>int_value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/*
             * Setup the scan description, with the correct snapshot and scan
             * keys.
             */</comment>
            <expr_stmt><expr><name>scan_desc</name> <operator>=</operator> <call><name>heap_beginscan</name><argument_list>(<argument><expr><name><name>resultRelInfo</name><operator>-&gt;</operator><name>ri_RelationDesc</name></name></expr></argument>,
                                       <argument><expr><name><name>estate</name><operator>-&gt;</operator><name>es_snapshot</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>scan_keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/* Retrieve the tuple. */</comment>
            <expr_stmt><expr><name>heap_tuple</name> <operator>=</operator> <call><name>heap_getnext</name><argument_list>(<argument><expr><name>scan_desc</name></expr></argument>, <argument><expr><name>ForwardScanDirection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/*
             * If the heap tuple still exists (It wasn't deleted between the
             * match and this SET/REMOVE) update the heap_tuple.
             */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>heap_tuple</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>heap_tuple</name> <operator>=</operator> <call><name>update_entity_tuple</name><argument_list>(<argument><expr><name>resultRelInfo</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>estate</name></expr></argument>,
                                                 <argument><expr><name>heap_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <comment type="block">/* close the ScanDescription */</comment>
            <expr_stmt><expr><call><name>heap_endscan</name><argument_list>(<argument><expr><name>scan_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* close relation */</comment>
        <expr_stmt><expr><call><name>ExecCloseIndices</name><argument_list>(<argument><expr><name>resultRelInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name><name>resultRelInfo</name><operator>-&gt;</operator><name>ri_RelationDesc</name></name></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* increment loop index */</comment>
        <expr_stmt><expr><name>lidx</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block>
    <comment type="block">/* free our lookup array */</comment>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>luindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>TupleTableSlot</name> <modifier>*</modifier></type><name>exec_cypher_set</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cypher_set_custom_scan_state</name> <modifier>*</modifier></type><name>css</name> <init>= <expr><operator>(</operator><name>cypher_set_custom_scan_state</name> <operator>*</operator><operator>)</operator><name>node</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ResultRelInfo</name> <modifier>*</modifier></type><name>saved_resultRelInfo</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name> <init>= <expr><name><name>css</name><operator>-&gt;</operator><name>css</name><operator>.</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>state</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name> <init>= <expr><name><name>css</name><operator>-&gt;</operator><name>css</name><operator>.</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>ps_ExprContext</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>saved_resultRelInfo</name> <operator>=</operator> <name><name>estate</name><operator>-&gt;</operator><name>es_result_relation_info</name></name></expr>;</expr_stmt>

    <comment type="line">//Process the subtree first</comment>
    <expr_stmt><expr><call><name>Decrement_Estate_CommandId</name><argument_list>(<argument><expr><name>estate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>ExecProcNode</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>lefttree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Increment_Estate_CommandId</name><argument_list>(<argument><expr><name>estate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>TupIsNull</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_scantuple</name></name> <operator>=</operator>
        <name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>lefttree</name><operator>-&gt;</operator><name>ps_ProjInfo</name><operator>-&gt;</operator><name>pi_exprContext</name><operator>-&gt;</operator><name>ecxt_scantuple</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>CYPHER_CLAUSE_IS_TERMINAL</name><argument_list>(<argument><expr><name><name>css</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>estate</name><operator>-&gt;</operator><name>es_result_relation_info</name></name> <operator>=</operator> <name>saved_resultRelInfo</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>process_all_tuples</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* increment the command counter to reflect the updates */</comment>
        <expr_stmt><expr><call><name>CommandCounterIncrement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>process_update_list</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* increment the command counter to reflect the updates */</comment>
    <expr_stmt><expr><call><name>CommandCounterIncrement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>estate</name><operator>-&gt;</operator><name>es_result_relation_info</name></name> <operator>=</operator> <name>saved_resultRelInfo</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_scantuple</name></name> <operator>=</operator> <call><name>ExecProject</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>lefttree</name><operator>-&gt;</operator><name>ps_ProjInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>ExecProject</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>ps_ProjInfo</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>end_cypher_set</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>ExecEndNode</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>lefttree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rescan_cypher_set</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cypher_set_custom_scan_state</name> <modifier>*</modifier></type><name>css</name> <init>= <expr><operator>(</operator><name>cypher_set_custom_scan_state</name> <operator>*</operator><operator>)</operator><name>node</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>clause_name</name> <init>= <expr><name><name>css</name><operator>-&gt;</operator><name>set_list</name><operator>-&gt;</operator><name>clause_name</name></name></expr></init></decl>;</decl_stmt>

     <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
             <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
                      <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cypher %s clause cannot be rescaned"</literal></expr></argument>,
                             <argument><expr><name>clause_name</name></expr></argument>)</argument_list></call><operator>,</operator>
                      <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"its unsafe to use joins in a query with a Cypher %s clause"</literal></expr></argument>, <argument><expr><name>clause_name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Node</name> <modifier>*</modifier></type><name>create_cypher_set_plan_state</name><parameter_list>(<parameter><decl><type><name>CustomScan</name> <modifier>*</modifier></type><name>cscan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cypher_set_custom_scan_state</name> <modifier>*</modifier></type><name>cypher_css</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cypher_set_custom_scan_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cypher_update_information</name> <modifier>*</modifier></type><name>set_list</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>serialized_data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Const</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>cypher_css</name><operator>-&gt;</operator><name>cs</name></name> <operator>=</operator> <name>cscan</name></expr>;</expr_stmt>

    <comment type="line">// get the serialized data structure from the Const and deserialize it.</comment>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>linitial</name><argument_list>(<argument><expr><name><name>cscan</name><operator>-&gt;</operator><name>custom_private</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>serialized_data</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>constvalue</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>set_list</name> <operator>=</operator> <call><name>stringToNode</name><argument_list>(<argument><expr><name>serialized_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>is_ag_node</name><argument_list>(<argument><expr><name>set_list</name></expr></argument>, <argument><expr><name>cypher_update_information</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>cypher_css</name><operator>-&gt;</operator><name>set_list</name></name> <operator>=</operator> <name>set_list</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cypher_css</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name><name>set_list</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>cypher_css</name><operator>-&gt;</operator><name>css</name><operator>.</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>T_CustomScanState</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cypher_css</name><operator>-&gt;</operator><name>css</name><operator>.</operator><name>methods</name></name> <operator>=</operator> <operator>&amp;</operator><name>cypher_set_exec_methods</name></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>cypher_css</name></expr>;</return>
</block_content>}</block></function>
</unit>
