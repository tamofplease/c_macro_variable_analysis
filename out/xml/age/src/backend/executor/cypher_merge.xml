<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/age/src/backend/executor/cypher_merge.c"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/tuptable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/execnodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/extensible.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/nodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/plannodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parse_relation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rewrite/rewriteHandler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/tqual.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/ag_label.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/cypher_executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/cypher_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/cypher_nodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/agtype.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/ag_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/graphid.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>begin_cypher_merge</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name></decl></parameter>,
                               <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>TupleTableSlot</name> <modifier>*</modifier></type><name>exec_cypher_merge</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>end_cypher_merge</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>rescan_cypher_merge</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Datum</name></type> <name>merge_vertex</name><parameter_list>(<parameter><decl><type><name>cypher_merge_custom_scan_state</name> <modifier>*</modifier></type><name>css</name></decl></parameter>,
                          <parameter><decl><type><name>cypher_target_node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>next</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>merge_edge</name><parameter_list>(<parameter><decl><type><name>cypher_merge_custom_scan_state</name> <modifier>*</modifier></type><name>css</name></decl></parameter>,
                       <parameter><decl><type><name>cypher_target_node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>prev_vertex_id</name></decl></parameter>,
                       <parameter><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>next</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>process_simple_merge</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>check_path</name><parameter_list>(<parameter><decl><type><name>cypher_merge_custom_scan_state</name> <modifier>*</modifier></type><name>css</name></decl></parameter>,
                       <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>process_path</name><parameter_list>(<parameter><decl><type><name>cypher_merge_custom_scan_state</name> <modifier>*</modifier></type><name>css</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>mark_tts_isnull</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>const</specifier> <name>CustomExecMethods</name></type> <name>cypher_merge_exec_methods</name> <init>= <expr><block>{<expr><name>MERGE_SCAN_STATE_NAME</name></expr>,
                                                     <expr><name>begin_cypher_merge</name></expr>,
                                                     <expr><name>exec_cypher_merge</name></expr>,
                                                     <expr><name>end_cypher_merge</name></expr>,
                                                     <expr><name>rescan_cypher_merge</name></expr>,
                                                     <expr><name>NULL</name></expr>,
                                                     <expr><name>NULL</name></expr>,
                                                     <expr><name>NULL</name></expr>,
                                                     <expr><name>NULL</name></expr>,
                                                     <expr><name>NULL</name></expr>,
                                                     <expr><name>NULL</name></expr>,
                                                     <expr><name>NULL</name></expr>,
                                                     <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Initializes the MERGE Execution Node at the begginning of the execution
 * phase.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>begin_cypher_merge</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name></decl></parameter>,
                               <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cypher_merge_custom_scan_state</name> <modifier>*</modifier></type><name>css</name> <init>=
        <expr><operator>(</operator><name>cypher_merge_custom_scan_state</name> <operator>*</operator><operator>)</operator><name>node</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Plan</name> <modifier>*</modifier></type><name>subplan</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>css</name><operator>-&gt;</operator><name>cs</name><operator>-&gt;</operator><name>custom_plans</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// initialize the subplan</comment>
    <expr_stmt><expr><name>subplan</name> <operator>=</operator> <call><name>linitial</name><argument_list>(<argument><expr><name><name>css</name><operator>-&gt;</operator><name>cs</name><operator>-&gt;</operator><name>custom_plans</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>lefttree</name></name> <operator>=</operator> <call><name>ExecInitNode</name><argument_list>(<argument><expr><name>subplan</name></expr></argument>, <argument><expr><name>estate</name></expr></argument>, <argument><expr><name>eflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ExecAssignExprContext</name><argument_list>(<argument><expr><name>estate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ExecInitScanTupleSlot</name><argument_list>(<argument><expr><name>estate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ss</name></name></expr></argument>,
                          <argument><expr><call><name>ExecGetResultType</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>lefttree</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * When MERGE is not the last clause in a cypher query. Setup projection
     * information to pass to the parent execution node.
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CYPHER_CLAUSE_IS_TERMINAL</name><argument_list>(<argument><expr><name><name>css</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>TupleDesc</name></type> <name>tupdesc</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ss_ScanTupleSlot</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name></name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>ExecAssignProjectionInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name></name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * For each vertex and edge in the path, setup the information
     * needed if we need to create them.
     */</comment>
    <macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>css-&gt;path-&gt;target_nodes</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>cypher_target_node</name> <modifier>*</modifier></type><name>cypher_node</name> <init>=
            <expr><operator>(</operator><name>cypher_target_node</name> <operator>*</operator><operator>)</operator><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Relation</name></type> <name>rel</name></decl>;</decl_stmt>

        <comment type="block">/*
         * This entity is refrences an entity that is already declared. Either
         * by a previous clause or an entity earlier in the MERGE path. In both
         * cases, this target_entry will not create data, only reference data
         * that already exists.
         */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CYPHER_TARGET_NODE_INSERT_ENTITY</name><argument_list>(<argument><expr><name><name>cypher_node</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Open relation and aquire a row exclusive lock.</comment>
        <expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name><name>cypher_node</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Initialize resultRelInfo for the vertex</comment>
        <expr_stmt><expr><name><name>cypher_node</name><operator>-&gt;</operator><name>resultRelInfo</name></name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>ResultRelInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>InitResultRelInfo</name><argument_list>(<argument><expr><name><name>cypher_node</name><operator>-&gt;</operator><name>resultRelInfo</name></name></expr></argument>, <argument><expr><name>rel</name></expr></argument>,
                          <argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>estate</name><operator>-&gt;</operator><name>es_range_table</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                          <argument><expr><name><name>estate</name><operator>-&gt;</operator><name>es_instrument</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Open all indexes for the relation</comment>
        <expr_stmt><expr><call><name>ExecOpenIndices</name><argument_list>(<argument><expr><name><name>cypher_node</name><operator>-&gt;</operator><name>resultRelInfo</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Setup the relation's tuple slot</comment>
        <expr_stmt><expr><name><name>cypher_node</name><operator>-&gt;</operator><name>elemTupleSlot</name></name> <operator>=</operator> <call><name>ExecInitExtraTupleSlot</name><argument_list>(
            <argument><expr><name>estate</name></expr></argument>,
            <argument><expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name><name>cypher_node</name><operator>-&gt;</operator><name>resultRelInfo</name><operator>-&gt;</operator><name>ri_RelationDesc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>cypher_node</name><operator>-&gt;</operator><name>id_expr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>cypher_node</name><operator>-&gt;</operator><name>id_expr_state</name></name> <operator>=</operator>
                <call><name>ExecInitExpr</name><argument_list>(<argument><expr><name><name>cypher_node</name><operator>-&gt;</operator><name>id_expr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>PlanState</name> <operator>*</operator><operator>)</operator><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>cypher_node</name><operator>-&gt;</operator><name>prop_expr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>cypher_node</name><operator>-&gt;</operator><name>prop_expr_state</name></name> <operator>=</operator>
                <call><name>ExecInitExpr</name><argument_list>(<argument><expr><name><name>cypher_node</name><operator>-&gt;</operator><name>prop_expr</name></name></expr></argument>, <argument><expr><operator>(</operator><name>PlanState</name> <operator>*</operator><operator>)</operator><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>

    <comment type="block">/*
     * Postgres does not assign the es_output_cid in queries that do
     * not write to disk, ie: SELECT commands. We need the command id
     * for our clauses, and we may need to initialize it. We cannot use
     * GetCurrentCommandId because there may be other cypher clauses
     * that have modified the command id.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>estate</name><operator>-&gt;</operator><name>es_output_cid</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>estate</name><operator>-&gt;</operator><name>es_output_cid</name></name> <operator>=</operator> <name><name>estate</name><operator>-&gt;</operator><name>es_snapshot</name><operator>-&gt;</operator><name>curcid</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* store the currentCommandId for this instance */</comment>
    <expr_stmt><expr><name><name>css</name><operator>-&gt;</operator><name>base_currentCommandId</name></name> <operator>=</operator> <call><name>GetCurrentCommandId</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Increment_Estate_CommandId</name><argument_list>(<argument><expr><name>estate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Checks the subtree to see if the lateral join representing the MERGE path
 * found results. Returns true if the path does not exist and must be created,
 * false otherwise.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>check_path</name><parameter_list>(<parameter><decl><type><name>cypher_merge_custom_scan_state</name> <modifier>*</modifier></type><name>css</name></decl></parameter>,
                       <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cypher_create_path</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name><name>css</name><operator>-&gt;</operator><name>path</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

    <macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>path-&gt;target_nodes</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>cypher_target_node</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block">/*
         * If target_node as a valid attribute number and is a node not
         * declared in a previous clause, check the tuple position in the
         * slot. If the slot is null, the path was not found. The rules
         * state that if one part of the path does not exists, the whold
         * path must be created.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>tuple_position</name></name> <operator>!=</operator> <name>InvalidAttrNumber</name> <operator>||</operator>
            <operator>(</operator><operator>(</operator><name><name>node</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CYPHER_TARGET_NODE_MERGE_EXISTS</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/*
             * Attribute number is 1 indexed and tts_values is 0 indexed,
             * offset by 1.
             */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>slot</name><operator>-&gt;</operator><name>tts_isnull</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>tuple_position</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition>
            <block>{<block_content>
                <return>return <expr><name>true</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block>

    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>process_path</name><parameter_list>(<parameter><decl><type><name>cypher_merge_custom_scan_state</name> <modifier>*</modifier></type><name>css</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cypher_create_path</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name><name>css</name><operator>-&gt;</operator><name>path</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name> <init>= <expr><call><name>list_head</name><argument_list>(<argument><expr><name><name>path</name><operator>-&gt;</operator><name>target_nodes</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * Create the first vertex. The create_vertex function will
     * create the rest of the path, if necessary.
     */</comment>
    <expr_stmt><expr><call><name>merge_vertex</name><argument_list>(<argument><expr><name>css</name></expr></argument>, <argument><expr><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>lnext</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <comment type="block">/*
     * If this path is a variable, take the list that was accumulated
     * in the vertex/edge creation, create a path datum, and add to the
     * scantuple slot.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>path</name><operator>-&gt;</operator><name>path_attr_num</name></name> <operator>!=</operator> <name>InvalidAttrNumber</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name> <init>= <expr><name><name>css</name><operator>-&gt;</operator><name>css</name><operator>.</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>ps_ExprContext</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>scantuple</name> <init>= <expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_scantuple</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Datum</name></type> <name>result</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>make_path</name><argument_list>(<argument><expr><name><name>css</name><operator>-&gt;</operator><name>path_values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>scantuple</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name><name>path</name><operator>-&gt;</operator><name>path_attr_num</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>scantuple</name><operator>-&gt;</operator><name>tts_isnull</name><index>[<expr><name><name>path</name><operator>-&gt;</operator><name>path_attr_num</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Function that handles the case where MERGE is the only clause in the query.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>process_simple_merge</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cypher_merge_custom_scan_state</name> <modifier>*</modifier></type><name>css</name> <init>=
        <expr><operator>(</operator><name>cypher_merge_custom_scan_state</name> <operator>*</operator><operator>)</operator><name>node</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name> <init>= <expr><name><name>css</name><operator>-&gt;</operator><name>css</name><operator>.</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>state</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>

    <comment type="block">/*Process the subtree first */</comment>
    <macro><name>Decrement_Estate_CommandId</name><argument_list>(<argument>estate</argument>)</argument_list></macro>
    <expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>ExecProcNode</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>lefttree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>Increment_Estate_CommandId</name><argument_list>(<argument>estate</argument>)</argument_list></macro>

    <if_stmt><if>if <condition>(<expr><call><name>TupIsNull</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>ps_ExprContext</name></name></expr></init></decl>;</decl_stmt>

        <comment type="block">/* setup the scantuple that the process_path needs */</comment>
        <expr_stmt><expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_scantuple</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>lefttree</name><operator>-&gt;</operator><name>ps_ResultTupleSlot</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_scantuple</name><operator>-&gt;</operator><name>tts_isempty</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>process_path</name><argument_list>(<argument><expr><name>css</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Iterate through the TupleTableSlot's tts_values and marks the isnull field
 * with true.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mark_tts_isnull</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>numberOfAttributes</name> <init>= <expr><name><name>slot</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name><operator>-&gt;</operator><name>natts</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numberOfAttributes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Datum</name></type> <name>val</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>slot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <operator>(</operator><name>Datum</name><operator>)</operator><name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_isnull</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Function that is called mid-execution. This function will call
 * its subtree in the execution tree, and depending on the results
 * create the new path, and depending on the the context of the MERGE
 * within the query pass data to the parent execution node.
 *
 * Returns a TupleTableSlot with the next tuple to it parent or
 * Returns NULL when MERGE has no more tuples to emit.
 */</comment>
<function><type><specifier>static</specifier> <name>TupleTableSlot</name> <modifier>*</modifier></type><name>exec_cypher_merge</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cypher_merge_custom_scan_state</name> <modifier>*</modifier></type><name>css</name> <init>=
        <expr><operator>(</operator><name>cypher_merge_custom_scan_state</name> <operator>*</operator><operator>)</operator><name>node</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name> <init>= <expr><name><name>css</name><operator>-&gt;</operator><name>css</name><operator>.</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>state</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name> <init>= <expr><name><name>css</name><operator>-&gt;</operator><name>css</name><operator>.</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>ps_ExprContext</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>terminal</name> <init>= <expr><call><name>CYPHER_CLAUSE_IS_TERMINAL</name><argument_list>(<argument><expr><name><name>css</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * There are three cases that dictate the flow of the execution logic.
     *
     * 1. MERGE is not the first clause in the cypher query.
     * 2. MERGE is the first clause and there are no following clauses.
     * 3. MERGE is the first clause and there are following clauses.
     * CYPHER_CLAUSE_FLAG_PREVIOUS_CLAUSE
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>CYPHER_CLAUSE_HAS_PREVIOUS_CLAUSE</name><argument_list>(<argument><expr><name><name>css</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * Case 1: MERGE is not the first clause in the cypher query.
         *
         * For this case, we need to process all tuples give to us by the
         * previous clause. When we receive a tuple from the previous clause:
         * check to see if the left lateral join found the pattern already. If
         * it did, we don't need to create the pattern. If the lateral join did
         * not find the whole path, create the whole path.
         *
         * If this is a terminal clause, process all tuples. If not, pass the
         * tuple to up the execution tree.
         */</comment>
        <do>do
        <block>{<block_content>
            <comment type="block">/*Process the subtree first */</comment>
            <macro><name>Decrement_Estate_CommandId</name><argument_list>(<argument>estate</argument>)</argument_list></macro>
            <expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>ExecProcNode</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>lefttree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <macro><name>Increment_Estate_CommandId</name><argument_list>(<argument>estate</argument>)</argument_list></macro>

            <comment type="block">/*
             * We are done processing the subtree, mark as terminal
             * so the function returns NULL.
             */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>TupIsNull</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>terminal</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <comment type="block">/* setup the scantuple that the process_path needs */</comment>
            <expr_stmt><expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_scantuple</name></name> <operator>=</operator>
                <name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>lefttree</name><operator>-&gt;</operator><name>ps_ProjInfo</name><operator>-&gt;</operator><name>pi_exprContext</name><operator>-&gt;</operator><name>ecxt_scantuple</name></name></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>check_path</name><argument_list>(<argument><expr><name>css</name></expr></argument>, <argument><expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_scantuple</name></name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>process_path</name><argument_list>(<argument><expr><name>css</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

        </block_content>}</block> while <condition>(<expr><name>terminal</name></expr>)</condition>;</do>

        <comment type="block">/* if this was a terminal MERGE just return NULL */</comment>
        <if_stmt><if>if <condition>(<expr><name>terminal</name></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">//return ExecProject(node-&gt;ss.ps.ps_ProjInfo);</comment>
        <expr_stmt><expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_scantuple</name></name> <operator>=</operator> <call><name>ExecProject</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>lefttree</name><operator>-&gt;</operator><name>ps_ProjInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>ExecProject</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>ps_ProjInfo</name></name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>terminal</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * Case 2: MERGE is the first clause and there are no following clauses
         *
         * For case 2, check to see if we found the pattern, if not create it.
         * Return NULL in either cases, because no rows are expected.
         */</comment>
        <expr_stmt><expr><call><name>process_simple_merge</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * Case 2 always returns NULL the first time exec_cypher_merge is
         * called.
         */</comment>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/*
         * Case 3: MERGE is the first clause and there are following clauses.
         *
         * Case three has two subcases:
         *
         * 1. The already path exists.
         * 2. The path does not exist.
         */</comment>

        <comment type="block">/*
         * Part of Case 2.
         *
         * If created_new_path is marked as true. The path did not exist and
         * MERGE created it. We have already passed that information up the
         * execution tree, and now we tell MERGE's parents in the execution
         * tree there is no more tuples to pass.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>css</name><operator>-&gt;</operator><name>created_new_path</name></name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/*
             * If the created_new_path is set to true. Then MERGE should not
             * have found a path, because this should only be set to true if
             * merge found sub-case 1
             */</comment>
            <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>css</name><operator>-&gt;</operator><name>found_a_path</name></name> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/*
         * Process the subtree. The subtree will only consist of the MERGE
         * path.
         */</comment>
        <macro><name>Decrement_Estate_CommandId</name><argument_list>(<argument>estate</argument>)</argument_list></macro>
        <expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>ExecProcNode</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>lefttree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>Increment_Estate_CommandId</name><argument_list>(<argument>estate</argument>)</argument_list></macro>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TupIsNull</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/*
             * Part of Sub-Case 1.
             *
             * If we found a path, mark the found_a_path flag to true and
             * pass the tuple to the next execution tree. When the path
             * exists, we don't need to create/modify anything.
             */</comment>
            <expr_stmt><expr><name><name>css</name><operator>-&gt;</operator><name>found_a_path</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_scantuple</name></name> <operator>=</operator> <call><name>ExecProject</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>lefttree</name><operator>-&gt;</operator><name>ps_ProjInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>ExecProject</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>ps_ProjInfo</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>TupIsNull</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>css</name><operator>-&gt;</operator><name>found_a_path</name></name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/*
             * Part of Sub-Case 2.
             *
             * MERGE found the path(s) that already exists and we are done passing
             * all the found path(s) up the execution tree.
             */</comment>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="block">/*
             * Part of Sub-Case 1.
             *
             * MERGE could not find the path in memory and the sub-node in the
             * execution tree returned NULL. We need to create the path and
             * pass the tuple to the next execution node. The subtrees will
             * begin its cleanup process when there are no more tuples found.
             * So we will need to create a TupleTableSlot and populate with the
             * information from the newly created path that the query needs.
             */</comment>
            <decl_stmt><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>ps_ExprContext</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>SubqueryScanState</name> <modifier>*</modifier></type><name>sss</name> <init>= <expr><operator>(</operator><name>SubqueryScanState</name> <operator>*</operator><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>lefttree</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>HeapTuple</name></type> <name>heap_tuple</name></decl>;</decl_stmt>

            <comment type="block">/*
             * Our child execution node is always a subquery. If not there
             * is an issue.
             */</comment>
            <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>IsA</name><argument_list>(<argument><expr><name>sss</name></expr></argument>, <argument><expr><name>SubqueryScanState</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/*
             * found_a_path should only be set to true if MERGE is following
             * sub-case 2.
             */</comment>
            <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>css</name><operator>-&gt;</operator><name>found_a_path</name></name> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/*
             * This block of sub-case 1 should only be exectuted once. To
             * create the single path if the path does not exist. If we find
             * ourselves here again, the internal state of the MERGE execution
             * node was incorrectly altered.
             */</comment>
            <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>css</name><operator>-&gt;</operator><name>created_new_path</name></name> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/*
             *  Postgres cleared the child tuple table slot, we need to remake
             *  it.
             */</comment>
            <expr_stmt><expr><call><name>ExecInitScanTupleSlot</name><argument_list>(<argument><expr><name>estate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sss</name><operator>-&gt;</operator><name>ss</name></name></expr></argument>,
                                  <argument><expr><call><name>ExecGetResultType</name><argument_list>(<argument><expr><name><name>sss</name><operator>-&gt;</operator><name>subplan</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


            <comment type="block">/* setup the scantuple that the process_path needs */</comment>
            <expr_stmt><expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_scantuple</name></name> <operator>=</operator> <name><name>sss</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ss_ScanTupleSlot</name></name></expr>;</expr_stmt>

            <comment type="line">// create the path</comment>
            <expr_stmt><expr><call><name>process_path</name><argument_list>(<argument><expr><name>css</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// mark the create_new_path flag to true.</comment>
            <expr_stmt><expr><name><name>css</name><operator>-&gt;</operator><name>created_new_path</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

            <comment type="block">/*
             *  find the tts_values that process_path did not populate and
             *  mark as null.
             */</comment>
            <expr_stmt><expr><call><name>mark_tts_isnull</name><argument_list>(<argument><expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_scantuple</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// create the physical heap tuple</comment>
            <expr_stmt><expr><name>heap_tuple</name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(
                                <argument><expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_scantuple</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name></name></expr></argument>,
                                <argument><expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_scantuple</name><operator>-&gt;</operator><name>tts_values</name></name></expr></argument>,
                                <argument><expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_scantuple</name><operator>-&gt;</operator><name>tts_isnull</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// store the heap tuble</comment>
            <expr_stmt><expr><call><name>ExecStoreTuple</name><argument_list>(<argument><expr><name>heap_tuple</name></expr></argument>, <argument><expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_scantuple</name></name></expr></argument>, <argument><expr><name>InvalidBuffer</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/*
             * make the subquery's projection scan slot be the tuple table we
             * created and run the projection logic.
             */</comment>
            <expr_stmt><expr><name><name>sss</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>ps_ProjInfo</name><operator>-&gt;</operator><name>pi_exprContext</name><operator>-&gt;</operator><name>ecxt_scantuple</name></name> <operator>=</operator>
                                                        <name><name>econtext</name><operator>-&gt;</operator><name>ecxt_scantuple</name></name></expr>;</expr_stmt>

            <comment type="line">// assign this to be our scantuple</comment>
            <expr_stmt><expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_scantuple</name></name> <operator>=</operator> <call><name>ExecProject</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>lefttree</name><operator>-&gt;</operator><name>ps_ProjInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/*
             *  run the merge's projection logic and pass to its parent
             *  execution node
             */</comment>
            <return>return <expr><call><name>ExecProject</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>ps_ProjInfo</name></name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Function called at the end of the execution phase to cleanup
 * MERGE.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>end_cypher_merge</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cypher_merge_custom_scan_state</name> <modifier>*</modifier></type><name>css</name> <init>=
        <expr><operator>(</operator><name>cypher_merge_custom_scan_state</name> <operator>*</operator><operator>)</operator><name>node</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cypher_create_path</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name><name>css</name><operator>-&gt;</operator><name>path</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

    <comment type="line">// increment the command counter</comment>
    <expr_stmt><expr><call><name>CommandCounterIncrement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ExecEndNode</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>lefttree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>path-&gt;target_nodes</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>cypher_target_node</name> <modifier>*</modifier></type><name>cypher_node</name> <init>=
            <expr><operator>(</operator><name>cypher_target_node</name> <operator>*</operator><operator>)</operator><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CYPHER_TARGET_NODE_INSERT_ENTITY</name><argument_list>(<argument><expr><name><name>cypher_node</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <comment type="line">// close all indices for the node</comment>
        <expr_stmt><expr><call><name>ExecCloseIndices</name><argument_list>(<argument><expr><name><name>cypher_node</name><operator>-&gt;</operator><name>resultRelInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// close the relation itself</comment>
        <expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name><name>cypher_node</name><operator>-&gt;</operator><name>resultRelInfo</name><operator>-&gt;</operator><name>ri_RelationDesc</name></name></expr></argument>,
                   <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
</block_content>}</block></function>

<comment type="block">/*
 * Rescan is mostly used by join execution nodes, and several others.
 * Since we are creating data here its not safe to rescan the node. Throw
 * an error and try to help the uer understand what went wrong.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>rescan_cypher_merge</name><parameter_list>(<parameter><decl><type><name>CustomScanState</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
                    <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cypher merge clause cannot be rescaned"</literal></expr></argument>)</argument_list></call><operator>,</operator>
                    <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"its unsafe to use joins in a query with a Cypher MERGE clause"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Extracts the metadata information that MERGE needs from the
 * merge_custom_scan node and creates the cypher_merge_custom_scan_state
 * for the execution phase.
 */</comment>
<function><type><name>Node</name> <modifier>*</modifier></type><name>create_cypher_merge_plan_state</name><parameter_list>(<parameter><decl><type><name>CustomScan</name> <modifier>*</modifier></type><name>cscan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cypher_merge_custom_scan_state</name> <modifier>*</modifier></type><name>cypher_css</name> <init>=
        <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cypher_merge_custom_scan_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cypher_merge_information</name> <modifier>*</modifier></type><name>merge_information</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>serialized_data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Const</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>cypher_css</name><operator>-&gt;</operator><name>cs</name></name> <operator>=</operator> <name>cscan</name></expr>;</expr_stmt>

    <comment type="line">// get the serialized data structure from the Const and deserialize it.</comment>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>linitial</name><argument_list>(<argument><expr><name><name>cscan</name><operator>-&gt;</operator><name>custom_private</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>serialized_data</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>constvalue</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>merge_information</name> <operator>=</operator> <call><name>stringToNode</name><argument_list>(<argument><expr><name>serialized_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>is_ag_node</name><argument_list>(<argument><expr><name>merge_information</name></expr></argument>, <argument><expr><name>cypher_merge_information</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>cypher_css</name><operator>-&gt;</operator><name>merge_information</name></name> <operator>=</operator> <name>merge_information</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cypher_css</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name><name>merge_information</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cypher_css</name><operator>-&gt;</operator><name>merge_function_attr</name></name> <operator>=</operator> <name><name>merge_information</name><operator>-&gt;</operator><name>merge_function_attr</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cypher_css</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <name><name>merge_information</name><operator>-&gt;</operator><name>path</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cypher_css</name><operator>-&gt;</operator><name>created_new_path</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cypher_css</name><operator>-&gt;</operator><name>found_a_path</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cypher_css</name><operator>-&gt;</operator><name>graph_oid</name></name> <operator>=</operator> <name><name>merge_information</name><operator>-&gt;</operator><name>graph_oid</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>cypher_css</name><operator>-&gt;</operator><name>css</name><operator>.</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>T_CustomScanState</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cypher_css</name><operator>-&gt;</operator><name>css</name><operator>.</operator><name>methods</name></name> <operator>=</operator> <operator>&amp;</operator><name>cypher_merge_exec_methods</name></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>cypher_css</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Creates the vertex entity, returns the vertex's id in case the caller is
 * the create_edge function.
 */</comment>
<function><type><specifier>static</specifier> <name>Datum</name></type> <name>merge_vertex</name><parameter_list>(<parameter><decl><type><name>cypher_merge_custom_scan_state</name> <modifier>*</modifier></type><name>css</name></decl></parameter>,
                          <parameter><decl><type><name>cypher_target_node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>next</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>isNull</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name></type> <name>id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name> <init>= <expr><name><name>css</name><operator>-&gt;</operator><name>css</name><operator>.</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>state</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name> <init>= <expr><name><name>css</name><operator>-&gt;</operator><name>css</name><operator>.</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>ps_ExprContext</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ResultRelInfo</name> <modifier>*</modifier></type><name>resultRelInfo</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>resultRelInfo</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>elemTupleSlot</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>elemTupleSlot</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>scanTupleSlot</name> <init>= <expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_scantuple</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>LABEL_KIND_VERTEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Vertices in a path might already exists. If they do get the id
     * to pass to the edges before and after it. Otherwise, insert the
     * new vertex into it's table and then pass the id along.
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>CYPHER_TARGET_NODE_INSERT_ENTITY</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ResultRelInfo</name> <modifier>*</modifier></type><name>old_estate_es_result_relation_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Datum</name></type> <name>prop</name></decl>;</decl_stmt>
        <comment type="block">/*
         * Set estate's result relation to the vertex's result
         * relation.
         *
         * Note: This obliterates what was their previously
         */</comment>

        <comment type="block">/* save the old result relation info */</comment>
        <expr_stmt><expr><name>old_estate_es_result_relation_info</name> <operator>=</operator> <name><name>estate</name><operator>-&gt;</operator><name>es_result_relation_info</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>estate</name><operator>-&gt;</operator><name>es_result_relation_info</name></name> <operator>=</operator> <name>resultRelInfo</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>ExecClearTuple</name><argument_list>(<argument><expr><name>elemTupleSlot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* get the next graphid for this vertex */</comment>
        <expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>ExecEvalExpr</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>id_expr_state</name></name></expr></argument>, <argument><expr><name>econtext</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>elemTupleSlot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>vertex_tuple_id</name></expr>]</index></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>elemTupleSlot</name><operator>-&gt;</operator><name>tts_isnull</name><index>[<expr><name>vertex_tuple_id</name></expr>]</index></name> <operator>=</operator> <name>isNull</name></expr>;</expr_stmt>

        <comment type="block">/* get the properties for this vertex */</comment>
        <expr_stmt><expr><name>prop</name> <operator>=</operator> <call><name>ExecEvalExpr</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>prop_expr_state</name></name></expr></argument>, <argument><expr><name>econtext</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>elemTupleSlot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>vertex_tuple_properties</name></expr>]</index></name> <operator>=</operator> <name>prop</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>elemTupleSlot</name><operator>-&gt;</operator><name>tts_isnull</name><index>[<expr><name>vertex_tuple_properties</name></expr>]</index></name> <operator>=</operator> <name>isNull</name></expr>;</expr_stmt>

        <comment type="block">/*
         * Insert the new vertex.
         *
         * Depending on the currentCommandId, we need to do this one of two
         * different ways -
         *
         * 1) If they are equal, the currentCommandId hasn't been used for an
         *    update, or it hasn't been incremented after being used. In either
         *    case, we need to use the current one and then increment it so that
         *    the following commands will have visibility of this update. Note,
         *    it isn't our job to update the currentCommandId first and then do
         *    this check.
         *
         * 2) If they are not equal, the currentCommandId has been used and/or
         *    updated. In this case, we can't use it. Otherwise our update won't
         *    be visible to anything that follows, until the currentCommandId is
         *    updated again. Remember, visibility is, greater than but not equal
         *    to, the currentCommandID used for the update. So, in this case we
         *    need to use the original currentCommandId when begin_cypher_merge
         *    was initiated as everything under this instance of merge needs to
         *    be based off of that initial currentCommandId. This allows the
         *    following command to see the updates generated by this instance of
         *    merge.
         */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>css</name><operator>-&gt;</operator><name>base_currentCommandId</name></name> <operator>==</operator> <call><name>GetCurrentCommandId</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>insert_entity_tuple</name><argument_list>(<argument><expr><name>resultRelInfo</name></expr></argument>, <argument><expr><name>elemTupleSlot</name></expr></argument>, <argument><expr><name>estate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/*
             * Increment the currentCommandId since we processed an update. We
             * don't want to do this outside of this block because we don't want
             * to inadvertently or unnecessarily update the commandCounterId of
             * another command.
             */</comment>
            <expr_stmt><expr><call><name>CommandCounterIncrement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>insert_entity_tuple_cid</name><argument_list>(<argument><expr><name>resultRelInfo</name></expr></argument>, <argument><expr><name>elemTupleSlot</name></expr></argument>, <argument><expr><name>estate</name></expr></argument>,
                                    <argument><expr><name><name>css</name><operator>-&gt;</operator><name>base_currentCommandId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="block">/* restore the old result relation info */</comment>
        <expr_stmt><expr><name><name>estate</name><operator>-&gt;</operator><name>es_result_relation_info</name></name> <operator>=</operator> <name>old_estate_es_result_relation_info</name></expr>;</expr_stmt>

        <comment type="block">/*
         * When the vertex is used by clauses higher in the execution tree
         * we need to create a vertex datum. When the vertex is a variable,
         * add to the scantuple slot. When the vertex is part of a path
         * variable, add to the list.
         */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>CYPHER_TARGET_NODE_OUTPUT</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>Datum</name></type> <name>result</name></decl>;</decl_stmt>

            <comment type="block">/* make the vertex agtype */</comment>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>make_vertex</name><argument_list>(
                <argument><expr><name>id</name></expr></argument>, <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>label_name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* append to the path list */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>CYPHER_TARGET_NODE_IN_PATH</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>css</name><operator>-&gt;</operator><name>path_values</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>css</name><operator>-&gt;</operator><name>path_values</name></name></expr></argument>,
                                           <argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="block">/*
             * Put the vertex in the correct spot in the scantuple, so parent
             * execution nodes can reference the newly created variable.
             */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>CYPHER_TARGET_NODE_IS_VARIABLE</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>scanTupleSlot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>tuple_position</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>scanTupleSlot</name><operator>-&gt;</operator><name>tts_isnull</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>tuple_position</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Datum</name></type> <name>d</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>id_value</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>scantuple</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PlanState</name> <modifier>*</modifier></type><name>ps</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>ps</name> <operator>=</operator> <name><name>css</name><operator>-&gt;</operator><name>css</name><operator>.</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>lefttree</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>scantuple</name> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>ps_ExprContext</name><operator>-&gt;</operator><name>ecxt_scantuple</name></name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>scantuple</name><operator>-&gt;</operator><name>tts_isnull</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>tuple_position</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Existing variable %s cannot be NULL in MERGE clause"</literal></expr></argument>,
                 <argument><expr><name><name>node</name><operator>-&gt;</operator><name>variable_name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* get the vertex agtype in the scanTupleSlot */</comment>
        <expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>scantuple</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>tuple_position</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>DATUM_GET_AGTYPE_P</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Convert to an agtype value */</comment>
        <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>get_ith_agtype_value_from_container</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>AGTV_VERTEX</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"agtype must resolve to a vertex"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/* extract the id agtype field */</comment>
        <expr_stmt><expr><name>id_value</name> <operator>=</operator> <call><name>GET_AGTYPE_VALUE_OBJECT_VALUE</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* extract the graphid and cast to a Datum */</comment>
        <expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>GRAPHID_GET_DATUM</name><argument_list>(<argument><expr><name><name>id_value</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>int_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * Its possible the variable has already been deleted. There are two
         * ways this can happen. One is the query explicitly deleted the
         * variable, the is_deleted flag will catch that. However, it is
         * possible the user deleted the vertex using another variable name. We
         * need to scan the table to find the vertex's current status relative
         * to this CREATE clause. If the variable was initially created in this
         * clause, we can skip this check, because the transaction system
         * guarantees that nothing can happen to that tuple, as far as we are
         * concerned with at this time.
         */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SAFE_TO_SKIP_EXISTENCE_CHECK</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>entity_exists</name><argument_list>(<argument><expr><name>estate</name></expr></argument>, <argument><expr><name><name>css</name><operator>-&gt;</operator><name>graph_oid</name></name></expr></argument>, <argument><expr><call><name>DATUM_GET_GRAPHID</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OBJECT_NOT_IN_PREREQUISITE_STATE</name></expr></argument>)</argument_list></call><operator>,</operator>
                     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"vertex assigned to variable %s was deleted"</literal></expr></argument>,
                            <argument><expr><name><name>node</name><operator>-&gt;</operator><name>variable_name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/*
         * Add the Datum to the list of entities for creating the path variable
         */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>CYPHER_TARGET_NODE_IN_PATH</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>Datum</name></type> <name>vertex</name> <init>= <expr><name><name>scanTupleSlot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>tuple_position</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>css</name><operator>-&gt;</operator><name>path_values</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>css</name><operator>-&gt;</operator><name>path_values</name></name></expr></argument>,
                                       <argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>vertex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* If the path continues, create the next edge, passing the vertex's id. */</comment>
    <if_stmt><if>if <condition>(<expr><name>next</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>merge_edge</name><argument_list>(<argument><expr><name>css</name></expr></argument>, <argument><expr><call><name>lfirst</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><call><name>lnext</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Create the edge entity.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>merge_edge</name><parameter_list>(<parameter><decl><type><name>cypher_merge_custom_scan_state</name> <modifier>*</modifier></type><name>css</name></decl></parameter>,
                       <parameter><decl><type><name>cypher_target_node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>prev_vertex_id</name></decl></parameter>,
                       <parameter><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>next</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>isNull</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name> <init>= <expr><name><name>css</name><operator>-&gt;</operator><name>css</name><operator>.</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>state</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name> <init>= <expr><name><name>css</name><operator>-&gt;</operator><name>css</name><operator>.</operator><name>ss</name><operator>.</operator><name>ps</name><operator>.</operator><name>ps_ExprContext</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ResultRelInfo</name> <modifier>*</modifier></type><name>resultRelInfo</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>resultRelInfo</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ResultRelInfo</name> <modifier>*</modifier></type><name>old_estate_es_result_relation_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>elemTupleSlot</name> <init>= <expr><name><name>node</name><operator>-&gt;</operator><name>elemTupleSlot</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name></type> <name>id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name></type> <name>start_id</name></decl>, <decl><type ref="prev"/><name>end_id</name></decl>, <decl><type ref="prev"/><name>next_vertex_id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>prev_path</name> <init>= <expr><name><name>css</name><operator>-&gt;</operator><name>path_values</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name></type> <name>prop</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>LABEL_KIND_EDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>lfirst</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Create the next vertex before creating the edge. We need the
     * next vertex's id.
     */</comment>
    <expr_stmt><expr><name><name>css</name><operator>-&gt;</operator><name>path_values</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>next_vertex_id</name> <operator>=</operator> <call><name>merge_vertex</name><argument_list>(<argument><expr><name>css</name></expr></argument>, <argument><expr><call><name>lfirst</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>lnext</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Set the start and end vertex ids
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>dir</name></name> <operator>==</operator> <name>CYPHER_REL_DIR_RIGHT</name> <operator>||</operator> <name><name>node</name><operator>-&gt;</operator><name>dir</name></name> <operator>==</operator> <name>CYPHER_REL_DIR_NONE</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// create pattern (prev_vertex)-[edge]-&gt;(next_vertex)</comment>
        <expr_stmt><expr><name>start_id</name> <operator>=</operator> <name>prev_vertex_id</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>end_id</name> <operator>=</operator> <name>next_vertex_id</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>dir</name></name> <operator>==</operator> <name>CYPHER_REL_DIR_LEFT</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// create pattern (prev_vertex)&lt;-[edge]-(next_vertex)</comment>
        <expr_stmt><expr><name>start_id</name> <operator>=</operator> <name>next_vertex_id</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>end_id</name> <operator>=</operator> <name>prev_vertex_id</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"edge direction must be specified in a MERGE clause"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/*
     * Set estate's result relation to the vertex's result
     * relation.
     *
     * Note: This obliterates what was their previously
     */</comment>

    <comment type="block">/* save the old result relation info */</comment>
    <expr_stmt><expr><name>old_estate_es_result_relation_info</name> <operator>=</operator> <name><name>estate</name><operator>-&gt;</operator><name>es_result_relation_info</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>estate</name><operator>-&gt;</operator><name>es_result_relation_info</name></name> <operator>=</operator> <name>resultRelInfo</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ExecClearTuple</name><argument_list>(<argument><expr><name>elemTupleSlot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Graph Id for the edge</comment>
    <expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>ExecEvalExpr</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>id_expr_state</name></name></expr></argument>, <argument><expr><name>econtext</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>elemTupleSlot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>edge_tuple_id</name></expr>]</index></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>elemTupleSlot</name><operator>-&gt;</operator><name>tts_isnull</name><index>[<expr><name>edge_tuple_id</name></expr>]</index></name> <operator>=</operator> <name>isNull</name></expr>;</expr_stmt>

    <comment type="line">// Graph id for the starting vertex</comment>
    <expr_stmt><expr><name><name>elemTupleSlot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>edge_tuple_start_id</name></expr>]</index></name> <operator>=</operator> <name>start_id</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>elemTupleSlot</name><operator>-&gt;</operator><name>tts_isnull</name><index>[<expr><name>edge_tuple_start_id</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

    <comment type="line">// Graph id for the ending vertex</comment>
    <expr_stmt><expr><name><name>elemTupleSlot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>edge_tuple_end_id</name></expr>]</index></name> <operator>=</operator> <name>end_id</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>elemTupleSlot</name><operator>-&gt;</operator><name>tts_isnull</name><index>[<expr><name>edge_tuple_end_id</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

    <comment type="line">// Edge's properties map</comment>
    <expr_stmt><expr><name>prop</name> <operator>=</operator> <call><name>ExecEvalExpr</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>prop_expr_state</name></name></expr></argument>, <argument><expr><name>econtext</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>elemTupleSlot</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name>edge_tuple_properties</name></expr>]</index></name> <operator>=</operator> <name>prop</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>elemTupleSlot</name><operator>-&gt;</operator><name>tts_isnull</name><index>[<expr><name>edge_tuple_properties</name></expr>]</index></name> <operator>=</operator> <name>isNull</name></expr>;</expr_stmt>

    <comment type="line">// Insert the new edge</comment>
    <expr_stmt><expr><call><name>insert_entity_tuple</name><argument_list>(<argument><expr><name>resultRelInfo</name></expr></argument>, <argument><expr><name>elemTupleSlot</name></expr></argument>, <argument><expr><name>estate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* restore the old result relation info */</comment>
    <expr_stmt><expr><name><name>estate</name><operator>-&gt;</operator><name>es_result_relation_info</name></name> <operator>=</operator> <name>old_estate_es_result_relation_info</name></expr>;</expr_stmt>

    <comment type="block">/*
     * When the edge is used by clauses higher in the execution tree
     * we need to create an edge datum. When the edge is a variable,
     * add to the scantuple slot. When the edge is part of a path
     * variable, add to the list.
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>CYPHER_TARGET_NODE_OUTPUT</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Datum</name></type> <name>result</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>make_edge</name><argument_list>(
            <argument><expr><name>id</name></expr></argument>, <argument><expr><name>start_id</name></expr></argument>, <argument><expr><name>end_id</name></expr></argument>, <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>label_name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// add the Datum to the list of entities for creating the path variable</comment>
        <if_stmt><if>if <condition>(<expr><call><name>CYPHER_TARGET_NODE_IN_PATH</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>prev_path</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>prev_path</name></expr></argument>, <argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>css</name><operator>-&gt;</operator><name>path_values</name></name> <operator>=</operator> <call><name>list_concat</name><argument_list>(<argument><expr><name>prev_path</name></expr></argument>, <argument><expr><name><name>css</name><operator>-&gt;</operator><name>path_values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Add the entity to the TupleTableSlot if necessary</comment>
        <if_stmt><if>if <condition>(<expr><call><name>CYPHER_TARGET_NODE_IS_VARIABLE</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>scantuple</name> <init>= <expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_scantuple</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name>scantuple</name><operator>-&gt;</operator><name>tts_values</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>tuple_position</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>scantuple</name><operator>-&gt;</operator><name>tts_isnull</name><index>[<expr><name><name>node</name><operator>-&gt;</operator><name>tuple_position</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
