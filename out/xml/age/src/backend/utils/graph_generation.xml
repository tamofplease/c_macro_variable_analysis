<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/age/src/backend/utils/graph_generation.c"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/genam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/heapam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/dependency.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/objectaddress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/defrem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/schemacmds.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/tablecmds.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/makefuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/nodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/parsenodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/pg_list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/value.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/fmgroids.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/relcache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/ag_graph.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/ag_label.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/label_commands.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/graphid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/graph_commands.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/load/age_load.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/load/ag_load_edges.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/load/ag_load_labels.h"</cpp:file></cpp:include>


<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>create_complete_graph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/*
* SELECT * FROM ag_catalog.create_complete_graph('graph_name',no_of_nodes, 'edge_label', 'node_label'=NULL);
*/</comment>

<function><type><name>Datum</name></type> <name>create_complete_graph</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>   
    <decl_stmt><decl><type><name>Oid</name></type> <name>graph_id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Name</name></type> <name>graph_name</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int64</name></type> <name>no_vertices</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>vid</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>eid</name></decl>, <decl><type ref="prev"/><name>start_vid</name></decl>, <decl><type ref="prev"/><name>end_vid</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Name</name></type> <name>vtx_label_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Name</name></type> <name>edge_label_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type> <name>vtx_label_id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32</name></type> <name>edge_label_id</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>props</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>graphid</name></type> <name>object_graph_id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>graphid</name></type> <name>start_vertex_graph_id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>graphid</name></type> <name>end_vertex_graph_id</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Oid</name></type> <name>vtx_seq_id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type> <name>edge_seq_id</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>graph_name_str</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>vtx_name_str</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>edge_name_str</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>graph_cache_data</name> <modifier>*</modifier></type><name>graph_cache</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>label_cache_data</name> <modifier>*</modifier></type><name>vertex_cache</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>label_cache_data</name> <modifier>*</modifier></type><name>edge_cache</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Oid</name></type> <name>nsp_id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Name</name></type> <name>vtx_seq_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>vtx_seq_name_str</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Name</name></type> <name>edge_seq_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>edge_seq_name_str</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int64</name></type> <name>lid</name></decl>;</decl_stmt> 

    <if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                        <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"graph name can not be NULL"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"number of nodes can not be NULL"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"edge label can not be NULL"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>


    <expr_stmt><expr><name>graph_name</name> <operator>=</operator> <call><name>PG_GETARG_NAME</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>no_vertices</name> <operator>=</operator> <operator>(</operator><name>int64</name><operator>)</operator> <call><name>PG_GETARG_INT64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>edge_label_name</name> <operator>=</operator> <call><name>PG_GETARG_NAME</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>namestrcpy</name><argument_list>(<argument><expr><name>vtx_label_name</name></expr></argument>, <argument><expr><name>AG_DEFAULT_LABEL_VERTEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>graph_name_str</name> <operator>=</operator> <call><name>NameStr</name><argument_list>(<argument><expr><operator>*</operator><name>graph_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>vtx_name_str</name> <operator>=</operator> <name>AG_DEFAULT_LABEL_VERTEX</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>edge_name_str</name> <operator>=</operator> <call><name>NameStr</name><argument_list>(<argument><expr><operator>*</operator><name>edge_label_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>graph_exists</name><argument_list>(<argument><expr><name>graph_name_str</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>create_graph</name></expr></argument>, <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>graph_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>graph_id</name> <operator>=</operator> <call><name>get_graph_oid</name><argument_list>(<argument><expr><name>graph_name_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    
    
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>vtx_label_name</name> <operator>=</operator> <call><name>PG_GETARG_NAME</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>vtx_name_str</name> <operator>=</operator> <call><name>NameStr</name><argument_list>(<argument><expr><operator>*</operator><name>vtx_label_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Check if label with the input name already exists</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>label_exists</name><argument_list>(<argument><expr><name>vtx_name_str</name></expr></argument>, <argument><expr><name>graph_id</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>create_vlabel</name></expr></argument>, <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>graph_name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>vtx_label_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>label_exists</name><argument_list>(<argument><expr><name>edge_name_str</name></expr></argument>, <argument><expr><name>graph_id</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>create_elabel</name></expr></argument>, <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>graph_name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>edge_label_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>   
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>vtx_label_id</name> <operator>=</operator> <call><name>get_label_id</name><argument_list>(<argument><expr><name>vtx_name_str</name></expr></argument>, <argument><expr><name>graph_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>edge_label_id</name> <operator>=</operator> <call><name>get_label_id</name><argument_list>(<argument><expr><name>edge_name_str</name></expr></argument>, <argument><expr><name>graph_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>graph_cache</name> <operator>=</operator> <call><name>search_graph_name_cache</name><argument_list>(<argument><expr><name>graph_name_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>vertex_cache</name> <operator>=</operator> <call><name>search_label_name_graph_cache</name><argument_list>(<argument><expr><name>vtx_name_str</name></expr></argument>,<argument><expr><name>graph_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>edge_cache</name> <operator>=</operator> <call><name>search_label_name_graph_cache</name><argument_list>(<argument><expr><name>edge_name_str</name></expr></argument>,<argument><expr><name>graph_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>nsp_id</name> <operator>=</operator> <name><name>graph_cache</name><operator>-&gt;</operator><name>namespace</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>vtx_seq_name</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>vertex_cache</name><operator>-&gt;</operator><name>seq_name</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>vtx_seq_name_str</name> <operator>=</operator> <call><name>NameStr</name><argument_list>(<argument><expr><operator>*</operator><name>vtx_seq_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>edge_seq_name</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>edge_cache</name><operator>-&gt;</operator><name>seq_name</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>edge_seq_name_str</name> <operator>=</operator> <call><name>NameStr</name><argument_list>(<argument><expr><operator>*</operator><name>edge_seq_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>vtx_seq_id</name> <operator>=</operator> <call><name>get_relname_relid</name><argument_list>(<argument><expr><name>vtx_seq_name_str</name></expr></argument>, <argument><expr><name>nsp_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>edge_seq_id</name> <operator>=</operator> <call><name>get_relname_relid</name><argument_list>(<argument><expr><name>edge_seq_name_str</name></expr></argument>, <argument><expr><name>nsp_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Creating vertices*/</comment>
    <for>for <control>(<init><expr><name>i</name><operator>=</operator><operator>(</operator><name>int64</name><operator>)</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>no_vertices</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>   
        <expr_stmt><expr><name>vid</name> <operator>=</operator> <call><name>nextval_internal</name><argument_list>(<argument><expr><name>vtx_seq_id</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>object_graph_id</name> <operator>=</operator> <call><name>make_graphid</name><argument_list>(<argument><expr><name>vtx_label_id</name></expr></argument>, <argument><expr><name>vid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>props</name> <operator>=</operator> <call><name>create_empty_agtype</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>insert_vertex_simple</name><argument_list>(<argument><expr><name>graph_id</name></expr></argument>,<argument><expr><name>vtx_name_str</name></expr></argument>,<argument><expr><name>object_graph_id</name></expr></argument>,<argument><expr><name>props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>lid</name> <operator>=</operator> <name>vid</name></expr>;</expr_stmt>
    
    <comment type="block">/* Creating edges*/</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>no_vertices</name><operator>-</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>   
        <expr_stmt><expr><name>start_vid</name> <operator>=</operator> <name>lid</name><operator>-</operator><name>no_vertices</name><operator>+</operator><name>i</name></expr>;</expr_stmt>
        <for>for<control>(<init><expr><name>j</name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>no_vertices</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>  
            <expr_stmt><expr><name>end_vid</name> <operator>=</operator> <name>lid</name><operator>-</operator><name>no_vertices</name><operator>+</operator><name>j</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>eid</name> <operator>=</operator> <call><name>nextval_internal</name><argument_list>(<argument><expr><name>edge_seq_id</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>object_graph_id</name> <operator>=</operator> <call><name>make_graphid</name><argument_list>(<argument><expr><name>edge_label_id</name></expr></argument>, <argument><expr><name>eid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>start_vertex_graph_id</name> <operator>=</operator> <call><name>make_graphid</name><argument_list>(<argument><expr><name>vtx_label_id</name></expr></argument>, <argument><expr><name>start_vid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>end_vertex_graph_id</name> <operator>=</operator> <call><name>make_graphid</name><argument_list>(<argument><expr><name>vtx_label_id</name></expr></argument>, <argument><expr><name>end_vid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>props</name> <operator>=</operator> <call><name>create_empty_agtype</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>insert_edge_simple</name><argument_list>(<argument><expr><name>graph_id</name></expr></argument>, <argument><expr><name>edge_name_str</name></expr></argument>,
                            <argument><expr><name>object_graph_id</name></expr></argument>, <argument><expr><name>start_vertex_graph_id</name></expr></argument>,
                            <argument><expr><name>end_vertex_graph_id</name></expr></argument>, <argument><expr><name>props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
        </block_content>}</block></for>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
