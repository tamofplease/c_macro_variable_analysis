<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/age/src/backend/utils/adt/agtype_ops.c"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>

<comment type="block">/*
 * Functions for operators in Cypher expressions.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type_d.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/numeric.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/agtype.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ereport_op_str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>agtype</name> <modifier>*</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><name>agtype</name> <modifier>*</modifier></type><name>rhs</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>agtype</name> <modifier>*</modifier></type><name>agtype_concat</name><parameter_list>(<parameter><decl><type><name>agtype</name> <modifier>*</modifier></type><name>agt1</name></decl></parameter>, <parameter><decl><type><name>agtype</name> <modifier>*</modifier></type><name>agt2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>agtype_value</name> <modifier>*</modifier></type><name>iterator_concat</name><parameter_list>(<parameter><decl><type><name>agtype_iterator</name> <modifier>*</modifier><modifier>*</modifier></type><name>it1</name></decl></parameter>,
                                     <parameter><decl><type><name>agtype_iterator</name> <modifier>*</modifier><modifier>*</modifier></type><name>it2</name></decl></parameter>,
                                     <parameter><decl><type><name>agtype_parse_state</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>concat_to_agtype_string</name><parameter_list>(<parameter><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>llen</name></decl></parameter>,
                                    <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>rhs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rlen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_string_from_agtype_value</name><parameter_list>(<parameter><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>agtv</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>length</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>concat_to_agtype_string</name><parameter_list>(<parameter><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>llen</name></decl></parameter>,
                                    <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>rhs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><name>llen</name> <operator>+</operator> <name>rlen</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name><name>result</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>llen</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>rlen</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>check_string_length</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>lhs</name></expr></argument>, <argument><expr><name>llen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>llen</name></expr></argument>, <argument><expr><name>rhs</name></expr></argument>, <argument><expr><name>rlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>AGTV_STRING</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_string_from_agtype_value</name><parameter_list>(<parameter><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>agtv</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Datum</name></type> <name>number</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name><name>agtv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>AGTV_INTEGER</name></expr>:</case>
        <expr_stmt><expr><name>number</name> <operator>=</operator> <call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>int8out</name></expr></argument>,
                                     <argument><expr><call><name>Int8GetDatum</name><argument_list>(<argument><expr><name><name>agtv</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>int_value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>string</name> <operator>=</operator> <call><name>DatumGetCString</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>string</name></expr>;</return>
    <case>case <expr><name>AGTV_FLOAT</name></expr>:</case>
        <expr_stmt><expr><name>number</name> <operator>=</operator> <call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>float8out</name></expr></argument>,
                                     <argument><expr><call><name>Float8GetDatum</name><argument_list>(<argument><expr><name><name>agtv</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>float_value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>string</name> <operator>=</operator> <call><name>DatumGetCString</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>is_decimal_needed</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><operator>*</operator><name>length</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><operator>*</operator><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <operator>*</operator><name>length</name></expr></argument>, <argument><expr><literal type="string">".0"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>length</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>string</name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><name>string</name></expr>;</return>
    <case>case <expr><name>AGTV_STRING</name></expr>:</case>
        <expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <name><name>agtv</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name></expr>;</expr_stmt>
        <return>return <expr><name><name>agtv</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name></expr>;</return>

    <case>case <expr><name>AGTV_NUMERIC</name></expr>:</case>
        <expr_stmt><expr><name>string</name> <operator>=</operator> <call><name>DatumGetCString</name><argument_list>(<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>numeric_out</name></expr></argument>,
                     <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name><name>agtv</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>numeric</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>string</name></expr>;</return>

    <case>case <expr><name>AGTV_NULL</name></expr>:</case>
    <case>case <expr><name>AGTV_BOOL</name></expr>:</case>
    <case>case <expr><name>AGTV_ARRAY</name></expr>:</case>
    <case>case <expr><name>AGTV_OBJECT</name></expr>:</case>
    <case>case <expr><name>AGTV_BINARY</name></expr>:</case>
    <default>default:</default>
        <expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></switch>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type> <name>get_numeric_datum_from_agtype_value</name><parameter_list>(<parameter><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>agtv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch <condition>(<expr><name><name>agtv</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>AGTV_INTEGER</name></expr>:</case>
        <return>return <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>int8_numeric</name></expr></argument>,
                                   <argument><expr><call><name>Int8GetDatum</name><argument_list>(<argument><expr><name><name>agtv</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>int_value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>AGTV_FLOAT</name></expr>:</case>
        <return>return <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>float8_numeric</name></expr></argument>,
                                   <argument><expr><call><name>Float8GetDatum</name><argument_list>(<argument><expr><name><name>agtv</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>float_value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>AGTV_NUMERIC</name></expr>:</case>
        <return>return <expr><call><name>NumericGetDatum</name><argument_list>(<argument><expr><name><name>agtv</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>numeric</name></name></expr></argument>)</argument_list></call></expr>;</return>

    <default>default:</default>
        <break>break;</break>
    </block_content>}</block></switch>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>is_numeric_result</name><parameter_list>(<parameter><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>rhs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>lhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_NUMERIC</name> <operator>||</operator> <name><name>rhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_NUMERIC</name><operator>)</operator> <operator>&amp;&amp;</operator>
         <operator>(</operator><name><name>lhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_INTEGER</name> <operator>||</operator> <name><name>lhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_FLOAT</name> <operator>||</operator>
          <name><name>rhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_INTEGER</name> <operator>||</operator> <name><name>rhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_FLOAT</name> <operator>)</operator><operator>)</operator> <operator>||</operator>
        <operator>(</operator><name><name>lhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_NUMERIC</name> <operator>&amp;&amp;</operator> <name><name>rhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_NUMERIC</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>agtype_add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* agtype addition and concat function for + operator */</comment>
<function><type><name>Datum</name></type> <name>agtype_add</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>lhs</name> <init>= <expr><call><name>AG_GET_ARG_AGTYPE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>rhs</name> <init>= <expr><call><name>AG_GET_ARG_AGTYPE_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>agtv_lhs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>agtv_rhs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype_value</name></type> <name>agtv_result</name></decl>;</decl_stmt>

    <comment type="block">/* If both are not scalars */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>AGT_ROOT_IS_SCALAR</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>AGT_ROOT_IS_SCALAR</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Datum</name></type> <name>agt</name></decl>;</decl_stmt>

        <comment type="block">/* It can't be a scalar and an object */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>AGT_ROOT_IS_SCALAR</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>AGT_ROOT_IS_OBJECT</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
            <operator>(</operator><call><name>AGT_ROOT_IS_OBJECT</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>AGT_ROOT_IS_SCALAR</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
            <comment type="block">/* It can't be two objects */</comment>
            <operator>(</operator><call><name>AGT_ROOT_IS_OBJECT</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>AGT_ROOT_IS_OBJECT</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ereport_op_str</name><argument_list>(<argument><expr><literal type="string">"+"</literal></expr></argument>, <argument><expr><name>lhs</name></expr></argument>, <argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>agt</name> <operator>=</operator> <call><name>AGTYPE_P_GET_DATUM</name><argument_list>(<argument><expr><call><name>agtype_concat</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>, <argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><name>agt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Both are scalar */</comment>
    <expr_stmt><expr><name>agtv_lhs</name> <operator>=</operator> <call><name>get_ith_agtype_value_from_container</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lhs</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>agtv_rhs</name> <operator>=</operator> <call><name>get_ith_agtype_value_from_container</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rhs</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * One or both values is a string OR one is a string and the other is
     * either an integer, float, or numeric. If so, concatenate them.
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>agtv_lhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_STRING</name> <operator>||</operator> <name><name>agtv_rhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_STRING</name><operator>)</operator> <operator>&amp;&amp;</operator>
        <operator>(</operator><name><name>agtv_lhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_INTEGER</name> <operator>||</operator> <name><name>agtv_lhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_FLOAT</name> <operator>||</operator>
         <name><name>agtv_lhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_NUMERIC</name> <operator>||</operator> <name><name>agtv_lhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_STRING</name> <operator>||</operator>
         <name><name>agtv_rhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_INTEGER</name> <operator>||</operator> <name><name>agtv_rhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_FLOAT</name> <operator>||</operator>
         <name><name>agtv_rhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_NUMERIC</name> <operator>||</operator> <name><name>agtv_rhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_STRING</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>llen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>lhs</name> <init>= <expr><call><name>get_string_from_agtype_value</name><argument_list>(<argument><expr><name>agtv_lhs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>llen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>rlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rhs</name> <init>= <expr><call><name>get_string_from_agtype_value</name><argument_list>(<argument><expr><name>agtv_rhs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>concat_to_agtype_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>agtv_result</name></expr></argument>, <argument><expr><name>lhs</name></expr></argument>, <argument><expr><name>llen</name></expr></argument>, <argument><expr><name>rhs</name></expr></argument>, <argument><expr><name>rlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <comment type="block">/* Both are integers - regular addition */</comment>
    <if type="elseif">else if <condition>(<expr><name><name>agtv_lhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_INTEGER</name> <operator>&amp;&amp;</operator> <name><name>agtv_rhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_INTEGER</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AGTV_INTEGER</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>val</name><operator>.</operator><name>int_value</name></name> <operator>=</operator> <name><name>agtv_lhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>int_value</name></name> <operator>+</operator>
                                    <name><name>agtv_rhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>int_value</name></name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <comment type="block">/* Both are floats - regular addition */</comment>
    <if type="elseif">else if <condition>(<expr><name><name>agtv_lhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_FLOAT</name> <operator>&amp;&amp;</operator> <name><name>agtv_rhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_FLOAT</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AGTV_FLOAT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>val</name><operator>.</operator><name>float_value</name></name> <operator>=</operator> <name><name>agtv_lhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>float_value</name></name> <operator>+</operator>
                                      <name><name>agtv_rhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>float_value</name></name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <comment type="block">/* The left is a float, the right is an integer - regular addition */</comment>
    <if type="elseif">else if <condition>(<expr><name><name>agtv_lhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_FLOAT</name> <operator>&amp;&amp;</operator> <name><name>agtv_rhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_INTEGER</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AGTV_FLOAT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>val</name><operator>.</operator><name>float_value</name></name> <operator>=</operator> <name><name>agtv_lhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>float_value</name></name> <operator>+</operator>
                                      <name><name>agtv_rhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>int_value</name></name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <comment type="block">/* The right is a float, the left is an integer - regular addition */</comment>
    <if type="elseif">else if <condition>(<expr><name><name>agtv_lhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_INTEGER</name> <operator>&amp;&amp;</operator> <name><name>agtv_rhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_FLOAT</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AGTV_FLOAT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>val</name><operator>.</operator><name>float_value</name></name> <operator>=</operator> <name><name>agtv_lhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>int_value</name></name> <operator>+</operator>
                                      <name><name>agtv_rhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>float_value</name></name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <comment type="block">/* Is this a numeric result */</comment>
    <if type="elseif">else if <condition>(<expr><call><name>is_numeric_result</name><argument_list>(<argument><expr><name>agtv_lhs</name></expr></argument>, <argument><expr><name>agtv_rhs</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Datum</name></type> <name>numd</name></decl>, <decl><type ref="prev"/><name>lhsd</name></decl>, <decl><type ref="prev"/><name>rhsd</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>lhsd</name> <operator>=</operator> <call><name>get_numeric_datum_from_agtype_value</name><argument_list>(<argument><expr><name>agtv_lhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rhsd</name> <operator>=</operator> <call><name>get_numeric_datum_from_agtype_value</name><argument_list>(<argument><expr><name>agtv_rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>numd</name> <operator>=</operator> <call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>numeric_add</name></expr></argument>, <argument><expr><name>lhsd</name></expr></argument>, <argument><expr><name>rhsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AGTV_NUMERIC</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>val</name><operator>.</operator><name>numeric</name></name> <operator>=</operator> <call><name>DatumGetNumeric</name><argument_list>(<argument><expr><name>numd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <comment type="block">/* Not a covered case, error out */</comment>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                        <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Invalid input parameter types for agtype_add"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><call><name>AG_RETURN_AGTYPE_P</name><argument_list>(<argument><expr><call><name>agtype_value_to_agtype</name><argument_list>(<argument><expr><operator>&amp;</operator><name>agtv_result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>agtype_any_add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* agtype addition between bigint and agtype */</comment>
<function><type><name>Datum</name></type> <name>agtype_any_add</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>lhs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>rhs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name></type> <name>result</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>lhs</name> <operator>=</operator> <call><name>get_one_agtype_from_variadic_args</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rhs</name> <operator>=</operator> <call><name>get_one_agtype_from_variadic_args</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>lhs</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>rhs</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>agtype_add</name></expr></argument>, <argument><expr><call><name>AGTYPE_P_GET_DATUM</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>AGTYPE_P_GET_DATUM</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>AG_RETURN_AGTYPE_P</name><argument_list>(<argument><expr><call><name>DATUM_GET_AGTYPE_P</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>agtype_sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/*
 * agtype subtraction function for - operator
 */</comment>
<function><type><name>Datum</name></type> <name>agtype_sub</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>lhs</name> <init>= <expr><call><name>AG_GET_ARG_AGTYPE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>rhs</name> <init>= <expr><call><name>AG_GET_ARG_AGTYPE_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>agtv_lhs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>agtv_rhs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype_value</name></type> <name>agtv_result</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>AGT_ROOT_IS_SCALAR</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><call><name>AGT_ROOT_IS_SCALAR</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                        <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"must be scalar value, not array or object"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>agtv_lhs</name> <operator>=</operator> <call><name>get_ith_agtype_value_from_container</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lhs</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>agtv_rhs</name> <operator>=</operator> <call><name>get_ith_agtype_value_from_container</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rhs</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>agtv_lhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_INTEGER</name> <operator>&amp;&amp;</operator> <name><name>agtv_rhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_INTEGER</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AGTV_INTEGER</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>val</name><operator>.</operator><name>int_value</name></name> <operator>=</operator> <name><name>agtv_lhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>int_value</name></name> <operator>-</operator>
                                    <name><name>agtv_rhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>int_value</name></name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>agtv_lhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_FLOAT</name> <operator>&amp;&amp;</operator> <name><name>agtv_rhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_FLOAT</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AGTV_FLOAT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>val</name><operator>.</operator><name>float_value</name></name> <operator>=</operator> <name><name>agtv_lhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>float_value</name></name> <operator>-</operator>
                                      <name><name>agtv_rhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>float_value</name></name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>agtv_lhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_FLOAT</name> <operator>&amp;&amp;</operator> <name><name>agtv_rhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_INTEGER</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AGTV_FLOAT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>val</name><operator>.</operator><name>float_value</name></name> <operator>=</operator> <name><name>agtv_lhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>float_value</name></name> <operator>-</operator>
                                      <name><name>agtv_rhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>int_value</name></name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>agtv_lhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_INTEGER</name> <operator>&amp;&amp;</operator> <name><name>agtv_rhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_FLOAT</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AGTV_FLOAT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>val</name><operator>.</operator><name>float_value</name></name> <operator>=</operator> <name><name>agtv_lhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>int_value</name></name> <operator>-</operator>
                                      <name><name>agtv_rhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>float_value</name></name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <comment type="block">/* Is this a numeric result */</comment>
    <if type="elseif">else if <condition>(<expr><call><name>is_numeric_result</name><argument_list>(<argument><expr><name>agtv_lhs</name></expr></argument>, <argument><expr><name>agtv_rhs</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Datum</name></type> <name>numd</name></decl>, <decl><type ref="prev"/><name>lhsd</name></decl>, <decl><type ref="prev"/><name>rhsd</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>lhsd</name> <operator>=</operator> <call><name>get_numeric_datum_from_agtype_value</name><argument_list>(<argument><expr><name>agtv_lhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rhsd</name> <operator>=</operator> <call><name>get_numeric_datum_from_agtype_value</name><argument_list>(<argument><expr><name>agtv_rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>numd</name> <operator>=</operator> <call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>numeric_sub</name></expr></argument>, <argument><expr><name>lhsd</name></expr></argument>, <argument><expr><name>rhsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AGTV_NUMERIC</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>val</name><operator>.</operator><name>numeric</name></name> <operator>=</operator> <call><name>DatumGetNumeric</name><argument_list>(<argument><expr><name>numd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                        <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Invalid input parameter types for agtype_sub"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><call><name>AG_RETURN_AGTYPE_P</name><argument_list>(<argument><expr><call><name>agtype_value_to_agtype</name><argument_list>(<argument><expr><operator>&amp;</operator><name>agtv_result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>agtype_any_sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* agtype subtraction between bigint and agtype */</comment>
<function><type><name>Datum</name></type> <name>agtype_any_sub</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>lhs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>rhs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name></type> <name>result</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>lhs</name> <operator>=</operator> <call><name>get_one_agtype_from_variadic_args</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rhs</name> <operator>=</operator> <call><name>get_one_agtype_from_variadic_args</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>lhs</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>rhs</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>agtype_sub</name></expr></argument>, <argument><expr><call><name>AGTYPE_P_GET_DATUM</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>AGTYPE_P_GET_DATUM</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>AG_RETURN_AGTYPE_P</name><argument_list>(<argument><expr><call><name>DATUM_GET_AGTYPE_P</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>agtype_neg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/*
 * agtype negation function for unary - operator
 */</comment>
<function><type><name>Datum</name></type> <name>agtype_neg</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>AG_GET_ARG_AGTYPE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>agtv_value</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype_value</name></type> <name>agtv_result</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>AGT_ROOT_IS_SCALAR</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                        <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"must be scalar value, not array or object"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>agtv_value</name> <operator>=</operator> <call><name>get_ith_agtype_value_from_container</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>agtv_value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_INTEGER</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AGTV_INTEGER</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>val</name><operator>.</operator><name>int_value</name></name> <operator>=</operator> <operator>-</operator><name><name>agtv_value</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>int_value</name></name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>agtv_value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_FLOAT</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AGTV_FLOAT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>val</name><operator>.</operator><name>float_value</name></name> <operator>=</operator> <operator>-</operator><name><name>agtv_value</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>float_value</name></name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>agtv_value</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_NUMERIC</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Datum</name></type> <name>numd</name></decl>, <decl><type ref="prev"/><name>vald</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>vald</name> <operator>=</operator> <call><name>NumericGetDatum</name><argument_list>(<argument><expr><name><name>agtv_value</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>numeric</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>numd</name> <operator>=</operator> <call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>numeric_uminus</name></expr></argument>, <argument><expr><name>vald</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AGTV_NUMERIC</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>val</name><operator>.</operator><name>numeric</name></name> <operator>=</operator> <call><name>DatumGetNumeric</name><argument_list>(<argument><expr><name>numd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                        <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Invalid input parameter type for agtype_neg"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><call><name>AG_RETURN_AGTYPE_P</name><argument_list>(<argument><expr><call><name>agtype_value_to_agtype</name><argument_list>(<argument><expr><operator>&amp;</operator><name>agtv_result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>agtype_mul</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/*
 * agtype multiplication function for * operator
 */</comment>
<function><type><name>Datum</name></type> <name>agtype_mul</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>lhs</name> <init>= <expr><call><name>AG_GET_ARG_AGTYPE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>rhs</name> <init>= <expr><call><name>AG_GET_ARG_AGTYPE_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>agtv_lhs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>agtv_rhs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype_value</name></type> <name>agtv_result</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>AGT_ROOT_IS_SCALAR</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><call><name>AGT_ROOT_IS_SCALAR</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                        <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"must be scalar value, not array or object"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>agtv_lhs</name> <operator>=</operator> <call><name>get_ith_agtype_value_from_container</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lhs</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>agtv_rhs</name> <operator>=</operator> <call><name>get_ith_agtype_value_from_container</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rhs</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>agtv_lhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_INTEGER</name> <operator>&amp;&amp;</operator> <name><name>agtv_rhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_INTEGER</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AGTV_INTEGER</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>val</name><operator>.</operator><name>int_value</name></name> <operator>=</operator> <name><name>agtv_lhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>int_value</name></name> <operator>*</operator>
                                    <name><name>agtv_rhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>int_value</name></name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>agtv_lhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_FLOAT</name> <operator>&amp;&amp;</operator> <name><name>agtv_rhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_FLOAT</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AGTV_FLOAT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>val</name><operator>.</operator><name>float_value</name></name> <operator>=</operator> <name><name>agtv_lhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>float_value</name></name> <operator>*</operator>
                                      <name><name>agtv_rhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>float_value</name></name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>agtv_lhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_FLOAT</name> <operator>&amp;&amp;</operator> <name><name>agtv_rhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_INTEGER</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AGTV_FLOAT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>val</name><operator>.</operator><name>float_value</name></name> <operator>=</operator> <name><name>agtv_lhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>float_value</name></name> <operator>*</operator>
                                      <name><name>agtv_rhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>int_value</name></name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>agtv_lhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_INTEGER</name> <operator>&amp;&amp;</operator> <name><name>agtv_rhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_FLOAT</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AGTV_FLOAT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>val</name><operator>.</operator><name>float_value</name></name> <operator>=</operator> <name><name>agtv_lhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>int_value</name></name> <operator>*</operator>
                                      <name><name>agtv_rhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>float_value</name></name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <comment type="block">/* Is this a numeric result */</comment>
    <if type="elseif">else if <condition>(<expr><call><name>is_numeric_result</name><argument_list>(<argument><expr><name>agtv_lhs</name></expr></argument>, <argument><expr><name>agtv_rhs</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Datum</name></type> <name>numd</name></decl>, <decl><type ref="prev"/><name>lhsd</name></decl>, <decl><type ref="prev"/><name>rhsd</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>lhsd</name> <operator>=</operator> <call><name>get_numeric_datum_from_agtype_value</name><argument_list>(<argument><expr><name>agtv_lhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rhsd</name> <operator>=</operator> <call><name>get_numeric_datum_from_agtype_value</name><argument_list>(<argument><expr><name>agtv_rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>numd</name> <operator>=</operator> <call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>numeric_mul</name></expr></argument>, <argument><expr><name>lhsd</name></expr></argument>, <argument><expr><name>rhsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AGTV_NUMERIC</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>val</name><operator>.</operator><name>numeric</name></name> <operator>=</operator> <call><name>DatumGetNumeric</name><argument_list>(<argument><expr><name>numd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                        <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Invalid input parameter types for agtype_mul"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><call><name>AG_RETURN_AGTYPE_P</name><argument_list>(<argument><expr><call><name>agtype_value_to_agtype</name><argument_list>(<argument><expr><operator>&amp;</operator><name>agtv_result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>agtype_any_mul</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* agtype multiplication between bigint and agtype */</comment>
<function><type><name>Datum</name></type> <name>agtype_any_mul</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>lhs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>rhs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name></type> <name>result</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>lhs</name> <operator>=</operator> <call><name>get_one_agtype_from_variadic_args</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rhs</name> <operator>=</operator> <call><name>get_one_agtype_from_variadic_args</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>lhs</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>rhs</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>agtype_mul</name></expr></argument>, <argument><expr><call><name>AGTYPE_P_GET_DATUM</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>AGTYPE_P_GET_DATUM</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>AG_RETURN_AGTYPE_P</name><argument_list>(<argument><expr><call><name>DATUM_GET_AGTYPE_P</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>agtype_div</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/*
 * agtype division function for / operator
 */</comment>
<function><type><name>Datum</name></type> <name>agtype_div</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>lhs</name> <init>= <expr><call><name>AG_GET_ARG_AGTYPE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>rhs</name> <init>= <expr><call><name>AG_GET_ARG_AGTYPE_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>agtv_lhs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>agtv_rhs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype_value</name></type> <name>agtv_result</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>AGT_ROOT_IS_SCALAR</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><call><name>AGT_ROOT_IS_SCALAR</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                        <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"must be scalar value, not array or object"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>agtv_lhs</name> <operator>=</operator> <call><name>get_ith_agtype_value_from_container</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lhs</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>agtv_rhs</name> <operator>=</operator> <call><name>get_ith_agtype_value_from_container</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rhs</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>agtv_lhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_INTEGER</name> <operator>&amp;&amp;</operator> <name><name>agtv_rhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_INTEGER</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>agtv_rhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>int_value</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DIVISION_BY_ZERO</name></expr></argument>)</argument_list></call><operator>,</operator>
                            <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"division by zero"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AGTV_INTEGER</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>val</name><operator>.</operator><name>int_value</name></name> <operator>=</operator> <name><name>agtv_lhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>int_value</name></name> <operator>/</operator>
                                    <name><name>agtv_rhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>int_value</name></name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>agtv_lhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_FLOAT</name> <operator>&amp;&amp;</operator> <name><name>agtv_rhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_FLOAT</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>agtv_rhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>float_value</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DIVISION_BY_ZERO</name></expr></argument>)</argument_list></call><operator>,</operator>
                            <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"division by zero"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AGTV_FLOAT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>val</name><operator>.</operator><name>float_value</name></name> <operator>=</operator> <name><name>agtv_lhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>float_value</name></name> <operator>/</operator>
                                      <name><name>agtv_rhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>float_value</name></name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>agtv_lhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_FLOAT</name> <operator>&amp;&amp;</operator> <name><name>agtv_rhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_INTEGER</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>agtv_rhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>int_value</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DIVISION_BY_ZERO</name></expr></argument>)</argument_list></call><operator>,</operator>
                            <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"division by zero"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AGTV_FLOAT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>val</name><operator>.</operator><name>float_value</name></name> <operator>=</operator> <name><name>agtv_lhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>float_value</name></name> <operator>/</operator>
                                      <name><name>agtv_rhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>int_value</name></name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>agtv_lhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_INTEGER</name> <operator>&amp;&amp;</operator> <name><name>agtv_rhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_FLOAT</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>agtv_rhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>float_value</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DIVISION_BY_ZERO</name></expr></argument>)</argument_list></call><operator>,</operator>
                            <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"division by zero"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AGTV_FLOAT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>val</name><operator>.</operator><name>float_value</name></name> <operator>=</operator> <name><name>agtv_lhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>int_value</name></name> <operator>/</operator>
                                      <name><name>agtv_rhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>float_value</name></name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <comment type="block">/* Is this a numeric result */</comment>
    <if type="elseif">else if <condition>(<expr><call><name>is_numeric_result</name><argument_list>(<argument><expr><name>agtv_lhs</name></expr></argument>, <argument><expr><name>agtv_rhs</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Datum</name></type> <name>numd</name></decl>, <decl><type ref="prev"/><name>lhsd</name></decl>, <decl><type ref="prev"/><name>rhsd</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>lhsd</name> <operator>=</operator> <call><name>get_numeric_datum_from_agtype_value</name><argument_list>(<argument><expr><name>agtv_lhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rhsd</name> <operator>=</operator> <call><name>get_numeric_datum_from_agtype_value</name><argument_list>(<argument><expr><name>agtv_rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>numd</name> <operator>=</operator> <call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>numeric_div</name></expr></argument>, <argument><expr><name>lhsd</name></expr></argument>, <argument><expr><name>rhsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AGTV_NUMERIC</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>val</name><operator>.</operator><name>numeric</name></name> <operator>=</operator> <call><name>DatumGetNumeric</name><argument_list>(<argument><expr><name>numd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                        <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Invalid input parameter types for agtype_div"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

     <expr_stmt><expr><call><name>AG_RETURN_AGTYPE_P</name><argument_list>(<argument><expr><call><name>agtype_value_to_agtype</name><argument_list>(<argument><expr><operator>&amp;</operator><name>agtv_result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>agtype_any_div</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* agtype division between bigint and agtype */</comment>
<function><type><name>Datum</name></type> <name>agtype_any_div</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>lhs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>rhs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name></type> <name>result</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>lhs</name> <operator>=</operator> <call><name>get_one_agtype_from_variadic_args</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rhs</name> <operator>=</operator> <call><name>get_one_agtype_from_variadic_args</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>lhs</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>rhs</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>agtype_div</name></expr></argument>, <argument><expr><call><name>AGTYPE_P_GET_DATUM</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>AGTYPE_P_GET_DATUM</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>AG_RETURN_AGTYPE_P</name><argument_list>(<argument><expr><call><name>DATUM_GET_AGTYPE_P</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>agtype_mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/*
 * agtype modulo function for % operator
 */</comment>
<function><type><name>Datum</name></type> <name>agtype_mod</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>lhs</name> <init>= <expr><call><name>AG_GET_ARG_AGTYPE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>rhs</name> <init>= <expr><call><name>AG_GET_ARG_AGTYPE_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>agtv_lhs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>agtv_rhs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype_value</name></type> <name>agtv_result</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>AGT_ROOT_IS_SCALAR</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><call><name>AGT_ROOT_IS_SCALAR</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                        <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"must be scalar value, not array or object"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>agtv_lhs</name> <operator>=</operator> <call><name>get_ith_agtype_value_from_container</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lhs</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>agtv_rhs</name> <operator>=</operator> <call><name>get_ith_agtype_value_from_container</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rhs</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>agtv_lhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_INTEGER</name> <operator>&amp;&amp;</operator> <name><name>agtv_rhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_INTEGER</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AGTV_INTEGER</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>val</name><operator>.</operator><name>int_value</name></name> <operator>=</operator> <name><name>agtv_lhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>int_value</name></name> <operator>%</operator>
                                    <name><name>agtv_rhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>int_value</name></name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>agtv_lhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_FLOAT</name> <operator>&amp;&amp;</operator> <name><name>agtv_rhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_FLOAT</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AGTV_FLOAT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>val</name><operator>.</operator><name>float_value</name></name> <operator>=</operator> <call><name>fmod</name><argument_list>(<argument><expr><name><name>agtv_lhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>float_value</name></name></expr></argument>,
                                           <argument><expr><name><name>agtv_rhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>float_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>agtv_lhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_FLOAT</name> <operator>&amp;&amp;</operator> <name><name>agtv_rhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_INTEGER</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AGTV_FLOAT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>val</name><operator>.</operator><name>float_value</name></name> <operator>=</operator> <call><name>fmod</name><argument_list>(<argument><expr><name><name>agtv_lhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>float_value</name></name></expr></argument>,
                                           <argument><expr><name><name>agtv_rhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>int_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>agtv_lhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_INTEGER</name> <operator>&amp;&amp;</operator> <name><name>agtv_rhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_FLOAT</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AGTV_FLOAT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>val</name><operator>.</operator><name>float_value</name></name> <operator>=</operator> <call><name>fmod</name><argument_list>(<argument><expr><name><name>agtv_lhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>int_value</name></name></expr></argument>,
                                           <argument><expr><name><name>agtv_rhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>float_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <comment type="block">/* Is this a numeric result */</comment>
    <if type="elseif">else if <condition>(<expr><call><name>is_numeric_result</name><argument_list>(<argument><expr><name>agtv_lhs</name></expr></argument>, <argument><expr><name>agtv_rhs</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Datum</name></type> <name>numd</name></decl>, <decl><type ref="prev"/><name>lhsd</name></decl>, <decl><type ref="prev"/><name>rhsd</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>lhsd</name> <operator>=</operator> <call><name>get_numeric_datum_from_agtype_value</name><argument_list>(<argument><expr><name>agtv_lhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rhsd</name> <operator>=</operator> <call><name>get_numeric_datum_from_agtype_value</name><argument_list>(<argument><expr><name>agtv_rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>numd</name> <operator>=</operator> <call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>numeric_mod</name></expr></argument>, <argument><expr><name>lhsd</name></expr></argument>, <argument><expr><name>rhsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AGTV_NUMERIC</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>val</name><operator>.</operator><name>numeric</name></name> <operator>=</operator> <call><name>DatumGetNumeric</name><argument_list>(<argument><expr><name>numd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                        <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Invalid input parameter types for agtype_mod"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><call><name>AG_RETURN_AGTYPE_P</name><argument_list>(<argument><expr><call><name>agtype_value_to_agtype</name><argument_list>(<argument><expr><operator>&amp;</operator><name>agtv_result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>agtype_any_mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* agtype modulo between bigint and agtype */</comment>
<function><type><name>Datum</name></type> <name>agtype_any_mod</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>lhs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>rhs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name></type> <name>result</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>lhs</name> <operator>=</operator> <call><name>get_one_agtype_from_variadic_args</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rhs</name> <operator>=</operator> <call><name>get_one_agtype_from_variadic_args</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>lhs</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>rhs</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>agtype_mod</name></expr></argument>, <argument><expr><call><name>AGTYPE_P_GET_DATUM</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>AGTYPE_P_GET_DATUM</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>AG_RETURN_AGTYPE_P</name><argument_list>(<argument><expr><call><name>DATUM_GET_AGTYPE_P</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>agtype_pow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/*
 * agtype power function for ^ operator
 */</comment>
<function><type><name>Datum</name></type> <name>agtype_pow</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>lhs</name> <init>= <expr><call><name>AG_GET_ARG_AGTYPE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>rhs</name> <init>= <expr><call><name>AG_GET_ARG_AGTYPE_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>agtv_lhs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>agtv_rhs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype_value</name></type> <name>agtv_result</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>AGT_ROOT_IS_SCALAR</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><call><name>AGT_ROOT_IS_SCALAR</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                        <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"must be scalar value, not array or object"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>agtv_lhs</name> <operator>=</operator> <call><name>get_ith_agtype_value_from_container</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lhs</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>agtv_rhs</name> <operator>=</operator> <call><name>get_ith_agtype_value_from_container</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rhs</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>agtv_lhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_INTEGER</name> <operator>&amp;&amp;</operator> <name><name>agtv_rhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_INTEGER</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AGTV_FLOAT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>val</name><operator>.</operator><name>float_value</name></name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><name><name>agtv_lhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>int_value</name></name></expr></argument>,
                                          <argument><expr><name><name>agtv_rhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>int_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>agtv_lhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_FLOAT</name> <operator>&amp;&amp;</operator> <name><name>agtv_rhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_FLOAT</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AGTV_FLOAT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>val</name><operator>.</operator><name>float_value</name></name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><name><name>agtv_lhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>float_value</name></name></expr></argument>,
                                          <argument><expr><name><name>agtv_rhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>float_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>agtv_lhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_FLOAT</name> <operator>&amp;&amp;</operator> <name><name>agtv_rhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_INTEGER</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AGTV_FLOAT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>val</name><operator>.</operator><name>float_value</name></name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><name><name>agtv_lhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>float_value</name></name></expr></argument>,
                                          <argument><expr><name><name>agtv_rhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>int_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>agtv_lhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_INTEGER</name> <operator>&amp;&amp;</operator> <name><name>agtv_rhs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AGTV_FLOAT</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AGTV_FLOAT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>val</name><operator>.</operator><name>float_value</name></name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><name><name>agtv_lhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>int_value</name></name></expr></argument>,
                                          <argument><expr><name><name>agtv_rhs</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>float_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <comment type="block">/* Is this a numeric result */</comment>
    <if type="elseif">else if <condition>(<expr><call><name>is_numeric_result</name><argument_list>(<argument><expr><name>agtv_lhs</name></expr></argument>, <argument><expr><name>agtv_rhs</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Datum</name></type> <name>numd</name></decl>, <decl><type ref="prev"/><name>lhsd</name></decl>, <decl><type ref="prev"/><name>rhsd</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>lhsd</name> <operator>=</operator> <call><name>get_numeric_datum_from_agtype_value</name><argument_list>(<argument><expr><name>agtv_lhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rhsd</name> <operator>=</operator> <call><name>get_numeric_datum_from_agtype_value</name><argument_list>(<argument><expr><name>agtv_rhs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>numd</name> <operator>=</operator> <call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>numeric_power</name></expr></argument>, <argument><expr><name>lhsd</name></expr></argument>, <argument><expr><name>rhsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AGTV_NUMERIC</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>agtv_result</name><operator>.</operator><name>val</name><operator>.</operator><name>numeric</name></name> <operator>=</operator> <call><name>DatumGetNumeric</name><argument_list>(<argument><expr><name>numd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                        <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Invalid input parameter types for agtype_pow"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><call><name>AG_RETURN_AGTYPE_P</name><argument_list>(<argument><expr><call><name>agtype_value_to_agtype</name><argument_list>(<argument><expr><operator>&amp;</operator><name>agtv_result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>agtype_eq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type> <name>agtype_eq</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>agtype_lhs</name> <init>= <expr><call><name>AG_GET_ARG_AGTYPE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>agtype_rhs</name> <init>= <expr><call><name>AG_GET_ARG_AGTYPE_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>result</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><call><name>compare_agtype_containers_orderability</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agtype_lhs</name><operator>-&gt;</operator><name>root</name></name></expr></argument>,
                                                     <argument><expr><operator>&amp;</operator><name><name>agtype_rhs</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>agtype_lhs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>agtype_rhs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>agtype_any_eq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type> <name>agtype_any_eq</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>lhs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>rhs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name></type> <name>result</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>lhs</name> <operator>=</operator> <call><name>get_one_agtype_from_variadic_args</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rhs</name> <operator>=</operator> <call><name>get_one_agtype_from_variadic_args</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>lhs</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>rhs</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>agtype_eq</name></expr></argument>, <argument><expr><call><name>AGTYPE_P_GET_DATUM</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call></expr></argument>,
                                            <argument><expr><call><name>AGTYPE_P_GET_DATUM</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>agtype_ne</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type> <name>agtype_ne</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>agtype_lhs</name> <init>= <expr><call><name>AG_GET_ARG_AGTYPE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>agtype_rhs</name> <init>= <expr><call><name>AG_GET_ARG_AGTYPE_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><call><name>compare_agtype_containers_orderability</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agtype_lhs</name><operator>-&gt;</operator><name>root</name></name></expr></argument>,
                                                     <argument><expr><operator>&amp;</operator><name><name>agtype_rhs</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>agtype_lhs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>agtype_rhs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>agtype_any_ne</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type> <name>agtype_any_ne</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>lhs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>rhs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name></type> <name>result</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>lhs</name> <operator>=</operator> <call><name>get_one_agtype_from_variadic_args</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rhs</name> <operator>=</operator> <call><name>get_one_agtype_from_variadic_args</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>lhs</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>rhs</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>agtype_ne</name></expr></argument>, <argument><expr><call><name>AGTYPE_P_GET_DATUM</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call></expr></argument>,
                                            <argument><expr><call><name>AGTYPE_P_GET_DATUM</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>agtype_lt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type> <name>agtype_lt</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>agtype_lhs</name> <init>= <expr><call><name>AG_GET_ARG_AGTYPE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>agtype_rhs</name> <init>= <expr><call><name>AG_GET_ARG_AGTYPE_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>result</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><call><name>compare_agtype_containers_orderability</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agtype_lhs</name><operator>-&gt;</operator><name>root</name></name></expr></argument>,
                                                     <argument><expr><operator>&amp;</operator><name><name>agtype_rhs</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>agtype_lhs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>agtype_rhs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>agtype_any_lt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type> <name>agtype_any_lt</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>lhs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>rhs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name></type> <name>result</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>lhs</name> <operator>=</operator> <call><name>get_one_agtype_from_variadic_args</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rhs</name> <operator>=</operator> <call><name>get_one_agtype_from_variadic_args</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>lhs</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>rhs</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>agtype_lt</name></expr></argument>, <argument><expr><call><name>AGTYPE_P_GET_DATUM</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call></expr></argument>,
                                            <argument><expr><call><name>AGTYPE_P_GET_DATUM</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>agtype_gt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type> <name>agtype_gt</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>agtype_lhs</name> <init>= <expr><call><name>AG_GET_ARG_AGTYPE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>agtype_rhs</name> <init>= <expr><call><name>AG_GET_ARG_AGTYPE_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>result</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><call><name>compare_agtype_containers_orderability</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agtype_lhs</name><operator>-&gt;</operator><name>root</name></name></expr></argument>,
                                                     <argument><expr><operator>&amp;</operator><name><name>agtype_rhs</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>agtype_lhs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>agtype_rhs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>agtype_any_gt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type> <name>agtype_any_gt</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>lhs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>rhs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name></type> <name>result</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>lhs</name> <operator>=</operator> <call><name>get_one_agtype_from_variadic_args</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rhs</name> <operator>=</operator> <call><name>get_one_agtype_from_variadic_args</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>lhs</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>rhs</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>agtype_gt</name></expr></argument>, <argument><expr><call><name>AGTYPE_P_GET_DATUM</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call></expr></argument>,
                                            <argument><expr><call><name>AGTYPE_P_GET_DATUM</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>agtype_le</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type> <name>agtype_le</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>agtype_lhs</name> <init>= <expr><call><name>AG_GET_ARG_AGTYPE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>agtype_rhs</name> <init>= <expr><call><name>AG_GET_ARG_AGTYPE_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>result</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><call><name>compare_agtype_containers_orderability</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agtype_lhs</name><operator>-&gt;</operator><name>root</name></name></expr></argument>,
                                                     <argument><expr><operator>&amp;</operator><name><name>agtype_rhs</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>agtype_lhs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>agtype_rhs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>agtype_any_le</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type> <name>agtype_any_le</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>lhs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>rhs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name></type> <name>result</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>lhs</name> <operator>=</operator> <call><name>get_one_agtype_from_variadic_args</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rhs</name> <operator>=</operator> <call><name>get_one_agtype_from_variadic_args</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>lhs</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>rhs</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>agtype_le</name></expr></argument>, <argument><expr><call><name>AGTYPE_P_GET_DATUM</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call></expr></argument>,
                                            <argument><expr><call><name>AGTYPE_P_GET_DATUM</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>agtype_ge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type> <name>agtype_ge</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>agtype_lhs</name> <init>= <expr><call><name>AG_GET_ARG_AGTYPE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>agtype_rhs</name> <init>= <expr><call><name>AG_GET_ARG_AGTYPE_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>result</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><call><name>compare_agtype_containers_orderability</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agtype_lhs</name><operator>-&gt;</operator><name>root</name></name></expr></argument>,
                                                     <argument><expr><operator>&amp;</operator><name><name>agtype_rhs</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>agtype_lhs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>agtype_rhs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>agtype_any_ge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type> <name>agtype_any_ge</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>lhs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>rhs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name></type> <name>result</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>lhs</name> <operator>=</operator> <call><name>get_one_agtype_from_variadic_args</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rhs</name> <operator>=</operator> <call><name>get_one_agtype_from_variadic_args</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>lhs</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>rhs</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>agtype_ge</name></expr></argument>, <argument><expr><call><name>AGTYPE_P_GET_DATUM</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call></expr></argument>,
                                            <argument><expr><call><name>AGTYPE_P_GET_DATUM</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>agtype_contains</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="block">/*
 * &lt;@ operator for agtype. Returns true if the right agtype path/value entries
 * contained at the top level within the left agtype value
 */</comment>
<function><type><name>Datum</name></type> <name>agtype_contains</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>agtype_iterator</name> <modifier>*</modifier></type><name>constraint_it</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>property_it</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>properties</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>constraints</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>properties</name> <operator>=</operator> <call><name>AG_GET_ARG_AGTYPE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>constraints</name> <operator>=</operator> <call><name>AG_GET_ARG_AGTYPE_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>constraint_it</name> <operator>=</operator> <call><name>agtype_iterator_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>constraints</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>property_it</name> <operator>=</operator> <call><name>agtype_iterator_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>properties</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><call><name>agtype_deep_contains</name><argument_list>(<argument><expr><operator>&amp;</operator><name>property_it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>constraint_it</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>agtype_contained_by</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="block">/*
 * &lt;@ operator for agtype. Returns true if the left agtype path/value entries
 * contained at the top level within the right agtype value
 */</comment>
<function><type><name>Datum</name></type> <name>agtype_contained_by</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>agtype_iterator</name> <modifier>*</modifier></type><name>constraint_it</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>property_it</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>properties</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>constraints</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>properties</name> <operator>=</operator> <call><name>AG_GET_ARG_AGTYPE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>constraints</name> <operator>=</operator> <call><name>AG_GET_ARG_AGTYPE_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>constraint_it</name> <operator>=</operator> <call><name>agtype_iterator_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>constraints</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>property_it</name> <operator>=</operator> <call><name>agtype_iterator_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>properties</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><call><name>agtype_deep_contains</name><argument_list>(<argument><expr><operator>&amp;</operator><name>constraint_it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>property_it</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>agtype_exists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="block">/*
 * ? operator for agtype. Returns true if the string exists as top-level keys
 */</comment>
<function><type><name>Datum</name></type> <name>agtype_exists</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>agt</name> <init>= <expr><call><name>AG_GET_ARG_AGTYPE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype_value</name></type> <name>aval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * We only match Object keys (which are naturally always Strings), or
     * string elements in arrays.  In particular, we do not match non-string
     * scalar elements.  Existence of a key/element is only considered at the
     * top level.  No recursion occurs.
     */</comment>
    <expr_stmt><expr><name><name>aval</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AGTV_STRING</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aval</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name> <operator>=</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aval</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>find_agtype_value_from_container</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agt</name><operator>-&gt;</operator><name>root</name></name></expr></argument>,
                                         <argument><expr><name>AGT_FOBJECT</name> <operator>|</operator> <name>AGT_FARRAY</name></expr></argument>,
                                         <argument><expr><operator>&amp;</operator><name>aval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>v</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>agtype_exists_any</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="block">/*
 * ?| operator for agtype. Returns true if any of the array strings exist as
 * top-level keys
 */</comment>
<function><type><name>Datum</name></type> <name>agtype_exists_any</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>agt</name> <init>= <expr><call><name>AG_GET_ARG_AGTYPE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>keys</name> <init>= <expr><call><name>PG_GETARG_ARRAYTYPE_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name> <modifier>*</modifier></type><name>key_datums</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>key_nulls</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>elem_count</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>deconstruct_array</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>key_datums</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key_nulls</name></expr></argument>,
                      <argument><expr><operator>&amp;</operator><name>elem_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>elem_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>agtype_value</name></type> <name>strVal</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>key_nulls</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
        <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>strVal</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AGTV_STRING</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>strVal</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name> <operator>=</operator> <call><name>VARDATA</name><argument_list>(<argument><expr><name><name>key_datums</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>strVal</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>VARSIZE</name><argument_list>(<argument><expr><name><name>key_datums</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VARHDRSZ</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>find_agtype_value_from_container</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agt</name><operator>-&gt;</operator><name>root</name></name></expr></argument>,
                                        <argument><expr><name>AGT_FOBJECT</name> <operator>|</operator> <name>AGT_FARRAY</name></expr></argument>,
                                        <argument><expr><operator>&amp;</operator><name>strVal</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>agtype_exists_all</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="block">/*
 * ?&amp; operator for agtype. Returns true if all of the array strings exist as
 * top-level keys
 */</comment>
<function><type><name>Datum</name></type> <name>agtype_exists_all</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>agt</name> <init>= <expr><call><name>AG_GET_ARG_AGTYPE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ArrayType</name>  <modifier>*</modifier></type><name>keys</name> <init>= <expr><call><name>PG_GETARG_ARRAYTYPE_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name> <modifier>*</modifier></type><name>key_datums</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>key_nulls</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>elem_count</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>deconstruct_array</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>key_datums</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key_nulls</name></expr></argument>,
                      <argument><expr><operator>&amp;</operator><name>elem_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>elem_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>agtype_value</name></type> <name>strVal</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>key_nulls</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
        <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>strVal</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>AGTV_STRING</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>strVal</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name> <operator>=</operator> <call><name>VARDATA</name><argument_list>(<argument><expr><name><name>key_datums</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>strVal</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>VARSIZE</name><argument_list>(<argument><expr><name><name>key_datums</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VARHDRSZ</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>find_agtype_value_from_container</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agt</name><operator>-&gt;</operator><name>root</name></name></expr></argument>,
                                        <argument><expr><name>AGT_FOBJECT</name> <operator>|</operator> <name>AGT_FARRAY</name></expr></argument>,
                                        <argument><expr><operator>&amp;</operator><name>strVal</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>agtype</name> <modifier>*</modifier></type><name>agtype_concat</name><parameter_list>(<parameter><decl><type><name>agtype</name> <modifier>*</modifier></type><name>agt1</name></decl></parameter>, <parameter><decl><type><name>agtype</name> <modifier>*</modifier></type><name>agt2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>agtype_parse_state</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype_iterator</name> <modifier>*</modifier></type><name>it1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype_iterator</name> <modifier>*</modifier></type><name>it2</name></decl>;</decl_stmt>

    <comment type="block">/*
     * If one of the agtype is empty, just return the other if it's not scalar
     * and both are of the same kind.  If it's a scalar or they are of
     * different kinds we need to perform the concatenation even if one is
     * empty.
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>AGT_ROOT_IS_OBJECT</name><argument_list>(<argument><expr><name>agt1</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>AGT_ROOT_IS_OBJECT</name><argument_list>(<argument><expr><name>agt2</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>AGT_ROOT_COUNT</name><argument_list>(<argument><expr><name>agt1</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>AGT_ROOT_IS_SCALAR</name><argument_list>(<argument><expr><name>agt2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>agt2</name></expr>;</return></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name>AGT_ROOT_COUNT</name><argument_list>(<argument><expr><name>agt2</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>AGT_ROOT_IS_SCALAR</name><argument_list>(<argument><expr><name>agt1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>agt1</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>it1</name> <operator>=</operator> <call><name>agtype_iterator_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agt1</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>it2</name> <operator>=</operator> <call><name>agtype_iterator_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>agt2</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>iterator_concat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>it2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>res</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><call><name>agtype_value_to_agtype</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Iterate over all agtype objects and merge them into one.
 * The logic of this function copied from the same hstore function,
 * except the case, when it1 &amp; it2 represents jbvObject.
 * In that case we just append the content of it2 to it1 without any
 * verifications.
 */</comment>
<function><type><specifier>static</specifier> <name>agtype_value</name> <modifier>*</modifier></type><name>iterator_concat</name><parameter_list>(<parameter><decl><type><name>agtype_iterator</name> <modifier>*</modifier><modifier>*</modifier></type><name>it1</name></decl></parameter>,
                                     <parameter><decl><type><name>agtype_iterator</name> <modifier>*</modifier><modifier>*</modifier></type><name>it2</name></decl></parameter>,
                                     <parameter><decl><type><name>agtype_parse_state</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>agtype_value</name></type> <name>v1</name></decl>, <decl><type ref="prev"/><name>v2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype_iterator_token</name></type> <name>r1</name></decl>, <decl><type ref="prev"/><name>r2</name></decl>, <decl><type ref="prev"/><name>rk1</name></decl>, <decl><type ref="prev"/><name>rk2</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>r1</name> <operator>=</operator> <name>rk1</name> <operator>=</operator> <call><name>agtype_iterator_next</name><argument_list>(<argument><expr><name>it1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v1</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>r2</name> <operator>=</operator> <name>rk2</name> <operator>=</operator> <call><name>agtype_iterator_next</name><argument_list>(<argument><expr><name>it2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v2</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Both elements are objects.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>rk1</name> <operator>==</operator> <name>WAGT_BEGIN_OBJECT</name> <operator>&amp;&amp;</operator> <name>rk2</name> <operator>==</operator> <name>WAGT_BEGIN_OBJECT</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/*
         * Append the all tokens from v1 to res, except last WAGT_END_OBJECT
         * (because res will not be finished yet).
         */</comment>
        <expr_stmt><expr><call><name>push_agtype_value</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><operator>(</operator><name>r1</name> <operator>=</operator> <call><name>agtype_iterator_next</name><argument_list>(<argument><expr><name>it1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v1</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>WAGT_END_OBJECT</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>push_agtype_value</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

        <comment type="block">/*
         * Append the all tokens from v2 to res, include last WAGT_END_OBJECT
         * (the concatenation will be completed).
         */</comment>
        <while>while <condition>(<expr><operator>(</operator><name>r2</name> <operator>=</operator> <call><name>agtype_iterator_next</name><argument_list>(<argument><expr><name>it2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v2</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>push_agtype_value</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>,
                                    <argument><expr><ternary><condition><expr><name>r2</name> <operator>!=</operator> <name>WAGT_END_OBJECT</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>v2</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
    </block_content>}</block></if>

    <comment type="block">/*
     * Both elements are arrays (either can be scalar).
     */</comment>
    <if type="elseif">else if <condition>(<expr><name>rk1</name> <operator>==</operator> <name>WAGT_BEGIN_ARRAY</name> <operator>&amp;&amp;</operator> <name>rk2</name> <operator>==</operator> <name>WAGT_BEGIN_ARRAY</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>push_agtype_value</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <while>while <condition>(<expr><operator>(</operator><name>r1</name> <operator>=</operator> <call><name>agtype_iterator_next</name><argument_list>(<argument><expr><name>it1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v1</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>WAGT_END_ARRAY</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>r1</name> <operator>==</operator> <name>WAGT_ELEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>push_agtype_value</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>

        <while>while <condition>(<expr><operator>(</operator><name>r2</name> <operator>=</operator> <call><name>agtype_iterator_next</name><argument_list>(<argument><expr><name>it2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v2</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>WAGT_END_ARRAY</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>r2</name> <operator>==</operator> <name>WAGT_ELEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>push_agtype_value</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>WAGT_ELEM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>

        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>push_agtype_value</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>WAGT_END_ARRAY</name></expr></argument>,
                                <argument><expr><name>NULL</name></expr></argument> <comment type="block">/* signal to sort */</comment>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <comment type="block">/* have we got array || object or object || array? */</comment>
    <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name>rk1</name> <operator>==</operator> <name>WAGT_BEGIN_ARRAY</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><operator>(</operator><operator>*</operator><name>it1</name><operator>)</operator><operator>-&gt;</operator><name>is_scalar</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
              <name>rk2</name> <operator>==</operator> <name>WAGT_BEGIN_OBJECT</name><operator>)</operator> <operator>||</operator>
             <operator>(</operator><name>rk1</name> <operator>==</operator> <name>WAGT_BEGIN_OBJECT</name> <operator>&amp;&amp;</operator>
              <operator>(</operator><name>rk2</name> <operator>==</operator> <name>WAGT_BEGIN_ARRAY</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><operator>(</operator><operator>*</operator><name>it2</name><operator>)</operator><operator>-&gt;</operator><name>is_scalar</name></name><operator>)</operator><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>agtype_iterator</name> <modifier>*</modifier><modifier>*</modifier></type><name>it_array</name> <init>= <expr><ternary><condition><expr><name>rk1</name> <operator>==</operator> <name>WAGT_BEGIN_ARRAY</name></expr> ?</condition><then> <expr><name>it1</name></expr> </then><else>: <expr><name>it2</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>agtype_iterator</name> <modifier>*</modifier><modifier>*</modifier></type><name>it_object</name> <init>= <expr><ternary><condition><expr><name>rk1</name> <operator>==</operator> <name>WAGT_BEGIN_OBJECT</name></expr> ?</condition><then> <expr><name>it1</name></expr> </then><else>: <expr><name>it2</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>bool</name></type> <name>prepend</name> <init>= <expr><operator>(</operator><name>rk1</name> <operator>==</operator> <name>WAGT_BEGIN_OBJECT</name><operator>)</operator></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>push_agtype_value</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>WAGT_BEGIN_ARRAY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>prepend</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>push_agtype_value</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>WAGT_BEGIN_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <while>while <condition>(<expr><operator>(</operator><name>r1</name> <operator>=</operator> <call><name>agtype_iterator_next</name><argument_list>(<argument><expr><name>it_object</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v1</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>push_agtype_value</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>,
                                  <argument><expr><ternary><condition><expr><name>r1</name> <operator>!=</operator> <name>WAGT_END_OBJECT</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>v1</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

            <while>while <condition>(<expr><operator>(</operator><name>r2</name> <operator>=</operator> <call><name>agtype_iterator_next</name><argument_list>(<argument><expr><name>it_array</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v2</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>push_agtype_value</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>,
                                        <argument><expr><ternary><condition><expr><name>r2</name> <operator>!=</operator> <name>WAGT_END_ARRAY</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>v2</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <while>while <condition>(<expr><operator>(</operator><name>r1</name> <operator>=</operator> <call><name>agtype_iterator_next</name><argument_list>(<argument><expr><name>it_array</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v1</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator>
                   <name>WAGT_END_ARRAY</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>push_agtype_value</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

            <expr_stmt><expr><call><name>push_agtype_value</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>WAGT_BEGIN_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <while>while <condition>(<expr><operator>(</operator><name>r2</name> <operator>=</operator> <call><name>agtype_iterator_next</name><argument_list>(<argument><expr><name>it_object</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v2</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>push_agtype_value</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>,
                                  <argument><expr><ternary><condition><expr><name>r2</name> <operator>!=</operator> <name>WAGT_END_OBJECT</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>v2</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

            <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>push_agtype_value</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>WAGT_END_ARRAY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="block">/*
         * This must be scalar || object or object || scalar, as that's all
         * that's left. Both of these make no sense, so error out.
         */</comment>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                        <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid concatenation of agtype objects"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ereport_op_str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>op</name></decl></parameter>, <parameter><decl><type><name>agtype</name> <modifier>*</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><name>agtype</name> <modifier>*</modifier></type><name>rhs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msgfmt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lstr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rstr</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>AssertArg</name><argument_list>(<argument><expr><name>rhs</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>lhs</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>msgfmt</name> <operator>=</operator> <literal type="string">"invalid expression: %s%s%s"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lstr</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>msgfmt</name> <operator>=</operator> <literal type="string">"invalid expression: %s %s %s"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lstr</name> <operator>=</operator> <call><name>agtype_to_cstring</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lhs</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>rstr</name> <operator>=</operator> <call><name>agtype_to_cstring</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rhs</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
                    <call><name>errmsg</name><argument_list>(<argument><expr><name>msgfmt</name></expr></argument>, <argument><expr><name>lstr</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>rstr</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
