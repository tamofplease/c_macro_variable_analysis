<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/age/src/backend/utils/adt/age_graphid_ds.c"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/graphid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/age_graphid_ds.h"</cpp:file></cpp:include>

<comment type="block">/* defines */</comment>
<comment type="block">/*
 * A simple linked list node for graphid lists (int64). PG's implementation
 * has too much overhead for this type of list as it only directly supports
 * regular ints, not int64s, of which a graphid currently is.
 */</comment>
<typedef>typedef <type><struct>struct <name>GraphIdNode</name>
<block>{
    <decl_stmt><decl><type><name>graphid</name></type> <name>id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>GraphIdNode</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>GraphIdNode</name>;</typedef>

<comment type="block">/* a container for a linked list of GraphIdNodes */</comment>
<typedef>typedef <type><struct>struct <name>ListGraphId</name>
<block>{
    <decl_stmt><decl><type><name>GraphIdNode</name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GraphIdNode</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64</name></type> <name>size</name></decl>;</decl_stmt>
}</block></struct></type> <name>ListGraphId</name>;</typedef>

<comment type="block">/* declarations */</comment>

<comment type="block">/* definitions */</comment>
<comment type="block">/* return the next GraphIdNode */</comment>
<function><type><name>GraphIdNode</name> <modifier>*</modifier></type><name>next_GraphIdNode</name><parameter_list>(<parameter><decl><type><name>GraphIdNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name><name>node</name><operator>-&gt;</operator><name>next</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* return the graphid */</comment>
<function><type><name>graphid</name></type> <name>get_graphid</name><parameter_list>(<parameter><decl><type><name>GraphIdNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name><name>node</name><operator>-&gt;</operator><name>id</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* get the size of the passed stack */</comment>
<function><type><name>int64</name></type> <name>get_stack_size</name><parameter_list>(<parameter><decl><type><name>ListGraphId</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name><name>stack</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* return a reference to the head entry in the stack, or NULL if empty */</comment>
<function><type><name>GraphIdNode</name> <modifier>*</modifier></type><name>peek_stack_head</name><parameter_list>(<parameter><decl><type><name>ListGraphId</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>stack</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name><name>stack</name><operator>-&gt;</operator><name>head</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* return a reference to the tail entry in the stack */</comment>
<function><type><name>GraphIdNode</name> <modifier>*</modifier></type><name>peek_stack_tail</name><parameter_list>(<parameter><decl><type><name>ListGraphId</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name><name>stack</name><operator>-&gt;</operator><name>tail</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* return a reference to the head entry of a list */</comment>
<function><type><name>GraphIdNode</name> <modifier>*</modifier></type><name>get_list_head</name><parameter_list>(<parameter><decl><type><name>ListGraphId</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name><name>list</name><operator>-&gt;</operator><name>head</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* get the size of the passed list */</comment>
<function><type><name>int64</name></type> <name>get_list_size</name><parameter_list>(<parameter><decl><type><name>ListGraphId</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name><name>list</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Helper function to add a graphid to the end of a ListGraphId container.
 * If the container is NULL, it creates the container with the entry.
 */</comment>
<function><type><name>ListGraphId</name> <modifier>*</modifier></type><name>append_graphid</name><parameter_list>(<parameter><decl><type><name>ListGraphId</name> <modifier>*</modifier></type><name>container</name></decl></parameter>, <parameter><decl><type><name>graphid</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GraphIdNode</name> <modifier>*</modifier></type><name>new_node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* create the new link */</comment>
    <expr_stmt><expr><name>new_node</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GraphIdNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new_node</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new_node</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="block">/*
     * If the container is NULL then this is a new list. So, create the
     * container and add in the new link.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>container</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>container</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ListGraphId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>container</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>new_node</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>container</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>new_node</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>container</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <comment type="block">/* otherwise, this is an existing list, append id */</comment>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name><name>container</name><operator>-&gt;</operator><name>tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>new_node</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>container</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>new_node</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>container</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>container</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* free (delete) a ListGraphId list */</comment>
<function><type><name>void</name></type> <name>free_ListGraphId</name><parameter_list>(<parameter><decl><type><name>ListGraphId</name> <modifier>*</modifier></type><name>container</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GraphIdNode</name> <modifier>*</modifier></type><name>curr_node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GraphIdNode</name> <modifier>*</modifier></type><name>next_node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* if the container is NULL we don't need to delete anything */</comment>
    <if_stmt><if>if <condition>(<expr><name>container</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* otherwise, start from the head, free, and delete the links */</comment>
    <expr_stmt><expr><name>curr_node</name> <operator>=</operator> <name><name>container</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>curr_node</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>next_node</name> <operator>=</operator> <name><name>curr_node</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        <comment type="block">/* we can do this because this is just a list of ints */</comment>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>curr_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>curr_node</name> <operator>=</operator> <name>next_node</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="block">/* free the container */</comment>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>container</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* helper function to create a new, empty, graphid stack */</comment>
<function><type><name>ListGraphId</name> <modifier>*</modifier></type><name>new_graphid_stack</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ListGraphId</name> <modifier>*</modifier></type><name>stack</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* allocate the container for the stack */</comment>
    <expr_stmt><expr><name>stack</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ListGraphId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* set it to its initial values */</comment>
    <expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="block">/* return the new stack */</comment>
    <return>return <expr><name>stack</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* helper function to free a graphid stack's contents but, not the container */</comment>
<function><type><name>void</name></type> <name>free_graphid_stack</name><parameter_list>(<parameter><decl><type><name>ListGraphId</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>stack</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>stack</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"free_graphid_stack: NULL stack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* while there are entries */</comment>
    <while>while <condition>(<expr><name><name>stack</name><operator>-&gt;</operator><name>head</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="block">/* get the next element in the stack */</comment>
        <decl_stmt><decl><type><name>GraphIdNode</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><name><name>stack</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

        <comment type="block">/* free the head element */</comment>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>stack</name><operator>-&gt;</operator><name>head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* move the head to the next */</comment>
        <expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="block">/* reset the tail and size */</comment>
    <expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Helper function for a generic push graphid (int64) to a stack. If the stack
 * is NULL, it will error out.
 */</comment>
<function><type><name>void</name></type> <name>push_graphid_stack</name><parameter_list>(<parameter><decl><type><name>ListGraphId</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>, <parameter><decl><type><name>graphid</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GraphIdNode</name> <modifier>*</modifier></type><name>new_node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>stack</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>stack</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"push_graphid_stack: NULL stack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* create the new element */</comment>
    <expr_stmt><expr><name>new_node</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GraphIdNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new_node</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>

    <comment type="block">/* insert (push) the new element on the top */</comment>
    <expr_stmt><expr><name><name>new_node</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>stack</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>new_node</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Helper function for a generic pop graphid (int64) from a stack. If the stack
 * is empty, it will error out. You should verify that the stack isn't empty
 * prior to calling.
 */</comment>
<function><type><name>graphid</name></type> <name>pop_graphid_stack</name><parameter_list>(<parameter><decl><type><name>ListGraphId</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GraphIdNode</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>graphid</name></type> <name>id</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>stack</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>stack</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>stack</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"pop_graphid_stack: NULL stack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>stack</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"pop_graphid_stack: empty stack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>


    <comment type="block">/* remove the element from the top of the stack */</comment>
    <expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>stack</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name><name>stack</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>size</name></name><operator>--</operator></expr>;</expr_stmt>
    <comment type="block">/* free the element */</comment>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* return the id */</comment>
    <return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>
</unit>
