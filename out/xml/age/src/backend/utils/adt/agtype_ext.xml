<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/age/src/backend/utils/adt/agtype_ext.c"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/agtype_ext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/agtype.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/graphid.h"</cpp:file></cpp:include>

<comment type="block">/* define the type and size of the agt_header */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AGT_HEADER_TYPE</name></cpp:macro> <cpp:value>uint32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AGT_HEADER_SIZE</name></cpp:macro> <cpp:value>sizeof(AGT_HEADER_TYPE)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ag_deserialize_composite</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>agtype_value_type</name></name></type> <name>type</name></decl></parameter>,
                                     <parameter><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>short</name></type> <name>ag_serialize_header</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>short</name></type> <name>padlen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>padlen</name> <operator>=</operator> <call><name>pad_buffer_to_int</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>reserve_from_buffer</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>AGT_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>AGT_HEADER_TYPE</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>buffer</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>offset</name><operator>)</operator><operator>)</operator> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

    <return>return <expr><name>padlen</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Function serializes the data into the buffer provided.
 * Returns false if the type is not defined. Otherwise, true.
 */</comment>
<function><type><name>bool</name></type> <name>ag_serialize_extended_type</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>agtentry</name> <modifier>*</modifier></type><name>agtentry</name></decl></parameter>,
                                <parameter><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>scalar_val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>short</name></type> <name>padlen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>numlen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name><name>scalar_val</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>AGTV_INTEGER</name></expr>:</case>
        <expr_stmt><expr><name>padlen</name> <operator>=</operator> <call><name>ag_serialize_header</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>AGT_HEADER_INTEGER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* copy in the int_value data */</comment>
        <expr_stmt><expr><name>numlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>reserve_from_buffer</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>numlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int64</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>buffer</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>offset</name><operator>)</operator><operator>)</operator> <operator>=</operator> <name><name>scalar_val</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>int_value</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><operator>*</operator><name>agtentry</name> <operator>=</operator> <name>AGTENTRY_IS_AGTYPE</name> <operator>|</operator> <operator>(</operator><name>padlen</name> <operator>+</operator> <name>numlen</name> <operator>+</operator> <name>AGT_HEADER_SIZE</name><operator>)</operator></expr>;</expr_stmt>
        <break>break;</break>

    <case>case <expr><name>AGTV_FLOAT</name></expr>:</case>
        <expr_stmt><expr><name>padlen</name> <operator>=</operator> <call><name>ag_serialize_header</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>AGT_HEADER_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* copy in the float_value data */</comment>
        <expr_stmt><expr><name>numlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>scalar_val</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>float_value</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>reserve_from_buffer</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>numlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>float8</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>buffer</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>offset</name><operator>)</operator><operator>)</operator> <operator>=</operator> <name><name>scalar_val</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>float_value</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><operator>*</operator><name>agtentry</name> <operator>=</operator> <name>AGTENTRY_IS_AGTYPE</name> <operator>|</operator> <operator>(</operator><name>padlen</name> <operator>+</operator> <name>numlen</name> <operator>+</operator> <name>AGT_HEADER_SIZE</name><operator>)</operator></expr>;</expr_stmt>
        <break>break;</break>

    <case>case <expr><name>AGTV_VERTEX</name></expr>:</case>
    <block>{<block_content>
        <decl_stmt><decl><type><name>uint32</name></type> <name>object_ae</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>padlen</name> <operator>=</operator> <call><name>ag_serialize_header</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>AGT_HEADER_VERTEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>convert_extended_object</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>object_ae</name></expr></argument>, <argument><expr><name>scalar_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * Make sure that the end of the buffer is padded to the next offset and
         * add this padding to the length of the buffer used. This ensures that
         * everything stays aligned and eliminates errors caused by compounded
         * offsets in the deserialization routines.
         */</comment>
        <expr_stmt><expr><name>object_ae</name> <operator>+=</operator> <call><name>pad_buffer_to_int</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>*</operator><name>agtentry</name> <operator>=</operator> <name>AGTENTRY_IS_AGTYPE</name> <operator>|</operator>
                    <operator>(</operator><operator>(</operator><name>AGTENTRY_OFFLENMASK</name> <operator>&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>object_ae</name><operator>)</operator> <operator>+</operator> <name>AGT_HEADER_SIZE</name><operator>)</operator></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>AGTV_EDGE</name></expr>:</case>
    <block>{<block_content>
        <decl_stmt><decl><type><name>uint32</name></type> <name>object_ae</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>padlen</name> <operator>=</operator> <call><name>ag_serialize_header</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>AGT_HEADER_EDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>convert_extended_object</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>object_ae</name></expr></argument>, <argument><expr><name>scalar_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * Make sure that the end of the buffer is padded to the next offset and
         * add this padding to the length of the buffer used. This ensures that
         * everything stays aligned and eliminates errors caused by compounded
         * offsets in the deserialization routines.
         */</comment>
        <expr_stmt><expr><name>object_ae</name> <operator>+=</operator> <call><name>pad_buffer_to_int</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>*</operator><name>agtentry</name> <operator>=</operator> <name>AGTENTRY_IS_AGTYPE</name> <operator>|</operator>
                    <operator>(</operator><operator>(</operator><name>AGTENTRY_OFFLENMASK</name> <operator>&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>object_ae</name><operator>)</operator> <operator>+</operator> <name>AGT_HEADER_SIZE</name><operator>)</operator></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>AGTV_PATH</name></expr>:</case>
    <block>{<block_content>
        <decl_stmt><decl><type><name>uint32</name></type> <name>object_ae</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>padlen</name> <operator>=</operator> <call><name>ag_serialize_header</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>AGT_HEADER_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>convert_extended_array</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>object_ae</name></expr></argument>, <argument><expr><name>scalar_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * Make sure that the end of the buffer is padded to the next offset and
         * add this padding to the length of the buffer used. This ensures that
         * everything stays aligned and eliminates errors caused by compounded
         * offsets in the deserialization routines.
         */</comment>
        <expr_stmt><expr><name>object_ae</name> <operator>+=</operator> <call><name>pad_buffer_to_int</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>*</operator><name>agtentry</name> <operator>=</operator> <name>AGTENTRY_IS_AGTYPE</name> <operator>|</operator>
                    <operator>(</operator><operator>(</operator><name>AGTENTRY_OFFLENMASK</name> <operator>&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>object_ae</name><operator>)</operator> <operator>+</operator> <name>AGT_HEADER_SIZE</name><operator>)</operator></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block>

    <default>default:</default>
        <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></switch>
    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Function deserializes the data from the buffer pointed to by base_addr.
 * NOTE: This function writes to the error log and exits for any UNKNOWN
 * AGT_HEADER type.
 */</comment>
<function><type><name>void</name></type> <name>ag_deserialize_extended_type</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>base_addr</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>offset</name></decl></parameter>,
                                  <parameter><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name>base_addr</name> <operator>+</operator> <call><name>INTALIGN</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AGT_HEADER_TYPE</name></type> <name>agt_header</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>AGT_HEADER_TYPE</name> <operator>*</operator><operator>)</operator><name>base</name><operator>)</operator></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>agt_header</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>AGT_HEADER_INTEGER</name></expr>:</case>
        <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>AGTV_INTEGER</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>int_value</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>int64</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>base</name> <operator>+</operator> <name>AGT_HEADER_SIZE</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
        <break>break;</break>

    <case>case <expr><name>AGT_HEADER_FLOAT</name></expr>:</case>
        <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>AGTV_FLOAT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>float_value</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>float8</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>base</name> <operator>+</operator> <name>AGT_HEADER_SIZE</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
        <break>break;</break>

    <case>case <expr><name>AGT_HEADER_VERTEX</name></expr>:</case>
        <expr_stmt><expr><call><name>ag_deserialize_composite</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>AGTV_VERTEX</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

    <case>case <expr><name>AGT_HEADER_EDGE</name></expr>:</case>
        <expr_stmt><expr><call><name>ag_deserialize_composite</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>AGTV_EDGE</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

    <case>case <expr><name>AGT_HEADER_PATH</name></expr>:</case>
        <expr_stmt><expr><call><name>ag_deserialize_composite</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>AGTV_PATH</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

    <default>default:</default>
        <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid AGT header value."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
 * Deserializes a composite type.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ag_deserialize_composite</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>base</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>agtype_value_type</name></name></type> <name>type</name></decl></parameter>,
                                     <parameter><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>agtype_iterator</name> <modifier>*</modifier></type><name>it</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype_iterator_token</name></type> <name>tok</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype_parse_state</name> <modifier>*</modifier></type><name>parse_state</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype_value</name> <modifier>*</modifier></type><name>parsed_agtype_value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <comment type="line">//offset container by the extended type header</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>container_base</name> <init>= <expr><name>base</name> <operator>+</operator> <name>AGT_HEADER_SIZE</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>agtype_value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>agtype_iterator_init</name><argument_list>(<argument><expr><operator>(</operator><name>agtype_container</name> <operator>*</operator><operator>)</operator><name>container_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>(</operator><name>tok</name> <operator>=</operator> <call><name>agtype_iterator_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>WAGT_DONE</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>parsed_agtype_value</name> <operator>=</operator> <call><name>push_agtype_value</name><argument_list>(
            <argument><expr><operator>&amp;</operator><name>parse_state</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>, <argument><expr><ternary><condition><expr><name>tok</name> <operator>&lt;</operator> <name>WAGT_BEGIN_ARRAY</name></expr> ?</condition><then> <expr><name>r</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name><name>parsed_agtype_value</name><operator>-&gt;</operator><name>val</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
