<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/age/src/backend/utils/load/libcsv.c"><comment type="block">/*
libcsv - parse and write csv data
Copyright (C) 2008  Robert Gamble

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">199901L</literal></expr></cpp:if>
<cpp:include>#  <cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_MAX</name></cpp:macro> <cpp:value>((size_t)-1)</cpp:value></cpp:define> <comment type="block">/* C89 doesn't have stdint.h or SIZE_MAX */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/load/csv.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VERSION</name></cpp:macro> <cpp:value>"3.0.3"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROW_NOT_BEGUN</name></cpp:macro>           <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIELD_NOT_BEGUN</name></cpp:macro>         <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIELD_BEGUN</name></cpp:macro>             <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIELD_MIGHT_HAVE_ENDED</name></cpp:macro>  <cpp:value>3</cpp:value></cpp:define>

<comment type="block">/*
  Explanation of states
  ROW_NOT_BEGUN    There have not been any fields encountered for this row
  FIELD_NOT_BEGUN  There have been fields but we are currently not in one
  FIELD_BEGUN      We are in a field
  FIELD_MIGHT_HAVE_ENDED
                   We encountered a double quote inside a quoted field, the
                   field is either ended or the quote is literal
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM_BLK_SIZE</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBMIT_FIELD</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>do { \
   if (!quoted) \
     entry_pos -= spaces; \
   if (p-&gt;options &amp; CSV_APPEND_NULL) \
     ((p)-&gt;entry_buf[entry_pos]) = '\0'; \
   if (cb1 &amp;&amp; (p-&gt;options &amp; CSV_EMPTY_IS_NULL) &amp;&amp; !quoted &amp;&amp; entry_pos == 0) \
     cb1(NULL, entry_pos, data); \
   else if (cb1) \
     cb1(p-&gt;entry_buf, entry_pos, data); \
   pstate = FIELD_NOT_BEGUN; \
   entry_pos = quoted = spaces = 0; \
 } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBMIT_ROW</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>do { \
    if (cb2) \
      cb2(c, data); \
    pstate = ROW_NOT_BEGUN; \
    entry_pos = quoted = spaces = 0; \
  } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUBMIT_CHAR</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((p)-&gt;entry_buf[entry_pos++] = (c))</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>csv_errors</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"success"</literal></expr>,
                             <expr><literal type="string">"error parsing data while strict checking enabled"</literal></expr>,
                             <expr><literal type="string">"memory exhausted while increasing buffer size"</literal></expr>,
                             <expr><literal type="string">"data size too large"</literal></expr>,
                             <expr><literal type="string">"invalid status code"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type>
<name>csv_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>csv_parser</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p</name> <operator>&amp;&amp;</operator> <literal type="string">"received null csv_parser"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Return the current status of the parser */</comment>
  <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>status</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>csv_strerror</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Return a textual description of status */</comment>
  <if_stmt><if>if <condition>(<expr><name>status</name> <operator>&gt;=</operator> <name>CSV_EINVALID</name> <operator>||</operator> <name>status</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name><name>csv_errors</name><index>[<expr><name>CSV_EINVALID</name></expr>]</index></name></expr>;</return></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <return>return <expr><name><name>csv_errors</name><index>[<expr><name>status</name></expr>]</index></name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>csv_get_opts</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>csv_parser</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Return the currently set options of parser */</comment>
  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>options</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>csv_set_opts</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>csv_parser</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Set the options */</comment>
  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <name>options</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>csv_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>csv_parser</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Initialize a csv_parser object returns 0 on success, -1 on error */</comment>
  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>entry_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pstate</name></name> <operator>=</operator> <name>ROW_NOT_BEGUN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>quoted</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>spaces</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>entry_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>entry_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <name>options</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>quote_char</name></name> <operator>=</operator> <name>CSV_QUOTE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>delim_char</name></name> <operator>=</operator> <name>CSV_COMMA</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>is_space</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>is_term</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>blk_size</name></name> <operator>=</operator> <name>MEM_BLK_SIZE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>malloc_func</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>realloc_func</name></name> <operator>=</operator> <name>realloc</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>free_func</name></name> <operator>=</operator> <name>free</name></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>csv_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>csv_parser</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Free the entry_buffer of csv_parser object */</comment>
  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>entry_buf</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>free_func</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>free_func</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>entry_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>entry_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>entry_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <return>return;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>csv_fini</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>csv_parser</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb1</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb2</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>quoted</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>pstate</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>spaces</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>entry_pos</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <comment type="block">/* Finalize parsing.  Needed, for example, when file does not end in a newline */</comment>
  <expr_stmt><expr><name>quoted</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>quoted</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>pstate</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pstate</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>spaces</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>spaces</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>entry_pos</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>entry_pos</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pstate</name> <operator>==</operator> <name>FIELD_BEGUN</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>quoted</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>CSV_STRICT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>CSV_STRICT_FINI</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <comment type="block">/* Current field is quoted, no end-quote was seen, and CSV_STRICT_FINI is set */</comment>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>CSV_EPARSE</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <switch>switch <condition>(<expr><name>pstate</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>FIELD_MIGHT_HAVE_ENDED</name></expr>:</case>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>entry_pos</name></name> <operator>-=</operator> <name><name>p</name><operator>-&gt;</operator><name>spaces</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>  <comment type="block">/* get rid of spaces and original quote */</comment>
      <expr_stmt><expr><name>entry_pos</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>entry_pos</name></name></expr>;</expr_stmt>
      <comment type="block">/*lint -fallthrough */</comment>
    <case>case <expr><name>FIELD_NOT_BEGUN</name></expr>:</case>
    <case>case <expr><name>FIELD_BEGUN</name></expr>:</case>
      <comment type="block">/* Unnecessary:
      quoted = p-&gt;quoted, pstate = p-&gt;pstate;
      spaces = p-&gt;spaces, entry_pos = p-&gt;entry_pos;
      */</comment>
      <expr_stmt><expr><call><name>SUBMIT_FIELD</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SUBMIT_ROW</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>ROW_NOT_BEGUN</name></expr>:</case> <comment type="block">/* Already ended properly */</comment>
      <empty_stmt>;</empty_stmt>
  </block_content>}</block></switch>

  <comment type="block">/* Reset parser */</comment>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>spaces</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>quoted</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>entry_pos</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pstate</name></name> <operator>=</operator> <name>ROW_NOT_BEGUN</name></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>csv_set_delim</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>csv_parser</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Set the delimiter */</comment>
  <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>delim_char</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>csv_set_quote</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>csv_parser</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Set the quote character */</comment>
  <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>quote_char</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>char</name></type>
<name>csv_get_delim</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>csv_parser</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p</name> <operator>&amp;&amp;</operator> <literal type="string">"received null csv_parser"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get the delimiter */</comment>
  <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>delim_char</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>char</name></type>
<name>csv_get_quote</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>csv_parser</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p</name> <operator>&amp;&amp;</operator> <literal type="string">"received null csv_parser"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get the quote character */</comment>
  <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>quote_char</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>csv_set_space_func</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>csv_parser</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f</name>)<parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>char</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Set the space function */</comment>
  <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>is_space</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
 
<function><type><name>void</name></type>
<name>csv_set_term_func</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>csv_parser</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f</name>)<parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>char</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Set the term function */</comment>
  <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>is_term</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>csv_set_realloc_func</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>csv_parser</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>f</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Set the realloc function used to increase buffer size */</comment>
  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <name>f</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>realloc_func</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
 
<function><type><name>void</name></type>
<name>csv_set_free_func</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>csv_parser</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>f</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Set the free function used to free the buffer */</comment>
  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <name>f</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>free_func</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>csv_set_blk_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>csv_parser</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Set the block size used to increment buffer size */</comment>
  <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>blk_size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>csv_get_buffer_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>csv_parser</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Get the size of the entry buffer */</comment>
  <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>entry_size</name></name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
 
<function><type><specifier>static</specifier> <name>int</name></type>
<name>csv_increase_buffer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>csv_parser</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>to_add</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>vp</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>realloc_func</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <comment type="block">/* Increase the size of the entry buffer.  Attempt to increase size by 
   * p-&gt;blk_size, if this is larger than SIZE_MAX try to increase current
   * buffer size to SIZE_MAX.  If allocation fails, try to allocate halve 
   * the size and try again until successful or increment size is zero.
   */</comment>

  <expr_stmt><expr><name>to_add</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>blk_size</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>entry_size</name></name> <operator>&gt;=</operator> <name>SIZE_MAX</name> <operator>-</operator> <name>to_add</name></expr> )</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>to_add</name> <operator>=</operator> <name>SIZE_MAX</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>entry_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>to_add</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>CSV_ETOOBIG</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><operator>(</operator><name>vp</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>realloc_func</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>entry_buf</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>entry_size</name></name> <operator>+</operator> <name>to_add</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>to_add</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>to_add</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>CSV_ENOMEM</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <comment type="block">/* Update entry buffer pointer and entry_size if successful */</comment>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>entry_buf</name></name> <operator>=</operator> <name>vp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>entry_size</name></name> <operator>+=</operator> <name>to_add</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
 
<function><type><name>size_t</name></type>
<name>csv_parse</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>csv_parser</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb1</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>cb2</name>)<parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>us</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>  <comment type="block">/* Access input data as array of unsigned char */</comment>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl>;</decl_stmt>              <comment type="block">/* The character we are currently processing */</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>               <comment type="block">/* The number of characters we have processed in this call */</comment>

  <comment type="block">/* Store key fields into local variables for performance */</comment>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>delim</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>delim_char</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>quote</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>quote_char</name></name></expr></init></decl>;</decl_stmt>
  <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>is_space</name>)<parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>char</name></decl></parameter>)</parameter_list> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>is_space</name></name></expr></init>;</function_decl>
  <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>is_term</name>)<parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>char</name></decl></parameter>)</parameter_list> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>is_term</name></name></expr></init>;</function_decl>
  <decl_stmt><decl><type><name>int</name></type> <name>quoted</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>quoted</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>pstate</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pstate</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>spaces</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>spaces</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>entry_pos</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>entry_pos</name></name></expr></init></decl>;</decl_stmt>


  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>entry_buf</name></name> <operator>&amp;&amp;</operator> <name>pos</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
    <comment type="block">/* Buffer hasn't been allocated yet and len &gt; 0 */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>csv_increase_buffer</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>quoted</name></name> <operator>=</operator> <name>quoted</name></expr><operator>,</operator> <expr><name><name>p</name><operator>-&gt;</operator><name>pstate</name></name> <operator>=</operator> <name>pstate</name></expr><operator>,</operator> <expr><name><name>p</name><operator>-&gt;</operator><name>spaces</name></name> <operator>=</operator> <name>spaces</name></expr><operator>,</operator> <expr><name><name>p</name><operator>-&gt;</operator><name>entry_pos</name></name> <operator>=</operator> <name>entry_pos</name></expr>;</expr_stmt>
      <return>return <expr><name>pos</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
    <comment type="block">/* Check memory usage, increase buffer if necessary */</comment>
    <if_stmt><if>if <condition>(<expr><name>entry_pos</name> <operator>==</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>CSV_APPEND_NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>entry_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>entry_size</name></name></expr></else></ternary><operator>)</operator></expr> )</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>csv_increase_buffer</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>quoted</name></name> <operator>=</operator> <name>quoted</name></expr><operator>,</operator> <expr><name><name>p</name><operator>-&gt;</operator><name>pstate</name></name> <operator>=</operator> <name>pstate</name></expr><operator>,</operator> <expr><name><name>p</name><operator>-&gt;</operator><name>spaces</name></name> <operator>=</operator> <name>spaces</name></expr><operator>,</operator> <expr><name><name>p</name><operator>-&gt;</operator><name>entry_pos</name></name> <operator>=</operator> <name>entry_pos</name></expr>;</expr_stmt>
        <return>return <expr><name>pos</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>us</name><index>[<expr><name>pos</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name>pstate</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>ROW_NOT_BEGUN</name></expr>:</case>
      <case>case <expr><name>FIELD_NOT_BEGUN</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><ternary><condition><expr><name>is_space</name></expr> ?</condition><then> <expr><call><name>is_space</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>c</name> <operator>==</operator> <name>CSV_SPACE</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>CSV_TAB</name></expr></else></ternary><operator>)</operator> <operator>&amp;&amp;</operator> <name>c</name><operator>!=</operator><name>delim</name></expr>)</condition> <block>{<block_content> <comment type="block">/* Space or Tab */</comment>
          <continue>continue;</continue>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><ternary><condition><expr><name>is_term</name></expr> ?</condition><then> <expr><call><name>is_term</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>c</name> <operator>==</operator> <name>CSV_CR</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>CSV_LF</name></expr></else></ternary></expr>)</condition> <block>{<block_content> <comment type="block">/* Carriage Return or Line Feed */</comment>
          <if_stmt><if>if <condition>(<expr><name>pstate</name> <operator>==</operator> <name>FIELD_NOT_BEGUN</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>SUBMIT_FIELD</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>SUBMIT_ROW</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
          </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="block">/* ROW_NOT_BEGUN */</comment>
            <comment type="block">/* Don't submit empty rows by default */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>CSV_REPALL_NL</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name>SUBMIT_ROW</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></else></if_stmt>
          <continue>continue;</continue>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <name>delim</name></expr>)</condition> <block>{<block_content> <comment type="block">/* Comma */</comment>
          <expr_stmt><expr><call><name>SUBMIT_FIELD</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <name>quote</name></expr>)</condition> <block>{<block_content> <comment type="block">/* Quote */</comment>
          <expr_stmt><expr><name>pstate</name> <operator>=</operator> <name>FIELD_BEGUN</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>quoted</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>               <comment type="block">/* Anything else */</comment>
          <expr_stmt><expr><name>pstate</name> <operator>=</operator> <name>FIELD_BEGUN</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>quoted</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SUBMIT_CHAR</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
      <case>case <expr><name>FIELD_BEGUN</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>quote</name></expr>)</condition> <block>{<block_content>         <comment type="block">/* Quote */</comment>
          <if_stmt><if>if <condition>(<expr><name>quoted</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>SUBMIT_CHAR</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>pstate</name> <operator>=</operator> <name>FIELD_MIGHT_HAVE_ENDED</name></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="block">/* STRICT ERROR - double quote inside non-quoted field */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>CSV_STRICT</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>CSV_EPARSE</name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>quoted</name></name> <operator>=</operator> <name>quoted</name></expr><operator>,</operator> <expr><name><name>p</name><operator>-&gt;</operator><name>pstate</name></name> <operator>=</operator> <name>pstate</name></expr><operator>,</operator> <expr><name><name>p</name><operator>-&gt;</operator><name>spaces</name></name> <operator>=</operator> <name>spaces</name></expr><operator>,</operator> <expr><name><name>p</name><operator>-&gt;</operator><name>entry_pos</name></name> <operator>=</operator> <name>entry_pos</name></expr>;</expr_stmt>
              <return>return <expr><name>pos</name><operator>-</operator><literal type="number">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>SUBMIT_CHAR</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>spaces</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <name>delim</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* Comma */</comment>
          <if_stmt><if>if <condition>(<expr><name>quoted</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>SUBMIT_CHAR</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>SUBMIT_FIELD</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><ternary><condition><expr><name>is_term</name></expr> ?</condition><then> <expr><call><name>is_term</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>c</name> <operator>==</operator> <name>CSV_CR</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>CSV_LF</name></expr></else></ternary></expr>)</condition> <block>{<block_content>  <comment type="block">/* Carriage Return or Line Feed */</comment>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><name>quoted</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>SUBMIT_FIELD</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>SUBMIT_ROW</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>SUBMIT_CHAR</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>quoted</name> <operator>&amp;&amp;</operator> <operator>(</operator><ternary><condition><expr><name>is_space</name></expr>?</condition><then> <expr><call><name>is_space</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>c</name> <operator>==</operator> <name>CSV_SPACE</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>CSV_TAB</name></expr></else></ternary><operator>)</operator></expr>)</condition> <block>{<block_content> <comment type="block">/* Tab or space for non-quoted field */</comment>
            <expr_stmt><expr><call><name>SUBMIT_CHAR</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>spaces</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="block">/* Anything else */</comment>
          <expr_stmt><expr><call><name>SUBMIT_CHAR</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>spaces</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
      <case>case <expr><name>FIELD_MIGHT_HAVE_ENDED</name></expr>:</case>
        <comment type="block">/* This only happens when a quote character is encountered in a quoted field */</comment>
        <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>delim</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* Comma */</comment>
          <expr_stmt><expr><name>entry_pos</name> <operator>-=</operator> <name>spaces</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>  <comment type="block">/* get rid of spaces and original quote */</comment>
          <expr_stmt><expr><call><name>SUBMIT_FIELD</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><ternary><condition><expr><name>is_term</name></expr> ?</condition><then> <expr><call><name>is_term</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>c</name> <operator>==</operator> <name>CSV_CR</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>CSV_LF</name></expr></else></ternary></expr>)</condition> <block>{<block_content>  <comment type="block">/* Carriage Return or Line Feed */</comment>
          <expr_stmt><expr><name>entry_pos</name> <operator>-=</operator> <name>spaces</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>  <comment type="block">/* get rid of spaces and original quote */</comment>
          <expr_stmt><expr><call><name>SUBMIT_FIELD</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SUBMIT_ROW</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><ternary><condition><expr><name>is_space</name></expr> ?</condition><then> <expr><call><name>is_space</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>c</name> <operator>==</operator> <name>CSV_SPACE</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>CSV_TAB</name></expr></else></ternary></expr>)</condition> <block>{<block_content>  <comment type="block">/* Space or Tab */</comment>
          <expr_stmt><expr><call><name>SUBMIT_CHAR</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>spaces</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <name>quote</name></expr>)</condition> <block>{<block_content>  <comment type="block">/* Quote */</comment>
          <if_stmt><if>if <condition>(<expr><name>spaces</name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* STRICT ERROR - unescaped double quote */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>CSV_STRICT</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>CSV_EPARSE</name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>quoted</name></name> <operator>=</operator> <name>quoted</name></expr><operator>,</operator> <expr><name><name>p</name><operator>-&gt;</operator><name>pstate</name></name> <operator>=</operator> <name>pstate</name></expr><operator>,</operator> <expr><name><name>p</name><operator>-&gt;</operator><name>spaces</name></name> <operator>=</operator> <name>spaces</name></expr><operator>,</operator> <expr><name><name>p</name><operator>-&gt;</operator><name>entry_pos</name></name> <operator>=</operator> <name>entry_pos</name></expr>;</expr_stmt>
              <return>return <expr><name>pos</name><operator>-</operator><literal type="number">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>spaces</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>SUBMIT_CHAR</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="block">/* Two quotes in a row */</comment>
            <expr_stmt><expr><name>pstate</name> <operator>=</operator> <name>FIELD_BEGUN</name></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="block">/* Anything else */</comment>
          <comment type="block">/* STRICT ERROR - unescaped double quote */</comment>
          <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>CSV_STRICT</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>CSV_EPARSE</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>quoted</name></name> <operator>=</operator> <name>quoted</name></expr><operator>,</operator> <expr><name><name>p</name><operator>-&gt;</operator><name>pstate</name></name> <operator>=</operator> <name>pstate</name></expr><operator>,</operator> <expr><name><name>p</name><operator>-&gt;</operator><name>spaces</name></name> <operator>=</operator> <name>spaces</name></expr><operator>,</operator> <expr><name><name>p</name><operator>-&gt;</operator><name>entry_pos</name></name> <operator>=</operator> <name>entry_pos</name></expr>;</expr_stmt>
            <return>return <expr><name>pos</name><operator>-</operator><literal type="number">1</literal></expr>;</return>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name>pstate</name> <operator>=</operator> <name>FIELD_BEGUN</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>spaces</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SUBMIT_CHAR</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
     <default>default:</default>
       <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></while>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>quoted</name></name> <operator>=</operator> <name>quoted</name></expr><operator>,</operator> <expr><name><name>p</name><operator>-&gt;</operator><name>pstate</name></name> <operator>=</operator> <name>pstate</name></expr><operator>,</operator> <expr><name><name>p</name><operator>-&gt;</operator><name>spaces</name></name> <operator>=</operator> <name>spaces</name></expr><operator>,</operator> <expr><name><name>p</name><operator>-&gt;</operator><name>entry_pos</name></name> <operator>=</operator> <name>entry_pos</name></expr>;</expr_stmt>
  <return>return <expr><name>pos</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>csv_write</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dest_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>src_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>csv_write2</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>dest_size</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_size</name></expr></argument>, <argument><expr><name>CSV_QUOTE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>csv_fwrite</name> <parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>src_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>csv_fwrite2</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_size</name></expr></argument>, <argument><expr><name>CSV_QUOTE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>csv_write2</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dest_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>src_size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>quote</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>cdest</name> <init>= <expr><name>dest</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>csrc</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>chars</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>src</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>dest</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>dest_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>dest_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>*</operator><name>cdest</name><operator>++</operator> <operator>=</operator> <name>quote</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>chars</name><operator>++</operator></expr>;</expr_stmt>

  <while>while <condition>(<expr><name>src_size</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>csrc</name> <operator>==</operator> <name>quote</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>dest_size</name> <operator>&gt;</operator> <name>chars</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>cdest</name><operator>++</operator> <operator>=</operator> <name>quote</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>chars</name> <operator>&lt;</operator> <name>SIZE_MAX</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>chars</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>dest_size</name> <operator>&gt;</operator> <name>chars</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><operator>*</operator><name>cdest</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>csrc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>chars</name> <operator>&lt;</operator> <name>SIZE_MAX</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>chars</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>src_size</name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>csrc</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>dest_size</name> <operator>&gt;</operator> <name>chars</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>*</operator><name>cdest</name> <operator>=</operator> <name>quote</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>chars</name> <operator>&lt;</operator> <name>SIZE_MAX</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>chars</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <return>return <expr><name>chars</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>csv_fwrite2</name> <parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>src_size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>quote</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>csrc</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>src</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>fputc</name><argument_list>(<argument><expr><name>quote</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>EOF</name></expr>;</return></block_content></block></if></if_stmt>

  <while>while <condition>(<expr><name>src_size</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>csrc</name> <operator>==</operator> <name>quote</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>fputc</name><argument_list>(<argument><expr><name>quote</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EOF</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>fputc</name><argument_list>(<argument><expr><operator>*</operator><name>csrc</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>EOF</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>src_size</name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>csrc</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><call><name>fputc</name><argument_list>(<argument><expr><name>quote</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>EOF</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
