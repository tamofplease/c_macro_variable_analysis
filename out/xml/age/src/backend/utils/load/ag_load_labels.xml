<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/age/src/backend/utils/load/ag_load_labels.c"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/heapam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/dependency.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/namespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/objectaddress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_class_d.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/defrem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/sequence.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/tablecmds.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/makefuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/nodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/parsenodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/pg_list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/plannodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/primnodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/value.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parse_node.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/lockdefs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcop/dest.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcop/utility.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/inval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/ag_graph.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/ag_label.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/label_commands.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/ag_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/agtype.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/graphid.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/load/ag_load_labels.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/load/age_load.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/load/csv.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>vertex_field_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>field</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>field_len</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><name>csv_vertex_reader</name> <modifier>*</modifier></type><name>cr</name> <init>= <expr><operator>(</operator><name>csv_vertex_reader</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>cr</name><operator>-&gt;</operator><name>error</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>cr</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>,<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"There is some unknown error"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// check for space to store this field</comment>
    <if_stmt><if>if <condition>(<expr><name><name>cr</name><operator>-&gt;</operator><name>cur_field</name></name> <operator>==</operator> <name><name>cr</name><operator>-&gt;</operator><name>alloc</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>cr</name><operator>-&gt;</operator><name>alloc</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cr</name><operator>-&gt;</operator><name>fields</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>cr</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>cr</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cr</name><operator>-&gt;</operator><name>fields_len</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>cr</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>cr</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>cr</name><operator>-&gt;</operator><name>fields</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>cr</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                    <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"field_cb: failed to reallocate %zu bytes\n"</literal></expr></argument>,
                            <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>cr</name><operator>-&gt;</operator><name>alloc</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>cr</name><operator>-&gt;</operator><name>fields_len</name><index>[<expr><name><name>cr</name><operator>-&gt;</operator><name>cur_field</name></name></expr>]</index></name> <operator>=</operator> <name>field_len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cr</name><operator>-&gt;</operator><name>curr_row_length</name></name> <operator>+=</operator> <name>field_len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cr</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name><name>cr</name><operator>-&gt;</operator><name>cur_field</name></name></expr>]</index></name> <operator>=</operator> <call><name>strndup</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>field</name></expr></argument>, <argument><expr><name>field_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cr</name><operator>-&gt;</operator><name>cur_field</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>vertex_row_cb</name><argument_list>(<argument><expr><name>int</name> <name>delim</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>unused</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>data</name></expr></argument>)</argument_list>
<block>{<block_content>

    <decl_stmt><decl><type><name>csv_vertex_reader</name> <modifier>*</modifier></type><name>cr</name> <init>= <expr><operator>(</operator><name>csv_vertex_reader</name><operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>agtype</name> <modifier>*</modifier></type><name>props</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n_fields</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>graphid</name></type> <name>object_graph_id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64</name></type> <name>label_id_int</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>n_fields</name> <operator>=</operator> <name><name>cr</name><operator>-&gt;</operator><name>cur_field</name></name></expr>;</expr_stmt>


    <if_stmt><if>if <condition>(<expr><name><name>cr</name><operator>-&gt;</operator><name>row</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>cr</name><operator>-&gt;</operator><name>header_num</name></name> <operator>=</operator> <name><name>cr</name><operator>-&gt;</operator><name>cur_field</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cr</name><operator>-&gt;</operator><name>header_row_length</name></name> <operator>=</operator> <name><name>cr</name><operator>-&gt;</operator><name>curr_row_length</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cr</name><operator>-&gt;</operator><name>header_len</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>*</operator> <operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>cr</name><operator>-&gt;</operator><name>cur_field</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cr</name><operator>-&gt;</operator><name>header</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>cr</name><operator>-&gt;</operator><name>cur_field</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>cr</name><operator>-&gt;</operator><name>cur_field</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name><name>cr</name><operator>-&gt;</operator><name>header_len</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>cr</name><operator>-&gt;</operator><name>fields_len</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cr</name><operator>-&gt;</operator><name>header</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>strndup</name><argument_list>(<argument><expr><name><name>cr</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cr</name><operator>-&gt;</operator><name>header_len</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>cr</name><operator>-&gt;</operator><name>id_field_exists</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>label_id_int</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name><name>cr</name><operator>-&gt;</operator><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>label_id_int</name> <operator>=</operator> <operator>(</operator><name>int64</name><operator>)</operator><name><name>cr</name><operator>-&gt;</operator><name>row</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name>object_graph_id</name> <operator>=</operator> <call><name>make_graphid</name><argument_list>(<argument><expr><name><name>cr</name><operator>-&gt;</operator><name>object_id</name></name></expr></argument>, <argument><expr><name>label_id_int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>props</name> <operator>=</operator> <call><name>create_agtype_from_list</name><argument_list>(<argument><expr><name><name>cr</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><name><name>cr</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>,
                                        <argument><expr><name>n_fields</name></expr></argument>, <argument><expr><name>label_id_int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>insert_vertex_simple</name><argument_list>(<argument><expr><name><name>cr</name><operator>-&gt;</operator><name>graph_id</name></name></expr></argument>, <argument><expr><name><name>cr</name><operator>-&gt;</operator><name>object_name</name></name></expr></argument>,
                             <argument><expr><name>object_graph_id</name></expr></argument>, <argument><expr><name>props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>


    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n_fields</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cr</name><operator>-&gt;</operator><name>fields</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>


    <if_stmt><if>if <condition>(<expr><name><name>cr</name><operator>-&gt;</operator><name>error</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>,<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"THere is some error"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>


    <expr_stmt><expr><name><name>cr</name><operator>-&gt;</operator><name>cur_field</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cr</name><operator>-&gt;</operator><name>curr_row_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cr</name><operator>-&gt;</operator><name>row</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_space</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>CSV_SPACE</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>CSV_TAB</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>is_term</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>CSV_CR</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>CSV_LF</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>create_labels_from_csv_file</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>file_path</name></decl></parameter>,
                                <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>graph_name</name></decl></parameter>,
                                <parameter><decl><type><name>Oid</name></type> <name>graph_id</name></decl></parameter>,
                                <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>object_name</name></decl></parameter>,
                                <parameter><decl><type><name>int</name></type> <name>object_id</name></decl></parameter>,
                                <parameter><decl><type><name>bool</name></type> <name>id_field_exists</name></decl></parameter>)</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>csv_parser</name></name></type> <name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>bytes_read</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>options</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>csv_vertex_reader</name></type> <name>cr</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>csv_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Failed to initialize csv parser\n"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>csv_set_space_func</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>is_space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>csv_set_term_func</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>is_term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fp</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Failed to open %s\n"</literal></expr></argument>, <argument><expr><name>file_path</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>


    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>cr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>csv_vertex_reader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>cr</name><operator>.</operator><name>alloc</name></name> <operator>=</operator> <literal type="number">2048</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cr</name><operator>.</operator><name>fields</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>cr</name><operator>.</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cr</name><operator>.</operator><name>fields_len</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>cr</name><operator>.</operator><name>alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cr</name><operator>.</operator><name>header_row_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cr</name><operator>.</operator><name>curr_row_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cr</name><operator>.</operator><name>graph_name</name></name> <operator>=</operator> <name>graph_name</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cr</name><operator>.</operator><name>graph_id</name></name> <operator>=</operator> <name>graph_id</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cr</name><operator>.</operator><name>object_name</name></name> <operator>=</operator> <name>object_name</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cr</name><operator>.</operator><name>object_id</name></name> <operator>=</operator> <name>object_id</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cr</name><operator>.</operator><name>id_field_exists</name></name> <operator>=</operator> <name>id_field_exists</name></expr>;</expr_stmt>



    <while>while <condition>(<expr><operator>(</operator><name>bytes_read</name><operator>=</operator><call><name>fread</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>csv_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bytes_read</name></expr></argument>, <argument><expr><name>vertex_field_cb</name></expr></argument>,
                      <argument><expr><name>vertex_row_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>bytes_read</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Error while parsing file: %s\n"</literal></expr></argument>,
                                   <argument><expr><call><name>csv_strerror</name><argument_list>(<argument><expr><call><name>csv_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>csv_fini</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>vertex_field_cb</name></expr></argument>, <argument><expr><name>vertex_row_cb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Error while reading file %s\n"</literal></expr></argument>,
                               <argument><expr><name>file_path</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cr</name><operator>.</operator><name>fields</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>csv_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>EXIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
