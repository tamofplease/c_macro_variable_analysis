<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/age/src/backend/optimizer/cypher_paths.c"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/sysattr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type_d.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/parsenodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/primnodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/relation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/pathnode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/paths.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/cypher_pathnode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/cypher_paths.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/ag_func.h"</cpp:file></cpp:include>

<typedef>typedef <type><enum>enum <name>cypher_clause_kind</name>
<block>{
    <decl><name>CYPHER_CLAUSE_NONE</name></decl>,
    <decl><name>CYPHER_CLAUSE_CREATE</name></decl>,
    <decl><name>CYPHER_CLAUSE_SET</name></decl>,
    <decl><name>CYPHER_CLAUSE_DELETE</name></decl>,
    <decl><name>CYPHER_CLAUSE_MERGE</name></decl>
}</block></enum></type> <name>cypher_clause_kind</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>set_rel_pathlist_hook_type</name></type> <name>prev_set_rel_pathlist_hook</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>set_rel_pathlist</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>, <parameter><decl><type><name>Index</name></type> <name>rti</name></decl></parameter>,
                             <parameter><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>rte</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>cypher_clause_kind</name></type> <name>get_cypher_clause_kind</name><parameter_list>(<parameter><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>rte</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_cypher_create_clause</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>,
                                        <parameter><decl><type><name>Index</name></type> <name>rti</name></decl></parameter>, <parameter><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>rte</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_cypher_set_clause</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>,
                                     <parameter><decl><type><name>Index</name></type> <name>rti</name></decl></parameter>, <parameter><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>rte</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_cypher_delete_clause</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>,
                                        <parameter><decl><type><name>Index</name></type> <name>rti</name></decl></parameter>, <parameter><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>rte</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_cypher_merge_clause</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>,
                                        <parameter><decl><type><name>Index</name></type> <name>rti</name></decl></parameter>, <parameter><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>rte</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>set_rel_pathlist_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>prev_set_rel_pathlist_hook</name> <operator>=</operator> <name>set_rel_pathlist_hook</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>set_rel_pathlist_hook</name> <operator>=</operator> <name>set_rel_pathlist</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>set_rel_pathlist_fini</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>set_rel_pathlist_hook</name> <operator>=</operator> <name>prev_set_rel_pathlist_hook</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_rel_pathlist</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>, <parameter><decl><type><name>Index</name></type> <name>rti</name></decl></parameter>,
                             <parameter><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>rte</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>prev_set_rel_pathlist_hook</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>prev_set_rel_pathlist_hook</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name>rti</name></expr></argument>, <argument><expr><name>rte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <switch>switch <condition>(<expr><call><name>get_cypher_clause_kind</name><argument_list>(<argument><expr><name>rte</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>CYPHER_CLAUSE_CREATE</name></expr>:</case>
        <expr_stmt><expr><call><name>handle_cypher_create_clause</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name>rti</name></expr></argument>, <argument><expr><name>rte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>CYPHER_CLAUSE_SET</name></expr>:</case>
        <expr_stmt><expr><call><name>handle_cypher_set_clause</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name>rti</name></expr></argument>, <argument><expr><name>rte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>CYPHER_CLAUSE_DELETE</name></expr>:</case>
        <expr_stmt><expr><call><name>handle_cypher_delete_clause</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name>rti</name></expr></argument>, <argument><expr><name>rte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>CYPHER_CLAUSE_MERGE</name></expr>:</case>
        <expr_stmt><expr><call><name>handle_cypher_merge_clause</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name>rti</name></expr></argument>, <argument><expr><name>rte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>CYPHER_CLAUSE_NONE</name></expr>:</case>
        <break>break;</break>
    <default>default:</default>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg_internal</name><argument_list>(<argument><expr><literal type="string">"invalid cypher_clause_kind"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
 * Check to see if the rte is a Cypher clause. An rte is only a Cypher clause
 * if it is a subquery, with the last entry in its target list, that is a
 * FuncExpr.
 */</comment>
<function><type><specifier>static</specifier> <name>cypher_clause_kind</name></type> <name>get_cypher_clause_kind</name><parameter_list>(<parameter><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>rte</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>TargetEntry</name> <modifier>*</modifier></type><name>te</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FuncExpr</name> <modifier>*</modifier></type><name>fe</name></decl>;</decl_stmt>

    <comment type="line">// If it's not a subquery, it's not a Cypher clause.</comment>
    <if_stmt><if>if <condition>(<expr><name><name>rte</name><operator>-&gt;</operator><name>rtekind</name></name> <operator>!=</operator> <name>RTE_SUBQUERY</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>CYPHER_CLAUSE_NONE</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// Make sure the targetList isn't NULL. NULL means potential EXIST subclause</comment>
    <if_stmt><if>if <condition>(<expr><name><name>rte</name><operator>-&gt;</operator><name>subquery</name><operator>-&gt;</operator><name>targetList</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>CYPHER_CLAUSE_NONE</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// A Cypher clause function is always the last entry.</comment>
    <expr_stmt><expr><name>te</name> <operator>=</operator> <call><name>llast</name><argument_list>(<argument><expr><name><name>rte</name><operator>-&gt;</operator><name>subquery</name><operator>-&gt;</operator><name>targetList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// If the last entry is not a FuncExpr, it's not a Cypher clause.</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name><name>te</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>, <argument><expr><name>FuncExpr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>CYPHER_CLAUSE_NONE</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>fe</name> <operator>=</operator> <operator>(</operator><name>FuncExpr</name> <operator>*</operator><operator>)</operator><name><name>te</name><operator>-&gt;</operator><name>expr</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>is_oid_ag_func</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>funcid</name></name></expr></argument>, <argument><expr><name>CREATE_CLAUSE_FUNCTION_NAME</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>CYPHER_CLAUSE_CREATE</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>is_oid_ag_func</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>funcid</name></name></expr></argument>, <argument><expr><name>SET_CLAUSE_FUNCTION_NAME</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>CYPHER_CLAUSE_SET</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>is_oid_ag_func</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>funcid</name></name></expr></argument>, <argument><expr><name>DELETE_CLAUSE_FUNCTION_NAME</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>CYPHER_CLAUSE_DELETE</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>is_oid_ag_func</name><argument_list>(<argument><expr><name><name>fe</name><operator>-&gt;</operator><name>funcid</name></name></expr></argument>, <argument><expr><name>MERGE_CLAUSE_FUNCTION_NAME</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>CYPHER_CLAUSE_MERGE</name></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><name>CYPHER_CLAUSE_NONE</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">// replace all possible paths with our CustomPath</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_cypher_delete_clause</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>,
                                        <parameter><decl><type><name>Index</name></type> <name>rti</name></decl></parameter>, <parameter><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>rte</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>TargetEntry</name> <modifier>*</modifier></type><name>te</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FuncExpr</name> <modifier>*</modifier></type><name>fe</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>custom_private</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CustomPath</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

    <comment type="line">// Add the pattern to the CustomPath</comment>
    <expr_stmt><expr><name>te</name> <operator>=</operator> <operator>(</operator><name>TargetEntry</name> <operator>*</operator><operator>)</operator><call><name>llast</name><argument_list>(<argument><expr><name><name>rte</name><operator>-&gt;</operator><name>subquery</name><operator>-&gt;</operator><name>targetList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>fe</name> <operator>=</operator> <operator>(</operator><name>FuncExpr</name> <operator>*</operator><operator>)</operator><name><name>te</name><operator>-&gt;</operator><name>expr</name></name></expr>;</expr_stmt>
    <comment type="line">// pass the const that holds the data structure to the path.</comment>
    <expr_stmt><expr><name>custom_private</name> <operator>=</operator> <name><name>fe</name><operator>-&gt;</operator><name>args</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>create_cypher_delete_path</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name>custom_private</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Discard any pre-existing paths</comment>
    <expr_stmt><expr><name><name>rel</name><operator>-&gt;</operator><name>pathlist</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rel</name><operator>-&gt;</operator><name>partial_pathlist</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>add_path</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Take the paths possible for the RelOptInfo that represents our
 * _cypher_delete_clause function replace them with our delete clause
 * path. The original paths will be children to the new delete path.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_cypher_create_clause</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>,
                                        <parameter><decl><type><name>Index</name></type> <name>rti</name></decl></parameter>, <parameter><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>rte</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>TargetEntry</name> <modifier>*</modifier></type><name>te</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FuncExpr</name> <modifier>*</modifier></type><name>fe</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>custom_private</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CustomPath</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

    <comment type="line">// Add the pattern to the CustomPath</comment>
    <expr_stmt><expr><name>te</name> <operator>=</operator> <operator>(</operator><name>TargetEntry</name> <operator>*</operator><operator>)</operator><call><name>llast</name><argument_list>(<argument><expr><name><name>rte</name><operator>-&gt;</operator><name>subquery</name><operator>-&gt;</operator><name>targetList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>fe</name> <operator>=</operator> <operator>(</operator><name>FuncExpr</name> <operator>*</operator><operator>)</operator><name><name>te</name><operator>-&gt;</operator><name>expr</name></name></expr>;</expr_stmt>
    <comment type="line">// pass the const that holds the data structure to the path.</comment>
    <expr_stmt><expr><name>custom_private</name> <operator>=</operator> <name><name>fe</name><operator>-&gt;</operator><name>args</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>create_cypher_create_path</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name>custom_private</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Discard any pre-existing paths, they should be under the cp path</comment>
    <expr_stmt><expr><name><name>rel</name><operator>-&gt;</operator><name>pathlist</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rel</name><operator>-&gt;</operator><name>partial_pathlist</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>

    <comment type="line">// Add the new path to the rel.</comment>
    <expr_stmt><expr><call><name>add_path</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// replace all possible paths with our CustomPath</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_cypher_set_clause</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>,
                                     <parameter><decl><type><name>Index</name></type> <name>rti</name></decl></parameter>, <parameter><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>rte</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>TargetEntry</name> <modifier>*</modifier></type><name>te</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FuncExpr</name> <modifier>*</modifier></type><name>fe</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>custom_private</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CustomPath</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

    <comment type="line">// Add the pattern to the CustomPath</comment>
    <expr_stmt><expr><name>te</name> <operator>=</operator> <operator>(</operator><name>TargetEntry</name> <operator>*</operator><operator>)</operator><call><name>llast</name><argument_list>(<argument><expr><name><name>rte</name><operator>-&gt;</operator><name>subquery</name><operator>-&gt;</operator><name>targetList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>fe</name> <operator>=</operator> <operator>(</operator><name>FuncExpr</name> <operator>*</operator><operator>)</operator><name><name>te</name><operator>-&gt;</operator><name>expr</name></name></expr>;</expr_stmt>
    <comment type="line">// pass the const that holds the data structure to the path.</comment>
    <expr_stmt><expr><name>custom_private</name> <operator>=</operator> <name><name>fe</name><operator>-&gt;</operator><name>args</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>create_cypher_set_path</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name>custom_private</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Discard any pre-existing paths</comment>
    <expr_stmt><expr><name><name>rel</name><operator>-&gt;</operator><name>pathlist</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rel</name><operator>-&gt;</operator><name>partial_pathlist</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>add_path</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// replace all possible paths with our CustomPath</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_cypher_merge_clause</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>,
                                        <parameter><decl><type><name>Index</name></type> <name>rti</name></decl></parameter>, <parameter><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>rte</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>TargetEntry</name> <modifier>*</modifier></type><name>te</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FuncExpr</name> <modifier>*</modifier></type><name>fe</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>custom_private</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CustomPath</name> <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

    <comment type="line">// Add the pattern to the CustomPath</comment>
    <expr_stmt><expr><name>te</name> <operator>=</operator> <operator>(</operator><name>TargetEntry</name> <operator>*</operator><operator>)</operator><call><name>llast</name><argument_list>(<argument><expr><name><name>rte</name><operator>-&gt;</operator><name>subquery</name><operator>-&gt;</operator><name>targetList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>fe</name> <operator>=</operator> <operator>(</operator><name>FuncExpr</name> <operator>*</operator><operator>)</operator><name><name>te</name><operator>-&gt;</operator><name>expr</name></name></expr>;</expr_stmt>
    <comment type="line">// pass the const that holds the data structure to the path.</comment>
    <expr_stmt><expr><name>custom_private</name> <operator>=</operator> <name><name>fe</name><operator>-&gt;</operator><name>args</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>cp</name> <operator>=</operator> <call><name>create_cypher_merge_path</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name>custom_private</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Discard any pre-existing paths</comment>
    <expr_stmt><expr><name><name>rel</name><operator>-&gt;</operator><name>pathlist</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rel</name><operator>-&gt;</operator><name>partial_pathlist</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>add_path</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
