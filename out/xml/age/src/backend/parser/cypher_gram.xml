<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/age/src/backend/parser/cypher_gram.c"><comment type="block">/* A Bison parser, made by GNU Bison 3.8.2.  */</comment>

<comment type="block">/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.  */</comment>

<comment type="block">/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */</comment>

<comment type="block">/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */</comment>

<comment type="block">/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */</comment>

<comment type="block">/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */</comment>

<comment type="block">/* Identify Bison output, and Bison version.  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYBISON</name></cpp:macro> <cpp:value>30802</cpp:value></cpp:define>

<comment type="block">/* Bison version string.  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYBISON_VERSION</name></cpp:macro> <cpp:value>"3.8.2"</cpp:value></cpp:define>

<comment type="block">/* Skeleton name.  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYSKELETON_NAME</name></cpp:macro> <cpp:value>"yacc.c"</cpp:value></cpp:define>

<comment type="block">/* Pure parsers.  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYPURE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Push parsers.  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYPUSH</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<comment type="block">/* Pull parsers.  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYPULL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>


<comment type="block">/* Substitute the variable and function names.  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyparse</name></cpp:macro>         <cpp:value>cypher_yyparse</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yylex</name></cpp:macro>           <cpp:value>cypher_yylex</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyerror</name></cpp:macro>         <cpp:value>cypher_yyerror</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yydebug</name></cpp:macro>         <cpp:value>cypher_yydebug</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yynerrs</name></cpp:macro>         <cpp:value>cypher_yynerrs</cpp:value></cpp:define>

<comment type="block">/* First part of user prologue.  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>

<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/makefuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/nodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/parsenodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/pg_list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/primnodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/value.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parser.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/ag_nodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/cypher_nodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/ag_scanner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/cypher_gram.h"</cpp:file></cpp:include>

<comment type="line">// override the default action for locations</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYLLOC_DEFAULT</name><parameter_list>(<parameter><type><name>current</name></type></parameter>, <parameter><type><name>rhs</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>do \
    { \
        if ((n) &gt; 0) \
            current = (rhs)[1]; \
        else \
            current = -1; \
    } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYMALLOC</name></cpp:macro> <cpp:value>palloc</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYFREE</name></cpp:macro> <cpp:value>pfree</cpp:value></cpp:define>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>125</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>

<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>YY_CAST</name></cpp:ifndef>
<cpp:ifdef>#  <cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>YY_CAST</name><parameter_list>(<parameter><type><name>Type</name></type></parameter>, <parameter><type><name>Val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static_cast&lt;Type&gt; (Val)</cpp:value></cpp:define>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>YY_REINTERPRET_CAST</name><parameter_list>(<parameter><type><name>Type</name></type></parameter>, <parameter><type><name>Val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>reinterpret_cast&lt;Type&gt; (Val)</cpp:value></cpp:define>
<cpp:else>#  <cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>YY_CAST</name><parameter_list>(<parameter><type><name>Type</name></type></parameter>, <parameter><type><name>Val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((Type) (Val))</cpp:value></cpp:define>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>YY_REINTERPRET_CAST</name><parameter_list>(<parameter><type><name>Type</name></type></parameter>, <parameter><type><name>Val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((Type) (Val))</cpp:value></cpp:define>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>YY_NULLPTR</name></cpp:ifndef>
<cpp:if>#  <cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__cplusplus</name></expr></cpp:if>
<cpp:if>#   <cpp:directive>if</cpp:directive> <expr><literal type="number">201103L</literal> <operator>&lt;=</operator> <name>__cplusplus</name></expr></cpp:if>
<cpp:define>#    <cpp:directive>define</cpp:directive> <cpp:macro><name>YY_NULLPTR</name></cpp:macro> <cpp:value>nullptr</cpp:value></cpp:define>
<cpp:else>#   <cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#    <cpp:directive>define</cpp:directive> <cpp:macro><name>YY_NULLPTR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#   <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#  <cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>YY_NULLPTR</name></cpp:macro> <cpp:value>((void*)0)</cpp:value></cpp:define>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cypher_gram_def.h"</cpp:file></cpp:include>
<comment type="block">/* Symbol kind.  */</comment>
<enum>enum <name>yysymbol_kind_t</name>
<block>{
  <decl><name>YYSYMBOL_YYEMPTY</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>,
  <decl><name>YYSYMBOL_YYEOF</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,                      <comment type="block">/* "end of file"  */</comment>
  <decl><name>YYSYMBOL_YYerror</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,                    <comment type="block">/* error  */</comment>
  <decl><name>YYSYMBOL_YYUNDEF</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,                    <comment type="block">/* "invalid token"  */</comment>
  <decl><name>YYSYMBOL_INTEGER</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,                    <comment type="block">/* INTEGER  */</comment>
  <decl><name>YYSYMBOL_DECIMAL</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,                    <comment type="block">/* DECIMAL  */</comment>
  <decl><name>YYSYMBOL_STRING</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,                     <comment type="block">/* STRING  */</comment>
  <decl><name>YYSYMBOL_IDENTIFIER</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,                 <comment type="block">/* IDENTIFIER  */</comment>
  <decl><name>YYSYMBOL_PARAMETER</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,                  <comment type="block">/* PARAMETER  */</comment>
  <decl><name>YYSYMBOL_NOT_EQ</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,                     <comment type="block">/* NOT_EQ  */</comment>
  <decl><name>YYSYMBOL_LT_EQ</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,                      <comment type="block">/* LT_EQ  */</comment>
  <decl><name>YYSYMBOL_GT_EQ</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,                     <comment type="block">/* GT_EQ  */</comment>
  <decl><name>YYSYMBOL_DOT_DOT</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>,                   <comment type="block">/* DOT_DOT  */</comment>
  <decl><name>YYSYMBOL_TYPECAST</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>,                  <comment type="block">/* TYPECAST  */</comment>
  <decl><name>YYSYMBOL_PLUS_EQ</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>,                   <comment type="block">/* PLUS_EQ  */</comment>
  <decl><name>YYSYMBOL_EQ_TILDE</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>,                  <comment type="block">/* EQ_TILDE  */</comment>
  <decl><name>YYSYMBOL_ALL</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>,                       <comment type="block">/* ALL  */</comment>
  <decl><name>YYSYMBOL_ANALYZE</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,                   <comment type="block">/* ANALYZE  */</comment>
  <decl><name>YYSYMBOL_AND</name> <init>= <expr><literal type="number">17</literal></expr></init></decl>,                       <comment type="block">/* AND  */</comment>
  <decl><name>YYSYMBOL_AS</name> <init>= <expr><literal type="number">18</literal></expr></init></decl>,                        <comment type="block">/* AS  */</comment>
  <decl><name>YYSYMBOL_ASC</name> <init>= <expr><literal type="number">19</literal></expr></init></decl>,                       <comment type="block">/* ASC  */</comment>
  <decl><name>YYSYMBOL_ASCENDING</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>,                 <comment type="block">/* ASCENDING  */</comment>
  <decl><name>YYSYMBOL_BY</name> <init>= <expr><literal type="number">21</literal></expr></init></decl>,                        <comment type="block">/* BY  */</comment>
  <decl><name>YYSYMBOL_CALL</name> <init>= <expr><literal type="number">22</literal></expr></init></decl>,                      <comment type="block">/* CALL  */</comment>
  <decl><name>YYSYMBOL_CASE</name> <init>= <expr><literal type="number">23</literal></expr></init></decl>,                      <comment type="block">/* CASE  */</comment>
  <decl><name>YYSYMBOL_COALESCE</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>,                  <comment type="block">/* COALESCE  */</comment>
  <decl><name>YYSYMBOL_CONTAINS</name> <init>= <expr><literal type="number">25</literal></expr></init></decl>,                  <comment type="block">/* CONTAINS  */</comment>
  <decl><name>YYSYMBOL_CREATE</name> <init>= <expr><literal type="number">26</literal></expr></init></decl>,                    <comment type="block">/* CREATE  */</comment>
  <decl><name>YYSYMBOL_DELETE</name> <init>= <expr><literal type="number">27</literal></expr></init></decl>,                    <comment type="block">/* DELETE  */</comment>
  <decl><name>YYSYMBOL_DESC</name> <init>= <expr><literal type="number">28</literal></expr></init></decl>,                      <comment type="block">/* DESC  */</comment>
  <decl><name>YYSYMBOL_DESCENDING</name> <init>= <expr><literal type="number">29</literal></expr></init></decl>,                <comment type="block">/* DESCENDING  */</comment>
  <decl><name>YYSYMBOL_DETACH</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>,                    <comment type="block">/* DETACH  */</comment>
  <decl><name>YYSYMBOL_DISTINCT</name> <init>= <expr><literal type="number">31</literal></expr></init></decl>,                  <comment type="block">/* DISTINCT  */</comment>
  <decl><name>YYSYMBOL_ELSE</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>,                      <comment type="block">/* ELSE  */</comment>
  <decl><name>YYSYMBOL_END_P</name> <init>= <expr><literal type="number">33</literal></expr></init></decl>,                     <comment type="block">/* END_P  */</comment>
  <decl><name>YYSYMBOL_ENDS</name> <init>= <expr><literal type="number">34</literal></expr></init></decl>,                      <comment type="block">/* ENDS  */</comment>
  <decl><name>YYSYMBOL_EXISTS</name> <init>= <expr><literal type="number">35</literal></expr></init></decl>,                    <comment type="block">/* EXISTS  */</comment>
  <decl><name>YYSYMBOL_EXPLAIN</name> <init>= <expr><literal type="number">36</literal></expr></init></decl>,                   <comment type="block">/* EXPLAIN  */</comment>
  <decl><name>YYSYMBOL_FALSE_P</name> <init>= <expr><literal type="number">37</literal></expr></init></decl>,                   <comment type="block">/* FALSE_P  */</comment>
  <decl><name>YYSYMBOL_IN</name> <init>= <expr><literal type="number">38</literal></expr></init></decl>,                        <comment type="block">/* IN  */</comment>
  <decl><name>YYSYMBOL_IS</name> <init>= <expr><literal type="number">39</literal></expr></init></decl>,                        <comment type="block">/* IS  */</comment>
  <decl><name>YYSYMBOL_LIMIT</name> <init>= <expr><literal type="number">40</literal></expr></init></decl>,                     <comment type="block">/* LIMIT  */</comment>
  <decl><name>YYSYMBOL_MATCH</name> <init>= <expr><literal type="number">41</literal></expr></init></decl>,                     <comment type="block">/* MATCH  */</comment>
  <decl><name>YYSYMBOL_MERGE</name> <init>= <expr><literal type="number">42</literal></expr></init></decl>,                     <comment type="block">/* MERGE  */</comment>
  <decl><name>YYSYMBOL_NOT</name> <init>= <expr><literal type="number">43</literal></expr></init></decl>,                       <comment type="block">/* NOT  */</comment>
  <decl><name>YYSYMBOL_NULL_P</name> <init>= <expr><literal type="number">44</literal></expr></init></decl>,                    <comment type="block">/* NULL_P  */</comment>
  <decl><name>YYSYMBOL_OPTIONAL</name> <init>= <expr><literal type="number">45</literal></expr></init></decl>,                  <comment type="block">/* OPTIONAL  */</comment>
  <decl><name>YYSYMBOL_OR</name> <init>= <expr><literal type="number">46</literal></expr></init></decl>,                        <comment type="block">/* OR  */</comment>
  <decl><name>YYSYMBOL_ORDER</name> <init>= <expr><literal type="number">47</literal></expr></init></decl>,                     <comment type="block">/* ORDER  */</comment>
  <decl><name>YYSYMBOL_REMOVE</name> <init>= <expr><literal type="number">48</literal></expr></init></decl>,                    <comment type="block">/* REMOVE  */</comment>
  <decl><name>YYSYMBOL_RETURN</name> <init>= <expr><literal type="number">49</literal></expr></init></decl>,                    <comment type="block">/* RETURN  */</comment>
  <decl><name>YYSYMBOL_SET</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>,                       <comment type="block">/* SET  */</comment>
  <decl><name>YYSYMBOL_SKIP</name> <init>= <expr><literal type="number">51</literal></expr></init></decl>,                      <comment type="block">/* SKIP  */</comment>
  <decl><name>YYSYMBOL_STARTS</name> <init>= <expr><literal type="number">52</literal></expr></init></decl>,                    <comment type="block">/* STARTS  */</comment>
  <decl><name>YYSYMBOL_THEN</name> <init>= <expr><literal type="number">53</literal></expr></init></decl>,                      <comment type="block">/* THEN  */</comment>
  <decl><name>YYSYMBOL_TRUE_P</name> <init>= <expr><literal type="number">54</literal></expr></init></decl>,                    <comment type="block">/* TRUE_P  */</comment>
  <decl><name>YYSYMBOL_UNION</name> <init>= <expr><literal type="number">55</literal></expr></init></decl>,                     <comment type="block">/* UNION  */</comment>
  <decl><name>YYSYMBOL_UNWIND</name> <init>= <expr><literal type="number">56</literal></expr></init></decl>,                    <comment type="block">/* UNWIND  */</comment>
  <decl><name>YYSYMBOL_VERBOSE</name> <init>= <expr><literal type="number">57</literal></expr></init></decl>,                   <comment type="block">/* VERBOSE  */</comment>
  <decl><name>YYSYMBOL_WHEN</name> <init>= <expr><literal type="number">58</literal></expr></init></decl>,                      <comment type="block">/* WHEN  */</comment>
  <decl><name>YYSYMBOL_WHERE</name> <init>= <expr><literal type="number">59</literal></expr></init></decl>,                     <comment type="block">/* WHERE  */</comment>
  <decl><name>YYSYMBOL_WITH</name> <init>= <expr><literal type="number">60</literal></expr></init></decl>,                      <comment type="block">/* WITH  */</comment>
  <decl><name>YYSYMBOL_XOR</name> <init>= <expr><literal type="number">61</literal></expr></init></decl>,                       <comment type="block">/* XOR  */</comment>
  <decl><name>YYSYMBOL_YIELD</name> <init>= <expr><literal type="number">62</literal></expr></init></decl>,                     <comment type="block">/* YIELD  */</comment>
  <decl><name>YYSYMBOL_63_</name> <init>= <expr><literal type="number">63</literal></expr></init></decl>,                       <comment type="block">/* '='  */</comment>
  <decl><name>YYSYMBOL_64_</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>,                       <comment type="block">/* '&lt;'  */</comment>
  <decl><name>YYSYMBOL_65_</name> <init>= <expr><literal type="number">65</literal></expr></init></decl>,                       <comment type="block">/* '&gt;'  */</comment>
  <decl><name>YYSYMBOL_66_</name> <init>= <expr><literal type="number">66</literal></expr></init></decl>,                       <comment type="block">/* '+'  */</comment>
  <decl><name>YYSYMBOL_67_</name> <init>= <expr><literal type="number">67</literal></expr></init></decl>,                       <comment type="block">/* '-'  */</comment>
  <decl><name>YYSYMBOL_68_</name> <init>= <expr><literal type="number">68</literal></expr></init></decl>,                       <comment type="block">/* '*'  */</comment>
  <decl><name>YYSYMBOL_69_</name> <init>= <expr><literal type="number">69</literal></expr></init></decl>,                       <comment type="block">/* '/'  */</comment>
  <decl><name>YYSYMBOL_70_</name> <init>= <expr><literal type="number">70</literal></expr></init></decl>,                       <comment type="block">/* '%'  */</comment>
  <decl><name>YYSYMBOL_71_</name> <init>= <expr><literal type="number">71</literal></expr></init></decl>,                       <comment type="block">/* '^'  */</comment>
  <decl><name>YYSYMBOL_UNARY_MINUS</name> <init>= <expr><literal type="number">72</literal></expr></init></decl>,               <comment type="block">/* UNARY_MINUS  */</comment>
  <decl><name>YYSYMBOL_73_</name> <init>= <expr><literal type="number">73</literal></expr></init></decl>,                       <comment type="block">/* '['  */</comment>
  <decl><name>YYSYMBOL_74_</name> <init>= <expr><literal type="number">74</literal></expr></init></decl>,                       <comment type="block">/* ']'  */</comment>
  <decl><name>YYSYMBOL_75_</name> <init>= <expr><literal type="number">75</literal></expr></init></decl>,                       <comment type="block">/* '('  */</comment>
  <decl><name>YYSYMBOL_76_</name> <init>= <expr><literal type="number">76</literal></expr></init></decl>,                       <comment type="block">/* ')'  */</comment>
  <decl><name>YYSYMBOL_77_</name> <init>= <expr><literal type="number">77</literal></expr></init></decl>,                       <comment type="block">/* '.'  */</comment>
  <decl><name>YYSYMBOL_78_</name> <init>= <expr><literal type="number">78</literal></expr></init></decl>,                       <comment type="block">/* ','  */</comment>
  <decl><name>YYSYMBOL_79_</name> <init>= <expr><literal type="number">79</literal></expr></init></decl>,                       <comment type="block">/* ';'  */</comment>
  <decl><name>YYSYMBOL_80_</name> <init>= <expr><literal type="number">80</literal></expr></init></decl>,                       <comment type="block">/* ':'  */</comment>
  <decl><name>YYSYMBOL_81_</name> <init>= <expr><literal type="number">81</literal></expr></init></decl>,                       <comment type="block">/* '{'  */</comment>
  <decl><name>YYSYMBOL_82_</name> <init>= <expr><literal type="number">82</literal></expr></init></decl>,                       <comment type="block">/* '}'  */</comment>
  <decl><name>YYSYMBOL_YYACCEPT</name> <init>= <expr><literal type="number">83</literal></expr></init></decl>,                  <comment type="block">/* $accept  */</comment>
  <decl><name>YYSYMBOL_stmt</name> <init>= <expr><literal type="number">84</literal></expr></init></decl>,                      <comment type="block">/* stmt  */</comment>
  <decl><name>YYSYMBOL_cypher_stmt</name> <init>= <expr><literal type="number">85</literal></expr></init></decl>,               <comment type="block">/* cypher_stmt  */</comment>
  <decl><name>YYSYMBOL_call_stmt</name> <init>= <expr><literal type="number">86</literal></expr></init></decl>,                 <comment type="block">/* call_stmt  */</comment>
  <decl><name>YYSYMBOL_yield_item_list</name> <init>= <expr><literal type="number">87</literal></expr></init></decl>,           <comment type="block">/* yield_item_list  */</comment>
  <decl><name>YYSYMBOL_yield_item</name> <init>= <expr><literal type="number">88</literal></expr></init></decl>,                <comment type="block">/* yield_item  */</comment>
  <decl><name>YYSYMBOL_semicolon_opt</name> <init>= <expr><literal type="number">89</literal></expr></init></decl>,             <comment type="block">/* semicolon_opt  */</comment>
  <decl><name>YYSYMBOL_all_or_distinct</name> <init>= <expr><literal type="number">90</literal></expr></init></decl>,           <comment type="block">/* all_or_distinct  */</comment>
  <decl><name>YYSYMBOL_single_query</name> <init>= <expr><literal type="number">91</literal></expr></init></decl>,              <comment type="block">/* single_query  */</comment>
  <decl><name>YYSYMBOL_query_part_init</name> <init>= <expr><literal type="number">92</literal></expr></init></decl>,           <comment type="block">/* query_part_init  */</comment>
  <decl><name>YYSYMBOL_query_part_last</name> <init>= <expr><literal type="number">93</literal></expr></init></decl>,           <comment type="block">/* query_part_last  */</comment>
  <decl><name>YYSYMBOL_reading_clause_list</name> <init>= <expr><literal type="number">94</literal></expr></init></decl>,       <comment type="block">/* reading_clause_list  */</comment>
  <decl><name>YYSYMBOL_reading_clause</name> <init>= <expr><literal type="number">95</literal></expr></init></decl>,            <comment type="block">/* reading_clause  */</comment>
  <decl><name>YYSYMBOL_updating_clause_list_0</name> <init>= <expr><literal type="number">96</literal></expr></init></decl>,    <comment type="block">/* updating_clause_list_0  */</comment>
  <decl><name>YYSYMBOL_updating_clause_list_1</name> <init>= <expr><literal type="number">97</literal></expr></init></decl>,    <comment type="block">/* updating_clause_list_1  */</comment>
  <decl><name>YYSYMBOL_updating_clause</name> <init>= <expr><literal type="number">98</literal></expr></init></decl>,           <comment type="block">/* updating_clause  */</comment>
  <decl><name>YYSYMBOL_cypher_varlen_opt</name> <init>= <expr><literal type="number">99</literal></expr></init></decl>,         <comment type="block">/* cypher_varlen_opt  */</comment>
  <decl><name>YYSYMBOL_cypher_range_opt</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>,         <comment type="block">/* cypher_range_opt  */</comment>
  <decl><name>YYSYMBOL_cypher_range_idx</name> <init>= <expr><literal type="number">101</literal></expr></init></decl>,         <comment type="block">/* cypher_range_idx  */</comment>
  <decl><name>YYSYMBOL_cypher_range_idx_opt</name> <init>= <expr><literal type="number">102</literal></expr></init></decl>,     <comment type="block">/* cypher_range_idx_opt  */</comment>
  <decl><name>YYSYMBOL_Iconst</name> <init>= <expr><literal type="number">103</literal></expr></init></decl>,                   <comment type="block">/* Iconst  */</comment>
  <decl><name>YYSYMBOL_return</name> <init>= <expr><literal type="number">104</literal></expr></init></decl>,                   <comment type="block">/* return  */</comment>
  <decl><name>YYSYMBOL_return_item_list</name> <init>= <expr><literal type="number">105</literal></expr></init></decl>,         <comment type="block">/* return_item_list  */</comment>
  <decl><name>YYSYMBOL_return_item</name> <init>= <expr><literal type="number">106</literal></expr></init></decl>,              <comment type="block">/* return_item  */</comment>
  <decl><name>YYSYMBOL_order_by_opt</name> <init>= <expr><literal type="number">107</literal></expr></init></decl>,             <comment type="block">/* order_by_opt  */</comment>
  <decl><name>YYSYMBOL_sort_item_list</name> <init>= <expr><literal type="number">108</literal></expr></init></decl>,           <comment type="block">/* sort_item_list  */</comment>
  <decl><name>YYSYMBOL_sort_item</name> <init>= <expr><literal type="number">109</literal></expr></init></decl>,                <comment type="block">/* sort_item  */</comment>
  <decl><name>YYSYMBOL_order_opt</name> <init>= <expr><literal type="number">110</literal></expr></init></decl>,                <comment type="block">/* order_opt  */</comment>
  <decl><name>YYSYMBOL_skip_opt</name> <init>= <expr><literal type="number">111</literal></expr></init></decl>,                 <comment type="block">/* skip_opt  */</comment>
  <decl><name>YYSYMBOL_limit_opt</name> <init>= <expr><literal type="number">112</literal></expr></init></decl>,                <comment type="block">/* limit_opt  */</comment>
  <decl><name>YYSYMBOL_with</name> <init>= <expr><literal type="number">113</literal></expr></init></decl>,                     <comment type="block">/* with  */</comment>
  <decl><name>YYSYMBOL_match</name> <init>= <expr><literal type="number">114</literal></expr></init></decl>,                    <comment type="block">/* match  */</comment>
  <decl><name>YYSYMBOL_optional_opt</name> <init>= <expr><literal type="number">115</literal></expr></init></decl>,             <comment type="block">/* optional_opt  */</comment>
  <decl><name>YYSYMBOL_unwind</name> <init>= <expr><literal type="number">116</literal></expr></init></decl>,                   <comment type="block">/* unwind  */</comment>
  <decl><name>YYSYMBOL_create</name> <init>= <expr><literal type="number">117</literal></expr></init></decl>,                   <comment type="block">/* create  */</comment>
  <decl><name>YYSYMBOL_set</name> <init>= <expr><literal type="number">118</literal></expr></init></decl>,                      <comment type="block">/* set  */</comment>
  <decl><name>YYSYMBOL_set_item_list</name> <init>= <expr><literal type="number">119</literal></expr></init></decl>,            <comment type="block">/* set_item_list  */</comment>
  <decl><name>YYSYMBOL_set_item</name> <init>= <expr><literal type="number">120</literal></expr></init></decl>,                 <comment type="block">/* set_item  */</comment>
  <decl><name>YYSYMBOL_remove</name> <init>= <expr><literal type="number">121</literal></expr></init></decl>,                   <comment type="block">/* remove  */</comment>
  <decl><name>YYSYMBOL_remove_item_list</name> <init>= <expr><literal type="number">122</literal></expr></init></decl>,         <comment type="block">/* remove_item_list  */</comment>
  <decl><name>YYSYMBOL_remove_item</name> <init>= <expr><literal type="number">123</literal></expr></init></decl>,              <comment type="block">/* remove_item  */</comment>
  <decl><name>YYSYMBOL_delete</name> <init>= <expr><literal type="number">124</literal></expr></init></decl>,                   <comment type="block">/* delete  */</comment>
  <decl><name>YYSYMBOL_detach_opt</name> <init>= <expr><literal type="number">125</literal></expr></init></decl>,               <comment type="block">/* detach_opt  */</comment>
  <decl><name>YYSYMBOL_merge</name> <init>= <expr><literal type="number">126</literal></expr></init></decl>,                    <comment type="block">/* merge  */</comment>
  <decl><name>YYSYMBOL_where_opt</name> <init>= <expr><literal type="number">127</literal></expr></init></decl>,                <comment type="block">/* where_opt  */</comment>
  <decl><name>YYSYMBOL_pattern</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>,                  <comment type="block">/* pattern  */</comment>
  <decl><name>YYSYMBOL_path</name> <init>= <expr><literal type="number">129</literal></expr></init></decl>,                     <comment type="block">/* path  */</comment>
  <decl><name>YYSYMBOL_anonymous_path</name> <init>= <expr><literal type="number">130</literal></expr></init></decl>,           <comment type="block">/* anonymous_path  */</comment>
  <decl><name>YYSYMBOL_simple_path_opt_parens</name> <init>= <expr><literal type="number">131</literal></expr></init></decl>,   <comment type="block">/* simple_path_opt_parens  */</comment>
  <decl><name>YYSYMBOL_simple_path</name> <init>= <expr><literal type="number">132</literal></expr></init></decl>,              <comment type="block">/* simple_path  */</comment>
  <decl><name>YYSYMBOL_path_node</name> <init>= <expr><literal type="number">133</literal></expr></init></decl>,                <comment type="block">/* path_node  */</comment>
  <decl><name>YYSYMBOL_path_relationship</name> <init>= <expr><literal type="number">134</literal></expr></init></decl>,        <comment type="block">/* path_relationship  */</comment>
  <decl><name>YYSYMBOL_path_relationship_body</name> <init>= <expr><literal type="number">135</literal></expr></init></decl>,   <comment type="block">/* path_relationship_body  */</comment>
  <decl><name>YYSYMBOL_label_opt</name> <init>= <expr><literal type="number">136</literal></expr></init></decl>,                <comment type="block">/* label_opt  */</comment>
  <decl><name>YYSYMBOL_properties_opt</name> <init>= <expr><literal type="number">137</literal></expr></init></decl>,           <comment type="block">/* properties_opt  */</comment>
  <decl><name>YYSYMBOL_expr</name> <init>= <expr><literal type="number">138</literal></expr></init></decl>,                     <comment type="block">/* expr  */</comment>
  <decl><name>YYSYMBOL_expr_opt</name> <init>= <expr><literal type="number">139</literal></expr></init></decl>,                 <comment type="block">/* expr_opt  */</comment>
  <decl><name>YYSYMBOL_expr_list</name> <init>= <expr><literal type="number">140</literal></expr></init></decl>,                <comment type="block">/* expr_list  */</comment>
  <decl><name>YYSYMBOL_expr_list_opt</name> <init>= <expr><literal type="number">141</literal></expr></init></decl>,            <comment type="block">/* expr_list_opt  */</comment>
  <decl><name>YYSYMBOL_expr_func</name> <init>= <expr><literal type="number">142</literal></expr></init></decl>,                <comment type="block">/* expr_func  */</comment>
  <decl><name>YYSYMBOL_expr_func_norm</name> <init>= <expr><literal type="number">143</literal></expr></init></decl>,           <comment type="block">/* expr_func_norm  */</comment>
  <decl><name>YYSYMBOL_expr_func_subexpr</name> <init>= <expr><literal type="number">144</literal></expr></init></decl>,        <comment type="block">/* expr_func_subexpr  */</comment>
  <decl><name>YYSYMBOL_property_value</name> <init>= <expr><literal type="number">145</literal></expr></init></decl>,           <comment type="block">/* property_value  */</comment>
  <decl><name>YYSYMBOL_expr_atom</name> <init>= <expr><literal type="number">146</literal></expr></init></decl>,                <comment type="block">/* expr_atom  */</comment>
  <decl><name>YYSYMBOL_expr_literal</name> <init>= <expr><literal type="number">147</literal></expr></init></decl>,             <comment type="block">/* expr_literal  */</comment>
  <decl><name>YYSYMBOL_map</name> <init>= <expr><literal type="number">148</literal></expr></init></decl>,                      <comment type="block">/* map  */</comment>
  <decl><name>YYSYMBOL_map_keyval_list_opt</name> <init>= <expr><literal type="number">149</literal></expr></init></decl>,      <comment type="block">/* map_keyval_list_opt  */</comment>
  <decl><name>YYSYMBOL_map_keyval_list</name> <init>= <expr><literal type="number">150</literal></expr></init></decl>,          <comment type="block">/* map_keyval_list  */</comment>
  <decl><name>YYSYMBOL_list</name> <init>= <expr><literal type="number">151</literal></expr></init></decl>,                     <comment type="block">/* list  */</comment>
  <decl><name>YYSYMBOL_expr_case</name> <init>= <expr><literal type="number">152</literal></expr></init></decl>,                <comment type="block">/* expr_case  */</comment>
  <decl><name>YYSYMBOL_expr_case_when_list</name> <init>= <expr><literal type="number">153</literal></expr></init></decl>,      <comment type="block">/* expr_case_when_list  */</comment>
  <decl><name>YYSYMBOL_expr_case_when</name> <init>= <expr><literal type="number">154</literal></expr></init></decl>,           <comment type="block">/* expr_case_when  */</comment>
  <decl><name>YYSYMBOL_expr_case_default</name> <init>= <expr><literal type="number">155</literal></expr></init></decl>,        <comment type="block">/* expr_case_default  */</comment>
  <decl><name>YYSYMBOL_expr_var</name> <init>= <expr><literal type="number">156</literal></expr></init></decl>,                 <comment type="block">/* expr_var  */</comment>
  <decl><name>YYSYMBOL_func_name</name> <init>= <expr><literal type="number">157</literal></expr></init></decl>,                <comment type="block">/* func_name  */</comment>
  <decl><name>YYSYMBOL_property_key_name</name> <init>= <expr><literal type="number">158</literal></expr></init></decl>,        <comment type="block">/* property_key_name  */</comment>
  <decl><name>YYSYMBOL_var_name</name> <init>= <expr><literal type="number">159</literal></expr></init></decl>,                 <comment type="block">/* var_name  */</comment>
  <decl><name>YYSYMBOL_var_name_opt</name> <init>= <expr><literal type="number">160</literal></expr></init></decl>,             <comment type="block">/* var_name_opt  */</comment>
  <decl><name>YYSYMBOL_label_name</name> <init>= <expr><literal type="number">161</literal></expr></init></decl>,               <comment type="block">/* label_name  */</comment>
  <decl><name>YYSYMBOL_symbolic_name</name> <init>= <expr><literal type="number">162</literal></expr></init></decl>,            <comment type="block">/* symbolic_name  */</comment>
  <decl><name>YYSYMBOL_schema_name</name> <init>= <expr><literal type="number">163</literal></expr></init></decl>,              <comment type="block">/* schema_name  */</comment>
  <decl><name>YYSYMBOL_reserved_keyword</name> <init>= <expr><literal type="number">164</literal></expr></init></decl>,         <comment type="block">/* reserved_keyword  */</comment>
  <decl><name>YYSYMBOL_safe_keywords</name> <init>= <expr><literal type="number">165</literal></expr></init></decl>,            <comment type="block">/* safe_keywords  */</comment>
  <decl><name>YYSYMBOL_conflicted_keywords</name> <init>= <expr><literal type="number">166</literal></expr></init></decl>       <comment type="block">/* conflicted_keywords  */</comment>
}</block>;</enum>
<typedef>typedef <type><name><name>enum</name> <name>yysymbol_kind_t</name></name></type> <name>yysymbol_kind_t</name>;</typedef>


<comment type="block">/* Second part of user prologue.  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>184</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>

<comment type="line">//</comment>
<comment type="line">// unique name generation</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNIQUE_NAME_NULL_PREFIX</name></cpp:macro> <cpp:value>"_unique_null_prefix"</cpp:value></cpp:define>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>create_unique_name</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>prefix_name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>get_a_unique_number</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// logical operators</comment>
<function_decl><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type><name>make_or_expr</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>lexpr</name></decl></parameter>, <parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>rexpr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type><name>make_and_expr</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>lexpr</name></decl></parameter>, <parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>rexpr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type><name>make_xor_expr</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>lexpr</name></decl></parameter>, <parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>rexpr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type><name>make_not_expr</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// arithmetic operators</comment>
<function_decl><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type><name>do_negate</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>do_negate_float</name><parameter_list>(<parameter><decl><type><name>Value</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// indirection</comment>
<function_decl><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type><name>append_indirection</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>, <parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>selector</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// literals</comment>
<function_decl><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type><name>make_int_const</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type><name>make_float_const</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type><name>make_string_const</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type><name>make_bool_const</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type><name>make_null_const</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// typecast</comment>
<function_decl><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type><name>make_typecast_expr</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>typecast</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// functions</comment>
<function_decl><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type><name>make_function_expr</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>func_name</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>exprs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// setops</comment>
<function_decl><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type><name>make_set_op</name><parameter_list>(<parameter><decl><type><name>SetOperation</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>all_or_distinct</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>larg</name></decl></parameter>,
                         <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>rarg</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// VLE</comment>
<function_decl><type><specifier>static</specifier> <name>cypher_relationship</name> <modifier>*</modifier></type><name>build_VLE_relation</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>left_arg</name></decl></parameter>,
                                               <parameter><decl><type><name>cypher_relationship</name> <modifier>*</modifier></type><name>cr</name></decl></parameter>,
                                               <parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>right_arg</name></decl></parameter>,
                                               <parameter><decl><type><name>int</name></type> <name>left_arg_location</name></decl></parameter>,
                                               <parameter><decl><type><name>int</name></type> <name>cr_location</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="line">// comparison</comment>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>is_A_Expr_a_comparison_operation</name><parameter_list>(<parameter><decl><type><name>A_Expr</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type><name>build_comparison_expression</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>left_grammar_node</name></decl></parameter>,
                                         <parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>right_grammar_node</name></decl></parameter>,
                                         <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>opr_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>375</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>short</name></cpp:ifdef>
<cpp:undef># <cpp:directive>undef</cpp:directive> <name>short</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   &lt;limits.h&gt; and (if available) &lt;stdint.h&gt; are included
   so that the code can choose integer types of a good width.  */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__PTRDIFF_MAX__</name></cpp:ifndef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include> <comment type="block">/* INFRINGES ON USER NAME SPACE */</comment>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__STDC_VERSION__</name> <operator>&amp;&amp;</operator> <literal type="number">199901</literal> <operator>&lt;=</operator> <name>__STDC_VERSION__</name></expr></cpp:if>
<cpp:include>#  <cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include> <comment type="block">/* INFRINGES ON USER NAME SPACE */</comment>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>YY_STDINT_H</name></cpp:macro></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__INT_LEAST8_MAX__</name></cpp:ifdef>
<typedef>typedef <type><name>__INT_LEAST8_TYPE__</name></type> <name>yytype_int8</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>YY_STDINT_H</name></expr></cpp:elif>
<typedef>typedef <type><name>int_least8_t</name></type> <name>yytype_int8</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>signed</name> <name>char</name></type> <name>yytype_int8</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__INT_LEAST16_MAX__</name></cpp:ifdef>
<typedef>typedef <type><name>__INT_LEAST16_TYPE__</name></type> <name>yytype_int16</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>YY_STDINT_H</name></expr></cpp:elif>
<typedef>typedef <type><name>int_least16_t</name></type> <name>yytype_int16</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>short</name></type> <name>yytype_int16</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   &lt;https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf&gt;.  */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__hpux</name></cpp:ifdef>
<cpp:undef># <cpp:directive>undef</cpp:directive> <name>UINT_LEAST8_MAX</name></cpp:undef>
<cpp:undef># <cpp:directive>undef</cpp:directive> <name>UINT_LEAST16_MAX</name></cpp:undef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>UINT_LEAST8_MAX</name></cpp:macro> <cpp:value>255</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>UINT_LEAST16_MAX</name></cpp:macro> <cpp:value>65535</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__UINT_LEAST8_MAX__</name> <operator>&amp;&amp;</operator> <name>__UINT_LEAST8_MAX__</name> <operator>&lt;=</operator> <name>__INT_MAX__</name></expr></cpp:if>
<typedef>typedef <type><name>__UINT_LEAST8_TYPE__</name></type> <name>yytype_uint8</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><operator>!</operator><name>defined</name> <name>__UINT_LEAST8_MAX__</name> <operator>&amp;&amp;</operator> <name>defined</name> <name>YY_STDINT_H</name> \
       <operator>&amp;&amp;</operator> <name>UINT_LEAST8_MAX</name> <operator>&lt;=</operator> <name>INT_MAX</name><operator>)</operator></expr></cpp:elif>
<typedef>typedef <type><name>uint_least8_t</name></type> <name>yytype_uint8</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>__UINT_LEAST8_MAX__</name> <operator>&amp;&amp;</operator> <name>UCHAR_MAX</name> <operator>&lt;=</operator> <name>INT_MAX</name></expr></cpp:elif>
<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>yytype_uint8</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>short</name></type> <name>yytype_uint8</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__UINT_LEAST16_MAX__</name> <operator>&amp;&amp;</operator> <name>__UINT_LEAST16_MAX__</name> <operator>&lt;=</operator> <name>__INT_MAX__</name></expr></cpp:if>
<typedef>typedef <type><name>__UINT_LEAST16_TYPE__</name></type> <name>yytype_uint16</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><operator>!</operator><name>defined</name> <name>__UINT_LEAST16_MAX__</name> <operator>&amp;&amp;</operator> <name>defined</name> <name>YY_STDINT_H</name> \
       <operator>&amp;&amp;</operator> <name>UINT_LEAST16_MAX</name> <operator>&lt;=</operator> <name>INT_MAX</name><operator>)</operator></expr></cpp:elif>
<typedef>typedef <type><name>uint_least16_t</name></type> <name>yytype_uint16</name>;</typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>__UINT_LEAST16_MAX__</name> <operator>&amp;&amp;</operator> <name>USHRT_MAX</name> <operator>&lt;=</operator> <name>INT_MAX</name></expr></cpp:elif>
<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>yytype_uint16</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <type><name>int</name></type> <name>yytype_uint16</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>YYPTRDIFF_T</name></cpp:ifndef>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__PTRDIFF_TYPE__</name> <operator>&amp;&amp;</operator> <name>defined</name> <name>__PTRDIFF_MAX__</name></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>YYPTRDIFF_T</name></cpp:macro> <cpp:value>__PTRDIFF_TYPE__</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>YYPTRDIFF_MAXIMUM</name></cpp:macro> <cpp:value>__PTRDIFF_MAX__</cpp:value></cpp:define>
<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>PTRDIFF_MAX</name></expr></cpp:elif>
<cpp:ifndef>#  <cpp:directive>ifndef</cpp:directive> <name>ptrdiff_t</name></cpp:ifndef>
<cpp:include>#   <cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include> <comment type="block">/* INFRINGES ON USER NAME SPACE */</comment>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>YYPTRDIFF_T</name></cpp:macro> <cpp:value>ptrdiff_t</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>YYPTRDIFF_MAXIMUM</name></cpp:macro> <cpp:value>PTRDIFF_MAX</cpp:value></cpp:define>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>YYPTRDIFF_T</name></cpp:macro> <cpp:value>long</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>YYPTRDIFF_MAXIMUM</name></cpp:macro> <cpp:value>LONG_MAX</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>YYSIZE_T</name></cpp:ifndef>
<cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>__SIZE_TYPE__</name></cpp:ifdef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>YYSIZE_T</name></cpp:macro> <cpp:value>__SIZE_TYPE__</cpp:value></cpp:define>
<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>size_t</name></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>YYSIZE_T</name></cpp:macro> <cpp:value>size_t</cpp:value></cpp:define>
<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>__STDC_VERSION__</name> <operator>&amp;&amp;</operator> <literal type="number">199901</literal> <operator>&lt;=</operator> <name>__STDC_VERSION__</name></expr></cpp:elif>
<cpp:include>#  <cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include> <comment type="block">/* INFRINGES ON USER NAME SPACE */</comment>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>YYSIZE_T</name></cpp:macro> <cpp:value>size_t</cpp:value></cpp:define>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>YYSIZE_T</name></cpp:macro> <cpp:value>unsigned</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYSIZE_MAXIMUM</name></cpp:macro>                                  \
  <cpp:value>YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM &lt; YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYSIZEOF</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>YY_CAST (YYPTRDIFF_T, sizeof (X))</cpp:value></cpp:define>


<comment type="block">/* Stored state numbers (used for stacks). */</comment>
<typedef>typedef <type><name>yytype_int16</name></type> <name>yy_state_t</name>;</typedef>

<comment type="block">/* State numbers in computations.  */</comment>
<typedef>typedef <type><name>int</name></type> <name>yy_state_fast_t</name>;</typedef>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>YY_</name></cpp:ifndef>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>YYENABLE_NLS</name> <operator>&amp;&amp;</operator> <name>YYENABLE_NLS</name></expr></cpp:if>
<cpp:if>#  <cpp:directive>if</cpp:directive> <expr><name>ENABLE_NLS</name></expr></cpp:if>
<cpp:include>#   <cpp:directive>include</cpp:directive> <cpp:file>&lt;libintl.h&gt;</cpp:file></cpp:include> <comment type="block">/* INFRINGES ON USER NAME SPACE */</comment>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>YY_</name><parameter_list>(<parameter><type><name>Msgid</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dgettext ("bison-runtime", Msgid)</cpp:value></cpp:define>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>YY_</name></cpp:ifndef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>YY_</name><parameter_list>(<parameter><type><name>Msgid</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Msgid</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>YY_ATTRIBUTE_PURE</name></cpp:ifndef>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__GNUC__</name> <operator>&amp;&amp;</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name>__GNUC__</name> <operator>+</operator> <operator>(</operator><literal type="number">96</literal> <operator>&lt;=</operator> <name>__GNUC_MINOR__</name><operator>)</operator></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>YY_ATTRIBUTE_PURE</name></cpp:macro> <cpp:value>__attribute__ ((__pure__))</cpp:value></cpp:define>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>YY_ATTRIBUTE_PURE</name></cpp:macro></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>YY_ATTRIBUTE_UNUSED</name></cpp:ifndef>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__GNUC__</name> <operator>&amp;&amp;</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name>__GNUC__</name> <operator>+</operator> <operator>(</operator><literal type="number">7</literal> <operator>&lt;=</operator> <name>__GNUC_MINOR__</name><operator>)</operator></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>YY_ATTRIBUTE_UNUSED</name></cpp:macro> <cpp:value>__attribute__ ((__unused__))</cpp:value></cpp:define>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>YY_ATTRIBUTE_UNUSED</name></cpp:macro></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Suppress unused-variable warnings by "using" E.  */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator> <name>defined</name> <name>lint</name> <operator>||</operator> <name>defined</name> <name>__GNUC__</name></expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>YY_USE</name><parameter_list>(<parameter><type><name>E</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void) (E))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>YY_USE</name><parameter_list>(<parameter><type><name>E</name></type></parameter>)</parameter_list></cpp:macro></cpp:define> <comment type="block">/* empty */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Suppress an incorrect diagnostic about yylval being uninitialized.  */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__GNUC__</name> <operator>&amp;&amp;</operator> <operator>!</operator> <name>defined</name> <name>__ICC</name> <operator>&amp;&amp;</operator> <literal type="number">406</literal> <operator>&lt;=</operator> <name>__GNUC__</name> <operator>*</operator> <literal type="number">100</literal> <operator>+</operator> <name>__GNUC_MINOR__</name></expr></cpp:if>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><name>__GNUC__</name> <operator>*</operator> <literal type="number">100</literal> <operator>+</operator> <name>__GNUC_MINOR__</name> <operator>&lt;</operator> <literal type="number">407</literal></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN</name></cpp:macro>                           \
    <cpp:value>_Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")</cpp:value></cpp:define>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN</name></cpp:macro>                           \
    <cpp:value>_Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>YY_IGNORE_MAYBE_UNINITIALIZED_END</name></cpp:macro>      \
    <cpp:value>_Pragma ("GCC diagnostic pop")</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>YY_INITIAL_VALUE</name><parameter_list>(<parameter><type><name>Value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Value</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN</name></cpp:macro></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>YY_IGNORE_MAYBE_UNINITIALIZED_END</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>YY_INITIAL_VALUE</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>YY_INITIAL_VALUE</name><parameter_list>(<parameter><type><name>Value</name></type></parameter>)</parameter_list></cpp:macro></cpp:define> <comment type="block">/* Nothing. */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__cplusplus</name> <operator>&amp;&amp;</operator> <name>defined</name> <name>__GNUC__</name> <operator>&amp;&amp;</operator> <operator>!</operator> <name>defined</name> <name>__ICC</name> <operator>&amp;&amp;</operator> <literal type="number">6</literal> <operator>&lt;=</operator> <name>__GNUC__</name></expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>YY_IGNORE_USELESS_CAST_BEGIN</name></cpp:macro>                          \
    <cpp:value>_Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>YY_IGNORE_USELESS_CAST_END</name></cpp:macro>            \
    <cpp:value>_Pragma ("GCC diagnostic pop")</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>YY_IGNORE_USELESS_CAST_BEGIN</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>YY_IGNORE_USELESS_CAST_BEGIN</name></cpp:macro></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>YY_IGNORE_USELESS_CAST_END</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_ASSERT</name><parameter_list>(<parameter><type><name>E</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void) (0 &amp;&amp; (E)))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>yyoverflow</name></expr></cpp:if>

<comment type="block">/* The parser invokes alloca or malloc; define the necessary symbols.  */</comment>

<cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>YYSTACK_USE_ALLOCA</name></cpp:ifdef>
<cpp:if>#  <cpp:directive>if</cpp:directive> <expr><name>YYSTACK_USE_ALLOCA</name></expr></cpp:if>
<cpp:ifdef>#   <cpp:directive>ifdef</cpp:directive> <name>__GNUC__</name></cpp:ifdef>
<cpp:define>#    <cpp:directive>define</cpp:directive> <cpp:macro><name>YYSTACK_ALLOC</name></cpp:macro> <cpp:value>__builtin_alloca</cpp:value></cpp:define>
<cpp:elif>#   <cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>__BUILTIN_VA_ARG_INCR</name></expr></cpp:elif>
<cpp:include>#    <cpp:directive>include</cpp:directive> <cpp:file>&lt;alloca.h&gt;</cpp:file></cpp:include> <comment type="block">/* INFRINGES ON USER NAME SPACE */</comment>
<cpp:elif>#   <cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>_AIX</name></expr></cpp:elif>
<cpp:define>#    <cpp:directive>define</cpp:directive> <cpp:macro><name>YYSTACK_ALLOC</name></cpp:macro> <cpp:value>__alloca</cpp:value></cpp:define>
<cpp:elif>#   <cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>_MSC_VER</name></expr></cpp:elif>
<cpp:include>#    <cpp:directive>include</cpp:directive> <cpp:file>&lt;malloc.h&gt;</cpp:file></cpp:include> <comment type="block">/* INFRINGES ON USER NAME SPACE */</comment>
<cpp:define>#    <cpp:directive>define</cpp:directive> <cpp:macro><name>alloca</name></cpp:macro> <cpp:value>_alloca</cpp:value></cpp:define>
<cpp:else>#   <cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#    <cpp:directive>define</cpp:directive> <cpp:macro><name>YYSTACK_ALLOC</name></cpp:macro> <cpp:value>alloca</cpp:value></cpp:define>
<cpp:if>#    <cpp:directive>if</cpp:directive> <expr><operator>!</operator> <name>defined</name> <name>_ALLOCA_H</name> <operator>&amp;&amp;</operator> <operator>!</operator> <name>defined</name> <name>EXIT_SUCCESS</name></expr></cpp:if>
<cpp:include>#     <cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include> <comment type="block">/* INFRINGES ON USER NAME SPACE */</comment>
      <comment type="block">/* Use EXIT_SUCCESS as a witness for stdlib.h.  */</comment>
<cpp:ifndef>#     <cpp:directive>ifndef</cpp:directive> <name>EXIT_SUCCESS</name></cpp:ifndef>
<cpp:define>#      <cpp:directive>define</cpp:directive> <cpp:macro><name>EXIT_SUCCESS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#     <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#    <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#   <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>YYSTACK_ALLOC</name></cpp:ifdef>
   <comment type="block">/* Pacify GCC's 'empty if-body' warning.  */</comment>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>YYSTACK_FREE</name><parameter_list>(<parameter><type><name>Ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { <comment type="block">/* empty */</comment>; } while (0)</cpp:value></cpp:define>
<cpp:ifndef>#  <cpp:directive>ifndef</cpp:directive> <name>YYSTACK_ALLOC_MAXIMUM</name></cpp:ifndef>
    <comment type="block">/* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */</comment>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>YYSTACK_ALLOC_MAXIMUM</name></cpp:macro> <cpp:value>4032</cpp:value></cpp:define> <comment type="block">/* reasonable circa 2006 */</comment>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>YYSTACK_ALLOC</name></cpp:macro> <cpp:value>YYMALLOC</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>YYSTACK_FREE</name></cpp:macro> <cpp:value>YYFREE</cpp:value></cpp:define>
<cpp:ifndef>#  <cpp:directive>ifndef</cpp:directive> <name>YYSTACK_ALLOC_MAXIMUM</name></cpp:ifndef>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>YYSTACK_ALLOC_MAXIMUM</name></cpp:macro> <cpp:value>YYSIZE_MAXIMUM</cpp:value></cpp:define>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#  <cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>defined</name> <name>__cplusplus</name> <operator>&amp;&amp;</operator> <operator>!</operator> <name>defined</name> <name>EXIT_SUCCESS</name> \
       <operator>&amp;&amp;</operator> <operator>!</operator> <operator>(</operator><operator>(</operator><name>defined</name> <name>YYMALLOC</name> <operator>||</operator> <name>defined</name> <name>malloc</name><operator>)</operator> \
             <operator>&amp;&amp;</operator> <operator>(</operator><name>defined</name> <name>YYFREE</name> <operator>||</operator> <name>defined</name> <name>free</name><operator>)</operator><operator>)</operator><operator>)</operator></expr></cpp:if>
<cpp:include>#   <cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include> <comment type="block">/* INFRINGES ON USER NAME SPACE */</comment>
<cpp:ifndef>#   <cpp:directive>ifndef</cpp:directive> <name>EXIT_SUCCESS</name></cpp:ifndef>
<cpp:define>#    <cpp:directive>define</cpp:directive> <cpp:macro><name>EXIT_SUCCESS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#   <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#  <cpp:directive>ifndef</cpp:directive> <name>YYMALLOC</name></cpp:ifndef>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>YYMALLOC</name></cpp:macro> <cpp:value>malloc</cpp:value></cpp:define>
<cpp:if>#   <cpp:directive>if</cpp:directive> <expr><operator>!</operator> <name>defined</name> <name>malloc</name> <operator>&amp;&amp;</operator> <operator>!</operator> <name>defined</name> <name>EXIT_SUCCESS</name></expr></cpp:if>
<function_decl><type><name>void</name> <modifier>*</modifier></type><name>malloc</name> <parameter_list>(<parameter><decl><type><name>YYSIZE_T</name></type></decl></parameter>)</parameter_list>;</function_decl> <comment type="block">/* INFRINGES ON USER NAME SPACE */</comment>
<cpp:endif>#   <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#  <cpp:directive>ifndef</cpp:directive> <name>YYFREE</name></cpp:ifndef>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>YYFREE</name></cpp:macro> <cpp:value>free</cpp:value></cpp:define>
<cpp:if>#   <cpp:directive>if</cpp:directive> <expr><operator>!</operator> <name>defined</name> <name>free</name> <operator>&amp;&amp;</operator> <operator>!</operator> <name>defined</name> <name>EXIT_SUCCESS</name></expr></cpp:if>
<function_decl><type><name>void</name></type> <name>free</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl> <comment type="block">/* INFRINGES ON USER NAME SPACE */</comment>
<cpp:endif>#   <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !defined yyoverflow */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>!</operator> <name>defined</name> <name>yyoverflow</name> \
     <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator> <name>defined</name> <name>__cplusplus</name> \
         <operator>||</operator> <operator>(</operator><name>defined</name> <name>YYLTYPE_IS_TRIVIAL</name> <operator>&amp;&amp;</operator> <name>YYLTYPE_IS_TRIVIAL</name> \
             <operator>&amp;&amp;</operator> <name>defined</name> <name>YYSTYPE_IS_TRIVIAL</name> <operator>&amp;&amp;</operator> <name>YYSTYPE_IS_TRIVIAL</name><operator>)</operator><operator>)</operator><operator>)</operator></expr></cpp:if>

<comment type="block">/* A type that is properly aligned for any stack member.  */</comment>
<union>union <name>yyalloc</name>
<block>{
  <decl_stmt><decl><type><name>yy_state_t</name></type> <name>yyss_alloc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>YYSTYPE</name></type> <name>yyvs_alloc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>YYLTYPE</name></type> <name>yyls_alloc</name></decl>;</decl_stmt>
}</block>;</union>

<comment type="block">/* The size of the maximum gap between one aligned stack and the next.  */</comment>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>YYSTACK_GAP_MAXIMUM</name></cpp:macro> <cpp:value>(YYSIZEOF (union yyalloc) - 1)</cpp:value></cpp:define>

<comment type="block">/* The size of an array large to enough to hold all stacks, each with
   N elements.  */</comment>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>YYSTACK_BYTES</name><parameter_list>(<parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> \
     <cpp:value>((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)</cpp:value></cpp:define>

<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>YYCOPY_NEEDED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */</comment>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>YYSTACK_RELOCATE</name><parameter_list>(<parameter><type><name>Stack_alloc</name></type></parameter>, <parameter><type><name>Stack</name></type></parameter>)</parameter_list></cpp:macro>                           \
    <cpp:value>do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&amp;yyptr-&gt;Stack_alloc, Stack, yysize);                    \
        Stack = &amp;yyptr-&gt;Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>YYCOPY_NEEDED</name> <operator>&amp;&amp;</operator> <name>YYCOPY_NEEDED</name></expr></cpp:if>
<comment type="block">/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */</comment>
<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>YYCOPY</name></cpp:ifndef>
<cpp:if>#  <cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__GNUC__</name> <operator>&amp;&amp;</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>__GNUC__</name></expr></cpp:if>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>YYCOPY</name><parameter_list>(<parameter><type><name>Dst</name></type></parameter>, <parameter><type><name>Src</name></type></parameter>, <parameter><type><name>Count</name></type></parameter>)</parameter_list></cpp:macro> \
      <cpp:value>__builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))</cpp:value></cpp:define>
<cpp:else>#  <cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>YYCOPY</name><parameter_list>(<parameter><type><name>Dst</name></type></parameter>, <parameter><type><name>Src</name></type></parameter>, <parameter><type><name>Count</name></type></parameter>)</parameter_list></cpp:macro>              \
      <cpp:value>do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi &lt; (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)</cpp:value></cpp:define>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !YYCOPY_NEEDED */</comment>

<comment type="block">/* YYFINAL -- State number of the termination state.  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYFINAL</name></cpp:macro>  <cpp:value>9</cpp:value></cpp:define>
<comment type="block">/* YYLAST -- Last index in YYTABLE.  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYLAST</name></cpp:macro>   <cpp:value>1876</cpp:value></cpp:define>

<comment type="block">/* YYNTOKENS -- Number of terminals.  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYNTOKENS</name></cpp:macro>  <cpp:value>83</cpp:value></cpp:define>
<comment type="block">/* YYNNTS -- Number of nonterminals.  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYNNTS</name></cpp:macro>  <cpp:value>84</cpp:value></cpp:define>
<comment type="block">/* YYNRULES -- Number of rules.  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYNRULES</name></cpp:macro>  <cpp:value>245</cpp:value></cpp:define>
<comment type="block">/* YYNSTATES -- Number of states.  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYNSTATES</name></cpp:macro>  <cpp:value>386</cpp:value></cpp:define>

<comment type="block">/* YYMAXUTOK -- Last valid token kind.  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYMAXUTOK</name></cpp:macro>   <cpp:value>318</cpp:value></cpp:define>


<comment type="block">/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYTRANSLATE</name><parameter_list>(<parameter><type><name>YYX</name></type></parameter>)</parameter_list></cpp:macro>                                \
  <cpp:value>(0 &lt;= (YYX) &amp;&amp; (YYX) &lt;= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)</cpp:value></cpp:define>

<comment type="block">/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>yytype_int8</name></type> <name><name>yytranslate</name><index>[]</index></name> <init>=
<expr><block>{
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,
       <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,
       <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,
       <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,    <expr><literal type="number">70</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,
      <expr><literal type="number">75</literal></expr>,    <expr><literal type="number">76</literal></expr>,    <expr><literal type="number">68</literal></expr>,    <expr><literal type="number">66</literal></expr>,    <expr><literal type="number">78</literal></expr>,    <expr><literal type="number">67</literal></expr>,    <expr><literal type="number">77</literal></expr>,    <expr><literal type="number">69</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,
       <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,    <expr><literal type="number">80</literal></expr>,    <expr><literal type="number">79</literal></expr>,
      <expr><literal type="number">64</literal></expr>,    <expr><literal type="number">63</literal></expr>,    <expr><literal type="number">65</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,
       <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,
       <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,
       <expr><literal type="number">2</literal></expr>,    <expr><literal type="number">73</literal></expr>,     <expr><literal type="number">2</literal></expr>,    <expr><literal type="number">74</literal></expr>,    <expr><literal type="number">71</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,
       <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,
       <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,
       <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,    <expr><literal type="number">81</literal></expr>,     <expr><literal type="number">2</literal></expr>,    <expr><literal type="number">82</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,
       <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,
       <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,
       <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,
       <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,
       <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,
       <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,
       <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,
       <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,
       <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,
       <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,
       <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,
       <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,
       <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">4</literal></expr>,
       <expr><literal type="number">5</literal></expr>,     <expr><literal type="number">6</literal></expr>,     <expr><literal type="number">7</literal></expr>,     <expr><literal type="number">8</literal></expr>,     <expr><literal type="number">9</literal></expr>,    <expr><literal type="number">10</literal></expr>,    <expr><literal type="number">11</literal></expr>,    <expr><literal type="number">12</literal></expr>,    <expr><literal type="number">13</literal></expr>,    <expr><literal type="number">14</literal></expr>,
      <expr><literal type="number">15</literal></expr>,    <expr><literal type="number">16</literal></expr>,    <expr><literal type="number">17</literal></expr>,    <expr><literal type="number">18</literal></expr>,    <expr><literal type="number">19</literal></expr>,    <expr><literal type="number">20</literal></expr>,    <expr><literal type="number">21</literal></expr>,    <expr><literal type="number">22</literal></expr>,    <expr><literal type="number">23</literal></expr>,    <expr><literal type="number">24</literal></expr>,
      <expr><literal type="number">25</literal></expr>,    <expr><literal type="number">26</literal></expr>,    <expr><literal type="number">27</literal></expr>,    <expr><literal type="number">28</literal></expr>,    <expr><literal type="number">29</literal></expr>,    <expr><literal type="number">30</literal></expr>,    <expr><literal type="number">31</literal></expr>,    <expr><literal type="number">32</literal></expr>,    <expr><literal type="number">33</literal></expr>,    <expr><literal type="number">34</literal></expr>,
      <expr><literal type="number">35</literal></expr>,    <expr><literal type="number">36</literal></expr>,    <expr><literal type="number">37</literal></expr>,    <expr><literal type="number">38</literal></expr>,    <expr><literal type="number">39</literal></expr>,    <expr><literal type="number">40</literal></expr>,    <expr><literal type="number">41</literal></expr>,    <expr><literal type="number">42</literal></expr>,    <expr><literal type="number">43</literal></expr>,    <expr><literal type="number">44</literal></expr>,
      <expr><literal type="number">45</literal></expr>,    <expr><literal type="number">46</literal></expr>,    <expr><literal type="number">47</literal></expr>,    <expr><literal type="number">48</literal></expr>,    <expr><literal type="number">49</literal></expr>,    <expr><literal type="number">50</literal></expr>,    <expr><literal type="number">51</literal></expr>,    <expr><literal type="number">52</literal></expr>,    <expr><literal type="number">53</literal></expr>,    <expr><literal type="number">54</literal></expr>,
      <expr><literal type="number">55</literal></expr>,    <expr><literal type="number">56</literal></expr>,    <expr><literal type="number">57</literal></expr>,    <expr><literal type="number">58</literal></expr>,    <expr><literal type="number">59</literal></expr>,    <expr><literal type="number">60</literal></expr>,    <expr><literal type="number">61</literal></expr>,    <expr><literal type="number">62</literal></expr>,    <expr><literal type="number">72</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>
<comment type="block">/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>yytype_int16</name></type> <name><name>yyrline</name><index>[]</index></name> <init>=
<expr><block>{
       <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">240</literal></expr>,   <expr><literal type="number">240</literal></expr>,   <expr><literal type="number">261</literal></expr>,   <expr><literal type="number">275</literal></expr>,   <expr><literal type="number">289</literal></expr>,   <expr><literal type="number">303</literal></expr>,   <expr><literal type="number">321</literal></expr>,   <expr><literal type="number">325</literal></expr>,   <expr><literal type="number">332</literal></expr>,
     <expr><literal type="number">339</literal></expr>,   <expr><literal type="number">378</literal></expr>,   <expr><literal type="number">386</literal></expr>,   <expr><literal type="number">430</literal></expr>,   <expr><literal type="number">434</literal></expr>,   <expr><literal type="number">441</literal></expr>,   <expr><literal type="number">453</literal></expr>,   <expr><literal type="number">468</literal></expr>,   <expr><literal type="number">470</literal></expr>,   <expr><literal type="number">474</literal></expr>,
     <expr><literal type="number">478</literal></expr>,   <expr><literal type="number">483</literal></expr>,   <expr><literal type="number">494</literal></expr>,   <expr><literal type="number">502</literal></expr>,   <expr><literal type="number">505</literal></expr>,   <expr><literal type="number">512</literal></expr>,   <expr><literal type="number">516</literal></expr>,   <expr><literal type="number">520</literal></expr>,   <expr><literal type="number">528</literal></expr>,   <expr><literal type="number">531</literal></expr>,
     <expr><literal type="number">538</literal></expr>,   <expr><literal type="number">539</literal></expr>,   <expr><literal type="number">540</literal></expr>,   <expr><literal type="number">545</literal></expr>,   <expr><literal type="number">548</literal></expr>,   <expr><literal type="number">552</literal></expr>,   <expr><literal type="number">556</literal></expr>,   <expr><literal type="number">563</literal></expr>,   <expr><literal type="number">564</literal></expr>,   <expr><literal type="number">565</literal></expr>,
     <expr><literal type="number">566</literal></expr>,   <expr><literal type="number">567</literal></expr>,   <expr><literal type="number">571</literal></expr>,   <expr><literal type="number">591</literal></expr>,   <expr><literal type="number">597</literal></expr>,   <expr><literal type="number">606</literal></expr>,   <expr><literal type="number">616</literal></expr>,   <expr><literal type="number">622</literal></expr>,   <expr><literal type="number">629</literal></expr>,   <expr><literal type="number">630</literal></expr>,
     <expr><literal type="number">633</literal></expr>,   <expr><literal type="number">640</literal></expr>,   <expr><literal type="number">653</literal></expr>,   <expr><literal type="number">670</literal></expr>,   <expr><literal type="number">674</literal></expr>,   <expr><literal type="number">681</literal></expr>,   <expr><literal type="number">693</literal></expr>,   <expr><literal type="number">705</literal></expr>,   <expr><literal type="number">726</literal></expr>,   <expr><literal type="number">729</literal></expr>,
     <expr><literal type="number">736</literal></expr>,   <expr><literal type="number">740</literal></expr>,   <expr><literal type="number">747</literal></expr>,   <expr><literal type="number">764</literal></expr>,   <expr><literal type="number">767</literal></expr>,   <expr><literal type="number">771</literal></expr>,   <expr><literal type="number">775</literal></expr>,   <expr><literal type="number">779</literal></expr>,   <expr><literal type="number">787</literal></expr>,   <expr><literal type="number">790</literal></expr>,
     <expr><literal type="number">798</literal></expr>,   <expr><literal type="number">801</literal></expr>,   <expr><literal type="number">808</literal></expr>,   <expr><literal type="number">839</literal></expr>,   <expr><literal type="number">878</literal></expr>,   <expr><literal type="number">892</literal></expr>,   <expr><literal type="number">897</literal></expr>,   <expr><literal type="number">904</literal></expr>,   <expr><literal type="number">924</literal></expr>,   <expr><literal type="number">940</literal></expr>,
     <expr><literal type="number">954</literal></expr>,   <expr><literal type="number">958</literal></expr>,   <expr><literal type="number">965</literal></expr>,   <expr><literal type="number">977</literal></expr>,   <expr><literal type="number">992</literal></expr>,  <expr><literal type="number">1006</literal></expr>,  <expr><literal type="number">1010</literal></expr>,  <expr><literal type="number">1017</literal></expr>,  <expr><literal type="number">1035</literal></expr>,  <expr><literal type="number">1049</literal></expr>,
    <expr><literal type="number">1054</literal></expr>,  <expr><literal type="number">1063</literal></expr>,  <expr><literal type="number">1080</literal></expr>,  <expr><literal type="number">1083</literal></expr>,  <expr><literal type="number">1095</literal></expr>,  <expr><literal type="number">1099</literal></expr>,  <expr><literal type="number">1107</literal></expr>,  <expr><literal type="number">1108</literal></expr>,  <expr><literal type="number">1121</literal></expr>,  <expr><literal type="number">1135</literal></expr>,
    <expr><literal type="number">1136</literal></expr>,  <expr><literal type="number">1143</literal></expr>,  <expr><literal type="number">1147</literal></expr>,  <expr><literal type="number">1172</literal></expr>,  <expr><literal type="number">1187</literal></expr>,  <expr><literal type="number">1196</literal></expr>,  <expr><literal type="number">1205</literal></expr>,  <expr><literal type="number">1217</literal></expr>,  <expr><literal type="number">1231</literal></expr>,  <expr><literal type="number">1246</literal></expr>,
    <expr><literal type="number">1249</literal></expr>,  <expr><literal type="number">1257</literal></expr>,  <expr><literal type="number">1260</literal></expr>,  <expr><literal type="number">1261</literal></expr>,  <expr><literal type="number">1279</literal></expr>,  <expr><literal type="number">1283</literal></expr>,  <expr><literal type="number">1287</literal></expr>,  <expr><literal type="number">1291</literal></expr>,  <expr><literal type="number">1295</literal></expr>,  <expr><literal type="number">1299</literal></expr>,
    <expr><literal type="number">1303</literal></expr>,  <expr><literal type="number">1307</literal></expr>,  <expr><literal type="number">1311</literal></expr>,  <expr><literal type="number">1315</literal></expr>,  <expr><literal type="number">1319</literal></expr>,  <expr><literal type="number">1323</literal></expr>,  <expr><literal type="number">1327</literal></expr>,  <expr><literal type="number">1331</literal></expr>,  <expr><literal type="number">1335</literal></expr>,  <expr><literal type="number">1339</literal></expr>,
    <expr><literal type="number">1343</literal></expr>,  <expr><literal type="number">1347</literal></expr>,  <expr><literal type="number">1358</literal></expr>,  <expr><literal type="number">1369</literal></expr>,  <expr><literal type="number">1373</literal></expr>,  <expr><literal type="number">1385</literal></expr>,  <expr><literal type="number">1397</literal></expr>,  <expr><literal type="number">1409</literal></expr>,  <expr><literal type="number">1414</literal></expr>,  <expr><literal type="number">1425</literal></expr>,
    <expr><literal type="number">1443</literal></expr>,  <expr><literal type="number">1521</literal></expr>,  <expr><literal type="number">1525</literal></expr>,  <expr><literal type="number">1530</literal></expr>,  <expr><literal type="number">1533</literal></expr>,  <expr><literal type="number">1537</literal></expr>,  <expr><literal type="number">1541</literal></expr>,  <expr><literal type="number">1549</literal></expr>,  <expr><literal type="number">1552</literal></expr>,  <expr><literal type="number">1556</literal></expr>,
    <expr><literal type="number">1557</literal></expr>,  <expr><literal type="number">1561</literal></expr>,  <expr><literal type="number">1565</literal></expr>,  <expr><literal type="number">1570</literal></expr>,  <expr><literal type="number">1586</literal></expr>,  <expr><literal type="number">1596</literal></expr>,  <expr><literal type="number">1605</literal></expr>,  <expr><literal type="number">1623</literal></expr>,  <expr><literal type="number">1631</literal></expr>,  <expr><literal type="number">1638</literal></expr>,
    <expr><literal type="number">1639</literal></expr>,  <expr><literal type="number">1649</literal></expr>,  <expr><literal type="number">1653</literal></expr>,  <expr><literal type="number">1654</literal></expr>,  <expr><literal type="number">1655</literal></expr>,  <expr><literal type="number">1659</literal></expr>,  <expr><literal type="number">1663</literal></expr>,  <expr><literal type="number">1667</literal></expr>,  <expr><literal type="number">1671</literal></expr>,  <expr><literal type="number">1675</literal></expr>,
    <expr><literal type="number">1679</literal></expr>,  <expr><literal type="number">1683</literal></expr>,  <expr><literal type="number">1684</literal></expr>,  <expr><literal type="number">1688</literal></expr>,  <expr><literal type="number">1701</literal></expr>,  <expr><literal type="number">1704</literal></expr>,  <expr><literal type="number">1708</literal></expr>,  <expr><literal type="number">1712</literal></expr>,  <expr><literal type="number">1719</literal></expr>,  <expr><literal type="number">1731</literal></expr>,
    <expr><literal type="number">1743</literal></expr>,  <expr><literal type="number">1757</literal></expr>,  <expr><literal type="number">1761</literal></expr>,  <expr><literal type="number">1768</literal></expr>,  <expr><literal type="number">1781</literal></expr>,  <expr><literal type="number">1786</literal></expr>,  <expr><literal type="number">1792</literal></expr>,  <expr><literal type="number">1808</literal></expr>,  <expr><literal type="number">1818</literal></expr>,  <expr><literal type="number">1825</literal></expr>,
    <expr><literal type="number">1829</literal></expr>,  <expr><literal type="number">1834</literal></expr>,  <expr><literal type="number">1837</literal></expr>,  <expr><literal type="number">1841</literal></expr>,  <expr><literal type="number">1845</literal></expr>,  <expr><literal type="number">1849</literal></expr>,  <expr><literal type="number">1850</literal></expr>,  <expr><literal type="number">1858</literal></expr>,  <expr><literal type="number">1859</literal></expr>,  <expr><literal type="number">1868</literal></expr>,
    <expr><literal type="number">1869</literal></expr>,  <expr><literal type="number">1870</literal></expr>,  <expr><literal type="number">1871</literal></expr>,  <expr><literal type="number">1872</literal></expr>,  <expr><literal type="number">1873</literal></expr>,  <expr><literal type="number">1874</literal></expr>,  <expr><literal type="number">1875</literal></expr>,  <expr><literal type="number">1876</literal></expr>,  <expr><literal type="number">1877</literal></expr>,  <expr><literal type="number">1878</literal></expr>,
    <expr><literal type="number">1879</literal></expr>,  <expr><literal type="number">1880</literal></expr>,  <expr><literal type="number">1881</literal></expr>,  <expr><literal type="number">1882</literal></expr>,  <expr><literal type="number">1883</literal></expr>,  <expr><literal type="number">1884</literal></expr>,  <expr><literal type="number">1885</literal></expr>,  <expr><literal type="number">1886</literal></expr>,  <expr><literal type="number">1887</literal></expr>,  <expr><literal type="number">1888</literal></expr>,
    <expr><literal type="number">1889</literal></expr>,  <expr><literal type="number">1890</literal></expr>,  <expr><literal type="number">1891</literal></expr>,  <expr><literal type="number">1892</literal></expr>,  <expr><literal type="number">1893</literal></expr>,  <expr><literal type="number">1894</literal></expr>,  <expr><literal type="number">1895</literal></expr>,  <expr><literal type="number">1896</literal></expr>,  <expr><literal type="number">1897</literal></expr>,  <expr><literal type="number">1898</literal></expr>,
    <expr><literal type="number">1899</literal></expr>,  <expr><literal type="number">1900</literal></expr>,  <expr><literal type="number">1901</literal></expr>,  <expr><literal type="number">1902</literal></expr>,  <expr><literal type="number">1903</literal></expr>,  <expr><literal type="number">1904</literal></expr>,  <expr><literal type="number">1905</literal></expr>,  <expr><literal type="number">1906</literal></expr>,  <expr><literal type="number">1907</literal></expr>,  <expr><literal type="number">1908</literal></expr>,
    <expr><literal type="number">1909</literal></expr>,  <expr><literal type="number">1910</literal></expr>,  <expr><literal type="number">1914</literal></expr>,  <expr><literal type="number">1915</literal></expr>,  <expr><literal type="number">1916</literal></expr>,  <expr><literal type="number">1917</literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/** Accessing symbol of state STATE.  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YY_ACCESSING_SYMBOL</name><parameter_list>(<parameter><type><name>State</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>YY_CAST (yysymbol_kind_t, yystos[State])</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name> <operator>||</operator> <literal type="number">0</literal></expr></cpp:if>
<comment type="block">/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>yysymbol_name</name> <argument_list>(<argument><expr><name>yysymbol_kind_t</name> <name>yysymbol</name></expr></argument>)</argument_list> <name>YY_ATTRIBUTE_UNUSED</name></decl>;</decl_stmt>

<comment type="block">/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>yytname</name><index>[]</index></name> <init>=
<expr><block>{
  <expr><literal type="string">"\"end of file\""</literal></expr>, <expr><literal type="string">"error"</literal></expr>, <expr><literal type="string">"\"invalid token\""</literal></expr>, <expr><literal type="string">"INTEGER"</literal></expr>, <expr><literal type="string">"DECIMAL"</literal></expr>,
  <expr><literal type="string">"STRING"</literal></expr>, <expr><literal type="string">"IDENTIFIER"</literal></expr>, <expr><literal type="string">"PARAMETER"</literal></expr>, <expr><literal type="string">"NOT_EQ"</literal></expr>, <expr><literal type="string">"LT_EQ"</literal></expr>, <expr><literal type="string">"GT_EQ"</literal></expr>,
  <expr><literal type="string">"DOT_DOT"</literal></expr>, <expr><literal type="string">"TYPECAST"</literal></expr>, <expr><literal type="string">"PLUS_EQ"</literal></expr>, <expr><literal type="string">"EQ_TILDE"</literal></expr>, <expr><literal type="string">"ALL"</literal></expr>, <expr><literal type="string">"ANALYZE"</literal></expr>, <expr><literal type="string">"AND"</literal></expr>,
  <expr><literal type="string">"AS"</literal></expr>, <expr><literal type="string">"ASC"</literal></expr>, <expr><literal type="string">"ASCENDING"</literal></expr>, <expr><literal type="string">"BY"</literal></expr>, <expr><literal type="string">"CALL"</literal></expr>, <expr><literal type="string">"CASE"</literal></expr>, <expr><literal type="string">"COALESCE"</literal></expr>, <expr><literal type="string">"CONTAINS"</literal></expr>,
  <expr><literal type="string">"CREATE"</literal></expr>, <expr><literal type="string">"DELETE"</literal></expr>, <expr><literal type="string">"DESC"</literal></expr>, <expr><literal type="string">"DESCENDING"</literal></expr>, <expr><literal type="string">"DETACH"</literal></expr>, <expr><literal type="string">"DISTINCT"</literal></expr>, <expr><literal type="string">"ELSE"</literal></expr>,
  <expr><literal type="string">"END_P"</literal></expr>, <expr><literal type="string">"ENDS"</literal></expr>, <expr><literal type="string">"EXISTS"</literal></expr>, <expr><literal type="string">"EXPLAIN"</literal></expr>, <expr><literal type="string">"FALSE_P"</literal></expr>, <expr><literal type="string">"IN"</literal></expr>, <expr><literal type="string">"IS"</literal></expr>, <expr><literal type="string">"LIMIT"</literal></expr>,
  <expr><literal type="string">"MATCH"</literal></expr>, <expr><literal type="string">"MERGE"</literal></expr>, <expr><literal type="string">"NOT"</literal></expr>, <expr><literal type="string">"NULL_P"</literal></expr>, <expr><literal type="string">"OPTIONAL"</literal></expr>, <expr><literal type="string">"OR"</literal></expr>, <expr><literal type="string">"ORDER"</literal></expr>, <expr><literal type="string">"REMOVE"</literal></expr>,
  <expr><literal type="string">"RETURN"</literal></expr>, <expr><literal type="string">"SET"</literal></expr>, <expr><literal type="string">"SKIP"</literal></expr>, <expr><literal type="string">"STARTS"</literal></expr>, <expr><literal type="string">"THEN"</literal></expr>, <expr><literal type="string">"TRUE_P"</literal></expr>, <expr><literal type="string">"UNION"</literal></expr>, <expr><literal type="string">"UNWIND"</literal></expr>,
  <expr><literal type="string">"VERBOSE"</literal></expr>, <expr><literal type="string">"WHEN"</literal></expr>, <expr><literal type="string">"WHERE"</literal></expr>, <expr><literal type="string">"WITH"</literal></expr>, <expr><literal type="string">"XOR"</literal></expr>, <expr><literal type="string">"YIELD"</literal></expr>, <expr><literal type="string">"'='"</literal></expr>, <expr><literal type="string">"'&lt;'"</literal></expr>, <expr><literal type="string">"'&gt;'"</literal></expr>,
  <expr><literal type="string">"'+'"</literal></expr>, <expr><literal type="string">"'-'"</literal></expr>, <expr><literal type="string">"'*'"</literal></expr>, <expr><literal type="string">"'/'"</literal></expr>, <expr><literal type="string">"'%'"</literal></expr>, <expr><literal type="string">"'^'"</literal></expr>, <expr><literal type="string">"UNARY_MINUS"</literal></expr>, <expr><literal type="string">"'['"</literal></expr>, <expr><literal type="string">"']'"</literal></expr>,
  <expr><literal type="string">"'('"</literal></expr>, <expr><literal type="string">"')'"</literal></expr>, <expr><literal type="string">"'.'"</literal></expr>, <expr><literal type="string">"','"</literal></expr>, <expr><literal type="string">"';'"</literal></expr>, <expr><literal type="string">"':'"</literal></expr>, <expr><literal type="string">"'{'"</literal></expr>, <expr><literal type="string">"'}'"</literal></expr>, <expr><literal type="string">"$accept"</literal></expr>,
  <expr><literal type="string">"stmt"</literal></expr>, <expr><literal type="string">"cypher_stmt"</literal></expr>, <expr><literal type="string">"call_stmt"</literal></expr>, <expr><literal type="string">"yield_item_list"</literal></expr>, <expr><literal type="string">"yield_item"</literal></expr>,
  <expr><literal type="string">"semicolon_opt"</literal></expr>, <expr><literal type="string">"all_or_distinct"</literal></expr>, <expr><literal type="string">"single_query"</literal></expr>, <expr><literal type="string">"query_part_init"</literal></expr>,
  <expr><literal type="string">"query_part_last"</literal></expr>, <expr><literal type="string">"reading_clause_list"</literal></expr>, <expr><literal type="string">"reading_clause"</literal></expr>,
  <expr><literal type="string">"updating_clause_list_0"</literal></expr>, <expr><literal type="string">"updating_clause_list_1"</literal></expr>, <expr><literal type="string">"updating_clause"</literal></expr>,
  <expr><literal type="string">"cypher_varlen_opt"</literal></expr>, <expr><literal type="string">"cypher_range_opt"</literal></expr>, <expr><literal type="string">"cypher_range_idx"</literal></expr>,
  <expr><literal type="string">"cypher_range_idx_opt"</literal></expr>, <expr><literal type="string">"Iconst"</literal></expr>, <expr><literal type="string">"return"</literal></expr>, <expr><literal type="string">"return_item_list"</literal></expr>,
  <expr><literal type="string">"return_item"</literal></expr>, <expr><literal type="string">"order_by_opt"</literal></expr>, <expr><literal type="string">"sort_item_list"</literal></expr>, <expr><literal type="string">"sort_item"</literal></expr>,
  <expr><literal type="string">"order_opt"</literal></expr>, <expr><literal type="string">"skip_opt"</literal></expr>, <expr><literal type="string">"limit_opt"</literal></expr>, <expr><literal type="string">"with"</literal></expr>, <expr><literal type="string">"match"</literal></expr>, <expr><literal type="string">"optional_opt"</literal></expr>,
  <expr><literal type="string">"unwind"</literal></expr>, <expr><literal type="string">"create"</literal></expr>, <expr><literal type="string">"set"</literal></expr>, <expr><literal type="string">"set_item_list"</literal></expr>, <expr><literal type="string">"set_item"</literal></expr>, <expr><literal type="string">"remove"</literal></expr>,
  <expr><literal type="string">"remove_item_list"</literal></expr>, <expr><literal type="string">"remove_item"</literal></expr>, <expr><literal type="string">"delete"</literal></expr>, <expr><literal type="string">"detach_opt"</literal></expr>, <expr><literal type="string">"merge"</literal></expr>,
  <expr><literal type="string">"where_opt"</literal></expr>, <expr><literal type="string">"pattern"</literal></expr>, <expr><literal type="string">"path"</literal></expr>, <expr><literal type="string">"anonymous_path"</literal></expr>,
  <expr><literal type="string">"simple_path_opt_parens"</literal></expr>, <expr><literal type="string">"simple_path"</literal></expr>, <expr><literal type="string">"path_node"</literal></expr>,
  <expr><literal type="string">"path_relationship"</literal></expr>, <expr><literal type="string">"path_relationship_body"</literal></expr>, <expr><literal type="string">"label_opt"</literal></expr>,
  <expr><literal type="string">"properties_opt"</literal></expr>, <expr><literal type="string">"expr"</literal></expr>, <expr><literal type="string">"expr_opt"</literal></expr>, <expr><literal type="string">"expr_list"</literal></expr>, <expr><literal type="string">"expr_list_opt"</literal></expr>,
  <expr><literal type="string">"expr_func"</literal></expr>, <expr><literal type="string">"expr_func_norm"</literal></expr>, <expr><literal type="string">"expr_func_subexpr"</literal></expr>, <expr><literal type="string">"property_value"</literal></expr>,
  <expr><literal type="string">"expr_atom"</literal></expr>, <expr><literal type="string">"expr_literal"</literal></expr>, <expr><literal type="string">"map"</literal></expr>, <expr><literal type="string">"map_keyval_list_opt"</literal></expr>,
  <expr><literal type="string">"map_keyval_list"</literal></expr>, <expr><literal type="string">"list"</literal></expr>, <expr><literal type="string">"expr_case"</literal></expr>, <expr><literal type="string">"expr_case_when_list"</literal></expr>,
  <expr><literal type="string">"expr_case_when"</literal></expr>, <expr><literal type="string">"expr_case_default"</literal></expr>, <expr><literal type="string">"expr_var"</literal></expr>, <expr><literal type="string">"func_name"</literal></expr>,
  <expr><literal type="string">"property_key_name"</literal></expr>, <expr><literal type="string">"var_name"</literal></expr>, <expr><literal type="string">"var_name_opt"</literal></expr>, <expr><literal type="string">"label_name"</literal></expr>,
  <expr><literal type="string">"symbolic_name"</literal></expr>, <expr><literal type="string">"schema_name"</literal></expr>, <expr><literal type="string">"reserved_keyword"</literal></expr>, <expr><literal type="string">"safe_keywords"</literal></expr>,
  <expr><literal type="string">"conflicted_keywords"</literal></expr>, <expr><name>YY_NULLPTR</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>yysymbol_name</name> <parameter_list>(<parameter><decl><type><name>yysymbol_kind_t</name></type> <name>yysymbol</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name><name>yytname</name><index>[<expr><name>yysymbol</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYPACT_NINF</name></cpp:macro> <cpp:value>(-305)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yypact_value_is_default</name><parameter_list>(<parameter><type><name>Yyn</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>((Yyn) == YYPACT_NINF)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYTABLE_NINF</name></cpp:macro> <cpp:value>(-188)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yytable_value_is_error</name><parameter_list>(<parameter><type><name>Yyn</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>((Yyn) == YYTABLE_NINF)</cpp:value></cpp:define>

<comment type="block">/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>yytype_int16</name></type> <name><name>yypact</name><index>[]</index></name> <init>=
<expr><block>{
      <expr><operator>-</operator><literal type="number">9</literal></expr>,     <expr><literal type="number">4</literal></expr>,    <expr><literal type="number">31</literal></expr>,   <expr><operator>-</operator><literal type="number">29</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,   <expr><operator>-</operator><literal type="number">16</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,   <expr><operator>-</operator><literal type="number">29</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,
      <expr><literal type="number">25</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,   <expr><literal type="number">865</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,   <expr><operator>-</operator><literal type="number">29</literal></expr>,   <expr><operator>-</operator><literal type="number">29</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,
    <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,   <expr><literal type="number">660</literal></expr>,    <expr><literal type="number">13</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,    <expr><literal type="number">13</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,   <expr><literal type="number">660</literal></expr>,   <expr><literal type="number">660</literal></expr>,   <expr><literal type="number">660</literal></expr>,
      <expr><literal type="number">11</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,    <expr><literal type="number">18</literal></expr>,    <expr><literal type="number">85</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,    <expr><literal type="number">10</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,
    <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,    <expr><literal type="number">44</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,   <expr><operator>-</operator><literal type="number">29</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,
    <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,
    <expr><operator>-</operator><literal type="number">305</literal></expr>,   <expr><literal type="number">733</literal></expr>,     <expr><literal type="number">1</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,
    <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,    <expr><literal type="number">20</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,
     <expr><literal type="number">660</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,
    <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,   <expr><literal type="number">660</literal></expr>,
     <expr><literal type="number">660</literal></expr>,   <expr><literal type="number">660</literal></expr>,  <expr><literal type="number">1814</literal></expr>,  <expr><literal type="number">1461</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,   <expr><literal type="number">192</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,
    <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,    <expr><literal type="number">22</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,    <expr><literal type="number">33</literal></expr>,    <expr><literal type="number">43</literal></expr>,    <expr><literal type="number">19</literal></expr>,    <expr><literal type="number">45</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,
    <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,     <expr><literal type="number">8</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,    <expr><literal type="number">59</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,    <expr><literal type="number">46</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><literal type="number">1527</literal></expr>,
    <expr><operator>-</operator><literal type="number">305</literal></expr>,    <expr><literal type="number">47</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,   <expr><literal type="number">859</literal></expr>,   <expr><literal type="number">925</literal></expr>,   <expr><literal type="number">441</literal></expr>,   <expr><literal type="number">514</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,
      <expr><literal type="number">13</literal></expr>,   <expr><literal type="number">660</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,   <expr><literal type="number">660</literal></expr>,   <expr><literal type="number">991</literal></expr>,   <expr><operator>-</operator><literal type="number">10</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,   <expr><literal type="number">660</literal></expr>,    <expr><literal type="number">13</literal></expr>,  <expr><literal type="number">1725</literal></expr>,
     <expr><literal type="number">104</literal></expr>,  <expr><literal type="number">1527</literal></expr>,    <expr><literal type="number">48</literal></expr>,    <expr><literal type="number">54</literal></expr>,  <expr><literal type="number">1057</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,
    <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,    <expr><literal type="number">49</literal></expr>,    <expr><literal type="number">61</literal></expr>,    <expr><literal type="number">56</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,
    <expr><operator>-</operator><literal type="number">305</literal></expr>,   <expr><literal type="number">660</literal></expr>,   <expr><literal type="number">660</literal></expr>,   <expr><literal type="number">660</literal></expr>,   <expr><literal type="number">131</literal></expr>,   <expr><literal type="number">660</literal></expr>,   <expr><literal type="number">660</literal></expr>,   <expr><literal type="number">660</literal></expr>,    <expr><literal type="number">80</literal></expr>,   <expr><literal type="number">660</literal></expr>,
      <expr><literal type="number">62</literal></expr>,   <expr><literal type="number">660</literal></expr>,    <expr><literal type="number">81</literal></expr>,   <expr><literal type="number">660</literal></expr>,   <expr><literal type="number">660</literal></expr>,   <expr><literal type="number">660</literal></expr>,   <expr><literal type="number">660</literal></expr>,   <expr><literal type="number">660</literal></expr>,   <expr><literal type="number">660</literal></expr>,   <expr><literal type="number">660</literal></expr>,
     <expr><literal type="number">660</literal></expr>,   <expr><literal type="number">660</literal></expr>,   <expr><literal type="number">660</literal></expr>,   <expr><literal type="number">660</literal></expr>,   <expr><literal type="number">660</literal></expr>,   <expr><literal type="number">660</literal></expr>,   <expr><literal type="number">362</literal></expr>,   <expr><literal type="number">131</literal></expr>,   <expr><literal type="number">131</literal></expr>,    <expr><operator>-</operator><literal type="number">2</literal></expr>,
    <expr><operator>-</operator><literal type="number">305</literal></expr>,    <expr><literal type="number">63</literal></expr>,    <expr><literal type="number">13</literal></expr>,    <expr><literal type="number">77</literal></expr>,    <expr><literal type="number">73</literal></expr>,    <expr><literal type="number">72</literal></expr>,    <expr><literal type="number">83</literal></expr>,   <expr><literal type="number">660</literal></expr>,   <expr><literal type="number">660</literal></expr>,   <expr><literal type="number">660</literal></expr>,
     <expr><literal type="number">660</literal></expr>,   <expr><literal type="number">660</literal></expr>,   <expr><literal type="number">131</literal></expr>,   <expr><literal type="number">587</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,   <expr><operator>-</operator><literal type="number">26</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><literal type="number">1127</literal></expr>,   <expr><literal type="number">587</literal></expr>,   <expr><operator>-</operator><literal type="number">26</literal></expr>,
     <expr><operator>-</operator><literal type="number">31</literal></expr>,    <expr><literal type="number">48</literal></expr>,  <expr><literal type="number">1193</literal></expr>,   <expr><literal type="number">660</literal></expr>,   <expr><operator>-</operator><literal type="number">10</literal></expr>,   <expr><literal type="number">660</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,   <expr><literal type="number">115</literal></expr>,   <expr><operator>-</operator><literal type="number">40</literal></expr>,    <expr><literal type="number">76</literal></expr>,
      <expr><literal type="number">98</literal></expr>,    <expr><literal type="number">99</literal></expr>,   <expr><literal type="number">660</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><literal type="number">1814</literal></expr>,   <expr><literal type="number">660</literal></expr>,  <expr><literal type="number">1748</literal></expr>,  <expr><literal type="number">1748</literal></expr>,
    <expr><literal type="number">1748</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,   <expr><literal type="number">252</literal></expr>,  <expr><literal type="number">1659</literal></expr>,   <expr><literal type="number">252</literal></expr>,   <expr><literal type="number">660</literal></expr>,  <expr><literal type="number">1665</literal></expr>,   <expr><literal type="number">136</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><literal type="number">1593</literal></expr>,
     <expr><literal type="number">660</literal></expr>,  <expr><literal type="number">1725</literal></expr>,  <expr><literal type="number">1748</literal></expr>,  <expr><literal type="number">1748</literal></expr>,  <expr><literal type="number">1748</literal></expr>,    <expr><literal type="number">30</literal></expr>,    <expr><literal type="number">30</literal></expr>,  <expr><literal type="number">1601</literal></expr>,  <expr><literal type="number">1601</literal></expr>,  <expr><literal type="number">1601</literal></expr>,
    <expr><literal type="number">1731</literal></expr>,  <expr><literal type="number">1259</literal></expr>,   <expr><literal type="number">171</literal></expr>,   <expr><literal type="number">297</literal></expr>,    <expr><operator>-</operator><literal type="number">5</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><literal type="number">1329</literal></expr>,   <expr><literal type="number">660</literal></expr>,   <expr><literal type="number">107</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,
      <expr><literal type="number">26</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><literal type="number">1814</literal></expr>,     <expr><literal type="number">6</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,    <expr><literal type="number">73</literal></expr>,   <expr><literal type="number">131</literal></expr>,   <expr><literal type="number">117</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,
    <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,   <expr><literal type="number">181</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><literal type="number">1527</literal></expr>,  <expr><literal type="number">1395</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,   <expr><operator>-</operator><literal type="number">26</literal></expr>,   <expr><literal type="number">174</literal></expr>,   <expr><literal type="number">587</literal></expr>,
     <expr><literal type="number">146</literal></expr>,   <expr><literal type="number">131</literal></expr>,   <expr><operator>-</operator><literal type="number">26</literal></expr>,   <expr><literal type="number">146</literal></expr>,   <expr><literal type="number">660</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,   <expr><literal type="number">660</literal></expr>,   <expr><literal type="number">166</literal></expr>,  <expr><literal type="number">1527</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,
    <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><literal type="number">1814</literal></expr>,  <expr><literal type="number">1527</literal></expr>,   <expr><literal type="number">120</literal></expr>,  <expr><literal type="number">1527</literal></expr>,   <expr><literal type="number">252</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,   <expr><literal type="number">252</literal></expr>,
    <expr><operator>-</operator><literal type="number">305</literal></expr>,   <expr><literal type="number">660</literal></expr>,   <expr><literal type="number">660</literal></expr>,   <expr><literal type="number">660</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,   <expr><literal type="number">131</literal></expr>,    <expr><literal type="number">41</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,
    <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,   <expr><literal type="number">126</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,   <expr><literal type="number">138</literal></expr>,    <expr><literal type="number">63</literal></expr>,   <expr><literal type="number">142</literal></expr>,   <expr><literal type="number">146</literal></expr>,   <expr><literal type="number">660</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,
     <expr><literal type="number">660</literal></expr>,   <expr><literal type="number">168</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,   <expr><literal type="number">146</literal></expr>,   <expr><literal type="number">168</literal></expr>,  <expr><literal type="number">1527</literal></expr>,  <expr><literal type="number">1527</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,   <expr><literal type="number">660</literal></expr>,
    <expr><literal type="number">1527</literal></expr>,   <expr><literal type="number">137</literal></expr>,    <expr><operator>-</operator><literal type="number">5</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,   <expr><literal type="number">144</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,
     <expr><literal type="number">168</literal></expr>,   <expr><literal type="number">135</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,   <expr><literal type="number">793</literal></expr>,  <expr><literal type="number">1527</literal></expr>,   <expr><literal type="number">660</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,   <expr><literal type="number">168</literal></expr>,   <expr><literal type="number">157</literal></expr>,  <expr><literal type="number">1527</literal></expr>,
    <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,    <expr><literal type="number">34</literal></expr>,     <expr><literal type="number">6</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,   <expr><literal type="number">660</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,
    <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><literal type="number">1527</literal></expr>,   <expr><literal type="number">157</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,   <expr><literal type="number">206</literal></expr>,   <expr><literal type="number">209</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,   <expr><literal type="number">147</literal></expr>,
    <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,   <expr><literal type="number">221</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>yytype_uint8</name></type> <name><name>yydefact</name><index>[]</index></name> <init>=
<expr><block>{
      <expr><literal type="number">23</literal></expr>,    <expr><literal type="number">23</literal></expr>,     <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">17</literal></expr>,     <expr><literal type="number">7</literal></expr>,    <expr><literal type="number">28</literal></expr>,    <expr><literal type="number">23</literal></expr>,    <expr><literal type="number">23</literal></expr>,    <expr><literal type="number">17</literal></expr>,     <expr><literal type="number">1</literal></expr>,
      <expr><literal type="number">21</literal></expr>,    <expr><literal type="number">18</literal></expr>,     <expr><literal type="number">2</literal></expr>,    <expr><literal type="number">22</literal></expr>,    <expr><literal type="number">33</literal></expr>,    <expr><literal type="number">23</literal></expr>,    <expr><literal type="number">17</literal></expr>,    <expr><literal type="number">17</literal></expr>,     <expr><literal type="number">3</literal></expr>,    <expr><literal type="number">19</literal></expr>,
      <expr><literal type="number">20</literal></expr>,    <expr><literal type="number">23</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">89</literal></expr>,     <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">75</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
      <expr><literal type="number">32</literal></expr>,    <expr><literal type="number">29</literal></expr>,     <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">25</literal></expr>,    <expr><literal type="number">35</literal></expr>,    <expr><literal type="number">30</literal></expr>,     <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">31</literal></expr>,    <expr><literal type="number">37</literal></expr>,    <expr><literal type="number">38</literal></expr>,
      <expr><literal type="number">39</literal></expr>,    <expr><literal type="number">40</literal></expr>,     <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">41</literal></expr>,    <expr><literal type="number">17</literal></expr>,     <expr><literal type="number">5</literal></expr>,     <expr><literal type="number">4</literal></expr>,     <expr><literal type="number">8</literal></expr>,   <expr><literal type="number">165</literal></expr>,   <expr><literal type="number">166</literal></expr>,
     <expr><literal type="number">167</literal></expr>,   <expr><literal type="number">194</literal></expr>,   <expr><literal type="number">160</literal></expr>,   <expr><literal type="number">199</literal></expr>,   <expr><literal type="number">200</literal></expr>,   <expr><literal type="number">201</literal></expr>,   <expr><literal type="number">202</literal></expr>,   <expr><literal type="number">203</literal></expr>,   <expr><literal type="number">204</literal></expr>,   <expr><literal type="number">205</literal></expr>,
     <expr><literal type="number">206</literal></expr>,   <expr><literal type="number">207</literal></expr>,   <expr><literal type="number">208</literal></expr>,   <expr><literal type="number">209</literal></expr>,   <expr><literal type="number">210</literal></expr>,   <expr><literal type="number">211</literal></expr>,   <expr><literal type="number">212</literal></expr>,   <expr><literal type="number">213</literal></expr>,   <expr><literal type="number">214</literal></expr>,   <expr><literal type="number">215</literal></expr>,
     <expr><literal type="number">216</literal></expr>,   <expr><literal type="number">217</literal></expr>,   <expr><literal type="number">218</literal></expr>,   <expr><literal type="number">219</literal></expr>,   <expr><literal type="number">169</literal></expr>,   <expr><literal type="number">220</literal></expr>,   <expr><literal type="number">221</literal></expr>,   <expr><literal type="number">222</literal></expr>,   <expr><literal type="number">223</literal></expr>,   <expr><literal type="number">224</literal></expr>,
     <expr><literal type="number">225</literal></expr>,   <expr><literal type="number">170</literal></expr>,   <expr><literal type="number">226</literal></expr>,   <expr><literal type="number">227</literal></expr>,   <expr><literal type="number">228</literal></expr>,   <expr><literal type="number">229</literal></expr>,   <expr><literal type="number">230</literal></expr>,   <expr><literal type="number">231</literal></expr>,   <expr><literal type="number">232</literal></expr>,   <expr><literal type="number">233</literal></expr>,
     <expr><literal type="number">234</literal></expr>,   <expr><literal type="number">168</literal></expr>,   <expr><literal type="number">235</literal></expr>,   <expr><literal type="number">237</literal></expr>,   <expr><literal type="number">236</literal></expr>,   <expr><literal type="number">238</literal></expr>,   <expr><literal type="number">239</literal></expr>,   <expr><literal type="number">240</literal></expr>,   <expr><literal type="number">241</literal></expr>,     <expr><literal type="number">0</literal></expr>,
     <expr><literal type="number">147</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">174</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">164</literal></expr>,   <expr><literal type="number">149</literal></expr>,   <expr><literal type="number">150</literal></expr>,   <expr><literal type="number">142</literal></expr>,   <expr><literal type="number">159</literal></expr>,   <expr><literal type="number">171</literal></expr>,
     <expr><literal type="number">172</literal></expr>,   <expr><literal type="number">162</literal></expr>,   <expr><literal type="number">163</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">186</literal></expr>,   <expr><literal type="number">190</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">191</literal></expr>,    <expr><literal type="number">78</literal></expr>,    <expr><literal type="number">94</literal></expr>,
      <expr><literal type="number">96</literal></expr>,    <expr><literal type="number">98</literal></expr>,    <expr><literal type="number">99</literal></expr>,   <expr><literal type="number">101</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">190</literal></expr>,    <expr><literal type="number">91</literal></expr>,    <expr><literal type="number">84</literal></expr>,    <expr><literal type="number">85</literal></expr>,    <expr><literal type="number">87</literal></expr>,
     <expr><literal type="number">149</literal></expr>,    <expr><literal type="number">79</literal></expr>,    <expr><literal type="number">80</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">26</literal></expr>,    <expr><literal type="number">24</literal></expr>,    <expr><literal type="number">36</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">6</literal></expr>,   <expr><literal type="number">236</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">185</literal></expr>,   <expr><literal type="number">181</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">117</literal></expr>,
     <expr><literal type="number">133</literal></expr>,   <expr><literal type="number">145</literal></expr>,   <expr><literal type="number">148</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">207</literal></expr>,   <expr><literal type="number">208</literal></expr>,   <expr><literal type="number">242</literal></expr>,   <expr><literal type="number">218</literal></expr>,   <expr><literal type="number">243</literal></expr>,
     <expr><literal type="number">225</literal></expr>,   <expr><literal type="number">244</literal></expr>,   <expr><literal type="number">245</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">175</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">195</literal></expr>,   <expr><literal type="number">189</literal></expr>,   <expr><literal type="number">196</literal></expr>,   <expr><literal type="number">197</literal></expr>,
     <expr><literal type="number">198</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">143</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">191</literal></expr>,     <expr><literal type="number">0</literal></expr>,
     <expr><literal type="number">192</literal></expr>,   <expr><literal type="number">109</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">108</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">215</literal></expr>,    <expr><literal type="number">57</literal></expr>,    <expr><literal type="number">58</literal></expr>,    <expr><literal type="number">53</literal></expr>,    <expr><literal type="number">56</literal></expr>,   <expr><literal type="number">215</literal></expr>,    <expr><literal type="number">58</literal></expr>,
      <expr><literal type="number">92</literal></expr>,    <expr><literal type="number">88</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">185</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">182</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">178</literal></expr>,   <expr><literal type="number">161</literal></expr>,   <expr><literal type="number">173</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">119</literal></expr>,   <expr><literal type="number">121</literal></expr>,
     <expr><literal type="number">123</literal></expr>,   <expr><literal type="number">141</literal></expr>,   <expr><literal type="number">137</literal></expr>,   <expr><literal type="number">115</literal></expr>,   <expr><literal type="number">136</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">130</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">131</literal></expr>,   <expr><literal type="number">114</literal></expr>,
       <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">116</literal></expr>,   <expr><literal type="number">118</literal></expr>,   <expr><literal type="number">120</literal></expr>,   <expr><literal type="number">122</literal></expr>,   <expr><literal type="number">124</literal></expr>,   <expr><literal type="number">125</literal></expr>,   <expr><literal type="number">126</literal></expr>,   <expr><literal type="number">127</literal></expr>,   <expr><literal type="number">128</literal></expr>,
     <expr><literal type="number">129</literal></expr>,   <expr><literal type="number">144</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">140</literal></expr>,    <expr><literal type="number">92</literal></expr>,    <expr><literal type="number">13</literal></expr>,    <expr><literal type="number">16</literal></expr>,   <expr><literal type="number">215</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">151</literal></expr>,
       <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">188</literal></expr>,   <expr><literal type="number">100</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">111</literal></expr>,    <expr><literal type="number">95</literal></expr>,   <expr><literal type="number">108</literal></expr>,   <expr><literal type="number">191</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">102</literal></expr>,
      <expr><literal type="number">97</literal></expr>,    <expr><literal type="number">86</literal></expr>,   <expr><literal type="number">140</literal></expr>,    <expr><literal type="number">81</literal></expr>,    <expr><literal type="number">83</literal></expr>,    <expr><literal type="number">82</literal></expr>,    <expr><literal type="number">77</literal></expr>,    <expr><literal type="number">58</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
      <expr><literal type="number">68</literal></expr>,     <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">58</literal></expr>,    <expr><literal type="number">68</literal></expr>,     <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">74</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">184</literal></expr>,   <expr><literal type="number">180</literal></expr>,
     <expr><literal type="number">155</literal></expr>,   <expr><literal type="number">156</literal></expr>,   <expr><literal type="number">157</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">146</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">176</literal></expr>,   <expr><literal type="number">135</literal></expr>,   <expr><literal type="number">132</literal></expr>,   <expr><literal type="number">134</literal></expr>,
     <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">143</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">11</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">153</literal></expr>,   <expr><literal type="number">152</literal></expr>,   <expr><literal type="number">110</literal></expr>,
     <expr><literal type="number">193</literal></expr>,   <expr><literal type="number">113</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">112</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">109</literal></expr>,   <expr><literal type="number">104</literal></expr>,    <expr><literal type="number">68</literal></expr>,     <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">54</literal></expr>,
       <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">70</literal></expr>,    <expr><literal type="number">55</literal></expr>,    <expr><literal type="number">68</literal></expr>,    <expr><literal type="number">70</literal></expr>,    <expr><literal type="number">93</literal></expr>,   <expr><literal type="number">183</literal></expr>,   <expr><literal type="number">179</literal></expr>,   <expr><literal type="number">158</literal></expr>,     <expr><literal type="number">0</literal></expr>,
     <expr><literal type="number">144</literal></expr>,     <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">92</literal></expr>,    <expr><literal type="number">14</literal></expr>,    <expr><literal type="number">15</literal></expr>,   <expr><literal type="number">154</literal></expr>,   <expr><literal type="number">103</literal></expr>,   <expr><literal type="number">106</literal></expr>,    <expr><literal type="number">43</literal></expr>,   <expr><literal type="number">105</literal></expr>,
      <expr><literal type="number">70</literal></expr>,    <expr><literal type="number">59</literal></expr>,    <expr><literal type="number">60</literal></expr>,    <expr><literal type="number">63</literal></expr>,    <expr><literal type="number">69</literal></expr>,     <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">52</literal></expr>,    <expr><literal type="number">70</literal></expr>,    <expr><literal type="number">92</literal></expr>,   <expr><literal type="number">177</literal></expr>,
     <expr><literal type="number">139</literal></expr>,    <expr><literal type="number">12</literal></expr>,    <expr><literal type="number">46</literal></expr>,   <expr><literal type="number">111</literal></expr>,    <expr><literal type="number">51</literal></expr>,     <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">64</literal></expr>,    <expr><literal type="number">65</literal></expr>,    <expr><literal type="number">66</literal></expr>,    <expr><literal type="number">67</literal></expr>,
      <expr><literal type="number">62</literal></expr>,    <expr><literal type="number">71</literal></expr>,    <expr><literal type="number">92</literal></expr>,    <expr><literal type="number">73</literal></expr>,    <expr><literal type="number">50</literal></expr>,    <expr><literal type="number">42</literal></expr>,    <expr><literal type="number">44</literal></expr>,     <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">47</literal></expr>,     <expr><literal type="number">0</literal></expr>,
      <expr><literal type="number">61</literal></expr>,    <expr><literal type="number">72</literal></expr>,    <expr><literal type="number">49</literal></expr>,   <expr><literal type="number">107</literal></expr>,    <expr><literal type="number">48</literal></expr>,    <expr><literal type="number">45</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* YYPGOTO[NTERM-NUM].  */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>yytype_int16</name></type> <name><name>yypgoto</name><index>[]</index></name> <init>=
<expr><block>{
    <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,    <expr><literal type="number">28</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,   <expr><operator>-</operator><literal type="number">87</literal></expr>,   <expr><operator>-</operator><literal type="number">86</literal></expr>,    <expr><literal type="number">16</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,
    <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,   <expr><literal type="number">193</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">153</literal></expr>,  <expr><operator>-</operator><literal type="number">152</literal></expr>,
    <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">127</literal></expr>,   <expr><operator>-</operator><literal type="number">58</literal></expr>,  <expr><operator>-</operator><literal type="number">203</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">130</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">270</literal></expr>,  <expr><operator>-</operator><literal type="number">304</literal></expr>,
    <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,    <expr><literal type="number">27</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,
      <expr><literal type="number">32</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">262</literal></expr>,   <expr><literal type="number">103</literal></expr>,   <expr><operator>-</operator><literal type="number">24</literal></expr>,  <expr><operator>-</operator><literal type="number">136</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,   <expr><literal type="number">121</literal></expr>,
      <expr><literal type="number">39</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,   <expr><operator>-</operator><literal type="number">30</literal></expr>,   <expr><operator>-</operator><literal type="number">80</literal></expr>,  <expr><operator>-</operator><literal type="number">114</literal></expr>,   <expr><operator>-</operator><literal type="number">22</literal></expr>,   <expr><operator>-</operator><literal type="number">61</literal></expr>,  <expr><operator>-</operator><literal type="number">137</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,
     <expr><literal type="number">229</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">271</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,
     <expr><literal type="number">109</literal></expr>,  <expr><operator>-</operator><literal type="number">131</literal></expr>,    <expr><literal type="number">35</literal></expr>,   <expr><literal type="number">110</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,  <expr><operator>-</operator><literal type="number">218</literal></expr>,    <expr><operator>-</operator><literal type="number">8</literal></expr>,   <expr><operator>-</operator><literal type="number">20</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,    <expr><literal type="number">58</literal></expr>,
     <expr><operator>-</operator><literal type="number">12</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>,   <expr><operator>-</operator><literal type="number">94</literal></expr>,  <expr><operator>-</operator><literal type="number">305</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* YYDEFGOTO[NTERM-NUM].  */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>yytype_int16</name></type> <name><name>yydefgoto</name><index>[]</index></name> <init>=
<expr><block>{
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">3</literal></expr>,    <expr><literal type="number">30</literal></expr>,   <expr><literal type="number">264</literal></expr>,   <expr><literal type="number">265</literal></expr>,    <expr><literal type="number">12</literal></expr>,    <expr><literal type="number">21</literal></expr>,     <expr><literal type="number">4</literal></expr>,     <expr><literal type="number">5</literal></expr>,
      <expr><literal type="number">13</literal></expr>,    <expr><literal type="number">14</literal></expr>,    <expr><literal type="number">31</literal></expr>,    <expr><literal type="number">32</literal></expr>,    <expr><literal type="number">33</literal></expr>,    <expr><literal type="number">34</literal></expr>,   <expr><literal type="number">363</literal></expr>,   <expr><literal type="number">375</literal></expr>,   <expr><literal type="number">376</literal></expr>,   <expr><literal type="number">377</literal></expr>,
     <expr><literal type="number">378</literal></expr>,   <expr><literal type="number">137</literal></expr>,   <expr><literal type="number">215</literal></expr>,   <expr><literal type="number">216</literal></expr>,   <expr><literal type="number">290</literal></expr>,   <expr><literal type="number">351</literal></expr>,   <expr><literal type="number">352</literal></expr>,   <expr><literal type="number">370</literal></expr>,   <expr><literal type="number">331</literal></expr>,   <expr><literal type="number">356</literal></expr>,
     <expr><literal type="number">138</literal></expr>,    <expr><literal type="number">35</literal></expr>,    <expr><literal type="number">36</literal></expr>,    <expr><literal type="number">37</literal></expr>,    <expr><literal type="number">38</literal></expr>,    <expr><literal type="number">39</literal></expr>,   <expr><literal type="number">131</literal></expr>,   <expr><literal type="number">132</literal></expr>,    <expr><literal type="number">40</literal></expr>,   <expr><literal type="number">127</literal></expr>,
     <expr><literal type="number">128</literal></expr>,    <expr><literal type="number">41</literal></expr>,    <expr><literal type="number">42</literal></expr>,    <expr><literal type="number">43</literal></expr>,   <expr><literal type="number">295</literal></expr>,   <expr><literal type="number">118</literal></expr>,   <expr><literal type="number">119</literal></expr>,   <expr><literal type="number">120</literal></expr>,   <expr><literal type="number">121</literal></expr>,   <expr><literal type="number">122</literal></expr>,
     <expr><literal type="number">123</literal></expr>,   <expr><literal type="number">205</literal></expr>,   <expr><literal type="number">278</literal></expr>,   <expr><literal type="number">274</literal></expr>,   <expr><literal type="number">322</literal></expr>,   <expr><literal type="number">151</literal></expr>,   <expr><literal type="number">262</literal></expr>,   <expr><literal type="number">152</literal></expr>,   <expr><literal type="number">153</literal></expr>,   <expr><literal type="number">104</literal></expr>,
     <expr><literal type="number">130</literal></expr>,   <expr><literal type="number">106</literal></expr>,   <expr><literal type="number">230</literal></expr>,   <expr><literal type="number">107</literal></expr>,   <expr><literal type="number">108</literal></expr>,   <expr><literal type="number">109</literal></expr>,   <expr><literal type="number">163</literal></expr>,   <expr><literal type="number">164</literal></expr>,   <expr><literal type="number">110</literal></expr>,   <expr><literal type="number">111</literal></expr>,
     <expr><literal type="number">145</literal></expr>,   <expr><literal type="number">146</literal></expr>,   <expr><literal type="number">227</literal></expr>,   <expr><literal type="number">112</literal></expr>,   <expr><literal type="number">113</literal></expr>,   <expr><literal type="number">165</literal></expr>,   <expr><literal type="number">114</literal></expr>,   <expr><literal type="number">201</literal></expr>,   <expr><literal type="number">319</literal></expr>,   <expr><literal type="number">115</literal></expr>,
     <expr><literal type="number">167</literal></expr>,   <expr><literal type="number">168</literal></expr>,   <expr><literal type="number">116</literal></expr>,   <expr><literal type="number">170</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>yytype_int16</name></type> <name><name>yytable</name><index>[]</index></name> <init>=
<expr><block>{
     <expr><literal type="number">103</literal></expr>,   <expr><literal type="number">126</literal></expr>,   <expr><literal type="number">314</literal></expr>,   <expr><literal type="number">323</literal></expr>,   <expr><literal type="number">221</literal></expr>,   <expr><literal type="number">129</literal></expr>,   <expr><literal type="number">133</literal></expr>,   <expr><literal type="number">134</literal></expr>,   <expr><literal type="number">169</literal></expr>,   <expr><literal type="number">219</literal></expr>,
     <expr><literal type="number">228</literal></expr>,   <expr><operator>-</operator><literal type="number">27</literal></expr>,   <expr><literal type="number">229</literal></expr>,   <expr><literal type="number">321</literal></expr>,   <expr><literal type="number">226</literal></expr>,   <expr><literal type="number">124</literal></expr>,   <expr><literal type="number">293</literal></expr>,   <expr><literal type="number">124</literal></expr>,   <expr><literal type="number">305</literal></expr>,    <expr><literal type="number">51</literal></expr>,
       <expr><literal type="number">6</literal></expr>,   <expr><literal type="number">288</literal></expr>,   <expr><literal type="number">225</literal></expr>,   <expr><literal type="number">334</literal></expr>,    <expr><literal type="number">18</literal></expr>,    <expr><literal type="number">51</literal></expr>,    <expr><literal type="number">10</literal></expr>,     <expr><literal type="number">1</literal></expr>,   <expr><literal type="number">294</literal></expr>,     <expr><literal type="number">8</literal></expr>,
     <expr><literal type="number">358</literal></expr>,     <expr><literal type="number">9</literal></expr>,    <expr><literal type="number">45</literal></expr>,    <expr><literal type="number">46</literal></expr>,    <expr><literal type="number">16</literal></expr>,    <expr><literal type="number">17</literal></expr>,   <expr><literal type="number">300</literal></expr>,   <expr><literal type="number">374</literal></expr>,   <expr><literal type="number">232</literal></expr>,   <expr><literal type="number">144</literal></expr>,
      <expr><literal type="number">19</literal></expr>,    <expr><literal type="number">15</literal></expr>,   <expr><literal type="number">174</literal></expr>,    <expr><literal type="number">44</literal></expr>,   <expr><literal type="number">175</literal></expr>,   <expr><operator>-</operator><literal type="number">49</literal></expr>,   <expr><literal type="number">364</literal></expr>,   <expr><literal type="number">202</literal></expr>,   <expr><literal type="number">223</literal></expr>,    <expr><literal type="number">47</literal></expr>,
      <expr><literal type="number">11</literal></expr>,   <expr><literal type="number">140</literal></expr>,   <expr><literal type="number">289</literal></expr>,   <expr><literal type="number">372</literal></expr>,   <expr><literal type="number">294</literal></expr>,   <expr><literal type="number">177</literal></expr>,    <expr><literal type="number">20</literal></expr>,   <expr><literal type="number">350</literal></expr>,   <expr><literal type="number">149</literal></expr>,   <expr><literal type="number">270</literal></expr>,
     <expr><literal type="number">142</literal></expr>,     <expr><literal type="number">7</literal></expr>,   <expr><literal type="number">203</literal></expr>,   <expr><literal type="number">357</literal></expr>,   <expr><literal type="number">178</literal></expr>,   <expr><literal type="number">204</literal></expr>,   <expr><operator>-</operator><literal type="number">27</literal></expr>,   <expr><literal type="number">135</literal></expr>,   <expr><literal type="number">179</literal></expr>,   <expr><literal type="number">180</literal></expr>,
     <expr><literal type="number">280</literal></expr>,   <expr><literal type="number">141</literal></expr>,   <expr><literal type="number">203</literal></expr>,   <expr><literal type="number">313</literal></expr>,   <expr><literal type="number">272</literal></expr>,   <expr><literal type="number">204</literal></expr>,   <expr><literal type="number">147</literal></expr>,   <expr><literal type="number">150</literal></expr>,   <expr><literal type="number">136</literal></expr>,   <expr><literal type="number">154</literal></expr>,
     <expr><literal type="number">361</literal></expr>,   <expr><literal type="number">125</literal></expr>,   <expr><literal type="number">182</literal></expr>,   <expr><literal type="number">125</literal></expr>,   <expr><literal type="number">327</literal></expr>,   <expr><literal type="number">338</literal></expr>,   <expr><literal type="number">287</literal></expr>,   <expr><literal type="number">102</literal></expr>,   <expr><literal type="number">117</literal></expr>,   <expr><literal type="number">333</literal></expr>,
     <expr><operator>-</operator><literal type="number">27</literal></expr>,   <expr><literal type="number">292</literal></expr>,   <expr><literal type="number">323</literal></expr>,   <expr><literal type="number">226</literal></expr>,   <expr><literal type="number">198</literal></expr>,   <expr><literal type="number">148</literal></expr>,   <expr><literal type="number">373</literal></expr>,   <expr><literal type="number">196</literal></expr>,   <expr><literal type="number">189</literal></expr>,   <expr><literal type="number">190</literal></expr>,
     <expr><literal type="number">191</literal></expr>,   <expr><literal type="number">192</literal></expr>,   <expr><literal type="number">318</literal></expr>,   <expr><literal type="number">193</literal></expr>,   <expr><literal type="number">232</literal></expr>,   <expr><literal type="number">247</literal></expr>,   <expr><literal type="number">248</literal></expr>,   <expr><literal type="number">208</literal></expr>,  <expr><operator>-</operator><literal type="number">187</literal></expr>,   <expr><literal type="number">200</literal></expr>,
     <expr><literal type="number">381</literal></expr>,    <expr><literal type="number">23</literal></expr>,   <expr><operator>-</operator><literal type="number">90</literal></expr>,   <expr><literal type="number">217</literal></expr>,   <expr><literal type="number">217</literal></expr>,    <expr><literal type="number">24</literal></expr>,   <expr><literal type="number">174</literal></expr>,   <expr><literal type="number">345</literal></expr>,   <expr><literal type="number">175</literal></expr>,   <expr><literal type="number">232</literal></expr>,
     <expr><literal type="number">197</literal></expr>,   <expr><literal type="number">222</literal></expr>,   <expr><literal type="number">206</literal></expr>,   <expr><literal type="number">202</literal></expr>,   <expr><literal type="number">207</literal></expr>,   <expr><literal type="number">209</literal></expr>,   <expr><literal type="number">232</literal></expr>,    <expr><literal type="number">25</literal></expr>,   <expr><literal type="number">233</literal></expr>,   <expr><literal type="number">177</literal></expr>,
     <expr><literal type="number">316</literal></expr>,   <expr><literal type="number">235</literal></expr>,   <expr><literal type="number">124</literal></expr>,    <expr><literal type="number">27</literal></expr>,   <expr><operator>-</operator><literal type="number">34</literal></expr>,    <expr><literal type="number">28</literal></expr>,   <expr><literal type="number">237</literal></expr>,    <expr><literal type="number">51</literal></expr>,   <expr><literal type="number">178</literal></expr>,   <expr><literal type="number">236</literal></expr>,
     <expr><literal type="number">245</literal></expr>,   <expr><literal type="number">250</literal></expr>,   <expr><literal type="number">169</literal></expr>,   <expr><literal type="number">273</literal></expr>,   <expr><literal type="number">276</literal></expr>,   <expr><operator>-</operator><literal type="number">34</literal></expr>,   <expr><literal type="number">277</literal></expr>,   <expr><literal type="number">198</literal></expr>,   <expr><literal type="number">299</literal></expr>,   <expr><literal type="number">238</literal></expr>,
     <expr><literal type="number">239</literal></expr>,   <expr><literal type="number">240</literal></expr>,   <expr><literal type="number">301</literal></expr>,   <expr><literal type="number">242</literal></expr>,   <expr><literal type="number">243</literal></expr>,   <expr><literal type="number">244</literal></expr>,   <expr><literal type="number">182</literal></expr>,   <expr><literal type="number">246</literal></expr>,   <expr><literal type="number">117</literal></expr>,   <expr><literal type="number">249</literal></expr>,
     <expr><literal type="number">166</literal></expr>,   <expr><literal type="number">251</literal></expr>,   <expr><literal type="number">252</literal></expr>,   <expr><literal type="number">253</literal></expr>,   <expr><literal type="number">254</literal></expr>,   <expr><literal type="number">255</literal></expr>,   <expr><literal type="number">256</literal></expr>,   <expr><literal type="number">257</literal></expr>,   <expr><literal type="number">258</literal></expr>,   <expr><literal type="number">259</literal></expr>,
     <expr><literal type="number">260</literal></expr>,   <expr><literal type="number">261</literal></expr>,   <expr><literal type="number">263</literal></expr>,   <expr><literal type="number">266</literal></expr>,   <expr><literal type="number">302</literal></expr>,   <expr><literal type="number">125</literal></expr>,   <expr><literal type="number">303</literal></expr>,   <expr><literal type="number">193</literal></expr>,   <expr><literal type="number">275</literal></expr>,   <expr><literal type="number">169</literal></expr>,
     <expr><literal type="number">308</literal></expr>,   <expr><literal type="number">208</literal></expr>,   <expr><literal type="number">311</literal></expr>,   <expr><literal type="number">317</literal></expr>,   <expr><literal type="number">326</literal></expr>,   <expr><literal type="number">129</literal></expr>,   <expr><literal type="number">282</literal></expr>,   <expr><literal type="number">133</literal></expr>,   <expr><literal type="number">284</literal></expr>,   <expr><literal type="number">285</literal></expr>,
     <expr><literal type="number">200</literal></expr>,   <expr><literal type="number">217</literal></expr>,    <expr><operator>-</operator><literal type="number">9</literal></expr>,   <expr><literal type="number">174</literal></expr>,   <expr><literal type="number">124</literal></expr>,   <expr><literal type="number">328</literal></expr>,   <expr><literal type="number">217</literal></expr>,   <expr><literal type="number">330</literal></expr>,   <expr><literal type="number">125</literal></expr>,   <expr><literal type="number">337</literal></expr>,
     <expr><literal type="number">339</literal></expr>,   <expr><literal type="number">222</literal></expr>,   <expr><literal type="number">346</literal></expr>,   <expr><literal type="number">298</literal></expr>,   <expr><literal type="number">286</literal></expr>,   <expr><literal type="number">347</literal></expr>,   <expr><literal type="number">125</literal></expr>,   <expr><literal type="number">349</literal></expr>,   <expr><literal type="number">355</literal></expr>,   <expr><literal type="number">169</literal></expr>,
     <expr><literal type="number">304</literal></expr>,   <expr><literal type="number">360</literal></expr>,   <expr><literal type="number">362</literal></expr>,   <expr><literal type="number">365</literal></expr>,    <expr><operator>-</operator><literal type="number">9</literal></expr>,   <expr><literal type="number">306</literal></expr>,   <expr><literal type="number">294</literal></expr>,   <expr><operator>-</operator><literal type="number">48</literal></expr>,    <expr><operator>-</operator><literal type="number">9</literal></expr>,    <expr><operator>-</operator><literal type="number">9</literal></expr>,
     <expr><literal type="number">382</literal></expr>,   <expr><literal type="number">383</literal></expr>,    <expr><operator>-</operator><literal type="number">9</literal></expr>,   <expr><literal type="number">307</literal></expr>,   <expr><literal type="number">374</literal></expr>,   <expr><literal type="number">342</literal></expr>,   <expr><literal type="number">139</literal></expr>,   <expr><literal type="number">343</literal></expr>,   <expr><literal type="number">309</literal></expr>,   <expr><literal type="number">384</literal></expr>,
     <expr><literal type="number">385</literal></expr>,   <expr><literal type="number">329</literal></expr>,   <expr><literal type="number">241</literal></expr>,    <expr><operator>-</operator><literal type="number">9</literal></expr>,    <expr><operator>-</operator><literal type="number">9</literal></expr>,   <expr><literal type="number">380</literal></expr>,   <expr><literal type="number">283</literal></expr>,    <expr><operator>-</operator><literal type="number">9</literal></expr>,   <expr><literal type="number">199</literal></expr>,   <expr><literal type="number">281</literal></expr>,
      <expr><operator>-</operator><literal type="number">9</literal></expr>,    <expr><operator>-</operator><literal type="number">9</literal></expr>,    <expr><operator>-</operator><literal type="number">9</literal></expr>,   <expr><literal type="number">220</literal></expr>,   <expr><literal type="number">279</literal></expr>,   <expr><literal type="number">348</literal></expr>,   <expr><literal type="number">324</literal></expr>,    <expr><operator>-</operator><literal type="number">9</literal></expr>,    <expr><operator>-</operator><literal type="number">9</literal></expr>,   <expr><literal type="number">379</literal></expr>,
     <expr><literal type="number">341</literal></expr>,   <expr><literal type="number">105</literal></expr>,    <expr><operator>-</operator><literal type="number">9</literal></expr>,   <expr><literal type="number">224</literal></expr>,   <expr><literal type="number">195</literal></expr>,   <expr><literal type="number">271</literal></expr>,   <expr><literal type="number">125</literal></expr>,   <expr><literal type="number">325</literal></expr>,   <expr><literal type="number">231</literal></expr>,   <expr><literal type="number">297</literal></expr>,
     <expr><literal type="number">125</literal></expr>,   <expr><literal type="number">320</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">174</literal></expr>,     <expr><literal type="number">0</literal></expr>,  <expr><operator>-</operator><literal type="number">188</literal></expr>,   <expr><literal type="number">217</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">200</literal></expr>,
     <expr><literal type="number">125</literal></expr>,    <expr><operator>-</operator><literal type="number">9</literal></expr>,   <expr><literal type="number">335</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">336</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,  <expr><operator>-</operator><literal type="number">188</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">332</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,  <expr><operator>-</operator><literal type="number">188</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">340</literal></expr>,
     <expr><literal type="number">266</literal></expr>,   <expr><literal type="number">266</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">166</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><operator>-</operator><literal type="number">10</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,  <expr><operator>-</operator><literal type="number">188</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">353</literal></expr>,   <expr><literal type="number">344</literal></expr>,   <expr><literal type="number">354</literal></expr>,   <expr><literal type="number">174</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">359</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><operator>-</operator><literal type="number">10</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><operator>-</operator><literal type="number">10</literal></expr>,   <expr><operator>-</operator><literal type="number">10</literal></expr>,   <expr><literal type="number">193</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><operator>-</operator><literal type="number">10</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">208</literal></expr>,
       <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">166</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">371</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">125</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><operator>-</operator><literal type="number">10</literal></expr>,   <expr><operator>-</operator><literal type="number">10</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><operator>-</operator><literal type="number">10</literal></expr>,   <expr><literal type="number">353</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><operator>-</operator><literal type="number">10</literal></expr>,   <expr><operator>-</operator><literal type="number">10</literal></expr>,   <expr><operator>-</operator><literal type="number">10</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">125</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><operator>-</operator><literal type="number">10</literal></expr>,   <expr><operator>-</operator><literal type="number">10</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><operator>-</operator><literal type="number">10</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">312</literal></expr>,
       <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">166</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">48</literal></expr>,    <expr><literal type="number">49</literal></expr>,    <expr><literal type="number">50</literal></expr>,    <expr><literal type="number">51</literal></expr>,    <expr><literal type="number">52</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">125</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><operator>-</operator><literal type="number">10</literal></expr>,    <expr><literal type="number">53</literal></expr>,    <expr><literal type="number">54</literal></expr>,    <expr><literal type="number">55</literal></expr>,
      <expr><literal type="number">56</literal></expr>,    <expr><literal type="number">57</literal></expr>,    <expr><literal type="number">58</literal></expr>,    <expr><literal type="number">59</literal></expr>,    <expr><literal type="number">60</literal></expr>,    <expr><literal type="number">61</literal></expr>,    <expr><literal type="number">62</literal></expr>,    <expr><literal type="number">63</literal></expr>,    <expr><literal type="number">64</literal></expr>,    <expr><literal type="number">65</literal></expr>,
      <expr><literal type="number">66</literal></expr>,    <expr><literal type="number">67</literal></expr>,    <expr><literal type="number">68</literal></expr>,   <expr><literal type="number">267</literal></expr>,    <expr><literal type="number">70</literal></expr>,     <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">71</literal></expr>,    <expr><literal type="number">72</literal></expr>,    <expr><literal type="number">73</literal></expr>,    <expr><literal type="number">74</literal></expr>,
      <expr><literal type="number">75</literal></expr>,    <expr><literal type="number">76</literal></expr>,    <expr><literal type="number">77</literal></expr>,    <expr><literal type="number">78</literal></expr>,    <expr><literal type="number">79</literal></expr>,    <expr><literal type="number">80</literal></expr>,    <expr><literal type="number">81</literal></expr>,    <expr><literal type="number">82</literal></expr>,    <expr><literal type="number">83</literal></expr>,    <expr><literal type="number">84</literal></expr>,
      <expr><literal type="number">85</literal></expr>,    <expr><literal type="number">86</literal></expr>,    <expr><literal type="number">87</literal></expr>,    <expr><literal type="number">88</literal></expr>,    <expr><literal type="number">89</literal></expr>,    <expr><literal type="number">90</literal></expr>,    <expr><literal type="number">91</literal></expr>,    <expr><literal type="number">92</literal></expr>,     <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">93</literal></expr>,
      <expr><literal type="number">94</literal></expr>,    <expr><literal type="number">95</literal></expr>,    <expr><literal type="number">96</literal></expr>,    <expr><literal type="number">97</literal></expr>,    <expr><literal type="number">98</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">99</literal></expr>,
     <expr><literal type="number">268</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">100</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">101</literal></expr>,   <expr><literal type="number">269</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">102</literal></expr>,    <expr><literal type="number">48</literal></expr>,    <expr><literal type="number">49</literal></expr>,    <expr><literal type="number">50</literal></expr>,    <expr><literal type="number">51</literal></expr>,    <expr><literal type="number">52</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">53</literal></expr>,    <expr><literal type="number">54</literal></expr>,    <expr><literal type="number">55</literal></expr>,    <expr><literal type="number">56</literal></expr>,
      <expr><literal type="number">57</literal></expr>,    <expr><literal type="number">58</literal></expr>,    <expr><literal type="number">59</literal></expr>,    <expr><literal type="number">60</literal></expr>,    <expr><literal type="number">61</literal></expr>,    <expr><literal type="number">62</literal></expr>,    <expr><literal type="number">63</literal></expr>,    <expr><literal type="number">64</literal></expr>,    <expr><literal type="number">65</literal></expr>,    <expr><literal type="number">66</literal></expr>,
      <expr><literal type="number">67</literal></expr>,    <expr><literal type="number">68</literal></expr>,   <expr><literal type="number">213</literal></expr>,    <expr><literal type="number">70</literal></expr>,     <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">71</literal></expr>,    <expr><literal type="number">72</literal></expr>,    <expr><literal type="number">73</literal></expr>,    <expr><literal type="number">74</literal></expr>,    <expr><literal type="number">75</literal></expr>,
      <expr><literal type="number">76</literal></expr>,    <expr><literal type="number">77</literal></expr>,    <expr><literal type="number">78</literal></expr>,    <expr><literal type="number">79</literal></expr>,    <expr><literal type="number">80</literal></expr>,    <expr><literal type="number">81</literal></expr>,    <expr><literal type="number">82</literal></expr>,    <expr><literal type="number">83</literal></expr>,    <expr><literal type="number">84</literal></expr>,    <expr><literal type="number">85</literal></expr>,
      <expr><literal type="number">86</literal></expr>,    <expr><literal type="number">87</literal></expr>,    <expr><literal type="number">88</literal></expr>,    <expr><literal type="number">89</literal></expr>,    <expr><literal type="number">90</literal></expr>,    <expr><literal type="number">91</literal></expr>,    <expr><literal type="number">92</literal></expr>,     <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">93</literal></expr>,    <expr><literal type="number">94</literal></expr>,
      <expr><literal type="number">95</literal></expr>,    <expr><literal type="number">96</literal></expr>,    <expr><literal type="number">97</literal></expr>,    <expr><literal type="number">98</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">99</literal></expr>,   <expr><literal type="number">214</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">100</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">101</literal></expr>,    <expr><literal type="number">48</literal></expr>,    <expr><literal type="number">49</literal></expr>,    <expr><literal type="number">50</literal></expr>,
      <expr><literal type="number">51</literal></expr>,    <expr><literal type="number">52</literal></expr>,   <expr><literal type="number">102</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">53</literal></expr>,
      <expr><literal type="number">54</literal></expr>,    <expr><literal type="number">55</literal></expr>,    <expr><literal type="number">56</literal></expr>,    <expr><literal type="number">57</literal></expr>,    <expr><literal type="number">58</literal></expr>,    <expr><literal type="number">59</literal></expr>,    <expr><literal type="number">60</literal></expr>,    <expr><literal type="number">61</literal></expr>,    <expr><literal type="number">62</literal></expr>,    <expr><literal type="number">63</literal></expr>,
      <expr><literal type="number">64</literal></expr>,    <expr><literal type="number">65</literal></expr>,    <expr><literal type="number">66</literal></expr>,    <expr><literal type="number">67</literal></expr>,    <expr><literal type="number">68</literal></expr>,   <expr><literal type="number">218</literal></expr>,    <expr><literal type="number">70</literal></expr>,     <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">71</literal></expr>,    <expr><literal type="number">72</literal></expr>,
      <expr><literal type="number">73</literal></expr>,    <expr><literal type="number">74</literal></expr>,    <expr><literal type="number">75</literal></expr>,    <expr><literal type="number">76</literal></expr>,    <expr><literal type="number">77</literal></expr>,    <expr><literal type="number">78</literal></expr>,    <expr><literal type="number">79</literal></expr>,    <expr><literal type="number">80</literal></expr>,    <expr><literal type="number">81</literal></expr>,    <expr><literal type="number">82</literal></expr>,
      <expr><literal type="number">83</literal></expr>,    <expr><literal type="number">84</literal></expr>,    <expr><literal type="number">85</literal></expr>,    <expr><literal type="number">86</literal></expr>,    <expr><literal type="number">87</literal></expr>,    <expr><literal type="number">88</literal></expr>,    <expr><literal type="number">89</literal></expr>,    <expr><literal type="number">90</literal></expr>,    <expr><literal type="number">91</literal></expr>,    <expr><literal type="number">92</literal></expr>,
       <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">93</literal></expr>,    <expr><literal type="number">94</literal></expr>,    <expr><literal type="number">95</literal></expr>,    <expr><literal type="number">96</literal></expr>,    <expr><literal type="number">97</literal></expr>,    <expr><literal type="number">98</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">99</literal></expr>,   <expr><literal type="number">214</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">100</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">101</literal></expr>,
      <expr><literal type="number">48</literal></expr>,    <expr><literal type="number">49</literal></expr>,    <expr><literal type="number">50</literal></expr>,    <expr><literal type="number">51</literal></expr>,    <expr><literal type="number">52</literal></expr>,   <expr><literal type="number">102</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">53</literal></expr>,    <expr><literal type="number">54</literal></expr>,    <expr><literal type="number">55</literal></expr>,    <expr><literal type="number">56</literal></expr>,    <expr><literal type="number">57</literal></expr>,    <expr><literal type="number">58</literal></expr>,    <expr><literal type="number">59</literal></expr>,    <expr><literal type="number">60</literal></expr>,
      <expr><literal type="number">61</literal></expr>,    <expr><literal type="number">62</literal></expr>,    <expr><literal type="number">63</literal></expr>,    <expr><literal type="number">64</literal></expr>,    <expr><literal type="number">65</literal></expr>,    <expr><literal type="number">66</literal></expr>,    <expr><literal type="number">67</literal></expr>,    <expr><literal type="number">68</literal></expr>,    <expr><literal type="number">69</literal></expr>,    <expr><literal type="number">70</literal></expr>,
       <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">71</literal></expr>,    <expr><literal type="number">72</literal></expr>,    <expr><literal type="number">73</literal></expr>,    <expr><literal type="number">74</literal></expr>,    <expr><literal type="number">75</literal></expr>,    <expr><literal type="number">76</literal></expr>,    <expr><literal type="number">77</literal></expr>,    <expr><literal type="number">78</literal></expr>,    <expr><literal type="number">79</literal></expr>,
      <expr><literal type="number">80</literal></expr>,    <expr><literal type="number">81</literal></expr>,    <expr><literal type="number">82</literal></expr>,    <expr><literal type="number">83</literal></expr>,    <expr><literal type="number">84</literal></expr>,    <expr><literal type="number">85</literal></expr>,    <expr><literal type="number">86</literal></expr>,    <expr><literal type="number">87</literal></expr>,    <expr><literal type="number">88</literal></expr>,    <expr><literal type="number">89</literal></expr>,
      <expr><literal type="number">90</literal></expr>,    <expr><literal type="number">91</literal></expr>,    <expr><literal type="number">92</literal></expr>,     <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">93</literal></expr>,    <expr><literal type="number">94</literal></expr>,    <expr><literal type="number">95</literal></expr>,    <expr><literal type="number">96</literal></expr>,    <expr><literal type="number">97</literal></expr>,    <expr><literal type="number">98</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">99</literal></expr>,   <expr><literal type="number">214</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
     <expr><literal type="number">100</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">101</literal></expr>,    <expr><literal type="number">48</literal></expr>,    <expr><literal type="number">49</literal></expr>,    <expr><literal type="number">50</literal></expr>,    <expr><literal type="number">51</literal></expr>,    <expr><literal type="number">52</literal></expr>,   <expr><literal type="number">102</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">53</literal></expr>,    <expr><literal type="number">54</literal></expr>,    <expr><literal type="number">55</literal></expr>,    <expr><literal type="number">56</literal></expr>,    <expr><literal type="number">57</literal></expr>,
      <expr><literal type="number">58</literal></expr>,    <expr><literal type="number">59</literal></expr>,    <expr><literal type="number">60</literal></expr>,    <expr><literal type="number">61</literal></expr>,    <expr><literal type="number">62</literal></expr>,    <expr><literal type="number">63</literal></expr>,    <expr><literal type="number">64</literal></expr>,    <expr><literal type="number">65</literal></expr>,    <expr><literal type="number">66</literal></expr>,    <expr><literal type="number">67</literal></expr>,
      <expr><literal type="number">68</literal></expr>,    <expr><literal type="number">69</literal></expr>,    <expr><literal type="number">70</literal></expr>,     <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">71</literal></expr>,    <expr><literal type="number">72</literal></expr>,    <expr><literal type="number">73</literal></expr>,    <expr><literal type="number">74</literal></expr>,    <expr><literal type="number">75</literal></expr>,    <expr><literal type="number">76</literal></expr>,
      <expr><literal type="number">77</literal></expr>,    <expr><literal type="number">78</literal></expr>,    <expr><literal type="number">79</literal></expr>,    <expr><literal type="number">80</literal></expr>,    <expr><literal type="number">81</literal></expr>,    <expr><literal type="number">82</literal></expr>,    <expr><literal type="number">83</literal></expr>,    <expr><literal type="number">84</literal></expr>,    <expr><literal type="number">85</literal></expr>,    <expr><literal type="number">86</literal></expr>,
      <expr><literal type="number">87</literal></expr>,    <expr><literal type="number">88</literal></expr>,    <expr><literal type="number">89</literal></expr>,    <expr><literal type="number">90</literal></expr>,    <expr><literal type="number">91</literal></expr>,    <expr><literal type="number">92</literal></expr>,     <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">93</literal></expr>,    <expr><literal type="number">94</literal></expr>,    <expr><literal type="number">95</literal></expr>,
      <expr><literal type="number">96</literal></expr>,    <expr><literal type="number">97</literal></expr>,    <expr><literal type="number">98</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">99</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">100</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">101</literal></expr>,    <expr><literal type="number">48</literal></expr>,    <expr><literal type="number">49</literal></expr>,    <expr><literal type="number">50</literal></expr>,    <expr><literal type="number">51</literal></expr>,
      <expr><literal type="number">52</literal></expr>,   <expr><literal type="number">102</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">53</literal></expr>,    <expr><literal type="number">54</literal></expr>,
      <expr><literal type="number">55</literal></expr>,    <expr><literal type="number">56</literal></expr>,    <expr><literal type="number">57</literal></expr>,    <expr><literal type="number">58</literal></expr>,    <expr><literal type="number">59</literal></expr>,    <expr><literal type="number">60</literal></expr>,    <expr><literal type="number">61</literal></expr>,    <expr><literal type="number">62</literal></expr>,    <expr><literal type="number">63</literal></expr>,    <expr><literal type="number">64</literal></expr>,
      <expr><literal type="number">65</literal></expr>,    <expr><literal type="number">66</literal></expr>,    <expr><literal type="number">67</literal></expr>,    <expr><literal type="number">68</literal></expr>,    <expr><literal type="number">69</literal></expr>,    <expr><literal type="number">70</literal></expr>,     <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">71</literal></expr>,    <expr><literal type="number">72</literal></expr>,    <expr><literal type="number">73</literal></expr>,
      <expr><literal type="number">74</literal></expr>,    <expr><literal type="number">75</literal></expr>,    <expr><literal type="number">76</literal></expr>,    <expr><literal type="number">77</literal></expr>,    <expr><literal type="number">78</literal></expr>,    <expr><literal type="number">79</literal></expr>,    <expr><literal type="number">80</literal></expr>,    <expr><literal type="number">81</literal></expr>,    <expr><literal type="number">82</literal></expr>,    <expr><literal type="number">83</literal></expr>,
      <expr><literal type="number">84</literal></expr>,    <expr><literal type="number">85</literal></expr>,    <expr><literal type="number">86</literal></expr>,    <expr><literal type="number">87</literal></expr>,    <expr><literal type="number">88</literal></expr>,    <expr><literal type="number">89</literal></expr>,    <expr><literal type="number">90</literal></expr>,    <expr><literal type="number">91</literal></expr>,    <expr><literal type="number">92</literal></expr>,     <expr><literal type="number">0</literal></expr>,
      <expr><literal type="number">93</literal></expr>,   <expr><literal type="number">143</literal></expr>,    <expr><literal type="number">95</literal></expr>,    <expr><literal type="number">96</literal></expr>,    <expr><literal type="number">97</literal></expr>,    <expr><literal type="number">98</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
      <expr><literal type="number">99</literal></expr>,   <expr><literal type="number">171</literal></expr>,   <expr><literal type="number">172</literal></expr>,   <expr><literal type="number">173</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">174</literal></expr>,   <expr><literal type="number">100</literal></expr>,   <expr><literal type="number">175</literal></expr>,   <expr><literal type="number">101</literal></expr>,     <expr><literal type="number">0</literal></expr>,
     <expr><literal type="number">176</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">366</literal></expr>,   <expr><literal type="number">367</literal></expr>,   <expr><literal type="number">102</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">177</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">368</literal></expr>,   <expr><literal type="number">369</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">178</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">179</literal></expr>,   <expr><literal type="number">180</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">181</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">182</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">183</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">184</literal></expr>,   <expr><literal type="number">185</literal></expr>,   <expr><literal type="number">186</literal></expr>,   <expr><literal type="number">187</literal></expr>,
     <expr><literal type="number">188</literal></expr>,   <expr><literal type="number">189</literal></expr>,   <expr><literal type="number">190</literal></expr>,   <expr><literal type="number">191</literal></expr>,   <expr><literal type="number">192</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">193</literal></expr>,   <expr><literal type="number">171</literal></expr>,   <expr><literal type="number">172</literal></expr>,   <expr><literal type="number">173</literal></expr>,
     <expr><literal type="number">208</literal></expr>,   <expr><literal type="number">174</literal></expr>,   <expr><literal type="number">210</literal></expr>,   <expr><literal type="number">175</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">176</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">177</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">22</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">23</literal></expr>,   <expr><operator>-</operator><literal type="number">90</literal></expr>,   <expr><literal type="number">178</literal></expr>,     <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">24</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">179</literal></expr>,   <expr><literal type="number">180</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">181</literal></expr>,   <expr><operator>-</operator><literal type="number">76</literal></expr>,    <expr><literal type="number">25</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
      <expr><literal type="number">26</literal></expr>,   <expr><literal type="number">182</literal></expr>,     <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">27</literal></expr>,     <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">28</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
     <expr><literal type="number">183</literal></expr>,    <expr><literal type="number">29</literal></expr>,   <expr><literal type="number">211</literal></expr>,   <expr><literal type="number">185</literal></expr>,   <expr><literal type="number">186</literal></expr>,   <expr><literal type="number">187</literal></expr>,   <expr><literal type="number">188</literal></expr>,   <expr><literal type="number">189</literal></expr>,   <expr><literal type="number">190</literal></expr>,   <expr><literal type="number">191</literal></expr>,
     <expr><literal type="number">192</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">193</literal></expr>,   <expr><literal type="number">171</literal></expr>,   <expr><literal type="number">172</literal></expr>,   <expr><literal type="number">173</literal></expr>,   <expr><literal type="number">208</literal></expr>,   <expr><literal type="number">174</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">175</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">176</literal></expr>,   <expr><literal type="number">212</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
     <expr><literal type="number">177</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">178</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">179</literal></expr>,   <expr><literal type="number">180</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">181</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">182</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">183</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">184</literal></expr>,   <expr><literal type="number">185</literal></expr>,
     <expr><literal type="number">186</literal></expr>,   <expr><literal type="number">187</literal></expr>,   <expr><literal type="number">188</literal></expr>,   <expr><literal type="number">189</literal></expr>,   <expr><literal type="number">190</literal></expr>,   <expr><literal type="number">191</literal></expr>,   <expr><literal type="number">192</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">193</literal></expr>,   <expr><literal type="number">171</literal></expr>,
     <expr><literal type="number">172</literal></expr>,   <expr><literal type="number">173</literal></expr>,   <expr><literal type="number">208</literal></expr>,   <expr><literal type="number">174</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">175</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">176</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">177</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">178</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">179</literal></expr>,
     <expr><literal type="number">180</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">181</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">182</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">223</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">183</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">184</literal></expr>,   <expr><literal type="number">185</literal></expr>,   <expr><literal type="number">186</literal></expr>,   <expr><literal type="number">187</literal></expr>,   <expr><literal type="number">188</literal></expr>,   <expr><literal type="number">189</literal></expr>,
     <expr><literal type="number">190</literal></expr>,   <expr><literal type="number">191</literal></expr>,   <expr><literal type="number">192</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">193</literal></expr>,   <expr><literal type="number">171</literal></expr>,   <expr><literal type="number">172</literal></expr>,   <expr><literal type="number">173</literal></expr>,   <expr><literal type="number">208</literal></expr>,   <expr><literal type="number">174</literal></expr>,
       <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">175</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">176</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">177</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">178</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">179</literal></expr>,   <expr><literal type="number">180</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">181</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">182</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">183</literal></expr>,     <expr><literal type="number">0</literal></expr>,
     <expr><literal type="number">184</literal></expr>,   <expr><literal type="number">185</literal></expr>,   <expr><literal type="number">186</literal></expr>,   <expr><literal type="number">187</literal></expr>,   <expr><literal type="number">188</literal></expr>,   <expr><literal type="number">189</literal></expr>,   <expr><literal type="number">190</literal></expr>,   <expr><literal type="number">191</literal></expr>,   <expr><literal type="number">192</literal></expr>,     <expr><literal type="number">0</literal></expr>,
     <expr><literal type="number">193</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">234</literal></expr>,   <expr><literal type="number">208</literal></expr>,   <expr><literal type="number">171</literal></expr>,   <expr><literal type="number">172</literal></expr>,   <expr><literal type="number">173</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">174</literal></expr>,
       <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">175</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">176</literal></expr>,   <expr><literal type="number">291</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">177</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">178</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">179</literal></expr>,   <expr><literal type="number">180</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">181</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">182</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">183</literal></expr>,     <expr><literal type="number">0</literal></expr>,
     <expr><literal type="number">184</literal></expr>,   <expr><literal type="number">185</literal></expr>,   <expr><literal type="number">186</literal></expr>,   <expr><literal type="number">187</literal></expr>,   <expr><literal type="number">188</literal></expr>,   <expr><literal type="number">189</literal></expr>,   <expr><literal type="number">190</literal></expr>,   <expr><literal type="number">191</literal></expr>,   <expr><literal type="number">192</literal></expr>,     <expr><literal type="number">0</literal></expr>,
     <expr><literal type="number">193</literal></expr>,   <expr><literal type="number">171</literal></expr>,   <expr><literal type="number">172</literal></expr>,   <expr><literal type="number">173</literal></expr>,   <expr><literal type="number">208</literal></expr>,   <expr><literal type="number">174</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">175</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
     <expr><literal type="number">176</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">177</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">178</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">179</literal></expr>,   <expr><literal type="number">180</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">181</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">182</literal></expr>,   <expr><literal type="number">296</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">183</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">184</literal></expr>,   <expr><literal type="number">185</literal></expr>,   <expr><literal type="number">186</literal></expr>,   <expr><literal type="number">187</literal></expr>,
     <expr><literal type="number">188</literal></expr>,   <expr><literal type="number">189</literal></expr>,   <expr><literal type="number">190</literal></expr>,   <expr><literal type="number">191</literal></expr>,   <expr><literal type="number">192</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">193</literal></expr>,   <expr><literal type="number">171</literal></expr>,   <expr><literal type="number">172</literal></expr>,   <expr><literal type="number">173</literal></expr>,
     <expr><literal type="number">208</literal></expr>,   <expr><literal type="number">174</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">175</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">176</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">177</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">178</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">179</literal></expr>,   <expr><literal type="number">180</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">181</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">182</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
     <expr><literal type="number">183</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">184</literal></expr>,   <expr><literal type="number">185</literal></expr>,   <expr><literal type="number">186</literal></expr>,   <expr><literal type="number">187</literal></expr>,   <expr><literal type="number">188</literal></expr>,   <expr><literal type="number">189</literal></expr>,   <expr><literal type="number">190</literal></expr>,   <expr><literal type="number">191</literal></expr>,
     <expr><literal type="number">192</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">193</literal></expr>,   <expr><literal type="number">310</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">208</literal></expr>,   <expr><literal type="number">171</literal></expr>,   <expr><literal type="number">172</literal></expr>,   <expr><literal type="number">173</literal></expr>,
       <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">174</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">175</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">176</literal></expr>,   <expr><literal type="number">315</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">177</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">178</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">179</literal></expr>,   <expr><literal type="number">180</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">181</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">182</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
     <expr><literal type="number">183</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">184</literal></expr>,   <expr><literal type="number">185</literal></expr>,   <expr><literal type="number">186</literal></expr>,   <expr><literal type="number">187</literal></expr>,   <expr><literal type="number">188</literal></expr>,   <expr><literal type="number">189</literal></expr>,   <expr><literal type="number">190</literal></expr>,   <expr><literal type="number">191</literal></expr>,
     <expr><literal type="number">192</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">193</literal></expr>,  <expr><operator>-</operator><literal type="number">118</literal></expr>,  <expr><operator>-</operator><literal type="number">118</literal></expr>,  <expr><operator>-</operator><literal type="number">118</literal></expr>,   <expr><literal type="number">208</literal></expr>,   <expr><literal type="number">174</literal></expr>,  <expr><operator>-</operator><literal type="number">118</literal></expr>,   <expr><literal type="number">175</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,  <expr><operator>-</operator><literal type="number">118</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
     <expr><literal type="number">177</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">178</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">179</literal></expr>,   <expr><literal type="number">180</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,  <expr><operator>-</operator><literal type="number">118</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">182</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,  <expr><operator>-</operator><literal type="number">118</literal></expr>,     <expr><literal type="number">0</literal></expr>,  <expr><operator>-</operator><literal type="number">118</literal></expr>,  <expr><operator>-</operator><literal type="number">118</literal></expr>,
    <expr><operator>-</operator><literal type="number">118</literal></expr>,   <expr><literal type="number">187</literal></expr>,   <expr><literal type="number">188</literal></expr>,   <expr><literal type="number">189</literal></expr>,   <expr><literal type="number">190</literal></expr>,   <expr><literal type="number">191</literal></expr>,   <expr><literal type="number">192</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">193</literal></expr>,   <expr><literal type="number">171</literal></expr>,
     <expr><literal type="number">172</literal></expr>,   <expr><literal type="number">173</literal></expr>,   <expr><literal type="number">208</literal></expr>,   <expr><literal type="number">174</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">175</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">176</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">177</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">178</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">179</literal></expr>,
     <expr><literal type="number">180</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">181</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">182</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">183</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">184</literal></expr>,   <expr><literal type="number">185</literal></expr>,   <expr><literal type="number">186</literal></expr>,   <expr><literal type="number">187</literal></expr>,   <expr><literal type="number">188</literal></expr>,   <expr><literal type="number">189</literal></expr>,
     <expr><literal type="number">190</literal></expr>,   <expr><literal type="number">191</literal></expr>,   <expr><literal type="number">192</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">193</literal></expr>,   <expr><literal type="number">171</literal></expr>,   <expr><literal type="number">172</literal></expr>,   <expr><literal type="number">173</literal></expr>,   <expr><literal type="number">194</literal></expr>,   <expr><literal type="number">174</literal></expr>,
       <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">175</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">176</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">177</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">178</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">179</literal></expr>,   <expr><literal type="number">180</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">181</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">182</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">183</literal></expr>,     <expr><literal type="number">0</literal></expr>,
     <expr><literal type="number">184</literal></expr>,   <expr><literal type="number">185</literal></expr>,   <expr><literal type="number">186</literal></expr>,   <expr><literal type="number">187</literal></expr>,   <expr><literal type="number">188</literal></expr>,   <expr><literal type="number">189</literal></expr>,   <expr><literal type="number">190</literal></expr>,   <expr><literal type="number">191</literal></expr>,   <expr><literal type="number">192</literal></expr>,     <expr><literal type="number">0</literal></expr>,
     <expr><literal type="number">193</literal></expr>,   <expr><literal type="number">171</literal></expr>,   <expr><literal type="number">172</literal></expr>,   <expr><literal type="number">173</literal></expr>,   <expr><literal type="number">208</literal></expr>,   <expr><literal type="number">174</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">175</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
     <expr><literal type="number">176</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">174</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">175</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">177</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">177</literal></expr>,   <expr><literal type="number">178</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">179</literal></expr>,   <expr><literal type="number">180</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">178</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">179</literal></expr>,
     <expr><literal type="number">180</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">182</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">182</literal></expr>,   <expr><literal type="number">183</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">184</literal></expr>,   <expr><literal type="number">185</literal></expr>,   <expr><literal type="number">186</literal></expr>,   <expr><literal type="number">187</literal></expr>,
     <expr><literal type="number">188</literal></expr>,   <expr><literal type="number">189</literal></expr>,   <expr><literal type="number">190</literal></expr>,   <expr><literal type="number">191</literal></expr>,   <expr><literal type="number">192</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">193</literal></expr>,   <expr><literal type="number">171</literal></expr>,   <expr><literal type="number">172</literal></expr>,   <expr><literal type="number">173</literal></expr>,
     <expr><literal type="number">208</literal></expr>,   <expr><literal type="number">174</literal></expr>,   <expr><literal type="number">192</literal></expr>,   <expr><literal type="number">175</literal></expr>,   <expr><literal type="number">193</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">174</literal></expr>,   <expr><literal type="number">208</literal></expr>,   <expr><literal type="number">175</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">177</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
     <expr><literal type="number">177</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">178</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">179</literal></expr>,   <expr><literal type="number">180</literal></expr>,   <expr><literal type="number">178</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,  <expr><operator>-</operator><literal type="number">188</literal></expr>,  <expr><operator>-</operator><literal type="number">188</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">182</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">182</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
     <expr><literal type="number">183</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">184</literal></expr>,   <expr><literal type="number">185</literal></expr>,   <expr><literal type="number">186</literal></expr>,   <expr><literal type="number">187</literal></expr>,   <expr><literal type="number">188</literal></expr>,   <expr><literal type="number">189</literal></expr>,   <expr><literal type="number">190</literal></expr>,   <expr><literal type="number">191</literal></expr>,
     <expr><literal type="number">192</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">193</literal></expr>,   <expr><literal type="number">171</literal></expr>,   <expr><literal type="number">172</literal></expr>,   <expr><literal type="number">173</literal></expr>,   <expr><literal type="number">208</literal></expr>,   <expr><literal type="number">174</literal></expr>,   <expr><literal type="number">193</literal></expr>,   <expr><literal type="number">175</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">208</literal></expr>,   <expr><literal type="number">174</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">175</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
     <expr><literal type="number">177</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">177</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">178</literal></expr>,
     <expr><literal type="number">174</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">175</literal></expr>,   <expr><literal type="number">179</literal></expr>,   <expr><literal type="number">180</literal></expr>,   <expr><literal type="number">178</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">179</literal></expr>,
     <expr><literal type="number">180</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">177</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">182</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">178</literal></expr>,   <expr><literal type="number">182</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">179</literal></expr>,   <expr><literal type="number">180</literal></expr>,   <expr><literal type="number">184</literal></expr>,   <expr><literal type="number">185</literal></expr>,
     <expr><literal type="number">186</literal></expr>,   <expr><literal type="number">187</literal></expr>,   <expr><literal type="number">188</literal></expr>,   <expr><literal type="number">189</literal></expr>,   <expr><literal type="number">190</literal></expr>,   <expr><literal type="number">191</literal></expr>,   <expr><literal type="number">192</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">193</literal></expr>,     <expr><literal type="number">0</literal></expr>,
     <expr><literal type="number">182</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">208</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">193</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">208</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">187</literal></expr>,   <expr><literal type="number">188</literal></expr>,   <expr><literal type="number">189</literal></expr>,   <expr><literal type="number">190</literal></expr>,   <expr><literal type="number">191</literal></expr>,   <expr><literal type="number">192</literal></expr>,
      <expr><literal type="number">51</literal></expr>,   <expr><literal type="number">193</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">208</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">53</literal></expr>,
      <expr><literal type="number">54</literal></expr>,    <expr><literal type="number">55</literal></expr>,    <expr><literal type="number">56</literal></expr>,    <expr><literal type="number">57</literal></expr>,    <expr><literal type="number">58</literal></expr>,    <expr><literal type="number">59</literal></expr>,    <expr><literal type="number">60</literal></expr>,   <expr><literal type="number">155</literal></expr>,   <expr><literal type="number">156</literal></expr>,    <expr><literal type="number">63</literal></expr>,
      <expr><literal type="number">64</literal></expr>,    <expr><literal type="number">65</literal></expr>,    <expr><literal type="number">66</literal></expr>,    <expr><literal type="number">67</literal></expr>,    <expr><literal type="number">68</literal></expr>,    <expr><literal type="number">69</literal></expr>,    <expr><literal type="number">70</literal></expr>,   <expr><literal type="number">157</literal></expr>,    <expr><literal type="number">71</literal></expr>,   <expr><literal type="number">158</literal></expr>,
      <expr><literal type="number">73</literal></expr>,   <expr><literal type="number">159</literal></expr>,    <expr><literal type="number">75</literal></expr>,    <expr><literal type="number">76</literal></expr>,    <expr><literal type="number">77</literal></expr>,    <expr><literal type="number">78</literal></expr>,    <expr><literal type="number">79</literal></expr>,   <expr><literal type="number">160</literal></expr>,   <expr><literal type="number">161</literal></expr>,    <expr><literal type="number">82</literal></expr>,
      <expr><literal type="number">83</literal></expr>,    <expr><literal type="number">84</literal></expr>,    <expr><literal type="number">85</literal></expr>,    <expr><literal type="number">86</literal></expr>,    <expr><literal type="number">87</literal></expr>,    <expr><literal type="number">88</literal></expr>,    <expr><literal type="number">89</literal></expr>,    <expr><literal type="number">90</literal></expr>,   <expr><literal type="number">162</literal></expr>,    <expr><literal type="number">92</literal></expr>,
       <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">93</literal></expr>,    <expr><literal type="number">94</literal></expr>,    <expr><literal type="number">95</literal></expr>,    <expr><literal type="number">96</literal></expr>,    <expr><literal type="number">97</literal></expr>,    <expr><literal type="number">98</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>yytype_int16</name></type> <name><name>yycheck</name><index>[]</index></name> <init>=
<expr><block>{
      <expr><literal type="number">22</literal></expr>,    <expr><literal type="number">25</literal></expr>,   <expr><literal type="number">264</literal></expr>,   <expr><literal type="number">274</literal></expr>,   <expr><literal type="number">141</literal></expr>,    <expr><literal type="number">27</literal></expr>,    <expr><literal type="number">28</literal></expr>,    <expr><literal type="number">29</literal></expr>,   <expr><literal type="number">102</literal></expr>,   <expr><literal type="number">136</literal></expr>,
     <expr><literal type="number">147</literal></expr>,     <expr><literal type="number">0</literal></expr>,   <expr><literal type="number">148</literal></expr>,     <expr><literal type="number">7</literal></expr>,   <expr><literal type="number">145</literal></expr>,    <expr><literal type="number">23</literal></expr>,   <expr><literal type="number">219</literal></expr>,    <expr><literal type="number">25</literal></expr>,   <expr><literal type="number">236</literal></expr>,     <expr><literal type="number">6</literal></expr>,
      <expr><literal type="number">16</literal></expr>,    <expr><literal type="number">47</literal></expr>,    <expr><literal type="number">32</literal></expr>,   <expr><literal type="number">293</literal></expr>,     <expr><literal type="number">8</literal></expr>,     <expr><literal type="number">6</literal></expr>,    <expr><literal type="number">55</literal></expr>,    <expr><literal type="number">36</literal></expr>,    <expr><literal type="number">59</literal></expr>,     <expr><literal type="number">1</literal></expr>,
     <expr><literal type="number">334</literal></expr>,     <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">16</literal></expr>,    <expr><literal type="number">17</literal></expr>,     <expr><literal type="number">6</literal></expr>,     <expr><literal type="number">7</literal></expr>,    <expr><literal type="number">76</literal></expr>,     <expr><literal type="number">3</literal></expr>,    <expr><literal type="number">78</literal></expr>,    <expr><literal type="number">61</literal></expr>,
      <expr><literal type="number">15</literal></expr>,    <expr><literal type="number">57</literal></expr>,    <expr><literal type="number">12</literal></expr>,    <expr><literal type="number">15</literal></expr>,    <expr><literal type="number">14</literal></expr>,    <expr><literal type="number">11</literal></expr>,   <expr><literal type="number">350</literal></expr>,    <expr><literal type="number">78</literal></expr>,    <expr><literal type="number">58</literal></expr>,    <expr><literal type="number">21</literal></expr>,
      <expr><literal type="number">79</literal></expr>,    <expr><literal type="number">41</literal></expr>,    <expr><literal type="number">78</literal></expr>,   <expr><literal type="number">357</literal></expr>,    <expr><literal type="number">59</literal></expr>,    <expr><literal type="number">25</literal></expr>,    <expr><literal type="number">31</literal></expr>,   <expr><literal type="number">327</literal></expr>,    <expr><literal type="number">80</literal></expr>,   <expr><literal type="number">196</literal></expr>,
      <expr><literal type="number">44</literal></expr>,    <expr><literal type="number">57</literal></expr>,    <expr><literal type="number">64</literal></expr>,   <expr><literal type="number">333</literal></expr>,    <expr><literal type="number">34</literal></expr>,    <expr><literal type="number">67</literal></expr>,    <expr><literal type="number">55</literal></expr>,    <expr><literal type="number">49</literal></expr>,    <expr><literal type="number">38</literal></expr>,    <expr><literal type="number">39</literal></expr>,
     <expr><literal type="number">206</literal></expr>,    <expr><literal type="number">27</literal></expr>,    <expr><literal type="number">64</literal></expr>,    <expr><literal type="number">78</literal></expr>,    <expr><literal type="number">76</literal></expr>,    <expr><literal type="number">67</literal></expr>,    <expr><literal type="number">75</literal></expr>,    <expr><literal type="number">99</literal></expr>,    <expr><literal type="number">60</literal></expr>,   <expr><literal type="number">101</literal></expr>,
     <expr><literal type="number">342</literal></expr>,    <expr><literal type="number">23</literal></expr>,    <expr><literal type="number">52</literal></expr>,    <expr><literal type="number">25</literal></expr>,   <expr><literal type="number">287</literal></expr>,   <expr><literal type="number">303</literal></expr>,   <expr><literal type="number">213</literal></expr>,    <expr><literal type="number">81</literal></expr>,    <expr><literal type="number">75</literal></expr>,   <expr><literal type="number">292</literal></expr>,
      <expr><literal type="number">79</literal></expr>,   <expr><literal type="number">218</literal></expr>,   <expr><literal type="number">363</literal></expr>,   <expr><literal type="number">224</literal></expr>,    <expr><literal type="number">75</literal></expr>,    <expr><literal type="number">75</literal></expr>,   <expr><literal type="number">358</literal></expr>,    <expr><literal type="number">75</literal></expr>,    <expr><literal type="number">68</literal></expr>,    <expr><literal type="number">69</literal></expr>,
      <expr><literal type="number">70</literal></expr>,    <expr><literal type="number">71</literal></expr>,    <expr><literal type="number">76</literal></expr>,    <expr><literal type="number">73</literal></expr>,    <expr><literal type="number">78</literal></expr>,    <expr><literal type="number">43</literal></expr>,    <expr><literal type="number">44</literal></expr>,    <expr><literal type="number">77</literal></expr>,    <expr><literal type="number">75</literal></expr>,   <expr><literal type="number">117</literal></expr>,
     <expr><literal type="number">372</literal></expr>,    <expr><literal type="number">26</literal></expr>,    <expr><literal type="number">27</literal></expr>,   <expr><literal type="number">135</literal></expr>,   <expr><literal type="number">136</literal></expr>,    <expr><literal type="number">30</literal></expr>,    <expr><literal type="number">12</literal></expr>,    <expr><literal type="number">76</literal></expr>,    <expr><literal type="number">14</literal></expr>,    <expr><literal type="number">78</literal></expr>,
      <expr><literal type="number">77</literal></expr>,   <expr><literal type="number">143</literal></expr>,    <expr><literal type="number">63</literal></expr>,    <expr><literal type="number">78</literal></expr>,    <expr><literal type="number">78</literal></expr>,    <expr><literal type="number">78</literal></expr>,    <expr><literal type="number">78</literal></expr>,    <expr><literal type="number">42</literal></expr>,    <expr><literal type="number">74</literal></expr>,    <expr><literal type="number">25</literal></expr>,
     <expr><literal type="number">267</literal></expr>,    <expr><literal type="number">82</literal></expr>,   <expr><literal type="number">140</literal></expr>,    <expr><literal type="number">48</literal></expr>,    <expr><literal type="number">49</literal></expr>,    <expr><literal type="number">50</literal></expr>,    <expr><literal type="number">80</literal></expr>,     <expr><literal type="number">6</literal></expr>,    <expr><literal type="number">34</literal></expr>,    <expr><literal type="number">78</literal></expr>,
      <expr><literal type="number">60</literal></expr>,    <expr><literal type="number">60</literal></expr>,   <expr><literal type="number">236</literal></expr>,    <expr><literal type="number">80</literal></expr>,    <expr><literal type="number">67</literal></expr>,    <expr><literal type="number">60</literal></expr>,    <expr><literal type="number">73</literal></expr>,    <expr><literal type="number">75</literal></expr>,    <expr><literal type="number">33</literal></expr>,   <expr><literal type="number">171</literal></expr>,
     <expr><literal type="number">172</literal></expr>,   <expr><literal type="number">173</literal></expr>,    <expr><literal type="number">76</literal></expr>,   <expr><literal type="number">175</literal></expr>,   <expr><literal type="number">176</literal></expr>,   <expr><literal type="number">177</literal></expr>,    <expr><literal type="number">52</literal></expr>,   <expr><literal type="number">179</literal></expr>,    <expr><literal type="number">75</literal></expr>,   <expr><literal type="number">181</literal></expr>,
     <expr><literal type="number">102</literal></expr>,   <expr><literal type="number">183</literal></expr>,   <expr><literal type="number">184</literal></expr>,   <expr><literal type="number">185</literal></expr>,   <expr><literal type="number">186</literal></expr>,   <expr><literal type="number">187</literal></expr>,   <expr><literal type="number">188</literal></expr>,   <expr><literal type="number">189</literal></expr>,   <expr><literal type="number">190</literal></expr>,   <expr><literal type="number">191</literal></expr>,
     <expr><literal type="number">192</literal></expr>,   <expr><literal type="number">193</literal></expr>,   <expr><literal type="number">194</literal></expr>,   <expr><literal type="number">195</literal></expr>,    <expr><literal type="number">76</literal></expr>,   <expr><literal type="number">117</literal></expr>,    <expr><literal type="number">77</literal></expr>,    <expr><literal type="number">73</literal></expr>,   <expr><literal type="number">202</literal></expr>,   <expr><literal type="number">273</literal></expr>,
      <expr><literal type="number">44</literal></expr>,    <expr><literal type="number">77</literal></expr>,    <expr><literal type="number">11</literal></expr>,    <expr><literal type="number">76</literal></expr>,    <expr><literal type="number">67</literal></expr>,   <expr><literal type="number">207</literal></expr>,   <expr><literal type="number">208</literal></expr>,   <expr><literal type="number">209</literal></expr>,   <expr><literal type="number">210</literal></expr>,   <expr><literal type="number">211</literal></expr>,
     <expr><literal type="number">198</literal></expr>,   <expr><literal type="number">213</literal></expr>,     <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">12</literal></expr>,   <expr><literal type="number">202</literal></expr>,    <expr><literal type="number">21</literal></expr>,   <expr><literal type="number">218</literal></expr>,    <expr><literal type="number">51</literal></expr>,   <expr><literal type="number">140</literal></expr>,    <expr><literal type="number">33</literal></expr>,
      <expr><literal type="number">80</literal></expr>,   <expr><literal type="number">223</literal></expr>,    <expr><literal type="number">76</literal></expr>,   <expr><literal type="number">225</literal></expr>,   <expr><literal type="number">212</literal></expr>,    <expr><literal type="number">67</literal></expr>,   <expr><literal type="number">148</literal></expr>,    <expr><literal type="number">65</literal></expr>,    <expr><literal type="number">40</literal></expr>,   <expr><literal type="number">303</literal></expr>,
     <expr><literal type="number">232</literal></expr>,    <expr><literal type="number">74</literal></expr>,    <expr><literal type="number">68</literal></expr>,    <expr><literal type="number">78</literal></expr>,    <expr><literal type="number">22</literal></expr>,   <expr><literal type="number">237</literal></expr>,    <expr><literal type="number">59</literal></expr>,    <expr><literal type="number">11</literal></expr>,    <expr><literal type="number">26</literal></expr>,    <expr><literal type="number">27</literal></expr>,
      <expr><literal type="number">11</literal></expr>,    <expr><literal type="number">74</literal></expr>,    <expr><literal type="number">30</literal></expr>,   <expr><literal type="number">245</literal></expr>,     <expr><literal type="number">3</literal></expr>,   <expr><literal type="number">312</literal></expr>,    <expr><literal type="number">33</literal></expr>,   <expr><literal type="number">313</literal></expr>,   <expr><literal type="number">250</literal></expr>,   <expr><literal type="number">382</literal></expr>,
     <expr><literal type="number">382</literal></expr>,   <expr><literal type="number">289</literal></expr>,   <expr><literal type="number">174</literal></expr>,    <expr><literal type="number">41</literal></expr>,    <expr><literal type="number">42</literal></expr>,   <expr><literal type="number">365</literal></expr>,   <expr><literal type="number">209</literal></expr>,    <expr><literal type="number">45</literal></expr>,   <expr><literal type="number">117</literal></expr>,   <expr><literal type="number">207</literal></expr>,
      <expr><literal type="number">48</literal></expr>,    <expr><literal type="number">49</literal></expr>,    <expr><literal type="number">50</literal></expr>,   <expr><literal type="number">140</literal></expr>,   <expr><literal type="number">205</literal></expr>,   <expr><literal type="number">325</literal></expr>,   <expr><literal type="number">276</literal></expr>,    <expr><literal type="number">55</literal></expr>,    <expr><literal type="number">56</literal></expr>,   <expr><literal type="number">363</literal></expr>,
     <expr><literal type="number">311</literal></expr>,    <expr><literal type="number">22</literal></expr>,    <expr><literal type="number">60</literal></expr>,   <expr><literal type="number">144</literal></expr>,    <expr><literal type="number">62</literal></expr>,   <expr><literal type="number">197</literal></expr>,   <expr><literal type="number">198</literal></expr>,   <expr><literal type="number">277</literal></expr>,   <expr><literal type="number">148</literal></expr>,   <expr><literal type="number">224</literal></expr>,
     <expr><literal type="number">202</literal></expr>,   <expr><literal type="number">273</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">12</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">14</literal></expr>,   <expr><literal type="number">289</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,   <expr><literal type="number">277</literal></expr>,
     <expr><literal type="number">212</literal></expr>,    <expr><literal type="number">79</literal></expr>,   <expr><literal type="number">294</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,   <expr><literal type="number">296</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">25</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,   <expr><literal type="number">291</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">34</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,   <expr><literal type="number">311</literal></expr>,
     <expr><literal type="number">312</literal></expr>,   <expr><literal type="number">313</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,   <expr><literal type="number">236</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,     <expr><literal type="number">0</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">52</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,   <expr><literal type="number">328</literal></expr>,   <expr><literal type="number">315</literal></expr>,   <expr><literal type="number">330</literal></expr>,    <expr><literal type="number">12</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,   <expr><literal type="number">339</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">22</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">26</literal></expr>,    <expr><literal type="number">27</literal></expr>,    <expr><literal type="number">73</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">30</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">77</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,   <expr><literal type="number">273</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,   <expr><literal type="number">355</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,   <expr><literal type="number">277</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">41</literal></expr>,    <expr><literal type="number">42</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">45</literal></expr>,   <expr><literal type="number">365</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">48</literal></expr>,    <expr><literal type="number">49</literal></expr>,    <expr><literal type="number">50</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,   <expr><literal type="number">291</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">55</literal></expr>,    <expr><literal type="number">56</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">60</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">62</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,   <expr><literal type="number">303</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">4</literal></expr>,     <expr><literal type="number">5</literal></expr>,     <expr><literal type="number">6</literal></expr>,     <expr><literal type="number">7</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,   <expr><literal type="number">315</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">79</literal></expr>,    <expr><literal type="number">15</literal></expr>,    <expr><literal type="number">16</literal></expr>,    <expr><literal type="number">17</literal></expr>,
      <expr><literal type="number">18</literal></expr>,    <expr><literal type="number">19</literal></expr>,    <expr><literal type="number">20</literal></expr>,    <expr><literal type="number">21</literal></expr>,    <expr><literal type="number">22</literal></expr>,    <expr><literal type="number">23</literal></expr>,    <expr><literal type="number">24</literal></expr>,    <expr><literal type="number">25</literal></expr>,    <expr><literal type="number">26</literal></expr>,    <expr><literal type="number">27</literal></expr>,
      <expr><literal type="number">28</literal></expr>,    <expr><literal type="number">29</literal></expr>,    <expr><literal type="number">30</literal></expr>,    <expr><literal type="number">31</literal></expr>,    <expr><literal type="number">32</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">34</literal></expr>,    <expr><literal type="number">35</literal></expr>,    <expr><literal type="number">36</literal></expr>,    <expr><literal type="number">37</literal></expr>,
      <expr><literal type="number">38</literal></expr>,    <expr><literal type="number">39</literal></expr>,    <expr><literal type="number">40</literal></expr>,    <expr><literal type="number">41</literal></expr>,    <expr><literal type="number">42</literal></expr>,    <expr><literal type="number">43</literal></expr>,    <expr><literal type="number">44</literal></expr>,    <expr><literal type="number">45</literal></expr>,    <expr><literal type="number">46</literal></expr>,    <expr><literal type="number">47</literal></expr>,
      <expr><literal type="number">48</literal></expr>,    <expr><literal type="number">49</literal></expr>,    <expr><literal type="number">50</literal></expr>,    <expr><literal type="number">51</literal></expr>,    <expr><literal type="number">52</literal></expr>,    <expr><literal type="number">53</literal></expr>,    <expr><literal type="number">54</literal></expr>,    <expr><literal type="number">55</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">57</literal></expr>,
      <expr><literal type="number">58</literal></expr>,    <expr><literal type="number">59</literal></expr>,    <expr><literal type="number">60</literal></expr>,    <expr><literal type="number">61</literal></expr>,    <expr><literal type="number">62</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">67</literal></expr>,
      <expr><literal type="number">68</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">73</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">75</literal></expr>,    <expr><literal type="number">76</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">81</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">4</literal></expr>,     <expr><literal type="number">5</literal></expr>,     <expr><literal type="number">6</literal></expr>,     <expr><literal type="number">7</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">15</literal></expr>,    <expr><literal type="number">16</literal></expr>,    <expr><literal type="number">17</literal></expr>,    <expr><literal type="number">18</literal></expr>,
      <expr><literal type="number">19</literal></expr>,    <expr><literal type="number">20</literal></expr>,    <expr><literal type="number">21</literal></expr>,    <expr><literal type="number">22</literal></expr>,    <expr><literal type="number">23</literal></expr>,    <expr><literal type="number">24</literal></expr>,    <expr><literal type="number">25</literal></expr>,    <expr><literal type="number">26</literal></expr>,    <expr><literal type="number">27</literal></expr>,    <expr><literal type="number">28</literal></expr>,
      <expr><literal type="number">29</literal></expr>,    <expr><literal type="number">30</literal></expr>,    <expr><literal type="number">31</literal></expr>,    <expr><literal type="number">32</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">34</literal></expr>,    <expr><literal type="number">35</literal></expr>,    <expr><literal type="number">36</literal></expr>,    <expr><literal type="number">37</literal></expr>,    <expr><literal type="number">38</literal></expr>,
      <expr><literal type="number">39</literal></expr>,    <expr><literal type="number">40</literal></expr>,    <expr><literal type="number">41</literal></expr>,    <expr><literal type="number">42</literal></expr>,    <expr><literal type="number">43</literal></expr>,    <expr><literal type="number">44</literal></expr>,    <expr><literal type="number">45</literal></expr>,    <expr><literal type="number">46</literal></expr>,    <expr><literal type="number">47</literal></expr>,    <expr><literal type="number">48</literal></expr>,
      <expr><literal type="number">49</literal></expr>,    <expr><literal type="number">50</literal></expr>,    <expr><literal type="number">51</literal></expr>,    <expr><literal type="number">52</literal></expr>,    <expr><literal type="number">53</literal></expr>,    <expr><literal type="number">54</literal></expr>,    <expr><literal type="number">55</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">57</literal></expr>,    <expr><literal type="number">58</literal></expr>,
      <expr><literal type="number">59</literal></expr>,    <expr><literal type="number">60</literal></expr>,    <expr><literal type="number">61</literal></expr>,    <expr><literal type="number">62</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">67</literal></expr>,    <expr><literal type="number">68</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">73</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">75</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">4</literal></expr>,     <expr><literal type="number">5</literal></expr>,
       <expr><literal type="number">6</literal></expr>,     <expr><literal type="number">7</literal></expr>,    <expr><literal type="number">81</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">15</literal></expr>,
      <expr><literal type="number">16</literal></expr>,    <expr><literal type="number">17</literal></expr>,    <expr><literal type="number">18</literal></expr>,    <expr><literal type="number">19</literal></expr>,    <expr><literal type="number">20</literal></expr>,    <expr><literal type="number">21</literal></expr>,    <expr><literal type="number">22</literal></expr>,    <expr><literal type="number">23</literal></expr>,    <expr><literal type="number">24</literal></expr>,    <expr><literal type="number">25</literal></expr>,
      <expr><literal type="number">26</literal></expr>,    <expr><literal type="number">27</literal></expr>,    <expr><literal type="number">28</literal></expr>,    <expr><literal type="number">29</literal></expr>,    <expr><literal type="number">30</literal></expr>,    <expr><literal type="number">31</literal></expr>,    <expr><literal type="number">32</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">34</literal></expr>,    <expr><literal type="number">35</literal></expr>,
      <expr><literal type="number">36</literal></expr>,    <expr><literal type="number">37</literal></expr>,    <expr><literal type="number">38</literal></expr>,    <expr><literal type="number">39</literal></expr>,    <expr><literal type="number">40</literal></expr>,    <expr><literal type="number">41</literal></expr>,    <expr><literal type="number">42</literal></expr>,    <expr><literal type="number">43</literal></expr>,    <expr><literal type="number">44</literal></expr>,    <expr><literal type="number">45</literal></expr>,
      <expr><literal type="number">46</literal></expr>,    <expr><literal type="number">47</literal></expr>,    <expr><literal type="number">48</literal></expr>,    <expr><literal type="number">49</literal></expr>,    <expr><literal type="number">50</literal></expr>,    <expr><literal type="number">51</literal></expr>,    <expr><literal type="number">52</literal></expr>,    <expr><literal type="number">53</literal></expr>,    <expr><literal type="number">54</literal></expr>,    <expr><literal type="number">55</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">57</literal></expr>,    <expr><literal type="number">58</literal></expr>,    <expr><literal type="number">59</literal></expr>,    <expr><literal type="number">60</literal></expr>,    <expr><literal type="number">61</literal></expr>,    <expr><literal type="number">62</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">67</literal></expr>,    <expr><literal type="number">68</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">73</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">75</literal></expr>,
       <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">4</literal></expr>,     <expr><literal type="number">5</literal></expr>,     <expr><literal type="number">6</literal></expr>,     <expr><literal type="number">7</literal></expr>,    <expr><literal type="number">81</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">15</literal></expr>,    <expr><literal type="number">16</literal></expr>,    <expr><literal type="number">17</literal></expr>,    <expr><literal type="number">18</literal></expr>,    <expr><literal type="number">19</literal></expr>,    <expr><literal type="number">20</literal></expr>,    <expr><literal type="number">21</literal></expr>,    <expr><literal type="number">22</literal></expr>,
      <expr><literal type="number">23</literal></expr>,    <expr><literal type="number">24</literal></expr>,    <expr><literal type="number">25</literal></expr>,    <expr><literal type="number">26</literal></expr>,    <expr><literal type="number">27</literal></expr>,    <expr><literal type="number">28</literal></expr>,    <expr><literal type="number">29</literal></expr>,    <expr><literal type="number">30</literal></expr>,    <expr><literal type="number">31</literal></expr>,    <expr><literal type="number">32</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">34</literal></expr>,    <expr><literal type="number">35</literal></expr>,    <expr><literal type="number">36</literal></expr>,    <expr><literal type="number">37</literal></expr>,    <expr><literal type="number">38</literal></expr>,    <expr><literal type="number">39</literal></expr>,    <expr><literal type="number">40</literal></expr>,    <expr><literal type="number">41</literal></expr>,    <expr><literal type="number">42</literal></expr>,
      <expr><literal type="number">43</literal></expr>,    <expr><literal type="number">44</literal></expr>,    <expr><literal type="number">45</literal></expr>,    <expr><literal type="number">46</literal></expr>,    <expr><literal type="number">47</literal></expr>,    <expr><literal type="number">48</literal></expr>,    <expr><literal type="number">49</literal></expr>,    <expr><literal type="number">50</literal></expr>,    <expr><literal type="number">51</literal></expr>,    <expr><literal type="number">52</literal></expr>,
      <expr><literal type="number">53</literal></expr>,    <expr><literal type="number">54</literal></expr>,    <expr><literal type="number">55</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">57</literal></expr>,    <expr><literal type="number">58</literal></expr>,    <expr><literal type="number">59</literal></expr>,    <expr><literal type="number">60</literal></expr>,    <expr><literal type="number">61</literal></expr>,    <expr><literal type="number">62</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">67</literal></expr>,    <expr><literal type="number">68</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><literal type="number">73</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">75</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">4</literal></expr>,     <expr><literal type="number">5</literal></expr>,     <expr><literal type="number">6</literal></expr>,     <expr><literal type="number">7</literal></expr>,    <expr><literal type="number">81</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">15</literal></expr>,    <expr><literal type="number">16</literal></expr>,    <expr><literal type="number">17</literal></expr>,    <expr><literal type="number">18</literal></expr>,    <expr><literal type="number">19</literal></expr>,
      <expr><literal type="number">20</literal></expr>,    <expr><literal type="number">21</literal></expr>,    <expr><literal type="number">22</literal></expr>,    <expr><literal type="number">23</literal></expr>,    <expr><literal type="number">24</literal></expr>,    <expr><literal type="number">25</literal></expr>,    <expr><literal type="number">26</literal></expr>,    <expr><literal type="number">27</literal></expr>,    <expr><literal type="number">28</literal></expr>,    <expr><literal type="number">29</literal></expr>,
      <expr><literal type="number">30</literal></expr>,    <expr><literal type="number">31</literal></expr>,    <expr><literal type="number">32</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">34</literal></expr>,    <expr><literal type="number">35</literal></expr>,    <expr><literal type="number">36</literal></expr>,    <expr><literal type="number">37</literal></expr>,    <expr><literal type="number">38</literal></expr>,    <expr><literal type="number">39</literal></expr>,
      <expr><literal type="number">40</literal></expr>,    <expr><literal type="number">41</literal></expr>,    <expr><literal type="number">42</literal></expr>,    <expr><literal type="number">43</literal></expr>,    <expr><literal type="number">44</literal></expr>,    <expr><literal type="number">45</literal></expr>,    <expr><literal type="number">46</literal></expr>,    <expr><literal type="number">47</literal></expr>,    <expr><literal type="number">48</literal></expr>,    <expr><literal type="number">49</literal></expr>,
      <expr><literal type="number">50</literal></expr>,    <expr><literal type="number">51</literal></expr>,    <expr><literal type="number">52</literal></expr>,    <expr><literal type="number">53</literal></expr>,    <expr><literal type="number">54</literal></expr>,    <expr><literal type="number">55</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">57</literal></expr>,    <expr><literal type="number">58</literal></expr>,    <expr><literal type="number">59</literal></expr>,
      <expr><literal type="number">60</literal></expr>,    <expr><literal type="number">61</literal></expr>,    <expr><literal type="number">62</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">67</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">73</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">75</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">4</literal></expr>,     <expr><literal type="number">5</literal></expr>,     <expr><literal type="number">6</literal></expr>,
       <expr><literal type="number">7</literal></expr>,    <expr><literal type="number">81</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">15</literal></expr>,    <expr><literal type="number">16</literal></expr>,
      <expr><literal type="number">17</literal></expr>,    <expr><literal type="number">18</literal></expr>,    <expr><literal type="number">19</literal></expr>,    <expr><literal type="number">20</literal></expr>,    <expr><literal type="number">21</literal></expr>,    <expr><literal type="number">22</literal></expr>,    <expr><literal type="number">23</literal></expr>,    <expr><literal type="number">24</literal></expr>,    <expr><literal type="number">25</literal></expr>,    <expr><literal type="number">26</literal></expr>,
      <expr><literal type="number">27</literal></expr>,    <expr><literal type="number">28</literal></expr>,    <expr><literal type="number">29</literal></expr>,    <expr><literal type="number">30</literal></expr>,    <expr><literal type="number">31</literal></expr>,    <expr><literal type="number">32</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">34</literal></expr>,    <expr><literal type="number">35</literal></expr>,    <expr><literal type="number">36</literal></expr>,
      <expr><literal type="number">37</literal></expr>,    <expr><literal type="number">38</literal></expr>,    <expr><literal type="number">39</literal></expr>,    <expr><literal type="number">40</literal></expr>,    <expr><literal type="number">41</literal></expr>,    <expr><literal type="number">42</literal></expr>,    <expr><literal type="number">43</literal></expr>,    <expr><literal type="number">44</literal></expr>,    <expr><literal type="number">45</literal></expr>,    <expr><literal type="number">46</literal></expr>,
      <expr><literal type="number">47</literal></expr>,    <expr><literal type="number">48</literal></expr>,    <expr><literal type="number">49</literal></expr>,    <expr><literal type="number">50</literal></expr>,    <expr><literal type="number">51</literal></expr>,    <expr><literal type="number">52</literal></expr>,    <expr><literal type="number">53</literal></expr>,    <expr><literal type="number">54</literal></expr>,    <expr><literal type="number">55</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><literal type="number">57</literal></expr>,    <expr><literal type="number">58</literal></expr>,    <expr><literal type="number">59</literal></expr>,    <expr><literal type="number">60</literal></expr>,    <expr><literal type="number">61</literal></expr>,    <expr><literal type="number">62</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><literal type="number">67</literal></expr>,     <expr><literal type="number">8</literal></expr>,     <expr><literal type="number">9</literal></expr>,    <expr><literal type="number">10</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">12</literal></expr>,    <expr><literal type="number">73</literal></expr>,    <expr><literal type="number">14</literal></expr>,    <expr><literal type="number">75</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><literal type="number">17</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">19</literal></expr>,    <expr><literal type="number">20</literal></expr>,    <expr><literal type="number">81</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">25</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">28</literal></expr>,    <expr><literal type="number">29</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">34</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">38</literal></expr>,    <expr><literal type="number">39</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">46</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">52</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">61</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">63</literal></expr>,    <expr><literal type="number">64</literal></expr>,    <expr><literal type="number">65</literal></expr>,    <expr><literal type="number">66</literal></expr>,
      <expr><literal type="number">67</literal></expr>,    <expr><literal type="number">68</literal></expr>,    <expr><literal type="number">69</literal></expr>,    <expr><literal type="number">70</literal></expr>,    <expr><literal type="number">71</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">73</literal></expr>,     <expr><literal type="number">8</literal></expr>,     <expr><literal type="number">9</literal></expr>,    <expr><literal type="number">10</literal></expr>,
      <expr><literal type="number">77</literal></expr>,    <expr><literal type="number">12</literal></expr>,    <expr><literal type="number">13</literal></expr>,    <expr><literal type="number">14</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">17</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">25</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">22</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">26</literal></expr>,    <expr><literal type="number">27</literal></expr>,    <expr><literal type="number">34</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">30</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">38</literal></expr>,    <expr><literal type="number">39</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">46</literal></expr>,    <expr><literal type="number">41</literal></expr>,    <expr><literal type="number">42</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><literal type="number">45</literal></expr>,    <expr><literal type="number">52</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">48</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">50</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><literal type="number">61</literal></expr>,    <expr><literal type="number">56</literal></expr>,    <expr><literal type="number">63</literal></expr>,    <expr><literal type="number">64</literal></expr>,    <expr><literal type="number">65</literal></expr>,    <expr><literal type="number">66</literal></expr>,    <expr><literal type="number">67</literal></expr>,    <expr><literal type="number">68</literal></expr>,    <expr><literal type="number">69</literal></expr>,    <expr><literal type="number">70</literal></expr>,
      <expr><literal type="number">71</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">73</literal></expr>,     <expr><literal type="number">8</literal></expr>,     <expr><literal type="number">9</literal></expr>,    <expr><literal type="number">10</literal></expr>,    <expr><literal type="number">77</literal></expr>,    <expr><literal type="number">12</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">14</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">17</literal></expr>,    <expr><literal type="number">18</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><literal type="number">25</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">34</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">38</literal></expr>,    <expr><literal type="number">39</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">46</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">52</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">61</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">63</literal></expr>,    <expr><literal type="number">64</literal></expr>,
      <expr><literal type="number">65</literal></expr>,    <expr><literal type="number">66</literal></expr>,    <expr><literal type="number">67</literal></expr>,    <expr><literal type="number">68</literal></expr>,    <expr><literal type="number">69</literal></expr>,    <expr><literal type="number">70</literal></expr>,    <expr><literal type="number">71</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">73</literal></expr>,     <expr><literal type="number">8</literal></expr>,
       <expr><literal type="number">9</literal></expr>,    <expr><literal type="number">10</literal></expr>,    <expr><literal type="number">77</literal></expr>,    <expr><literal type="number">12</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">14</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">17</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">25</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">34</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">38</literal></expr>,
      <expr><literal type="number">39</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">46</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">52</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">58</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">61</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">63</literal></expr>,    <expr><literal type="number">64</literal></expr>,    <expr><literal type="number">65</literal></expr>,    <expr><literal type="number">66</literal></expr>,    <expr><literal type="number">67</literal></expr>,    <expr><literal type="number">68</literal></expr>,
      <expr><literal type="number">69</literal></expr>,    <expr><literal type="number">70</literal></expr>,    <expr><literal type="number">71</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">73</literal></expr>,     <expr><literal type="number">8</literal></expr>,     <expr><literal type="number">9</literal></expr>,    <expr><literal type="number">10</literal></expr>,    <expr><literal type="number">77</literal></expr>,    <expr><literal type="number">12</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">14</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">17</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">25</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">34</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">38</literal></expr>,    <expr><literal type="number">39</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">46</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">52</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">61</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><literal type="number">63</literal></expr>,    <expr><literal type="number">64</literal></expr>,    <expr><literal type="number">65</literal></expr>,    <expr><literal type="number">66</literal></expr>,    <expr><literal type="number">67</literal></expr>,    <expr><literal type="number">68</literal></expr>,    <expr><literal type="number">69</literal></expr>,    <expr><literal type="number">70</literal></expr>,    <expr><literal type="number">71</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><literal type="number">73</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">76</literal></expr>,    <expr><literal type="number">77</literal></expr>,     <expr><literal type="number">8</literal></expr>,     <expr><literal type="number">9</literal></expr>,    <expr><literal type="number">10</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">12</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">14</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">17</literal></expr>,    <expr><literal type="number">18</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">25</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">34</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">38</literal></expr>,    <expr><literal type="number">39</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">46</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">52</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">61</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><literal type="number">63</literal></expr>,    <expr><literal type="number">64</literal></expr>,    <expr><literal type="number">65</literal></expr>,    <expr><literal type="number">66</literal></expr>,    <expr><literal type="number">67</literal></expr>,    <expr><literal type="number">68</literal></expr>,    <expr><literal type="number">69</literal></expr>,    <expr><literal type="number">70</literal></expr>,    <expr><literal type="number">71</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><literal type="number">73</literal></expr>,     <expr><literal type="number">8</literal></expr>,     <expr><literal type="number">9</literal></expr>,    <expr><literal type="number">10</literal></expr>,    <expr><literal type="number">77</literal></expr>,    <expr><literal type="number">12</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">14</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><literal type="number">17</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">25</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">34</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">38</literal></expr>,    <expr><literal type="number">39</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">46</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">52</literal></expr>,    <expr><literal type="number">53</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">61</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">63</literal></expr>,    <expr><literal type="number">64</literal></expr>,    <expr><literal type="number">65</literal></expr>,    <expr><literal type="number">66</literal></expr>,
      <expr><literal type="number">67</literal></expr>,    <expr><literal type="number">68</literal></expr>,    <expr><literal type="number">69</literal></expr>,    <expr><literal type="number">70</literal></expr>,    <expr><literal type="number">71</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">73</literal></expr>,     <expr><literal type="number">8</literal></expr>,     <expr><literal type="number">9</literal></expr>,    <expr><literal type="number">10</literal></expr>,
      <expr><literal type="number">77</literal></expr>,    <expr><literal type="number">12</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">14</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">17</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">25</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">34</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">38</literal></expr>,    <expr><literal type="number">39</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">46</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">52</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><literal type="number">61</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">63</literal></expr>,    <expr><literal type="number">64</literal></expr>,    <expr><literal type="number">65</literal></expr>,    <expr><literal type="number">66</literal></expr>,    <expr><literal type="number">67</literal></expr>,    <expr><literal type="number">68</literal></expr>,    <expr><literal type="number">69</literal></expr>,    <expr><literal type="number">70</literal></expr>,
      <expr><literal type="number">71</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">73</literal></expr>,    <expr><literal type="number">74</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">77</literal></expr>,     <expr><literal type="number">8</literal></expr>,     <expr><literal type="number">9</literal></expr>,    <expr><literal type="number">10</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">12</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">14</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">17</literal></expr>,    <expr><literal type="number">18</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">25</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">34</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">38</literal></expr>,    <expr><literal type="number">39</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">46</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">52</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><literal type="number">61</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">63</literal></expr>,    <expr><literal type="number">64</literal></expr>,    <expr><literal type="number">65</literal></expr>,    <expr><literal type="number">66</literal></expr>,    <expr><literal type="number">67</literal></expr>,    <expr><literal type="number">68</literal></expr>,    <expr><literal type="number">69</literal></expr>,    <expr><literal type="number">70</literal></expr>,
      <expr><literal type="number">71</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">73</literal></expr>,     <expr><literal type="number">8</literal></expr>,     <expr><literal type="number">9</literal></expr>,    <expr><literal type="number">10</literal></expr>,    <expr><literal type="number">77</literal></expr>,    <expr><literal type="number">12</literal></expr>,    <expr><literal type="number">13</literal></expr>,    <expr><literal type="number">14</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">17</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><literal type="number">25</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">34</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">38</literal></expr>,    <expr><literal type="number">39</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">46</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">52</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">61</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">63</literal></expr>,    <expr><literal type="number">64</literal></expr>,
      <expr><literal type="number">65</literal></expr>,    <expr><literal type="number">66</literal></expr>,    <expr><literal type="number">67</literal></expr>,    <expr><literal type="number">68</literal></expr>,    <expr><literal type="number">69</literal></expr>,    <expr><literal type="number">70</literal></expr>,    <expr><literal type="number">71</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">73</literal></expr>,     <expr><literal type="number">8</literal></expr>,
       <expr><literal type="number">9</literal></expr>,    <expr><literal type="number">10</literal></expr>,    <expr><literal type="number">77</literal></expr>,    <expr><literal type="number">12</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">14</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">17</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">25</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">34</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">38</literal></expr>,
      <expr><literal type="number">39</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">46</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">52</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">61</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">63</literal></expr>,    <expr><literal type="number">64</literal></expr>,    <expr><literal type="number">65</literal></expr>,    <expr><literal type="number">66</literal></expr>,    <expr><literal type="number">67</literal></expr>,    <expr><literal type="number">68</literal></expr>,
      <expr><literal type="number">69</literal></expr>,    <expr><literal type="number">70</literal></expr>,    <expr><literal type="number">71</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">73</literal></expr>,     <expr><literal type="number">8</literal></expr>,     <expr><literal type="number">9</literal></expr>,    <expr><literal type="number">10</literal></expr>,    <expr><literal type="number">77</literal></expr>,    <expr><literal type="number">12</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">14</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">17</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">25</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">34</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">38</literal></expr>,    <expr><literal type="number">39</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">46</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">52</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">61</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><literal type="number">63</literal></expr>,    <expr><literal type="number">64</literal></expr>,    <expr><literal type="number">65</literal></expr>,    <expr><literal type="number">66</literal></expr>,    <expr><literal type="number">67</literal></expr>,    <expr><literal type="number">68</literal></expr>,    <expr><literal type="number">69</literal></expr>,    <expr><literal type="number">70</literal></expr>,    <expr><literal type="number">71</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><literal type="number">73</literal></expr>,     <expr><literal type="number">8</literal></expr>,     <expr><literal type="number">9</literal></expr>,    <expr><literal type="number">10</literal></expr>,    <expr><literal type="number">77</literal></expr>,    <expr><literal type="number">12</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">14</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><literal type="number">17</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">12</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">14</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">25</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">25</literal></expr>,    <expr><literal type="number">34</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">38</literal></expr>,    <expr><literal type="number">39</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">34</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">38</literal></expr>,
      <expr><literal type="number">39</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">52</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">52</literal></expr>,    <expr><literal type="number">61</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">63</literal></expr>,    <expr><literal type="number">64</literal></expr>,    <expr><literal type="number">65</literal></expr>,    <expr><literal type="number">66</literal></expr>,
      <expr><literal type="number">67</literal></expr>,    <expr><literal type="number">68</literal></expr>,    <expr><literal type="number">69</literal></expr>,    <expr><literal type="number">70</literal></expr>,    <expr><literal type="number">71</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">73</literal></expr>,     <expr><literal type="number">8</literal></expr>,     <expr><literal type="number">9</literal></expr>,    <expr><literal type="number">10</literal></expr>,
      <expr><literal type="number">77</literal></expr>,    <expr><literal type="number">12</literal></expr>,    <expr><literal type="number">71</literal></expr>,    <expr><literal type="number">14</literal></expr>,    <expr><literal type="number">73</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">12</literal></expr>,    <expr><literal type="number">77</literal></expr>,    <expr><literal type="number">14</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">25</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><literal type="number">25</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">34</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">38</literal></expr>,    <expr><literal type="number">39</literal></expr>,    <expr><literal type="number">34</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">38</literal></expr>,    <expr><literal type="number">39</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">52</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">52</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><literal type="number">61</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">63</literal></expr>,    <expr><literal type="number">64</literal></expr>,    <expr><literal type="number">65</literal></expr>,    <expr><literal type="number">66</literal></expr>,    <expr><literal type="number">67</literal></expr>,    <expr><literal type="number">68</literal></expr>,    <expr><literal type="number">69</literal></expr>,    <expr><literal type="number">70</literal></expr>,
      <expr><literal type="number">71</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">73</literal></expr>,     <expr><literal type="number">8</literal></expr>,     <expr><literal type="number">9</literal></expr>,    <expr><literal type="number">10</literal></expr>,    <expr><literal type="number">77</literal></expr>,    <expr><literal type="number">12</literal></expr>,    <expr><literal type="number">73</literal></expr>,    <expr><literal type="number">14</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">77</literal></expr>,    <expr><literal type="number">12</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">14</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><literal type="number">25</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">25</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">34</literal></expr>,
      <expr><literal type="number">12</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">14</literal></expr>,    <expr><literal type="number">38</literal></expr>,    <expr><literal type="number">39</literal></expr>,    <expr><literal type="number">34</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">38</literal></expr>,
      <expr><literal type="number">39</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">25</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">52</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">34</literal></expr>,    <expr><literal type="number">52</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">38</literal></expr>,    <expr><literal type="number">39</literal></expr>,    <expr><literal type="number">63</literal></expr>,    <expr><literal type="number">64</literal></expr>,
      <expr><literal type="number">65</literal></expr>,    <expr><literal type="number">66</literal></expr>,    <expr><literal type="number">67</literal></expr>,    <expr><literal type="number">68</literal></expr>,    <expr><literal type="number">69</literal></expr>,    <expr><literal type="number">70</literal></expr>,    <expr><literal type="number">71</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">73</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><literal type="number">52</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">77</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">73</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">77</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">66</literal></expr>,    <expr><literal type="number">67</literal></expr>,    <expr><literal type="number">68</literal></expr>,    <expr><literal type="number">69</literal></expr>,    <expr><literal type="number">70</literal></expr>,    <expr><literal type="number">71</literal></expr>,
       <expr><literal type="number">6</literal></expr>,    <expr><literal type="number">73</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">77</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">15</literal></expr>,
      <expr><literal type="number">16</literal></expr>,    <expr><literal type="number">17</literal></expr>,    <expr><literal type="number">18</literal></expr>,    <expr><literal type="number">19</literal></expr>,    <expr><literal type="number">20</literal></expr>,    <expr><literal type="number">21</literal></expr>,    <expr><literal type="number">22</literal></expr>,    <expr><literal type="number">23</literal></expr>,    <expr><literal type="number">24</literal></expr>,    <expr><literal type="number">25</literal></expr>,
      <expr><literal type="number">26</literal></expr>,    <expr><literal type="number">27</literal></expr>,    <expr><literal type="number">28</literal></expr>,    <expr><literal type="number">29</literal></expr>,    <expr><literal type="number">30</literal></expr>,    <expr><literal type="number">31</literal></expr>,    <expr><literal type="number">32</literal></expr>,    <expr><literal type="number">33</literal></expr>,    <expr><literal type="number">34</literal></expr>,    <expr><literal type="number">35</literal></expr>,
      <expr><literal type="number">36</literal></expr>,    <expr><literal type="number">37</literal></expr>,    <expr><literal type="number">38</literal></expr>,    <expr><literal type="number">39</literal></expr>,    <expr><literal type="number">40</literal></expr>,    <expr><literal type="number">41</literal></expr>,    <expr><literal type="number">42</literal></expr>,    <expr><literal type="number">43</literal></expr>,    <expr><literal type="number">44</literal></expr>,    <expr><literal type="number">45</literal></expr>,
      <expr><literal type="number">46</literal></expr>,    <expr><literal type="number">47</literal></expr>,    <expr><literal type="number">48</literal></expr>,    <expr><literal type="number">49</literal></expr>,    <expr><literal type="number">50</literal></expr>,    <expr><literal type="number">51</literal></expr>,    <expr><literal type="number">52</literal></expr>,    <expr><literal type="number">53</literal></expr>,    <expr><literal type="number">54</literal></expr>,    <expr><literal type="number">55</literal></expr>,
      <expr><operator>-</operator><literal type="number">1</literal></expr>,    <expr><literal type="number">57</literal></expr>,    <expr><literal type="number">58</literal></expr>,    <expr><literal type="number">59</literal></expr>,    <expr><literal type="number">60</literal></expr>,    <expr><literal type="number">61</literal></expr>,    <expr><literal type="number">62</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>yytype_uint8</name></type> <name><name>yystos</name><index>[]</index></name> <init>=
<expr><block>{
       <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">36</literal></expr>,    <expr><literal type="number">84</literal></expr>,    <expr><literal type="number">85</literal></expr>,    <expr><literal type="number">91</literal></expr>,    <expr><literal type="number">92</literal></expr>,    <expr><literal type="number">16</literal></expr>,    <expr><literal type="number">57</literal></expr>,    <expr><literal type="number">85</literal></expr>,     <expr><literal type="number">0</literal></expr>,
      <expr><literal type="number">55</literal></expr>,    <expr><literal type="number">79</literal></expr>,    <expr><literal type="number">89</literal></expr>,    <expr><literal type="number">93</literal></expr>,    <expr><literal type="number">94</literal></expr>,    <expr><literal type="number">57</literal></expr>,    <expr><literal type="number">85</literal></expr>,    <expr><literal type="number">85</literal></expr>,    <expr><literal type="number">89</literal></expr>,    <expr><literal type="number">15</literal></expr>,
      <expr><literal type="number">31</literal></expr>,    <expr><literal type="number">90</literal></expr>,    <expr><literal type="number">22</literal></expr>,    <expr><literal type="number">26</literal></expr>,    <expr><literal type="number">30</literal></expr>,    <expr><literal type="number">42</literal></expr>,    <expr><literal type="number">45</literal></expr>,    <expr><literal type="number">48</literal></expr>,    <expr><literal type="number">50</literal></expr>,    <expr><literal type="number">56</literal></expr>,
      <expr><literal type="number">86</literal></expr>,    <expr><literal type="number">95</literal></expr>,    <expr><literal type="number">96</literal></expr>,    <expr><literal type="number">97</literal></expr>,    <expr><literal type="number">98</literal></expr>,   <expr><literal type="number">114</literal></expr>,   <expr><literal type="number">115</literal></expr>,   <expr><literal type="number">116</literal></expr>,   <expr><literal type="number">117</literal></expr>,   <expr><literal type="number">118</literal></expr>,
     <expr><literal type="number">121</literal></expr>,   <expr><literal type="number">124</literal></expr>,   <expr><literal type="number">125</literal></expr>,   <expr><literal type="number">126</literal></expr>,    <expr><literal type="number">85</literal></expr>,    <expr><literal type="number">89</literal></expr>,    <expr><literal type="number">89</literal></expr>,    <expr><literal type="number">85</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">4</literal></expr>,
       <expr><literal type="number">5</literal></expr>,     <expr><literal type="number">6</literal></expr>,     <expr><literal type="number">7</literal></expr>,    <expr><literal type="number">15</literal></expr>,    <expr><literal type="number">16</literal></expr>,    <expr><literal type="number">17</literal></expr>,    <expr><literal type="number">18</literal></expr>,    <expr><literal type="number">19</literal></expr>,    <expr><literal type="number">20</literal></expr>,    <expr><literal type="number">21</literal></expr>,
      <expr><literal type="number">22</literal></expr>,    <expr><literal type="number">23</literal></expr>,    <expr><literal type="number">24</literal></expr>,    <expr><literal type="number">25</literal></expr>,    <expr><literal type="number">26</literal></expr>,    <expr><literal type="number">27</literal></expr>,    <expr><literal type="number">28</literal></expr>,    <expr><literal type="number">29</literal></expr>,    <expr><literal type="number">30</literal></expr>,    <expr><literal type="number">31</literal></expr>,
      <expr><literal type="number">32</literal></expr>,    <expr><literal type="number">34</literal></expr>,    <expr><literal type="number">35</literal></expr>,    <expr><literal type="number">36</literal></expr>,    <expr><literal type="number">37</literal></expr>,    <expr><literal type="number">38</literal></expr>,    <expr><literal type="number">39</literal></expr>,    <expr><literal type="number">40</literal></expr>,    <expr><literal type="number">41</literal></expr>,    <expr><literal type="number">42</literal></expr>,
      <expr><literal type="number">43</literal></expr>,    <expr><literal type="number">44</literal></expr>,    <expr><literal type="number">45</literal></expr>,    <expr><literal type="number">46</literal></expr>,    <expr><literal type="number">47</literal></expr>,    <expr><literal type="number">48</literal></expr>,    <expr><literal type="number">49</literal></expr>,    <expr><literal type="number">50</literal></expr>,    <expr><literal type="number">51</literal></expr>,    <expr><literal type="number">52</literal></expr>,
      <expr><literal type="number">53</literal></expr>,    <expr><literal type="number">54</literal></expr>,    <expr><literal type="number">55</literal></expr>,    <expr><literal type="number">57</literal></expr>,    <expr><literal type="number">58</literal></expr>,    <expr><literal type="number">59</literal></expr>,    <expr><literal type="number">60</literal></expr>,    <expr><literal type="number">61</literal></expr>,    <expr><literal type="number">62</literal></expr>,    <expr><literal type="number">67</literal></expr>,
      <expr><literal type="number">73</literal></expr>,    <expr><literal type="number">75</literal></expr>,    <expr><literal type="number">81</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">142</literal></expr>,   <expr><literal type="number">143</literal></expr>,   <expr><literal type="number">144</literal></expr>,   <expr><literal type="number">146</literal></expr>,   <expr><literal type="number">147</literal></expr>,   <expr><literal type="number">148</literal></expr>,
     <expr><literal type="number">151</literal></expr>,   <expr><literal type="number">152</literal></expr>,   <expr><literal type="number">156</literal></expr>,   <expr><literal type="number">157</literal></expr>,   <expr><literal type="number">159</literal></expr>,   <expr><literal type="number">162</literal></expr>,   <expr><literal type="number">165</literal></expr>,    <expr><literal type="number">75</literal></expr>,   <expr><literal type="number">128</literal></expr>,   <expr><literal type="number">129</literal></expr>,
     <expr><literal type="number">130</literal></expr>,   <expr><literal type="number">131</literal></expr>,   <expr><literal type="number">132</literal></expr>,   <expr><literal type="number">133</literal></expr>,   <expr><literal type="number">159</literal></expr>,   <expr><literal type="number">162</literal></expr>,   <expr><literal type="number">129</literal></expr>,   <expr><literal type="number">122</literal></expr>,   <expr><literal type="number">123</literal></expr>,   <expr><literal type="number">138</literal></expr>,
     <expr><literal type="number">143</literal></expr>,   <expr><literal type="number">119</literal></expr>,   <expr><literal type="number">120</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">138</literal></expr>,    <expr><literal type="number">49</literal></expr>,    <expr><literal type="number">60</literal></expr>,   <expr><literal type="number">104</literal></expr>,   <expr><literal type="number">113</literal></expr>,    <expr><literal type="number">98</literal></expr>,
      <expr><literal type="number">41</literal></expr>,    <expr><literal type="number">27</literal></expr>,    <expr><literal type="number">89</literal></expr>,    <expr><literal type="number">58</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">153</literal></expr>,   <expr><literal type="number">154</literal></expr>,    <expr><literal type="number">75</literal></expr>,    <expr><literal type="number">75</literal></expr>,   <expr><literal type="number">138</literal></expr>,
     <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">140</literal></expr>,   <expr><literal type="number">141</literal></expr>,   <expr><literal type="number">138</literal></expr>,    <expr><literal type="number">23</literal></expr>,    <expr><literal type="number">24</literal></expr>,    <expr><literal type="number">33</literal></expr>,    <expr><literal type="number">35</literal></expr>,    <expr><literal type="number">37</literal></expr>,
      <expr><literal type="number">43</literal></expr>,    <expr><literal type="number">44</literal></expr>,    <expr><literal type="number">54</literal></expr>,   <expr><literal type="number">149</literal></expr>,   <expr><literal type="number">150</literal></expr>,   <expr><literal type="number">158</literal></expr>,   <expr><literal type="number">162</literal></expr>,   <expr><literal type="number">163</literal></expr>,   <expr><literal type="number">164</literal></expr>,   <expr><literal type="number">165</literal></expr>,
     <expr><literal type="number">166</literal></expr>,     <expr><literal type="number">8</literal></expr>,     <expr><literal type="number">9</literal></expr>,    <expr><literal type="number">10</literal></expr>,    <expr><literal type="number">12</literal></expr>,    <expr><literal type="number">14</literal></expr>,    <expr><literal type="number">17</literal></expr>,    <expr><literal type="number">25</literal></expr>,    <expr><literal type="number">34</literal></expr>,    <expr><literal type="number">38</literal></expr>,
      <expr><literal type="number">39</literal></expr>,    <expr><literal type="number">46</literal></expr>,    <expr><literal type="number">52</literal></expr>,    <expr><literal type="number">61</literal></expr>,    <expr><literal type="number">63</literal></expr>,    <expr><literal type="number">64</literal></expr>,    <expr><literal type="number">65</literal></expr>,    <expr><literal type="number">66</literal></expr>,    <expr><literal type="number">67</literal></expr>,    <expr><literal type="number">68</literal></expr>,
      <expr><literal type="number">69</literal></expr>,    <expr><literal type="number">70</literal></expr>,    <expr><literal type="number">71</literal></expr>,    <expr><literal type="number">73</literal></expr>,    <expr><literal type="number">77</literal></expr>,    <expr><literal type="number">62</literal></expr>,    <expr><literal type="number">75</literal></expr>,    <expr><literal type="number">77</literal></expr>,    <expr><literal type="number">75</literal></expr>,   <expr><literal type="number">132</literal></expr>,
     <expr><literal type="number">159</literal></expr>,   <expr><literal type="number">160</literal></expr>,    <expr><literal type="number">78</literal></expr>,    <expr><literal type="number">64</literal></expr>,    <expr><literal type="number">67</literal></expr>,   <expr><literal type="number">134</literal></expr>,    <expr><literal type="number">63</literal></expr>,    <expr><literal type="number">78</literal></expr>,    <expr><literal type="number">77</literal></expr>,    <expr><literal type="number">78</literal></expr>,
      <expr><literal type="number">13</literal></expr>,    <expr><literal type="number">63</literal></expr>,    <expr><literal type="number">18</literal></expr>,    <expr><literal type="number">31</literal></expr>,    <expr><literal type="number">68</literal></expr>,   <expr><literal type="number">105</literal></expr>,   <expr><literal type="number">106</literal></expr>,   <expr><literal type="number">138</literal></expr>,    <expr><literal type="number">31</literal></expr>,   <expr><literal type="number">105</literal></expr>,
     <expr><literal type="number">128</literal></expr>,   <expr><literal type="number">140</literal></expr>,   <expr><literal type="number">138</literal></expr>,    <expr><literal type="number">58</literal></expr>,   <expr><literal type="number">153</literal></expr>,    <expr><literal type="number">32</literal></expr>,   <expr><literal type="number">154</literal></expr>,   <expr><literal type="number">155</literal></expr>,   <expr><literal type="number">140</literal></expr>,   <expr><literal type="number">130</literal></expr>,
     <expr><literal type="number">145</literal></expr>,   <expr><literal type="number">156</literal></expr>,    <expr><literal type="number">78</literal></expr>,    <expr><literal type="number">74</literal></expr>,    <expr><literal type="number">76</literal></expr>,    <expr><literal type="number">82</literal></expr>,    <expr><literal type="number">78</literal></expr>,    <expr><literal type="number">80</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">138</literal></expr>,
     <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">162</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">138</literal></expr>,    <expr><literal type="number">60</literal></expr>,   <expr><literal type="number">138</literal></expr>,    <expr><literal type="number">43</literal></expr>,    <expr><literal type="number">44</literal></expr>,   <expr><literal type="number">138</literal></expr>,
      <expr><literal type="number">60</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">138</literal></expr>,
     <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">139</literal></expr>,   <expr><literal type="number">138</literal></expr>,    <expr><literal type="number">87</literal></expr>,    <expr><literal type="number">88</literal></expr>,   <expr><literal type="number">138</literal></expr>,    <expr><literal type="number">31</literal></expr>,    <expr><literal type="number">68</literal></expr>,    <expr><literal type="number">76</literal></expr>,
     <expr><literal type="number">140</literal></expr>,   <expr><literal type="number">162</literal></expr>,    <expr><literal type="number">76</literal></expr>,    <expr><literal type="number">80</literal></expr>,   <expr><literal type="number">136</literal></expr>,   <expr><literal type="number">129</literal></expr>,    <expr><literal type="number">67</literal></expr>,    <expr><literal type="number">73</literal></expr>,   <expr><literal type="number">135</literal></expr>,   <expr><literal type="number">133</literal></expr>,
     <expr><literal type="number">130</literal></expr>,   <expr><literal type="number">123</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">120</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">159</literal></expr>,   <expr><literal type="number">105</literal></expr>,    <expr><literal type="number">47</literal></expr>,    <expr><literal type="number">78</literal></expr>,
     <expr><literal type="number">107</literal></expr>,    <expr><literal type="number">18</literal></expr>,   <expr><literal type="number">105</literal></expr>,   <expr><literal type="number">107</literal></expr>,    <expr><literal type="number">59</literal></expr>,   <expr><literal type="number">127</literal></expr>,    <expr><literal type="number">53</literal></expr>,   <expr><literal type="number">155</literal></expr>,   <expr><literal type="number">138</literal></expr>,    <expr><literal type="number">33</literal></expr>,
      <expr><literal type="number">76</literal></expr>,    <expr><literal type="number">76</literal></expr>,    <expr><literal type="number">76</literal></expr>,    <expr><literal type="number">77</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">158</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">138</literal></expr>,    <expr><literal type="number">44</literal></expr>,   <expr><literal type="number">138</literal></expr>,
      <expr><literal type="number">74</literal></expr>,    <expr><literal type="number">11</literal></expr>,    <expr><literal type="number">62</literal></expr>,    <expr><literal type="number">78</literal></expr>,   <expr><literal type="number">127</literal></expr>,    <expr><literal type="number">18</literal></expr>,   <expr><literal type="number">140</literal></expr>,    <expr><literal type="number">76</literal></expr>,    <expr><literal type="number">76</literal></expr>,   <expr><literal type="number">161</literal></expr>,
     <expr><literal type="number">163</literal></expr>,     <expr><literal type="number">7</literal></expr>,   <expr><literal type="number">137</literal></expr>,   <expr><literal type="number">148</literal></expr>,   <expr><literal type="number">135</literal></expr>,   <expr><literal type="number">160</literal></expr>,    <expr><literal type="number">67</literal></expr>,   <expr><literal type="number">107</literal></expr>,    <expr><literal type="number">21</literal></expr>,   <expr><literal type="number">106</literal></expr>,
      <expr><literal type="number">51</literal></expr>,   <expr><literal type="number">111</literal></expr>,   <expr><literal type="number">159</literal></expr>,   <expr><literal type="number">107</literal></expr>,   <expr><literal type="number">111</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">138</literal></expr>,    <expr><literal type="number">33</literal></expr>,   <expr><literal type="number">158</literal></expr>,    <expr><literal type="number">80</literal></expr>,
     <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">139</literal></expr>,    <expr><literal type="number">87</literal></expr>,    <expr><literal type="number">88</literal></expr>,   <expr><literal type="number">159</literal></expr>,    <expr><literal type="number">76</literal></expr>,    <expr><literal type="number">76</literal></expr>,    <expr><literal type="number">67</literal></expr>,   <expr><literal type="number">136</literal></expr>,    <expr><literal type="number">65</literal></expr>,
     <expr><literal type="number">111</literal></expr>,   <expr><literal type="number">108</literal></expr>,   <expr><literal type="number">109</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">138</literal></expr>,    <expr><literal type="number">40</literal></expr>,   <expr><literal type="number">112</literal></expr>,   <expr><literal type="number">111</literal></expr>,   <expr><literal type="number">112</literal></expr>,   <expr><literal type="number">138</literal></expr>,
      <expr><literal type="number">74</literal></expr>,   <expr><literal type="number">127</literal></expr>,    <expr><literal type="number">68</literal></expr>,    <expr><literal type="number">99</literal></expr>,   <expr><literal type="number">112</literal></expr>,    <expr><literal type="number">78</literal></expr>,    <expr><literal type="number">19</literal></expr>,    <expr><literal type="number">20</literal></expr>,    <expr><literal type="number">28</literal></expr>,    <expr><literal type="number">29</literal></expr>,
     <expr><literal type="number">110</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">112</literal></expr>,   <expr><literal type="number">127</literal></expr>,     <expr><literal type="number">3</literal></expr>,   <expr><literal type="number">100</literal></expr>,   <expr><literal type="number">101</literal></expr>,   <expr><literal type="number">102</literal></expr>,   <expr><literal type="number">103</literal></expr>,   <expr><literal type="number">137</literal></expr>,
     <expr><literal type="number">109</literal></expr>,   <expr><literal type="number">127</literal></expr>,    <expr><literal type="number">11</literal></expr>,    <expr><literal type="number">74</literal></expr>,   <expr><literal type="number">101</literal></expr>,   <expr><literal type="number">102</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>yytype_uint8</name></type> <name><name>yyr1</name><index>[]</index></name> <init>=
<expr><block>{
       <expr><literal type="number">0</literal></expr>,    <expr><literal type="number">83</literal></expr>,    <expr><literal type="number">84</literal></expr>,    <expr><literal type="number">84</literal></expr>,    <expr><literal type="number">84</literal></expr>,    <expr><literal type="number">84</literal></expr>,    <expr><literal type="number">84</literal></expr>,    <expr><literal type="number">85</literal></expr>,    <expr><literal type="number">85</literal></expr>,    <expr><literal type="number">86</literal></expr>,
      <expr><literal type="number">86</literal></expr>,    <expr><literal type="number">86</literal></expr>,    <expr><literal type="number">86</literal></expr>,    <expr><literal type="number">87</literal></expr>,    <expr><literal type="number">87</literal></expr>,    <expr><literal type="number">88</literal></expr>,    <expr><literal type="number">88</literal></expr>,    <expr><literal type="number">89</literal></expr>,    <expr><literal type="number">89</literal></expr>,    <expr><literal type="number">90</literal></expr>,
      <expr><literal type="number">90</literal></expr>,    <expr><literal type="number">90</literal></expr>,    <expr><literal type="number">91</literal></expr>,    <expr><literal type="number">92</literal></expr>,    <expr><literal type="number">92</literal></expr>,    <expr><literal type="number">93</literal></expr>,    <expr><literal type="number">93</literal></expr>,    <expr><literal type="number">93</literal></expr>,    <expr><literal type="number">94</literal></expr>,    <expr><literal type="number">94</literal></expr>,
      <expr><literal type="number">95</literal></expr>,    <expr><literal type="number">95</literal></expr>,    <expr><literal type="number">95</literal></expr>,    <expr><literal type="number">96</literal></expr>,    <expr><literal type="number">96</literal></expr>,    <expr><literal type="number">97</literal></expr>,    <expr><literal type="number">97</literal></expr>,    <expr><literal type="number">98</literal></expr>,    <expr><literal type="number">98</literal></expr>,    <expr><literal type="number">98</literal></expr>,
      <expr><literal type="number">98</literal></expr>,    <expr><literal type="number">98</literal></expr>,    <expr><literal type="number">99</literal></expr>,    <expr><literal type="number">99</literal></expr>,   <expr><literal type="number">100</literal></expr>,   <expr><literal type="number">100</literal></expr>,   <expr><literal type="number">100</literal></expr>,   <expr><literal type="number">101</literal></expr>,   <expr><literal type="number">102</literal></expr>,   <expr><literal type="number">102</literal></expr>,
     <expr><literal type="number">103</literal></expr>,   <expr><literal type="number">104</literal></expr>,   <expr><literal type="number">104</literal></expr>,   <expr><literal type="number">105</literal></expr>,   <expr><literal type="number">105</literal></expr>,   <expr><literal type="number">106</literal></expr>,   <expr><literal type="number">106</literal></expr>,   <expr><literal type="number">106</literal></expr>,   <expr><literal type="number">107</literal></expr>,   <expr><literal type="number">107</literal></expr>,
     <expr><literal type="number">108</literal></expr>,   <expr><literal type="number">108</literal></expr>,   <expr><literal type="number">109</literal></expr>,   <expr><literal type="number">110</literal></expr>,   <expr><literal type="number">110</literal></expr>,   <expr><literal type="number">110</literal></expr>,   <expr><literal type="number">110</literal></expr>,   <expr><literal type="number">110</literal></expr>,   <expr><literal type="number">111</literal></expr>,   <expr><literal type="number">111</literal></expr>,
     <expr><literal type="number">112</literal></expr>,   <expr><literal type="number">112</literal></expr>,   <expr><literal type="number">113</literal></expr>,   <expr><literal type="number">113</literal></expr>,   <expr><literal type="number">114</literal></expr>,   <expr><literal type="number">115</literal></expr>,   <expr><literal type="number">115</literal></expr>,   <expr><literal type="number">116</literal></expr>,   <expr><literal type="number">117</literal></expr>,   <expr><literal type="number">118</literal></expr>,
     <expr><literal type="number">119</literal></expr>,   <expr><literal type="number">119</literal></expr>,   <expr><literal type="number">120</literal></expr>,   <expr><literal type="number">120</literal></expr>,   <expr><literal type="number">121</literal></expr>,   <expr><literal type="number">122</literal></expr>,   <expr><literal type="number">122</literal></expr>,   <expr><literal type="number">123</literal></expr>,   <expr><literal type="number">124</literal></expr>,   <expr><literal type="number">125</literal></expr>,
     <expr><literal type="number">125</literal></expr>,   <expr><literal type="number">126</literal></expr>,   <expr><literal type="number">127</literal></expr>,   <expr><literal type="number">127</literal></expr>,   <expr><literal type="number">128</literal></expr>,   <expr><literal type="number">128</literal></expr>,   <expr><literal type="number">129</literal></expr>,   <expr><literal type="number">129</literal></expr>,   <expr><literal type="number">130</literal></expr>,   <expr><literal type="number">131</literal></expr>,
     <expr><literal type="number">131</literal></expr>,   <expr><literal type="number">132</literal></expr>,   <expr><literal type="number">132</literal></expr>,   <expr><literal type="number">133</literal></expr>,   <expr><literal type="number">134</literal></expr>,   <expr><literal type="number">134</literal></expr>,   <expr><literal type="number">134</literal></expr>,   <expr><literal type="number">135</literal></expr>,   <expr><literal type="number">135</literal></expr>,   <expr><literal type="number">136</literal></expr>,
     <expr><literal type="number">136</literal></expr>,   <expr><literal type="number">137</literal></expr>,   <expr><literal type="number">137</literal></expr>,   <expr><literal type="number">137</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">138</literal></expr>,
     <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">138</literal></expr>,
     <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">138</literal></expr>,
     <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">138</literal></expr>,   <expr><literal type="number">139</literal></expr>,   <expr><literal type="number">139</literal></expr>,   <expr><literal type="number">140</literal></expr>,   <expr><literal type="number">140</literal></expr>,   <expr><literal type="number">141</literal></expr>,   <expr><literal type="number">141</literal></expr>,   <expr><literal type="number">142</literal></expr>,
     <expr><literal type="number">142</literal></expr>,   <expr><literal type="number">143</literal></expr>,   <expr><literal type="number">143</literal></expr>,   <expr><literal type="number">143</literal></expr>,   <expr><literal type="number">143</literal></expr>,   <expr><literal type="number">144</literal></expr>,   <expr><literal type="number">144</literal></expr>,   <expr><literal type="number">144</literal></expr>,   <expr><literal type="number">145</literal></expr>,   <expr><literal type="number">146</literal></expr>,
     <expr><literal type="number">146</literal></expr>,   <expr><literal type="number">146</literal></expr>,   <expr><literal type="number">146</literal></expr>,   <expr><literal type="number">146</literal></expr>,   <expr><literal type="number">146</literal></expr>,   <expr><literal type="number">147</literal></expr>,   <expr><literal type="number">147</literal></expr>,   <expr><literal type="number">147</literal></expr>,   <expr><literal type="number">147</literal></expr>,   <expr><literal type="number">147</literal></expr>,
     <expr><literal type="number">147</literal></expr>,   <expr><literal type="number">147</literal></expr>,   <expr><literal type="number">147</literal></expr>,   <expr><literal type="number">148</literal></expr>,   <expr><literal type="number">149</literal></expr>,   <expr><literal type="number">149</literal></expr>,   <expr><literal type="number">150</literal></expr>,   <expr><literal type="number">150</literal></expr>,   <expr><literal type="number">151</literal></expr>,   <expr><literal type="number">152</literal></expr>,
     <expr><literal type="number">152</literal></expr>,   <expr><literal type="number">153</literal></expr>,   <expr><literal type="number">153</literal></expr>,   <expr><literal type="number">154</literal></expr>,   <expr><literal type="number">155</literal></expr>,   <expr><literal type="number">155</literal></expr>,   <expr><literal type="number">156</literal></expr>,   <expr><literal type="number">157</literal></expr>,   <expr><literal type="number">157</literal></expr>,   <expr><literal type="number">158</literal></expr>,
     <expr><literal type="number">159</literal></expr>,   <expr><literal type="number">160</literal></expr>,   <expr><literal type="number">160</literal></expr>,   <expr><literal type="number">161</literal></expr>,   <expr><literal type="number">162</literal></expr>,   <expr><literal type="number">163</literal></expr>,   <expr><literal type="number">163</literal></expr>,   <expr><literal type="number">164</literal></expr>,   <expr><literal type="number">164</literal></expr>,   <expr><literal type="number">165</literal></expr>,
     <expr><literal type="number">165</literal></expr>,   <expr><literal type="number">165</literal></expr>,   <expr><literal type="number">165</literal></expr>,   <expr><literal type="number">165</literal></expr>,   <expr><literal type="number">165</literal></expr>,   <expr><literal type="number">165</literal></expr>,   <expr><literal type="number">165</literal></expr>,   <expr><literal type="number">165</literal></expr>,   <expr><literal type="number">165</literal></expr>,   <expr><literal type="number">165</literal></expr>,
     <expr><literal type="number">165</literal></expr>,   <expr><literal type="number">165</literal></expr>,   <expr><literal type="number">165</literal></expr>,   <expr><literal type="number">165</literal></expr>,   <expr><literal type="number">165</literal></expr>,   <expr><literal type="number">165</literal></expr>,   <expr><literal type="number">165</literal></expr>,   <expr><literal type="number">165</literal></expr>,   <expr><literal type="number">165</literal></expr>,   <expr><literal type="number">165</literal></expr>,
     <expr><literal type="number">165</literal></expr>,   <expr><literal type="number">165</literal></expr>,   <expr><literal type="number">165</literal></expr>,   <expr><literal type="number">165</literal></expr>,   <expr><literal type="number">165</literal></expr>,   <expr><literal type="number">165</literal></expr>,   <expr><literal type="number">165</literal></expr>,   <expr><literal type="number">165</literal></expr>,   <expr><literal type="number">165</literal></expr>,   <expr><literal type="number">165</literal></expr>,
     <expr><literal type="number">165</literal></expr>,   <expr><literal type="number">165</literal></expr>,   <expr><literal type="number">165</literal></expr>,   <expr><literal type="number">165</literal></expr>,   <expr><literal type="number">165</literal></expr>,   <expr><literal type="number">165</literal></expr>,   <expr><literal type="number">165</literal></expr>,   <expr><literal type="number">165</literal></expr>,   <expr><literal type="number">165</literal></expr>,   <expr><literal type="number">165</literal></expr>,
     <expr><literal type="number">165</literal></expr>,   <expr><literal type="number">165</literal></expr>,   <expr><literal type="number">166</literal></expr>,   <expr><literal type="number">166</literal></expr>,   <expr><literal type="number">166</literal></expr>,   <expr><literal type="number">166</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>yytype_int8</name></type> <name><name>yyr2</name><index>[]</index></name> <init>=
<expr><block>{
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">4</literal></expr>,     <expr><literal type="number">4</literal></expr>,     <expr><literal type="number">5</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">4</literal></expr>,     <expr><literal type="number">2</literal></expr>,
       <expr><literal type="number">4</literal></expr>,     <expr><literal type="number">5</literal></expr>,     <expr><literal type="number">7</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,
       <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">4</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">2</literal></expr>,
       <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,
       <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">6</literal></expr>,     <expr><literal type="number">5</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">3</literal></expr>,
       <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">2</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">7</literal></expr>,     <expr><literal type="number">6</literal></expr>,     <expr><literal type="number">4</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">4</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,
       <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">1</literal></expr>,
       <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,
       <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">5</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">4</literal></expr>,     <expr><literal type="number">4</literal></expr>,     <expr><literal type="number">6</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">0</literal></expr>,
       <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">3</literal></expr>,
       <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">3</literal></expr>,
       <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">4</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">4</literal></expr>,     <expr><literal type="number">4</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">4</literal></expr>,     <expr><literal type="number">6</literal></expr>,
       <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,
       <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">4</literal></expr>,     <expr><literal type="number">4</literal></expr>,     <expr><literal type="number">5</literal></expr>,     <expr><literal type="number">4</literal></expr>,     <expr><literal type="number">4</literal></expr>,     <expr><literal type="number">4</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">1</literal></expr>,
       <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,
       <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">5</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">5</literal></expr>,
       <expr><literal type="number">4</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">4</literal></expr>,     <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">1</literal></expr>,
       <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,
       <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,
       <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,
       <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,
       <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,
       <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">1</literal></expr>
}</block></expr></init></decl>;</decl_stmt>


<enum>enum <block>{ <decl><name>YYENOMEM</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl> }</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyerrok</name></cpp:macro>         <cpp:value>(yyerrstatus = 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yyclearin</name></cpp:macro>       <cpp:value>(yychar = YYEMPTY)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYACCEPT</name></cpp:macro>        <cpp:value>goto yyacceptlab</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYABORT</name></cpp:macro>         <cpp:value>goto yyabortlab</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYERROR</name></cpp:macro>         <cpp:value>goto yyerrorlab</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYNOMEM</name></cpp:macro>         <cpp:value>goto yyexhaustedlab</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYRECOVERING</name><parameter_list>()</parameter_list></cpp:macro>  <cpp:value>(!!yyerrstatus)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYBACKUP</name><parameter_list>(<parameter><type><name>Token</name></type></parameter>, <parameter><type><name>Value</name></type></parameter>)</parameter_list></cpp:macro>                                    \
  <cpp:value>do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&amp;yylloc, scanner, extra, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)</cpp:value></cpp:define>

<comment type="block">/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYERRCODE</name></cpp:macro> <cpp:value>YYUNDEF</cpp:value></cpp:define>

<comment type="block">/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>YYLLOC_DEFAULT</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>YYLLOC_DEFAULT</name><parameter_list>(<parameter><type><name>Current</name></type></parameter>, <parameter><type><name>Rhs</name></type></parameter>, <parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro>                                \
    <cpp:value>do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYRHSLOC</name><parameter_list>(<parameter><type><name>Rhs</name></type></parameter>, <parameter><type><name>K</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((Rhs)[K])</cpp:value></cpp:define>


<comment type="block">/* Enable debugging if requested.  */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>YYDEBUG</name></expr></cpp:if>

<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>YYFPRINTF</name></cpp:ifndef>
<cpp:include>#  <cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include> <comment type="block">/* INFRINGES ON USER NAME SPACE */</comment>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>YYFPRINTF</name></cpp:macro> <cpp:value>fprintf</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>YYDPRINTF</name><parameter_list>(<parameter><type><name>Args</name></type></parameter>)</parameter_list></cpp:macro>                        \
<cpp:value>do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)</cpp:value></cpp:define>


<comment type="block">/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */</comment>

<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>YYLOCATION_PRINT</name></cpp:ifndef>

<cpp:if>#  <cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>YY_LOCATION_PRINT</name></expr></cpp:if>

   <comment type="block">/* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */</comment>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>YYLOCATION_PRINT</name><parameter_list>(<parameter><type><name>File</name></type></parameter>, <parameter><type><name>Loc</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>YY_LOCATION_PRINT(File, *(Loc))</cpp:value></cpp:define>

<cpp:elif>#  <cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>YYLTYPE_IS_TRIVIAL</name> <operator>&amp;&amp;</operator> <name>YYLTYPE_IS_TRIVIAL</name></expr></cpp:elif>

<comment type="block">/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */</comment>

<function><type><name>YY_ATTRIBUTE_UNUSED</name>
<specifier>static</specifier> <name>int</name></type>
<name>yy_location_print_</name> <parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>yyo</name></decl></parameter>, <parameter><decl><type><name>YYLTYPE</name> <specifier>const</specifier> <modifier>*</modifier> <specifier>const</specifier></type> <name>yylocp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>end_col</name> <init>= <expr><ternary><condition><expr><literal type="number">0</literal> <operator>!=</operator> <name><name>yylocp</name><operator>-&gt;</operator><name>last_column</name></name></expr> ?</condition><then> <expr><name><name>yylocp</name><operator>-&gt;</operator><name>last_column</name></name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name><name>yylocp</name><operator>-&gt;</operator><name>first_line</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>res</name> <operator>+=</operator> <call><name>YYFPRINTF</name> <argument_list>(<argument><expr><name>yyo</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>yylocp</name><operator>-&gt;</operator><name>first_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name><name>yylocp</name><operator>-&gt;</operator><name>first_column</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>res</name> <operator>+=</operator> <call><name>YYFPRINTF</name> <argument_list>(<argument><expr><name>yyo</name></expr></argument>, <argument><expr><literal type="string">".%d"</literal></expr></argument>, <argument><expr><name><name>yylocp</name><operator>-&gt;</operator><name>first_column</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name><name>yylocp</name><operator>-&gt;</operator><name>last_line</name></name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>yylocp</name><operator>-&gt;</operator><name>first_line</name></name> <operator>&lt;</operator> <name><name>yylocp</name><operator>-&gt;</operator><name>last_line</name></name></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><name>res</name> <operator>+=</operator> <call><name>YYFPRINTF</name> <argument_list>(<argument><expr><name>yyo</name></expr></argument>, <argument><expr><literal type="string">"-%d"</literal></expr></argument>, <argument><expr><name><name>yylocp</name><operator>-&gt;</operator><name>last_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>end_col</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>res</name> <operator>+=</operator> <call><name>YYFPRINTF</name> <argument_list>(<argument><expr><name>yyo</name></expr></argument>, <argument><expr><literal type="string">".%d"</literal></expr></argument>, <argument><expr><name>end_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>end_col</name> <operator>&amp;&amp;</operator> <name><name>yylocp</name><operator>-&gt;</operator><name>first_column</name></name> <operator>&lt;</operator> <name>end_col</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>res</name> <operator>+=</operator> <call><name>YYFPRINTF</name> <argument_list>(<argument><expr><name>yyo</name></expr></argument>, <argument><expr><literal type="string">"-%d"</literal></expr></argument>, <argument><expr><name>end_col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>YYLOCATION_PRINT</name></cpp:macro>  <cpp:value>yy_location_print_</cpp:value></cpp:define>

    <comment type="block">/* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */</comment>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>YY_LOCATION_PRINT</name><parameter_list>(<parameter><type><name>File</name></type></parameter>, <parameter><type><name>Loc</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>YYLOCATION_PRINT(File, &amp;(Loc))</cpp:value></cpp:define>

<cpp:else>#  <cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>YYLOCATION_PRINT</name><parameter_list>(<parameter><type><name>File</name></type></parameter>, <parameter><type><name>Loc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void) 0)</cpp:value></cpp:define>
    <comment type="block">/* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */</comment>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>YY_LOCATION_PRINT</name></cpp:macro>  <cpp:value>YYLOCATION_PRINT</cpp:value></cpp:define>

<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !defined YYLOCATION_PRINT */</comment>


<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>YY_SYMBOL_PRINT</name><parameter_list>(<parameter><type><name>Title</name></type></parameter>, <parameter><type><name>Kind</name></type></parameter>, <parameter><type><name>Value</name></type></parameter>, <parameter><type><name>Location</name></type></parameter>)</parameter_list></cpp:macro>                    \
<cpp:value>do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location, scanner, extra); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)</cpp:value></cpp:define>


<comment type="block">/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>yy_symbol_value_print</name> <parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>yyo</name></decl></parameter>,
                       <parameter><decl><type><name>yysymbol_kind_t</name></type> <name>yykind</name></decl></parameter>, <parameter><decl><type><name>YYSTYPE</name> <specifier>const</specifier> <modifier>*</modifier> <specifier>const</specifier></type> <name>yyvaluep</name></decl></parameter>, <parameter><decl><type><name>YYLTYPE</name> <specifier>const</specifier> <modifier>*</modifier> <specifier>const</specifier></type> <name>yylocationp</name></decl></parameter>, <parameter><decl><type><name>ag_scanner_t</name></type> <name>scanner</name></decl></parameter>, <parameter><decl><type><name>cypher_yy_extra</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>yyoutput</name> <init>= <expr><name>yyo</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>YY_USE</name> <argument_list>(<argument><expr><name>yyoutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>YY_USE</name> <argument_list>(<argument><expr><name>yylocationp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>YY_USE</name> <argument_list>(<argument><expr><name>scanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>YY_USE</name> <argument_list>(<argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>yyvaluep</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN</name></type>
  <name>YY_USE</name> <argument_list>(<argument><expr><name>yykind</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name>YY_IGNORE_MAYBE_UNINITIALIZED_END</name></expr></expr_stmt>
</block_content>}</block></function>


<comment type="block">/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>yy_symbol_print</name> <parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>yyo</name></decl></parameter>,
                 <parameter><decl><type><name>yysymbol_kind_t</name></type> <name>yykind</name></decl></parameter>, <parameter><decl><type><name>YYSTYPE</name> <specifier>const</specifier> <modifier>*</modifier> <specifier>const</specifier></type> <name>yyvaluep</name></decl></parameter>, <parameter><decl><type><name>YYLTYPE</name> <specifier>const</specifier> <modifier>*</modifier> <specifier>const</specifier></type> <name>yylocationp</name></decl></parameter>, <parameter><decl><type><name>ag_scanner_t</name></type> <name>scanner</name></decl></parameter>, <parameter><decl><type><name>cypher_yy_extra</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>YYFPRINTF</name> <argument_list>(<argument><expr><name>yyo</name></expr></argument>, <argument><expr><literal type="string">"%s %s ("</literal></expr></argument>,
             <argument><expr><ternary><condition><expr><name>yykind</name> <operator>&lt;</operator> <name>YYNTOKENS</name></expr> ?</condition><then> <expr><literal type="string">"token"</literal></expr> </then><else>: <expr><literal type="string">"nterm"</literal></expr></else></ternary></expr></argument>, <argument><expr><call><name>yysymbol_name</name> <argument_list>(<argument><expr><name>yykind</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>YYLOCATION_PRINT</name> <argument_list>(<argument><expr><name>yyo</name></expr></argument>, <argument><expr><name>yylocationp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>YYFPRINTF</name> <argument_list>(<argument><expr><name>yyo</name></expr></argument>, <argument><expr><literal type="string">": "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>yy_symbol_value_print</name> <argument_list>(<argument><expr><name>yyo</name></expr></argument>, <argument><expr><name>yykind</name></expr></argument>, <argument><expr><name>yyvaluep</name></expr></argument>, <argument><expr><name>yylocationp</name></expr></argument>, <argument><expr><name>scanner</name></expr></argument>, <argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>YYFPRINTF</name> <argument_list>(<argument><expr><name>yyo</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>yy_stack_print</name> <parameter_list>(<parameter><decl><type><name>yy_state_t</name> <modifier>*</modifier></type><name>yybottom</name></decl></parameter>, <parameter><decl><type><name>yy_state_t</name> <modifier>*</modifier></type><name>yytop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>YYFPRINTF</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Stack now"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init>;</init> <condition><expr><name>yybottom</name> <operator>&lt;=</operator> <name>yytop</name></expr>;</condition> <incr><expr><name>yybottom</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>yybot</name> <init>= <expr><operator>*</operator><name>yybottom</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>YYFPRINTF</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" %d"</literal></expr></argument>, <argument><expr><name>yybot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  <expr_stmt><expr><call><name>YYFPRINTF</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>YY_STACK_PRINT</name><parameter_list>(<parameter><type><name>Bottom</name></type></parameter>, <parameter><type><name>Top</name></type></parameter>)</parameter_list></cpp:macro>                            \
<cpp:value>do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)</cpp:value></cpp:define>


<comment type="block">/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>yy_reduce_print</name> <parameter_list>(<parameter><decl><type><name>yy_state_t</name> <modifier>*</modifier></type><name>yyssp</name></decl></parameter>, <parameter><decl><type><name>YYSTYPE</name> <modifier>*</modifier></type><name>yyvsp</name></decl></parameter>, <parameter><decl><type><name>YYLTYPE</name> <modifier>*</modifier></type><name>yylsp</name></decl></parameter>,
                 <parameter><decl><type><name>int</name></type> <name>yyrule</name></decl></parameter>, <parameter><decl><type><name>ag_scanner_t</name></type> <name>scanner</name></decl></parameter>, <parameter><decl><type><name>cypher_yy_extra</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>yylno</name> <init>= <expr><name><name>yyrline</name><index>[<expr><name>yyrule</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>yynrhs</name> <init>= <expr><name><name>yyr2</name><index>[<expr><name>yyrule</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>yyi</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>YYFPRINTF</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Reducing stack by rule %d (line %d):\n"</literal></expr></argument>,
             <argument><expr><name>yyrule</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>yylno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* The symbols being reduced.  */</comment>
  <for>for <control>(<init><expr><name>yyi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>yyi</name> <operator>&lt;</operator> <name>yynrhs</name></expr>;</condition> <incr><expr><name>yyi</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><call><name>YYFPRINTF</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"   $%d = "</literal></expr></argument>, <argument><expr><name>yyi</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>yy_symbol_print</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>,
                       <argument><expr><call><name>YY_ACCESSING_SYMBOL</name> <argument_list>(<argument><expr><operator>+</operator><name><name>yyssp</name><index>[<expr><name>yyi</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>yynrhs</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
                       <argument><expr><operator>&amp;</operator><name><name>yyvsp</name><index>[<expr><operator>(</operator><name>yyi</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>yynrhs</name><operator>)</operator></expr>]</index></name></expr></argument>,
                       <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>yylsp</name><index>[<expr><operator>(</operator><name>yyi</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>yynrhs</name><operator>)</operator></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>scanner</name></expr></argument>, <argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>YYFPRINTF</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>YY_REDUCE_PRINT</name><parameter_list>(<parameter><type><name>Rule</name></type></parameter>)</parameter_list></cpp:macro>          \
<cpp:value>do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, scanner, extra); \
} while (0)</cpp:value></cpp:define>

<comment type="block">/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */</comment>
<decl_stmt><decl><type><name>int</name></type> <name>yydebug</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* !YYDEBUG */</comment>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>YYDPRINTF</name><parameter_list>(<parameter><type><name>Args</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void) 0)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>YY_SYMBOL_PRINT</name><parameter_list>(<parameter><type><name>Title</name></type></parameter>, <parameter><type><name>Kind</name></type></parameter>, <parameter><type><name>Value</name></type></parameter>, <parameter><type><name>Location</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>YY_STACK_PRINT</name><parameter_list>(<parameter><type><name>Bottom</name></type></parameter>, <parameter><type><name>Top</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>YY_REDUCE_PRINT</name><parameter_list>(<parameter><type><name>Rule</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !YYDEBUG */</comment>


<comment type="block">/* YYINITDEPTH -- initial size of the parser's stacks.  */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>YYINITDEPTH</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>YYINITDEPTH</name></cpp:macro> <cpp:value>200</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM &lt; YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>YYMAXDEPTH</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>YYMAXDEPTH</name></cpp:macro> <cpp:value>10000</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>






<comment type="block">/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>yydestruct</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>yymsg</name></decl></parameter>,
            <parameter><decl><type><name>yysymbol_kind_t</name></type> <name>yykind</name></decl></parameter>, <parameter><decl><type><name>YYSTYPE</name> <modifier>*</modifier></type><name>yyvaluep</name></decl></parameter>, <parameter><decl><type><name>YYLTYPE</name> <modifier>*</modifier></type><name>yylocationp</name></decl></parameter>, <parameter><decl><type><name>ag_scanner_t</name></type> <name>scanner</name></decl></parameter>, <parameter><decl><type><name>cypher_yy_extra</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>YY_USE</name> <argument_list>(<argument><expr><name>yyvaluep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>YY_USE</name> <argument_list>(<argument><expr><name>yylocationp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>YY_USE</name> <argument_list>(<argument><expr><name>scanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>YY_USE</name> <argument_list>(<argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>yymsg</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>yymsg</name> <operator>=</operator> <literal type="string">"Deleting"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>YY_SYMBOL_PRINT</name> <argument_list>(<argument><expr><name>yymsg</name></expr></argument>, <argument><expr><name>yykind</name></expr></argument>, <argument><expr><name>yyvaluep</name></expr></argument>, <argument><expr><name>yylocationp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN</name></type>
  <name>YY_USE</name> <argument_list>(<argument><expr><name>yykind</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name>YY_IGNORE_MAYBE_UNINITIALIZED_END</name></expr></expr_stmt>
</block_content>}</block></function>






<comment type="block">/*----------.
| yyparse.  |
`----------*/</comment>

<function><type><name>int</name></type>
<name>yyparse</name> <parameter_list>(<parameter><decl><type><name>ag_scanner_t</name></type> <name>scanner</name></decl></parameter>, <parameter><decl><type><name>cypher_yy_extra</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<comment type="block">/* Lookahead token kind.  */</comment>
<decl_stmt><decl><type><name>int</name></type> <name>yychar</name></decl>;</decl_stmt>


<comment type="block">/* The semantic value of the lookahead symbol.  */</comment>
<comment type="block">/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */</comment>
<macro><name>YY_INITIAL_VALUE</name> <argument_list>(<argument>static YYSTYPE yyval_default;</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>YYSTYPE</name> <name>yylval</name></type> <name>YY_INITIAL_VALUE</name> <argument_list>(<argument><expr><operator>=</operator> <name>yyval_default</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="block">/* Location data for the lookahead symbol.  */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>YYLTYPE</name></type> <name>yyloc_default</name>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>YYLTYPE_IS_TRIVIAL</name> <operator>&amp;&amp;</operator> <name>YYLTYPE_IS_TRIVIAL</name></expr></cpp:if>
  <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
;</decl_stmt>
<decl_stmt><decl><type><name>YYLTYPE</name></type> <name>yylloc</name> <init>= <expr><name>yyloc_default</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Number of syntax errors so far.  */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>yynerrs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>yy_state_fast_t</name></type> <name>yystate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <comment type="block">/* Number of tokens to shift before error messages enabled.  */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>yyerrstatus</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */</comment>

    <comment type="block">/* Their size.  */</comment>
    <decl_stmt><decl><type><name>YYPTRDIFF_T</name></type> <name>yystacksize</name> <init>= <expr><name>YYINITDEPTH</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* The state stack: array, bottom, top.  */</comment>
    <decl_stmt><decl><type><name>yy_state_t</name></type> <name><name>yyssa</name><index>[<expr><name>YYINITDEPTH</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>yy_state_t</name> <modifier>*</modifier></type><name>yyss</name> <init>= <expr><name>yyssa</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>yy_state_t</name> <modifier>*</modifier></type><name>yyssp</name> <init>= <expr><name>yyss</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* The semantic value stack: array, bottom, top.  */</comment>
    <decl_stmt><decl><type><name>YYSTYPE</name></type> <name><name>yyvsa</name><index>[<expr><name>YYINITDEPTH</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>YYSTYPE</name> <modifier>*</modifier></type><name>yyvs</name> <init>= <expr><name>yyvsa</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>YYSTYPE</name> <modifier>*</modifier></type><name>yyvsp</name> <init>= <expr><name>yyvs</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* The location stack: array, bottom, top.  */</comment>
    <decl_stmt><decl><type><name>YYLTYPE</name></type> <name><name>yylsa</name><index>[<expr><name>YYINITDEPTH</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>YYLTYPE</name> <modifier>*</modifier></type><name>yyls</name> <init>= <expr><name>yylsa</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>YYLTYPE</name> <modifier>*</modifier></type><name>yylsp</name> <init>= <expr><name>yyls</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>yyn</name></decl>;</decl_stmt>
  <comment type="block">/* The return value of yyparse.  */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>yyresult</name></decl>;</decl_stmt>
  <comment type="block">/* Lookahead symbol kind.  */</comment>
  <decl_stmt><decl><type><name>yysymbol_kind_t</name></type> <name>yytoken</name> <init>= <expr><name>YYSYMBOL_YYEMPTY</name></expr></init></decl>;</decl_stmt>
  <comment type="block">/* The variables used to return semantic value and location from the
     action routines.  */</comment>
  <decl_stmt><decl><type><name>YYSTYPE</name></type> <name>yyval</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>YYLTYPE</name></type> <name>yyloc</name></decl>;</decl_stmt>

  <comment type="block">/* The locations where the error started and ended.  */</comment>
  <decl_stmt><decl><type><name>YYLTYPE</name></type> <name><name>yyerror_range</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YYPOPSTACK</name><parameter_list>(<parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>(yyvsp -= (N), yyssp -= (N), yylsp -= (N))</cpp:value></cpp:define>

  <comment type="block">/* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>yylen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>YYDPRINTF</name> <argument_list>(<argument><expr><operator>(</operator><name>stderr</name><operator>,</operator> <literal type="string">"Starting parse\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>yychar</name> <operator>=</operator> <name>YYEMPTY</name></expr>;</expr_stmt> <comment type="block">/* Cause a token to be read.  */</comment>

  <expr_stmt><expr><name><name>yylsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>yylloc</name></expr>;</expr_stmt>
  <goto>goto <name>yysetstate</name>;</goto>


<comment type="block">/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/</comment>
<label><name>yynewstate</name>:</label>
  <comment type="block">/* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */</comment>
  <expr_stmt><expr><name>yyssp</name><operator>++</operator></expr>;</expr_stmt>


<comment type="block">/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/</comment>
<label><name>yysetstate</name>:</label>
  <expr_stmt><expr><call><name>YYDPRINTF</name> <argument_list>(<argument><expr><operator>(</operator><name>stderr</name><operator>,</operator> <literal type="string">"Entering state %d\n"</literal><operator>,</operator> <name>yystate</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>YY_ASSERT</name> <argument_list>(<argument><expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>yystate</name> <operator>&amp;&amp;</operator> <name>yystate</name> <operator>&lt;</operator> <name>YYNSTATES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>YY_IGNORE_USELESS_CAST_BEGIN</name>
  <modifier>*</modifier></type><name>yyssp</name> <init>= <expr><call><name>YY_CAST</name> <argument_list>(<argument><expr><name>yy_state_t</name></expr></argument>, <argument><expr><name>yystate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>YY_IGNORE_USELESS_CAST_END</name></type>
  <name>YY_STACK_PRINT</name> <argument_list>(<argument><expr><name>yyss</name></expr></argument>, <argument><expr><name>yyssp</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>yyss</name> <operator>+</operator> <name>yystacksize</name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name>yyssp</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>defined</name> <name>yyoverflow</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>defined</name> <name>YYSTACK_RELOCATE</name></expr></cpp:if>
    <expr_stmt><expr><name>YYNOMEM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <block>{<block_content>
      <comment type="block">/* Get the current used size of the three stacks, in elements.  */</comment>
      <decl_stmt><decl><type><name>YYPTRDIFF_T</name></type> <name>yysize</name> <init>= <expr><name>yyssp</name> <operator>-</operator> <name>yyss</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<cpp:if># <cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>yyoverflow</name></expr></cpp:if>
      <block>{<block_content>
        <comment type="block">/* Give user a chance to reallocate the stack.  Use copies of
           these so that the &amp;'s don't force the real ones into
           memory.  */</comment>
        <decl_stmt><decl><type><name>yy_state_t</name> <modifier>*</modifier></type><name>yyss1</name> <init>= <expr><name>yyss</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>YYSTYPE</name> <modifier>*</modifier></type><name>yyvs1</name> <init>= <expr><name>yyvs</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>YYLTYPE</name> <modifier>*</modifier></type><name>yyls1</name> <init>= <expr><name>yyls</name></expr></init></decl>;</decl_stmt>

        <comment type="block">/* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */</comment>
        <expr_stmt><expr><call><name>yyoverflow</name> <argument_list>(<argument><expr><call><name>YY_</name><argument_list>(<argument><expr><literal type="string">"memory exhausted"</literal></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name>yyss1</name></expr></argument>, <argument><expr><name>yysize</name> <operator>*</operator> <call><name>YYSIZEOF</name> <argument_list>(<argument><expr><operator>*</operator><name>yyssp</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name>yyvs1</name></expr></argument>, <argument><expr><name>yysize</name> <operator>*</operator> <call><name>YYSIZEOF</name> <argument_list>(<argument><expr><operator>*</operator><name>yyvsp</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name>yyls1</name></expr></argument>, <argument><expr><name>yysize</name> <operator>*</operator> <call><name>YYSIZEOF</name> <argument_list>(<argument><expr><operator>*</operator><name>yylsp</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name>yystacksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>yyss</name> <operator>=</operator> <name>yyss1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>yyvs</name> <operator>=</operator> <name>yyvs1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>yyls</name> <operator>=</operator> <name>yyls1</name></expr>;</expr_stmt>
      </block_content>}</block>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* defined YYSTACK_RELOCATE */</comment>
      <comment type="block">/* Extend the stack our own way.  */</comment>
      <if_stmt><if>if <condition>(<expr><name>YYMAXDEPTH</name> <operator>&lt;=</operator> <name>yystacksize</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>YYNOMEM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>yystacksize</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>YYMAXDEPTH</name> <operator>&lt;</operator> <name>yystacksize</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>yystacksize</name> <operator>=</operator> <name>YYMAXDEPTH</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <block>{<block_content>
        <decl_stmt><decl><type><name>yy_state_t</name> <modifier>*</modifier></type><name>yyss1</name> <init>= <expr><name>yyss</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>union</name> <name>yyalloc</name></name> <modifier>*</modifier></type><name>yyptr</name> <init>=
          <expr><call><name>YY_CAST</name> <argument_list>(<argument><expr>union <name>yyalloc</name> <operator>*</operator></expr></argument>,
                   <argument><expr><call><name>YYSTACK_ALLOC</name> <argument_list>(<argument><expr><call><name>YY_CAST</name> <argument_list>(<argument><expr><name>YYSIZE_T</name></expr></argument>, <argument><expr><call><name>YYSTACK_BYTES</name> <argument_list>(<argument><expr><name>yystacksize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator> <name>yyptr</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><name>YYNOMEM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>YYSTACK_RELOCATE</name> <argument_list>(<argument><expr><name>yyss_alloc</name></expr></argument>, <argument><expr><name>yyss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>YYSTACK_RELOCATE</name> <argument_list>(<argument><expr><name>yyvs_alloc</name></expr></argument>, <argument><expr><name>yyvs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>YYSTACK_RELOCATE</name> <argument_list>(<argument><expr><name>yyls_alloc</name></expr></argument>, <argument><expr><name>yyls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#  <cpp:directive>undef</cpp:directive> <name>YYSTACK_RELOCATE</name></cpp:undef>
        <if_stmt><if>if <condition>(<expr><name>yyss1</name> <operator>!=</operator> <name>yyssa</name></expr>)</condition><block type="pseudo"><block_content>
          <expr_stmt><expr><call><name>YYSTACK_FREE</name> <argument_list>(<argument><expr><name>yyss1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

      <expr_stmt><expr><name>yyssp</name> <operator>=</operator> <name>yyss</name> <operator>+</operator> <name>yysize</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>yyvsp</name> <operator>=</operator> <name>yyvs</name> <operator>+</operator> <name>yysize</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>yylsp</name> <operator>=</operator> <name>yyls</name> <operator>+</operator> <name>yysize</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>YY_IGNORE_USELESS_CAST_BEGIN</name></type>
      <name>YYDPRINTF</name> <argument_list>(<argument><expr><operator>(</operator><name>stderr</name><operator>,</operator> <literal type="string">"Stack size increased to %ld\n"</literal><operator>,</operator>
                  <call><name>YY_CAST</name> <argument_list>(<argument><expr><name>long</name></expr></argument>, <argument><expr><name>yystacksize</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
      <macro><name>YY_IGNORE_USELESS_CAST_END</name></macro>

      <if_stmt><if>if <condition>(<expr><name>yyss</name> <operator>+</operator> <name>yystacksize</name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name>yyssp</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>YYABORT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !defined yyoverflow &amp;&amp; !defined YYSTACK_RELOCATE */</comment>


  <if_stmt><if>if <condition>(<expr><name>yystate</name> <operator>==</operator> <name>YYFINAL</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>YYACCEPT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <goto>goto <name>yybackup</name>;</goto>


<comment type="block">/*-----------.
| yybackup.  |
`-----------*/</comment>
<label><name>yybackup</name>:</label>
  <comment type="block">/* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */</comment>

  <comment type="block">/* First try to decide what to do without reference to lookahead token.  */</comment>
  <expr_stmt><expr><name>yyn</name> <operator>=</operator> <name><name>yypact</name><index>[<expr><name>yystate</name></expr>]</index></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>yypact_value_is_default</name> <argument_list>(<argument><expr><name>yyn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>yydefault</name>;</goto></block_content></block></if></if_stmt>

  <comment type="block">/* Not known =&gt; get a lookahead token if don't already have one.  */</comment>

  <comment type="block">/* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */</comment>
  <if_stmt><if>if <condition>(<expr><name>yychar</name> <operator>==</operator> <name>YYEMPTY</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>YYDPRINTF</name> <argument_list>(<argument><expr><operator>(</operator><name>stderr</name><operator>,</operator> <literal type="string">"Reading a token\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>yychar</name> <operator>=</operator> <call><name>yylex</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>yylval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yylloc</name></expr></argument>, <argument><expr><name>scanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>yychar</name> <operator>&lt;=</operator> <name>YYEOF</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>yychar</name> <operator>=</operator> <name>YYEOF</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>yytoken</name> <operator>=</operator> <name>YYSYMBOL_YYEOF</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>YYDPRINTF</name> <argument_list>(<argument><expr><operator>(</operator><name>stderr</name><operator>,</operator> <literal type="string">"Now at end of input.\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name>yychar</name> <operator>==</operator> <name>YYerror</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */</comment>
      <expr_stmt><expr><name>yychar</name> <operator>=</operator> <name>YYUNDEF</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>yytoken</name> <operator>=</operator> <name>YYSYMBOL_YYerror</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>yyerror_range</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>yylloc</name></expr>;</expr_stmt>
      <goto>goto <name>yyerrlab1</name>;</goto>
    </block_content>}</block></if>
  <else>else
    <block>{<block_content>
      <expr_stmt><expr><name>yytoken</name> <operator>=</operator> <call><name>YYTRANSLATE</name> <argument_list>(<argument><expr><name>yychar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>YY_SYMBOL_PRINT</name> <argument_list>(<argument><expr><literal type="string">"Next token is"</literal></expr></argument>, <argument><expr><name>yytoken</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yylval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yylloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

  <comment type="block">/* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */</comment>
  <expr_stmt><expr><name>yyn</name> <operator>+=</operator> <name>yytoken</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>yyn</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>YYLAST</name> <operator>&lt;</operator> <name>yyn</name> <operator>||</operator> <name><name>yycheck</name><index>[<expr><name>yyn</name></expr>]</index></name> <operator>!=</operator> <name>yytoken</name></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>yydefault</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>yyn</name> <operator>=</operator> <name><name>yytable</name><index>[<expr><name>yyn</name></expr>]</index></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>yyn</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>yytable_value_is_error</name> <argument_list>(<argument><expr><name>yyn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>yyerrlab</name>;</goto></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>yyn</name> <operator>=</operator> <operator>-</operator><name>yyn</name></expr>;</expr_stmt>
      <goto>goto <name>yyreduce</name>;</goto>
    </block_content>}</block></if></if_stmt>

  <comment type="block">/* Count tokens shifted since error; after three, turn off error
     status.  */</comment>
  <if_stmt><if>if <condition>(<expr><name>yyerrstatus</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>yyerrstatus</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="block">/* Shift the lookahead token.  */</comment>
  <expr_stmt><expr><call><name>YY_SYMBOL_PRINT</name> <argument_list>(<argument><expr><literal type="string">"Shifting"</literal></expr></argument>, <argument><expr><name>yytoken</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yylval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yylloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>yystate</name> <operator>=</operator> <name>yyn</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN</name>
  <operator>*</operator><operator>++</operator><name>yyvsp</name> <operator>=</operator> <name>yylval</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>YY_IGNORE_MAYBE_UNINITIALIZED_END</name>
  <operator>*</operator><operator>++</operator><name>yylsp</name> <operator>=</operator> <name>yylloc</name></expr>;</expr_stmt>

  <comment type="block">/* Discard the shifted token.  */</comment>
  <expr_stmt><expr><name>yychar</name> <operator>=</operator> <name>YYEMPTY</name></expr>;</expr_stmt>
  <goto>goto <name>yynewstate</name>;</goto>


<comment type="block">/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/</comment>
<label><name>yydefault</name>:</label>
  <expr_stmt><expr><name>yyn</name> <operator>=</operator> <name><name>yydefact</name><index>[<expr><name>yystate</name></expr>]</index></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>yyn</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>yyerrlab</name>;</goto></block_content></block></if></if_stmt>
  <goto>goto <name>yyreduce</name>;</goto>


<comment type="block">/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/</comment>
<label><name>yyreduce</name>:</label>
  <comment type="block">/* yyn is the number of a rule to reduce with.  */</comment>
  <expr_stmt><expr><name>yylen</name> <operator>=</operator> <name><name>yyr2</name><index>[<expr><name>yyn</name></expr>]</index></name></expr>;</expr_stmt>

  <comment type="block">/* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */</comment>
  <expr_stmt><expr><name>yyval</name> <operator>=</operator> <name><name>yyvsp</name><index>[<expr><literal type="number">1</literal><operator>-</operator><name>yylen</name></expr>]</index></name></expr>;</expr_stmt>

  <comment type="block">/* Default location. */</comment>
  <expr_stmt><expr><call><name>YYLLOC_DEFAULT</name> <argument_list>(<argument><expr><name>yyloc</name></expr></argument>, <argument><expr><operator>(</operator><name>yylsp</name> <operator>-</operator> <name>yylen</name><operator>)</operator></expr></argument>, <argument><expr><name>yylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>yyerror_range</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>yyloc</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>YY_REDUCE_PRINT</name> <argument_list>(<argument><expr><name>yyn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><name>yyn</name></expr>)</condition>
    <block>{<block_content>
  <case>case <expr><literal type="number">2</literal></expr>:</case> <comment type="block">/* stmt: cypher_stmt semicolon_opt  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>241</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <comment type="block">/*
             * If there is no transition for the lookahead token and the
             * clauses can be reduced to single_query, the parsing is
             * considered successful although it actually isn't.
             *
             * For example, when `MATCH ... CREATE ... MATCH ... ;` query is
             * being parsed, there is no transition for the second `MATCH ...`
             * because the query is wrong but `MATCH .. CREATE ...` is correct
             * so it will be reduced to query_part_last anyway even if there
             * are more tokens to read.
             *
             * Throw syntax error in this case.
             */</comment>
            <if_stmt><if>if <condition>(<expr><name>yychar</name> <operator>!=</operator> <name>YYEOF</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>yyerror</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yylloc</name></expr></argument>, <argument><expr><name>scanner</name></expr></argument>, <argument><expr><name>extra</name></expr></argument>, <argument><expr><literal type="string">"syntax error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><name><name>extra</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>extra</name><operator>-&gt;</operator><name>extra</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2075</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">3</literal></expr>:</case> <comment type="block">/* stmt: EXPLAIN cypher_stmt semicolon_opt  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>262</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ExplainStmt</name> <modifier>*</modifier></type><name>estmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>yychar</name> <operator>!=</operator> <name>YYEOF</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>yyerror</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yylloc</name></expr></argument>, <argument><expr><name>scanner</name></expr></argument>, <argument><expr><name>extra</name></expr></argument>, <argument><expr><literal type="string">"syntax error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><name><name>extra</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><name>estmt</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>ExplainStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>estmt</name><operator>-&gt;</operator><name>query</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>estmt</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>extra</name><operator>-&gt;</operator><name>extra</name></name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>estmt</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2093</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">4</literal></expr>:</case> <comment type="block">/* stmt: EXPLAIN VERBOSE cypher_stmt semicolon_opt  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>276</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ExplainStmt</name> <modifier>*</modifier></type><name>estmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>yychar</name> <operator>!=</operator> <name>YYEOF</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>yyerror</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yylloc</name></expr></argument>, <argument><expr><name>scanner</name></expr></argument>, <argument><expr><name>extra</name></expr></argument>, <argument><expr><literal type="string">"syntax error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><name><name>extra</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><name>estmt</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>ExplainStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>estmt</name><operator>-&gt;</operator><name>query</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>estmt</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><call><name>makeDefElem</name><argument_list>(<argument><expr><literal type="string">"verbose"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
            <expr_stmt><expr><name><name>extra</name><operator>-&gt;</operator><name>extra</name></name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>estmt</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2111</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">5</literal></expr>:</case> <comment type="block">/* stmt: EXPLAIN ANALYZE cypher_stmt semicolon_opt  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>290</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ExplainStmt</name> <modifier>*</modifier></type><name>estmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>yychar</name> <operator>!=</operator> <name>YYEOF</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>yyerror</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yylloc</name></expr></argument>, <argument><expr><name>scanner</name></expr></argument>, <argument><expr><name>extra</name></expr></argument>, <argument><expr><literal type="string">"syntax error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><name><name>extra</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><name>estmt</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>ExplainStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>estmt</name><operator>-&gt;</operator><name>query</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>estmt</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><call><name>makeDefElem</name><argument_list>(<argument><expr><literal type="string">"analyze"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
            <expr_stmt><expr><name><name>extra</name><operator>-&gt;</operator><name>extra</name></name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>estmt</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2129</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">6</literal></expr>:</case> <comment type="block">/* stmt: EXPLAIN ANALYZE VERBOSE cypher_stmt semicolon_opt  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>304</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ExplainStmt</name> <modifier>*</modifier></type><name>estmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>yychar</name> <operator>!=</operator> <name>YYEOF</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>yyerror</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yylloc</name></expr></argument>, <argument><expr><name>scanner</name></expr></argument>, <argument><expr><name>extra</name></expr></argument>, <argument><expr><literal type="string">"syntax error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><name><name>extra</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><name>estmt</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>ExplainStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>estmt</name><operator>-&gt;</operator><name>query</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>estmt</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <call><name>list_make2</name><argument_list>(<argument><expr><call><name>makeDefElem</name><argument_list>(<argument><expr><literal type="string">"analyze"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument><expr><call><name>makeDefElem</name><argument_list>(<argument><expr><literal type="string">"verbose"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
            <expr_stmt><expr><name><name>extra</name><operator>-&gt;</operator><name>extra</name></name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>estmt</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2148</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">7</literal></expr>:</case> <comment type="block">/* cypher_stmt: single_query  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>322</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>list</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2156</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">8</literal></expr>:</case> <comment type="block">/* cypher_stmt: cypher_stmt UNION all_or_distinct cypher_stmt  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>326</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>list</name></name><operator>)</operator> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><call><name>make_set_op</name><argument_list>(<argument><expr><name>SETOP_UNION</name></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>boolean</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2164</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">9</literal></expr>:</case> <comment type="block">/* call_stmt: CALL expr_func_norm  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>333</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>cypher_call</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>make_ag_node</name><argument_list>(<argument><expr><name>cypher_call</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>funccall</name></name> <operator>=</operator> <call><name>castNode</name> <argument_list>(<argument><expr><name>FuncCall</name></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2175</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">10</literal></expr>:</case> <comment type="block">/* call_stmt: CALL expr '.' expr  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>340</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>cypher_call</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>make_ag_node</name><argument_list>(<argument><expr><name>cypher_call</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><name>FuncCall</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IsA</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><name>ColumnRef</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>FuncCall</name> <modifier>*</modifier></type><name>fc</name> <init>= <expr><operator>(</operator><name>FuncCall</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>ColumnRef</name> <modifier>*</modifier></type><name>cr</name> <init>= <expr><operator>(</operator><name>ColumnRef</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>fields</name> <init>= <expr><name><name>cr</name><operator>-&gt;</operator><name>fields</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Value</name> <modifier>*</modifier></type><name>string</name> <init>= <expr><call><name>linitial</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="block">/*
                 * A function can only be qualified with a single schema. So, we
                 * check to see that the function isn't already qualified. There
                 * may be unforeseen cases where we might need to remove this in
                 * the future.
                 */</comment>
                <if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>fc</name><operator>-&gt;</operator><name>funcname</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>fc</name><operator>-&gt;</operator><name>funcname</name></name> <operator>=</operator> <call><name>lcons</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name><name>fc</name><operator>-&gt;</operator><name>funcname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name><operator>*</operator><operator>)</operator><name>fc</name></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"function already qualified"</literal></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>ag_scanner_errposition</name><argument_list>(<argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>scanner</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>funccall</name></name> <operator>=</operator> <name>fc</name></expr>;</expr_stmt>
                <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                        <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"CALL statement must be a qualified function"</literal></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>ag_scanner_errposition</name><argument_list>(<argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>scanner</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2218</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">11</literal></expr>:</case> <comment type="block">/* call_stmt: CALL expr_func_norm YIELD yield_item_list where_opt  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>379</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>cypher_call</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>make_ag_node</name><argument_list>(<argument><expr><name>cypher_call</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>funccall</name></name> <operator>=</operator> <call><name>castNode</name> <argument_list>(<argument><expr><name>FuncCall</name></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>yield_items</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>where</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2230</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">12</literal></expr>:</case> <comment type="block">/* call_stmt: CALL expr '.' expr YIELD yield_item_list where_opt  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>387</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>cypher_call</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>make_ag_node</name><argument_list>(<argument><expr><name>cypher_call</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><name>FuncCall</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IsA</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><name>ColumnRef</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>FuncCall</name> <modifier>*</modifier></type><name>fc</name> <init>= <expr><operator>(</operator><name>FuncCall</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>ColumnRef</name> <modifier>*</modifier></type><name>cr</name> <init>= <expr><operator>(</operator><name>ColumnRef</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>fields</name> <init>= <expr><name><name>cr</name><operator>-&gt;</operator><name>fields</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Value</name> <modifier>*</modifier></type><name>string</name> <init>= <expr><call><name>linitial</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="block">/*
                 * A function can only be qualified with a single schema. So, we
                 * check to see that the function isn't already qualified. There
                 * may be unforeseen cases where we might need to remove this in
                 * the future.
                 */</comment>
                <if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>fc</name><operator>-&gt;</operator><name>funcname</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>fc</name><operator>-&gt;</operator><name>funcname</name></name> <operator>=</operator> <call><name>lcons</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name><name>fc</name><operator>-&gt;</operator><name>funcname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name><operator>*</operator><operator>)</operator><name>fc</name></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"function already qualified"</literal></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>ag_scanner_errposition</name><argument_list>(<argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">6</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>scanner</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>funccall</name></name> <operator>=</operator> <name>fc</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>yield_items</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>where</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                        <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"CALL statement must be a qualified function"</literal></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>ag_scanner_errposition</name><argument_list>(<argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">6</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>scanner</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2275</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">13</literal></expr>:</case> <comment type="block">/* yield_item_list: yield_item  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>431</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>list</name></name><operator>)</operator> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2283</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">14</literal></expr>:</case> <comment type="block">/* yield_item_list: yield_item_list ',' yield_item  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>435</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>list</name></name><operator>)</operator> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2291</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">15</literal></expr>:</case> <comment type="block">/* yield_item: expr AS var_name  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>442</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ResTarget</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>ResTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>string</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>indirection</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2307</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">16</literal></expr>:</case> <comment type="block">/* yield_item: expr  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>454</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ResTarget</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>ResTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>indirection</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <operator>(</operator><name><name>yylsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2323</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">19</literal></expr>:</case> <comment type="block">/* all_or_distinct: ALL  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>475</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
    <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>boolean</name></name><operator>)</operator> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2331</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">20</literal></expr>:</case> <comment type="block">/* all_or_distinct: DISTINCT  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>479</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
    <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>boolean</name></name><operator>)</operator> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2339</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">21</literal></expr>:</case> <comment type="block">/* all_or_distinct: %empty  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>483</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
    <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>boolean</name></name><operator>)</operator> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2347</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">22</literal></expr>:</case> <comment type="block">/* single_query: query_part_init query_part_last  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>495</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>list</name></name><operator>)</operator> <operator>=</operator> <call><name>list_concat</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2355</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">23</literal></expr>:</case> <comment type="block">/* query_part_init: %empty  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>502</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>list</name></name><operator>)</operator> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2363</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">24</literal></expr>:</case> <comment type="block">/* query_part_init: query_part_init reading_clause_list updating_clause_list_0 with  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>506</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>list</name></name><operator>)</operator> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><call><name>list_concat</name><argument_list>(<argument><expr><call><name>list_concat</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2371</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">25</literal></expr>:</case> <comment type="block">/* query_part_last: reading_clause_list updating_clause_list_1  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>513</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>list</name></name><operator>)</operator> <operator>=</operator> <call><name>list_concat</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2379</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">26</literal></expr>:</case> <comment type="block">/* query_part_last: reading_clause_list updating_clause_list_0 return  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>517</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>list</name></name><operator>)</operator> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><call><name>list_concat</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2387</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">27</literal></expr>:</case> <comment type="block">/* query_part_last: reading_clause_list call_stmt  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>521</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>list</name></name><operator>)</operator> <operator>=</operator> <call><name>list_concat</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr></argument>, <argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2395</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">28</literal></expr>:</case> <comment type="block">/* reading_clause_list: %empty  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>528</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>list</name></name><operator>)</operator> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2403</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">29</literal></expr>:</case> <comment type="block">/* reading_clause_list: reading_clause_list reading_clause  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>532</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>list</name></name><operator>)</operator> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2411</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">33</literal></expr>:</case> <comment type="block">/* updating_clause_list_0: %empty  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>545</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>list</name></name><operator>)</operator> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2419</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">35</literal></expr>:</case> <comment type="block">/* updating_clause_list_1: updating_clause  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>553</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>list</name></name><operator>)</operator> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2427</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">36</literal></expr>:</case> <comment type="block">/* updating_clause_list_1: updating_clause_list_1 updating_clause  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>557</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>list</name></name><operator>)</operator> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2435</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">42</literal></expr>:</case> <comment type="block">/* cypher_varlen_opt: '*' cypher_range_opt  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>572</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>A_Indices</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><operator>(</operator><name>A_Indices</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>lidx</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>lidx</name></name> <operator>=</operator> <call><name>make_int_const</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>n</name><operator>-&gt;</operator><name>uidx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>A_Const</name>    <modifier>*</modifier></type><name>lidx</name> <init>= <expr><operator>(</operator><name>A_Const</name> <operator>*</operator><operator>)</operator> <name><name>n</name><operator>-&gt;</operator><name>lidx</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>A_Const</name>    <modifier>*</modifier></type><name>uidx</name> <init>= <expr><operator>(</operator><name>A_Const</name> <operator>*</operator><operator>)</operator> <name><name>n</name><operator>-&gt;</operator><name>uidx</name></name></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>lidx</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>val</name><operator>.</operator><name>ival</name></name> <operator>&gt;</operator> <name><name>uidx</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>val</name><operator>.</operator><name>ival</name></name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                                    <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid range"</literal></expr></argument>)</argument_list></call><operator>,</operator>
                                    <call><name>ag_scanner_errposition</name><argument_list>(<argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>scanner</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>n</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2458</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">43</literal></expr>:</case> <comment type="block">/* cypher_varlen_opt: %empty  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>591</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2466</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">44</literal></expr>:</case> <comment type="block">/* cypher_range_opt: cypher_range_idx  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>598</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>A_Indices</name>  <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>A_Indices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>lidx</name></name> <operator>=</operator> <call><name>copyObject</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>uidx</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>n</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2479</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">45</literal></expr>:</case> <comment type="block">/* cypher_range_opt: cypher_range_idx_opt DOT_DOT cypher_range_idx_opt  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>607</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>A_Indices</name>  <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>A_Indices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>lidx</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>uidx</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>n</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2492</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">46</literal></expr>:</case> <comment type="block">/* cypher_range_opt: %empty  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>616</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>A_Indices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2500</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">47</literal></expr>:</case> <comment type="block">/* cypher_range_idx: Iconst  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>623</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <call><name>make_int_const</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>integer</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2508</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">49</literal></expr>:</case> <comment type="block">/* cypher_range_idx_opt: %empty  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>630</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
                                                        <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2514</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">51</literal></expr>:</case> <comment type="block">/* return: RETURN DISTINCT return_item_list order_by_opt skip_opt limit_opt  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>641</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>cypher_return</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>make_ag_node</name><argument_list>(<argument><expr><name>cypher_return</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>distinct</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>items</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>order_by</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>skip</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>limit</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2531</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">52</literal></expr>:</case> <comment type="block">/* return: RETURN return_item_list order_by_opt skip_opt limit_opt  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>654</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>cypher_return</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>make_ag_node</name><argument_list>(<argument><expr><name>cypher_return</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>distinct</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>items</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>order_by</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>skip</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>limit</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2548</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">53</literal></expr>:</case> <comment type="block">/* return_item_list: return_item  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>671</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>list</name></name><operator>)</operator> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2556</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">54</literal></expr>:</case> <comment type="block">/* return_item_list: return_item_list ',' return_item  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>675</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>list</name></name><operator>)</operator> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2564</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">55</literal></expr>:</case> <comment type="block">/* return_item: expr AS var_name  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>682</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ResTarget</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>ResTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>string</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>indirection</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2580</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">56</literal></expr>:</case> <comment type="block">/* return_item: expr  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>694</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ResTarget</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>ResTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>indirection</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <operator>(</operator><name><name>yylsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2596</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">57</literal></expr>:</case> <comment type="block">/* return_item: '*'  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>706</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ColumnRef</name> <modifier>*</modifier></type><name>cr</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ResTarget</name> <modifier>*</modifier></type><name>rt</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>cr</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>ColumnRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cr</name><operator>-&gt;</operator><name>fields</name></name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><call><name>makeNode</name><argument_list>(<argument><expr><name>A_Star</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cr</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <operator>(</operator><name><name>yylsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><name>rt</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>ResTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>indirection</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>cr</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>rt</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <operator>(</operator><name><name>yylsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>rt</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2617</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">58</literal></expr>:</case> <comment type="block">/* order_by_opt: %empty  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>726</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>list</name></name><operator>)</operator> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2625</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">59</literal></expr>:</case> <comment type="block">/* order_by_opt: ORDER BY sort_item_list  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>730</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>list</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2633</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">60</literal></expr>:</case> <comment type="block">/* sort_item_list: sort_item  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>737</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>list</name></name><operator>)</operator> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2641</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">61</literal></expr>:</case> <comment type="block">/* sort_item_list: sort_item_list ',' sort_item  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>741</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>list</name></name><operator>)</operator> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2649</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">62</literal></expr>:</case> <comment type="block">/* sort_item: expr order_opt  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>748</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>SortBy</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>SortBy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>sortby_dir</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>integer</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>sortby_nulls</name></name> <operator>=</operator> <name>SORTBY_NULLS_DEFAULT</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>useOp</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <comment type="line">// no operator</comment>

            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2666</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">63</literal></expr>:</case> <comment type="block">/* order_opt: %empty  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>764</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>integer</name></name><operator>)</operator> <operator>=</operator> <name>SORTBY_DEFAULT</name></expr>;</expr_stmt> <comment type="line">// is the same with SORTBY_ASC</comment>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2674</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">64</literal></expr>:</case> <comment type="block">/* order_opt: ASC  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>768</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>integer</name></name><operator>)</operator> <operator>=</operator> <name>SORTBY_ASC</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2682</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">65</literal></expr>:</case> <comment type="block">/* order_opt: ASCENDING  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>772</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>integer</name></name><operator>)</operator> <operator>=</operator> <name>SORTBY_ASC</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2690</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">66</literal></expr>:</case> <comment type="block">/* order_opt: DESC  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>776</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>integer</name></name><operator>)</operator> <operator>=</operator> <name>SORTBY_DESC</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2698</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">67</literal></expr>:</case> <comment type="block">/* order_opt: DESCENDING  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>780</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>integer</name></name><operator>)</operator> <operator>=</operator> <name>SORTBY_DESC</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2706</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">68</literal></expr>:</case> <comment type="block">/* skip_opt: %empty  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>787</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2714</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">69</literal></expr>:</case> <comment type="block">/* skip_opt: SKIP expr  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>791</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2722</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">70</literal></expr>:</case> <comment type="block">/* limit_opt: %empty  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>798</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2730</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">71</literal></expr>:</case> <comment type="block">/* limit_opt: LIMIT expr  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>802</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2738</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">72</literal></expr>:</case> <comment type="block">/* with: WITH DISTINCT return_item_list order_by_opt skip_opt limit_opt where_opt  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>809</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>li</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>cypher_with</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

            <comment type="line">// check expressions are aliased</comment>
            <macro><name>foreach</name> <argument_list>(<argument>li</argument>, <argument>(yyvsp[-<literal type="number">4</literal>].list)</argument>)</argument_list></macro>
            <block>{<block_content>
                <decl_stmt><decl><type><name>ResTarget</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>li</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// variable does not have to be aliased</comment>
                <if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><name>ColumnRef</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
                    <continue>continue;</continue></block_content></block></if></if_stmt>

                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                        <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"expression item must be aliased"</literal></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Items can be aliased by using AS."</literal></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>ag_scanner_errposition</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>location</name></name></expr></argument>, <argument><expr><name>scanner</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>make_ag_node</name><argument_list>(<argument><expr><name>cypher_with</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>distinct</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>items</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>order_by</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>skip</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>limit</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>where</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2773</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">73</literal></expr>:</case> <comment type="block">/* with: WITH return_item_list order_by_opt skip_opt limit_opt where_opt  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>841</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>li</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>cypher_with</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

            <comment type="line">// check expressions are aliased</comment>
            <macro><name>foreach</name> <argument_list>(<argument>li</argument>, <argument>(yyvsp[-<literal type="number">4</literal>].list)</argument>)</argument_list></macro>
            <block>{<block_content>
                <decl_stmt><decl><type><name>ResTarget</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>li</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// variable does not have to be aliased</comment>
                <if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><name>ColumnRef</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition><block type="pseudo"><block_content>
                    <continue>continue;</continue></block_content></block></if></if_stmt>

                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                        <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"expression item must be aliased"</literal></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Items can be aliased by using AS."</literal></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>ag_scanner_errposition</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>location</name></name></expr></argument>, <argument><expr><name>scanner</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>make_ag_node</name><argument_list>(<argument><expr><name>cypher_with</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>distinct</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>items</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>order_by</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>skip</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>limit</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>where</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2808</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">74</literal></expr>:</case> <comment type="block">/* match: optional_opt MATCH pattern where_opt  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>879</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>cypher_match</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>make_ag_node</name><argument_list>(<argument><expr><name>cypher_match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>optional</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>boolean</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>pattern</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>where</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2823</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">75</literal></expr>:</case> <comment type="block">/* optional_opt: OPTIONAL  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>893</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>boolean</name></name><operator>)</operator> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2831</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">76</literal></expr>:</case> <comment type="block">/* optional_opt: %empty  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>897</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>boolean</name></name><operator>)</operator> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2839</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">77</literal></expr>:</case> <comment type="block">/* unwind: UNWIND expr AS var_name  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>905</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ResTarget</name>  <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>cypher_unwind</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>ResTarget</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>string</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>make_ag_node</name><argument_list>(<argument><expr><name>cypher_unwind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>target</name></name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>n</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2857</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">78</literal></expr>:</case> <comment type="block">/* create: CREATE pattern  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>925</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>cypher_create</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>make_ag_node</name><argument_list>(<argument><expr><name>cypher_create</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>pattern</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2870</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">79</literal></expr>:</case> <comment type="block">/* set: SET set_item_list  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>941</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>cypher_set</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>make_ag_node</name><argument_list>(<argument><expr><name>cypher_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>items</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>is_remove</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2885</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">80</literal></expr>:</case> <comment type="block">/* set_item_list: set_item  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>955</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>list</name></name><operator>)</operator> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2893</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">81</literal></expr>:</case> <comment type="block">/* set_item_list: set_item_list ',' set_item  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>959</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>list</name></name><operator>)</operator> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2901</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">82</literal></expr>:</case> <comment type="block">/* set_item: expr '=' expr  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>966</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>cypher_set_item</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>make_ag_node</name><argument_list>(<argument><expr><name>cypher_set_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>prop</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>expr</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>is_add</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2917</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">83</literal></expr>:</case> <comment type="block">/* set_item: expr PLUS_EQ expr  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>978</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>cypher_set_item</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>make_ag_node</name><argument_list>(<argument><expr><name>cypher_set_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>prop</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>expr</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>is_add</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2933</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">84</literal></expr>:</case> <comment type="block">/* remove: REMOVE remove_item_list  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>993</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>cypher_set</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>make_ag_node</name><argument_list>(<argument><expr><name>cypher_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>items</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>is_remove</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
             <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2948</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">85</literal></expr>:</case> <comment type="block">/* remove_item_list: remove_item  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1007</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>list</name></name><operator>)</operator> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2956</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">86</literal></expr>:</case> <comment type="block">/* remove_item_list: remove_item_list ',' remove_item  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1011</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>list</name></name><operator>)</operator> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2964</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">87</literal></expr>:</case> <comment type="block">/* remove_item: expr  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1018</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>cypher_set_item</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>make_ag_node</name><argument_list>(<argument><expr><name>cypher_set_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>prop</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>expr</name></name> <operator>=</operator> <call><name>make_null_const</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>is_add</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2979</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">88</literal></expr>:</case> <comment type="block">/* delete: detach_opt DELETE expr_list  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1036</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>cypher_delete</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>make_ag_node</name><argument_list>(<argument><expr><name>cypher_delete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>detach</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>boolean</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>exprs</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>2994</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">89</literal></expr>:</case> <comment type="block">/* detach_opt: DETACH  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1050</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>boolean</name></name><operator>)</operator> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3002</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">90</literal></expr>:</case> <comment type="block">/* detach_opt: %empty  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1054</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>boolean</name></name><operator>)</operator> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3010</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">91</literal></expr>:</case> <comment type="block">/* merge: MERGE path  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1064</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>cypher_merge</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>make_ag_node</name><argument_list>(<argument><expr><name>cypher_merge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3023</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">92</literal></expr>:</case> <comment type="block">/* where_opt: %empty  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1080</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3031</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">93</literal></expr>:</case> <comment type="block">/* where_opt: WHERE expr  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1084</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3039</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">94</literal></expr>:</case> <comment type="block">/* pattern: path  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1096</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>list</name></name><operator>)</operator> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3047</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">95</literal></expr>:</case> <comment type="block">/* pattern: pattern ',' path  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1100</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>list</name></name><operator>)</operator> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3055</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">97</literal></expr>:</case> <comment type="block">/* path: var_name '=' anonymous_path  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1109</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>cypher_path</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>cypher_path</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>var_name</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>string</name><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3068</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">98</literal></expr>:</case> <comment type="block">/* anonymous_path: simple_path_opt_parens  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1122</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>cypher_path</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>make_ag_node</name><argument_list>(<argument><expr><name>cypher_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>var_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <operator>(</operator><name><name>yylsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3083</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">100</literal></expr>:</case> <comment type="block">/* simple_path_opt_parens: '(' simple_path ')'  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1137</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>list</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3091</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">101</literal></expr>:</case> <comment type="block">/* simple_path: path_node  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1144</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>list</name></name><operator>)</operator> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3099</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">102</literal></expr>:</case> <comment type="block">/* simple_path: simple_path path_relationship path_node  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1148</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>cypher_relationship</name> <modifier>*</modifier></type><name>cr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <comment type="block">/* get the relationship */</comment>
            <expr_stmt><expr><name>cr</name> <operator>=</operator> <operator>(</operator><name>cypher_relationship</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>

            <comment type="block">/* if this is a VLE relation node */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>cr</name><operator>-&gt;</operator><name>varlen</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <comment type="block">/* build the VLE relation */</comment>
                <expr_stmt><expr><name>cr</name> <operator>=</operator> <call><name>build_VLE_relation</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr></argument>, <argument><expr><name>cr</name></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block">/* return the VLE relation in the path */</comment>
                <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>list</name></name><operator>)</operator> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><call><name>lappend</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr></argument>, <argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <comment type="block">/* otherwise, it is a regular relationship node */</comment>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>list</name></name><operator>)</operator> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><call><name>lappend</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3125</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">103</literal></expr>:</case> <comment type="block">/* path_node: '(' var_name_opt label_opt properties_opt ')'  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1173</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>cypher_node</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>make_ag_node</name><argument_list>(<argument><expr><name>cypher_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>string</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>label</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>string</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>props</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3141</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">104</literal></expr>:</case> <comment type="block">/* path_relationship: '-' path_relationship_body '-'  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1188</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>cypher_relationship</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><operator>(</operator><name>cypher_relationship</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>dir</name></name> <operator>=</operator> <name>CYPHER_REL_DIR_NONE</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3154</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">105</literal></expr>:</case> <comment type="block">/* path_relationship: '-' path_relationship_body '-' '&gt;'  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1197</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>cypher_relationship</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><operator>(</operator><name>cypher_relationship</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>dir</name></name> <operator>=</operator> <name>CYPHER_REL_DIR_RIGHT</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3167</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">106</literal></expr>:</case> <comment type="block">/* path_relationship: '&lt;' '-' path_relationship_body '-'  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1206</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>cypher_relationship</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><operator>(</operator><name>cypher_relationship</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>dir</name></name> <operator>=</operator> <name>CYPHER_REL_DIR_LEFT</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3180</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">107</literal></expr>:</case> <comment type="block">/* path_relationship_body: '[' var_name_opt label_opt cypher_varlen_opt properties_opt ']'  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1218</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>cypher_relationship</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>make_ag_node</name><argument_list>(<argument><expr><name>cypher_relationship</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>string</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>label</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>string</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>varlen</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>props</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3196</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">108</literal></expr>:</case> <comment type="block">/* path_relationship_body: %empty  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1231</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>cypher_relationship</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>make_ag_node</name><argument_list>(<argument><expr><name>cypher_relationship</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>label</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>varlen</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>props</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3212</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">109</literal></expr>:</case> <comment type="block">/* label_opt: %empty  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1246</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>string</name></name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3220</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">110</literal></expr>:</case> <comment type="block">/* label_opt: ':' label_name  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1250</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>string</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>string</name><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3228</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">111</literal></expr>:</case> <comment type="block">/* properties_opt: %empty  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1257</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3236</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">113</literal></expr>:</case> <comment type="block">/* properties_opt: PARAMETER  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1262</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>cypher_param</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>make_ag_node</name><argument_list>(<argument><expr><name>cypher_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>string</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <operator>(</operator><name><name>yylsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3250</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">114</literal></expr>:</case> <comment type="block">/* expr: expr OR expr  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1280</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <call><name>make_or_expr</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3258</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">115</literal></expr>:</case> <comment type="block">/* expr: expr AND expr  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1284</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <call><name>make_and_expr</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3266</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">116</literal></expr>:</case> <comment type="block">/* expr: expr XOR expr  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1288</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <call><name>make_xor_expr</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3274</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">117</literal></expr>:</case> <comment type="block">/* expr: NOT expr  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1292</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <call><name>make_not_expr</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3282</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">118</literal></expr>:</case> <comment type="block">/* expr: expr '=' expr  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1296</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <call><name>build_comparison_expression</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3290</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">119</literal></expr>:</case> <comment type="block">/* expr: expr NOT_EQ expr  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1300</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <call><name>build_comparison_expression</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"&lt;&gt;"</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3298</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">120</literal></expr>:</case> <comment type="block">/* expr: expr '&lt;' expr  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1304</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <call><name>build_comparison_expression</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"&lt;"</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3306</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">121</literal></expr>:</case> <comment type="block">/* expr: expr LT_EQ expr  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1308</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <call><name>build_comparison_expression</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"&lt;="</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3314</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">122</literal></expr>:</case> <comment type="block">/* expr: expr '&gt;' expr  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1312</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <call><name>build_comparison_expression</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3322</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">123</literal></expr>:</case> <comment type="block">/* expr: expr GT_EQ expr  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1316</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <call><name>build_comparison_expression</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"&gt;="</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3330</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">124</literal></expr>:</case> <comment type="block">/* expr: expr '+' expr  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1320</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><call><name>makeSimpleA_Expr</name><argument_list>(<argument><expr><name>AEXPR_OP</name></expr></argument>, <argument><expr><literal type="string">"+"</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3338</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">125</literal></expr>:</case> <comment type="block">/* expr: expr '-' expr  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1324</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><call><name>makeSimpleA_Expr</name><argument_list>(<argument><expr><name>AEXPR_OP</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3346</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">126</literal></expr>:</case> <comment type="block">/* expr: expr '*' expr  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1328</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><call><name>makeSimpleA_Expr</name><argument_list>(<argument><expr><name>AEXPR_OP</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3354</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">127</literal></expr>:</case> <comment type="block">/* expr: expr '/' expr  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1332</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><call><name>makeSimpleA_Expr</name><argument_list>(<argument><expr><name>AEXPR_OP</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3362</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">128</literal></expr>:</case> <comment type="block">/* expr: expr '%' expr  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1336</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><call><name>makeSimpleA_Expr</name><argument_list>(<argument><expr><name>AEXPR_OP</name></expr></argument>, <argument><expr><literal type="string">"%"</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3370</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">129</literal></expr>:</case> <comment type="block">/* expr: expr '^' expr  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1340</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><call><name>makeSimpleA_Expr</name><argument_list>(<argument><expr><name>AEXPR_OP</name></expr></argument>, <argument><expr><literal type="string">"^"</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3378</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">130</literal></expr>:</case> <comment type="block">/* expr: expr IN expr  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1344</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><call><name>makeSimpleA_Expr</name><argument_list>(<argument><expr><name>AEXPR_IN</name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3386</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">131</literal></expr>:</case> <comment type="block">/* expr: expr IS NULL_P  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1348</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>NullTest</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>NullTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>nulltesttype</name></name> <operator>=</operator> <name>IS_NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3401</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">132</literal></expr>:</case> <comment type="block">/* expr: expr IS NOT NULL_P  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1359</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>NullTest</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>NullTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>nulltesttype</name></name> <operator>=</operator> <name>IS_NOT_NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3416</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">133</literal></expr>:</case> <comment type="block">/* expr: '-' expr  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1370</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <call><name>do_negate</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3424</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">134</literal></expr>:</case> <comment type="block">/* expr: expr STARTS WITH expr  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1374</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>cypher_string_match</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>make_ag_node</name><argument_list>(<argument><expr><name>cypher_string_match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>operation</name></name> <operator>=</operator> <name>CSMO_STARTS_WITH</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>lhs</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>rhs</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3440</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">135</literal></expr>:</case> <comment type="block">/* expr: expr ENDS WITH expr  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1386</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>cypher_string_match</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>make_ag_node</name><argument_list>(<argument><expr><name>cypher_string_match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>operation</name></name> <operator>=</operator> <name>CSMO_ENDS_WITH</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>lhs</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>rhs</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3456</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">136</literal></expr>:</case> <comment type="block">/* expr: expr CONTAINS expr  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1398</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>cypher_string_match</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>make_ag_node</name><argument_list>(<argument><expr><name>cypher_string_match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>operation</name></name> <operator>=</operator> <name>CSMO_CONTAINS</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>lhs</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>rhs</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3472</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">137</literal></expr>:</case> <comment type="block">/* expr: expr EQ_TILDE expr  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1410</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <call><name>make_function_expr</name><argument_list>(<argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><call><name>makeString</name><argument_list>(<argument><expr><literal type="string">"eq_tilde"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><call><name>list_make2</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3481</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">138</literal></expr>:</case> <comment type="block">/* expr: expr '[' expr ']'  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1415</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>A_Indices</name> <modifier>*</modifier></type><name>i</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>A_Indices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>is_slice</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>lidx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>uidx</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <call><name>append_indirection</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3496</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">139</literal></expr>:</case> <comment type="block">/* expr: expr '[' expr_opt DOT_DOT expr_opt ']'  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1426</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>A_Indices</name> <modifier>*</modifier></type><name>i</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>A_Indices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>is_slice</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>lidx</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>i</name><operator>-&gt;</operator><name>uidx</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <call><name>append_indirection</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3511</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">140</literal></expr>:</case> <comment type="block">/* expr: expr '.' expr  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1444</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <comment type="block">/*
             * This checks for the grammar rule -
             *     expr '.' property_key_name
             * where the expr can be anything.
             * Note: A property_key_name ends up as a ColumnRef.
             * Note: We restrict some of what the expr can be, for now. More may
             *       need to be added later to loosen the restrictions. Or, it
             *       may need to be removed.
             */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><name>ColumnRef</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                <operator>(</operator><call><name>IsA</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><name>ExtensibleNode</name></expr></argument>)</argument_list></call> <operator>||</operator>
                 <call><name>IsA</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><name>ColumnRef</name></expr></argument>)</argument_list></call> <operator>||</operator>
                 <call><name>IsA</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><name>A_Indirection</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>ColumnRef</name> <modifier>*</modifier></type><name>cr</name> <init>= <expr><operator>(</operator><name>ColumnRef</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>fields</name> <init>= <expr><name><name>cr</name><operator>-&gt;</operator><name>fields</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Value</name> <modifier>*</modifier></type><name>string</name> <init>= <expr><call><name>linitial</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <call><name>append_indirection</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>Node</name><operator>*</operator><operator>)</operator><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <comment type="block">/*
             * This checks for the grammar rule -
             *    symbolic_name '.' expr
             * Where expr is a function call.
             * Note: symbolic_name ends up as a ColumnRef
             */</comment>
            <if type="elseif">else if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><name>FuncCall</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IsA</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><name>ColumnRef</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>FuncCall</name> <modifier>*</modifier></type><name>fc</name> <init>= <expr><operator>(</operator><name>FuncCall</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>ColumnRef</name> <modifier>*</modifier></type><name>cr</name> <init>= <expr><operator>(</operator><name>ColumnRef</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>fields</name> <init>= <expr><name><name>cr</name><operator>-&gt;</operator><name>fields</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Value</name> <modifier>*</modifier></type><name>string</name> <init>= <expr><call><name>linitial</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="block">/*
                 * A function can only be qualified with a single schema. So, we
                 * check to see that the function isn't already qualified. There
                 * may be unforeseen cases where we might need to remove this in
                 * the future.
                 */</comment>
                <if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>fc</name><operator>-&gt;</operator><name>funcname</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>fc</name><operator>-&gt;</operator><name>funcname</name></name> <operator>=</operator> <call><name>lcons</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name><name>fc</name><operator>-&gt;</operator><name>funcname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name><operator>*</operator><operator>)</operator><name>fc</name></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"function already qualified"</literal></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>ag_scanner_errposition</name><argument_list>(<argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>scanner</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block></if>
            <comment type="block">/* allow a function to be used as a parent of an indirection */</comment>
            <if type="elseif">else if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><name>FuncCall</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IsA</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><name>ColumnRef</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>ColumnRef</name> <modifier>*</modifier></type><name>cr</name> <init>= <expr><operator>(</operator><name>ColumnRef</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>fields</name> <init>= <expr><name><name>cr</name><operator>-&gt;</operator><name>fields</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Value</name> <modifier>*</modifier></type><name>string</name> <init>= <expr><call><name>linitial</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <call><name>append_indirection</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>Node</name><operator>*</operator><operator>)</operator><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><name>FuncCall</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IsA</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><name>A_Indirection</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                            <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"not supported A_Indirection indirection"</literal></expr></argument>)</argument_list></call><operator>,</operator>
                             <call><name>ag_scanner_errposition</name><argument_list>(<argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>scanner</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <comment type="block">/*
             * All other types of expression indirections are currently not
             * supported
             */</comment>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                        <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid indirection syntax"</literal></expr></argument>)</argument_list></call><operator>,</operator>
                         <call><name>ag_scanner_errposition</name><argument_list>(<argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>scanner</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3593</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">141</literal></expr>:</case> <comment type="block">/* expr: expr TYPECAST symbolic_name  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1522</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <call><name>make_typecast_expr</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>string</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3601</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">143</literal></expr>:</case> <comment type="block">/* expr_opt: %empty  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1530</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3609</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">145</literal></expr>:</case> <comment type="block">/* expr_list: expr  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1538</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>list</name></name><operator>)</operator> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3617</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">146</literal></expr>:</case> <comment type="block">/* expr_list: expr_list ',' expr  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1542</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>list</name></name><operator>)</operator> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3625</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">147</literal></expr>:</case> <comment type="block">/* expr_list_opt: %empty  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1549</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>list</name></name><operator>)</operator> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3633</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">151</literal></expr>:</case> <comment type="block">/* expr_func_norm: func_name '(' ')'  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1562</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <call><name>make_function_expr</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr></argument>, <argument><expr><name>NIL</name></expr></argument>, <argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3641</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">152</literal></expr>:</case> <comment type="block">/* expr_func_norm: func_name '(' expr_list ')'  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1566</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <call><name>make_function_expr</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3649</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">153</literal></expr>:</case> <comment type="block">/* expr_func_norm: func_name '(' '*' ')'  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1571</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <comment type="block">/*
             * We consider AGGREGATE(*) to invoke a parameterless
             * aggregate.  This does the right thing for COUNT(*),
             * and there are no other aggregates in SQL that accept
             * '*' as parameter.
             *
             * The FuncCall node is also marked agg_star = true,
             * so that later processing can detect what the argument
             * really was.
             */</comment>
             <decl_stmt><decl><type><name>FuncCall</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><operator>(</operator><name>FuncCall</name> <operator>*</operator><operator>)</operator><call><name>make_function_expr</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr></argument>, <argument><expr><name>NIL</name></expr></argument>, <argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
             <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>agg_star</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
             <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</expr_stmt>
         </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3669</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">154</literal></expr>:</case> <comment type="block">/* expr_func_norm: func_name '(' DISTINCT expr_list ')'  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1587</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>FuncCall</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><operator>(</operator><name>FuncCall</name> <operator>*</operator><operator>)</operator><call><name>make_function_expr</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>agg_order</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>agg_distinct</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3680</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">155</literal></expr>:</case> <comment type="block">/* expr_func_subexpr: COALESCE '(' expr_list ')'  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1597</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>CoalesceExpr</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>CoalesceExpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>c</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3693</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">156</literal></expr>:</case> <comment type="block">/* expr_func_subexpr: EXISTS '(' anonymous_path ')'  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1606</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>cypher_sub_pattern</name> <modifier>*</modifier></type><name>sub</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>SubLink</name>    <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>sub</name> <operator>=</operator> <call><name>make_ag_node</name><argument_list>(<argument><expr><name>cypher_sub_pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>kind</name></name> <operator>=</operator> <name>CSP_EXISTS</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>pattern</name></name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>SubLink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>subLinkType</name></name> <operator>=</operator> <name>EXISTS_SUBLINK</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>subLinkId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>testexpr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>operName</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>subselect</name></name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>sub</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>n</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3715</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">157</literal></expr>:</case> <comment type="block">/* expr_func_subexpr: EXISTS '(' property_value ')'  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1624</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <call><name>make_function_expr</name><argument_list>(<argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><call><name>makeString</name><argument_list>(<argument><expr><literal type="string">"exists"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3724</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">158</literal></expr>:</case> <comment type="block">/* property_value: expr_var '.' property_key_name  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1632</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <call><name>append_indirection</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><call><name>makeString</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>string</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3732</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">160</literal></expr>:</case> <comment type="block">/* expr_atom: PARAMETER  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1640</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>cypher_param</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>make_ag_node</name><argument_list>(<argument><expr><name>cypher_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>string</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <operator>(</operator><name><name>yylsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3746</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">161</literal></expr>:</case> <comment type="block">/* expr_atom: '(' expr ')'  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1650</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3754</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">165</literal></expr>:</case> <comment type="block">/* expr_literal: INTEGER  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1660</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <call><name>make_int_const</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>integer</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3762</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">166</literal></expr>:</case> <comment type="block">/* expr_literal: DECIMAL  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1664</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <call><name>make_float_const</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>string</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3770</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">167</literal></expr>:</case> <comment type="block">/* expr_literal: STRING  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1668</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <call><name>make_string_const</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>string</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3778</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">168</literal></expr>:</case> <comment type="block">/* expr_literal: TRUE_P  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1672</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <call><name>make_bool_const</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3786</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">169</literal></expr>:</case> <comment type="block">/* expr_literal: FALSE_P  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1676</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <call><name>make_bool_const</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3794</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">170</literal></expr>:</case> <comment type="block">/* expr_literal: NULL_P  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1680</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <call><name>make_null_const</name><argument_list>(<argument><expr><operator>(</operator><name><name>yylsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3802</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">173</literal></expr>:</case> <comment type="block">/* map: '{' map_keyval_list_opt '}'  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1689</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>cypher_map</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>make_ag_node</name><argument_list>(<argument><expr><name>cypher_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>keyvals</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3815</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">174</literal></expr>:</case> <comment type="block">/* map_keyval_list_opt: %empty  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1701</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>list</name></name><operator>)</operator> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3823</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">176</literal></expr>:</case> <comment type="block">/* map_keyval_list: property_key_name ':' expr  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1709</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>list</name></name><operator>)</operator> <operator>=</operator> <call><name>list_make2</name><argument_list>(<argument><expr><call><name>makeString</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>string</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3831</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">177</literal></expr>:</case> <comment type="block">/* map_keyval_list: map_keyval_list ',' property_key_name ':' expr  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1713</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>list</name></name><operator>)</operator> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><call><name>lappend</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr></argument>, <argument><expr><call><name>makeString</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>string</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3839</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">178</literal></expr>:</case> <comment type="block">/* list: '[' expr_list_opt ']'  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1720</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>cypher_list</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>make_ag_node</name><argument_list>(<argument><expr><name>cypher_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>elems</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3852</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">179</literal></expr>:</case> <comment type="block">/* expr_case: CASE expr expr_case_when_list expr_case_default END_P  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1732</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>CaseExpr</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>CaseExpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>casetype</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>defresult</name></name> <operator>=</operator> <operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>n</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3868</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">180</literal></expr>:</case> <comment type="block">/* expr_case: CASE expr_case_when_list expr_case_default END_P  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1744</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>CaseExpr</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>CaseExpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>casetype</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>defresult</name></name> <operator>=</operator> <operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>n</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3883</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">181</literal></expr>:</case> <comment type="block">/* expr_case_when_list: expr_case_when  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1758</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>list</name></name><operator>)</operator> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3891</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">182</literal></expr>:</case> <comment type="block">/* expr_case_when_list: expr_case_when_list expr_case_when  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1762</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>list</name></name><operator>)</operator> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>list</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3899</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">183</literal></expr>:</case> <comment type="block">/* expr_case_when: WHEN expr THEN expr  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1769</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>CaseWhen</name>   <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>CaseWhen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>expr</name></name> <operator>=</operator> <operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <operator>(</operator><name><name>yylsp</name><index>[<expr><operator>-</operator><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>n</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3913</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">184</literal></expr>:</case> <comment type="block">/* expr_case_default: ELSE expr  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1782</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>node</name><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3921</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">185</literal></expr>:</case> <comment type="block">/* expr_case_default: %empty  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1786</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3929</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">186</literal></expr>:</case> <comment type="block">/* expr_var: var_name  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1793</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ColumnRef</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>ColumnRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>fields</name></name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><call><name>makeString</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>string</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <operator>(</operator><name><name>yylsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>node</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3943</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">187</literal></expr>:</case> <comment type="block">/* func_name: symbolic_name  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1809</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>list</name></name><operator>)</operator> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><call><name>makeString</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>string</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3951</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">188</literal></expr>:</case> <comment type="block">/* func_name: safe_keywords '.' symbolic_name  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1819</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>list</name></name><operator>)</operator> <operator>=</operator> <call><name>list_make2</name><argument_list>(<argument><expr><call><name>makeString</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>yyvsp</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>makeString</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>string</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3959</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">191</literal></expr>:</case> <comment type="block">/* var_name_opt: %empty  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1834</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>string</name></name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3967</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">196</literal></expr>:</case> <comment type="block">/* schema_name: reserved_keyword  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1851</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
        <block>{<block_content>
            <comment type="block">/* we don't need to copy it, as it already has been */</comment>
            <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>string</name></name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3976</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">199</literal></expr>:</case> <comment type="block">/* safe_keywords: ALL  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1868</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
                 <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3982</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">200</literal></expr>:</case> <comment type="block">/* safe_keywords: ANALYZE  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1869</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
                 <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3988</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">201</literal></expr>:</case> <comment type="block">/* safe_keywords: AND  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1870</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
                 <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>3994</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">202</literal></expr>:</case> <comment type="block">/* safe_keywords: AS  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1871</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
                 <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4000</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">203</literal></expr>:</case> <comment type="block">/* safe_keywords: ASC  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1872</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
                 <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4006</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">204</literal></expr>:</case> <comment type="block">/* safe_keywords: ASCENDING  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1873</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
                 <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4012</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">205</literal></expr>:</case> <comment type="block">/* safe_keywords: BY  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1874</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
                 <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4018</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">206</literal></expr>:</case> <comment type="block">/* safe_keywords: CALL  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1875</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
                 <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4024</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">207</literal></expr>:</case> <comment type="block">/* safe_keywords: CASE  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1876</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
                 <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4030</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">208</literal></expr>:</case> <comment type="block">/* safe_keywords: COALESCE  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1877</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
                 <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4036</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">209</literal></expr>:</case> <comment type="block">/* safe_keywords: CONTAINS  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1878</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
                 <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4042</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">210</literal></expr>:</case> <comment type="block">/* safe_keywords: CREATE  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1879</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
                 <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4048</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">211</literal></expr>:</case> <comment type="block">/* safe_keywords: DELETE  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1880</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
                 <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4054</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">212</literal></expr>:</case> <comment type="block">/* safe_keywords: DESC  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1881</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
                 <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4060</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">213</literal></expr>:</case> <comment type="block">/* safe_keywords: DESCENDING  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1882</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
                 <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4066</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">214</literal></expr>:</case> <comment type="block">/* safe_keywords: DETACH  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1883</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
                 <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4072</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">215</literal></expr>:</case> <comment type="block">/* safe_keywords: DISTINCT  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1884</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
                 <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4078</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">216</literal></expr>:</case> <comment type="block">/* safe_keywords: ELSE  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1885</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
                 <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4084</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">217</literal></expr>:</case> <comment type="block">/* safe_keywords: ENDS  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1886</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
                 <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4090</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">218</literal></expr>:</case> <comment type="block">/* safe_keywords: EXISTS  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1887</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
                 <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4096</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">219</literal></expr>:</case> <comment type="block">/* safe_keywords: EXPLAIN  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1888</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
                 <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4102</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">220</literal></expr>:</case> <comment type="block">/* safe_keywords: IN  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1889</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
                 <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4108</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">221</literal></expr>:</case> <comment type="block">/* safe_keywords: IS  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1890</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
                 <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4114</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">222</literal></expr>:</case> <comment type="block">/* safe_keywords: LIMIT  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1891</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
                 <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4120</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">223</literal></expr>:</case> <comment type="block">/* safe_keywords: MATCH  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1892</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
                 <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4126</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">224</literal></expr>:</case> <comment type="block">/* safe_keywords: MERGE  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1893</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
                 <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4132</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">225</literal></expr>:</case> <comment type="block">/* safe_keywords: NOT  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1894</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
                 <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4138</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">226</literal></expr>:</case> <comment type="block">/* safe_keywords: OPTIONAL  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1895</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
                 <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4144</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">227</literal></expr>:</case> <comment type="block">/* safe_keywords: OR  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1896</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
                 <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4150</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">228</literal></expr>:</case> <comment type="block">/* safe_keywords: ORDER  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1897</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
                 <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4156</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">229</literal></expr>:</case> <comment type="block">/* safe_keywords: REMOVE  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1898</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
                 <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4162</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">230</literal></expr>:</case> <comment type="block">/* safe_keywords: RETURN  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1899</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
                 <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4168</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">231</literal></expr>:</case> <comment type="block">/* safe_keywords: SET  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1900</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
                 <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4174</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">232</literal></expr>:</case> <comment type="block">/* safe_keywords: SKIP  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1901</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
                 <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4180</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">233</literal></expr>:</case> <comment type="block">/* safe_keywords: STARTS  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1902</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
                 <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4186</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">234</literal></expr>:</case> <comment type="block">/* safe_keywords: THEN  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1903</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
                 <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4192</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">235</literal></expr>:</case> <comment type="block">/* safe_keywords: UNION  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1904</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
                 <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4198</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">236</literal></expr>:</case> <comment type="block">/* safe_keywords: WHEN  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1905</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
                 <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4204</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">237</literal></expr>:</case> <comment type="block">/* safe_keywords: VERBOSE  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1906</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
                 <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4210</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">238</literal></expr>:</case> <comment type="block">/* safe_keywords: WHERE  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1907</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
                 <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4216</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">239</literal></expr>:</case> <comment type="block">/* safe_keywords: WITH  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1908</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
                 <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4222</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">240</literal></expr>:</case> <comment type="block">/* safe_keywords: XOR  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1909</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
                 <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4228</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">241</literal></expr>:</case> <comment type="block">/* safe_keywords: YIELD  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1910</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
                 <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4234</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">242</literal></expr>:</case> <comment type="block">/* conflicted_keywords: END_P  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1914</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
              <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4240</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">243</literal></expr>:</case> <comment type="block">/* conflicted_keywords: FALSE_P  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1915</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
              <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4246</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">244</literal></expr>:</case> <comment type="block">/* conflicted_keywords: NULL_P  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1916</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
              <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4252</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>

  <case>case <expr><literal type="number">245</literal></expr>:</case> <comment type="block">/* conflicted_keywords: TRUE_P  */</comment>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1917</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>
              <block>{<block_content> <expr_stmt><expr><operator>(</operator><name><name>yyval</name><operator>.</operator><name>keyword</name></name><operator>)</operator> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><operator>(</operator><name><name>yyvsp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>keyword</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>
<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4258</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>
    <break>break;</break>


<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>4262</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.c"</cpp:file></cpp:line>

      <default>default:</default> <break>break;</break>
    </block_content>}</block></switch>
  <comment type="block">/* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */</comment>
  <expr_stmt><expr><call><name>YY_SYMBOL_PRINT</name> <argument_list>(<argument><expr><literal type="string">"-&gt; $$ ="</literal></expr></argument>, <argument><expr><call><name>YY_CAST</name> <argument_list>(<argument><expr><name>yysymbol_kind_t</name></expr></argument>, <argument><expr><name><name>yyr1</name><index>[<expr><name>yyn</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>yyval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yyloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>YYPOPSTACK</name> <argument_list>(<argument><expr><name>yylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>yylen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><operator>++</operator><name>yyvsp</name> <operator>=</operator> <name>yyval</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><operator>++</operator><name>yylsp</name> <operator>=</operator> <name>yyloc</name></expr>;</expr_stmt>

  <comment type="block">/* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */</comment>
  <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>yylhs</name> <init>= <expr><name><name>yyr1</name><index>[<expr><name>yyn</name></expr>]</index></name> <operator>-</operator> <name>YYNTOKENS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>yyi</name> <init>= <expr><name><name>yypgoto</name><index>[<expr><name>yylhs</name></expr>]</index></name> <operator>+</operator> <operator>*</operator><name>yyssp</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>yystate</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>yyi</name> <operator>&amp;&amp;</operator> <name>yyi</name> <operator>&lt;=</operator> <name>YYLAST</name> <operator>&amp;&amp;</operator> <name><name>yycheck</name><index>[<expr><name>yyi</name></expr>]</index></name> <operator>==</operator> <operator>*</operator><name>yyssp</name></expr>
               ?</condition><then> <expr><name><name>yytable</name><index>[<expr><name>yyi</name></expr>]</index></name></expr>
               </then><else>: <expr><name><name>yydefgoto</name><index>[<expr><name>yylhs</name></expr>]</index></name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block>

  <goto>goto <name>yynewstate</name>;</goto>


<comment type="block">/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/</comment>
<label><name>yyerrlab</name>:</label>
  <comment type="block">/* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */</comment>
  <expr_stmt><expr><name>yytoken</name> <operator>=</operator> <ternary><condition><expr><name>yychar</name> <operator>==</operator> <name>YYEMPTY</name></expr> ?</condition><then> <expr><name>YYSYMBOL_YYEMPTY</name></expr> </then><else>: <expr><call><name>YYTRANSLATE</name> <argument_list>(<argument><expr><name>yychar</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
  <comment type="block">/* If not already recovering from an error, report this error.  */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>yyerrstatus</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><operator>++</operator><name>yynerrs</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>yyerror</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>yylloc</name></expr></argument>, <argument><expr><name>scanner</name></expr></argument>, <argument><expr><name>extra</name></expr></argument>, <argument><expr><call><name>YY_</name><argument_list>(<argument><expr><literal type="string">"syntax error"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>yyerror_range</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>yylloc</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>yyerrstatus</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* If just tried and failed to reuse lookahead token after an
         error, discard it.  */</comment>

      <if_stmt><if>if <condition>(<expr><name>yychar</name> <operator>&lt;=</operator> <name>YYEOF</name></expr>)</condition>
        <block>{<block_content>
          <comment type="block">/* Return failure if at end of input.  */</comment>
          <if_stmt><if>if <condition>(<expr><name>yychar</name> <operator>==</operator> <name>YYEOF</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>YYABORT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if>
      <else>else
        <block>{<block_content>
          <expr_stmt><expr><call><name>yydestruct</name> <argument_list>(<argument><expr><literal type="string">"Error: discarding"</literal></expr></argument>,
                      <argument><expr><name>yytoken</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yylval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yylloc</name></expr></argument>, <argument><expr><name>scanner</name></expr></argument>, <argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>yychar</name> <operator>=</operator> <name>YYEMPTY</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

  <comment type="block">/* Else will try to reuse lookahead token after shifting the error
     token.  */</comment>
  <goto>goto <name>yyerrlab1</name>;</goto>


<comment type="block">/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/</comment>
<label><name>yyerrorlab</name>:</label>
  <comment type="block">/* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */</comment>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>YYERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><operator>++</operator><name>yynerrs</name></expr>;</expr_stmt>

  <comment type="block">/* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */</comment>
  <expr_stmt><expr><call><name>YYPOPSTACK</name> <argument_list>(<argument><expr><name>yylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>yylen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>YY_STACK_PRINT</name> <argument_list>(<argument><expr><name>yyss</name></expr></argument>, <argument><expr><name>yyssp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>yystate</name> <operator>=</operator> <operator>*</operator><name>yyssp</name></expr>;</expr_stmt>
  <goto>goto <name>yyerrlab1</name>;</goto>


<comment type="block">/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/</comment>
<label><name>yyerrlab1</name>:</label>
  <expr_stmt><expr><name>yyerrstatus</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>      <comment type="block">/* Each real token shifted decrements this.  */</comment>

  <comment type="block">/* Pop stack until we find a state that shifts the error token.  */</comment>
  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name>yyn</name> <operator>=</operator> <name><name>yypact</name><index>[<expr><name>yystate</name></expr>]</index></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yypact_value_is_default</name> <argument_list>(<argument><expr><name>yyn</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
          <expr_stmt><expr><name>yyn</name> <operator>+=</operator> <name>YYSYMBOL_YYerror</name></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>yyn</name> <operator>&amp;&amp;</operator> <name>yyn</name> <operator>&lt;=</operator> <name>YYLAST</name> <operator>&amp;&amp;</operator> <name><name>yycheck</name><index>[<expr><name>yyn</name></expr>]</index></name> <operator>==</operator> <name>YYSYMBOL_YYerror</name></expr>)</condition>
            <block>{<block_content>
              <expr_stmt><expr><name>yyn</name> <operator>=</operator> <name><name>yytable</name><index>[<expr><name>yyn</name></expr>]</index></name></expr>;</expr_stmt>
              <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name>yyn</name></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

      <comment type="block">/* Pop the current state because it cannot handle the error token.  */</comment>
      <if_stmt><if>if <condition>(<expr><name>yyssp</name> <operator>==</operator> <name>yyss</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>YYABORT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <expr_stmt><expr><name><name>yyerror_range</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>yylsp</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>yydestruct</name> <argument_list>(<argument><expr><literal type="string">"Error: popping"</literal></expr></argument>,
                  <argument><expr><call><name>YY_ACCESSING_SYMBOL</name> <argument_list>(<argument><expr><name>yystate</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>yyvsp</name></expr></argument>, <argument><expr><name>yylsp</name></expr></argument>, <argument><expr><name>scanner</name></expr></argument>, <argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>YYPOPSTACK</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>yystate</name> <operator>=</operator> <operator>*</operator><name>yyssp</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>YY_STACK_PRINT</name> <argument_list>(<argument><expr><name>yyss</name></expr></argument>, <argument><expr><name>yyssp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

  <expr_stmt><expr><name>YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN</name>
  <operator>*</operator><operator>++</operator><name>yyvsp</name> <operator>=</operator> <name>yylval</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>YY_IGNORE_MAYBE_UNINITIALIZED_END</name></type>

  <name><name>yyerror_range</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><name>yylloc</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>++</operator><name>yylsp</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>YYLLOC_DEFAULT</name> <argument_list>(<argument><expr><operator>*</operator><name>yylsp</name></expr></argument>, <argument><expr><name>yyerror_range</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Shift the error token.  */</comment>
  <expr_stmt><expr><call><name>YY_SYMBOL_PRINT</name> <argument_list>(<argument><expr><literal type="string">"Shifting"</literal></expr></argument>, <argument><expr><call><name>YY_ACCESSING_SYMBOL</name> <argument_list>(<argument><expr><name>yyn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>yyvsp</name></expr></argument>, <argument><expr><name>yylsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>yystate</name> <operator>=</operator> <name>yyn</name></expr>;</expr_stmt>
  <goto>goto <name>yynewstate</name>;</goto>


<comment type="block">/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/</comment>
<label><name>yyacceptlab</name>:</label>
  <expr_stmt><expr><name>yyresult</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <goto>goto <name>yyreturnlab</name>;</goto>


<comment type="block">/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/</comment>
<label><name>yyabortlab</name>:</label>
  <expr_stmt><expr><name>yyresult</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <goto>goto <name>yyreturnlab</name>;</goto>


<comment type="block">/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/</comment>
<label><name>yyexhaustedlab</name>:</label>
  <expr_stmt><expr><call><name>yyerror</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>yylloc</name></expr></argument>, <argument><expr><name>scanner</name></expr></argument>, <argument><expr><name>extra</name></expr></argument>, <argument><expr><call><name>YY_</name><argument_list>(<argument><expr><literal type="string">"memory exhausted"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>yyresult</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <goto>goto <name>yyreturnlab</name>;</goto>


<comment type="block">/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/</comment>
<label><name>yyreturnlab</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>yychar</name> <operator>!=</operator> <name>YYEMPTY</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */</comment>
      <expr_stmt><expr><name>yytoken</name> <operator>=</operator> <call><name>YYTRANSLATE</name> <argument_list>(<argument><expr><name>yychar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>yydestruct</name> <argument_list>(<argument><expr><literal type="string">"Cleanup: discarding lookahead"</literal></expr></argument>,
                  <argument><expr><name>yytoken</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yylval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yylloc</name></expr></argument>, <argument><expr><name>scanner</name></expr></argument>, <argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  <comment type="block">/* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */</comment>
  <expr_stmt><expr><call><name>YYPOPSTACK</name> <argument_list>(<argument><expr><name>yylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>YY_STACK_PRINT</name> <argument_list>(<argument><expr><name>yyss</name></expr></argument>, <argument><expr><name>yyssp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>yyssp</name> <operator>!=</operator> <name>yyss</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>yydestruct</name> <argument_list>(<argument><expr><literal type="string">"Cleanup: popping"</literal></expr></argument>,
                  <argument><expr><call><name>YY_ACCESSING_SYMBOL</name> <argument_list>(<argument><expr><operator>+</operator><operator>*</operator><name>yyssp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>yyvsp</name></expr></argument>, <argument><expr><name>yylsp</name></expr></argument>, <argument><expr><name>scanner</name></expr></argument>, <argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>YYPOPSTACK</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>yyoverflow</name></cpp:ifndef>
  <if_stmt><if>if <condition>(<expr><name>yyss</name> <operator>!=</operator> <name>yyssa</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>YYSTACK_FREE</name> <argument_list>(<argument><expr><name>yyss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><name>yyresult</name></expr>;</return>
</block_content>}</block></function>

<cpp:line>#<cpp:directive>line</cpp:directive> <cpp:number>1920</cpp:number> <cpp:file>"src/backend/parser/cypher_gram.y"</cpp:file></cpp:line>


<comment type="block">/*
 * logical operators
 */</comment>

<function><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type><name>make_or_expr</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>lexpr</name></decl></parameter>, <parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>rexpr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// flatten "a OR b OR c ..." to a single BoolExpr on sight</comment>
    <if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>lexpr</name></expr></argument>, <argument><expr><name>BoolExpr</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>BoolExpr</name> <modifier>*</modifier></type><name>bexpr</name> <init>= <expr><operator>(</operator><name>BoolExpr</name> <operator>*</operator><operator>)</operator><name>lexpr</name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>bexpr</name><operator>-&gt;</operator><name>boolop</name></name> <operator>==</operator> <name>OR_EXPR</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>bexpr</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>bexpr</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><name>rexpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>bexpr</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><call><name>makeBoolExpr</name><argument_list>(<argument><expr><name>OR_EXPR</name></expr></argument>, <argument><expr><call><name>list_make2</name><argument_list>(<argument><expr><name>lexpr</name></expr></argument>, <argument><expr><name>rexpr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type><name>make_and_expr</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>lexpr</name></decl></parameter>, <parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>rexpr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// flatten "a AND b AND c ..." to a single BoolExpr on sight</comment>
    <if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>lexpr</name></expr></argument>, <argument><expr><name>BoolExpr</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>BoolExpr</name> <modifier>*</modifier></type><name>bexpr</name> <init>= <expr><operator>(</operator><name>BoolExpr</name> <operator>*</operator><operator>)</operator><name>lexpr</name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>bexpr</name><operator>-&gt;</operator><name>boolop</name></name> <operator>==</operator> <name>AND_EXPR</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>bexpr</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>bexpr</name><operator>-&gt;</operator><name>args</name></name></expr></argument>, <argument><expr><name>rexpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>bexpr</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><call><name>makeBoolExpr</name><argument_list>(<argument><expr><name>AND_EXPR</name></expr></argument>, <argument><expr><call><name>list_make2</name><argument_list>(<argument><expr><name>lexpr</name></expr></argument>, <argument><expr><name>rexpr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type><name>make_xor_expr</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>lexpr</name></decl></parameter>, <parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>rexpr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Expr</name> <modifier>*</modifier></type><name>aorb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Expr</name> <modifier>*</modifier></type><name>notaandb</name></decl>;</decl_stmt>

    <comment type="line">// XOR is (A OR B) AND (NOT (A AND B))</comment>
    <expr_stmt><expr><name>aorb</name> <operator>=</operator> <call><name>makeBoolExpr</name><argument_list>(<argument><expr><name>OR_EXPR</name></expr></argument>, <argument><expr><call><name>list_make2</name><argument_list>(<argument><expr><name>lexpr</name></expr></argument>, <argument><expr><name>rexpr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>notaandb</name> <operator>=</operator> <call><name>makeBoolExpr</name><argument_list>(<argument><expr><name>AND_EXPR</name></expr></argument>, <argument><expr><call><name>list_make2</name><argument_list>(<argument><expr><name>lexpr</name></expr></argument>, <argument><expr><name>rexpr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>notaandb</name> <operator>=</operator> <call><name>makeBoolExpr</name><argument_list>(<argument><expr><name>NOT_EXPR</name></expr></argument>, <argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><name>notaandb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><call><name>makeBoolExpr</name><argument_list>(<argument><expr><name>AND_EXPR</name></expr></argument>, <argument><expr><call><name>list_make2</name><argument_list>(<argument><expr><name>aorb</name></expr></argument>, <argument><expr><name>notaandb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type><name>make_not_expr</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><call><name>makeBoolExpr</name><argument_list>(<argument><expr><name>NOT_EXPR</name></expr></argument>, <argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * arithmetic operators
 */</comment>

<function><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type><name>do_negate</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>A_Const</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>A_Const</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>(</operator><name>A_Const</name> <operator>*</operator><operator>)</operator><name>n</name></expr></init></decl>;</decl_stmt>

        <comment type="line">// report the constant's location as that of the '-' sign</comment>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <name>location</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>T_Integer</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>val</name><operator>.</operator><name>ival</name></name> <operator>=</operator> <operator>-</operator><name><name>c</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>val</name><operator>.</operator><name>ival</name></name></expr>;</expr_stmt>
            <return>return <expr><name>n</name></expr>;</return>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>T_Float</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>do_negate_float</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>n</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><call><name>makeSimpleA_Expr</name><argument_list>(<argument><expr><name>AEXPR_OP</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_negate_float</name><parameter_list>(<parameter><decl><type><name>Value</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>IsA</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>Float</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> <comment type="line">// just strip the '-'</comment>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"-%s"</literal></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * indirection
 */</comment>

<function><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type><name>append_indirection</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>, <parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>selector</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>A_Indirection</name> <modifier>*</modifier></type><name>indir</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><name>A_Indirection</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>indir</name> <operator>=</operator> <operator>(</operator><name>A_Indirection</name> <operator>*</operator><operator>)</operator><name>expr</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>indir</name><operator>-&gt;</operator><name>indirection</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>indir</name><operator>-&gt;</operator><name>indirection</name></name></expr></argument>, <argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>expr</name></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>indir</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>A_Indirection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>indir</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>expr</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>indir</name><operator>-&gt;</operator><name>indirection</name></name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><name>selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>indir</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * literals
 */</comment>

<function><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type><name>make_int_const</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>A_Const</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>A_Const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>T_Integer</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>val</name><operator>.</operator><name>ival</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <name>location</name></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type><name>make_float_const</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>A_Const</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>A_Const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>T_Float</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <name>location</name></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type><name>make_string_const</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>A_Const</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>A_Const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>T_String</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>val</name><operator>.</operator><name>str</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <name>location</name></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type><name>make_bool_const</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cypher_bool_const</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>make_ag_node</name><argument_list>(<argument><expr><name>cypher_bool_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>boolean</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <name>location</name></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type><name>make_null_const</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>A_Const</name> <modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>A_Const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>T_Null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <name>location</name></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>n</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * typecast
 */</comment>
<function><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type><name>make_typecast_expr</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>typecast</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cypher_typecast</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>make_ag_node</name><argument_list>(<argument><expr><name>cypher_typecast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>expr</name></name> <operator>=</operator> <name>expr</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>typecast</name></name> <operator>=</operator> <name>typecast</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <name>location</name></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>node</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * functions
 */</comment>
<function><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type><name>make_function_expr</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>func_name</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>exprs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>FuncCall</name> <modifier>*</modifier></type><name>fnode</name></decl>;</decl_stmt>

    <comment type="block">/* AGE function names are unqualified. So, their list size = 1 */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name>func_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>funcname</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

        <comment type="block">/* get the name of the function */</comment>
        <expr_stmt><expr><name>name</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>Value</name><operator>*</operator><operator>)</operator><call><name>linitial</name><argument_list>(<argument><expr><name>func_name</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>val</name><operator>.</operator><name>str</name></name></expr>;</expr_stmt>

        <comment type="block">/*
         * Check for openCypher functions that are directly mapped to PG
         * functions. We may want to find a better way to do this, as there
         * could be many.
         */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"rand"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>funcname</name> <operator>=</operator> <call><name>SystemFuncName</name><argument_list>(<argument><expr><literal type="string">"random"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"pi"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>funcname</name> <operator>=</operator> <call><name>SystemFuncName</name><argument_list>(<argument><expr><literal type="string">"pi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"count"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>funcname</name> <operator>=</operator> <call><name>SystemFuncName</name><argument_list>(<argument><expr><literal type="string">"count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <comment type="block">/*
             * We don't qualify AGE functions here. This is done in the
             * transform layer and allows us to know which functions are ours.
             */</comment>
            <expr_stmt><expr><name>funcname</name> <operator>=</operator> <name>func_name</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <comment type="block">/* build the function call */</comment>
        <expr_stmt><expr><name>fnode</name> <operator>=</operator> <call><name>makeFuncCall</name><argument_list>(<argument><expr><name>funcname</name></expr></argument>, <argument><expr><name>exprs</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <comment type="block">/* all other functions are passed as is */</comment>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>fnode</name> <operator>=</operator> <call><name>makeFuncCall</name><argument_list>(<argument><expr><name>func_name</name></expr></argument>, <argument><expr><name>exprs</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="block">/* return the node */</comment>
    <return>return <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><name>fnode</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* function to create a unique name given a prefix */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>create_unique_name</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>prefix_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prefix</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint</name></type> <name>nlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>unique_number</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* get a unique number */</comment>
    <expr_stmt><expr><name>unique_number</name> <operator>=</operator> <call><name>get_a_unique_number</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* was a valid prefix supplied */</comment>
    <if_stmt><if>if <condition>(<expr><name>prefix_name</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>prefix_name</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>prefix</name> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><name>UNIQUE_NAME_NULL_PREFIX</name></expr></argument>,
                          <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>UNIQUE_NAME_NULL_PREFIX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>prefix</name> <operator>=</operator> <name>prefix_name</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* get the length of the combinded string */</comment>
    <expr_stmt><expr><name>nlen</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s_%lu"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>unique_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* allocate the space */</comment>
    <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>nlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* create the name */</comment>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>nlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s_%lu"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>unique_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* if we created the prefix, we need to free it */</comment>
    <if_stmt><if>if <condition>(<expr><name>prefix_name</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>prefix_name</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>name</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* function to return a unique unsigned long number */</comment>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>get_a_unique_number</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* STATIC VARIABLE unique_counter for number uniqueness */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>unique_counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <return>return <expr><name>unique_counter</name><operator>++</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*set operation function node to make a set op node*/</comment>
<function><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type><name>make_set_op</name><parameter_list>(<parameter><decl><type><name>SetOperation</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>all_or_distinct</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>larg</name></decl></parameter>,
                         <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>rarg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>cypher_return</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>make_ag_node</name><argument_list>(<argument><expr><name>cypher_return</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>op</name></name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>all_or_distinct</name></name> <operator>=</operator> <name>all_or_distinct</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>larg</name></name> <operator>=</operator> <operator>(</operator><name>List</name> <operator>*</operator><operator>)</operator> <name>larg</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>-&gt;</operator><name>rarg</name></name> <operator>=</operator> <operator>(</operator><name>List</name> <operator>*</operator><operator>)</operator> <name>rarg</name></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>n</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* check if A_Expr is a comparison expression */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_A_Expr_a_comparison_operation</name><parameter_list>(<parameter><decl><type><name>A_Expr</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Value</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>opr_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* we don't support qualified comparison operators */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"qualified comparison operator names are not permitted"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* get the value and verify that it is a string */</comment>
    <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>linitial</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>T_String</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* get the string value */</comment>
    <expr_stmt><expr><name>opr_name</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>str</name></name></expr>;</expr_stmt>

    <comment type="block">/* verify it is a comparison operation */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>opr_name</name></expr></argument>, <argument><expr><literal type="string">"&lt;"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>opr_name</name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>opr_name</name></expr></argument>, <argument><expr><literal type="string">"&lt;="</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>opr_name</name></expr></argument>, <argument><expr><literal type="string">"=&gt;"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>opr_name</name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>opr_name</name></expr></argument>, <argument><expr><literal type="string">"&lt;&gt;"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Helper function to build the comparison operator expression. It will also
 * build a chained comparison operator expression if it detects a chained
 * comparison.
 */</comment>
<function><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type><name>build_comparison_expression</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>left_grammar_node</name></decl></parameter>,
                                         <parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>right_grammar_node</name></decl></parameter>,
                                         <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>opr_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>result_expr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>left_grammar_node</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>right_grammar_node</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>opr_name</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Case 1:
     *    If the previous expression is an A_Expr and it is also a
     *    comparison, then this is part of a chained comparison. In this
     *    specific case, the second chained element.
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>left_grammar_node</name></expr></argument>, <argument><expr><name>A_Expr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <call><name>is_A_Expr_a_comparison_operation</name><argument_list>(<argument><expr><operator>(</operator><name>A_Expr</name> <operator>*</operator><operator>)</operator><name>left_grammar_node</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>A_Expr</name> <modifier>*</modifier></type><name>aexpr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>lexpr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <comment type="block">/* get the A_Expr on the left side */</comment>
        <expr_stmt><expr><name>aexpr</name> <operator>=</operator> <operator>(</operator><name>A_Expr</name> <operator>*</operator><operator>)</operator> <name>left_grammar_node</name></expr>;</expr_stmt>
        <comment type="block">/* get its rexpr which will be our lexpr */</comment>
        <expr_stmt><expr><name>lexpr</name> <operator>=</operator> <name><name>aexpr</name><operator>-&gt;</operator><name>rexpr</name></name></expr>;</expr_stmt>
        <comment type="block">/* build our comparison operator */</comment>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><call><name>makeSimpleA_Expr</name><argument_list>(<argument><expr><name>AEXPR_OP</name></expr></argument>, <argument><expr><name>opr_name</name></expr></argument>, <argument><expr><name>lexpr</name></expr></argument>,
                                     <argument><expr><name>right_grammar_node</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* now add it (AND) to the other comparison */</comment>
        <expr_stmt><expr><name>result_expr</name> <operator>=</operator> <call><name>make_and_expr</name><argument_list>(<argument><expr><name>left_grammar_node</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Case 2:
     *    If the previous expression is a boolean AND and its right most
     *    expression is an A_Expr and a comparison, then this is part of
     *    a chained comparison. In this specific case, the third and
     *    beyond chained element.
     */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>left_grammar_node</name></expr></argument>, <argument><expr><name>BoolExpr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <operator>(</operator><operator>(</operator><name>BoolExpr</name><operator>*</operator><operator>)</operator><name>left_grammar_node</name><operator>)</operator><operator>-&gt;</operator><name>boolop</name> <operator>==</operator> <name>AND_EXPR</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>BoolExpr</name> <modifier>*</modifier></type><name>bexpr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>last</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <comment type="block">/* cast the left to a boolean */</comment>
        <expr_stmt><expr><name>bexpr</name> <operator>=</operator> <operator>(</operator><name>BoolExpr</name> <operator>*</operator><operator>)</operator><name>left_grammar_node</name></expr>;</expr_stmt>
        <comment type="block">/* extract the last node - ANDs are chained in a flat list */</comment>
        <expr_stmt><expr><name>last</name> <operator>=</operator> <call><name>llast</name><argument_list>(<argument><expr><name><name>bexpr</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* is the last node an A_Expr and a comparison operator */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>last</name></expr></argument>, <argument><expr><name>A_Expr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
            <call><name>is_A_Expr_a_comparison_operation</name><argument_list>(<argument><expr><operator>(</operator><name>A_Expr</name> <operator>*</operator><operator>)</operator><name>last</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>A_Expr</name> <modifier>*</modifier></type><name>aexpr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>lexpr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <comment type="block">/* get the last expressions right expression */</comment>
            <expr_stmt><expr><name>aexpr</name> <operator>=</operator> <operator>(</operator><name>A_Expr</name> <operator>*</operator><operator>)</operator> <name>last</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>lexpr</name> <operator>=</operator> <name><name>aexpr</name><operator>-&gt;</operator><name>rexpr</name></name></expr>;</expr_stmt>
            <comment type="block">/* make our comparison operator */</comment>
            <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><call><name>makeSimpleA_Expr</name><argument_list>(<argument><expr><name>AEXPR_OP</name></expr></argument>, <argument><expr><name>opr_name</name></expr></argument>, <argument><expr><name>lexpr</name></expr></argument>,
                                         <argument><expr><name>right_grammar_node</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* now add it (AND) to the other comparisons */</comment>
            <expr_stmt><expr><name>result_expr</name> <operator>=</operator> <call><name>make_and_expr</name><argument_list>(<argument><expr><name>left_grammar_node</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * Case 3:
     *    The previous expression isn't a chained comparison. So, treat
     *    it as a regular comparison expression.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>result_expr</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>result_expr</name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator><call><name>makeSimpleA_Expr</name><argument_list>(<argument><expr><name>AEXPR_OP</name></expr></argument>, <argument><expr><name>opr_name</name></expr></argument>,
                                               <argument><expr><name>left_grammar_node</name></expr></argument>,
                                               <argument><expr><name>right_grammar_node</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>result_expr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>cypher_relationship</name> <modifier>*</modifier></type><name>build_VLE_relation</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>left_arg</name></decl></parameter>,
                                               <parameter><decl><type><name>cypher_relationship</name> <modifier>*</modifier></type><name>cr</name></decl></parameter>,
                                               <parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>right_arg</name></decl></parameter>,
                                               <parameter><decl><type><name>int</name></type> <name>left_arg_location</name></decl></parameter>,
                                               <parameter><decl><type><name>int</name></type> <name>cr_location</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ColumnRef</name> <modifier>*</modifier></type><name>cref</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>A_Indices</name> <modifier>*</modifier></type><name>ai</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>eargs</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>fname</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cypher_node</name> <modifier>*</modifier></type><name>cnl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cypher_node</name> <modifier>*</modifier></type><name>cnr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>unique_number</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>location</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* get a unique number to identify this VLE node */</comment>
    <expr_stmt><expr><name>unique_number</name> <operator>=</operator> <call><name>get_a_unique_number</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* get the location */</comment>
    <expr_stmt><expr><name>location</name> <operator>=</operator> <name><name>cr</name><operator>-&gt;</operator><name>location</name></name></expr>;</expr_stmt>

    <comment type="block">/* get the left and right cypher_nodes */</comment>
    <expr_stmt><expr><name>cnl</name> <operator>=</operator> <operator>(</operator><name>cypher_node</name><operator>*</operator><operator>)</operator><call><name>llast</name><argument_list>(<argument><expr><name>left_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cnr</name> <operator>=</operator> <operator>(</operator><name>cypher_node</name><operator>*</operator><operator>)</operator><name>right_arg</name></expr>;</expr_stmt>

    <comment type="block">/* get the length of the left path */</comment>
    <expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>left_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * If the left name is NULL and the left path is greater than 1
     * If the left name is NULL and the left label is not NULL
     * If the left name is NULL and the left props is not NULL
     * If the left name is NULL and the right name is not NULL
     * If the left name is NULL and the right label is not NULL
     * If the left name is NULL and the right props is not NULL
     * we need to create a variable name for the left node.
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cnl</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>length</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator>
        <operator>(</operator><name><name>cnl</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>cnl</name><operator>-&gt;</operator><name>label</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>||</operator>
        <operator>(</operator><name><name>cnl</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>cnl</name><operator>-&gt;</operator><name>props</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>||</operator>
        <operator>(</operator><name><name>cnl</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>cnr</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>||</operator>
        <operator>(</operator><name><name>cnl</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>cnr</name><operator>-&gt;</operator><name>label</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>||</operator>
        <operator>(</operator><name><name>cnl</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>cnr</name><operator>-&gt;</operator><name>props</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>cnl</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>create_unique_name</name><argument_list>(<argument><expr><literal type="string">"_vle_function_start_var"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* add in the start vertex as a ColumnRef if necessary */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>cnl</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>cref</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>ColumnRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cref</name><operator>-&gt;</operator><name>fields</name></name> <operator>=</operator> <call><name>list_make2</name><argument_list>(<argument><expr><call><name>makeString</name><argument_list>(<argument><expr><name><name>cnl</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>makeString</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cref</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <name>left_arg_location</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>args</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>cref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <comment type="block">/*
     * If there aren't any variables in the VLE path, we can use
     * the FROM_ALL algorithm.
     */</comment>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>args</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>make_null_const</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/*
     * Create a variable name for the end vertex if we have a label
     * name or props but we don't have a variable name.
     *
     * For example: ()-[*]-(:label) or ()-[*]-({name: "John"})
     *
     * We need this so the addition of match_vle_terminal_edge is
     * done in the transform phase.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>cnr</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
        <operator>(</operator><name><name>cnr</name><operator>-&gt;</operator><name>label</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>cnr</name><operator>-&gt;</operator><name>props</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>cnr</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>create_unique_name</name><argument_list>(<argument><expr><literal type="string">"_vle_function_end_var"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/*
     * We need a NULL for the target vertex in the VLE match to
     * force the dfs_find_a_path_from algorithm. However, for now,
     * the default will be to only do that when a target isn't
     * supplied.
     *
     * TODO: We will likely want to force it to use
     * dfs_find_a_path_from.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>cnl</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>cnr</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>cref</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>ColumnRef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cref</name><operator>-&gt;</operator><name>fields</name></name> <operator>=</operator> <call><name>list_make2</name><argument_list>(<argument><expr><call><name>makeString</name><argument_list>(<argument><expr><name><name>cnr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>makeString</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cref</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <name>left_arg_location</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>args</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>cref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>args</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>make_null_const</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* build the required edge arguments */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>cr</name><operator>-&gt;</operator><name>label</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>eargs</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>eargs</name></expr></argument>, <argument><expr><call><name>make_null_const</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>eargs</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>eargs</name></expr></argument>, <argument><expr><call><name>make_string_const</name><argument_list>(<argument><expr><name><name>cr</name><operator>-&gt;</operator><name>label</name></name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>cr</name><operator>-&gt;</operator><name>props</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>eargs</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>eargs</name></expr></argument>, <argument><expr><call><name>make_null_const</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>eargs</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>eargs</name></expr></argument>, <argument><expr><name><name>cr</name><operator>-&gt;</operator><name>props</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <comment type="block">/* build the edge function name (schema.funcname) */</comment>
    <expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>list_make2</name><argument_list>(<argument><expr><call><name>makeString</name><argument_list>(<argument><expr><literal type="string">"ag_catalog"</literal></expr></argument>)</argument_list></call></expr></argument>,
                       <argument><expr><call><name>makeString</name><argument_list>(<argument><expr><literal type="string">"age_build_vle_match_edge"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* build the edge function node */</comment>
    <expr_stmt><expr><name>node</name> <operator>=</operator> <call><name>make_function_expr</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>eargs</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* add in the edge*/</comment>
    <expr_stmt><expr><name>args</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* add in the lidx and uidx range as Const */</comment>
    <expr_stmt><expr><name>ai</name> <operator>=</operator> <operator>(</operator><name>A_Indices</name><operator>*</operator><operator>)</operator><name><name>cr</name><operator>-&gt;</operator><name>varlen</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ai</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ai</name><operator>-&gt;</operator><name>lidx</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>args</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>make_null_const</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>args</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name><name>ai</name><operator>-&gt;</operator><name>lidx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>ai</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ai</name><operator>-&gt;</operator><name>uidx</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>args</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>make_null_const</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>args</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name><name>ai</name><operator>-&gt;</operator><name>uidx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <comment type="block">/* add in the direction as Const */</comment>
    <expr_stmt><expr><name>args</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>make_int_const</name><argument_list>(<argument><expr><name><name>cr</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><name>cr_location</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* add in the unique number used to identify this VLE node */</comment>
    <expr_stmt><expr><name>args</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><call><name>make_int_const</name><argument_list>(<argument><expr><name>unique_number</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* build the VLE function node */</comment>
    <expr_stmt><expr><name><name>cr</name><operator>-&gt;</operator><name>varlen</name></name> <operator>=</operator> <call><name>make_function_expr</name><argument_list>(<argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><call><name>makeString</name><argument_list>(<argument><expr><literal type="string">"vle"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>args</name></expr></argument>,
                                    <argument><expr><name>cr_location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* return the VLE relation node */</comment>
    <return>return <expr><name>cr</name></expr>;</return>
</block_content>}</block></function>
</unit>
