<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/age/src/backend/parser/cypher_keywords.c"><comment type="block">/*
 * For PostgreSQL Database Management System:
 * (formerly known as Postgres, then as Postgres95)
 *
 * Portions Copyright (c) 1996-2010, The PostgreSQL Global Development Group
 *
 * Portions Copyright (c) 1994, The Regents of the University of California
 *
 * Permission to use, copy, modify, and distribute this software and its documentation for any purpose,
 * without fee, and without a written agreement is hereby granted, provided that the above copyright notice
 * and this paragraph and the following two paragraphs appear in all copies.
 *
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT,
 * INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,
 * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF THE UNIVERSITY
 * OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 * THE SOFTWARE PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA
 * HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/attnum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/tupdesc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/keywords.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/cypher_gram.h"</cpp:file></cpp:include>

<comment type="block">/*
 * This list must be sorted by ASCII name, because binary search is used to
 * locate entries.
 */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>ScanKeyword</name></type> <name><name>cypher_keywords</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"all"</literal></expr>, <expr><name>ALL</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"analyze"</literal></expr>, <expr><name>ANALYZE</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"and"</literal></expr>, <expr><name>AND</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"as"</literal></expr>, <expr><name>AS</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"asc"</literal></expr>, <expr><name>ASC</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"ascending"</literal></expr>, <expr><name>ASCENDING</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"by"</literal></expr>, <expr><name>BY</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"call"</literal></expr>, <expr><name>CALL</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"case"</literal></expr>, <expr><name>CASE</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"coalesce"</literal></expr>, <expr><name>COALESCE</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"contains"</literal></expr>, <expr><name>CONTAINS</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"create"</literal></expr>, <expr><name>CREATE</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"delete"</literal></expr>, <expr><name>DELETE</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"desc"</literal></expr>, <expr><name>DESC</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"descending"</literal></expr>, <expr><name>DESCENDING</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"detach"</literal></expr>, <expr><name>DETACH</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"distinct"</literal></expr>, <expr><name>DISTINCT</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"else"</literal></expr>, <expr><name>ELSE</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"end"</literal></expr>, <expr><name>END_P</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"ends"</literal></expr>, <expr><name>ENDS</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"exists"</literal></expr>, <expr><name>EXISTS</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"explain"</literal></expr>, <expr><name>EXPLAIN</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"false"</literal></expr>, <expr><name>FALSE_P</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"in"</literal></expr>, <expr><name>IN</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"is"</literal></expr>, <expr><name>IS</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"limit"</literal></expr>, <expr><name>LIMIT</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"match"</literal></expr>, <expr><name>MATCH</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"merge"</literal></expr>, <expr><name>MERGE</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"not"</literal></expr>, <expr><name>NOT</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"null"</literal></expr>, <expr><name>NULL_P</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"optional"</literal></expr>, <expr><name>OPTIONAL</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"or"</literal></expr>, <expr><name>OR</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"order"</literal></expr>, <expr><name>ORDER</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"remove"</literal></expr>, <expr><name>REMOVE</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"return"</literal></expr>, <expr><name>RETURN</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"set"</literal></expr>, <expr><name>SET</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"skip"</literal></expr>, <expr><name>SKIP</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"starts"</literal></expr>, <expr><name>STARTS</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"then"</literal></expr>, <expr><name>THEN</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"true"</literal></expr>, <expr><name>TRUE_P</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"union"</literal></expr>, <expr><name>UNION</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"unwind"</literal></expr>, <expr><name>UNWIND</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"verbose"</literal></expr>, <expr><name>VERBOSE</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"when"</literal></expr>, <expr><name>WHEN</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"where"</literal></expr>, <expr><name>WHERE</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"with"</literal></expr>, <expr><name>WITH</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"xor"</literal></expr>, <expr><name>XOR</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"yield"</literal></expr>, <expr><name>YIELD</name></expr>, <expr><name>RESERVED_KEYWORD</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>num_cypher_keywords</name> <init>= <expr><call><name>lengthof</name><argument_list>(<argument><expr><name>cypher_keywords</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>get_cypher_keywords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line">// function to return the list of grammar keywords</comment>
<function><type><name>Datum</name></type> <name>get_cypher_keywords</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>FuncCallContext</name> <modifier>*</modifier></type><name>func_ctx</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>SRF_IS_FIRSTCALL</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>MemoryContext</name></type> <name>old_mem_ctx</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TupleDesc</name></type> <name>tup_desc</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>func_ctx</name> <operator>=</operator> <call><name>SRF_FIRSTCALL_INIT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>old_mem_ctx</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>func_ctx</name><operator>-&gt;</operator><name>multi_call_memory_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>tup_desc</name> <operator>=</operator> <call><name>CreateTemplateTupleDesc</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tup_desc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"word"</literal></expr></argument>, <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tup_desc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"catcode"</literal></expr></argument>, <argument><expr><name>CHAROID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name>tup_desc</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"catdesc"</literal></expr></argument>, <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>func_ctx</name><operator>-&gt;</operator><name>attinmeta</name></name> <operator>=</operator> <call><name>TupleDescGetAttInMetadata</name><argument_list>(<argument><expr><name>tup_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old_mem_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>func_ctx</name> <operator>=</operator> <call><name>SRF_PERCALL_SETUP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>func_ctx</name><operator>-&gt;</operator><name>call_cntr</name></name> <operator>&lt;</operator> <name>num_cypher_keywords</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>HeapTuple</name></type> <name>tuple</name></decl>;</decl_stmt>

        <comment type="line">// cast-away-const is ugly but alternatives aren't much better</comment>
        <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>cypher_keywords</name><index>[<expr><name><name>func_ctx</name><operator>-&gt;</operator><name>call_cntr</name></name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</expr_stmt>

        <switch>switch <condition>(<expr><name><name>cypher_keywords</name><index>[<expr><name><name>func_ctx</name><operator>-&gt;</operator><name>call_cntr</name></name></expr>]</index></name><operator>.</operator><name>category</name></expr>)</condition>
        <block>{<block_content>
        <case>case <expr><name>UNRESERVED_KEYWORD</name></expr>:</case>
            <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"U"</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"unreserved"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>COL_NAME_KEYWORD</name></expr>:</case>
            <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"C"</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"unreserved (cannot be function or type name)"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>TYPE_FUNC_NAME_KEYWORD</name></expr>:</case>
            <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"T"</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"reserved (can be function or type name)"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>RESERVED_KEYWORD</name></expr>:</case>
            <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"R"</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"reserved"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <comment type="line">// shouldn't be possible</comment>
            <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></switch>

        <expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>BuildTupleFromCStrings</name><argument_list>(<argument><expr><name><name>func_ctx</name><operator>-&gt;</operator><name>attinmeta</name></name></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>SRF_RETURN_NEXT</name><argument_list>(<argument><expr><name>func_ctx</name></expr></argument>, <argument><expr><call><name>HeapTupleGetDatum</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>SRF_RETURN_DONE</name><argument_list>(<argument><expr><name>func_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
