<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/age/src/backend/parser/cypher_transform_entity.c"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/cypher_transform_entity.h"</cpp:file></cpp:include>

<comment type="line">// creates a transform entity</comment>
<function><type><name>transform_entity</name> <modifier>*</modifier></type><name>make_transform_entity</name><parameter_list>(<parameter><decl><type><name>cypher_parsestate</name> <modifier>*</modifier></type><name>cpstate</name></decl></parameter>,
                                        <parameter><decl><type><name><name>enum</name> <name>transform_entity_type</name></name></type> <name>type</name></decl></parameter>,
                                        <parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>transform_entity</name> <modifier>*</modifier></type><name>entity</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>entity</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>transform_entity</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>entity</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>ENT_VERTEX</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>entity</name><operator>-&gt;</operator><name>entity</name><operator>.</operator><name>node</name></name> <operator>=</operator> <operator>(</operator><name>cypher_node</name> <operator>*</operator><operator>)</operator><name>node</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>entity</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ENT_EDGE</name> <operator>||</operator> <name><name>entity</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ENT_VLE_EDGE</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>entity</name><operator>-&gt;</operator><name>entity</name><operator>.</operator><name>rel</name></name> <operator>=</operator> <operator>(</operator><name>cypher_relationship</name> <operator>*</operator><operator>)</operator><name>node</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
                        <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unknown entity type"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>entity</name><operator>-&gt;</operator><name>declared_in_current_clause</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>entity</name><operator>-&gt;</operator><name>expr</name></name> <operator>=</operator> <name>expr</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>entity</name><operator>-&gt;</operator><name>in_join_tree</name></name> <operator>=</operator> <name>expr</name> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>

    <return>return <expr><name>entity</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Finds the transform_entity in the cypher_parstate for a the given name and
 * type.
 */</comment>
<function><type><name>transform_entity</name> <modifier>*</modifier></type><name>find_transform_entity</name><parameter_list>(<parameter><decl><type><name>cypher_parsestate</name> <modifier>*</modifier></type><name>cpstate</name></decl></parameter>,
                                        <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
                                        <parameter><decl><type><name><name>enum</name> <name>transform_entity_type</name></name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>name</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>cpstate-&gt;entities</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>transform_entity</name> <modifier>*</modifier></type><name>entity</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>entity</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>type</name></expr>)</condition>
        <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>ENT_VERTEX</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>entity</name><operator>-&gt;</operator><name>entity</name><operator>.</operator><name>node</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>entity</name><operator>-&gt;</operator><name>entity</name><operator>.</operator><name>node</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <return>return <expr><name>entity</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>ENT_EDGE</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>ENT_VLE_EDGE</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>entity</name><operator>-&gt;</operator><name>entity</name><operator>.</operator><name>rel</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>entity</name><operator>-&gt;</operator><name>entity</name><operator>.</operator><name>rel</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <return>return <expr><name>entity</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>

    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Iterate through the cypher_parsestate's transform_entities and returns
 * the entity with name passed by name variable.
 */</comment>
<function><type><name>transform_entity</name> <modifier>*</modifier></type><name>find_variable</name><parameter_list>(<parameter><decl><type><name>cypher_parsestate</name> <modifier>*</modifier></type><name>cpstate</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

    <macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>cpstate-&gt;entities</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>transform_entity</name> <modifier>*</modifier></type><name>entity</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>entity_name</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>entity</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ENT_VERTEX</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>entity_name</name> <operator>=</operator> <name><name>entity</name><operator>-&gt;</operator><name>entity</name><operator>.</operator><name>node</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name><name>entity</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ENT_EDGE</name> <operator>||</operator> <name><name>entity</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ENT_VLE_EDGE</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>entity_name</name> <operator>=</operator> <name><name>entity</name><operator>-&gt;</operator><name>entity</name><operator>.</operator><name>rel</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
                            <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unknown entity type"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>entity_name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>entity_name</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><name>entity</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>

    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// helper function that extracts the name associated with the transform_entity.</comment>
<function><type><name>char</name> <modifier>*</modifier></type><name>get_entity_name</name><parameter_list>(<parameter><decl><type><name>transform_entity</name> <modifier>*</modifier></type><name>entity</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>entity</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ENT_EDGE</name> <operator>||</operator> <name><name>entity</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ENT_VLE_EDGE</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name><name>entity</name><operator>-&gt;</operator><name>entity</name><operator>.</operator><name>rel</name><operator>-&gt;</operator><name>name</name></name></expr>;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>entity</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ENT_VERTEX</name></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><name><name>entity</name><operator>-&gt;</operator><name>entity</name><operator>.</operator><name>node</name><operator>-&gt;</operator><name>name</name></name></expr>;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
                <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
                 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cannot get entity name from transform_entity type %i"</literal></expr></argument>,
                        <argument><expr><name><name>entity</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
