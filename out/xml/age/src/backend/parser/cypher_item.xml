<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/age/src/backend/parser/cypher_item.c"><comment type="block">/*
 * For PostgreSQL Database Management System:
 * (formerly known as Postgres, then as Postgres95)
 *
 * Portions Copyright (c) 1996-2010, The PostgreSQL Global Development Group
 *
 * Portions Copyright (c) 1994, The Regents of the University of California
 *
 * Permission to use, copy, modify, and distribute this software and its documentation for any purpose,
 * without fee, and without a written agreement is hereby granted, provided that the above copyright notice
 * and this paragraph and the following two paragraphs appear in all copies.
 *
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT,
 * INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,
 * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF THE UNIVERSITY
 * OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 * THE SOFTWARE PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA
 * HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/attnum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/makefuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/nodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/parsenodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/pg_list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/primnodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parse_node.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parse_relation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parse_target.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/cypher_expr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/cypher_item.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/cypher_parse_node.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type><name>ExpandAllTables</name><parameter_list>(<parameter><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type><name>expand_rel_attrs</name><parameter_list>(<parameter><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>, <parameter><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>rte</name></decl></parameter>,
                              <parameter><decl><type><name>int</name></type> <name>rtindex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sublevels_up</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// see transformTargetEntry()</comment>
<function><type><name>TargetEntry</name> <modifier>*</modifier></type><name>transform_cypher_item</name><parameter_list>(<parameter><decl><type><name>cypher_parsestate</name> <modifier>*</modifier></type><name>cpstate</name></decl></parameter>, <parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>,
                                   <parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>, <parameter><decl><type><name>ParseExprKind</name></type> <name>expr_kind</name></decl></parameter>,
                                   <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>colname</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>resjunk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pstate</name> <init>= <expr><operator>(</operator><name>ParseState</name> <operator>*</operator><operator>)</operator><name>cpstate</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>expr</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>expr</name> <operator>=</operator> <call><name>transform_cypher_expr</name><argument_list>(<argument><expr><name>cpstate</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>expr_kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>colname</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>resjunk</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>colname</name> <operator>=</operator> <call><name>FigureColname</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><call><name>makeTargetEntry</name><argument_list>(<argument><expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator><name>expr</name></expr></argument>, <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator><name><name>pstate</name><operator>-&gt;</operator><name>p_next_resno</name></name><operator>++</operator></expr></argument>,
                           <argument><expr><name>colname</name></expr></argument>, <argument><expr><name>resjunk</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// see transformTargetList()</comment>
<function><type><name>List</name> <modifier>*</modifier></type><name>transform_cypher_item_list</name><parameter_list>(<parameter><decl><type><name>cypher_parsestate</name> <modifier>*</modifier></type><name>cpstate</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>item_list</name></decl></parameter>,
                                 <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>groupClause</name></decl></parameter>, <parameter><decl><type><name>ParseExprKind</name></type> <name>expr_kind</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>target_list</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>li</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>group_clause</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>hasAgg</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>expand_star</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>expand_star</name> <operator>=</operator> <operator>(</operator><name>expr_kind</name> <operator>!=</operator> <name>EXPR_KIND_UPDATE_SOURCE</name><operator>)</operator></expr>;</expr_stmt>

    <macro><name>foreach</name> <argument_list>(<argument>li</argument>, <argument>item_list</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ResTarget</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>li</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TargetEntry</name> <modifier>*</modifier></type><name>te</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>expand_star</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><name>ColumnRef</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>ColumnRef</name>  <modifier>*</modifier></type><name>cref</name> <init>= <expr><operator>(</operator><name>ColumnRef</name> <operator>*</operator><operator>)</operator> <name><name>item</name><operator>-&gt;</operator><name>val</name></name></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><call><name>llast</name><argument_list>(<argument><expr><name><name>cref</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>A_Star</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pstate</name> <init>= <expr><operator>&amp;</operator><name><name>cpstate</name><operator>-&gt;</operator><name>pstate</name></name></expr></init></decl>;</decl_stmt>

                    <comment type="block">/* we only allow a bare '*' */</comment>
                    <if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>cref</name><operator>-&gt;</operator><name>fields</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                                        <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Invalid number of fields for *"</literal></expr></argument>)</argument_list></call><operator>,</operator>
                                        <call><name>parser_errposition</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>,
                                                           <argument><expr><name><name>cref</name><operator>-&gt;</operator><name>location</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>

                    <expr_stmt><expr><name>target_list</name> <operator>=</operator> <call><name>list_concat</name><argument_list>(<argument><expr><name>target_list</name></expr></argument>,
                                              <argument><expr><call><name>ExpandAllTables</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>,
                                                              <argument><expr><name><name>cref</name><operator>-&gt;</operator><name>location</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* clear the exprHasAgg flag to check transform for an aggregate */</comment>
        <expr_stmt><expr><name><name>cpstate</name><operator>-&gt;</operator><name>exprHasAgg</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

        <comment type="block">/* transform the item */</comment>
        <expr_stmt><expr><name>te</name> <operator>=</operator> <call><name>transform_cypher_item</name><argument_list>(<argument><expr><name>cpstate</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>expr_kind</name></expr></argument>,
                                   <argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>target_list</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>target_list</name></expr></argument>, <argument><expr><name>te</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * Did the tranformed item contain an aggregate function? If it didn't,
         * add it to the potential group_clause. If it did, flag that we found
         * an aggregate in an expression
         */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cpstate</name><operator>-&gt;</operator><name>exprHasAgg</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>group_clause</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>group_clause</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>hasAgg</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block>

    <comment type="block">/*
     * If we found an aggregate function, we need to return the group_clause,
     * even if NIL. parseCheckAggregates at the end of transform_cypher_return
     * will verify if it is valid.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>hasAgg</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>groupClause</name> <operator>=</operator> <name>group_clause</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>target_list</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * From PG's ExpandAllTables()
 *     Transforms '*' (in the target list) into a list of targetlist entries.
 */</comment>
<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type><name>ExpandAllTables</name><parameter_list>(<parameter><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>target</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>found_table</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

    <macro><name>foreach</name><argument_list>(<argument>l</argument>, <argument>pstate-&gt;p_namespace</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ParseNamespaceItem</name> <modifier>*</modifier></type><name>nsitem</name> <init>= <expr><operator>(</operator><name>ParseNamespaceItem</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>rte</name> <init>= <expr><name><name>nsitem</name><operator>-&gt;</operator><name>p_rte</name></name></expr></init></decl>;</decl_stmt>

        <comment type="block">/* Ignore table-only items */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>nsitem</name><operator>-&gt;</operator><name>p_cols_visible</name></name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>
        <comment type="block">/* Should not have any lateral-only items when parsing targetlist */</comment>
        <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>nsitem</name><operator>-&gt;</operator><name>p_lateral_only</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Remember we found a p_cols_visible item */</comment>
        <expr_stmt><expr><name>found_table</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>target</name> <operator>=</operator> <call><name>list_concat</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><call><name>expand_rel_attrs</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>, <argument><expr><name>rte</name></expr></argument>,
                                                      <argument><expr><call><name>RTERangeTablePosn</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>,
                                                                        <argument><expr><name>rte</name></expr></argument>,
                                                                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
                                                      <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <comment type="block">/* Check for "RETURN *;" */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found_table</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                        <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"RETURN * without a pattern is not valid"</literal></expr></argument>)</argument_list></call><operator>,</operator>
                        <call><name>parser_errposition</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><name>target</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * From PG's expandRelAttrs
 * Modified to exclude hidden variables and aliases in RETURN *
 */</comment>
<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type><name>expand_rel_attrs</name><parameter_list>(<parameter><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>, <parameter><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>rte</name></decl></parameter>,
                              <parameter><decl><type><name>int</name></type> <name>rtindex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sublevels_up</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>names</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>vars</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>var</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>te_list</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>var_prefix_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>AGE_DEFAULT_VARNAME_PREFIX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>alias_prefix_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>AGE_DEFAULT_ALIAS_PREFIX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>expandRTE</name><argument_list>(<argument><expr><name>rte</name></expr></argument>, <argument><expr><name>rtindex</name></expr></argument>, <argument><expr><name>sublevels_up</name></expr></argument>, <argument><expr><name>location</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>names</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Require read access to the table.  This is normally redundant with the
     * markVarForSelectPriv calls below, but not if the table has zero
     * columns.
     */</comment>
    <expr_stmt><expr><name><name>rte</name><operator>-&gt;</operator><name>requiredPerms</name></name> <operator>|=</operator> <name>ACL_SELECT</name></expr>;</expr_stmt>

    <comment type="block">/* iterate through the variables */</comment>
    <macro><name>forboth</name><argument_list>(<argument>name</argument>, <argument>names</argument>, <argument>var</argument>, <argument>vars</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>label</name> <init>= <expr><call><name>strVal</name><argument_list>(<argument><expr><call><name>lfirst</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Var</name> <modifier>*</modifier></type><name>varnode</name> <init>= <expr><operator>(</operator><name>Var</name> <operator>*</operator><operator>)</operator><call><name>lfirst</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TargetEntry</name> <modifier>*</modifier></type><name>te</name></decl>;</decl_stmt>

        <comment type="block">/* we want to skip our "hidden" variables */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>AGE_DEFAULT_VARNAME_PREFIX</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>var_prefix_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <comment type="block">/* we want to skip out "hidden" aliases */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>AGE_DEFAULT_ALIAS_PREFIX</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>alias_prefix_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <comment type="block">/* add this variable to the list */</comment>
        <expr_stmt><expr><name>te</name> <operator>=</operator> <call><name>makeTargetEntry</name><argument_list>(<argument><expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator><name>varnode</name></expr></argument>,
                             <argument><expr><operator>(</operator><name>AttrNumber</name><operator>)</operator><name><name>pstate</name><operator>-&gt;</operator><name>p_next_resno</name></name><operator>++</operator></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>te_list</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>te_list</name></expr></argument>, <argument><expr><name>te</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Require read access to each column */</comment>
        <expr_stmt><expr><call><name>markVarForSelectPriv</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>, <argument><expr><name>varnode</name></expr></argument>, <argument><expr><name>rte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>name</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>var</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block">/* lists not the same length? */</comment>

    <return>return <expr><name>te_list</name></expr>;</return>
</block_content>}</block></function>
</unit>
