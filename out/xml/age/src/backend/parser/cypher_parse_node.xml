<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/workspace/age/src/backend/parser/cypher_parse_node.c"><comment type="block">/*
 * For PostgreSQL Database Management System:
 * (formerly known as Postgres, then as Postgres95)
 *
 * Portions Copyright (c) 1996-2010, The PostgreSQL Global Development Group
 *
 * Portions Copyright (c) 1994, The Regents of the University of California
 *
 * Permission to use, copy, modify, and distribute this software and its documentation for any purpose,
 * without fee, and without a written agreement is hereby granted, provided that the above copyright notice
 * and this paragraph and the following two paragraphs appear in all copies.
 *
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT,
 * INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,
 * ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF THE UNIVERSITY
 * OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 * THE SOFTWARE PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA
 * HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mb/pg_wchar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/primnodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parse_node.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/cypher_parse_node.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>errpos_ecb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">// NOTE: sync the logic with make_parsestate()</comment>
<function><type><name>cypher_parsestate</name> <modifier>*</modifier></type><name>make_cypher_parsestate</name><parameter_list>(<parameter><decl><type><name>cypher_parsestate</name> <modifier>*</modifier></type><name>parent_cpstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>parent_pstate</name> <init>= <expr><operator>(</operator><name>ParseState</name> <operator>*</operator><operator>)</operator><name>parent_cpstate</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cypher_parsestate</name> <modifier>*</modifier></type><name>cpstate</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pstate</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>cpstate</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>cpstate</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pstate</name> <operator>=</operator> <operator>(</operator><name>ParseState</name> <operator>*</operator><operator>)</operator><name>cpstate</name></expr>;</expr_stmt>

    <comment type="block">/* Fill in fields that don't start at null/false/zero */</comment>
    <expr_stmt><expr><name><name>pstate</name><operator>-&gt;</operator><name>parentParseState</name></name> <operator>=</operator> <name>parent_pstate</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pstate</name><operator>-&gt;</operator><name>p_next_resno</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pstate</name><operator>-&gt;</operator><name>p_resolve_unknowns</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>parent_cpstate</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>pstate</name><operator>-&gt;</operator><name>p_sourcetext</name></name> <operator>=</operator> <name><name>parent_pstate</name><operator>-&gt;</operator><name>p_sourcetext</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pstate</name><operator>-&gt;</operator><name>p_queryEnv</name></name> <operator>=</operator> <name><name>parent_pstate</name><operator>-&gt;</operator><name>p_queryEnv</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pstate</name><operator>-&gt;</operator><name>p_pre_columnref_hook</name></name> <operator>=</operator> <name><name>parent_pstate</name><operator>-&gt;</operator><name>p_pre_columnref_hook</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pstate</name><operator>-&gt;</operator><name>p_post_columnref_hook</name></name> <operator>=</operator> <name><name>parent_pstate</name><operator>-&gt;</operator><name>p_post_columnref_hook</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pstate</name><operator>-&gt;</operator><name>p_paramref_hook</name></name> <operator>=</operator> <name><name>parent_pstate</name><operator>-&gt;</operator><name>p_paramref_hook</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pstate</name><operator>-&gt;</operator><name>p_coerce_param_hook</name></name> <operator>=</operator> <name><name>parent_pstate</name><operator>-&gt;</operator><name>p_coerce_param_hook</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pstate</name><operator>-&gt;</operator><name>p_ref_hook_state</name></name> <operator>=</operator> <name><name>parent_pstate</name><operator>-&gt;</operator><name>p_ref_hook_state</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>cpstate</name><operator>-&gt;</operator><name>graph_name</name></name> <operator>=</operator> <name><name>parent_cpstate</name><operator>-&gt;</operator><name>graph_name</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cpstate</name><operator>-&gt;</operator><name>graph_oid</name></name> <operator>=</operator> <name><name>parent_cpstate</name><operator>-&gt;</operator><name>graph_oid</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cpstate</name><operator>-&gt;</operator><name>params</name></name> <operator>=</operator> <name><name>parent_cpstate</name><operator>-&gt;</operator><name>params</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>cpstate</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>free_cypher_parsestate</name><parameter_list>(<parameter><decl><type><name>cypher_parsestate</name> <modifier>*</modifier></type><name>cpstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>free_parsestate</name><argument_list>(<argument><expr><operator>(</operator><name>ParseState</name> <operator>*</operator><operator>)</operator><name>cpstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setup_errpos_ecb</name><parameter_list>(<parameter><decl><type><name>errpos_ecb_state</name> <modifier>*</modifier></type><name>ecb_state</name></decl></parameter>, <parameter><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>,
                      <parameter><decl><type><name>int</name></type> <name>query_loc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>ecb_state</name><operator>-&gt;</operator><name>ecb</name><operator>.</operator><name>previous</name></name> <operator>=</operator> <name>error_context_stack</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ecb_state</name><operator>-&gt;</operator><name>ecb</name><operator>.</operator><name>callback</name></name> <operator>=</operator> <name>errpos_ecb</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ecb_state</name><operator>-&gt;</operator><name>ecb</name><operator>.</operator><name>arg</name></name> <operator>=</operator> <name>ecb_state</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ecb_state</name><operator>-&gt;</operator><name>pstate</name></name> <operator>=</operator> <name>pstate</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ecb_state</name><operator>-&gt;</operator><name>query_loc</name></name> <operator>=</operator> <name>query_loc</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>error_context_stack</name> <operator>=</operator> <operator>&amp;</operator><name><name>ecb_state</name><operator>-&gt;</operator><name>ecb</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cancel_errpos_ecb</name><parameter_list>(<parameter><decl><type><name>errpos_ecb_state</name> <modifier>*</modifier></type><name>ecb_state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>error_context_stack</name> <operator>=</operator> <name><name>ecb_state</name><operator>-&gt;</operator><name>ecb</name><operator>.</operator><name>previous</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * adjust the current error position by adding the position of the current
 * query which is a subquery of a parent query
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>errpos_ecb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>errpos_ecb_state</name> <modifier>*</modifier></type><name>ecb_state</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>query_pos</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>geterrcode</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ERRCODE_QUERY_CANCELED</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>ecb_state</name><operator>-&gt;</operator><name>query_loc</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>query_pos</name> <operator>=</operator> <call><name>pg_mbstrlen_with_len</name><argument_list>(<argument><expr><name><name>ecb_state</name><operator>-&gt;</operator><name>pstate</name><operator>-&gt;</operator><name>p_sourcetext</name></name></expr></argument>,
                                     <argument><expr><name><name>ecb_state</name><operator>-&gt;</operator><name>query_loc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>errposition</name><argument_list>(<argument><expr><name>query_pos</name> <operator>+</operator> <call><name>geterrposition</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>find_rte</name><parameter_list>(<parameter><decl><type><name>cypher_parsestate</name> <modifier>*</modifier></type><name>cpstate</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>varname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pstate</name> <init>= <expr><operator>(</operator><name>ParseState</name> <operator>*</operator><operator>)</operator> <name>cpstate</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

    <macro><name>foreach</name> <argument_list>(<argument>lc</argument>, <argument>pstate-&gt;p_rtable</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>rte</name> <init>= <expr><operator>(</operator><name>RangeTblEntry</name> <operator>*</operator><operator>)</operator><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Alias</name> <modifier>*</modifier></type><name>alias</name> <init>= <expr><name><name>rte</name><operator>-&gt;</operator><name>alias</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>alias</name></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>alias</name><operator>-&gt;</operator><name>aliasname</name></name></expr></argument>, <argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>rte</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>

    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Generates a default alias name for when a query needs on and the parse
 * state does not provide one.
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type><name>get_next_default_alias</name><parameter_list>(<parameter><decl><type><name>cypher_parsestate</name> <modifier>*</modifier></type><name>cpstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>alias_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* get the length of the combinded string */</comment>
    <expr_stmt><expr><name>nlen</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s%d"</literal></expr></argument>, <argument><expr><name>AGE_DEFAULT_ALIAS_PREFIX</name></expr></argument>,
                    <argument><expr><name><name>cpstate</name><operator>-&gt;</operator><name>default_alias_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* allocate the space */</comment>
    <expr_stmt><expr><name>alias_name</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>nlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* create the name */</comment>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>alias_name</name></expr></argument>, <argument><expr><name>nlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s%d"</literal></expr></argument>, <argument><expr><name>AGE_DEFAULT_ALIAS_PREFIX</name></expr></argument>,
             <argument><expr><name><name>cpstate</name><operator>-&gt;</operator><name>default_alias_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* increment the default alias number */</comment>
    <expr_stmt><expr><name><name>cpstate</name><operator>-&gt;</operator><name>default_alias_num</name></name><operator>++</operator></expr>;</expr_stmt>

    <return>return <expr><name>alias_name</name></expr>;</return>
</block_content>}</block></function>
</unit>
