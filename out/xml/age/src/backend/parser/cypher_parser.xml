<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/age/src/backend/parser/cypher_parser.c"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/keywords.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/pg_list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/scansup.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/ag_scanner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/cypher_gram.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/cypher_keywords.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/cypher_parser.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>cypher_yylex</name><parameter_list>(<parameter><decl><type><name>YYSTYPE</name> <modifier>*</modifier></type><name>lvalp</name></decl></parameter>, <parameter><decl><type><name>YYLTYPE</name> <modifier>*</modifier></type><name>llocp</name></decl></parameter>, <parameter><decl><type><name>ag_scanner_t</name></type> <name>scanner</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/*
     * This list must match ag_token_type.
     * 0 means end-of-input.
     */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>type_map</name><index>[]</index></name> <init>= <expr><block>{
        <expr><literal type="number">0</literal></expr>,
        <expr><name>INTEGER</name></expr>,
        <expr><name>DECIMAL</name></expr>,
        <expr><name>STRING</name></expr>,
        <expr><name>IDENTIFIER</name></expr>,
        <expr><name>PARAMETER</name></expr>,
        <expr><name>NOT_EQ</name></expr>,
        <expr><name>LT_EQ</name></expr>,
        <expr><name>GT_EQ</name></expr>,
        <expr><name>DOT_DOT</name></expr>,
        <expr><name>TYPECAST</name></expr>,
        <expr><name>PLUS_EQ</name></expr>,
        <expr><name>EQ_TILDE</name></expr>
    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ag_token</name></type> <name>token</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>ag_scanner_next_token</name><argument_list>(<argument><expr><name>scanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name><name>token</name><operator>.</operator><name>type</name></name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><name>AG_TOKEN_NULL</name></expr>:</case>
        <break>break;</break>
    <case>case <expr><name>AG_TOKEN_INTEGER</name></expr>:</case>
        <expr_stmt><expr><name><name>lvalp</name><operator>-&gt;</operator><name>integer</name></name> <operator>=</operator> <name><name>token</name><operator>.</operator><name>value</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>AG_TOKEN_DECIMAL</name></expr>:</case>
    <case>case <expr><name>AG_TOKEN_STRING</name></expr>:</case>
        <expr_stmt><expr><name><name>lvalp</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name><name>token</name><operator>.</operator><name>value</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>AG_TOKEN_IDENTIFIER</name></expr>:</case>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>ScanKeyword</name> <modifier>*</modifier></type><name>keyword</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ident</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>keyword</name> <operator>=</operator> <call><name>ScanKeywordLookup</name><argument_list>(<argument><expr><name><name>token</name><operator>.</operator><name>value</name><operator>.</operator><name>s</name></name></expr></argument>, <argument><expr><name>cypher_keywords</name></expr></argument>,
                                    <argument><expr><name>num_cypher_keywords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>keyword</name></expr>)</condition>
        <block>{<block_content>
            <comment type="block">/*
             * use token.value.s instead of keyword-&gt;name to preserve
             * case sensitivity
             */</comment>
            <expr_stmt><expr><name><name>lvalp</name><operator>-&gt;</operator><name>keyword</name></name> <operator>=</operator> <name><name>token</name><operator>.</operator><name>value</name><operator>.</operator><name>s</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>llocp</name> <operator>=</operator> <name><name>token</name><operator>.</operator><name>location</name></name></expr>;</expr_stmt>
            <return>return <expr><name><name>keyword</name><operator>-&gt;</operator><name>value</name></name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>ident</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name><name>token</name><operator>.</operator><name>value</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>truncate_identifier</name><argument_list>(<argument><expr><name>ident</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>ident</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>lvalp</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <name>ident</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>AG_TOKEN_PARAMETER</name></expr>:</case>
        <expr_stmt><expr><name><name>lvalp</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name><name>token</name><operator>.</operator><name>value</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    <case>case <expr><name>AG_TOKEN_LT_GT</name></expr>:</case>
    <case>case <expr><name>AG_TOKEN_LT_EQ</name></expr>:</case>
    <case>case <expr><name>AG_TOKEN_GT_EQ</name></expr>:</case>
    <case>case <expr><name>AG_TOKEN_DOT_DOT</name></expr>:</case>
    <case>case <expr><name>AG_TOKEN_PLUS_EQ</name></expr>:</case>
    <case>case <expr><name>AG_TOKEN_EQ_TILDE</name></expr>:</case>
        <break>break;</break>
    <case>case <expr><name>AG_TOKEN_TYPECAST</name></expr>:</case>
        <break>break;</break>
    <case>case <expr><name>AG_TOKEN_CHAR</name></expr>:</case>
        <expr_stmt><expr><operator>*</operator><name>llocp</name> <operator>=</operator> <name><name>token</name><operator>.</operator><name>location</name></name></expr>;</expr_stmt>
        <return>return <expr><name><name>token</name><operator>.</operator><name>value</name><operator>.</operator><name>c</name></name></expr>;</return>
    <default>default:</default>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unexpected ag_token_type: %d"</literal></expr></argument>, <argument><expr><name><name>token</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>

    <expr_stmt><expr><operator>*</operator><name>llocp</name> <operator>=</operator> <name><name>token</name><operator>.</operator><name>location</name></name></expr>;</expr_stmt>
    <return>return <expr><name><name>type_map</name><index>[<expr><name><name>token</name><operator>.</operator><name>type</name></name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cypher_yyerror</name><parameter_list>(<parameter><decl><type><name>YYLTYPE</name> <modifier>*</modifier></type><name>llocp</name></decl></parameter>, <parameter><decl><type><name>ag_scanner_t</name></type> <name>scanner</name></decl></parameter>,
                    <parameter><decl><type><name>cypher_yy_extra</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
                    <call><name>ag_scanner_errmsg</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>scanner</name></expr></argument>)</argument_list></call><operator>,</operator>
                    <call><name>ag_scanner_errposition</name><argument_list>(<argument><expr><operator>*</operator><name>llocp</name></expr></argument>, <argument><expr><name>scanner</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* declaration to make mac os x compiler happy */</comment>
<function_decl><type><name>int</name></type> <name>cypher_yyparse</name><parameter_list>(<parameter><decl><type><name>ag_scanner_t</name></type> <name>scanner</name></decl></parameter>, <parameter><decl><type><name>cypher_yy_extra</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>List</name> <modifier>*</modifier></type><name>parse_cypher</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ag_scanner_t</name></type> <name>scanner</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cypher_yy_extra</name></type> <name>extra</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>yyresult</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>scanner</name> <operator>=</operator> <call><name>ag_scanner_create</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>extra</name><operator>.</operator><name>result</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>extra</name><operator>.</operator><name>extra</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>yyresult</name> <operator>=</operator> <call><name>cypher_yyparse</name><argument_list>(<argument><expr><name>scanner</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ag_scanner_destroy</name><argument_list>(<argument><expr><name>scanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * cypher_yyparse() returns 0 if parsing was successful.
     * Otherwise, it returns 1 (invalid input) or 2 (memory exhaustion).
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>yyresult</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NIL</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/*
     * Append the extra node node regardless of its value. Currently the extra
     * node is only used by EXPLAIN
    */</comment>
    <return>return <expr><call><name>lappend</name><argument_list>(<argument><expr><name><name>extra</name><operator>.</operator><name>result</name></name></expr></argument>, <argument><expr><name><name>extra</name><operator>.</operator><name>extra</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
