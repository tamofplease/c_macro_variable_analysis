<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/yb/rocksdb/db/c_test.c"><comment type="block">/* Copyright (c) 2011 The LevelDB Authors. All rights reserved.
   Use of this source code is governed by a BSD-style license that can be
   found in the LICENSE file. See the AUTHORS file for names of contributors. */</comment>

<comment type="line">//</comment>
<comment type="line">// The following only applies to changes made to this file as part of YugaByte development.</comment>
<comment type="line">//</comment>
<comment type="line">// Portions Copyright (c) YugaByte, Inc.</comment>
<comment type="line">//</comment>
<comment type="line">// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except</comment>
<comment type="line">// in compliance with the License.  You may obtain a copy of the License at</comment>
<comment type="line">//</comment>
<comment type="line">// http://www.apache.org/licenses/LICENSE-2.0</comment>
<comment type="line">//</comment>
<comment type="line">// Unless required by applicable law or agreed to in writing, software distributed under the License</comment>
<comment type="line">// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express</comment>
<comment type="line">// or implied.  See the License for the specific language governing permissions and limitations</comment>
<comment type="line">// under the License.</comment>
<comment type="line">//</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rocksdb/c.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>OS_WIN</name></cpp:ifndef>
<cpp:include>#  <cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<comment type="line">// Can not use port/port.h macros as this is a c file</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>OS_WIN</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Windows.h&gt;</cpp:file></cpp:include>

<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>snprintf</name></cpp:macro> <cpp:value>_snprintf</cpp:value></cpp:define>

<comment type="line">// Ok for uniqueness</comment>
<function><type><name>int</name></type> <name>geteuid</name><parameter_list>()</parameter_list> <block>{<block_content>

  <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><call><name>GetCurrentProcessId</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>result</name> <operator>|=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>GetCurrentThreadId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>phase</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>dbname</name><index>[<expr><literal type="number">200</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>dbbackupname</name><index>[<expr><literal type="number">200</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>StartPhase</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"=== Test %s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>phase</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>GetTempDir</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ret</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"TEST_TMPDIR"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>ret</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="string">"/tmp"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CheckNoError</name><parameter_list>(<parameter><type><name>err</name></type></parameter>)</parameter_list></cpp:macro>                                               \
  <cpp:value>if ((err) != NULL) {                                                  \
    fprintf(stderr, "%s:%d: %s: %s\n", __FILE__, __LINE__, phase, (err)); \
    abort();                                                            \
  }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CheckCondition</name><parameter_list>(<parameter><type><name>cond</name></type></parameter>)</parameter_list></cpp:macro>                                            \
  <cpp:value>if (!(cond)) {                                                        \
    fprintf(stderr, "%s:%d: %s: %s\n", __FILE__, __LINE__, phase, #cond); \
    abort();                                                            \
  }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CheckEqual</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>expected</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>expected</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>v</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// ok</comment>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>expected</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>v</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>n</name> <operator>==</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>expected</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
             <call><name>memcmp</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// ok</comment>
    <return>return;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: expected '%s', got '%s'\n"</literal></expr></argument>,
            <argument><expr><name>phase</name></expr></argument>,
            <argument><expr><operator>(</operator><ternary><condition><expr><name>expected</name></expr> ?</condition><then> <expr><name>expected</name></expr> </then><else>: <expr><literal type="string">"(null)"</literal></expr></else></ternary><operator>)</operator></expr></argument>,
            <argument><expr><operator>(</operator><ternary><condition><expr><name>v</name></expr> ?</condition><then> <expr><name>v</name></expr> </then><else>: <expr><literal type="string">"(null"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Free</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CheckGet</name><parameter_list>(
    <parameter><decl><type><name>rocksdb_t</name><modifier>*</modifier></type> <name>db</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>rocksdb_readoptions_t</name><modifier>*</modifier></type> <name>options</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>expected</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>val_len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>val</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>rocksdb_get</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>val_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CheckEqual</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>val_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CheckGetCF</name><parameter_list>(
    <parameter><decl><type><name>rocksdb_t</name><modifier>*</modifier></type> <name>db</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>rocksdb_readoptions_t</name><modifier>*</modifier></type> <name>options</name></decl></parameter>,
    <parameter><decl><type><name>rocksdb_column_family_handle_t</name><modifier>*</modifier></type> <name>handle</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>expected</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>val_len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>val</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>rocksdb_get_cf</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>val_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CheckEqual</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>val_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>CheckIter</name><parameter_list>(<parameter><decl><type><name>rocksdb_iterator_t</name><modifier>*</modifier></type> <name>iter</name></decl></parameter>,
                      <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>val</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>str</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rocksdb_iter_key</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CheckEqual</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>rocksdb_iter_value</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CheckEqual</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Callback from rocksdb_writebatch_iterate()</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>CheckPut</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>,
                     <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>klen</name></decl></parameter>,
                     <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>vlen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name><modifier>*</modifier></type> <name>state</name> <init>= <expr><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CheckCondition</name><argument_list>(<argument><expr><operator>*</operator><name>state</name> <operator>&lt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><operator>*</operator><name>state</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">0</literal></expr>:</case>
      <expr_stmt><expr><call><name>CheckEqual</name><argument_list>(<argument><expr><literal type="string">"bar"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CheckEqual</name><argument_list>(<argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">1</literal></expr>:</case>
      <expr_stmt><expr><call><name>CheckEqual</name><argument_list>(<argument><expr><literal type="string">"box"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CheckEqual</name><argument_list>(<argument><expr><literal type="string">"c"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>
  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>state</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Callback from rocksdb_writebatch_iterate()</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>CheckDel</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>klen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name><modifier>*</modifier></type> <name>state</name> <init>= <expr><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator> <name>ptr</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>CheckCondition</name><argument_list>(<argument><expr><operator>*</operator><name>state</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CheckEqual</name><argument_list>(<argument><expr><literal type="string">"bar"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>state</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CmpDestroy</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>CmpCompare</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>alen</name></decl></parameter>,
                      <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>blen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>alen</name> <operator>&lt;</operator> <name>blen</name><operator>)</operator></expr> ?</condition><then> <expr><name>alen</name></expr> </then><else>: <expr><name>blen</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>memcmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>alen</name> <operator>&lt;</operator> <name>blen</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>alen</name> <operator>&gt;</operator> <name>blen</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>CmpName</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><literal type="string">"foo"</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Custom filter policy</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name>fake_filter_result</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>FilterDestroy</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>FilterName</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><literal type="string">"TestFilter"</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>FilterGetType</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>rocksdb_filterpolicy_filter_type_full_filter</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>FilterCreate</name><parameter_list>(
    <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier><modifier>*</modifier></type> <name>key_array</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name><modifier>*</modifier></type> <name>key_length_array</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>num_keys</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>filter_length</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>filter_length</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>result</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"fake"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name>FilterKeyMatch</name><parameter_list>(
    <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filter</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>filter_length</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>CheckCondition</name><argument_list>(<argument><expr><name>filter_length</name> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CheckCondition</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"fake"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>fake_filter_result</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Custom compaction filter</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>CFilterDestroy</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>CFilterName</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="string">"foo"</literal></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name>CFilterFilter</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>,
                                   <parameter><decl><type><name>size_t</name></type> <name>key_length</name></decl></parameter>,
                                   <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>existing_value</name></decl></parameter>,
                                   <parameter><decl><type><name>size_t</name></type> <name>value_length</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>new_value</name></decl></parameter>,
                                   <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>new_value_length</name></decl></parameter>,
                                   <parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>value_changed</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>key_length</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>, <argument><expr><name>key_length</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"baz"</literal></expr></argument>, <argument><expr><name>key_length</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>value_changed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>new_value</name> <operator>=</operator> <literal type="string">"newbazvalue"</literal></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>new_value_length</name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CFilterFactoryDestroy</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>CFilterFactoryName</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="string">"foo"</literal></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>rocksdb_compactionfilter_t</name><modifier>*</modifier></type> <name>CFilterCreate</name><parameter_list>(
    <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>rocksdb_compactionfiltercontext_t</name><modifier>*</modifier></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>rocksdb_compactionfilter_create</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CFilterDestroy</name></expr></argument>, <argument><expr><name>CFilterFilter</name></expr></argument>,
                                         <argument><expr><name>CFilterName</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>rocksdb_t</name><modifier>*</modifier></type> <name>CheckCompaction</name><parameter_list>(<parameter><decl><type><name>rocksdb_t</name><modifier>*</modifier></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>rocksdb_options_t</name><modifier>*</modifier></type> <name>options</name></decl></parameter>,
                                  <parameter><decl><type><name>rocksdb_readoptions_t</name><modifier>*</modifier></type> <name>roptions</name></decl></parameter>,
                                  <parameter><decl><type><name>rocksdb_writeoptions_t</name><modifier>*</modifier></type> <name>woptions</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>rocksdb_open</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rocksdb_put</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>woptions</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"foovalue"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CheckGet</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>roptions</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="string">"foovalue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rocksdb_put</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>woptions</name></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"barvalue"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CheckGet</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>roptions</name></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>, <argument><expr><literal type="string">"barvalue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rocksdb_put</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>woptions</name></expr></argument>, <argument><expr><literal type="string">"baz"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"bazvalue"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CheckGet</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>roptions</name></expr></argument>, <argument><expr><literal type="string">"baz"</literal></expr></argument>, <argument><expr><literal type="string">"bazvalue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Force compaction</comment>
  <expr_stmt><expr><call><name>rocksdb_compact_range</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// should have filtered bar, but not foo</comment>
  <expr_stmt><expr><call><name>CheckGet</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>roptions</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="string">"foovalue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CheckGet</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>roptions</name></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CheckGet</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>roptions</name></expr></argument>, <argument><expr><literal type="string">"baz"</literal></expr></argument>, <argument><expr><literal type="string">"newbazvalue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>db</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Custom merge operator</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>MergeOperatorDestroy</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content> </block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>MergeOperatorName</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><literal type="string">"TestMergeOperator"</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>MergeOperatorFullMerge</name><parameter_list>(
    <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>key_length</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>existing_value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>existing_value_length</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier><modifier>*</modifier></type> <name>operands_list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name><modifier>*</modifier></type> <name>operands_list_length</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>num_operands</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>success</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>new_value_length</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>new_value_length</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>success</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>result</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"fake"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>MergeOperatorPartialMerge</name><parameter_list>(
    <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>key_length</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier><modifier>*</modifier></type> <name>operands_list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name><modifier>*</modifier></type> <name>operands_list_length</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>num_operands</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>success</name></decl></parameter>, <parameter><decl><type><name>size_t</name><modifier>*</modifier></type> <name>new_value_length</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>new_value_length</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>success</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>result</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"fake"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>rocksdb_t</name><modifier>*</modifier></type> <name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>rocksdb_comparator_t</name><modifier>*</modifier></type> <name>cmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>rocksdb_cache_t</name><modifier>*</modifier></type> <name>cache</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>rocksdb_env_t</name><modifier>*</modifier></type> <name>env</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>rocksdb_options_t</name><modifier>*</modifier></type> <name>options</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>rocksdb_block_based_table_options_t</name><modifier>*</modifier></type> <name>table_options</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>rocksdb_readoptions_t</name><modifier>*</modifier></type> <name>roptions</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>rocksdb_writeoptions_t</name><modifier>*</modifier></type> <name>woptions</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>run</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dbname</name></expr></argument>)</argument_list></sizeof></expr></argument>,
           <argument><expr><literal type="string">"%s/rocksdb_c_test-%d"</literal></expr></argument>,
           <argument><expr><call><name>GetTempDir</name><argument_list>()</argument_list></call></expr></argument>,
           <argument><expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <call><name>geteuid</name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>dbbackupname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dbbackupname</name></expr></argument>)</argument_list></sizeof></expr></argument>,
           <argument><expr><literal type="string">"%s/rocksdb_c_test-%d-backup"</literal></expr></argument>,
           <argument><expr><call><name>GetTempDir</name><argument_list>()</argument_list></call></expr></argument>,
           <argument><expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <call><name>geteuid</name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>StartPhase</name><argument_list>(<argument><expr><literal type="string">"create_objects"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>rocksdb_comparator_create</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CmpDestroy</name></expr></argument>, <argument><expr><name>CmpCompare</name></expr></argument>, <argument><expr><name>CmpName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>env</name> <operator>=</operator> <call><name>rocksdb_create_default_env</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cache</name> <operator>=</operator> <call><name>rocksdb_cache_create_lru</name><argument_list>(<argument><expr><literal type="number">100000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>rocksdb_options_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rocksdb_options_set_comparator</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rocksdb_options_set_error_if_exists</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rocksdb_options_set_env</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rocksdb_options_set_info_log</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rocksdb_options_set_write_buffer_size</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="number">100000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rocksdb_options_set_paranoid_checks</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rocksdb_options_set_max_open_files</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>table_options</name> <operator>=</operator> <call><name>rocksdb_block_based_options_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rocksdb_block_based_options_set_block_cache</name><argument_list>(<argument><expr><name>table_options</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rocksdb_options_set_block_based_table_factory</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>table_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>rocksdb_options_set_compression</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>rocksdb_no_compression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rocksdb_options_set_compression_options</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">14</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name><name>compression_levels</name><index>[]</index></name> <init>= <expr><block>{<expr><name>rocksdb_no_compression</name></expr>, <expr><name>rocksdb_no_compression</name></expr>,
                              <expr><name>rocksdb_no_compression</name></expr>, <expr><name>rocksdb_no_compression</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>rocksdb_options_set_compression_per_level</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>compression_levels</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>roptions</name> <operator>=</operator> <call><name>rocksdb_readoptions_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rocksdb_readoptions_set_verify_checksums</name><argument_list>(<argument><expr><name>roptions</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rocksdb_readoptions_set_fill_cache</name><argument_list>(<argument><expr><name>roptions</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>woptions</name> <operator>=</operator> <call><name>rocksdb_writeoptions_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rocksdb_writeoptions_set_sync</name><argument_list>(<argument><expr><name>woptions</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>StartPhase</name><argument_list>(<argument><expr><literal type="string">"destroy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rocksdb_destroy_db</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>StartPhase</name><argument_list>(<argument><expr><literal type="string">"open_error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rocksdb_open</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CheckCondition</name><argument_list>(<argument><expr><name>err</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>StartPhase</name><argument_list>(<argument><expr><literal type="string">"open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rocksdb_options_set_create_if_missing</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>rocksdb_open</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CheckGet</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>roptions</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>StartPhase</name><argument_list>(<argument><expr><literal type="string">"put"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rocksdb_put</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>woptions</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"hello"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CheckGet</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>roptions</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="string">"hello"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>StartPhase</name><argument_list>(<argument><expr><literal type="string">"backup_and_restore"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <block>{<block_content>
    <expr_stmt><expr><call><name>rocksdb_destroy_db</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>dbbackupname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>rocksdb_backup_engine_t</name> <modifier>*</modifier></type><name>be</name> <init>= <expr><call><name>rocksdb_backup_engine_open</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>dbbackupname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>rocksdb_backup_engine_create_new_backup</name><argument_list>(<argument><expr><name>be</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>rocksdb_delete</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>woptions</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>rocksdb_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>rocksdb_destroy_db</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>rocksdb_restore_options_t</name> <modifier>*</modifier></type><name>restore_options</name> <init>= <expr><call><name>rocksdb_restore_options_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>rocksdb_restore_options_set_keep_log_files</name><argument_list>(<argument><expr><name>restore_options</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_backup_engine_restore_db_from_latest_backup</name><argument_list>(<argument><expr><name>be</name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>, <argument><expr><name>restore_options</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_restore_options_destroy</name><argument_list>(<argument><expr><name>restore_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>rocksdb_options_set_error_if_exists</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>rocksdb_open</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_options_set_error_if_exists</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CheckGet</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>roptions</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="string">"hello"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>rocksdb_backup_engine_close</name><argument_list>(<argument><expr><name>be</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>

  <expr_stmt><expr><call><name>StartPhase</name><argument_list>(<argument><expr><literal type="string">"compactall"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rocksdb_compact_range</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CheckGet</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>roptions</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="string">"hello"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>StartPhase</name><argument_list>(<argument><expr><literal type="string">"compactrange"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rocksdb_compact_range</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"z"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CheckGet</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>roptions</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="string">"hello"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>StartPhase</name><argument_list>(<argument><expr><literal type="string">"writebatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <block>{<block_content>
    <decl_stmt><decl><type><name>rocksdb_writebatch_t</name><modifier>*</modifier></type> <name>wb</name> <init>= <expr><call><name>rocksdb_writebatch_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>rocksdb_writebatch_put</name><argument_list>(<argument><expr><name>wb</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_writebatch_clear</name><argument_list>(<argument><expr><name>wb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_writebatch_put</name><argument_list>(<argument><expr><name>wb</name></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_writebatch_put</name><argument_list>(<argument><expr><name>wb</name></expr></argument>, <argument><expr><literal type="string">"box"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_writebatch_delete</name><argument_list>(<argument><expr><name>wb</name></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_write</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>woptions</name></expr></argument>, <argument><expr><name>wb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckGet</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>roptions</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="string">"hello"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckGet</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>roptions</name></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckGet</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>roptions</name></expr></argument>, <argument><expr><literal type="string">"box"</literal></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>rocksdb_writebatch_iterate</name><argument_list>(<argument><expr><name>wb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><name>CheckPut</name></expr></argument>, <argument><expr><name>CheckDel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckCondition</name><argument_list>(<argument><expr><name>pos</name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_writebatch_destroy</name><argument_list>(<argument><expr><name>wb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>

  <expr_stmt><expr><call><name>StartPhase</name><argument_list>(<argument><expr><literal type="string">"writebatch_vectors"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <block>{<block_content>
    <decl_stmt><decl><type><name>rocksdb_writebatch_t</name><modifier>*</modifier></type> <name>wb</name> <init>= <expr><call><name>rocksdb_writebatch_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>k_list</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="string">"z"</literal></expr>, <expr><literal type="string">"ap"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name><name>k_sizes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>v_list</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="string">"x"</literal></expr>, <expr><literal type="string">"y"</literal></expr>, <expr><literal type="string">"z"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name><name>v_sizes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>rocksdb_writebatch_putv</name><argument_list>(<argument><expr><name>wb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>k_list</name></expr></argument>, <argument><expr><name>k_sizes</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>v_list</name></expr></argument>, <argument><expr><name>v_sizes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_write</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>woptions</name></expr></argument>, <argument><expr><name>wb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckGet</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>roptions</name></expr></argument>, <argument><expr><literal type="string">"zap"</literal></expr></argument>, <argument><expr><literal type="string">"xyz"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_writebatch_delete</name><argument_list>(<argument><expr><name>wb</name></expr></argument>, <argument><expr><literal type="string">"zap"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_write</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>woptions</name></expr></argument>, <argument><expr><name>wb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckGet</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>roptions</name></expr></argument>, <argument><expr><literal type="string">"zap"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_writebatch_destroy</name><argument_list>(<argument><expr><name>wb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>

  <expr_stmt><expr><call><name>StartPhase</name><argument_list>(<argument><expr><literal type="string">"writebatch_rep"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <block>{<block_content>
    <decl_stmt><decl><type><name>rocksdb_writebatch_t</name><modifier>*</modifier></type> <name>wb1</name> <init>= <expr><call><name>rocksdb_writebatch_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>rocksdb_writebatch_put</name><argument_list>(<argument><expr><name>wb1</name></expr></argument>, <argument><expr><literal type="string">"baz"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_writebatch_put</name><argument_list>(<argument><expr><name>wb1</name></expr></argument>, <argument><expr><literal type="string">"quux"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"e"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_writebatch_delete</name><argument_list>(<argument><expr><name>wb1</name></expr></argument>, <argument><expr><literal type="string">"quux"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>repsize1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>rep</name> <init>= <expr><call><name>rocksdb_writebatch_data</name><argument_list>(<argument><expr><name>wb1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>repsize1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>rocksdb_writebatch_t</name><modifier>*</modifier></type> <name>wb2</name> <init>= <expr><call><name>rocksdb_writebatch_create_from</name><argument_list>(<argument><expr><name>rep</name></expr></argument>, <argument><expr><name>repsize1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CheckCondition</name><argument_list>(<argument><expr><call><name>rocksdb_writebatch_count</name><argument_list>(<argument><expr><name>wb1</name></expr></argument>)</argument_list></call> <operator>==</operator>
                   <call><name>rocksdb_writebatch_count</name><argument_list>(<argument><expr><name>wb2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>repsize2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CheckCondition</name><argument_list>(
        <argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>rep</name></expr></argument>, <argument><expr><call><name>rocksdb_writebatch_data</name><argument_list>(<argument><expr><name>wb2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>repsize2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>repsize1</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_writebatch_destroy</name><argument_list>(<argument><expr><name>wb1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_writebatch_destroy</name><argument_list>(<argument><expr><name>wb2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>

  <expr_stmt><expr><call><name>StartPhase</name><argument_list>(<argument><expr><literal type="string">"iter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <block>{<block_content>
    <decl_stmt><decl><type><name>rocksdb_iterator_t</name><modifier>*</modifier></type> <name>iter</name> <init>= <expr><call><name>rocksdb_create_iterator</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>roptions</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CheckCondition</name><argument_list>(<argument><expr><operator>!</operator><call><name>rocksdb_iter_valid</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_iter_seek_to_first</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckCondition</name><argument_list>(<argument><expr><call><name>rocksdb_iter_valid</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckIter</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><literal type="string">"box"</literal></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_iter_next</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckIter</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="string">"hello"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_iter_prev</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckIter</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><literal type="string">"box"</literal></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_iter_prev</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckCondition</name><argument_list>(<argument><expr><operator>!</operator><call><name>rocksdb_iter_valid</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_iter_seek_to_last</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckIter</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="string">"hello"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_iter_seek</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckIter</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><literal type="string">"box"</literal></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_iter_get_error</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_iter_destroy</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>

  <expr_stmt><expr><call><name>StartPhase</name><argument_list>(<argument><expr><literal type="string">"multiget"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>keys</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="string">"box"</literal></expr>, <expr><literal type="string">"foo"</literal></expr>, <expr><literal type="string">"notfound"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name><name>keys_sizes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>vals</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name><name>vals_sizes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>errs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>rocksdb_multi_get</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>roptions</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><name>keys_sizes</name></expr></argument>, <argument><expr><name>vals</name></expr></argument>, <argument><expr><name>vals_sizes</name></expr></argument>, <argument><expr><name>errs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>CheckEqual</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>errs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <switch>switch <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><literal type="number">0</literal></expr>:</case>
        <expr_stmt><expr><call><name>CheckEqual</name><argument_list>(<argument><expr><literal type="string">"c"</literal></expr></argument>, <argument><expr><name><name>vals</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>vals_sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><literal type="number">1</literal></expr>:</case>
        <expr_stmt><expr><call><name>CheckEqual</name><argument_list>(<argument><expr><literal type="string">"hello"</literal></expr></argument>, <argument><expr><name><name>vals</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>vals_sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><literal type="number">2</literal></expr>:</case>
        <expr_stmt><expr><call><name>CheckEqual</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>vals</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>vals_sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></switch>
      <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vals</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block>

  <expr_stmt><expr><call><name>StartPhase</name><argument_list>(<argument><expr><literal type="string">"approximate_sizes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">20000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>keybuf</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>valbuf</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name><name>sizes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>start</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"k00000000000000010000"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name><name>start_len</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">21</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>limit</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="string">"k00000000000000010000"</literal></expr>, <expr><literal type="string">"z"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name><name>limit_len</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">21</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>rocksdb_writeoptions_set_sync</name><argument_list>(<argument><expr><name>woptions</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>keybuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>keybuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"k%020d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>valbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>valbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"v%020d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>rocksdb_put</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>woptions</name></expr></argument>, <argument><expr><name>keybuf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>keybuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>valbuf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>valbuf</name></expr></argument>)</argument_list></call></expr></argument>,
                  <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>rocksdb_approximate_sizes</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>start_len</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>limit_len</name></expr></argument>, <argument><expr><name>sizes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckCondition</name><argument_list>(<argument><expr><name><name>sizes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckCondition</name><argument_list>(<argument><expr><name><name>sizes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>

  <expr_stmt><expr><call><name>StartPhase</name><argument_list>(<argument><expr><literal type="string">"property"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>prop</name> <init>= <expr><call><name>rocksdb_property_value</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"nosuchprop"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CheckCondition</name><argument_list>(<argument><expr><name>prop</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>prop</name> <operator>=</operator> <call><name>rocksdb_property_value</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"rocksdb.stats"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckCondition</name><argument_list>(<argument><expr><name>prop</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>

  <expr_stmt><expr><call><name>StartPhase</name><argument_list>(<argument><expr><literal type="string">"snapshot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>rocksdb_snapshot_t</name><modifier>*</modifier></type> <name>snap</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>snap</name> <operator>=</operator> <call><name>rocksdb_create_snapshot</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_delete</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>woptions</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_readoptions_set_snapshot</name><argument_list>(<argument><expr><name>roptions</name></expr></argument>, <argument><expr><name>snap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckGet</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>roptions</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="string">"hello"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_readoptions_set_snapshot</name><argument_list>(<argument><expr><name>roptions</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckGet</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>roptions</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_release_snapshot</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>snap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>

  <expr_stmt><expr><call><name>StartPhase</name><argument_list>(<argument><expr><literal type="string">"repair"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <block>{<block_content>
    <comment type="line">// If we do not compact here, then the lazy deletion of</comment>
    <comment type="line">// files (https://reviews.facebook.net/D6123) would leave</comment>
    <comment type="line">// around deleted files and the repair process will find</comment>
    <comment type="line">// those files and put them back into the database.</comment>
    <expr_stmt><expr><call><name>rocksdb_compact_range</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_options_set_create_if_missing</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_options_set_error_if_exists</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_repair_db</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>rocksdb_open</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckGet</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>roptions</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckGet</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>roptions</name></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckGet</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>roptions</name></expr></argument>, <argument><expr><literal type="string">"box"</literal></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_options_set_create_if_missing</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_options_set_error_if_exists</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>

  <expr_stmt><expr><call><name>StartPhase</name><argument_list>(<argument><expr><literal type="string">"filter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>run</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>run</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>run</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <comment type="line">// First run uses custom filter, second run uses bloom filter</comment>
    <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>rocksdb_filterpolicy_t</name><modifier>*</modifier></type> <name>policy</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>run</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>policy</name> <operator>=</operator> <call><name>rocksdb_filterpolicy_create</name><argument_list>(
          <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FilterDestroy</name></expr></argument>, <argument><expr><name>FilterCreate</name></expr></argument>, <argument><expr><name>FilterKeyMatch</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FilterName</name></expr></argument>, <argument><expr><name>FilterGetType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>policy</name> <operator>=</operator> <call><name>rocksdb_filterpolicy_create_bloom</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>rocksdb_block_based_options_set_filter_policy</name><argument_list>(<argument><expr><name>table_options</name></expr></argument>, <argument><expr><name>policy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Create new database</comment>
    <expr_stmt><expr><call><name>rocksdb_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_destroy_db</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_options_set_block_based_table_factory</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>table_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>rocksdb_open</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_put</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>woptions</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"foovalue"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_put</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>woptions</name></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"barvalue"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_compact_range</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>fake_filter_result</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckGet</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>roptions</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="string">"foovalue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckGet</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>roptions</name></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>, <argument><expr><literal type="string">"barvalue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>phase</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// Must not find value when custom filter returns false</comment>
      <expr_stmt><expr><name>fake_filter_result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CheckGet</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>roptions</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CheckGet</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>roptions</name></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>fake_filter_result</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>CheckGet</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>roptions</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="string">"foovalue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>CheckGet</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>roptions</name></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>, <argument><expr><literal type="string">"barvalue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// Reset the policy</comment>
    <expr_stmt><expr><call><name>rocksdb_block_based_options_set_filter_policy</name><argument_list>(<argument><expr><name>table_options</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_options_set_block_based_table_factory</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>table_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>StartPhase</name><argument_list>(<argument><expr><literal type="string">"compaction_filter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <block>{<block_content>
    <decl_stmt><decl><type><name>rocksdb_options_t</name><modifier>*</modifier></type> <name>options_with_filter</name> <init>= <expr><call><name>rocksdb_options_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>rocksdb_options_set_create_if_missing</name><argument_list>(<argument><expr><name>options_with_filter</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>rocksdb_compactionfilter_t</name><modifier>*</modifier></type> <name>cfilter</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cfilter</name> <operator>=</operator> <call><name>rocksdb_compactionfilter_create</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CFilterDestroy</name></expr></argument>,
                                              <argument><expr><name>CFilterFilter</name></expr></argument>, <argument><expr><name>CFilterName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Create new database</comment>
    <expr_stmt><expr><call><name>rocksdb_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_destroy_db</name><argument_list>(<argument><expr><name>options_with_filter</name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_options_set_compaction_filter</name><argument_list>(<argument><expr><name>options_with_filter</name></expr></argument>, <argument><expr><name>cfilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>CheckCompaction</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>options_with_filter</name></expr></argument>, <argument><expr><name>roptions</name></expr></argument>, <argument><expr><name>woptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>rocksdb_options_set_compaction_filter</name><argument_list>(<argument><expr><name>options_with_filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_compactionfilter_destroy</name><argument_list>(<argument><expr><name>cfilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_options_destroy</name><argument_list>(<argument><expr><name>options_with_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>

  <expr_stmt><expr><call><name>StartPhase</name><argument_list>(<argument><expr><literal type="string">"compaction_filter_factory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <block>{<block_content>
    <decl_stmt><decl><type><name>rocksdb_options_t</name><modifier>*</modifier></type> <name>options_with_filter_factory</name> <init>= <expr><call><name>rocksdb_options_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>rocksdb_options_set_create_if_missing</name><argument_list>(<argument><expr><name>options_with_filter_factory</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>rocksdb_compactionfilterfactory_t</name><modifier>*</modifier></type> <name>factory</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>factory</name> <operator>=</operator> <call><name>rocksdb_compactionfilterfactory_create</name><argument_list>(
        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CFilterFactoryDestroy</name></expr></argument>, <argument><expr><name>CFilterCreate</name></expr></argument>, <argument><expr><name>CFilterFactoryName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Create new database</comment>
    <expr_stmt><expr><call><name>rocksdb_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_destroy_db</name><argument_list>(<argument><expr><name>options_with_filter_factory</name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_options_set_compaction_filter_factory</name><argument_list>(<argument><expr><name>options_with_filter_factory</name></expr></argument>,
                                                  <argument><expr><name>factory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>CheckCompaction</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>options_with_filter_factory</name></expr></argument>, <argument><expr><name>roptions</name></expr></argument>, <argument><expr><name>woptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>rocksdb_options_set_compaction_filter_factory</name><argument_list>(
        <argument><expr><name>options_with_filter_factory</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_options_destroy</name><argument_list>(<argument><expr><name>options_with_filter_factory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>

  <expr_stmt><expr><call><name>StartPhase</name><argument_list>(<argument><expr><literal type="string">"merge_operator"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <block>{<block_content>
    <decl_stmt><decl><type><name>rocksdb_mergeoperator_t</name><modifier>*</modifier></type> <name>merge_operator</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>merge_operator</name> <operator>=</operator> <call><name>rocksdb_mergeoperator_create</name><argument_list>(
        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MergeOperatorDestroy</name></expr></argument>, <argument><expr><name>MergeOperatorFullMerge</name></expr></argument>,
        <argument><expr><name>MergeOperatorPartialMerge</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MergeOperatorName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Create new database</comment>
    <expr_stmt><expr><call><name>rocksdb_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_destroy_db</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_options_set_merge_operator</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>merge_operator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>rocksdb_open</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_put</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>woptions</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"foovalue"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckGet</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>roptions</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="string">"foovalue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_merge</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>woptions</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"barvalue"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckGet</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>roptions</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="string">"fake"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Merge of a non-existing value</comment>
    <expr_stmt><expr><call><name>rocksdb_merge</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>woptions</name></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"barvalue"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckGet</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>roptions</name></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>, <argument><expr><literal type="string">"fake"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block>

  <expr_stmt><expr><call><name>StartPhase</name><argument_list>(<argument><expr><literal type="string">"columnfamilies"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <block>{<block_content>
    <expr_stmt><expr><call><name>rocksdb_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_destroy_db</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>CheckNoError</name><argument_list>(<argument>err</argument>)</argument_list></macro>

    <decl_stmt><decl><type><name>rocksdb_options_t</name><modifier>*</modifier></type> <name>db_options</name> <init>= <expr><call><name>rocksdb_options_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>rocksdb_options_set_create_if_missing</name><argument_list>(<argument><expr><name>db_options</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>rocksdb_open</name><argument_list>(<argument><expr><name>db_options</name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>CheckNoError</name><argument_list>(<argument>err</argument>)</argument_list></macro>
    <decl_stmt><decl><type><name>rocksdb_column_family_handle_t</name><modifier>*</modifier></type> <name>cfh</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cfh</name> <operator>=</operator> <call><name>rocksdb_create_column_family</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>db_options</name></expr></argument>, <argument><expr><literal type="string">"cf1"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_column_family_handle_destroy</name><argument_list>(<argument><expr><name>cfh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>cflen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>column_fams</name> <init>= <expr><call><name>rocksdb_list_column_families</name><argument_list>(<argument><expr><name>db_options</name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cflen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckEqual</name><argument_list>(<argument><expr><literal type="string">"default"</literal></expr></argument>, <argument><expr><name><name>column_fams</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckEqual</name><argument_list>(<argument><expr><literal type="string">"cf1"</literal></expr></argument>, <argument><expr><name><name>column_fams</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckCondition</name><argument_list>(<argument><expr><name>cflen</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_list_column_families_destroy</name><argument_list>(<argument><expr><name>column_fams</name></expr></argument>, <argument><expr><name>cflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>rocksdb_options_t</name><modifier>*</modifier></type> <name>cf_options</name> <init>= <expr><call><name>rocksdb_options_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>cf_names</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"default"</literal></expr>, <expr><literal type="string">"cf1"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>rocksdb_options_t</name><modifier>*</modifier></type> <name><name>cf_opts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>cf_options</name></expr>, <expr><name>cf_options</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>rocksdb_column_family_handle_t</name><modifier>*</modifier></type> <name><name>handles</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>rocksdb_open_column_families</name><argument_list>(<argument><expr><name>db_options</name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>cf_names</name></expr></argument>, <argument><expr><name>cf_opts</name></expr></argument>, <argument><expr><name>handles</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>rocksdb_put_cf</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>woptions</name></expr></argument>, <argument><expr><name><name>handles</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"hello"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CheckGetCF</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>roptions</name></expr></argument>, <argument><expr><name><name>handles</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="string">"hello"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>rocksdb_delete_cf</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>woptions</name></expr></argument>, <argument><expr><name><name>handles</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CheckGetCF</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>roptions</name></expr></argument>, <argument><expr><name><name>handles</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>rocksdb_writebatch_t</name><modifier>*</modifier></type> <name>wb</name> <init>= <expr><call><name>rocksdb_writebatch_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>rocksdb_writebatch_put_cf</name><argument_list>(<argument><expr><name>wb</name></expr></argument>, <argument><expr><name><name>handles</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"baz"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_writebatch_clear</name><argument_list>(<argument><expr><name>wb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_writebatch_put_cf</name><argument_list>(<argument><expr><name>wb</name></expr></argument>, <argument><expr><name><name>handles</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_writebatch_put_cf</name><argument_list>(<argument><expr><name>wb</name></expr></argument>, <argument><expr><name><name>handles</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"box"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_writebatch_delete_cf</name><argument_list>(<argument><expr><name>wb</name></expr></argument>, <argument><expr><name><name>handles</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_write</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>woptions</name></expr></argument>, <argument><expr><name>wb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckGetCF</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>roptions</name></expr></argument>, <argument><expr><name><name>handles</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"baz"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckGetCF</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>roptions</name></expr></argument>, <argument><expr><name><name>handles</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckGetCF</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>roptions</name></expr></argument>, <argument><expr><name><name>handles</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"box"</literal></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_writebatch_destroy</name><argument_list>(<argument><expr><name>wb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name><name>keys</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="string">"box"</literal></expr>, <expr><literal type="string">"box"</literal></expr>, <expr><literal type="string">"barfooxx"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>rocksdb_column_family_handle_t</name><modifier>*</modifier></type> <name><name>get_handles</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>handles</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>, <expr><name><name>handles</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>, <expr><name><name>handles</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name><name>keys_sizes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>vals</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name><name>vals_sizes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>errs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>rocksdb_multi_get_cf</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>roptions</name></expr></argument>, <argument><expr><name>get_handles</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><name>keys_sizes</name></expr></argument>, <argument><expr><name>vals</name></expr></argument>, <argument><expr><name>vals_sizes</name></expr></argument>, <argument><expr><name>errs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>CheckEqual</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>errs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <switch>switch <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><literal type="number">0</literal></expr>:</case>
        <expr_stmt><expr><call><name>CheckEqual</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>vals</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>vals_sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// wrong cf</comment>
        <break>break;</break>
      <case>case <expr><literal type="number">1</literal></expr>:</case>
        <expr_stmt><expr><call><name>CheckEqual</name><argument_list>(<argument><expr><literal type="string">"c"</literal></expr></argument>, <argument><expr><name><name>vals</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>vals_sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// bingo</comment>
        <break>break;</break>
      <case>case <expr><literal type="number">2</literal></expr>:</case>
        <expr_stmt><expr><call><name>CheckEqual</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>vals</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>vals_sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// normal not found</comment>
        <break>break;</break>
      </block_content>}</block></switch>
      <expr_stmt><expr><call><name>Free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vals</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>rocksdb_iterator_t</name><modifier>*</modifier></type> <name>iter</name> <init>= <expr><call><name>rocksdb_create_iterator_cf</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>roptions</name></expr></argument>, <argument><expr><name><name>handles</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CheckCondition</name><argument_list>(<argument><expr><operator>!</operator><call><name>rocksdb_iter_valid</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_iter_seek_to_first</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckCondition</name><argument_list>(<argument><expr><call><name>rocksdb_iter_valid</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>rocksdb_iter_valid</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><call><name>rocksdb_iter_next</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>CheckCondition</name><argument_list>(<argument><expr><name>i</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_iter_get_error</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_iter_destroy</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>rocksdb_drop_column_family</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>handles</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>rocksdb_column_family_handle_destroy</name><argument_list>(<argument><expr><name><name>handles</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>rocksdb_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_destroy_db</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_options_destroy</name><argument_list>(<argument><expr><name>db_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_options_destroy</name><argument_list>(<argument><expr><name>cf_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>

  <expr_stmt><expr><call><name>StartPhase</name><argument_list>(<argument><expr><literal type="string">"prefix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <block>{<block_content>
    <comment type="line">// Create new database</comment>
    <expr_stmt><expr><call><name>rocksdb_options_set_allow_mmap_reads</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_options_set_prefix_extractor</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><call><name>rocksdb_slicetransform_create_fixed_prefix</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_options_set_hash_skip_list_rep</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_options_set_plain_table_factory</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0.75</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>rocksdb_open</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>rocksdb_put</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>woptions</name></expr></argument>, <argument><expr><literal type="string">"foo1"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_put</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>woptions</name></expr></argument>, <argument><expr><literal type="string">"foo2"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_put</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>woptions</name></expr></argument>, <argument><expr><literal type="string">"foo3"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_put</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>woptions</name></expr></argument>, <argument><expr><literal type="string">"bar1"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_put</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>woptions</name></expr></argument>, <argument><expr><literal type="string">"bar2"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_put</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>woptions</name></expr></argument>, <argument><expr><literal type="string">"bar3"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>rocksdb_iterator_t</name><modifier>*</modifier></type> <name>iter</name> <init>= <expr><call><name>rocksdb_create_iterator</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>roptions</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>CheckCondition</name><argument_list>(<argument><expr><operator>!</operator><call><name>rocksdb_iter_valid</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>rocksdb_iter_seek</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_iter_get_error</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckCondition</name><argument_list>(<argument><expr><call><name>rocksdb_iter_valid</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CheckIter</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><literal type="string">"bar1"</literal></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_iter_next</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckIter</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><literal type="string">"bar2"</literal></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_iter_next</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckIter</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><literal type="string">"bar3"</literal></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_iter_get_error</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_iter_destroy</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>rocksdb_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_destroy_db</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>

  <expr_stmt><expr><call><name>StartPhase</name><argument_list>(<argument><expr><literal type="string">"iterate_upper_bound"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <block>{<block_content>
    <comment type="line">// Create new empty database</comment>
    <expr_stmt><expr><call><name>rocksdb_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_destroy_db</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>rocksdb_options_set_prefix_extractor</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>rocksdb_open</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>dbname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>rocksdb_put</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>woptions</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>,    <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>,    <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_put</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>woptions</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>,  <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>,  <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_put</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>woptions</name></expr></argument>, <argument><expr><literal type="string">"foo1"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"bar1"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rocksdb_put</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>woptions</name></expr></argument>, <argument><expr><literal type="string">"g1"</literal></expr></argument>,   <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>,    <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>CheckNoError</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// testing basic case with no iterate_upper_bound and no prefix_extractor</comment>
    <block>{<block_content>
       <expr_stmt><expr><call><name>rocksdb_readoptions_set_iterate_upper_bound</name><argument_list>(<argument><expr><name>roptions</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <decl_stmt><decl><type><name>rocksdb_iterator_t</name><modifier>*</modifier></type> <name>iter</name> <init>= <expr><call><name>rocksdb_create_iterator</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>roptions</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

       <expr_stmt><expr><call><name>rocksdb_iter_seek</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>CheckCondition</name><argument_list>(<argument><expr><call><name>rocksdb_iter_valid</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>CheckIter</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <expr_stmt><expr><call><name>rocksdb_iter_next</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>CheckCondition</name><argument_list>(<argument><expr><call><name>rocksdb_iter_valid</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>CheckIter</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><literal type="string">"foo1"</literal></expr></argument>, <argument><expr><literal type="string">"bar1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <expr_stmt><expr><call><name>rocksdb_iter_next</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>CheckCondition</name><argument_list>(<argument><expr><call><name>rocksdb_iter_valid</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>CheckIter</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><literal type="string">"g1"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <expr_stmt><expr><call><name>rocksdb_iter_destroy</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <comment type="line">// testing iterate_upper_bound and forward iterator</comment>
    <comment type="line">// to make sure it stops at bound</comment>
    <block>{<block_content>
       <comment type="line">// iterate_upper_bound points beyond the last expected entry</comment>
       <expr_stmt><expr><call><name>rocksdb_readoptions_set_iterate_upper_bound</name><argument_list>(<argument><expr><name>roptions</name></expr></argument>, <argument><expr><literal type="string">"foo2"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <decl_stmt><decl><type><name>rocksdb_iterator_t</name><modifier>*</modifier></type> <name>iter</name> <init>= <expr><call><name>rocksdb_create_iterator</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>roptions</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

       <expr_stmt><expr><call><name>rocksdb_iter_seek</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>CheckCondition</name><argument_list>(<argument><expr><call><name>rocksdb_iter_valid</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>CheckIter</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <expr_stmt><expr><call><name>rocksdb_iter_next</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>CheckCondition</name><argument_list>(<argument><expr><call><name>rocksdb_iter_valid</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>CheckIter</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><literal type="string">"foo1"</literal></expr></argument>, <argument><expr><literal type="string">"bar1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <expr_stmt><expr><call><name>rocksdb_iter_next</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <comment type="line">// should stop here...</comment>
       <expr_stmt><expr><call><name>CheckCondition</name><argument_list>(<argument><expr><operator>!</operator><call><name>rocksdb_iter_valid</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <expr_stmt><expr><call><name>rocksdb_iter_destroy</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
  </block_content>}</block>

  <expr_stmt><expr><call><name>StartPhase</name><argument_list>(<argument><expr><literal type="string">"cleanup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rocksdb_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rocksdb_options_destroy</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rocksdb_block_based_options_destroy</name><argument_list>(<argument><expr><name>table_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rocksdb_readoptions_destroy</name><argument_list>(<argument><expr><name>roptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rocksdb_writeoptions_destroy</name><argument_list>(<argument><expr><name>woptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rocksdb_cache_destroy</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rocksdb_comparator_destroy</name><argument_list>(<argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>rocksdb_env_destroy</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"PASS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
