<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/yb/gutil/utf/rune.c"><comment type="block">/*
 * The authors of this software are Rob Pike and Ken Thompson.
 *              Copyright (c) 2002 by Lucent Technologies.
 * Permission to use, copy, modify, and distribute this software for any
 * purpose without fee is hereby granted, provided that this entire notice
 * is included in all copies of any software which is or includes a copy
 * or modification of this software and in all copies of the supporting
 * documentation for such software.
 * THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR IMPLIED
 * WARRANTY.  IN PARTICULAR, NEITHER THE AUTHORS NOR LUCENT TECHNOLOGIES MAKE ANY
 * REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY
 * OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.
 */</comment>
<comment type="line">//</comment>
<comment type="line">// The following only applies to changes made to this file as part of YugaByte development.</comment>
<comment type="line">//</comment>
<comment type="line">// Portions Copyright (c) YugaByte, Inc.</comment>
<comment type="line">//</comment>
<comment type="line">// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except</comment>
<comment type="line">// in compliance with the License.  You may obtain a copy of the License at</comment>
<comment type="line">//</comment>
<comment type="line">// http://www.apache.org/licenses/LICENSE-2.0</comment>
<comment type="line">//</comment>
<comment type="line">// Unless required by applicable law or agreed to in writing, software distributed under the License</comment>
<comment type="line">// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express</comment>
<comment type="line">// or implied.  See the License for the specific language governing permissions and limitations</comment>
<comment type="line">// under the License.</comment>
<comment type="line">//</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"yb/gutil/utf/utf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"yb/gutil/utf/utfdef.h"</cpp:file></cpp:include>

<enum>enum
<block>{
  <decl><name>Bit1</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,
  <decl><name>Bitx</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,
  <decl><name>Bit2</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,
  <decl><name>Bit3</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,
  <decl><name>Bit4</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,
  <decl><name>Bit5</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

  <decl><name>T1</name> <init>= <expr><operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>Bit1</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>^</operator> <literal type="number">0xFF</literal></expr></init></decl>, <comment type="block">/* 0000 0000 */</comment>
  <decl><name>Tx</name> <init>= <expr><operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>Bitx</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>^</operator> <literal type="number">0xFF</literal></expr></init></decl>, <comment type="block">/* 1000 0000 */</comment>
  <decl><name>T2</name> <init>= <expr><operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>Bit2</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>^</operator> <literal type="number">0xFF</literal></expr></init></decl>, <comment type="block">/* 1100 0000 */</comment>
  <decl><name>T3</name> <init>= <expr><operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>Bit3</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>^</operator> <literal type="number">0xFF</literal></expr></init></decl>, <comment type="block">/* 1110 0000 */</comment>
  <decl><name>T4</name> <init>= <expr><operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>Bit4</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>^</operator> <literal type="number">0xFF</literal></expr></init></decl>, <comment type="block">/* 1111 0000 */</comment>
  <decl><name>T5</name> <init>= <expr><operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>Bit5</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>^</operator> <literal type="number">0xFF</literal></expr></init></decl>, <comment type="block">/* 1111 1000 */</comment>

  <decl><name>Rune1</name> <init>= <expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>Bit1</name><operator>+</operator><literal type="number">0</literal><operator>*</operator><name>Bitx</name><operator>)</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <comment type="block">/* 0000 0000 0111 1111 */</comment>
  <decl><name>Rune2</name> <init>= <expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>Bit2</name><operator>+</operator><literal type="number">1</literal><operator>*</operator><name>Bitx</name><operator>)</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <comment type="block">/* 0000 0111 1111 1111 */</comment>
  <decl><name>Rune3</name> <init>= <expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>Bit3</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>Bitx</name><operator>)</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <comment type="block">/* 1111 1111 1111 1111 */</comment>
  <decl><name>Rune4</name> <init>= <expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>Bit4</name><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>Bitx</name><operator>)</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
                                        <comment type="block">/* 0001 1111 1111 1111 1111 1111 */</comment>

  <decl><name>Maskx</name> <init>= <expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>Bitx</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>,  <comment type="block">/* 0011 1111 */</comment>
  <decl><name>Testx</name> <init>= <expr><name>Maskx</name> <operator>^</operator> <literal type="number">0xFF</literal></expr></init></decl>, <comment type="block">/* 1100 0000 */</comment>

  <decl><name>Bad</name> <init>= <expr><name>Runeerror</name></expr></init></decl>,
}</block>;</enum>

<comment type="block">/*
 * Modified by Wei-Hwa Huang, Google Inc., on 2004-09-24
 * This is a slower but "safe" version of the old chartorune
 * that works on strings that are not necessarily null-terminated.
 *
 * If you know for sure that your string is null-terminated,
 * chartorune will be a bit faster.
 *
 * It is guaranteed not to attempt to access "length"
 * past the incoming pointer.  This is to avoid
 * possible access violations.  If the string appears to be
 * well-formed but incomplete (i.e., to get the whole Rune
 * we'd need to read past str+length) then we'll set the Rune
 * to Bad and return 0.
 *
 * Note that if we have decoding problems for other
 * reasons, we return 1 instead of 0.
 */</comment>
<function><type><name>int</name></type>
<name>charntorune</name><parameter_list>(<parameter><decl><type><name>Rune</name> <modifier>*</modifier></type><name>rune</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>, <decl><type ref="prev"/><name>c3</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

  <comment type="block">/* When we're not allowed to read anything */</comment>
  <if_stmt><if>if<condition>(<expr><name>length</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>badlen</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/*
   * one character sequence (7-bit value)
   *  00000-0007F =&gt; T1
   */</comment>
  <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uchar</name><operator>*</operator><operator>)</operator><name>str</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name>c</name> <operator>&lt;</operator> <name>Tx</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>rune</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// If we can't read more than one character we must stop</comment>
  <if_stmt><if>if<condition>(<expr><name>length</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>badlen</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/*
   * two character sequence (11-bit value)
   *  0080-07FF =&gt; T2 Tx
   */</comment>
  <expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uchar</name><operator>*</operator><operator>)</operator><operator>(</operator><name>str</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>^</operator> <name>Tx</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name>c1</name> <operator>&amp;</operator> <name>Testx</name></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>bad</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>(<expr><name>c</name> <operator>&lt;</operator> <name>T3</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>c</name> <operator>&lt;</operator> <name>T2</name></expr>)</condition><block type="pseudo"><block_content>
      <goto>goto <name>bad</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&lt;&lt;</operator> <name>Bitx</name><operator>)</operator> <operator>|</operator> <name>c1</name><operator>)</operator> <operator>&amp;</operator> <name>Rune2</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>l</name> <operator>&lt;=</operator> <name>Rune1</name></expr>)</condition><block type="pseudo"><block_content>
      <goto>goto <name>bad</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>rune</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">2</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// If we can't read more than two characters we must stop</comment>
  <if_stmt><if>if<condition>(<expr><name>length</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>badlen</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/*
   * three character sequence (16-bit value)
   *  0800-FFFF =&gt; T3 Tx Tx
   */</comment>
  <expr_stmt><expr><name>c2</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uchar</name><operator>*</operator><operator>)</operator><operator>(</operator><name>str</name><operator>+</operator><literal type="number">2</literal><operator>)</operator> <operator>^</operator> <name>Tx</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name>c2</name> <operator>&amp;</operator> <name>Testx</name></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>bad</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>(<expr><name>c</name> <operator>&lt;</operator> <name>T4</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>c</name> <operator>&lt;&lt;</operator> <name>Bitx</name><operator>)</operator> <operator>|</operator> <name>c1</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>Bitx</name><operator>)</operator> <operator>|</operator> <name>c2</name><operator>)</operator> <operator>&amp;</operator> <name>Rune3</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>l</name> <operator>&lt;=</operator> <name>Rune2</name></expr>)</condition><block type="pseudo"><block_content>
      <goto>goto <name>bad</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>rune</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">3</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>length</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>badlen</name>;</goto></block_content></block></if></if_stmt>

  <comment type="block">/*
   * four character sequence (21-bit value)
   *  10000-1FFFFF =&gt; T4 Tx Tx Tx
   */</comment>
  <expr_stmt><expr><name>c3</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uchar</name><operator>*</operator><operator>)</operator><operator>(</operator><name>str</name><operator>+</operator><literal type="number">3</literal><operator>)</operator> <operator>^</operator> <name>Tx</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>c3</name> <operator>&amp;</operator> <name>Testx</name></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>bad</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <name>T5</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>c</name> <operator>&lt;&lt;</operator> <name>Bitx</name><operator>)</operator> <operator>|</operator> <name>c1</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>Bitx</name><operator>)</operator> <operator>|</operator> <name>c2</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>Bitx</name><operator>)</operator> <operator>|</operator> <name>c3</name><operator>)</operator> <operator>&amp;</operator> <name>Rune4</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>l</name> <operator>&lt;=</operator> <name>Rune3</name></expr>)</condition><block type="pseudo"><block_content>
      <goto>goto <name>bad</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>rune</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">4</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// Support for 5-byte or longer UTF-8 would go here, but</comment>
  <comment type="line">// since we don't have that, we'll just fall through to bad.</comment>

  <comment type="block">/*
   * bad decoding
   */</comment>
<label><name>bad</name>:</label>
  <expr_stmt><expr><operator>*</operator><name>rune</name> <operator>=</operator> <name>Bad</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
<label><name>badlen</name>:</label>
  <expr_stmt><expr><operator>*</operator><name>rune</name> <operator>=</operator> <name>Bad</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>


<comment type="block">/*
 * This is the older "unsafe" version, which works fine on
 * null-terminated strings.
 */</comment>
<function><type><name>int</name></type>
<name>chartorune</name><parameter_list>(<parameter><decl><type><name>Rune</name> <modifier>*</modifier></type><name>rune</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>, <decl><type ref="prev"/><name>c3</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>

  <comment type="block">/*
   * one character sequence
   *  00000-0007F =&gt; T1
   */</comment>
  <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uchar</name><operator>*</operator><operator>)</operator><name>str</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name>c</name> <operator>&lt;</operator> <name>Tx</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>rune</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/*
   * two character sequence
   *  0080-07FF =&gt; T2 Tx
   */</comment>
  <expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uchar</name><operator>*</operator><operator>)</operator><operator>(</operator><name>str</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>^</operator> <name>Tx</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name>c1</name> <operator>&amp;</operator> <name>Testx</name></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>bad</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>(<expr><name>c</name> <operator>&lt;</operator> <name>T3</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>c</name> <operator>&lt;</operator> <name>T2</name></expr>)</condition><block type="pseudo"><block_content>
      <goto>goto <name>bad</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&lt;&lt;</operator> <name>Bitx</name><operator>)</operator> <operator>|</operator> <name>c1</name><operator>)</operator> <operator>&amp;</operator> <name>Rune2</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>l</name> <operator>&lt;=</operator> <name>Rune1</name></expr>)</condition><block type="pseudo"><block_content>
      <goto>goto <name>bad</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>rune</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">2</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/*
   * three character sequence
   *  0800-FFFF =&gt; T3 Tx Tx
   */</comment>
  <expr_stmt><expr><name>c2</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uchar</name><operator>*</operator><operator>)</operator><operator>(</operator><name>str</name><operator>+</operator><literal type="number">2</literal><operator>)</operator> <operator>^</operator> <name>Tx</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name>c2</name> <operator>&amp;</operator> <name>Testx</name></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>bad</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>(<expr><name>c</name> <operator>&lt;</operator> <name>T4</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>c</name> <operator>&lt;&lt;</operator> <name>Bitx</name><operator>)</operator> <operator>|</operator> <name>c1</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>Bitx</name><operator>)</operator> <operator>|</operator> <name>c2</name><operator>)</operator> <operator>&amp;</operator> <name>Rune3</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>l</name> <operator>&lt;=</operator> <name>Rune2</name></expr>)</condition><block type="pseudo"><block_content>
      <goto>goto <name>bad</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>rune</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">3</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/*
   * four character sequence (21-bit value)
   *  10000-1FFFFF =&gt; T4 Tx Tx Tx
   */</comment>
  <expr_stmt><expr><name>c3</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uchar</name><operator>*</operator><operator>)</operator><operator>(</operator><name>str</name><operator>+</operator><literal type="number">3</literal><operator>)</operator> <operator>^</operator> <name>Tx</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>c3</name> <operator>&amp;</operator> <name>Testx</name></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>bad</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <name>T5</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>c</name> <operator>&lt;&lt;</operator> <name>Bitx</name><operator>)</operator> <operator>|</operator> <name>c1</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>Bitx</name><operator>)</operator> <operator>|</operator> <name>c2</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>Bitx</name><operator>)</operator> <operator>|</operator> <name>c3</name><operator>)</operator> <operator>&amp;</operator> <name>Rune4</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>l</name> <operator>&lt;=</operator> <name>Rune3</name></expr>)</condition><block type="pseudo"><block_content>
      <goto>goto <name>bad</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>rune</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">4</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/*
   * Support for 5-byte or longer UTF-8 would go here, but
   * since we don't have that, we'll just fall through to bad.
   */</comment>

  <comment type="block">/*
   * bad decoding
   */</comment>
<label><name>bad</name>:</label>
  <expr_stmt><expr><operator>*</operator><name>rune</name> <operator>=</operator> <name>Bad</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>isvalidcharntorune</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>Rune</name><modifier>*</modifier></type> <name>rune</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>consumed</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>consumed</name> <operator>=</operator> <call><name>charntorune</name><argument_list>(<argument><expr><name>rune</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>*</operator><name>rune</name> <operator>!=</operator> <name>Runeerror</name> <operator>||</operator> <operator>*</operator><name>consumed</name> <operator>==</operator> <literal type="number">3</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>runetochar</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Rune</name> <modifier>*</modifier></type><name>rune</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Runes are signed, so convert to unsigned for range check. */</comment>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>c</name></decl>;</decl_stmt>

  <comment type="block">/*
   * one character sequence
   *  00000-0007F =&gt; 00-7F
   */</comment>
  <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>rune</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name>c</name> <operator>&lt;=</operator> <name>Rune1</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/*
   * two character sequence
   *  0080-07FF =&gt; T2 Tx
   */</comment>
  <if_stmt><if>if<condition>(<expr><name>c</name> <operator>&lt;=</operator> <name>Rune2</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>T2</name> <operator>|</operator> <operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>*</operator><name>Bitx</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>Tx</name> <operator>|</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <name>Maskx</name><operator>)</operator></expr>;</expr_stmt>
    <return>return <expr><literal type="number">2</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/*
   * If the Rune is out of range, convert it to the error rune.
   * Do this test here because the error rune encodes to three bytes.
   * Doing it earlier would duplicate work, since an out of range
   * Rune wouldn't have fit in one or two bytes.
   */</comment>
  <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <name>Runemax</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <name>Runeerror</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="block">/*
   * three character sequence
   *  0800-FFFF =&gt; T3 Tx Tx
   */</comment>
  <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <name>Rune3</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>T3</name> <operator>|</operator>  <operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>*</operator><name>Bitx</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>Tx</name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>*</operator><name>Bitx</name><operator>)</operator> <operator>&amp;</operator> <name>Maskx</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>Tx</name> <operator>|</operator>  <operator>(</operator><name>c</name> <operator>&amp;</operator> <name>Maskx</name><operator>)</operator></expr>;</expr_stmt>
    <return>return <expr><literal type="number">3</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/*
   * four character sequence (21-bit value)
   *     10000-1FFFFF =&gt; T4 Tx Tx Tx
   */</comment>
  <expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>T4</name> <operator>|</operator> <operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>*</operator><name>Bitx</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>Tx</name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>*</operator><name>Bitx</name><operator>)</operator> <operator>&amp;</operator> <name>Maskx</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>Tx</name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>c</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>*</operator><name>Bitx</name><operator>)</operator> <operator>&amp;</operator> <name>Maskx</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>Tx</name> <operator>|</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <name>Maskx</name><operator>)</operator></expr>;</expr_stmt>
  <return>return <expr><literal type="number">4</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>runelen</name><parameter_list>(<parameter><decl><type><name>Rune</name></type> <name>rune</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>

  <return>return <expr><call><name>runetochar</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rune</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>runenlen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Rune</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nrune</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nb</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>nb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <while>while<condition>(<expr><name>nrune</name><operator>--</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>r</name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <name>Rune1</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>nb</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <name>Rune2</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>nb</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <name>Rune3</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>nb</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content> <comment type="block">/* assert(c &lt;= Rune4) */</comment>
      <expr_stmt><expr><name>nb</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>nb</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>fullrune</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><operator>*</operator><operator>(</operator><name>uchar</name><operator>*</operator><operator>)</operator><name>str</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <name>Tx</name></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <name>T3</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><name>T4</name> <operator>||</operator> <name>n</name></expr></argument> &gt;</argument_list></name> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
