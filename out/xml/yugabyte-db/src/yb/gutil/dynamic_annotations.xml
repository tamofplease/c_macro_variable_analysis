<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/yb/gutil/dynamic_annotations.c"><comment type="block">/* Copyright (c) 2008-2009, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * The following only applies to changes made to this file as part of YugaByte development.
 *
 * Portions Copyright (c) YugaByte, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.  See the License for the specific language governing permissions and limitations
 * under the License.
 *
 *
 * ---
 * Author: Kostya Serebryany
 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<cpp:error># <cpp:directive>error</cpp:directive> <cpp:literal>"This file should be built as pure C to avoid name mangling"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"yb/gutil/dynamic_annotations.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__GNUC__</name></cpp:ifdef>
<comment type="block">/* valgrind.h uses gcc extensions so it won't build with other compilers */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"yb/gutil/valgrind.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Compiler-based ThreadSanitizer defines
   DYNAMIC_ANNOTATIONS_EXTERNAL_IMPL = 1
   and provides its own definitions of the functions. */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DYNAMIC_ANNOTATIONS_EXTERNAL_IMPL</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>DYNAMIC_ANNOTATIONS_EXTERNAL_IMPL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Each function is empty and called (via a macro) only in debug mode.
   The arguments are captured by dynamic tools at runtime. */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DYNAMIC_ANNOTATIONS_ENABLED</name> <operator>==</operator> <literal type="number">1</literal> \
    <operator>&amp;&amp;</operator> <name>DYNAMIC_ANNOTATIONS_EXTERNAL_IMPL</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>

<function><type><name>void</name></type> <name>AnnotateRWLockCreate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
<function><type><name>void</name></type> <name>AnnotateRWLockCreateStatic</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
<function><type><name>void</name></type> <name>AnnotateRWLockDestroy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
<function><type><name>void</name></type> <name>AnnotateRWLockAcquired</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>is_w</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>

<function><type><name>void</name></type> <name>AnnotateBarrierInit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
                         <parameter><decl><type><specifier>const</specifier> <specifier>volatile</specifier> <name>void</name> <modifier>*</modifier></type><name>barrier</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>,
                         <parameter><decl><type><name>long</name></type> <name>reinitialization_allowed</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
<function><type><name>void</name></type> <name>AnnotateBarrierWaitBefore</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
                               <parameter><decl><type><specifier>const</specifier> <specifier>volatile</specifier> <name>void</name> <modifier>*</modifier></type><name>barrier</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
<function><type><name>void</name></type> <name>AnnotateBarrierWaitAfter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <specifier>volatile</specifier> <name>void</name> <modifier>*</modifier></type><name>barrier</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
<function><type><name>void</name></type> <name>AnnotateBarrierDestroy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
                            <parameter><decl><type><specifier>const</specifier> <specifier>volatile</specifier> <name>void</name> <modifier>*</modifier></type><name>barrier</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>

<function><type><name>void</name></type> <name>AnnotateCondVarWait</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
                         <parameter><decl><type><specifier>const</specifier> <specifier>volatile</specifier> <name>void</name> <modifier>*</modifier></type><name>cv</name></decl></parameter>,
                         <parameter><decl><type><specifier>const</specifier> <specifier>volatile</specifier> <name>void</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list><block>{<block_content/>}</block></function>
<function><type><name>void</name></type> <name>AnnotateCondVarSignal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
                           <parameter><decl><type><specifier>const</specifier> <specifier>volatile</specifier> <name>void</name> <modifier>*</modifier></type><name>cv</name></decl></parameter>)</parameter_list><block>{<block_content/>}</block></function>
<function><type><name>void</name></type> <name>AnnotateCondVarSignalAll</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <specifier>volatile</specifier> <name>void</name> <modifier>*</modifier></type><name>cv</name></decl></parameter>)</parameter_list><block>{<block_content/>}</block></function>
<function><type><name>void</name></type> <name>AnnotatePublishMemoryRange</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
                                <parameter><decl><type><specifier>const</specifier> <specifier>volatile</specifier> <name>void</name> <modifier>*</modifier></type><name>address</name></decl></parameter>,
                                <parameter><decl><type><name>long</name></type> <name>size</name></decl></parameter>)</parameter_list><block>{<block_content/>}</block></function>
<function><type><name>void</name></type> <name>AnnotateUnpublishMemoryRange</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
                                  <parameter><decl><type><specifier>const</specifier> <specifier>volatile</specifier> <name>void</name> <modifier>*</modifier></type><name>address</name></decl></parameter>,
                                  <parameter><decl><type><name>long</name></type> <name>size</name></decl></parameter>)</parameter_list><block>{<block_content/>}</block></function>
<function><type><name>void</name></type> <name>AnnotatePCQCreate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
                       <parameter><decl><type><specifier>const</specifier> <specifier>volatile</specifier> <name>void</name> <modifier>*</modifier></type><name>pcq</name></decl></parameter>)</parameter_list><block>{<block_content/>}</block></function>
<function><type><name>void</name></type> <name>AnnotatePCQDestroy</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
                        <parameter><decl><type><specifier>const</specifier> <specifier>volatile</specifier> <name>void</name> <modifier>*</modifier></type><name>pcq</name></decl></parameter>)</parameter_list><block>{<block_content/>}</block></function>
<function><type><name>void</name></type> <name>AnnotatePCQPut</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
                    <parameter><decl><type><specifier>const</specifier> <specifier>volatile</specifier> <name>void</name> <modifier>*</modifier></type><name>pcq</name></decl></parameter>)</parameter_list><block>{<block_content/>}</block></function>
<function><type><name>void</name></type> <name>AnnotatePCQGet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
                    <parameter><decl><type><specifier>const</specifier> <specifier>volatile</specifier> <name>void</name> <modifier>*</modifier></type><name>pcq</name></decl></parameter>)</parameter_list><block>{<block_content/>}</block></function>
<function><type><name>void</name></type> <name>AnnotateNewMemory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
<function><type><name>void</name></type> <name>AnnotateExpectRace</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
                        <parameter><decl><type><specifier>const</specifier> <specifier>volatile</specifier> <name>void</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>,
                        <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>)</parameter_list><block>{<block_content/>}</block></function>
<function><type><name>void</name></type> <name>AnnotateBenignRace</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
                        <parameter><decl><type><specifier>const</specifier> <specifier>volatile</specifier> <name>void</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>,
                        <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>)</parameter_list><block>{<block_content/>}</block></function>
<function><type><name>void</name></type> <name>AnnotateBenignRaceSized</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
                             <parameter><decl><type><specifier>const</specifier> <specifier>volatile</specifier> <name>void</name> <modifier>*</modifier></type><name>mem</name></decl></parameter>,
                             <parameter><decl><type><name>long</name></type> <name>size</name></decl></parameter>,
                             <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>
<function><type><name>void</name></type> <name>AnnotateMutexIsUsedAsCondVar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
                                  <parameter><decl><type><specifier>const</specifier> <specifier>volatile</specifier> <name>void</name> <modifier>*</modifier></type><name>mu</name></decl></parameter>)</parameter_list><block>{<block_content/>}</block></function>
<function><type><name>void</name></type> <name>AnnotateTraceMemory</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
                         <parameter><decl><type><specifier>const</specifier> <specifier>volatile</specifier> <name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list><block>{<block_content/>}</block></function>
<function><type><name>void</name></type> <name>AnnotateThreadName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
                        <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list><block>{<block_content/>}</block></function>
<function><type><name>void</name></type> <name>AnnotateIgnoreReadsBegin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list><block>{<block_content/>}</block></function>
<function><type><name>void</name></type> <name>AnnotateIgnoreReadsEnd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list><block>{<block_content/>}</block></function>
<function><type><name>void</name></type> <name>AnnotateIgnoreWritesBegin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list><block>{<block_content/>}</block></function>
<function><type><name>void</name></type> <name>AnnotateIgnoreWritesEnd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list><block>{<block_content/>}</block></function>
<function><type><name>void</name></type> <name>AnnotateEnableRaceDetection</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>enable</name></decl></parameter>)</parameter_list><block>{<block_content/>}</block></function>
<function><type><name>void</name></type> <name>AnnotateNoOp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>,
                  <parameter><decl><type><specifier>const</specifier> <specifier>volatile</specifier> <name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list><block>{<block_content/>}</block></function>
<function><type><name>void</name></type> <name>AnnotateFlushState</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list><block>{<block_content/>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* DYNAMIC_ANNOTATIONS_ENABLED == 1
    &amp;&amp; DYNAMIC_ANNOTATIONS_EXTERNAL_IMPL == 0 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DYNAMIC_ANNOTATIONS_EXTERNAL_IMPL</name> <operator>==</operator> <literal type="number">0</literal></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>GetYbRunningOnValgrind</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RUNNING_ON_VALGRIND</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name>RUNNING_ON_VALGRIND</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>running_on_valgrind_str</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"RUNNING_ON_VALGRIND"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>running_on_valgrind_str</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>running_on_valgrind_str</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* See the comments in dynamic_annotations.h */</comment>
<function><type><name>int</name></type> <name>YbRunningOnValgrind</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>running_on_valgrind</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>local_running_on_valgrind</name> <init>= <expr><name>running_on_valgrind</name></expr></init></decl>;</decl_stmt>
  <comment type="block">/* C doesn't have thread-safe initialization of statics, and we
     don't want to depend on pthread_once here, so hack it. */</comment>
  <expr_stmt><expr><call><name>ANNOTATE_BENIGN_RACE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>running_on_valgrind</name></expr></argument>, <argument><expr><literal type="string">"safe hack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>local_running_on_valgrind</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>running_on_valgrind</name> <operator>=</operator> <name>local_running_on_valgrind</name> <operator>=</operator> <call><name>GetYbRunningOnValgrind</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>local_running_on_valgrind</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* See the comments in dynamic_annotations.h */</comment>
<function><type><name>double</name></type> <name>YbValgrindSlowdown</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="block">/* Same initialization hack as in YbRunningOnValgrind(). */</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>double</name></type> <name>slowdown</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>local_slowdown</name> <init>= <expr><name>slowdown</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ANNOTATE_BENIGN_RACE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>slowdown</name></expr></argument>, <argument><expr><literal type="string">"safe hack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>YbRunningOnValgrind</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1.0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>local_slowdown</name> <operator>==</operator> <literal type="number">0.0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>env</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"VALGRIND_SLOWDOWN"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>slowdown</name> <operator>=</operator> <name>local_slowdown</name> <operator>=</operator> <ternary><condition><expr><name>env</name></expr> ?</condition><then> <expr><call><name>atof</name><argument_list>(<argument><expr><name>env</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">50.0</literal></expr></else></ternary></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>local_slowdown</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* DYNAMIC_ANNOTATIONS_EXTERNAL_IMPL == 0 */</comment>
</unit>
