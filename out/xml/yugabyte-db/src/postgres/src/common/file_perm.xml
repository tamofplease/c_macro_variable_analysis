<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/common/file_perm.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * File and directory permission routines
 *
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * src/include/common/file_perm.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"c.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/file_perm.h"</cpp:file></cpp:include>

<comment type="block">/* Modes for creating directories and files in the data directory */</comment>
<decl_stmt><decl><type><name>int</name></type>			<name>pg_dir_create_mode</name> <init>= <expr><name>PG_DIR_MODE_OWNER</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>pg_file_create_mode</name> <init>= <expr><name>PG_FILE_MODE_OWNER</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Mode mask to pass to umask().  This is more of a preventative measure since
 * all file/directory creates should be performed using the create modes above.
 */</comment>
<decl_stmt><decl><type><name>int</name></type>			<name>pg_mode_mask</name> <init>= <expr><name>PG_MODE_MASK_OWNER</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Set create modes and mask to use when writing to PGDATA based on the data
 * directory mode passed.  If group read/execute are present in the mode, then
 * create modes and mask will be relaxed to allow group read/execute on all
 * newly created files and directories.
 */</comment>
<function><type><name>void</name></type>
<name>SetDataDirectoryCreatePerm</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dataDirMode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* If the data directory mode has group access */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>PG_DIR_MODE_GROUP</name> <operator>&amp;</operator> <name>dataDirMode</name><operator>)</operator> <operator>==</operator> <name>PG_DIR_MODE_GROUP</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>pg_dir_create_mode</name> <operator>=</operator> <name>PG_DIR_MODE_GROUP</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>pg_file_create_mode</name> <operator>=</operator> <name>PG_FILE_MODE_GROUP</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>pg_mode_mask</name> <operator>=</operator> <name>PG_MODE_MASK_GROUP</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<comment type="block">/* Else use default permissions */</comment>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>pg_dir_create_mode</name> <operator>=</operator> <name>PG_DIR_MODE_OWNER</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>pg_file_create_mode</name> <operator>=</operator> <name>PG_FILE_MODE_OWNER</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>pg_mode_mask</name> <operator>=</operator> <name>PG_MODE_MASK_OWNER</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FRONTEND</name></cpp:ifdef>

<comment type="block">/*
 * Get the create modes and mask to use when writing to PGDATA by examining the
 * mode of the PGDATA directory and calling SetDataDirectoryCreatePerm().
 *
 * Errors are not handled here and should be reported by the application when
 * false is returned.
 *
 * Suppress when on Windows, because there may not be proper support for Unix-y
 * file permissions.
 */</comment>
<function><type><name>bool</name></type>
<name>GetDataDirectoryCreatePerm</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dataDir</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>statBuf</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * If an error occurs getting the mode then return false.  The caller is
	 * responsible for generating an error, if appropriate, indicating that we
	 * were unable to access the data directory.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>dataDir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statBuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Set permissions */</comment>
	<expr_stmt><expr><call><name>SetDataDirectoryCreatePerm</name><argument_list>(<argument><expr><name><name>statBuf</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>							<comment type="block">/* !defined(WIN32) &amp;&amp; !defined(__CYGWIN__) */</comment>
	<comment type="block">/*
	 * On Windows, we don't have anything to do here since they don't have
	 * Unix-y permissions.
	 */</comment>
	<return>return <expr><name>true</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* FRONTEND */</comment>
</unit>
