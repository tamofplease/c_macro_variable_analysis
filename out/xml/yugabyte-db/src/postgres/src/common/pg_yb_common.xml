<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/common/pg_yb_common.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * pg_yb_common.c
 *	  Common utilities for YugaByte/PostgreSQL integration that are reused
 *	  between PostgreSQL server code and other PostgreSQL programs such as
 *    initdb.
 *
 * Copyright (c) YugaByte, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * IDENTIFICATION
 *	  src/common/pg_yb_common.cc
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/pg_yb_common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/elog.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>kTestOnlyUseOSDefaultCollation</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function><type><name>bool</name></type>
<name>YBCIsEnvVarTrue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>env_var_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>YBCIsEnvVarTrueWithDefault</name><argument_list>(<argument><expr><name>env_var_name</name></expr></argument>, <comment type="block">/* default_value */</comment> <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>YBCIsEnvVarTrueWithDefault</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>env_var_name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>default_value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>env_var_value</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><name>env_var_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>env_var_value</name> <operator>||</operator>
		<call><name>strlen</name><argument_list>(<argument><expr><name>env_var_value</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
		<call><name>strcmp</name><argument_list>(<argument><expr><name>env_var_value</name></expr></argument>, <argument><expr><literal type="string">"auto"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>default_value</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>env_var_value</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>env_var_value</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>YBIsEnabledInPostgresEnvVar</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cached_value</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>cached_value</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>cached_value</name> <operator>=</operator> <call><name>YBCIsEnvVarTrue</name><argument_list>(<argument><expr><literal type="string">"YB_ENABLED_IN_POSTGRES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>cached_value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>YBShouldAllowRunningAsAnyUser</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>YBIsEnabledInPostgresEnvVar</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cached_value</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>cached_value</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
		<expr_stmt><expr><name>cached_value</name> <operator>=</operator> <call><name>YBCIsEnvVarTrue</name><argument_list>(<argument><expr><literal type="string">"YB_PG_ALLOW_RUNNING_AS_ANY_USER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>cached_value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>YBIsInitDbModeEnvVarSet</name><parameter_list>()</parameter_list>
<block>{<block_content>

	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cached_value</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>cached_value</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
		<expr_stmt><expr><name>cached_value</name> <operator>=</operator> <call><name>YBCIsEnvVarTrue</name><argument_list>(<argument><expr><literal type="string">"YB_PG_INITDB_MODE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>cached_value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>YBSetInitDbModeEnvVar</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>setenv_retval</name> <init>= <expr><call><name>setenv</name><argument_list>(<argument><expr><literal type="string">"YB_PG_INITDB_MODE"</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <comment type="block">/* overwrite */</comment> <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>setenv_retval</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"Could not set environment variable YB_PG_INITDB_MODE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>YBIsUsingYBParser</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cached_value</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>cached_value</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>cached_value</name> <operator>=</operator> <operator>!</operator><call><name>YBIsInitDbModeEnvVarSet</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>YBIsEnabledInPostgresEnvVar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>cached_value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>YBUnsupportedFeatureSignalLevel</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cached_value</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>cached_value</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<comment type="line">// TODO(dmitry): Remove 'YB_SUPPRESS_UNSUPPORTED_ERROR'</comment>
		<expr_stmt><expr><name>cached_value</name> <operator>=</operator> <ternary><condition><expr><call><name>YBCIsEnvVarTrue</name><argument_list>(<argument><expr><literal type="string">"YB_SUPPRESS_UNSUPPORTED_ERROR"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
									 <call><name>YBCIsEnvVarTrue</name><argument_list>(<argument><expr><literal type="string">"FLAGS_ysql_suppress_unsupported_error"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>WARNING</name></expr> </then><else>: <expr><name>ERROR</name></expr></else></ternary></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>cached_value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>YBIsNonTxnCopyEnabled</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cached_value</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>cached_value</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>cached_value</name> <operator>=</operator> <call><name>YBCIsEnvVarTrue</name><argument_list>(<argument><expr><literal type="string">"FLAGS_ysql_non_txn_copy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>cached_value</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>YBGetCurrentCloud</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"FLAGS_placement_cloud"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>YBGetCurrentRegion</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"FLAGS_placement_region"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>YBGetCurrentZone</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"FLAGS_placement_zone"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>YBGetCurrentUUID</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"FLAGS_placement_uuid"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>YBGetCurrentMetricNodeName</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"FLAGS_metric_node_name"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>YBGetMaxClockSkewUsec</name><parameter_list>()</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>kDefaultClockSkewUsec</name> <init>= <expr><literal type="number">500</literal> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>  <comment type="line">// from physical_time.cc</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>clock_skew_str</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"FLAGS_max_clock_skew_usec"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>clock_skew_str</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>atoi</name><argument_list>(<argument><expr><name>clock_skew_str</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>kDefaultClockSkewUsec</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>YBGetYsqlOutputBufferSize</name><parameter_list>()</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>output_buffer_size_str</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"FLAGS_ysql_output_buffer_size"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>output_buffer_size_str</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>atoi</name><argument_list>(<argument><expr><name>output_buffer_size_str</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Shouldn't reach here. But even if we do, instead of failing in a release build, we return</comment>
	<comment type="line">// 256KB as a default.</comment>
	<return>return <expr><literal type="number">256</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>YBIsRefreshMatviewFailureInjected</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cached_value</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>cached_value</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>cached_value</name> <operator>=</operator> <call><name>YBCIsEnvVarTrueWithDefault</name><argument_list>(
			<argument><expr><literal type="string">"FLAGS_TEST_yb_test_fail_matview_refresh_after_creation"</literal></expr></argument>,
			<argument><expr><name>false</name></expr></argument> <comment type="block">/* default_value */</comment>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>cached_value</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>YBIsCollationEnabled</name><parameter_list>()</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ICU</name></cpp:ifdef>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cached_value</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>cached_value</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * The default value must be in sync with that of FLAGS_TEST_pg_collation_enabled.
		 */</comment>
		<expr_stmt><expr><name>cached_value</name> <operator>=</operator> <call><name>YBCIsEnvVarTrueWithDefault</name><argument_list>(<argument><expr><literal type="string">"FLAGS_TEST_pg_collation_enabled"</literal></expr></argument>,
												  <argument><expr><name>true</name></expr></argument> <comment type="block">/* default_value */</comment>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>cached_value</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><name>false</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>YBColocateDatabaseByDefault</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cached_value</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>cached_value</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>cached_value</name> <operator>=</operator> <call><name>YBCIsEnvVarTrueWithDefault</name><argument_list>(<argument><expr><literal type="string">"FLAGS_ysql_colocate_database_by_default"</literal></expr></argument>,
												  <argument><expr><name>false</name></expr></argument> <comment type="block">/* default_value */</comment>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>cached_value</name></expr>;</return>
</block_content>}</block></function>
</unit>
