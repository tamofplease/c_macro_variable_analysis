<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/port/sprompt.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * sprompt.c
 *	  simple_prompt() routine
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/port/sprompt.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"c.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_TERMIOS_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;termios.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/*
 * simple_prompt
 *
 * Generalized function especially intended for reading in usernames and
 * passwords interactively.  Reads from /dev/tty or stdin/stderr.
 *
 * prompt:		The prompt to print, or NULL if none (automatically localized)
 * destination: buffer in which to store result
 * destlen:		allocated length of destination
 * echo:		Set to false if you want to hide what is entered (for passwords)
 *
 * The input (without trailing newline) is returned in the destination buffer,
 * with a '\0' appended.
 */</comment>
<function><type><name>void</name></type>
<name>simple_prompt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prompt</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>destination</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>destlen</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>echo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>length</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE</name>	   <modifier>*</modifier></type><name>termin</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>termout</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TERMIOS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<decl_stmt><decl><type><name><name>struct</name> <name>termios</name></name></type> <name>t_orig</name></decl>,
				<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<decl_stmt><decl><type><name>HANDLE</name></type>		<name>t</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type>		<name>t_orig</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>

	<comment type="block">/*
	 * A Windows console has an "input code page" and an "output code page";
	 * these usually match each other, but they rarely match the "Windows ANSI
	 * code page" defined at system boot and expected of "char *" arguments to
	 * Windows API functions.  The Microsoft CRT write() implementation
	 * automatically converts text between these code pages when writing to a
	 * console.  To identify such file descriptors, it calls GetConsoleMode()
	 * on the underlying HANDLE, which in turn requires GENERIC_READ access on
	 * the HANDLE.  Opening termout in mode "w+" allows that detection to
	 * succeed.  Otherwise, write() would not recognize the descriptor as a
	 * console, and non-ASCII characters would display incorrectly.
	 *
	 * XXX fgets() still receives text in the console's input code page.  This
	 * makes non-ASCII credentials unportable.
	 *
	 * Unintuitively, we also open termin in mode "w+", even though we only
	 * read it; that's needed for SetConsoleMode() to succeed.
	 */</comment>
	<expr_stmt><expr><name>termin</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"CONIN$"</literal></expr></argument>, <argument><expr><literal type="string">"w+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>termout</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"CONOUT$"</literal></expr></argument>, <argument><expr><literal type="string">"w+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

	<comment type="block">/*
	 * Do not try to collapse these into one "w+" mode file. Doesn't work on
	 * some platforms (eg, HPUX 10.20).
	 */</comment>
	<expr_stmt><expr><name>termin</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"/dev/tty"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>termout</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"/dev/tty"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>termin</name> <operator>||</operator> <operator>!</operator><name>termout</name>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>

	<comment type="block">/*
	 * Direct console I/O does not work from the MSYS 1.0.10 console.  Writes
	 * reach nowhere user-visible; reads block indefinitely.  XXX This affects
	 * most Windows terminal environments, including rxvt, mintty, Cygwin
	 * xterm, Cygwin sshd, and PowerShell ISE.  Switch to a more-generic test.
	 */</comment>
		<operator>||</operator> <operator>(</operator><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"OSTYPE"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"OSTYPE"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"msys"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>termin</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>termin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>termout</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>termout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>termin</name> <operator>=</operator> <name>stdin</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>termout</name> <operator>=</operator> <name>stderr</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>echo</name></expr>)</condition>
	<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TERMIOS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<comment type="block">/* disable echo via tcgetattr/tcsetattr */</comment>
		<expr_stmt><expr><call><name>tcgetattr</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>termin</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>t_orig</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>t</name><operator>.</operator><name>c_lflag</name></name> <operator>&amp;=</operator> <operator>~</operator><name>ECHO</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>tcsetattr</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>termin</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TCSAFLUSH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>
		<comment type="block">/* need the file's HANDLE to turn echo off */</comment>
		<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>HANDLE</name><operator>)</operator> <call><name>_get_osfhandle</name><argument_list>(<argument><expr><call><name>_fileno</name><argument_list>(<argument><expr><name>termin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* save the old configuration first */</comment>
		<expr_stmt><expr><call><name>GetConsoleMode</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t_orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* set to the new mode */</comment>
		<expr_stmt><expr><call><name>SetConsoleMode</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>ENABLE_LINE_INPUT</name> <operator>|</operator> <name>ENABLE_PROCESSED_INPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>prompt</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>termout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>termout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>destination</name></expr></argument>, <argument><expr><name>destlen</name></expr></argument>, <argument><expr><name>termin</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>destination</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>destination</name><index>[<expr><name>length</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* eat rest of the line */</comment>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>buflen</name></decl>;</decl_stmt>

		<do>do
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>termin</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>buflen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block> while <condition>(<expr><name>buflen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><name>buflen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition>;</do>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>destination</name><index>[<expr><name>length</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/* remove trailing newline */</comment>
		<expr_stmt><expr><name><name>destination</name><index>[<expr><name>length</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>echo</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* restore previous echo behavior, then echo \n */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TERMIOS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<expr_stmt><expr><call><name>tcsetattr</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>termin</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TCSAFLUSH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t_orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>termout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>termout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>
		<expr_stmt><expr><call><name>SetConsoleMode</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>t_orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>termout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>termout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>termin</name> <operator>!=</operator> <name>stdin</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>termin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>termout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
