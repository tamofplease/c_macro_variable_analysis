<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/port/win32error.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * win32error.c
 *	  Map win32 error codes to errno values
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *	  src/port/win32error.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FRONTEND</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct><specifier>static</specifier> <specifier>const</specifier> struct
<block>{
	<decl_stmt><decl><type><name>DWORD</name></type>		<name>winerr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>doserr</name></decl>;</decl_stmt>
}</block>			<decl><name><name>doserrors</name><index>[]</index></name> <init>=

<expr><block>{
	<expr><block>{
		<expr><name>ERROR_INVALID_FUNCTION</name></expr>, <expr><name>EINVAL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_FILE_NOT_FOUND</name></expr>, <expr><name>ENOENT</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_PATH_NOT_FOUND</name></expr>, <expr><name>ENOENT</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_TOO_MANY_OPEN_FILES</name></expr>, <expr><name>EMFILE</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_ACCESS_DENIED</name></expr>, <expr><name>EACCES</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_INVALID_HANDLE</name></expr>, <expr><name>EBADF</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_ARENA_TRASHED</name></expr>, <expr><name>ENOMEM</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_NOT_ENOUGH_MEMORY</name></expr>, <expr><name>ENOMEM</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_INVALID_BLOCK</name></expr>, <expr><name>ENOMEM</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_BAD_ENVIRONMENT</name></expr>, <expr><name>E2BIG</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_BAD_FORMAT</name></expr>, <expr><name>ENOEXEC</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_INVALID_ACCESS</name></expr>, <expr><name>EINVAL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_INVALID_DATA</name></expr>, <expr><name>EINVAL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_INVALID_DRIVE</name></expr>, <expr><name>ENOENT</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_CURRENT_DIRECTORY</name></expr>, <expr><name>EACCES</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_NOT_SAME_DEVICE</name></expr>, <expr><name>EXDEV</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_NO_MORE_FILES</name></expr>, <expr><name>ENOENT</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_LOCK_VIOLATION</name></expr>, <expr><name>EACCES</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_SHARING_VIOLATION</name></expr>, <expr><name>EACCES</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_BAD_NETPATH</name></expr>, <expr><name>ENOENT</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_NETWORK_ACCESS_DENIED</name></expr>, <expr><name>EACCES</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_BAD_NET_NAME</name></expr>, <expr><name>ENOENT</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_FILE_EXISTS</name></expr>, <expr><name>EEXIST</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_CANNOT_MAKE</name></expr>, <expr><name>EACCES</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_FAIL_I24</name></expr>, <expr><name>EACCES</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_INVALID_PARAMETER</name></expr>, <expr><name>EINVAL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_NO_PROC_SLOTS</name></expr>, <expr><name>EAGAIN</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_DRIVE_LOCKED</name></expr>, <expr><name>EACCES</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_BROKEN_PIPE</name></expr>, <expr><name>EPIPE</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_DISK_FULL</name></expr>, <expr><name>ENOSPC</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_INVALID_TARGET_HANDLE</name></expr>, <expr><name>EBADF</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_INVALID_HANDLE</name></expr>, <expr><name>EINVAL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_WAIT_NO_CHILDREN</name></expr>, <expr><name>ECHILD</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_CHILD_NOT_COMPLETE</name></expr>, <expr><name>ECHILD</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_DIRECT_ACCESS_HANDLE</name></expr>, <expr><name>EBADF</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_NEGATIVE_SEEK</name></expr>, <expr><name>EINVAL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_SEEK_ON_DEVICE</name></expr>, <expr><name>EACCES</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_DIR_NOT_EMPTY</name></expr>, <expr><name>ENOTEMPTY</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_NOT_LOCKED</name></expr>, <expr><name>EACCES</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_BAD_PATHNAME</name></expr>, <expr><name>ENOENT</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_MAX_THRDS_REACHED</name></expr>, <expr><name>EAGAIN</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_LOCK_FAILED</name></expr>, <expr><name>EACCES</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_ALREADY_EXISTS</name></expr>, <expr><name>EEXIST</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_FILENAME_EXCED_RANGE</name></expr>, <expr><name>ENOENT</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_NESTING_NOT_ALLOWED</name></expr>, <expr><name>EAGAIN</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_NOT_ENOUGH_QUOTA</name></expr>, <expr><name>ENOMEM</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><name>ERROR_DELETE_PENDING</name></expr>, <expr><name>ENOENT</name></expr>
	}</block></expr>
}</block></expr></init></decl>;</struct>

<function><type><name>void</name></type>
<name>_dosmaperr</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>e</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>lengthof</name><argument_list>(<argument><expr><name>doserrors</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>doserrors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>winerr</name> <operator>==</operator> <name>e</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>doserr</name> <init>= <expr><name><name>doserrors</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>doserr</name></expr></init></decl>;</decl_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FRONTEND</name></cpp:ifndef>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>DEBUG5</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg_internal</name><argument_list>(<argument><expr><literal type="string">"mapped win32 error code %lu to %d"</literal></expr></argument>,
									 <argument><expr><name>e</name></expr></argument>, <argument><expr><name>doserr</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>FRONTEND_DEBUG</name></expr></cpp:elif>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"mapped win32 error code %lu to %d"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>doserr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>doserr</name></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FRONTEND</name></cpp:ifndef>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errmsg_internal</name><argument_list>(<argument><expr><literal type="string">"unrecognized win32 error code: %lu"</literal></expr></argument>,
							 <argument><expr><name>e</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"unrecognized win32 error code: %lu"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>
</unit>
