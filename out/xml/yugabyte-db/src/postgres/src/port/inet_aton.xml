<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/port/inet_aton.c"><comment type="block">/* src/port/inet_aton.c
 *
 *	This inet_aton() function was taken from the GNU C library and
 *	incorporated into Postgres for those systems which do not have this
 *	routine in their standard C libraries.
 *
 *	The function was been extracted whole from the file inet_aton.c in
 *	Release 5.3.12 of the Linux C library, which is derived from the
 *	GNU C library, by Bryan Henderson in October 1996.  The copyright
 *	notice from that file is below.
 */</comment>

<comment type="block">/*
 * Copyright (c) 1983, 1990, 1993
 *		The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *	  notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *	  notice, this list of conditions and the following disclaimer in the
 *	  documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *	  may be used to endorse or promote products derived from this software
 *	  without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.  */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"c.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"port/pg_bswap.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Check whether "cp" is a valid ascii representation
 * of an Internet address and convert to a binary address.
 * Returns 1 if the address is valid, 0 if not.
 * This replaces inet_addr, the return value from which
 * cannot distinguish between failure and a local broadcast address.
 */</comment>
<function><type><name>int</name></type>
<name>inet_aton</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>base</name></decl>,
				<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name>c</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>u_int</name></type>		<name><name>parts</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>u_int</name>	   <modifier>*</modifier></type><name>pp</name> <init>= <expr><name>parts</name></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<comment type="block">/*
		 * Collect number up to ``.''. Values are specified as for C: 0x=hex,
		 * 0=octal, other=decimal.
		 */</comment>
		<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>++</operator><name>cp</name> <operator>==</operator> <literal type="char">'x'</literal> <operator>||</operator> <operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'X'</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">16</literal></expr><operator>,</operator> <expr><name>cp</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
		<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>cp</name><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>c</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>*</operator> <name>base</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>base</name> <operator>==</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <call><name>isxdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>c</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator>
					<operator>(</operator><name>c</name> <operator>+</operator> <literal type="number">10</literal> <operator>-</operator> <operator>(</operator><ternary><condition><expr><call><name>islower</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name>c</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="char">'a'</literal></expr> </then><else>: <expr><literal type="char">'A'</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		</block_content>}</block></while>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * Internet format: a.b.c.d a.b.c	(with c treated as 16-bits)
			 * a.b	   (with b treated as 24 bits)
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>pp</name> <operator>&gt;=</operator> <name>parts</name> <operator>+</operator> <literal type="number">3</literal> <operator>||</operator> <name>val</name> <operator>&gt;</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><operator>*</operator><name>pp</name><operator>++</operator> <operator>=</operator> <name>val</name></expr><operator>,</operator> <expr><name>cp</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<break>break;</break></block_content></block></else></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * Check for trailing junk.
	 */</comment>
	<while>while <condition>(<expr><operator>*</operator><name>cp</name></expr>)</condition><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>cp</name><operator>++</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>

	<comment type="block">/*
	 * Concoct the address according to the number of parts specified.
	 */</comment>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <name>pp</name> <operator>-</operator> <name>parts</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name>n</name></expr>)</condition>
	<block>{<block_content>

		<case>case <expr><literal type="number">1</literal></expr>:</case>					<comment type="block">/* a -- 32 bits */</comment>
			<break>break;</break>

		<case>case <expr><literal type="number">2</literal></expr>:</case>					<comment type="block">/* a.b -- 8.24 bits */</comment>
			<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;</operator> <literal type="number">0xffffff</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>val</name> <operator>|=</operator> <name><name>parts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><literal type="number">3</literal></expr>:</case>					<comment type="block">/* a.b.c -- 8.8.16 bits */</comment>
			<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;</operator> <literal type="number">0xffff</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>val</name> <operator>|=</operator> <operator>(</operator><name><name>parts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>parts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><literal type="number">4</literal></expr>:</case>					<comment type="block">/* a.b.c.d -- 8.8.8.8 bits */</comment>
			<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&gt;</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>val</name> <operator>|=</operator> <operator>(</operator><name><name>parts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>parts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>parts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
	<if_stmt><if>if <condition>(<expr><name>addr</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>s_addr</name></name> <operator>=</operator> <call><name>pg_hton32</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
</unit>
