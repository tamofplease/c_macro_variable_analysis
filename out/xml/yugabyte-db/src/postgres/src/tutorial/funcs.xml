<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/tutorial/funcs.c"><comment type="block">/* src/tutorial/funcs.c */</comment>

<comment type="block" format="doxygen">/******************************************************************************
  These are user-defined functions that can be bound to a Postgres backend
  and called by Postgres to execute SQL functions of the same name.

  The calling format for these functions is defined by the CREATE FUNCTION
  SQL statement that binds them to the backend.

  NOTE: this file shows examples of "old style" function call conventions.
  See funcs_new.c for examples of "new style".
*****************************************************************************/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>			<comment type="block">/* general Postgres declarations */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/executor.h"</cpp:file></cpp:include>	<comment type="block">/* for GetAttributeByName() */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/geo_decls.h"</cpp:file></cpp:include>	<comment type="block">/* for point type */</comment>

<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<comment type="block">/* These prototypes just prevent possible warnings from gcc. */</comment>

<function_decl><type><name>int</name></type>			<name>add_one</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>float8</name>	   <modifier>*</modifier></type><name>add_one_float8</name><parameter_list>(<parameter><decl><type><name>float8</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Point</name>	   <modifier>*</modifier></type><name>makepoint</name><parameter_list>(<parameter><decl><type><name>Point</name> <modifier>*</modifier></type><name>pointx</name></decl></parameter>, <parameter><decl><type><name>Point</name> <modifier>*</modifier></type><name>pointy</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>text</name>	   <modifier>*</modifier></type><name>copytext</name><parameter_list>(<parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>text</name>	   <modifier>*</modifier></type><name>concat_text</name><parameter_list>(<parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, <parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>c_overpaid</name><parameter_list>(<parameter><decl><type><name>HeapTupleHeader</name></type> <name>t</name></decl></parameter>,		<comment type="block">/* the current instance of EMP */</comment>
		   <parameter><decl><type><name>int32</name></type> <name>limit</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/* By Value */</comment>

<function><type><name>int</name></type>
<name>add_one</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>arg</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* By Reference, Fixed Length */</comment>

<function><type><name>float8</name> <modifier>*</modifier></type>
<name>add_one_float8</name><parameter_list>(<parameter><decl><type><name>float8</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>float8</name>	   <modifier>*</modifier></type><name>result</name> <init>= <expr><operator>(</operator><name>float8</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float8</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <operator>*</operator><name>arg</name> <operator>+</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Point</name> <modifier>*</modifier></type>
<name>makepoint</name><parameter_list>(<parameter><decl><type><name>Point</name> <modifier>*</modifier></type><name>pointx</name></decl></parameter>, <parameter><decl><type><name>Point</name> <modifier>*</modifier></type><name>pointy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Point</name>	   <modifier>*</modifier></type><name>new_point</name> <init>= <expr><operator>(</operator><name>Point</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Point</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>new_point</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>pointx</name><operator>-&gt;</operator><name>x</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new_point</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name><name>pointy</name><operator>-&gt;</operator><name>y</name></name></expr>;</expr_stmt>

	<return>return <expr><name>new_point</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* By Reference, Variable Length */</comment>

<function><type><name>text</name> <modifier>*</modifier></type>
<name>copytext</name><parameter_list>(<parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * VARSIZE is the total size of the struct in bytes.
	 */</comment>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>new_t</name> <init>= <expr><operator>(</operator><name>text</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>new_t</name></expr></argument>, <argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * VARDATA is a pointer to the data region of the struct.
	 */</comment>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>VARDATA</name><argument_list>(<argument><expr><name>new_t</name></expr></argument>)</argument_list></call></expr></argument>, <comment type="block">/* destination */</comment>
		   <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>VARDATA</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <comment type="block">/* source */</comment>
		   <argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VARHDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* how many bytes */</comment>
	<return>return <expr><name>new_t</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>text</name> <modifier>*</modifier></type>
<name>concat_text</name><parameter_list>(<parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, <parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type>		<name>arg1_size</name> <init>= <expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VARHDRSZ</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>arg2_size</name> <init>= <expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VARHDRSZ</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>new_text_size</name> <init>= <expr><name>arg1_size</name> <operator>+</operator> <name>arg2_size</name> <operator>+</operator> <name>VARHDRSZ</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>new_text</name> <init>= <expr><operator>(</operator><name>text</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>new_text_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>new_text</name></expr></argument>, <argument><expr><name>new_text_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>VARDATA</name><argument_list>(<argument><expr><name>new_text</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VARDATA</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg1_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>VARDATA</name><argument_list>(<argument><expr><name>new_text</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>arg1_size</name></expr></argument>, <argument><expr><call><name>VARDATA</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg2_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>new_text</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Composite types */</comment>

<function><type><name>bool</name></type>
<name>c_overpaid</name><parameter_list>(<parameter><decl><type><name>HeapTupleHeader</name></type> <name>t</name></decl></parameter>,	<comment type="block">/* the current instance of EMP */</comment>
		   <parameter><decl><type><name>int32</name></type> <name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>isnull</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>salary</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>salary</name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><call><name>GetAttributeByName</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"salary"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>salary</name> <operator>&gt;</operator> <name>limit</name></expr>;</return>
</block_content>}</block></function>
</unit>
