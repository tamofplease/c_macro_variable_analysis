<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/test/modules/test_shm_mq/setup.c"><comment type="block">/*--------------------------------------------------------------------------
 *
 * setup.c
 *		Code to set up a dynamic shared memory segments and a specified
 *		number of background workers for shared memory message queue
 *		testing.
 *
 * Copyright (c) 2013-2018, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *		src/test/modules/test_shm_mq/setup.c
 *
 * -------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/bgworker.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/procsignal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/shm_toc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test_shm_mq.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>int</name></type>			<name>nworkers</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BackgroundWorkerHandle</name> <modifier>*</modifier></type><name><name>handle</name><index>[<expr><name>FLEXIBLE_ARRAY_MEMBER</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>worker_state</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>setup_dynamic_shared_memory</name><parameter_list>(<parameter><decl><type><name>int64</name></type> <name>queue_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nworkers</name></decl></parameter>,
							<parameter><decl><type><name>dsm_segment</name> <modifier>*</modifier><modifier>*</modifier></type><name>segp</name></decl></parameter>,
							<parameter><decl><type><name>test_shm_mq_header</name> <modifier>*</modifier><modifier>*</modifier></type><name>hdrp</name></decl></parameter>,
							<parameter><decl><type><name>shm_mq</name> <modifier>*</modifier><modifier>*</modifier></type><name>outp</name></decl></parameter>, <parameter><decl><type><name>shm_mq</name> <modifier>*</modifier><modifier>*</modifier></type><name>inp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>worker_state</name> <modifier>*</modifier></type><name>setup_background_workers</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nworkers</name></decl></parameter>,
						 <parameter><decl><type><name>dsm_segment</name> <modifier>*</modifier></type><name>seg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cleanup_background_workers</name><parameter_list>(<parameter><decl><type><name>dsm_segment</name> <modifier>*</modifier></type><name>seg</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>wait_for_workers_to_become_ready</name><parameter_list>(<parameter><decl><type><name>worker_state</name> <modifier>*</modifier></type><name>wstate</name></decl></parameter>,
								 <parameter><decl><type><specifier>volatile</specifier> <name>test_shm_mq_header</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>check_worker_status</name><parameter_list>(<parameter><decl><type><name>worker_state</name> <modifier>*</modifier></type><name>wstate</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Set up a dynamic shared memory segment and zero or more background workers
 * for a test run.
 */</comment>
<function><type><name>void</name></type>
<name>test_shm_mq_setup</name><parameter_list>(<parameter><decl><type><name>int64</name></type> <name>queue_size</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>nworkers</name></decl></parameter>, <parameter><decl><type><name>dsm_segment</name> <modifier>*</modifier><modifier>*</modifier></type><name>segp</name></decl></parameter>,
				  <parameter><decl><type><name>shm_mq_handle</name> <modifier>*</modifier><modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>shm_mq_handle</name> <modifier>*</modifier><modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>dsm_segment</name> <modifier>*</modifier></type><name>seg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>test_shm_mq_header</name> <modifier>*</modifier></type><name>hdr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>shm_mq</name>	   <modifier>*</modifier></type><name>outq</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>	<comment type="block">/* placate compiler */</comment>
	<decl_stmt><decl><type><name>shm_mq</name>	   <modifier>*</modifier></type><name>inq</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>		<comment type="block">/* placate compiler */</comment>
	<decl_stmt><decl><type><name>worker_state</name> <modifier>*</modifier></type><name>wstate</name></decl>;</decl_stmt>

	<comment type="block">/* Set up a dynamic shared memory segment. */</comment>
	<expr_stmt><expr><call><name>setup_dynamic_shared_memory</name><argument_list>(<argument><expr><name>queue_size</name></expr></argument>, <argument><expr><name>nworkers</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>segp</name> <operator>=</operator> <name>seg</name></expr>;</expr_stmt>

	<comment type="block">/* Register background workers. */</comment>
	<expr_stmt><expr><name>wstate</name> <operator>=</operator> <call><name>setup_background_workers</name><argument_list>(<argument><expr><name>nworkers</name></expr></argument>, <argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Attach the queues. */</comment>
	<expr_stmt><expr><operator>*</operator><name>output</name> <operator>=</operator> <call><name>shm_mq_attach</name><argument_list>(<argument><expr><name>outq</name></expr></argument>, <argument><expr><name>seg</name></expr></argument>, <argument><expr><name><name>wstate</name><operator>-&gt;</operator><name>handle</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>input</name> <operator>=</operator> <call><name>shm_mq_attach</name><argument_list>(<argument><expr><name>inq</name></expr></argument>, <argument><expr><name>seg</name></expr></argument>, <argument><expr><name><name>wstate</name><operator>-&gt;</operator><name>handle</name><index>[<expr><name>nworkers</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Wait for workers to become ready. */</comment>
	<expr_stmt><expr><call><name>wait_for_workers_to_become_ready</name><argument_list>(<argument><expr><name>wstate</name></expr></argument>, <argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Once we reach this point, all workers are ready.  We no longer need to
	 * kill them if we die; they'll die on their own as the message queues
	 * shut down.
	 */</comment>
	<expr_stmt><expr><call><name>cancel_on_dsm_detach</name><argument_list>(<argument><expr><name>seg</name></expr></argument>, <argument><expr><name>cleanup_background_workers</name></expr></argument>,
						 <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>wstate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>wstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Set up a dynamic shared memory segment.
 *
 * We set up a small control region that contains only a test_shm_mq_header,
 * plus one region per message queue.  There are as many message queues as
 * the number of workers, plus one.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>setup_dynamic_shared_memory</name><parameter_list>(<parameter><decl><type><name>int64</name></type> <name>queue_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nworkers</name></decl></parameter>,
							<parameter><decl><type><name>dsm_segment</name> <modifier>*</modifier><modifier>*</modifier></type><name>segp</name></decl></parameter>, <parameter><decl><type><name>test_shm_mq_header</name> <modifier>*</modifier><modifier>*</modifier></type><name>hdrp</name></decl></parameter>,
							<parameter><decl><type><name>shm_mq</name> <modifier>*</modifier><modifier>*</modifier></type><name>outp</name></decl></parameter>, <parameter><decl><type><name>shm_mq</name> <modifier>*</modifier><modifier>*</modifier></type><name>inp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>shm_toc_estimator</name></type> <name>e</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type>		<name>segsize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>dsm_segment</name> <modifier>*</modifier></type><name>seg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>shm_toc</name>    <modifier>*</modifier></type><name>toc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>test_shm_mq_header</name> <modifier>*</modifier></type><name>hdr</name></decl>;</decl_stmt>

	<comment type="block">/* Ensure a valid queue size. */</comment>
	<if_stmt><if>if <condition>(<expr><name>queue_size</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><operator>(</operator><name>uint64</name><operator>)</operator> <name>queue_size</name><operator>)</operator> <operator>&lt;</operator> <name>shm_mq_minimum_size</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"queue size must be at least %zu bytes"</literal></expr></argument>,
						<argument><expr><name>shm_mq_minimum_size</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>queue_size</name> <operator>!=</operator> <operator>(</operator><operator>(</operator><name>Size</name><operator>)</operator> <name>queue_size</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"queue size overflows size_t"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Estimate how much shared memory we need.
	 *
	 * Because the TOC machinery may choose to insert padding of oddly-sized
	 * requests, we must estimate each chunk separately.
	 *
	 * We need one key to register the location of the header, and we need
	 * nworkers + 1 keys to track the locations of the message queues.
	 */</comment>
	<expr_stmt><expr><call><name>shm_toc_initialize_estimator</name><argument_list>(<argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>shm_toc_estimate_chunk</name><argument_list>(<argument><expr><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>test_shm_mq_header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>nworkers</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>shm_toc_estimate_chunk</name><argument_list>(<argument><expr><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><operator>(</operator><name>Size</name><operator>)</operator> <name>queue_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><call><name>shm_toc_estimate_keys</name><argument_list>(<argument><expr><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>+</operator> <name>nworkers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>segsize</name> <operator>=</operator> <call><name>shm_toc_estimate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Create the shared memory segment and establish a table of contents. */</comment>
	<expr_stmt><expr><name>seg</name> <operator>=</operator> <call><name>dsm_create</name><argument_list>(<argument><expr><call><name>shm_toc_estimate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>toc</name> <operator>=</operator> <call><name>shm_toc_create</name><argument_list>(<argument><expr><name>PG_TEST_SHM_MQ_MAGIC</name></expr></argument>, <argument><expr><call><name>dsm_segment_address</name><argument_list>(<argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr></argument>,
						 <argument><expr><name>segsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Set up the header region. */</comment>
	<expr_stmt><expr><name>hdr</name> <operator>=</operator> <call><name>shm_toc_allocate</name><argument_list>(<argument><expr><name>toc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>test_shm_mq_header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SpinLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hdr</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>workers_total</name></name> <operator>=</operator> <name>nworkers</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>workers_attached</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>workers_ready</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>shm_toc_insert</name><argument_list>(<argument><expr><name>toc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Set up one message queue per worker, plus one. */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>nworkers</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>shm_mq</name>	   <modifier>*</modifier></type><name>mq</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>mq</name> <operator>=</operator> <call><name>shm_mq_create</name><argument_list>(<argument><expr><call><name>shm_toc_allocate</name><argument_list>(<argument><expr><name>toc</name></expr></argument>, <argument><expr><operator>(</operator><name>Size</name><operator>)</operator> <name>queue_size</name></expr></argument>)</argument_list></call></expr></argument>,
						   <argument><expr><operator>(</operator><name>Size</name><operator>)</operator> <name>queue_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>shm_toc_insert</name><argument_list>(<argument><expr><name>toc</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* We send messages to the first queue. */</comment>
			<expr_stmt><expr><call><name>shm_mq_set_sender</name><argument_list>(<argument><expr><name>mq</name></expr></argument>, <argument><expr><name>MyProc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>outp</name> <operator>=</operator> <name>mq</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>nworkers</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* We receive messages from the last queue. */</comment>
			<expr_stmt><expr><call><name>shm_mq_set_receiver</name><argument_list>(<argument><expr><name>mq</name></expr></argument>, <argument><expr><name>MyProc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>inp</name> <operator>=</operator> <name>mq</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Return results to caller. */</comment>
	<expr_stmt><expr><operator>*</operator><name>segp</name> <operator>=</operator> <name>seg</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>hdrp</name> <operator>=</operator> <name>hdr</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Register background workers.
 */</comment>
<function><type><specifier>static</specifier> <name>worker_state</name> <modifier>*</modifier></type>
<name>setup_background_workers</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nworkers</name></decl></parameter>, <parameter><decl><type><name>dsm_segment</name> <modifier>*</modifier></type><name>seg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BackgroundWorker</name></type> <name>worker</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>worker_state</name> <modifier>*</modifier></type><name>wstate</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * We need the worker_state object and the background worker handles to
	 * which it points to be allocated in CurTransactionContext rather than
	 * ExprContext; otherwise, they'll be destroyed before the on_dsm_detach
	 * hooks run.
	 */</comment>
	<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>CurTransactionContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Create worker state object. */</comment>
	<expr_stmt><expr><name>wstate</name> <operator>=</operator> <call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name>TopTransactionContext</name></expr></argument>,
								<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>worker_state</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call> <operator>+</operator>
								<sizeof>sizeof<argument_list>(<argument><expr><name>BackgroundWorkerHandle</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nworkers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>wstate</name><operator>-&gt;</operator><name>nworkers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * Arrange to kill all the workers if we abort before all workers are
	 * finished hooking themselves up to the dynamic shared memory segment.
	 *
	 * If we die after all the workers have finished hooking themselves up to
	 * the dynamic shared memory segment, we'll mark the two queues to which
	 * we're directly connected as detached, and the worker(s) connected to
	 * those queues will exit, marking any other queues to which they are
	 * connected as detached.  This will cause any as-yet-unaware workers
	 * connected to those queues to exit in their turn, and so on, until
	 * everybody exits.
	 *
	 * But suppose the workers which are supposed to connect to the queues to
	 * which we're directly attached exit due to some error before they
	 * actually attach the queues.  The remaining workers will have no way of
	 * knowing this.  From their perspective, they're still waiting for those
	 * workers to start, when in fact they've already died.
	 */</comment>
	<expr_stmt><expr><call><name>on_dsm_detach</name><argument_list>(<argument><expr><name>seg</name></expr></argument>, <argument><expr><name>cleanup_background_workers</name></expr></argument>,
				  <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>wstate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Configure a worker. */</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>worker</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>worker</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>worker</name><operator>.</operator><name>bgw_flags</name></name> <operator>=</operator> <name>BGWORKER_SHMEM_ACCESS</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>worker</name><operator>.</operator><name>bgw_start_time</name></name> <operator>=</operator> <name>BgWorkerStart_ConsistentState</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>worker</name><operator>.</operator><name>bgw_restart_time</name></name> <operator>=</operator> <name>BGW_NEVER_RESTART</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>worker</name><operator>.</operator><name>bgw_library_name</name></name></expr></argument>, <argument><expr><literal type="string">"test_shm_mq"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>worker</name><operator>.</operator><name>bgw_function_name</name></name></expr></argument>, <argument><expr><literal type="string">"test_shm_mq_main"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>worker</name><operator>.</operator><name>bgw_type</name></name></expr></argument>, <argument><expr><name>BGW_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"test_shm_mq"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>worker</name><operator>.</operator><name>bgw_main_arg</name></name> <operator>=</operator> <call><name>UInt32GetDatum</name><argument_list>(<argument><expr><call><name>dsm_segment_handle</name><argument_list>(<argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* set bgw_notify_pid, so we can detect if the worker stops */</comment>
	<expr_stmt><expr><name><name>worker</name><operator>.</operator><name>bgw_notify_pid</name></name> <operator>=</operator> <name>MyProcPid</name></expr>;</expr_stmt>

	<comment type="block">/* Register the workers. */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nworkers</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RegisterDynamicBackgroundWorker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>worker</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wstate</name><operator>-&gt;</operator><name>handle</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_RESOURCES</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not register background process"</literal></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"You may need to increase max_worker_processes."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><operator>++</operator><name><name>wstate</name><operator>-&gt;</operator><name>nworkers</name></name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* All done. */</comment>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>wstate</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cleanup_background_workers</name><parameter_list>(<parameter><decl><type><name>dsm_segment</name> <modifier>*</modifier></type><name>seg</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>worker_state</name> <modifier>*</modifier></type><name>wstate</name> <init>= <expr><operator>(</operator><name>worker_state</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><name><name>wstate</name><operator>-&gt;</operator><name>nworkers</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>--</operator><name><name>wstate</name><operator>-&gt;</operator><name>nworkers</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TerminateBackgroundWorker</name><argument_list>(<argument><expr><name><name>wstate</name><operator>-&gt;</operator><name>handle</name><index>[<expr><name><name>wstate</name><operator>-&gt;</operator><name>nworkers</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>wait_for_workers_to_become_ready</name><parameter_list>(<parameter><decl><type><name>worker_state</name> <modifier>*</modifier></type><name>wstate</name></decl></parameter>,
								 <parameter><decl><type><specifier>volatile</specifier> <name>test_shm_mq_header</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>workers_ready</name></decl>;</decl_stmt>

		<comment type="block">/* If all the workers are ready, we have succeeded. */</comment>
		<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hdr</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>workers_ready</name> <operator>=</operator> <name><name>hdr</name><operator>-&gt;</operator><name>workers_ready</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hdr</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>workers_ready</name> <operator>&gt;=</operator> <name><name>wstate</name><operator>-&gt;</operator><name>nworkers</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* If any workers (or the postmaster) have died, we have failed. */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_worker_status</name><argument_list>(<argument><expr><name>wstate</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Wait to be signalled. */</comment>
		<expr_stmt><expr><call><name>WaitLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>, <argument><expr><name>WL_LATCH_SET</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PG_WAIT_EXTENSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Reset the latch so we don't spin. */</comment>
		<expr_stmt><expr><call><name>ResetLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* An interrupt may have occurred while we were waiting. */</comment>
		<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_RESOURCES</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"one or more background workers failed to start"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>check_worker_status</name><parameter_list>(<parameter><decl><type><name>worker_state</name> <modifier>*</modifier></type><name>wstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>n</name></decl>;</decl_stmt>

	<comment type="block">/* If any workers (or the postmaster) have died, we have failed. */</comment>
	<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>wstate</name><operator>-&gt;</operator><name>nworkers</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>BgwHandleStatus</name></type> <name>status</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>pid_t</name></type>		<name>pid</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>GetBackgroundWorkerPid</name><argument_list>(<argument><expr><name><name>wstate</name><operator>-&gt;</operator><name>handle</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>BGWH_STOPPED</name> <operator>||</operator> <name>status</name> <operator>==</operator> <name>BGWH_POSTMASTER_DIED</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Otherwise, things still look OK. */</comment>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
</unit>
