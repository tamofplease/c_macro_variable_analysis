<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/backend/jit/llvm/llvmjit_expr.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * llvmjit_expr.c
 *	  JIT compile expressions.
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/jit/llvm/llvmjit_expr.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;llvm-c/Core.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;llvm-c/Target.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/nbtree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/tupconvert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/objectaccess.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/execdebug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/nodeAgg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/nodeSubplan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/execExpr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jit/llvmjit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jit/llvmjit_emit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/makefuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/nodeFuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/planner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parse_coerce.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parsetree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/date.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/fmgrtab.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/timestamp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/typcache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/xml.h"</cpp:file></cpp:include>


<typedef>typedef <type><struct>struct <name>CompiledExprState</name>
<block>{
	<decl_stmt><decl><type><name>LLVMJitContext</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>funcname</name></decl>;</decl_stmt>
}</block></struct></type> <name>CompiledExprState</name>;</typedef>


<function_decl><type><specifier>static</specifier> <name>Datum</name></type> <name>ExecRunCompiledExpr</name><parameter_list>(<parameter><decl><type><name>ExprState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isNull</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>LLVMValueRef</name></type> <name>BuildV1Call</name><parameter_list>(<parameter><decl><type><name>LLVMJitContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>LLVMBuilderRef</name></type> <name>b</name></decl></parameter>,
			<parameter><decl><type><name>LLVMModuleRef</name></type> <name>mod</name></decl></parameter>, <parameter><decl><type><name>FunctionCallInfo</name></type> <name>fcinfo</name></decl></parameter>,
			<parameter><decl><type><name>LLVMValueRef</name> <modifier>*</modifier></type><name>v_fcinfo_isnull</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>build_EvalXFunc</name><parameter_list>(<parameter><decl><type><name>LLVMBuilderRef</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>LLVMModuleRef</name></type> <name>mod</name></decl></parameter>,
				<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>funcname</name></decl></parameter>,
				<parameter><decl><type><name>LLVMValueRef</name></type> <name>v_state</name></decl></parameter>, <parameter><decl><type><name>LLVMValueRef</name></type> <name>v_econtext</name></decl></parameter>,
				<parameter><decl><type><name>ExprEvalStep</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>LLVMValueRef</name></type> <name>create_LifetimeEnd</name><parameter_list>(<parameter><decl><type><name>LLVMModuleRef</name></type> <name>mod</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * JIT compile expression.
 */</comment>
<function><type><name>bool</name></type>
<name>llvm_compile_expr</name><parameter_list>(<parameter><decl><type><name>ExprState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PlanState</name>  <modifier>*</modifier></type><name>parent</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>funcname</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>LLVMJitContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>LLVMBuilderRef</name></type> <name>b</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LLVMModuleRef</name></type> <name>mod</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LLVMTypeRef</name></type> <name>eval_sig</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>eval_fn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LLVMBasicBlockRef</name></type> <name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LLVMBasicBlockRef</name> <modifier>*</modifier></type><name>opblocks</name></decl>;</decl_stmt>

	<comment type="block">/* state itself */</comment>
	<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_state</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_econtext</name></decl>;</decl_stmt>

	<comment type="block">/* returnvalue */</comment>
	<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_isnullp</name></decl>;</decl_stmt>

	<comment type="block">/* tmp vars in state */</comment>
	<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_tmpvaluep</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_tmpisnullp</name></decl>;</decl_stmt>

	<comment type="block">/* slots */</comment>
	<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_innerslot</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_outerslot</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_scanslot</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_resultslot</name></decl>;</decl_stmt>

	<comment type="block">/* nulls/values of slots */</comment>
	<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_innervalues</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_innernulls</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_outervalues</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_outernulls</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_scanvalues</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_scannulls</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_resultvalues</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_resultnulls</name></decl>;</decl_stmt>

	<comment type="block">/* stuff in econtext */</comment>
	<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_aggvalues</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_aggnulls</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>instr_time</name></type>	<name>starttime</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>instr_time</name></type>	<name>endtime</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>llvm_enter_fatal_on_oom</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* get or create JIT context */</comment>
	<if_stmt><if>if <condition>(<expr><name>parent</name> <operator>&amp;&amp;</operator> <name><name>parent</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>es_jit</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>context</name> <operator>=</operator> <operator>(</operator><name>LLVMJitContext</name> <operator>*</operator><operator>)</operator> <name><name>parent</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>es_jit</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>context</name> <operator>=</operator> <call><name>llvm_create_context</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>es_jit_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>parent</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>es_jit</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>INSTR_TIME_SET_CURRENT</name><argument_list>(<argument><expr><name>starttime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>mod</name> <operator>=</operator> <call><name>llvm_mutable_module</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>LLVMCreateBuilder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>funcname</name> <operator>=</operator> <call><name>llvm_expand_funcname</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"evalexpr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Create the signature and function */</comment>
	<block>{<block_content>
		<decl_stmt><decl><type><name>LLVMTypeRef</name></type> <name><name>param_types</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>param_types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>l_ptr</name><argument_list>(<argument><expr><name>StructExprState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* state */</comment>
		<expr_stmt><expr><name><name>param_types</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>l_ptr</name><argument_list>(<argument><expr><name>StructExprContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* econtext */</comment>
		<expr_stmt><expr><name><name>param_types</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>l_ptr</name><argument_list>(<argument><expr><name>TypeParamBool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* isnull */</comment>

		<expr_stmt><expr><name>eval_sig</name> <operator>=</operator> <call><name>LLVMFunctionType</name><argument_list>(<argument><expr><name>TypeSizeT</name></expr></argument>,
									<argument><expr><name>param_types</name></expr></argument>, <argument><expr><call><name>lengthof</name><argument_list>(<argument><expr><name>param_types</name></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><name>eval_fn</name> <operator>=</operator> <call><name>LLVMAddFunction</name><argument_list>(<argument><expr><name>mod</name></expr></argument>, <argument><expr><name>funcname</name></expr></argument>, <argument><expr><name>eval_sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LLVMSetLinkage</name><argument_list>(<argument><expr><name>eval_fn</name></expr></argument>, <argument><expr><name>LLVMExternalLinkage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LLVMSetVisibility</name><argument_list>(<argument><expr><name>eval_fn</name></expr></argument>, <argument><expr><name>LLVMDefaultVisibility</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>llvm_copy_attributes</name><argument_list>(<argument><expr><name>AttributeTemplate</name></expr></argument>, <argument><expr><name>eval_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>LLVMAppendBasicBlock</name><argument_list>(<argument><expr><name>eval_fn</name></expr></argument>, <argument><expr><literal type="string">"entry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* build state */</comment>
	<expr_stmt><expr><name>v_state</name> <operator>=</operator> <call><name>LLVMGetParam</name><argument_list>(<argument><expr><name>eval_fn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>v_econtext</name> <operator>=</operator> <call><name>LLVMGetParam</name><argument_list>(<argument><expr><name>eval_fn</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>v_isnullp</name> <operator>=</operator> <call><name>LLVMGetParam</name><argument_list>(<argument><expr><name>eval_fn</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LLVMPositionBuilderAtEnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>v_tmpvaluep</name> <operator>=</operator> <call><name>LLVMBuildStructGEP</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_state</name></expr></argument>,
									 <argument><expr><name>FIELDNO_EXPRSTATE_RESVALUE</name></expr></argument>,
									 <argument><expr><literal type="string">"v.state.resvalue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>v_tmpisnullp</name> <operator>=</operator> <call><name>LLVMBuildStructGEP</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_state</name></expr></argument>,
									  <argument><expr><name>FIELDNO_EXPRSTATE_RESNULL</name></expr></argument>,
									  <argument><expr><literal type="string">"v.state.resnull"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* build global slots */</comment>
	<expr_stmt><expr><name>v_scanslot</name> <operator>=</operator> <call><name>l_load_struct_gep</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_econtext</name></expr></argument>,
								   <argument><expr><name>FIELDNO_EXPRCONTEXT_SCANTUPLE</name></expr></argument>,
								   <argument><expr><literal type="string">"v_scanslot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>v_innerslot</name> <operator>=</operator> <call><name>l_load_struct_gep</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_econtext</name></expr></argument>,
									<argument><expr><name>FIELDNO_EXPRCONTEXT_INNERTUPLE</name></expr></argument>,
									<argument><expr><literal type="string">"v_innerslot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>v_outerslot</name> <operator>=</operator> <call><name>l_load_struct_gep</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_econtext</name></expr></argument>,
									<argument><expr><name>FIELDNO_EXPRCONTEXT_OUTERTUPLE</name></expr></argument>,
									<argument><expr><literal type="string">"v_outerslot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>v_resultslot</name> <operator>=</operator> <call><name>l_load_struct_gep</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_state</name></expr></argument>,
									 <argument><expr><name>FIELDNO_EXPRSTATE_RESULTSLOT</name></expr></argument>,
									 <argument><expr><literal type="string">"v_resultslot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* build global values/isnull pointers */</comment>
	<expr_stmt><expr><name>v_scanvalues</name> <operator>=</operator> <call><name>l_load_struct_gep</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_scanslot</name></expr></argument>,
									 <argument><expr><name>FIELDNO_TUPLETABLESLOT_VALUES</name></expr></argument>,
									 <argument><expr><literal type="string">"v_scanvalues"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>v_scannulls</name> <operator>=</operator> <call><name>l_load_struct_gep</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_scanslot</name></expr></argument>,
									<argument><expr><name>FIELDNO_TUPLETABLESLOT_ISNULL</name></expr></argument>,
									<argument><expr><literal type="string">"v_scannulls"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>v_innervalues</name> <operator>=</operator> <call><name>l_load_struct_gep</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_innerslot</name></expr></argument>,
									  <argument><expr><name>FIELDNO_TUPLETABLESLOT_VALUES</name></expr></argument>,
									  <argument><expr><literal type="string">"v_innervalues"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>v_innernulls</name> <operator>=</operator> <call><name>l_load_struct_gep</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_innerslot</name></expr></argument>,
									 <argument><expr><name>FIELDNO_TUPLETABLESLOT_ISNULL</name></expr></argument>,
									 <argument><expr><literal type="string">"v_innernulls"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>v_outervalues</name> <operator>=</operator> <call><name>l_load_struct_gep</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_outerslot</name></expr></argument>,
									  <argument><expr><name>FIELDNO_TUPLETABLESLOT_VALUES</name></expr></argument>,
									  <argument><expr><literal type="string">"v_outervalues"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>v_outernulls</name> <operator>=</operator> <call><name>l_load_struct_gep</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_outerslot</name></expr></argument>,
									 <argument><expr><name>FIELDNO_TUPLETABLESLOT_ISNULL</name></expr></argument>,
									 <argument><expr><literal type="string">"v_outernulls"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>v_resultvalues</name> <operator>=</operator> <call><name>l_load_struct_gep</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_resultslot</name></expr></argument>,
									   <argument><expr><name>FIELDNO_TUPLETABLESLOT_VALUES</name></expr></argument>,
									   <argument><expr><literal type="string">"v_resultvalues"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>v_resultnulls</name> <operator>=</operator> <call><name>l_load_struct_gep</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_resultslot</name></expr></argument>,
									  <argument><expr><name>FIELDNO_TUPLETABLESLOT_ISNULL</name></expr></argument>,
									  <argument><expr><literal type="string">"v_resultnulls"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* aggvalues/aggnulls */</comment>
	<expr_stmt><expr><name>v_aggvalues</name> <operator>=</operator> <call><name>l_load_struct_gep</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_econtext</name></expr></argument>,
									<argument><expr><name>FIELDNO_EXPRCONTEXT_AGGVALUES</name></expr></argument>,
									<argument><expr><literal type="string">"v.econtext.aggvalues"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>v_aggnulls</name> <operator>=</operator> <call><name>l_load_struct_gep</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_econtext</name></expr></argument>,
								   <argument><expr><name>FIELDNO_EXPRCONTEXT_AGGNULLS</name></expr></argument>,
								   <argument><expr><literal type="string">"v.econtext.aggnulls"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* allocate blocks for each op upfront, so we can do jumps easily */</comment>
	<expr_stmt><expr><name>opblocks</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LLVMBasicBlockRef</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>state</name><operator>-&gt;</operator><name>steps_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>steps_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>opblocks</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>l_bb_append_v</name><argument_list>(<argument><expr><name>eval_fn</name></expr></argument>, <argument><expr><literal type="string">"b.op.%d.start"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<comment type="block">/* jump from entry to first block */</comment>
	<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>steps_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ExprEvalStep</name> <modifier>*</modifier></type><name>op</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ExprEvalOp</name></type>	<name>opcode</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_resvaluep</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_resnullp</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>LLVMPositionBuilderAtEnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>op</name> <operator>=</operator> <operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>steps</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>opcode</name> <operator>=</operator> <call><name>ExecEvalStepOp</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>v_resvaluep</name> <operator>=</operator> <call><name>l_ptr_const</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>resvalue</name></name></expr></argument>, <argument><expr><call><name>l_ptr</name><argument_list>(<argument><expr><name>TypeSizeT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>v_resnullp</name> <operator>=</operator> <call><name>l_ptr_const</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>resnull</name></name></expr></argument>, <argument><expr><call><name>l_ptr</name><argument_list>(<argument><expr><name>TypeStorageBool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<switch>switch <condition>(<expr><name>opcode</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>EEOP_DONE</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_tmpisnull</name></decl>,
								<decl><type ref="prev"/><name>v_tmpvalue</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>v_tmpvalue</name> <operator>=</operator> <call><name>LLVMBuildLoad</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_tmpvaluep</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_tmpisnull</name> <operator>=</operator> <call><name>LLVMBuildLoad</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_tmpisnullp</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_tmpisnull</name> <operator>=</operator>
						<call><name>LLVMBuildTrunc</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_tmpisnull</name></expr></argument>, <argument><expr><name>TypeParamBool</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_tmpisnull</name></expr></argument>, <argument><expr><name>v_isnullp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMBuildRet</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_tmpvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block>

			<case>case <expr><name>EEOP_INNER_FETCHSOME</name></expr>:</case>
			<case>case <expr><name>EEOP_OUTER_FETCHSOME</name></expr>:</case>
			<case>case <expr><name>EEOP_SCAN_FETCHSOME</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>desc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_slot</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMBasicBlockRef</name></type> <name>b_fetch</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_nvalid</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>b_fetch</name> <operator>=</operator> <call><name>l_bb_before_v</name><argument_list>(<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
											<argument><expr><literal type="string">"op.%d.fetch"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>fetch</name><operator>.</operator><name>known_desc</name></name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>desc</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>fetch</name><operator>.</operator><name>known_desc</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

					<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>EEOP_INNER_FETCHSOME</name></expr>)</condition>
					<block>{<block_content>
						<decl_stmt><decl><type><name>PlanState</name>  <modifier>*</modifier></type><name>is</name> <init>= <expr><call><name>innerPlanState</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

						<expr_stmt><expr><name>v_slot</name> <operator>=</operator> <name>v_innerslot</name></expr>;</expr_stmt>

						<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name> <operator>&amp;&amp;</operator>
							<name>is</name> <operator>&amp;&amp;</operator>
							<name><name>is</name><operator>-&gt;</operator><name>ps_ResultTupleSlot</name></name> <operator>&amp;&amp;</operator>
							<name><name>is</name><operator>-&gt;</operator><name>ps_ResultTupleSlot</name><operator>-&gt;</operator><name>tts_fixedTupleDescriptor</name></name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name>desc</name> <operator>=</operator> <name><name>is</name><operator>-&gt;</operator><name>ps_ResultTupleSlot</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
					</block_content>}</block></if>
					<if type="elseif">else if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>EEOP_OUTER_FETCHSOME</name></expr>)</condition>
					<block>{<block_content>
						<decl_stmt><decl><type><name>PlanState</name>  <modifier>*</modifier></type><name>os</name> <init>= <expr><call><name>outerPlanState</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

						<expr_stmt><expr><name>v_slot</name> <operator>=</operator> <name>v_outerslot</name></expr>;</expr_stmt>

						<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name> <operator>&amp;&amp;</operator>
							<name>os</name> <operator>&amp;&amp;</operator>
							<name><name>os</name><operator>-&gt;</operator><name>ps_ResultTupleSlot</name></name> <operator>&amp;&amp;</operator>
							<name><name>os</name><operator>-&gt;</operator><name>ps_ResultTupleSlot</name><operator>-&gt;</operator><name>tts_fixedTupleDescriptor</name></name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name>desc</name> <operator>=</operator> <name><name>os</name><operator>-&gt;</operator><name>ps_ResultTupleSlot</name><operator>-&gt;</operator><name>tts_tupleDescriptor</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
					</block_content>}</block></if>
					<else>else
					<block>{<block_content>
						<expr_stmt><expr><name>v_slot</name> <operator>=</operator> <name>v_scanslot</name></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name> <operator>&amp;&amp;</operator> <name>parent</name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name>desc</name> <operator>=</operator> <name><name>parent</name><operator>-&gt;</operator><name>scandesc</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
					</block_content>}</block></else></if_stmt>

					<comment type="block">/*
					 * Check if all required attributes are available, or
					 * whether deforming is required.
					 */</comment>
					<expr_stmt><expr><name>v_nvalid</name> <operator>=</operator>
						<call><name>l_load_struct_gep</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_slot</name></expr></argument>,
										  <argument><expr><name>FIELDNO_TUPLETABLESLOT_NVALID</name></expr></argument>,
										  <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildCondBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
									<argument><expr><call><name>LLVMBuildICmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>LLVMIntUGE</name></expr></argument>, <argument><expr><name>v_nvalid</name></expr></argument>,
												  <argument><expr><call><name>l_int32_const</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>fetch</name><operator>.</operator><name>last_var</name></name></expr></argument>)</argument_list></call></expr></argument>,
												  <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>b_fetch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMPositionBuilderAtEnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_fetch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/*
					 * If the tupledesc of the to-be-deformed tuple is known,
					 * and JITing of deforming is enabled, build deform
					 * function specific to tupledesc and the exact number of
					 * to-be-extracted attributes.
					 */</comment>
					<if_stmt><if>if <condition>(<expr><name>desc</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>PGJIT_DEFORM</name><operator>)</operator></expr>)</condition>
					<block>{<block_content>
						<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>l_jit_deform</name></decl>;</decl_stmt>

						<expr_stmt><expr><name>l_jit_deform</name> <operator>=</operator>
							<call><name>slot_compile_deform</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>,
												<argument><expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>fetch</name><operator>.</operator><name>last_var</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>v_slot</name></expr>;</expr_stmt>

						<expr_stmt><expr><call><name>LLVMBuildCall</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>l_jit_deform</name></expr></argument>,
									  <argument><expr><name>params</name></expr></argument>, <argument><expr><call><name>lengthof</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					</block_content>}</block></if>
					<else>else
					<block>{<block_content>
						<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

						<expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>v_slot</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>l_int32_const</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>fetch</name><operator>.</operator><name>last_var</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><call><name>LLVMBuildCall</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
									  <argument><expr><call><name>llvm_get_decl</name><argument_list>(<argument><expr><name>mod</name></expr></argument>, <argument><expr><name>FuncSlotGetsomeattrs</name></expr></argument>)</argument_list></call></expr></argument>,
									  <argument><expr><name>params</name></expr></argument>, <argument><expr><call><name>lengthof</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></else></if_stmt>

					<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block>

			<case>case <expr><name>EEOP_INNER_VAR</name></expr>:</case>
			<case>case <expr><name>EEOP_OUTER_VAR</name></expr>:</case>
			<case>case <expr><name>EEOP_SCAN_VAR</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>value</name></decl>,
								<decl><type ref="prev"/><name>isnull</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_attnum</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_values</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_nulls</name></decl>;</decl_stmt>

					<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>EEOP_INNER_VAR</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name>v_values</name> <operator>=</operator> <name>v_innervalues</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>v_nulls</name> <operator>=</operator> <name>v_innernulls</name></expr>;</expr_stmt>
					</block_content>}</block></if>
					<if type="elseif">else if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>EEOP_OUTER_VAR</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name>v_values</name> <operator>=</operator> <name>v_outervalues</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>v_nulls</name> <operator>=</operator> <name>v_outernulls</name></expr>;</expr_stmt>
					</block_content>}</block></if>
					<else>else
					<block>{<block_content>
						<expr_stmt><expr><name>v_values</name> <operator>=</operator> <name>v_scanvalues</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>v_nulls</name> <operator>=</operator> <name>v_scannulls</name></expr>;</expr_stmt>
					</block_content>}</block></else></if_stmt>

					<expr_stmt><expr><name>v_attnum</name> <operator>=</operator> <call><name>l_int32_const</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>var</name><operator>.</operator><name>attnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>l_load_gep1</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_values</name></expr></argument>, <argument><expr><name>v_attnum</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>isnull</name> <operator>=</operator> <call><name>l_load_gep1</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_nulls</name></expr></argument>, <argument><expr><name>v_attnum</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>v_resvaluep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>isnull</name></expr></argument>, <argument><expr><name>v_resnullp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block>

			<case>case <expr><name>EEOP_INNER_SYSVAR</name></expr>:</case>
			<case>case <expr><name>EEOP_OUTER_SYSVAR</name></expr>:</case>
			<case>case <expr><name>EEOP_SCAN_SYSVAR</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>int</name></type>			<name>attnum</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>var</name><operator>.</operator><name>attnum</name></name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_attnum</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_tuple</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_tupleDescriptor</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name><name>v_params</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_syscol</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_slot</name></decl>;</decl_stmt>

					<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>EEOP_INNER_SYSVAR</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>v_slot</name> <operator>=</operator> <name>v_innerslot</name></expr>;</expr_stmt></block_content></block></if>
					<if type="elseif">else if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>EEOP_OUTER_SYSVAR</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>v_slot</name> <operator>=</operator> <name>v_outerslot</name></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><name>v_slot</name> <operator>=</operator> <name>v_scanslot</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

					<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>var</name><operator>.</operator><name>attnum</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>v_tuple</name> <operator>=</operator> <call><name>l_load_struct_gep</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_slot</name></expr></argument>,
												<argument><expr><name>FIELDNO_TUPLETABLESLOT_TUPLE</name></expr></argument>,
												<argument><expr><literal type="string">"v.tuple"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/*
					 * Could optimize this a bit for fixed descriptors, but
					 * this shouldn't be that critical a path.
					 */</comment>
					<expr_stmt><expr><name>v_tupleDescriptor</name> <operator>=</operator>
						<call><name>l_load_struct_gep</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_slot</name></expr></argument>,
										  <argument><expr><name>FIELDNO_TUPLETABLESLOT_TUPLEDESCRIPTOR</name></expr></argument>,
										  <argument><expr><literal type="string">"v.tupledesc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_attnum</name> <operator>=</operator> <call><name>l_int32_const</name><argument_list>(<argument><expr><name>attnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name><name>v_params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>v_tuple</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>v_params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>v_attnum</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>v_params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>v_tupleDescriptor</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>v_params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>v_resnullp</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_syscol</name> <operator>=</operator> <call><name>LLVMBuildCall</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
											 <argument><expr><call><name>llvm_get_decl</name><argument_list>(<argument><expr><name>mod</name></expr></argument>, <argument><expr><name>FuncHeapGetsysattr</name></expr></argument>)</argument_list></call></expr></argument>,
											 <argument><expr><name>v_params</name></expr></argument>, <argument><expr><call><name>lengthof</name><argument_list>(<argument><expr><name>v_params</name></expr></argument>)</argument_list></call></expr></argument>,
											 <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_syscol</name></expr></argument>, <argument><expr><name>v_resvaluep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block>

			<case>case <expr><name>EEOP_WHOLEROW</name></expr>:</case>
				<expr_stmt><expr><call><name>build_EvalXFunc</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><literal type="string">"ExecEvalWholeRowVar"</literal></expr></argument>,
								<argument><expr><name>v_state</name></expr></argument>, <argument><expr><name>v_econtext</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>EEOP_ASSIGN_INNER_VAR</name></expr>:</case>
			<case>case <expr><name>EEOP_ASSIGN_OUTER_VAR</name></expr>:</case>
			<case>case <expr><name>EEOP_ASSIGN_SCAN_VAR</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_value</name></decl>,
								<decl><type ref="prev"/><name>v_isnull</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_rvaluep</name></decl>,
								<decl><type ref="prev"/><name>v_risnullp</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_attnum</name></decl>,
								<decl><type ref="prev"/><name>v_resultnum</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_values</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_nulls</name></decl>;</decl_stmt>

					<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>EEOP_ASSIGN_INNER_VAR</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name>v_values</name> <operator>=</operator> <name>v_innervalues</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>v_nulls</name> <operator>=</operator> <name>v_innernulls</name></expr>;</expr_stmt>
					</block_content>}</block></if>
					<if type="elseif">else if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>EEOP_ASSIGN_OUTER_VAR</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name>v_values</name> <operator>=</operator> <name>v_outervalues</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>v_nulls</name> <operator>=</operator> <name>v_outernulls</name></expr>;</expr_stmt>
					</block_content>}</block></if>
					<else>else
					<block>{<block_content>
						<expr_stmt><expr><name>v_values</name> <operator>=</operator> <name>v_scanvalues</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>v_nulls</name> <operator>=</operator> <name>v_scannulls</name></expr>;</expr_stmt>
					</block_content>}</block></else></if_stmt>

					<comment type="block">/* load data */</comment>
					<expr_stmt><expr><name>v_attnum</name> <operator>=</operator> <call><name>l_int32_const</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>assign_var</name><operator>.</operator><name>attnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_value</name> <operator>=</operator> <call><name>l_load_gep1</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_values</name></expr></argument>, <argument><expr><name>v_attnum</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_isnull</name> <operator>=</operator> <call><name>l_load_gep1</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_nulls</name></expr></argument>, <argument><expr><name>v_attnum</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* compute addresses of targets */</comment>
					<expr_stmt><expr><name>v_resultnum</name> <operator>=</operator> <call><name>l_int32_const</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>assign_var</name><operator>.</operator><name>resultnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_rvaluep</name> <operator>=</operator> <call><name>LLVMBuildGEP</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_resultvalues</name></expr></argument>,
											 <argument><expr><operator>&amp;</operator><name>v_resultnum</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_risnullp</name> <operator>=</operator> <call><name>LLVMBuildGEP</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_resultnulls</name></expr></argument>,
											  <argument><expr><operator>&amp;</operator><name>v_resultnum</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* and store */</comment>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_value</name></expr></argument>, <argument><expr><name>v_rvaluep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_isnull</name></expr></argument>, <argument><expr><name>v_risnullp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block>

			<case>case <expr><name>EEOP_ASSIGN_TMP</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_value</name></decl>,
								<decl><type ref="prev"/><name>v_isnull</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_rvaluep</name></decl>,
								<decl><type ref="prev"/><name>v_risnullp</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_resultnum</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>size_t</name></type>		<name>resultnum</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>assign_tmp</name><operator>.</operator><name>resultnum</name></name></expr></init></decl>;</decl_stmt>

					<comment type="block">/* load data */</comment>
					<expr_stmt><expr><name>v_value</name> <operator>=</operator> <call><name>LLVMBuildLoad</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_tmpvaluep</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_isnull</name> <operator>=</operator> <call><name>LLVMBuildLoad</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_tmpisnullp</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* compute addresses of targets */</comment>
					<expr_stmt><expr><name>v_resultnum</name> <operator>=</operator> <call><name>l_int32_const</name><argument_list>(<argument><expr><name>resultnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_rvaluep</name> <operator>=</operator>
						<call><name>LLVMBuildGEP</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_resultvalues</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v_resultnum</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_risnullp</name> <operator>=</operator>
						<call><name>LLVMBuildGEP</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_resultnulls</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v_resultnum</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* and store */</comment>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_value</name></expr></argument>, <argument><expr><name>v_rvaluep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_isnull</name></expr></argument>, <argument><expr><name>v_risnullp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block>

			<case>case <expr><name>EEOP_ASSIGN_TMP_MAKE_RO</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>LLVMBasicBlockRef</name></type> <name>b_notnull</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name><name>v_params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_ret</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_value</name></decl>,
								<decl><type ref="prev"/><name>v_isnull</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_rvaluep</name></decl>,
								<decl><type ref="prev"/><name>v_risnullp</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_resultnum</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>size_t</name></type>		<name>resultnum</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>assign_tmp</name><operator>.</operator><name>resultnum</name></name></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><name>b_notnull</name> <operator>=</operator> <call><name>l_bb_before_v</name><argument_list>(<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
											  <argument><expr><literal type="string">"op.%d.assign_tmp.notnull"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* load data */</comment>
					<expr_stmt><expr><name>v_value</name> <operator>=</operator> <call><name>LLVMBuildLoad</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_tmpvaluep</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_isnull</name> <operator>=</operator> <call><name>LLVMBuildLoad</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_tmpisnullp</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* compute addresses of targets */</comment>
					<expr_stmt><expr><name>v_resultnum</name> <operator>=</operator> <call><name>l_int32_const</name><argument_list>(<argument><expr><name>resultnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_rvaluep</name> <operator>=</operator> <call><name>LLVMBuildGEP</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_resultvalues</name></expr></argument>,
											 <argument><expr><operator>&amp;</operator><name>v_resultnum</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_risnullp</name> <operator>=</operator> <call><name>LLVMBuildGEP</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_resultnulls</name></expr></argument>,
											  <argument><expr><operator>&amp;</operator><name>v_resultnum</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* store nullness */</comment>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_isnull</name></expr></argument>, <argument><expr><name>v_risnullp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* check if value is NULL */</comment>
					<expr_stmt><expr><call><name>LLVMBuildCondBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
									<argument><expr><call><name>LLVMBuildICmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>LLVMIntEQ</name></expr></argument>, <argument><expr><name>v_isnull</name></expr></argument>,
												  <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><name>b_notnull</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* if value is not null, convert to RO datum */</comment>
					<expr_stmt><expr><call><name>LLVMPositionBuilderAtEnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_notnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>v_params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>v_value</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_ret</name> <operator>=</operator>
						<call><name>LLVMBuildCall</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
									  <argument><expr><call><name>llvm_get_decl</name><argument_list>(<argument><expr><name>mod</name></expr></argument>, <argument><expr><name>FuncMakeExpandedObjectReadOnlyInternal</name></expr></argument>)</argument_list></call></expr></argument>,
									  <argument><expr><name>v_params</name></expr></argument>, <argument><expr><call><name>lengthof</name><argument_list>(<argument><expr><name>v_params</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* store value */</comment>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_ret</name></expr></argument>, <argument><expr><name>v_rvaluep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block>

			<case>case <expr><name>EEOP_CONST</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_constvalue</name></decl>,
								<decl><type ref="prev"/><name>v_constnull</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>v_constvalue</name> <operator>=</operator> <call><name>l_sizet_const</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>constval</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_constnull</name> <operator>=</operator> <call><name>l_sbool_const</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>constval</name><operator>.</operator><name>isnull</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_constvalue</name></expr></argument>, <argument><expr><name>v_resvaluep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_constnull</name></expr></argument>, <argument><expr><name>v_resnullp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block>

			<case>case <expr><name>EEOP_FUNCEXPR_STRICT</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>FunctionCallInfo</name></type> <name>fcinfo</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>func</name><operator>.</operator><name>fcinfo_data</name></name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMBasicBlockRef</name></type> <name>b_nonull</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type>			<name>argno</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_fcinfo</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_argnullp</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMBasicBlockRef</name> <modifier>*</modifier></type><name>b_checkargnulls</name></decl>;</decl_stmt>

					<comment type="block">/*
					 * Block for the actual function call, if args are
					 * non-NULL.
					 */</comment>
					<expr_stmt><expr><name>b_nonull</name> <operator>=</operator> <call><name>l_bb_before_v</name><argument_list>(<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
											 <argument><expr><literal type="string">"b.%d.no-null-args"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* should make sure they're optimized beforehand */</comment>
					<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>func</name><operator>.</operator><name>nargs</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"argumentless strict functions are pointless"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

					<expr_stmt><expr><name>v_fcinfo</name> <operator>=</operator>
						<call><name>l_ptr_const</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><call><name>l_ptr</name><argument_list>(<argument><expr><name>StructFunctionCallInfoData</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>v_argnullp</name> <operator>=</operator>
						<call><name>LLVMBuildStructGEP</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
										   <argument><expr><name>v_fcinfo</name></expr></argument>,
										   <argument><expr><name>FIELDNO_FUNCTIONCALLINFODATA_ARGNULL</name></expr></argument>,
										   <argument><expr><literal type="string">"v_argnullp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/*
					 * set resnull to true, if the function is actually
					 * called, it'll be reset
					 */</comment>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v_resnullp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* create blocks for checking args, one for each */</comment>
					<expr_stmt><expr><name>b_checkargnulls</name> <operator>=</operator>
						<call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LLVMBasicBlockRef</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>func</name><operator>.</operator><name>nargs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<for>for <control>(<init><expr><name>argno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>argno</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>func</name><operator>.</operator><name>nargs</name></name></expr>;</condition> <incr><expr><name>argno</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
						<expr_stmt><expr><name><name>b_checkargnulls</name><index>[<expr><name>argno</name></expr>]</index></name> <operator>=</operator>
							<call><name>l_bb_before_v</name><argument_list>(<argument><expr><name>b_nonull</name></expr></argument>, <argument><expr><literal type="string">"b.%d.isnull.%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>argno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

					<comment type="block">/* jump to check of first argument */</comment>
					<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>b_checkargnulls</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* check each arg for NULLness */</comment>
					<for>for <control>(<init><expr><name>argno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>argno</name> <operator>&lt;</operator> <name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>func</name><operator>.</operator><name>nargs</name></name></expr>;</condition> <incr><expr><name>argno</name><operator>++</operator></expr></incr>)</control>
					<block>{<block_content>
						<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_argisnull</name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>LLVMBasicBlockRef</name></type> <name>b_argnotnull</name></decl>;</decl_stmt>

						<expr_stmt><expr><call><name>LLVMPositionBuilderAtEnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>b_checkargnulls</name><index>[<expr><name>argno</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<comment type="block">/* compute block to jump to if argument is not null */</comment>
						<if_stmt><if>if <condition>(<expr><name>argno</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>func</name><operator>.</operator><name>nargs</name></name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name>b_argnotnull</name> <operator>=</operator> <name>b_nonull</name></expr>;</expr_stmt></block_content></block></if>
						<else>else<block type="pseudo"><block_content>
							<expr_stmt><expr><name>b_argnotnull</name> <operator>=</operator> <name><name>b_checkargnulls</name><index>[<expr><name>argno</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

						<comment type="block">/* and finally load &amp; check NULLness of arg */</comment>
						<expr_stmt><expr><name>v_argisnull</name> <operator>=</operator> <call><name>l_load_struct_gep</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_argnullp</name></expr></argument>,
														<argument><expr><name>argno</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>LLVMBuildCondBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
										<argument><expr><call><name>LLVMBuildICmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>LLVMIntEQ</name></expr></argument>,
													  <argument><expr><name>v_argisnull</name></expr></argument>,
													  <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
													  <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
										<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
										<argument><expr><name>b_argnotnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></for>

					<expr_stmt><expr><call><name>LLVMPositionBuilderAtEnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_nonull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block>
				<comment type="block">/* FALLTHROUGH */</comment>

			<case>case <expr><name>EEOP_FUNCEXPR</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>FunctionCallInfo</name></type> <name>fcinfo</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>func</name><operator>.</operator><name>fcinfo_data</name></name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_fcinfo_isnull</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_retval</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>v_retval</name> <operator>=</operator> <call><name>BuildV1Call</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><name>fcinfo</name></expr></argument>,
										   <argument><expr><operator>&amp;</operator><name>v_fcinfo_isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_retval</name></expr></argument>, <argument><expr><name>v_resvaluep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_fcinfo_isnull</name></expr></argument>, <argument><expr><name>v_resnullp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block>

			<case>case <expr><name>EEOP_FUNCEXPR_FUSAGE</name></expr>:</case>
				<expr_stmt><expr><call><name>build_EvalXFunc</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><literal type="string">"ExecEvalFuncExprFusage"</literal></expr></argument>,
								<argument><expr><name>v_state</name></expr></argument>, <argument><expr><name>v_econtext</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>


			<case>case <expr><name>EEOP_FUNCEXPR_STRICT_FUSAGE</name></expr>:</case>
				<expr_stmt><expr><call><name>build_EvalXFunc</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><literal type="string">"ExecEvalFuncExprStrictFusage"</literal></expr></argument>,
								<argument><expr><name>v_state</name></expr></argument>, <argument><expr><name>v_econtext</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>EEOP_BOOL_AND_STEP_FIRST</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_boolanynullp</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>v_boolanynullp</name> <operator>=</operator> <call><name>l_ptr_const</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>boolexpr</name><operator>.</operator><name>anynull</name></name></expr></argument>,
												 <argument><expr><call><name>l_ptr</name><argument_list>(<argument><expr><name>TypeStorageBool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v_boolanynullp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				</block_content>}</block>
				<comment type="block">/* FALLTHROUGH */</comment>

				<comment type="block">/*
				 * Treat them the same for now, optimizer can remove
				 * redundancy. Could be worthwhile to optimize during emission
				 * though.
				 */</comment>
			<case>case <expr><name>EEOP_BOOL_AND_STEP_LAST</name></expr>:</case>
			<case>case <expr><name>EEOP_BOOL_AND_STEP</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_boolvalue</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_boolnull</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_boolanynullp</name></decl>,
								<decl><type ref="prev"/><name>v_boolanynull</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMBasicBlockRef</name></type> <name>b_boolisnull</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMBasicBlockRef</name></type> <name>b_boolcheckfalse</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMBasicBlockRef</name></type> <name>b_boolisfalse</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMBasicBlockRef</name></type> <name>b_boolcont</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMBasicBlockRef</name></type> <name>b_boolisanynull</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>b_boolisnull</name> <operator>=</operator> <call><name>l_bb_before_v</name><argument_list>(<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
												 <argument><expr><literal type="string">"b.%d.boolisnull"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>b_boolcheckfalse</name> <operator>=</operator> <call><name>l_bb_before_v</name><argument_list>(<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
													 <argument><expr><literal type="string">"b.%d.boolcheckfalse"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>b_boolisfalse</name> <operator>=</operator> <call><name>l_bb_before_v</name><argument_list>(<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
												  <argument><expr><literal type="string">"b.%d.boolisfalse"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>b_boolisanynull</name> <operator>=</operator> <call><name>l_bb_before_v</name><argument_list>(<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
													<argument><expr><literal type="string">"b.%d.boolisanynull"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>b_boolcont</name> <operator>=</operator> <call><name>l_bb_before_v</name><argument_list>(<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
											   <argument><expr><literal type="string">"b.%d.boolcont"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>v_boolanynullp</name> <operator>=</operator> <call><name>l_ptr_const</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>boolexpr</name><operator>.</operator><name>anynull</name></name></expr></argument>,
												 <argument><expr><call><name>l_ptr</name><argument_list>(<argument><expr><name>TypeStorageBool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>v_boolnull</name> <operator>=</operator> <call><name>LLVMBuildLoad</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_resnullp</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_boolvalue</name> <operator>=</operator> <call><name>LLVMBuildLoad</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_resvaluep</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* set resnull to boolnull */</comment>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_boolnull</name></expr></argument>, <argument><expr><name>v_resnullp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="block">/* set revalue to boolvalue */</comment>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_boolvalue</name></expr></argument>, <argument><expr><name>v_resvaluep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* check if current input is NULL */</comment>
					<expr_stmt><expr><call><name>LLVMBuildCondBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
									<argument><expr><call><name>LLVMBuildICmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>LLVMIntEQ</name></expr></argument>, <argument><expr><name>v_boolnull</name></expr></argument>,
												  <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><name>b_boolisnull</name></expr></argument>,
									<argument><expr><name>b_boolcheckfalse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* build block that sets anynull */</comment>
					<expr_stmt><expr><call><name>LLVMPositionBuilderAtEnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_boolisnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="block">/* set boolanynull to true */</comment>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v_boolanynullp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="block">/* and jump to next block */</comment>
					<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_boolcont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* build block checking for false */</comment>
					<expr_stmt><expr><call><name>LLVMPositionBuilderAtEnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_boolcheckfalse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildCondBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
									<argument><expr><call><name>LLVMBuildICmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>LLVMIntEQ</name></expr></argument>, <argument><expr><name>v_boolvalue</name></expr></argument>,
												  <argument><expr><call><name>l_sizet_const</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><name>b_boolisfalse</name></expr></argument>,
									<argument><expr><name>b_boolcont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/*
					 * Build block handling FALSE. Value is false, so short
					 * circuit.
					 */</comment>
					<expr_stmt><expr><call><name>LLVMPositionBuilderAtEnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_boolisfalse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="block">/* result is already set to FALSE, need not change it */</comment>
					<comment type="block">/* and jump to the end of the AND expression */</comment>
					<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>boolexpr</name><operator>.</operator><name>jumpdone</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* Build block that continues if bool is TRUE. */</comment>
					<expr_stmt><expr><call><name>LLVMPositionBuilderAtEnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_boolcont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>v_boolanynull</name> <operator>=</operator> <call><name>LLVMBuildLoad</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_boolanynullp</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* set value to NULL if any previous values were NULL */</comment>
					<expr_stmt><expr><call><name>LLVMBuildCondBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
									<argument><expr><call><name>LLVMBuildICmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>LLVMIntEQ</name></expr></argument>, <argument><expr><name>v_boolanynull</name></expr></argument>,
												  <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>b_boolisanynull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMPositionBuilderAtEnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_boolisanynull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="block">/* set resnull to true */</comment>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v_resnullp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="block">/* reset resvalue */</comment>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>l_sizet_const</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v_resvaluep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block>
			<case>case <expr><name>EEOP_BOOL_OR_STEP_FIRST</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_boolanynullp</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>v_boolanynullp</name> <operator>=</operator> <call><name>l_ptr_const</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>boolexpr</name><operator>.</operator><name>anynull</name></name></expr></argument>,
												 <argument><expr><call><name>l_ptr</name><argument_list>(<argument><expr><name>TypeStorageBool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v_boolanynullp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block>
				<comment type="block">/* FALLTHROUGH */</comment>

				<comment type="block">/*
				 * Treat them the same for now, optimizer can remove
				 * redundancy. Could be worthwhile to optimize during emission
				 * though.
				 */</comment>
			<case>case <expr><name>EEOP_BOOL_OR_STEP_LAST</name></expr>:</case>
			<case>case <expr><name>EEOP_BOOL_OR_STEP</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_boolvalue</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_boolnull</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_boolanynullp</name></decl>,
								<decl><type ref="prev"/><name>v_boolanynull</name></decl>;</decl_stmt>

					<decl_stmt><decl><type><name>LLVMBasicBlockRef</name></type> <name>b_boolisnull</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMBasicBlockRef</name></type> <name>b_boolchecktrue</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMBasicBlockRef</name></type> <name>b_boolistrue</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMBasicBlockRef</name></type> <name>b_boolcont</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMBasicBlockRef</name></type> <name>b_boolisanynull</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>b_boolisnull</name> <operator>=</operator> <call><name>l_bb_before_v</name><argument_list>(<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
												 <argument><expr><literal type="string">"b.%d.boolisnull"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>b_boolchecktrue</name> <operator>=</operator> <call><name>l_bb_before_v</name><argument_list>(<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
													<argument><expr><literal type="string">"b.%d.boolchecktrue"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>b_boolistrue</name> <operator>=</operator> <call><name>l_bb_before_v</name><argument_list>(<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
												 <argument><expr><literal type="string">"b.%d.boolistrue"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>b_boolisanynull</name> <operator>=</operator> <call><name>l_bb_before_v</name><argument_list>(<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
													<argument><expr><literal type="string">"b.%d.boolisanynull"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>b_boolcont</name> <operator>=</operator> <call><name>l_bb_before_v</name><argument_list>(<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
											   <argument><expr><literal type="string">"b.%d.boolcont"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>v_boolanynullp</name> <operator>=</operator> <call><name>l_ptr_const</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>boolexpr</name><operator>.</operator><name>anynull</name></name></expr></argument>,
												 <argument><expr><call><name>l_ptr</name><argument_list>(<argument><expr><name>TypeStorageBool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>v_boolnull</name> <operator>=</operator> <call><name>LLVMBuildLoad</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_resnullp</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_boolvalue</name> <operator>=</operator> <call><name>LLVMBuildLoad</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_resvaluep</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* set resnull to boolnull */</comment>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_boolnull</name></expr></argument>, <argument><expr><name>v_resnullp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="block">/* set revalue to boolvalue */</comment>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_boolvalue</name></expr></argument>, <argument><expr><name>v_resvaluep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMBuildCondBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
									<argument><expr><call><name>LLVMBuildICmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>LLVMIntEQ</name></expr></argument>, <argument><expr><name>v_boolnull</name></expr></argument>,
												  <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><name>b_boolisnull</name></expr></argument>,
									<argument><expr><name>b_boolchecktrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* build block that sets anynull */</comment>
					<expr_stmt><expr><call><name>LLVMPositionBuilderAtEnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_boolisnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="block">/* set boolanynull to true */</comment>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v_boolanynullp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="block">/* and jump to next block */</comment>
					<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_boolcont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* build block checking for true */</comment>
					<expr_stmt><expr><call><name>LLVMPositionBuilderAtEnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_boolchecktrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildCondBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
									<argument><expr><call><name>LLVMBuildICmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>LLVMIntEQ</name></expr></argument>, <argument><expr><name>v_boolvalue</name></expr></argument>,
												  <argument><expr><call><name>l_sizet_const</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><name>b_boolistrue</name></expr></argument>,
									<argument><expr><name>b_boolcont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/*
					 * Build block handling True. Value is true, so short
					 * circuit.
					 */</comment>
					<expr_stmt><expr><call><name>LLVMPositionBuilderAtEnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_boolistrue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="block">/* result is already set to TRUE, need not change it */</comment>
					<comment type="block">/* and jump to the end of the OR expression */</comment>
					<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>boolexpr</name><operator>.</operator><name>jumpdone</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* build block that continues if bool is FALSE */</comment>
					<expr_stmt><expr><call><name>LLVMPositionBuilderAtEnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_boolcont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>v_boolanynull</name> <operator>=</operator> <call><name>LLVMBuildLoad</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_boolanynullp</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* set value to NULL if any previous values were NULL */</comment>
					<expr_stmt><expr><call><name>LLVMBuildCondBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
									<argument><expr><call><name>LLVMBuildICmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>LLVMIntEQ</name></expr></argument>, <argument><expr><name>v_boolanynull</name></expr></argument>,
												  <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>b_boolisanynull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMPositionBuilderAtEnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_boolisanynull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="block">/* set resnull to true */</comment>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v_resnullp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="block">/* reset resvalue */</comment>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>l_sizet_const</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v_resvaluep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block>

			<case>case <expr><name>EEOP_BOOL_NOT_STEP</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_boolvalue</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_boolnull</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_negbool</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>v_boolnull</name> <operator>=</operator> <call><name>LLVMBuildLoad</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_resnullp</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_boolvalue</name> <operator>=</operator> <call><name>LLVMBuildLoad</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_resvaluep</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>v_negbool</name> <operator>=</operator> <call><name>LLVMBuildZExt</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
											  <argument><expr><call><name>LLVMBuildICmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>LLVMIntEQ</name></expr></argument>,
															<argument><expr><name>v_boolvalue</name></expr></argument>,
															<argument><expr><call><name>l_sizet_const</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
															<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
											  <argument><expr><name>TypeSizeT</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="block">/* set resnull to boolnull */</comment>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_boolnull</name></expr></argument>, <argument><expr><name>v_resnullp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="block">/* set revalue to !boolvalue */</comment>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_negbool</name></expr></argument>, <argument><expr><name>v_resvaluep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block>

			<case>case <expr><name>EEOP_QUAL</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_resnull</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_resvalue</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_nullorfalse</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMBasicBlockRef</name></type> <name>b_qualfail</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>b_qualfail</name> <operator>=</operator> <call><name>l_bb_before_v</name><argument_list>(<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
											   <argument><expr><literal type="string">"op.%d.qualfail"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>v_resvalue</name> <operator>=</operator> <call><name>LLVMBuildLoad</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_resvaluep</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_resnull</name> <operator>=</operator> <call><name>LLVMBuildLoad</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_resnullp</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>v_nullorfalse</name> <operator>=</operator>
						<call><name>LLVMBuildOr</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
									<argument><expr><call><name>LLVMBuildICmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>LLVMIntEQ</name></expr></argument>, <argument><expr><name>v_resnull</name></expr></argument>,
												  <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><call><name>LLVMBuildICmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>LLVMIntEQ</name></expr></argument>, <argument><expr><name>v_resvalue</name></expr></argument>,
												  <argument><expr><call><name>l_sizet_const</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMBuildCondBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
									<argument><expr><name>v_nullorfalse</name></expr></argument>,
									<argument><expr><name>b_qualfail</name></expr></argument>,
									<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* build block handling NULL or false */</comment>
					<expr_stmt><expr><call><name>LLVMPositionBuilderAtEnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_qualfail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="block">/* set resnull to false */</comment>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v_resnullp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="block">/* set resvalue to false */</comment>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>l_sizet_const</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v_resvaluep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="block">/* and jump out */</comment>
					<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>qualexpr</name><operator>.</operator><name>jumpdone</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block>

			<case>case <expr><name>EEOP_JUMP</name></expr>:</case>
				<block>{<block_content>
					<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>jump</name><operator>.</operator><name>jumpdone</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block>

			<case>case <expr><name>EEOP_JUMP_IF_NULL</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_resnull</name></decl>;</decl_stmt>

					<comment type="block">/* Transfer control if current result is null */</comment>

					<expr_stmt><expr><name>v_resnull</name> <operator>=</operator> <call><name>LLVMBuildLoad</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_resnullp</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMBuildCondBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
									<argument><expr><call><name>LLVMBuildICmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>LLVMIntEQ</name></expr></argument>, <argument><expr><name>v_resnull</name></expr></argument>,
												  <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><name><name>opblocks</name><index>[<expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>jump</name><operator>.</operator><name>jumpdone</name></name></expr>]</index></name></expr></argument>,
									<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block>

			<case>case <expr><name>EEOP_JUMP_IF_NOT_NULL</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_resnull</name></decl>;</decl_stmt>

					<comment type="block">/* Transfer control if current result is non-null */</comment>

					<expr_stmt><expr><name>v_resnull</name> <operator>=</operator> <call><name>LLVMBuildLoad</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_resnullp</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMBuildCondBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
									<argument><expr><call><name>LLVMBuildICmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>LLVMIntEQ</name></expr></argument>, <argument><expr><name>v_resnull</name></expr></argument>,
												  <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><name><name>opblocks</name><index>[<expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>jump</name><operator>.</operator><name>jumpdone</name></name></expr>]</index></name></expr></argument>,
									<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block>


			<case>case <expr><name>EEOP_JUMP_IF_NOT_TRUE</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_resnull</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_resvalue</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_nullorfalse</name></decl>;</decl_stmt>

					<comment type="block">/* Transfer control if current result is null or false */</comment>

					<expr_stmt><expr><name>v_resvalue</name> <operator>=</operator> <call><name>LLVMBuildLoad</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_resvaluep</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_resnull</name> <operator>=</operator> <call><name>LLVMBuildLoad</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_resnullp</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>v_nullorfalse</name> <operator>=</operator>
						<call><name>LLVMBuildOr</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
									<argument><expr><call><name>LLVMBuildICmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>LLVMIntEQ</name></expr></argument>, <argument><expr><name>v_resnull</name></expr></argument>,
												  <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><call><name>LLVMBuildICmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>LLVMIntEQ</name></expr></argument>, <argument><expr><name>v_resvalue</name></expr></argument>,
												  <argument><expr><call><name>l_sizet_const</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMBuildCondBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
									<argument><expr><name>v_nullorfalse</name></expr></argument>,
									<argument><expr><name><name>opblocks</name><index>[<expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>jump</name><operator>.</operator><name>jumpdone</name></name></expr>]</index></name></expr></argument>,
									<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block>

			<case>case <expr><name>EEOP_NULLTEST_ISNULL</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_resnull</name> <init>= <expr><call><name>LLVMBuildLoad</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_resnullp</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_resvalue</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>v_resvalue</name> <operator>=</operator>
						<call><name>LLVMBuildSelect</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
										<argument><expr><call><name>LLVMBuildICmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>LLVMIntEQ</name></expr></argument>, <argument><expr><name>v_resnull</name></expr></argument>,
													  <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
										<argument><expr><call><name>l_sizet_const</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
										<argument><expr><call><name>l_sizet_const</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
										<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_resvalue</name></expr></argument>, <argument><expr><name>v_resvaluep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v_resnullp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block>

			<case>case <expr><name>EEOP_NULLTEST_ISNOTNULL</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_resnull</name> <init>= <expr><call><name>LLVMBuildLoad</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_resnullp</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_resvalue</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>v_resvalue</name> <operator>=</operator>
						<call><name>LLVMBuildSelect</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
										<argument><expr><call><name>LLVMBuildICmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>LLVMIntEQ</name></expr></argument>, <argument><expr><name>v_resnull</name></expr></argument>,
													  <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
										<argument><expr><call><name>l_sizet_const</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
										<argument><expr><call><name>l_sizet_const</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
										<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_resvalue</name></expr></argument>, <argument><expr><name>v_resvaluep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v_resnullp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block>

			<case>case <expr><name>EEOP_NULLTEST_ROWISNULL</name></expr>:</case>
				<expr_stmt><expr><call><name>build_EvalXFunc</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><literal type="string">"ExecEvalRowNull"</literal></expr></argument>,
								<argument><expr><name>v_state</name></expr></argument>, <argument><expr><name>v_econtext</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>EEOP_NULLTEST_ROWISNOTNULL</name></expr>:</case>
				<expr_stmt><expr><call><name>build_EvalXFunc</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><literal type="string">"ExecEvalRowNotNull"</literal></expr></argument>,
								<argument><expr><name>v_state</name></expr></argument>, <argument><expr><name>v_econtext</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>EEOP_BOOLTEST_IS_TRUE</name></expr>:</case>
			<case>case <expr><name>EEOP_BOOLTEST_IS_NOT_FALSE</name></expr>:</case>
			<case>case <expr><name>EEOP_BOOLTEST_IS_FALSE</name></expr>:</case>
			<case>case <expr><name>EEOP_BOOLTEST_IS_NOT_TRUE</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>LLVMBasicBlockRef</name></type> <name>b_isnull</name></decl>,
								<decl><type ref="prev"/><name>b_notnull</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_resnull</name> <init>= <expr><call><name>LLVMBuildLoad</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_resnullp</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><name>b_isnull</name> <operator>=</operator> <call><name>l_bb_before_v</name><argument_list>(<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
											 <argument><expr><literal type="string">"op.%d.isnull"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>b_notnull</name> <operator>=</operator> <call><name>l_bb_before_v</name><argument_list>(<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
											  <argument><expr><literal type="string">"op.%d.isnotnull"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* check if value is NULL */</comment>
					<expr_stmt><expr><call><name>LLVMBuildCondBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
									<argument><expr><call><name>LLVMBuildICmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>LLVMIntEQ</name></expr></argument>, <argument><expr><name>v_resnull</name></expr></argument>,
												  <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><name>b_isnull</name></expr></argument>, <argument><expr><name>b_notnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* if value is NULL, return false */</comment>
					<expr_stmt><expr><call><name>LLVMPositionBuilderAtEnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* result is not null */</comment>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v_resnullp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>EEOP_BOOLTEST_IS_TRUE</name> <operator>||</operator>
						<name>opcode</name> <operator>==</operator> <name>EEOP_BOOLTEST_IS_FALSE</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>l_sizet_const</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v_resvaluep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if>
					<else>else
					<block>{<block_content>
						<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>l_sizet_const</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v_resvaluep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></else></if_stmt>

					<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMPositionBuilderAtEnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_notnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>EEOP_BOOLTEST_IS_TRUE</name> <operator>||</operator>
						<name>opcode</name> <operator>==</operator> <name>EEOP_BOOLTEST_IS_NOT_FALSE</name></expr>)</condition>
					<block>{<block_content>
						<comment type="block">/*
						 * if value is not null NULL, return value (already
						 * set)
						 */</comment>
					</block_content>}</block></if>
					<else>else
					<block>{<block_content>
						<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_value</name> <init>=
						<expr><call><name>LLVMBuildLoad</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_resvaluep</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

						<expr_stmt><expr><name>v_value</name> <operator>=</operator> <call><name>LLVMBuildZExt</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
												<argument><expr><call><name>LLVMBuildICmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>LLVMIntEQ</name></expr></argument>,
															  <argument><expr><name>v_value</name></expr></argument>,
															  <argument><expr><call><name>l_sizet_const</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
															  <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
												<argument><expr><name>TypeSizeT</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_value</name></expr></argument>, <argument><expr><name>v_resvaluep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></else></if_stmt>
					<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block>

			<case>case <expr><name>EEOP_PARAM_EXEC</name></expr>:</case>
				<expr_stmt><expr><call><name>build_EvalXFunc</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><literal type="string">"ExecEvalParamExec"</literal></expr></argument>,
								<argument><expr><name>v_state</name></expr></argument>, <argument><expr><name>v_econtext</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>EEOP_PARAM_EXTERN</name></expr>:</case>
				<expr_stmt><expr><call><name>build_EvalXFunc</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><literal type="string">"ExecEvalParamExtern"</literal></expr></argument>,
								<argument><expr><name>v_state</name></expr></argument>, <argument><expr><name>v_econtext</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>EEOP_PARAM_CALLBACK</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>LLVMTypeRef</name></type> <name><name>param_types</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name><name>v_params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMTypeRef</name></type> <name>v_functype</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_func</name></decl>;</decl_stmt>

					<expr_stmt><expr><name><name>param_types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>l_ptr</name><argument_list>(<argument><expr><name>StructExprState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>param_types</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>l_ptr</name><argument_list>(<argument><expr><name>TypeSizeT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>param_types</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>l_ptr</name><argument_list>(<argument><expr><name>StructExprContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>v_functype</name> <operator>=</operator> <call><name>LLVMFunctionType</name><argument_list>(<argument><expr><call><name>LLVMVoidType</name><argument_list>()</argument_list></call></expr></argument>,
												  <argument><expr><name>param_types</name></expr></argument>,
												  <argument><expr><call><name>lengthof</name><argument_list>(<argument><expr><name>param_types</name></expr></argument>)</argument_list></call></expr></argument>,
												  <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_func</name> <operator>=</operator> <call><name>l_ptr_const</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>cparam</name><operator>.</operator><name>paramfunc</name></name></expr></argument>,
										 <argument><expr><call><name>l_ptr</name><argument_list>(<argument><expr><name>v_functype</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name><name>v_params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>v_state</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>v_params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>l_ptr_const</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><call><name>l_ptr</name><argument_list>(<argument><expr><name>TypeSizeT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>v_params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>v_econtext</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildCall</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
								  <argument><expr><name>v_func</name></expr></argument>,
								  <argument><expr><name>v_params</name></expr></argument>, <argument><expr><call><name>lengthof</name><argument_list>(<argument><expr><name>v_params</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block>

			<case>case <expr><name>EEOP_ARRAYREF_OLD</name></expr>:</case>
				<expr_stmt><expr><call><name>build_EvalXFunc</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><literal type="string">"ExecEvalArrayRefOld"</literal></expr></argument>,
								<argument><expr><name>v_state</name></expr></argument>, <argument><expr><name>v_econtext</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>EEOP_ARRAYREF_ASSIGN</name></expr>:</case>
				<expr_stmt><expr><call><name>build_EvalXFunc</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><literal type="string">"ExecEvalArrayRefAssign"</literal></expr></argument>,
								<argument><expr><name>v_state</name></expr></argument>, <argument><expr><name>v_econtext</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>EEOP_ARRAYREF_FETCH</name></expr>:</case>
				<expr_stmt><expr><call><name>build_EvalXFunc</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><literal type="string">"ExecEvalArrayRefFetch"</literal></expr></argument>,
								<argument><expr><name>v_state</name></expr></argument>, <argument><expr><name>v_econtext</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>EEOP_CASE_TESTVAL</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>LLVMBasicBlockRef</name></type> <name>b_avail</name></decl>,
								<decl><type ref="prev"/><name>b_notavail</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_casevaluep</name></decl>,
								<decl><type ref="prev"/><name>v_casevalue</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_casenullp</name></decl>,
								<decl><type ref="prev"/><name>v_casenull</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_casevaluenull</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>b_avail</name> <operator>=</operator> <call><name>l_bb_before_v</name><argument_list>(<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
											<argument><expr><literal type="string">"op.%d.avail"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>b_notavail</name> <operator>=</operator> <call><name>l_bb_before_v</name><argument_list>(<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
											   <argument><expr><literal type="string">"op.%d.notavail"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>v_casevaluep</name> <operator>=</operator> <call><name>l_ptr_const</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>casetest</name><operator>.</operator><name>value</name></name></expr></argument>,
											   <argument><expr><call><name>l_ptr</name><argument_list>(<argument><expr><name>TypeSizeT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_casenullp</name> <operator>=</operator> <call><name>l_ptr_const</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>casetest</name><operator>.</operator><name>isnull</name></name></expr></argument>,
											  <argument><expr><call><name>l_ptr</name><argument_list>(<argument><expr><name>TypeStorageBool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>v_casevaluenull</name> <operator>=</operator>
						<call><name>LLVMBuildICmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>LLVMIntEQ</name></expr></argument>,
									  <argument><expr><call><name>LLVMBuildPtrToInt</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_casevaluep</name></expr></argument>,
														<argument><expr><name>TypeSizeT</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
									  <argument><expr><call><name>l_sizet_const</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildCondBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_casevaluenull</name></expr></argument>, <argument><expr><name>b_notavail</name></expr></argument>, <argument><expr><name>b_avail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* if casetest != NULL */</comment>
					<expr_stmt><expr><call><name>LLVMPositionBuilderAtEnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_avail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_casevalue</name> <operator>=</operator> <call><name>LLVMBuildLoad</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_casevaluep</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_casenull</name> <operator>=</operator> <call><name>LLVMBuildLoad</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_casenullp</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_casevalue</name></expr></argument>, <argument><expr><name>v_resvaluep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_casenull</name></expr></argument>, <argument><expr><name>v_resnullp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* if casetest == NULL */</comment>
					<expr_stmt><expr><call><name>LLVMPositionBuilderAtEnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_notavail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_casevalue</name> <operator>=</operator>
						<call><name>l_load_struct_gep</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_econtext</name></expr></argument>,
										  <argument><expr><name>FIELDNO_EXPRCONTEXT_CASEDATUM</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_casenull</name> <operator>=</operator>
						<call><name>l_load_struct_gep</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_econtext</name></expr></argument>,
										  <argument><expr><name>FIELDNO_EXPRCONTEXT_CASENULL</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_casevalue</name></expr></argument>, <argument><expr><name>v_resvaluep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_casenull</name></expr></argument>, <argument><expr><name>v_resnullp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block>

			<case>case <expr><name>EEOP_MAKE_READONLY</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>LLVMBasicBlockRef</name></type> <name>b_notnull</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name><name>v_params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_ret</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_nullp</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_valuep</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_null</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_value</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>b_notnull</name> <operator>=</operator> <call><name>l_bb_before_v</name><argument_list>(<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
											  <argument><expr><literal type="string">"op.%d.readonly.notnull"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>v_nullp</name> <operator>=</operator> <call><name>l_ptr_const</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>make_readonly</name><operator>.</operator><name>isnull</name></name></expr></argument>,
										  <argument><expr><call><name>l_ptr</name><argument_list>(<argument><expr><name>TypeStorageBool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>v_null</name> <operator>=</operator> <call><name>LLVMBuildLoad</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_nullp</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* store null isnull value in result */</comment>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_null</name></expr></argument>, <argument><expr><name>v_resnullp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* check if value is NULL */</comment>
					<expr_stmt><expr><call><name>LLVMBuildCondBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
									<argument><expr><call><name>LLVMBuildICmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>LLVMIntEQ</name></expr></argument>, <argument><expr><name>v_null</name></expr></argument>,
												  <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>b_notnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* if value is not null, convert to RO datum */</comment>
					<expr_stmt><expr><call><name>LLVMPositionBuilderAtEnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_notnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>v_valuep</name> <operator>=</operator> <call><name>l_ptr_const</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>make_readonly</name><operator>.</operator><name>value</name></name></expr></argument>,
										   <argument><expr><call><name>l_ptr</name><argument_list>(<argument><expr><name>TypeSizeT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>v_value</name> <operator>=</operator> <call><name>LLVMBuildLoad</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_valuep</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name><name>v_params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>v_value</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_ret</name> <operator>=</operator>
						<call><name>LLVMBuildCall</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
									  <argument><expr><call><name>llvm_get_decl</name><argument_list>(<argument><expr><name>mod</name></expr></argument>, <argument><expr><name>FuncMakeExpandedObjectReadOnlyInternal</name></expr></argument>)</argument_list></call></expr></argument>,
									  <argument><expr><name>v_params</name></expr></argument>, <argument><expr><call><name>lengthof</name><argument_list>(<argument><expr><name>v_params</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_ret</name></expr></argument>, <argument><expr><name>v_resvaluep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block>

			<case>case <expr><name>EEOP_IOCOERCE</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>FunctionCallInfo</name></type> <name>fcinfo_out</name></decl>,
								<decl><type ref="prev"/><name>fcinfo_in</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_fcinfo_out</name></decl>,
								<decl><type ref="prev"/><name>v_fcinfo_in</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_fn_addr_out</name></decl>,
								<decl><type ref="prev"/><name>v_fn_addr_in</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_fcinfo_in_isnullp</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_in_argp</name></decl>,
								<decl><type ref="prev"/><name>v_out_argp</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_in_argnullp</name></decl>,
								<decl><type ref="prev"/><name>v_out_argnullp</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_retval</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_resvalue</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_resnull</name></decl>;</decl_stmt>

					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_output_skip</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_output</name></decl>;</decl_stmt>

					<decl_stmt><decl><type><name>LLVMBasicBlockRef</name></type> <name>b_skipoutput</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMBasicBlockRef</name></type> <name>b_calloutput</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMBasicBlockRef</name></type> <name>b_input</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMBasicBlockRef</name></type> <name>b_inputcall</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>fcinfo_out</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>iocoerce</name><operator>.</operator><name>fcinfo_data_out</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>fcinfo_in</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>iocoerce</name><operator>.</operator><name>fcinfo_data_in</name></name></expr>;</expr_stmt>

					<expr_stmt><expr><name>b_skipoutput</name> <operator>=</operator> <call><name>l_bb_before_v</name><argument_list>(<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
												 <argument><expr><literal type="string">"op.%d.skipoutputnull"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>b_calloutput</name> <operator>=</operator> <call><name>l_bb_before_v</name><argument_list>(<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
												 <argument><expr><literal type="string">"op.%d.calloutput"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>b_input</name> <operator>=</operator> <call><name>l_bb_before_v</name><argument_list>(<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
											<argument><expr><literal type="string">"op.%d.input"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>b_inputcall</name> <operator>=</operator> <call><name>l_bb_before_v</name><argument_list>(<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
												<argument><expr><literal type="string">"op.%d.inputcall"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>v_fcinfo_out</name> <operator>=</operator> <call><name>l_ptr_const</name><argument_list>(<argument><expr><name>fcinfo_out</name></expr></argument>, <argument><expr><call><name>l_ptr</name><argument_list>(<argument><expr><name>StructFunctionCallInfoData</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_fcinfo_in</name> <operator>=</operator> <call><name>l_ptr_const</name><argument_list>(<argument><expr><name>fcinfo_in</name></expr></argument>, <argument><expr><call><name>l_ptr</name><argument_list>(<argument><expr><name>StructFunctionCallInfoData</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_fn_addr_out</name> <operator>=</operator> <call><name>l_ptr_const</name><argument_list>(<argument><expr><name><name>fcinfo_out</name><operator>-&gt;</operator><name>flinfo</name><operator>-&gt;</operator><name>fn_addr</name></name></expr></argument>, <argument><expr><name>TypePGFunction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_fn_addr_in</name> <operator>=</operator> <call><name>l_ptr_const</name><argument_list>(<argument><expr><name><name>fcinfo_in</name><operator>-&gt;</operator><name>flinfo</name><operator>-&gt;</operator><name>fn_addr</name></name></expr></argument>, <argument><expr><name>TypePGFunction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>v_fcinfo_in_isnullp</name> <operator>=</operator>
						<call><name>LLVMBuildStructGEP</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_fcinfo_in</name></expr></argument>,
										   <argument><expr><name>FIELDNO_FUNCTIONCALLINFODATA_ISNULL</name></expr></argument>,
										   <argument><expr><literal type="string">"v_fcinfo_in_isnull"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_out_argnullp</name> <operator>=</operator>
						<call><name>LLVMBuildStructGEP</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_fcinfo_out</name></expr></argument>,
										   <argument><expr><name>FIELDNO_FUNCTIONCALLINFODATA_ARGNULL</name></expr></argument>,
										   <argument><expr><literal type="string">"v_fcinfo_out_argnullp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_in_argnullp</name> <operator>=</operator>
						<call><name>LLVMBuildStructGEP</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_fcinfo_in</name></expr></argument>,
										   <argument><expr><name>FIELDNO_FUNCTIONCALLINFODATA_ARGNULL</name></expr></argument>,
										   <argument><expr><literal type="string">"v_fcinfo_in_argnullp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_out_argp</name> <operator>=</operator>
						<call><name>LLVMBuildStructGEP</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_fcinfo_out</name></expr></argument>,
										   <argument><expr><name>FIELDNO_FUNCTIONCALLINFODATA_ARG</name></expr></argument>,
										   <argument><expr><literal type="string">"v_fcinfo_out_argp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_in_argp</name> <operator>=</operator>
						<call><name>LLVMBuildStructGEP</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_fcinfo_in</name></expr></argument>,
										   <argument><expr><name>FIELDNO_FUNCTIONCALLINFODATA_ARG</name></expr></argument>,
										   <argument><expr><literal type="string">"v_fcinfo_in_argp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* output functions are not called on nulls */</comment>
					<expr_stmt><expr><name>v_resnull</name> <operator>=</operator> <call><name>LLVMBuildLoad</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_resnullp</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildCondBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
									<argument><expr><call><name>LLVMBuildICmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>LLVMIntEQ</name></expr></argument>, <argument><expr><name>v_resnull</name></expr></argument>,
												  <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><name>b_skipoutput</name></expr></argument>,
									<argument><expr><name>b_calloutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMPositionBuilderAtEnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_skipoutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_output_skip</name> <operator>=</operator> <call><name>l_sizet_const</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMPositionBuilderAtEnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_calloutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_resvalue</name> <operator>=</operator> <call><name>LLVMBuildLoad</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_resvaluep</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* set arg[0] */</comment>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
								   <argument><expr><name>v_resvalue</name></expr></argument>,
								   <argument><expr><call><name>LLVMBuildStructGEP</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_out_argp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
								   <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
								   <argument><expr><call><name>LLVMBuildStructGEP</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_out_argnullp</name></expr></argument>,
													  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="block">/* and call output function (can never return NULL) */</comment>
					<expr_stmt><expr><name>v_output</name> <operator>=</operator> <call><name>LLVMBuildCall</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_fn_addr_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v_fcinfo_out</name></expr></argument>,
											 <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"funccall_coerce_out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* build block handling input function call */</comment>
					<expr_stmt><expr><call><name>LLVMPositionBuilderAtEnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* phi between resnull and output function call branches */</comment>
					<block>{<block_content>
						<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name><name>incoming_values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>LLVMBasicBlockRef</name></type> <name><name>incoming_blocks</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

						<expr_stmt><expr><name><name>incoming_values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>v_output_skip</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>incoming_blocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>b_skipoutput</name></expr>;</expr_stmt>

						<expr_stmt><expr><name><name>incoming_values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>v_output</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>incoming_blocks</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>b_calloutput</name></expr>;</expr_stmt>

						<expr_stmt><expr><name>v_output</name> <operator>=</operator> <call><name>LLVMBuildPhi</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>TypeSizeT</name></expr></argument>, <argument><expr><literal type="string">"output"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>LLVMAddIncoming</name><argument_list>(<argument><expr><name>v_output</name></expr></argument>,
										<argument><expr><name>incoming_values</name></expr></argument>, <argument><expr><name>incoming_blocks</name></expr></argument>,
										<argument><expr><call><name>lengthof</name><argument_list>(<argument><expr><name>incoming_blocks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block>

					<comment type="block">/*
					 * If input function is strict, skip if input string is
					 * NULL.
					 */</comment>
					<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>iocoerce</name><operator>.</operator><name>finfo_in</name><operator>-&gt;</operator><name>fn_strict</name></name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>LLVMBuildCondBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
										<argument><expr><call><name>LLVMBuildICmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>LLVMIntEQ</name></expr></argument>, <argument><expr><name>v_output</name></expr></argument>,
													  <argument><expr><call><name>l_sizet_const</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
										<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
										<argument><expr><name>b_inputcall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if>
					<else>else
					<block>{<block_content>
						<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_inputcall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></else></if_stmt>

					<expr_stmt><expr><call><name>LLVMPositionBuilderAtEnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_inputcall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="block">/* set arguments */</comment>
					<comment type="block">/* arg0: output */</comment>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_output</name></expr></argument>,
								   <argument><expr><call><name>LLVMBuildStructGEP</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_in_argp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_resnull</name></expr></argument>,
								   <argument><expr><call><name>LLVMBuildStructGEP</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_in_argnullp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* arg1: ioparam: preset in execExpr.c */</comment>
					<comment type="block">/* arg2: typmod: preset in execExpr.c  */</comment>

					<comment type="block">/* reset fcinfo_in-&gt;isnull */</comment>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v_fcinfo_in_isnullp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="block">/* and call function */</comment>
					<expr_stmt><expr><name>v_retval</name> <operator>=</operator> <call><name>LLVMBuildCall</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_fn_addr_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v_fcinfo_in</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
											 <argument><expr><literal type="string">"funccall_iocoerce_in"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_retval</name></expr></argument>, <argument><expr><name>v_resvaluep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block>

			<case>case <expr><name>EEOP_DISTINCT</name></expr>:</case>
			<case>case <expr><name>EEOP_NOT_DISTINCT</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>FunctionCallInfo</name></type> <name>fcinfo</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>func</name><operator>.</operator><name>fcinfo_data</name></name></expr></init></decl>;</decl_stmt>

					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_fcinfo</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_fcinfo_isnull</name></decl>;</decl_stmt>

					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_argnullp</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_argnull0</name></decl>,
								<decl><type ref="prev"/><name>v_argisnull0</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_argnull1</name></decl>,
								<decl><type ref="prev"/><name>v_argisnull1</name></decl>;</decl_stmt>

					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_anyargisnull</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_bothargisnull</name></decl>;</decl_stmt>

					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_result</name></decl>;</decl_stmt>

					<decl_stmt><decl><type><name>LLVMBasicBlockRef</name></type> <name>b_noargnull</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMBasicBlockRef</name></type> <name>b_checkbothargnull</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMBasicBlockRef</name></type> <name>b_bothargnull</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMBasicBlockRef</name></type> <name>b_anyargnull</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>b_noargnull</name> <operator>=</operator> <call><name>l_bb_before_v</name><argument_list>(<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"op.%d.noargnull"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>b_checkbothargnull</name> <operator>=</operator> <call><name>l_bb_before_v</name><argument_list>(<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"op.%d.checkbothargnull"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>b_bothargnull</name> <operator>=</operator> <call><name>l_bb_before_v</name><argument_list>(<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"op.%d.bothargnull"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>b_anyargnull</name> <operator>=</operator> <call><name>l_bb_before_v</name><argument_list>(<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"op.%d.anyargnull"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>v_fcinfo</name> <operator>=</operator> <call><name>l_ptr_const</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><call><name>l_ptr</name><argument_list>(<argument><expr><name>StructFunctionCallInfoData</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>v_argnullp</name> <operator>=</operator>
						<call><name>LLVMBuildStructGEP</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
										   <argument><expr><name>v_fcinfo</name></expr></argument>,
										   <argument><expr><name>FIELDNO_FUNCTIONCALLINFODATA_ARGNULL</name></expr></argument>,
										   <argument><expr><literal type="string">"v_argnullp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* load argnull[0|1] for both arguments */</comment>
					<expr_stmt><expr><name>v_argnull0</name> <operator>=</operator> <call><name>l_load_struct_gep</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_argnullp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_argisnull0</name> <operator>=</operator> <call><name>LLVMBuildICmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>LLVMIntEQ</name></expr></argument>, <argument><expr><name>v_argnull0</name></expr></argument>,
												 <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>v_argnull1</name> <operator>=</operator> <call><name>l_load_struct_gep</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_argnullp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_argisnull1</name> <operator>=</operator> <call><name>LLVMBuildICmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>LLVMIntEQ</name></expr></argument>, <argument><expr><name>v_argnull1</name></expr></argument>,
												 <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>v_anyargisnull</name> <operator>=</operator> <call><name>LLVMBuildOr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_argisnull0</name></expr></argument>, <argument><expr><name>v_argisnull1</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_bothargisnull</name> <operator>=</operator> <call><name>LLVMBuildAnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_argisnull0</name></expr></argument>, <argument><expr><name>v_argisnull1</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/*
					 * Check function arguments for NULLness: If either is
					 * NULL, we check if both args are NULL. Otherwise call
					 * comparator.
					 */</comment>
					<expr_stmt><expr><call><name>LLVMBuildCondBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_anyargisnull</name></expr></argument>, <argument><expr><name>b_checkbothargnull</name></expr></argument>,
									<argument><expr><name>b_noargnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/*
					 * build block checking if any arg is null
					 */</comment>
					<expr_stmt><expr><call><name>LLVMPositionBuilderAtEnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_checkbothargnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildCondBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_bothargisnull</name></expr></argument>, <argument><expr><name>b_bothargnull</name></expr></argument>,
									<argument><expr><name>b_anyargnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


					<comment type="block">/* Both NULL? Then is not distinct... */</comment>
					<expr_stmt><expr><call><name>LLVMPositionBuilderAtEnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_bothargnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v_resnullp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>EEOP_NOT_DISTINCT</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>l_sizet_const</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v_resvaluep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>l_sizet_const</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v_resvaluep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

					<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* Only one is NULL? Then is distinct... */</comment>
					<expr_stmt><expr><call><name>LLVMPositionBuilderAtEnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_anyargnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v_resnullp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>EEOP_NOT_DISTINCT</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>l_sizet_const</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v_resvaluep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>l_sizet_const</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v_resvaluep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
					<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* neither argument is null: compare */</comment>
					<expr_stmt><expr><call><name>LLVMPositionBuilderAtEnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_noargnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>v_result</name> <operator>=</operator> <call><name>BuildV1Call</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><name>fcinfo</name></expr></argument>,
										   <argument><expr><operator>&amp;</operator><name>v_fcinfo_isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>EEOP_DISTINCT</name></expr>)</condition>
					<block>{<block_content>
						<comment type="block">/* Must invert result of "=" */</comment>
						<expr_stmt><expr><name>v_result</name> <operator>=</operator>
							<call><name>LLVMBuildZExt</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
										  <argument><expr><call><name>LLVMBuildICmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>LLVMIntEQ</name></expr></argument>,
														<argument><expr><name>v_result</name></expr></argument>,
														<argument><expr><call><name>l_sizet_const</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
										  <argument><expr><name>TypeSizeT</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>

					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_fcinfo_isnull</name></expr></argument>, <argument><expr><name>v_resnullp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_result</name></expr></argument>, <argument><expr><name>v_resvaluep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block>

			<case>case <expr><name>EEOP_NULLIF</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>FunctionCallInfo</name></type> <name>fcinfo</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>func</name><operator>.</operator><name>fcinfo_data</name></name></expr></init></decl>;</decl_stmt>

					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_fcinfo</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_fcinfo_isnull</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_argnullp</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_argnull0</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_argnull1</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_anyargisnull</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_argp</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_arg0</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMBasicBlockRef</name></type> <name>b_hasnull</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMBasicBlockRef</name></type> <name>b_nonull</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMBasicBlockRef</name></type> <name>b_argsequal</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_retval</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_argsequal</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>b_hasnull</name> <operator>=</operator> <call><name>l_bb_before_v</name><argument_list>(<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
											  <argument><expr><literal type="string">"b.%d.null-args"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>b_nonull</name> <operator>=</operator> <call><name>l_bb_before_v</name><argument_list>(<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
											 <argument><expr><literal type="string">"b.%d.no-null-args"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>b_argsequal</name> <operator>=</operator> <call><name>l_bb_before_v</name><argument_list>(<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
												<argument><expr><literal type="string">"b.%d.argsequal"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>v_fcinfo</name> <operator>=</operator> <call><name>l_ptr_const</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><call><name>l_ptr</name><argument_list>(<argument><expr><name>StructFunctionCallInfoData</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>v_argnullp</name> <operator>=</operator>
						<call><name>LLVMBuildStructGEP</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
										   <argument><expr><name>v_fcinfo</name></expr></argument>,
										   <argument><expr><name>FIELDNO_FUNCTIONCALLINFODATA_ARGNULL</name></expr></argument>,
										   <argument><expr><literal type="string">"v_argnullp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>v_argp</name> <operator>=</operator>
						<call><name>LLVMBuildStructGEP</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
										   <argument><expr><name>v_fcinfo</name></expr></argument>,
										   <argument><expr><name>FIELDNO_FUNCTIONCALLINFODATA_ARG</name></expr></argument>,
										   <argument><expr><literal type="string">"v_argp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* if either argument is NULL they can't be equal */</comment>
					<expr_stmt><expr><name>v_argnull0</name> <operator>=</operator> <call><name>l_load_struct_gep</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_argnullp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_argnull1</name> <operator>=</operator> <call><name>l_load_struct_gep</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_argnullp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>v_anyargisnull</name> <operator>=</operator>
						<call><name>LLVMBuildOr</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
									<argument><expr><call><name>LLVMBuildICmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>LLVMIntEQ</name></expr></argument>, <argument><expr><name>v_argnull0</name></expr></argument>,
												  <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><call><name>LLVMBuildICmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>LLVMIntEQ</name></expr></argument>, <argument><expr><name>v_argnull1</name></expr></argument>,
												  <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMBuildCondBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_anyargisnull</name></expr></argument>, <argument><expr><name>b_hasnull</name></expr></argument>, <argument><expr><name>b_nonull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* one (or both) of the arguments are null, return arg[0] */</comment>
					<expr_stmt><expr><call><name>LLVMPositionBuilderAtEnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_hasnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_arg0</name> <operator>=</operator> <call><name>l_load_struct_gep</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_argp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_argnull0</name></expr></argument>, <argument><expr><name>v_resnullp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_arg0</name></expr></argument>, <argument><expr><name>v_resvaluep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* build block to invoke function and check result */</comment>
					<expr_stmt><expr><call><name>LLVMPositionBuilderAtEnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_nonull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>v_retval</name> <operator>=</operator> <call><name>BuildV1Call</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v_fcinfo_isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/*
					 * If result not null, and arguments are equal return null
					 * (same result as if there'd been NULLs, hence reuse
					 * b_hasnull).
					 */</comment>
					<expr_stmt><expr><name>v_argsequal</name> <operator>=</operator> <call><name>LLVMBuildAnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
											   <argument><expr><call><name>LLVMBuildICmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>LLVMIntEQ</name></expr></argument>,
															 <argument><expr><name>v_fcinfo_isnull</name></expr></argument>,
															 <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
															 <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
											   <argument><expr><call><name>LLVMBuildICmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>LLVMIntEQ</name></expr></argument>,
															 <argument><expr><name>v_retval</name></expr></argument>,
															 <argument><expr><call><name>l_sizet_const</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
															 <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
											   <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildCondBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_argsequal</name></expr></argument>, <argument><expr><name>b_argsequal</name></expr></argument>, <argument><expr><name>b_hasnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* build block setting result to NULL, if args are equal */</comment>
					<expr_stmt><expr><call><name>LLVMPositionBuilderAtEnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_argsequal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v_resnullp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>l_sizet_const</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v_resvaluep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_retval</name></expr></argument>, <argument><expr><name>v_resvaluep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block>

			<case>case <expr><name>EEOP_SQLVALUEFUNCTION</name></expr>:</case>
				<expr_stmt><expr><call><name>build_EvalXFunc</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><literal type="string">"ExecEvalSQLValueFunction"</literal></expr></argument>,
								<argument><expr><name>v_state</name></expr></argument>, <argument><expr><name>v_econtext</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>EEOP_CURRENTOFEXPR</name></expr>:</case>
				<expr_stmt><expr><call><name>build_EvalXFunc</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><literal type="string">"ExecEvalCurrentOfExpr"</literal></expr></argument>,
								<argument><expr><name>v_state</name></expr></argument>, <argument><expr><name>v_econtext</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>EEOP_NEXTVALUEEXPR</name></expr>:</case>
				<expr_stmt><expr><call><name>build_EvalXFunc</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><literal type="string">"ExecEvalNextValueExpr"</literal></expr></argument>,
								<argument><expr><name>v_state</name></expr></argument>, <argument><expr><name>v_econtext</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>EEOP_ARRAYEXPR</name></expr>:</case>
				<expr_stmt><expr><call><name>build_EvalXFunc</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><literal type="string">"ExecEvalArrayExpr"</literal></expr></argument>,
								<argument><expr><name>v_state</name></expr></argument>, <argument><expr><name>v_econtext</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>EEOP_ARRAYCOERCE</name></expr>:</case>
				<expr_stmt><expr><call><name>build_EvalXFunc</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><literal type="string">"ExecEvalArrayCoerce"</literal></expr></argument>,
								<argument><expr><name>v_state</name></expr></argument>, <argument><expr><name>v_econtext</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>EEOP_ROW</name></expr>:</case>
				<expr_stmt><expr><call><name>build_EvalXFunc</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><literal type="string">"ExecEvalRow"</literal></expr></argument>,
								<argument><expr><name>v_state</name></expr></argument>, <argument><expr><name>v_econtext</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>EEOP_ROWCOMPARE_STEP</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>FunctionCallInfo</name></type> <name>fcinfo</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>rowcompare_step</name><operator>.</operator><name>fcinfo_data</name></name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_fcinfo_isnull</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMBasicBlockRef</name></type> <name>b_null</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMBasicBlockRef</name></type> <name>b_compare</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMBasicBlockRef</name></type> <name>b_compare_result</name></decl>;</decl_stmt>

					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_retval</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>b_null</name> <operator>=</operator> <call><name>l_bb_before_v</name><argument_list>(<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
										   <argument><expr><literal type="string">"op.%d.row-null"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>b_compare</name> <operator>=</operator> <call><name>l_bb_before_v</name><argument_list>(<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
											  <argument><expr><literal type="string">"op.%d.row-compare"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>b_compare_result</name> <operator>=</operator>
						<call><name>l_bb_before_v</name><argument_list>(<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
									  <argument><expr><literal type="string">"op.%d.row-compare-result"</literal></expr></argument>,
									  <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/*
					 * If function is strict, and either arg is null, we're
					 * done.
					 */</comment>
					<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>rowcompare_step</name><operator>.</operator><name>finfo</name><operator>-&gt;</operator><name>fn_strict</name></name></expr>)</condition>
					<block>{<block_content>
						<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_fcinfo</name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_argnullp</name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_argnull0</name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_argnull1</name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_anyargisnull</name></decl>;</decl_stmt>

						<expr_stmt><expr><name>v_fcinfo</name> <operator>=</operator> <call><name>l_ptr_const</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>,
											   <argument><expr><call><name>l_ptr</name><argument_list>(<argument><expr><name>StructFunctionCallInfoData</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><name>v_argnullp</name> <operator>=</operator>
							<call><name>LLVMBuildStructGEP</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_fcinfo</name></expr></argument>,
											   <argument><expr><name>FIELDNO_FUNCTIONCALLINFODATA_ARGNULL</name></expr></argument>,
											   <argument><expr><literal type="string">"v_argnullp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><name>v_argnull0</name> <operator>=</operator> <call><name>l_load_struct_gep</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_argnullp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>v_argnull1</name> <operator>=</operator> <call><name>l_load_struct_gep</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_argnullp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><name>v_anyargisnull</name> <operator>=</operator>
							<call><name>LLVMBuildOr</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
										<argument><expr><call><name>LLVMBuildICmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
													  <argument><expr><name>LLVMIntEQ</name></expr></argument>,
													  <argument><expr><name>v_argnull0</name></expr></argument>,
													  <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
													  <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
										<argument><expr><call><name>LLVMBuildICmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>LLVMIntEQ</name></expr></argument>,
													  <argument><expr><name>v_argnull1</name></expr></argument>,
													  <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
										<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><call><name>LLVMBuildCondBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_anyargisnull</name></expr></argument>, <argument><expr><name>b_null</name></expr></argument>, <argument><expr><name>b_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if>
					<else>else
					<block>{<block_content>
						<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></else></if_stmt>

					<comment type="block">/* build block invoking comparison function */</comment>
					<expr_stmt><expr><call><name>LLVMPositionBuilderAtEnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* call function */</comment>
					<expr_stmt><expr><name>v_retval</name> <operator>=</operator> <call><name>BuildV1Call</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><name>fcinfo</name></expr></argument>,
										   <argument><expr><operator>&amp;</operator><name>v_fcinfo_isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_retval</name></expr></argument>, <argument><expr><name>v_resvaluep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* if result of function is NULL, force NULL result */</comment>
					<expr_stmt><expr><call><name>LLVMBuildCondBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
									<argument><expr><call><name>LLVMBuildICmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
												  <argument><expr><name>LLVMIntEQ</name></expr></argument>,
												  <argument><expr><name>v_fcinfo_isnull</name></expr></argument>,
												  <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
												  <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><name>b_compare_result</name></expr></argument>,
									<argument><expr><name>b_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* build block analyzing the !NULL comparator result */</comment>
					<expr_stmt><expr><call><name>LLVMPositionBuilderAtEnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_compare_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* if results equal, compare next, otherwise done */</comment>
					<expr_stmt><expr><call><name>LLVMBuildCondBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
									<argument><expr><call><name>LLVMBuildICmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
												  <argument><expr><name>LLVMIntEQ</name></expr></argument>,
												  <argument><expr><name>v_retval</name></expr></argument>,
												  <argument><expr><call><name>l_sizet_const</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
									<argument><expr><name><name>opblocks</name><index>[<expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>rowcompare_step</name><operator>.</operator><name>jumpdone</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/*
					 * Build block handling NULL input or NULL comparator
					 * result.
					 */</comment>
					<expr_stmt><expr><call><name>LLVMPositionBuilderAtEnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v_resnullp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>rowcompare_step</name><operator>.</operator><name>jumpnull</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<break>break;</break>
				</block_content>}</block>

			<case>case <expr><name>EEOP_ROWCOMPARE_FINAL</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>RowCompareType</name></type> <name>rctype</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>rowcompare_final</name><operator>.</operator><name>rctype</name></name></expr></init></decl>;</decl_stmt>

					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_cmpresult</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_result</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMIntPredicate</name></type> <name>predicate</name></decl>;</decl_stmt>

					<comment type="block">/*
					 * Btree comparators return 32 bit results, need to be
					 * careful about sign (used as a 64 bit value it's
					 * otherwise wrong).
					 */</comment>
					<expr_stmt><expr><name>v_cmpresult</name> <operator>=</operator>
						<call><name>LLVMBuildTrunc</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
									   <argument><expr><call><name>LLVMBuildLoad</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_resvaluep</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
									   <argument><expr><call><name>LLVMInt32Type</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<switch>switch <condition>(<expr><name>rctype</name></expr>)</condition>
					<block>{<block_content>
						<case>case <expr><name>ROWCOMPARE_LT</name></expr>:</case>
							<expr_stmt><expr><name>predicate</name> <operator>=</operator> <name>LLVMIntSLT</name></expr>;</expr_stmt>
							<break>break;</break>
						<case>case <expr><name>ROWCOMPARE_LE</name></expr>:</case>
							<expr_stmt><expr><name>predicate</name> <operator>=</operator> <name>LLVMIntSLE</name></expr>;</expr_stmt>
							<break>break;</break>
						<case>case <expr><name>ROWCOMPARE_GT</name></expr>:</case>
							<expr_stmt><expr><name>predicate</name> <operator>=</operator> <name>LLVMIntSGT</name></expr>;</expr_stmt>
							<break>break;</break>
						<case>case <expr><name>ROWCOMPARE_GE</name></expr>:</case>
							<expr_stmt><expr><name>predicate</name> <operator>=</operator> <name>LLVMIntSGE</name></expr>;</expr_stmt>
							<break>break;</break>
						<default>default:</default>
							<comment type="block">/* EQ and NE cases aren't allowed here */</comment>
							<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name>predicate</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>	<comment type="block">/* prevent compiler warning */</comment>
							<break>break;</break>
					</block_content>}</block></switch>

					<expr_stmt><expr><name>v_result</name> <operator>=</operator> <call><name>LLVMBuildICmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
											 <argument><expr><name>predicate</name></expr></argument>,
											 <argument><expr><name>v_cmpresult</name></expr></argument>,
											 <argument><expr><call><name>l_int32_const</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
											 <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_result</name> <operator>=</operator> <call><name>LLVMBuildZExt</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_result</name></expr></argument>, <argument><expr><name>TypeSizeT</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v_resnullp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_result</name></expr></argument>, <argument><expr><name>v_resvaluep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block>

			<case>case <expr><name>EEOP_MINMAX</name></expr>:</case>
				<expr_stmt><expr><call><name>build_EvalXFunc</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><literal type="string">"ExecEvalMinMax"</literal></expr></argument>,
								<argument><expr><name>v_state</name></expr></argument>, <argument><expr><name>v_econtext</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>EEOP_FIELDSELECT</name></expr>:</case>
				<expr_stmt><expr><call><name>build_EvalXFunc</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><literal type="string">"ExecEvalFieldSelect"</literal></expr></argument>,
								<argument><expr><name>v_state</name></expr></argument>, <argument><expr><name>v_econtext</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>EEOP_FIELDSTORE_DEFORM</name></expr>:</case>
				<expr_stmt><expr><call><name>build_EvalXFunc</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><literal type="string">"ExecEvalFieldStoreDeForm"</literal></expr></argument>,
								<argument><expr><name>v_state</name></expr></argument>, <argument><expr><name>v_econtext</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>EEOP_FIELDSTORE_FORM</name></expr>:</case>
				<expr_stmt><expr><call><name>build_EvalXFunc</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><literal type="string">"ExecEvalFieldStoreForm"</literal></expr></argument>,
								<argument><expr><name>v_state</name></expr></argument>, <argument><expr><name>v_econtext</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>EEOP_ARRAYREF_SUBSCRIPT</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_fn</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type>			<name>jumpdone</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>arrayref_subscript</name><operator>.</operator><name>jumpdone</name></name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name><name>v_params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_ret</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>v_fn</name> <operator>=</operator> <call><name>llvm_get_decl</name><argument_list>(<argument><expr><name>mod</name></expr></argument>, <argument><expr><name>FuncExecEvalArrayRefSubscript</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name><name>v_params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>v_state</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>v_params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>l_ptr_const</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><call><name>l_ptr</name><argument_list>(<argument><expr><name>StructExprEvalStep</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_ret</name> <operator>=</operator> <call><name>LLVMBuildCall</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_fn</name></expr></argument>,
										  <argument><expr><name>v_params</name></expr></argument>, <argument><expr><call><name>lengthof</name><argument_list>(<argument><expr><name>v_params</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_ret</name> <operator>=</operator> <call><name>LLVMBuildZExt</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_ret</name></expr></argument>, <argument><expr><name>TypeStorageBool</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMBuildCondBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
									<argument><expr><call><name>LLVMBuildICmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>LLVMIntEQ</name></expr></argument>, <argument><expr><name>v_ret</name></expr></argument>,
												  <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
									<argument><expr><name><name>opblocks</name><index>[<expr><name>jumpdone</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block>

			<case>case <expr><name>EEOP_DOMAIN_TESTVAL</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>LLVMBasicBlockRef</name></type> <name>b_avail</name></decl>,
								<decl><type ref="prev"/><name>b_notavail</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_casevaluep</name></decl>,
								<decl><type ref="prev"/><name>v_casevalue</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_casenullp</name></decl>,
								<decl><type ref="prev"/><name>v_casenull</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_casevaluenull</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>b_avail</name> <operator>=</operator> <call><name>l_bb_before_v</name><argument_list>(<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
											<argument><expr><literal type="string">"op.%d.avail"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>b_notavail</name> <operator>=</operator> <call><name>l_bb_before_v</name><argument_list>(<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
											   <argument><expr><literal type="string">"op.%d.notavail"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>v_casevaluep</name> <operator>=</operator> <call><name>l_ptr_const</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>casetest</name><operator>.</operator><name>value</name></name></expr></argument>,
											   <argument><expr><call><name>l_ptr</name><argument_list>(<argument><expr><name>TypeSizeT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_casenullp</name> <operator>=</operator> <call><name>l_ptr_const</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>casetest</name><operator>.</operator><name>isnull</name></name></expr></argument>,
											  <argument><expr><call><name>l_ptr</name><argument_list>(<argument><expr><name>TypeStorageBool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>v_casevaluenull</name> <operator>=</operator>
						<call><name>LLVMBuildICmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>LLVMIntEQ</name></expr></argument>,
									  <argument><expr><call><name>LLVMBuildPtrToInt</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_casevaluep</name></expr></argument>,
														<argument><expr><name>TypeSizeT</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
									  <argument><expr><call><name>l_sizet_const</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildCondBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
									<argument><expr><name>v_casevaluenull</name></expr></argument>,
									<argument><expr><name>b_notavail</name></expr></argument>, <argument><expr><name>b_avail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* if casetest != NULL */</comment>
					<expr_stmt><expr><call><name>LLVMPositionBuilderAtEnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_avail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_casevalue</name> <operator>=</operator> <call><name>LLVMBuildLoad</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_casevaluep</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_casenull</name> <operator>=</operator> <call><name>LLVMBuildLoad</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_casenullp</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_casevalue</name></expr></argument>, <argument><expr><name>v_resvaluep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_casenull</name></expr></argument>, <argument><expr><name>v_resnullp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* if casetest == NULL */</comment>
					<expr_stmt><expr><call><name>LLVMPositionBuilderAtEnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_notavail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_casevalue</name> <operator>=</operator>
						<call><name>l_load_struct_gep</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_econtext</name></expr></argument>,
										  <argument><expr><name>FIELDNO_EXPRCONTEXT_DOMAINDATUM</name></expr></argument>,
										  <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_casenull</name> <operator>=</operator>
						<call><name>l_load_struct_gep</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_econtext</name></expr></argument>,
										  <argument><expr><name>FIELDNO_EXPRCONTEXT_DOMAINNULL</name></expr></argument>,
										  <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_casevalue</name></expr></argument>, <argument><expr><name>v_resvaluep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_casenull</name></expr></argument>, <argument><expr><name>v_resnullp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block>

			<case>case <expr><name>EEOP_DOMAIN_NOTNULL</name></expr>:</case>
				<expr_stmt><expr><call><name>build_EvalXFunc</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><literal type="string">"ExecEvalConstraintNotNull"</literal></expr></argument>,
								<argument><expr><name>v_state</name></expr></argument>, <argument><expr><name>v_econtext</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>EEOP_DOMAIN_CHECK</name></expr>:</case>
				<expr_stmt><expr><call><name>build_EvalXFunc</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><literal type="string">"ExecEvalConstraintCheck"</literal></expr></argument>,
								<argument><expr><name>v_state</name></expr></argument>, <argument><expr><name>v_econtext</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>EEOP_CONVERT_ROWTYPE</name></expr>:</case>
				<expr_stmt><expr><call><name>build_EvalXFunc</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><literal type="string">"ExecEvalConvertRowtype"</literal></expr></argument>,
								<argument><expr><name>v_state</name></expr></argument>, <argument><expr><name>v_econtext</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>EEOP_SCALARARRAYOP</name></expr>:</case>
				<expr_stmt><expr><call><name>build_EvalXFunc</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><literal type="string">"ExecEvalScalarArrayOp"</literal></expr></argument>,
								<argument><expr><name>v_state</name></expr></argument>, <argument><expr><name>v_econtext</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>EEOP_XMLEXPR</name></expr>:</case>
				<expr_stmt><expr><call><name>build_EvalXFunc</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><literal type="string">"ExecEvalXmlExpr"</literal></expr></argument>,
								<argument><expr><name>v_state</name></expr></argument>, <argument><expr><name>v_econtext</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>EEOP_AGGREF</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>AggrefExprState</name> <modifier>*</modifier></type><name>aggref</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>aggref</name><operator>.</operator><name>astate</name></name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_aggnop</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_aggno</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>value</name></decl>,
								<decl><type ref="prev"/><name>isnull</name></decl>;</decl_stmt>

					<comment type="block">/*
					 * At this point aggref-&gt;aggno is not yet set (it's set up
					 * in ExecInitAgg() after initializing the expression). So
					 * load it from memory each time round.
					 */</comment>
					<expr_stmt><expr><name>v_aggnop</name> <operator>=</operator> <call><name>l_ptr_const</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aggref</name><operator>-&gt;</operator><name>aggno</name></name></expr></argument>,
										   <argument><expr><call><name>l_ptr</name><argument_list>(<argument><expr><call><name>LLVMInt32Type</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_aggno</name> <operator>=</operator> <call><name>LLVMBuildLoad</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_aggnop</name></expr></argument>, <argument><expr><literal type="string">"v_aggno"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* load agg value / null */</comment>
					<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>l_load_gep1</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_aggvalues</name></expr></argument>, <argument><expr><name>v_aggno</name></expr></argument>, <argument><expr><literal type="string">"aggvalue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>isnull</name> <operator>=</operator> <call><name>l_load_gep1</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_aggnulls</name></expr></argument>, <argument><expr><name>v_aggno</name></expr></argument>, <argument><expr><literal type="string">"aggnull"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* and store result */</comment>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>v_resvaluep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>isnull</name></expr></argument>, <argument><expr><name>v_resnullp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block>

			<case>case <expr><name>EEOP_GROUPING_FUNC</name></expr>:</case>
				<expr_stmt><expr><call><name>build_EvalXFunc</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><literal type="string">"ExecEvalGroupingFunc"</literal></expr></argument>,
								<argument><expr><name>v_state</name></expr></argument>, <argument><expr><name>v_econtext</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>EEOP_WINDOW_FUNC</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>WindowFuncExprState</name> <modifier>*</modifier></type><name>wfunc</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>window_func</name><operator>.</operator><name>wfstate</name></name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_wfuncnop</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_wfuncno</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>value</name></decl>,
								<decl><type ref="prev"/><name>isnull</name></decl>;</decl_stmt>

					<comment type="block">/*
					 * At this point aggref-&gt;wfuncno is not yet set (it's set
					 * up in ExecInitWindowAgg() after initializing the
					 * expression). So load it from memory each time round.
					 */</comment>
					<expr_stmt><expr><name>v_wfuncnop</name> <operator>=</operator> <call><name>l_ptr_const</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wfunc</name><operator>-&gt;</operator><name>wfuncno</name></name></expr></argument>,
											 <argument><expr><call><name>l_ptr</name><argument_list>(<argument><expr><call><name>LLVMInt32Type</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_wfuncno</name> <operator>=</operator> <call><name>LLVMBuildLoad</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_wfuncnop</name></expr></argument>, <argument><expr><literal type="string">"v_wfuncno"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* load window func value / null */</comment>
					<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>l_load_gep1</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_aggvalues</name></expr></argument>, <argument><expr><name>v_wfuncno</name></expr></argument>,
										<argument><expr><literal type="string">"windowvalue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>isnull</name> <operator>=</operator> <call><name>l_load_gep1</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_aggnulls</name></expr></argument>, <argument><expr><name>v_wfuncno</name></expr></argument>,
										 <argument><expr><literal type="string">"windownull"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>v_resvaluep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>isnull</name></expr></argument>, <argument><expr><name>v_resnullp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block>

			<case>case <expr><name>EEOP_SUBPLAN</name></expr>:</case>
				<expr_stmt><expr><call><name>build_EvalXFunc</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><literal type="string">"ExecEvalSubPlan"</literal></expr></argument>,
								<argument><expr><name>v_state</name></expr></argument>, <argument><expr><name>v_econtext</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>EEOP_ALTERNATIVE_SUBPLAN</name></expr>:</case>
				<expr_stmt><expr><call><name>build_EvalXFunc</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><literal type="string">"ExecEvalAlternativeSubPlan"</literal></expr></argument>,
								<argument><expr><name>v_state</name></expr></argument>, <argument><expr><name>v_econtext</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>EEOP_AGG_STRICT_DESERIALIZE</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>FunctionCallInfo</name></type> <name>fcinfo</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>agg_deserialize</name><operator>.</operator><name>fcinfo_data</name></name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_fcinfo</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_argnullp</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_argnull0</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMBasicBlockRef</name></type> <name>b_deserialize</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>b_deserialize</name> <operator>=</operator> <call><name>l_bb_before_v</name><argument_list>(<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
												  <argument><expr><literal type="string">"op.%d.deserialize"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>v_fcinfo</name> <operator>=</operator> <call><name>l_ptr_const</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>,
										   <argument><expr><call><name>l_ptr</name><argument_list>(<argument><expr><name>StructFunctionCallInfoData</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>v_argnullp</name> <operator>=</operator>
						<call><name>LLVMBuildStructGEP</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
										   <argument><expr><name>v_fcinfo</name></expr></argument>,
										   <argument><expr><name>FIELDNO_FUNCTIONCALLINFODATA_ARGNULL</name></expr></argument>,
										   <argument><expr><literal type="string">"v_argnullp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_argnull0</name> <operator>=</operator>
						<call><name>l_load_struct_gep</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_argnullp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"v_argnull0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMBuildCondBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
									<argument><expr><call><name>LLVMBuildICmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
												  <argument><expr><name>LLVMIntEQ</name></expr></argument>,
												  <argument><expr><name>v_argnull0</name></expr></argument>,
												  <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
												  <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><name><name>opblocks</name><index>[<expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>agg_deserialize</name><operator>.</operator><name>jumpnull</name></name></expr>]</index></name></expr></argument>,
									<argument><expr><name>b_deserialize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMPositionBuilderAtEnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_deserialize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block>
				<comment type="block">/* FALLTHROUGH */</comment>

			<case>case <expr><name>EEOP_AGG_DESERIALIZE</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>AggState</name>   <modifier>*</modifier></type><name>aggstate</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>FunctionCallInfo</name></type> <name>fcinfo</name></decl>;</decl_stmt>

					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_retval</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_fcinfo_isnull</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_tmpcontext</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_oldcontext</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>aggstate</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>agg_deserialize</name><operator>.</operator><name>aggstate</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>fcinfo</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>agg_deserialize</name><operator>.</operator><name>fcinfo_data</name></name></expr>;</expr_stmt>

					<expr_stmt><expr><name>v_tmpcontext</name> <operator>=</operator>
						<call><name>l_ptr_const</name><argument_list>(<argument><expr><name><name>aggstate</name><operator>-&gt;</operator><name>tmpcontext</name><operator>-&gt;</operator><name>ecxt_per_tuple_memory</name></name></expr></argument>,
									<argument><expr><call><name>l_ptr</name><argument_list>(<argument><expr><name>StructMemoryContextData</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_oldcontext</name> <operator>=</operator> <call><name>l_mcxt_switch</name><argument_list>(<argument><expr><name>mod</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_tmpcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_retval</name> <operator>=</operator> <call><name>BuildV1Call</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><name>fcinfo</name></expr></argument>,
										   <argument><expr><operator>&amp;</operator><name>v_fcinfo_isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>l_mcxt_switch</name><argument_list>(<argument><expr><name>mod</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_retval</name></expr></argument>, <argument><expr><name>v_resvaluep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_fcinfo_isnull</name></expr></argument>, <argument><expr><name>v_resnullp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block>

			<case>case <expr><name>EEOP_AGG_STRICT_INPUT_CHECK</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>int</name></type>			<name>nargs</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>agg_strict_input_check</name><operator>.</operator><name>nargs</name></name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>bool</name>	   <modifier>*</modifier></type><name>nulls</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>agg_strict_input_check</name><operator>.</operator><name>nulls</name></name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type>			<name>jumpnull</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type>			<name>argno</name></decl>;</decl_stmt>

					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_nullp</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMBasicBlockRef</name> <modifier>*</modifier></type><name>b_checknulls</name></decl>;</decl_stmt>

					<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>nargs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>jumpnull</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>agg_strict_input_check</name><operator>.</operator><name>jumpnull</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_nullp</name> <operator>=</operator> <call><name>l_ptr_const</name><argument_list>(<argument><expr><name>nulls</name></expr></argument>, <argument><expr><call><name>l_ptr</name><argument_list>(<argument><expr><name>TypeStorageBool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* create blocks for checking args */</comment>
					<expr_stmt><expr><name>b_checknulls</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LLVMBasicBlockRef</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<for>for <control>(<init><expr><name>argno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>argno</name> <operator>&lt;</operator> <name>nargs</name></expr>;</condition> <incr><expr><name>argno</name><operator>++</operator></expr></incr>)</control>
					<block>{<block_content>
						<expr_stmt><expr><name><name>b_checknulls</name><index>[<expr><name>argno</name></expr>]</index></name> <operator>=</operator>
							<call><name>l_bb_before_v</name><argument_list>(<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
										  <argument><expr><literal type="string">"op.%d.check-null.%d"</literal></expr></argument>,
										  <argument><expr><name>i</name></expr></argument>, <argument><expr><name>argno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></for>

					<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>b_checknulls</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* strict function, check for NULL args */</comment>
					<for>for <control>(<init><expr><name>argno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>argno</name> <operator>&lt;</operator> <name>nargs</name></expr>;</condition> <incr><expr><name>argno</name><operator>++</operator></expr></incr>)</control>
					<block>{<block_content>
						<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_argno</name> <init>= <expr><call><name>l_int32_const</name><argument_list>(<argument><expr><name>argno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_argisnull</name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>LLVMBasicBlockRef</name></type> <name>b_argnotnull</name></decl>;</decl_stmt>

						<expr_stmt><expr><call><name>LLVMPositionBuilderAtEnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>b_checknulls</name><index>[<expr><name>argno</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<if_stmt><if>if <condition>(<expr><name>argno</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>nargs</name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name>b_argnotnull</name> <operator>=</operator> <name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
						<else>else<block type="pseudo"><block_content>
							<expr_stmt><expr><name>b_argnotnull</name> <operator>=</operator> <name><name>b_checknulls</name><index>[<expr><name>argno</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

						<expr_stmt><expr><name>v_argisnull</name> <operator>=</operator> <call><name>l_load_gep1</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_nullp</name></expr></argument>, <argument><expr><name>v_argno</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><call><name>LLVMBuildCondBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
										<argument><expr><call><name>LLVMBuildICmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
													  <argument><expr><name>LLVMIntEQ</name></expr></argument>,
													  <argument><expr><name>v_argisnull</name></expr></argument>,
													  <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
										<argument><expr><name><name>opblocks</name><index>[<expr><name>jumpnull</name></expr>]</index></name></expr></argument>,
										<argument><expr><name>b_argnotnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></for>

					<break>break;</break>
				</block_content>}</block>

			<case>case <expr><name>EEOP_AGG_INIT_TRANS</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>AggState</name>   <modifier>*</modifier></type><name>aggstate</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>AggStatePerTrans</name></type> <name>pertrans</name></decl>;</decl_stmt>

					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_aggstatep</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_pertransp</name></decl>;</decl_stmt>

					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_allpergroupsp</name></decl>;</decl_stmt>

					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_pergroupp</name></decl>;</decl_stmt>

					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_setoff</name></decl>,
								<decl><type ref="prev"/><name>v_transno</name></decl>;</decl_stmt>

					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_notransvalue</name></decl>;</decl_stmt>

					<decl_stmt><decl><type><name>LLVMBasicBlockRef</name></type> <name>b_init</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>aggstate</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>agg_init_trans</name><operator>.</operator><name>aggstate</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>pertrans</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>agg_init_trans</name><operator>.</operator><name>pertrans</name></name></expr>;</expr_stmt>

					<expr_stmt><expr><name>v_aggstatep</name> <operator>=</operator> <call><name>l_ptr_const</name><argument_list>(<argument><expr><name>aggstate</name></expr></argument>,
											  <argument><expr><call><name>l_ptr</name><argument_list>(<argument><expr><name>StructAggState</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_pertransp</name> <operator>=</operator> <call><name>l_ptr_const</name><argument_list>(<argument><expr><name>pertrans</name></expr></argument>,
											  <argument><expr><call><name>l_ptr</name><argument_list>(<argument><expr><name>StructAggStatePerTransData</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/*
					 * pergroup = &amp;aggstate-&gt;all_pergroups
					 * [op-&gt;d.agg_init_trans_check.setoff]
					 * [op-&gt;d.agg_init_trans_check.transno];
					 */</comment>
					<expr_stmt><expr><name>v_allpergroupsp</name> <operator>=</operator>
						<call><name>l_load_struct_gep</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_aggstatep</name></expr></argument>,
										  <argument><expr><name>FIELDNO_AGGSTATE_ALL_PERGROUPS</name></expr></argument>,
										  <argument><expr><literal type="string">"aggstate.all_pergroups"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_setoff</name> <operator>=</operator> <call><name>l_int32_const</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>agg_init_trans</name><operator>.</operator><name>setoff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_transno</name> <operator>=</operator> <call><name>l_int32_const</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>agg_init_trans</name><operator>.</operator><name>transno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_pergroupp</name> <operator>=</operator>
						<call><name>LLVMBuildGEP</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
									 <argument><expr><call><name>l_load_gep1</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_allpergroupsp</name></expr></argument>, <argument><expr><name>v_setoff</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
									 <argument><expr><operator>&amp;</operator><name>v_transno</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>v_notransvalue</name> <operator>=</operator>
						<call><name>l_load_struct_gep</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_pergroupp</name></expr></argument>,
										  <argument><expr><name>FIELDNO_AGGSTATEPERGROUPDATA_NOTRANSVALUE</name></expr></argument>,
										  <argument><expr><literal type="string">"notransvalue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>b_init</name> <operator>=</operator> <call><name>l_bb_before_v</name><argument_list>(<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
										   <argument><expr><literal type="string">"op.%d.inittrans"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMBuildCondBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
									<argument><expr><call><name>LLVMBuildICmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>LLVMIntEQ</name></expr></argument>, <argument><expr><name>v_notransvalue</name></expr></argument>,
												  <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><name>b_init</name></expr></argument>,
									<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMPositionBuilderAtEnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<block>{<block_content>
						<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_curaggcontext</name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_current_set</name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_aggcontext</name></decl>;</decl_stmt>

						<expr_stmt><expr><name>v_aggcontext</name> <operator>=</operator> <call><name>l_ptr_const</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>agg_init_trans</name><operator>.</operator><name>aggcontext</name></name></expr></argument>,
												   <argument><expr><call><name>l_ptr</name><argument_list>(<argument><expr><name>StructExprContext</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><name>v_current_set</name> <operator>=</operator>
							<call><name>LLVMBuildStructGEP</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
											   <argument><expr><name>v_aggstatep</name></expr></argument>,
											   <argument><expr><name>FIELDNO_AGGSTATE_CURRENT_SET</name></expr></argument>,
											   <argument><expr><literal type="string">"aggstate.current_set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>v_curaggcontext</name> <operator>=</operator>
							<call><name>LLVMBuildStructGEP</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
											   <argument><expr><name>v_aggstatep</name></expr></argument>,
											   <argument><expr><name>FIELDNO_AGGSTATE_CURAGGCONTEXT</name></expr></argument>,
											   <argument><expr><literal type="string">"aggstate.curaggcontext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>l_int32_const</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>agg_init_trans</name><operator>.</operator><name>setno</name></name></expr></argument>)</argument_list></call></expr></argument>,
									   <argument><expr><name>v_current_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_aggcontext</name></expr></argument>,
									   <argument><expr><name>v_curaggcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>v_aggstatep</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>v_pertransp</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>v_pergroupp</name></expr>;</expr_stmt>

						<expr_stmt><expr><call><name>LLVMBuildCall</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
									  <argument><expr><call><name>llvm_get_decl</name><argument_list>(<argument><expr><name>mod</name></expr></argument>, <argument><expr><name>FuncExecAggInitGroup</name></expr></argument>)</argument_list></call></expr></argument>,
									  <argument><expr><name>params</name></expr></argument>, <argument><expr><call><name>lengthof</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr></argument>,
									  <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block>
					<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>agg_init_trans</name><operator>.</operator><name>jumpnull</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<break>break;</break>
				</block_content>}</block>

			<case>case <expr><name>EEOP_AGG_STRICT_TRANS_CHECK</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>AggState</name>   <modifier>*</modifier></type><name>aggstate</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_setoff</name></decl>,
								<decl><type ref="prev"/><name>v_transno</name></decl>;</decl_stmt>

					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_aggstatep</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_allpergroupsp</name></decl>;</decl_stmt>

					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_transnull</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_pergroupp</name></decl>;</decl_stmt>

					<decl_stmt><decl><type><name>int</name></type>			<name>jumpnull</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>agg_strict_trans_check</name><operator>.</operator><name>jumpnull</name></name></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><name>aggstate</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>agg_strict_trans_check</name><operator>.</operator><name>aggstate</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_aggstatep</name> <operator>=</operator> <call><name>l_ptr_const</name><argument_list>(<argument><expr><name>aggstate</name></expr></argument>, <argument><expr><call><name>l_ptr</name><argument_list>(<argument><expr><name>StructAggState</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/*
					 * pergroup = &amp;aggstate-&gt;all_pergroups
					 * [op-&gt;d.agg_strict_trans_check.setoff]
					 * [op-&gt;d.agg_init_trans_check.transno];
					 */</comment>
					<expr_stmt><expr><name>v_allpergroupsp</name> <operator>=</operator>
						<call><name>l_load_struct_gep</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_aggstatep</name></expr></argument>,
										  <argument><expr><name>FIELDNO_AGGSTATE_ALL_PERGROUPS</name></expr></argument>,
										  <argument><expr><literal type="string">"aggstate.all_pergroups"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_setoff</name> <operator>=</operator>
						<call><name>l_int32_const</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>agg_strict_trans_check</name><operator>.</operator><name>setoff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_transno</name> <operator>=</operator>
						<call><name>l_int32_const</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>agg_strict_trans_check</name><operator>.</operator><name>transno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_pergroupp</name> <operator>=</operator>
						<call><name>LLVMBuildGEP</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
									 <argument><expr><call><name>l_load_gep1</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_allpergroupsp</name></expr></argument>, <argument><expr><name>v_setoff</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
									 <argument><expr><operator>&amp;</operator><name>v_transno</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>v_transnull</name> <operator>=</operator>
						<call><name>l_load_struct_gep</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_pergroupp</name></expr></argument>,
										  <argument><expr><name>FIELDNO_AGGSTATEPERGROUPDATA_TRANSVALUEISNULL</name></expr></argument>,
										  <argument><expr><literal type="string">"transnull"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMBuildCondBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
									<argument><expr><call><name>LLVMBuildICmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>LLVMIntEQ</name></expr></argument>, <argument><expr><name>v_transnull</name></expr></argument>,
												  <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><name><name>opblocks</name><index>[<expr><name>jumpnull</name></expr>]</index></name></expr></argument>,
									<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<break>break;</break>
				</block_content>}</block>

			<case>case <expr><name>EEOP_AGG_PLAIN_TRANS_BYVAL</name></expr>:</case>
			<case>case <expr><name>EEOP_AGG_PLAIN_TRANS</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>AggState</name>   <modifier>*</modifier></type><name>aggstate</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>AggStatePerTrans</name></type> <name>pertrans</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>FunctionCallInfo</name></type> <name>fcinfo</name></decl>;</decl_stmt>

					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_aggstatep</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_fcinfo</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_fcinfo_isnull</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_argp</name></decl>,
								<decl><type ref="prev"/><name>v_argnullp</name></decl>;</decl_stmt>

					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_transvaluep</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_transnullp</name></decl>;</decl_stmt>

					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_setoff</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_transno</name></decl>;</decl_stmt>

					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_aggcontext</name></decl>;</decl_stmt>

					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_allpergroupsp</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_current_setp</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_current_pertransp</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_curaggcontext</name></decl>;</decl_stmt>

					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_pertransp</name></decl>;</decl_stmt>

					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_pergroupp</name></decl>;</decl_stmt>

					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_retval</name></decl>;</decl_stmt>

					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_tmpcontext</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_oldcontext</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>aggstate</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>agg_trans</name><operator>.</operator><name>aggstate</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>pertrans</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>agg_trans</name><operator>.</operator><name>pertrans</name></name></expr>;</expr_stmt>

					<expr_stmt><expr><name>fcinfo</name> <operator>=</operator> <operator>&amp;</operator><name><name>pertrans</name><operator>-&gt;</operator><name>transfn_fcinfo</name></name></expr>;</expr_stmt>

					<expr_stmt><expr><name>v_aggstatep</name> <operator>=</operator> <call><name>l_ptr_const</name><argument_list>(<argument><expr><name>aggstate</name></expr></argument>,
											  <argument><expr><call><name>l_ptr</name><argument_list>(<argument><expr><name>StructAggState</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_pertransp</name> <operator>=</operator> <call><name>l_ptr_const</name><argument_list>(<argument><expr><name>pertrans</name></expr></argument>,
											  <argument><expr><call><name>l_ptr</name><argument_list>(<argument><expr><name>StructAggStatePerTransData</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/*
					 * pergroup = &amp;aggstate-&gt;all_pergroups
					 * [op-&gt;d.agg_strict_trans_check.setoff]
					 * [op-&gt;d.agg_init_trans_check.transno];
					 */</comment>
					<expr_stmt><expr><name>v_allpergroupsp</name> <operator>=</operator>
						<call><name>l_load_struct_gep</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_aggstatep</name></expr></argument>,
										  <argument><expr><name>FIELDNO_AGGSTATE_ALL_PERGROUPS</name></expr></argument>,
										  <argument><expr><literal type="string">"aggstate.all_pergroups"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_setoff</name> <operator>=</operator> <call><name>l_int32_const</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>agg_trans</name><operator>.</operator><name>setoff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_transno</name> <operator>=</operator> <call><name>l_int32_const</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>agg_trans</name><operator>.</operator><name>transno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_pergroupp</name> <operator>=</operator>
						<call><name>LLVMBuildGEP</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
									 <argument><expr><call><name>l_load_gep1</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_allpergroupsp</name></expr></argument>, <argument><expr><name>v_setoff</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
									 <argument><expr><operator>&amp;</operator><name>v_transno</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>v_fcinfo</name> <operator>=</operator> <call><name>l_ptr_const</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>,
										   <argument><expr><call><name>l_ptr</name><argument_list>(<argument><expr><name>StructFunctionCallInfoData</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>v_argnullp</name> <operator>=</operator>
						<call><name>LLVMBuildStructGEP</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
										   <argument><expr><name>v_fcinfo</name></expr></argument>,
										   <argument><expr><name>FIELDNO_FUNCTIONCALLINFODATA_ARGNULL</name></expr></argument>,
										   <argument><expr><literal type="string">"v_argnullp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_argp</name> <operator>=</operator>
						<call><name>LLVMBuildStructGEP</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
										   <argument><expr><name>v_fcinfo</name></expr></argument>,
										   <argument><expr><name>FIELDNO_FUNCTIONCALLINFODATA_ARG</name></expr></argument>,
										   <argument><expr><literal type="string">"v_argp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>v_aggcontext</name> <operator>=</operator> <call><name>l_ptr_const</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>agg_trans</name><operator>.</operator><name>aggcontext</name></name></expr></argument>,
											   <argument><expr><call><name>l_ptr</name><argument_list>(<argument><expr><name>StructExprContext</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name>v_current_setp</name> <operator>=</operator>
						<call><name>LLVMBuildStructGEP</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
										   <argument><expr><name>v_aggstatep</name></expr></argument>,
										   <argument><expr><name>FIELDNO_AGGSTATE_CURRENT_SET</name></expr></argument>,
										   <argument><expr><literal type="string">"aggstate.current_set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_curaggcontext</name> <operator>=</operator>
						<call><name>LLVMBuildStructGEP</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
										   <argument><expr><name>v_aggstatep</name></expr></argument>,
										   <argument><expr><name>FIELDNO_AGGSTATE_CURAGGCONTEXT</name></expr></argument>,
										   <argument><expr><literal type="string">"aggstate.curaggcontext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_current_pertransp</name> <operator>=</operator>
						<call><name>LLVMBuildStructGEP</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
										   <argument><expr><name>v_aggstatep</name></expr></argument>,
										   <argument><expr><name>FIELDNO_AGGSTATE_CURPERTRANS</name></expr></argument>,
										   <argument><expr><literal type="string">"aggstate.curpertrans"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* set aggstate globals */</comment>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_aggcontext</name></expr></argument>, <argument><expr><name>v_curaggcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>l_int32_const</name><argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>agg_trans</name><operator>.</operator><name>setno</name></name></expr></argument>)</argument_list></call></expr></argument>,
								   <argument><expr><name>v_current_setp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_pertransp</name></expr></argument>, <argument><expr><name>v_current_pertransp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* invoke transition function in per-tuple context */</comment>
					<expr_stmt><expr><name>v_tmpcontext</name> <operator>=</operator>
						<call><name>l_ptr_const</name><argument_list>(<argument><expr><name><name>aggstate</name><operator>-&gt;</operator><name>tmpcontext</name><operator>-&gt;</operator><name>ecxt_per_tuple_memory</name></name></expr></argument>,
									<argument><expr><call><name>l_ptr</name><argument_list>(<argument><expr><name>StructMemoryContextData</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_oldcontext</name> <operator>=</operator> <call><name>l_mcxt_switch</name><argument_list>(<argument><expr><name>mod</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_tmpcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* store transvalue in fcinfo-&gt;arg/argnull[0] */</comment>
					<expr_stmt><expr><name>v_transvaluep</name> <operator>=</operator>
						<call><name>LLVMBuildStructGEP</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_pergroupp</name></expr></argument>,
										   <argument><expr><name>FIELDNO_AGGSTATEPERGROUPDATA_TRANSVALUE</name></expr></argument>,
										   <argument><expr><literal type="string">"transvalue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>v_transnullp</name> <operator>=</operator>
						<call><name>LLVMBuildStructGEP</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_pergroupp</name></expr></argument>,
										   <argument><expr><name>FIELDNO_AGGSTATEPERGROUPDATA_TRANSVALUEISNULL</name></expr></argument>,
										   <argument><expr><literal type="string">"transnullp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
								   <argument><expr><call><name>LLVMBuildLoad</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_transvaluep</name></expr></argument>,
												 <argument><expr><literal type="string">"transvalue"</literal></expr></argument>)</argument_list></call></expr></argument>,
								   <argument><expr><call><name>LLVMBuildStructGEP</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_argp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
								   <argument><expr><call><name>LLVMBuildLoad</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_transnullp</name></expr></argument>, <argument><expr><literal type="string">"transnull"</literal></expr></argument>)</argument_list></call></expr></argument>,
								   <argument><expr><call><name>LLVMBuildStructGEP</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_argnullp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* and invoke transition function */</comment>
					<expr_stmt><expr><name>v_retval</name> <operator>=</operator> <call><name>BuildV1Call</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><name>fcinfo</name></expr></argument>,
										   <argument><expr><operator>&amp;</operator><name>v_fcinfo_isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/*
					 * For pass-by-ref datatype, must copy the new value into
					 * aggcontext and free the prior transValue.  But if
					 * transfn returned a pointer to its first input, we don't
					 * need to do anything.  Also, if transfn returned a
					 * pointer to a R/W expanded object that is already a
					 * child of the aggcontext, assume we can adopt that value
					 * without copying it.
					 */</comment>
					<if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>EEOP_AGG_PLAIN_TRANS</name></expr>)</condition>
					<block>{<block_content>
						<decl_stmt><decl><type><name>LLVMBasicBlockRef</name></type> <name>b_call</name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>LLVMBasicBlockRef</name></type> <name>b_nocall</name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_fn</name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_transvalue</name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_transnull</name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_newval</name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name><name>params</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

						<expr_stmt><expr><name>b_call</name> <operator>=</operator> <call><name>l_bb_before_v</name><argument_list>(<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
											   <argument><expr><literal type="string">"op.%d.transcall"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>b_nocall</name> <operator>=</operator> <call><name>l_bb_before_v</name><argument_list>(<argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
												 <argument><expr><literal type="string">"op.%d.transnocall"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><name>v_transvalue</name> <operator>=</operator> <call><name>LLVMBuildLoad</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_transvaluep</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>v_transnull</name> <operator>=</operator> <call><name>LLVMBuildLoad</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_transnullp</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<comment type="block">/*
						 * DatumGetPointer(newVal) !=
						 * DatumGetPointer(pergroup-&gt;transValue))
						 */</comment>
						<expr_stmt><expr><call><name>LLVMBuildCondBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
										<argument><expr><call><name>LLVMBuildICmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>LLVMIntEQ</name></expr></argument>,
													  <argument><expr><name>v_transvalue</name></expr></argument>,
													  <argument><expr><name>v_retval</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>,
										<argument><expr><name>b_nocall</name></expr></argument>, <argument><expr><name>b_call</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<comment type="block">/* returned datum not passed datum, reparent */</comment>
						<expr_stmt><expr><call><name>LLVMPositionBuilderAtEnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_call</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>v_aggstatep</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>v_pertransp</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>v_retval</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>LLVMBuildTrunc</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_fcinfo_isnull</name></expr></argument>,
												   <argument><expr><name>TypeParamBool</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>v_transvalue</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>LLVMBuildTrunc</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_transnull</name></expr></argument>,
												   <argument><expr><name>TypeParamBool</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><name>v_fn</name> <operator>=</operator> <call><name>llvm_get_decl</name><argument_list>(<argument><expr><name>mod</name></expr></argument>, <argument><expr><name>FuncExecAggTransReparent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>v_newval</name> <operator>=</operator>
							<call><name>LLVMBuildCall</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_fn</name></expr></argument>,
										  <argument><expr><name>params</name></expr></argument>, <argument><expr><call><name>lengthof</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr></argument>,
										  <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<comment type="block">/* store trans value */</comment>
						<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_newval</name></expr></argument>, <argument><expr><name>v_transvaluep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_fcinfo_isnull</name></expr></argument>, <argument><expr><name>v_transnullp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><call><name>l_mcxt_switch</name><argument_list>(<argument><expr><name>mod</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<comment type="block">/* returned datum passed datum, no need to reparent */</comment>
						<expr_stmt><expr><call><name>LLVMPositionBuilderAtEnd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b_nocall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>

					<comment type="block">/* store trans value */</comment>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_retval</name></expr></argument>, <argument><expr><name>v_transvaluep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_fcinfo_isnull</name></expr></argument>, <argument><expr><name>v_transnullp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>l_mcxt_switch</name><argument_list>(<argument><expr><name>mod</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block>

			<case>case <expr><name>EEOP_AGG_ORDERED_TRANS_DATUM</name></expr>:</case>
				<expr_stmt><expr><call><name>build_EvalXFunc</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><literal type="string">"ExecEvalAggOrderedTransDatum"</literal></expr></argument>,
								<argument><expr><name>v_state</name></expr></argument>, <argument><expr><name>v_econtext</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>EEOP_AGG_ORDERED_TRANS_TUPLE</name></expr>:</case>
				<expr_stmt><expr><call><name>build_EvalXFunc</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><literal type="string">"ExecEvalAggOrderedTransTuple"</literal></expr></argument>,
								<argument><expr><name>v_state</name></expr></argument>, <argument><expr><name>v_econtext</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>LLVMBuildBr</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>opblocks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>EEOP_LAST</name></expr>:</case>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>LLVMDisposeBuilder</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Don't immediately emit function, instead do so the first time the
	 * expression is actually evaluated. That allows to emit a lot of
	 * functions together, avoiding a lot of repeated llvm and memory
	 * remapping overhead.
	 */</comment>
	<block>{<block_content>

		<decl_stmt><decl><type><name>CompiledExprState</name> <modifier>*</modifier></type><name>cstate</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CompiledExprState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>cstate</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cstate</name><operator>-&gt;</operator><name>funcname</name></name> <operator>=</operator> <name>funcname</name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>evalfunc</name></name> <operator>=</operator> <name>ExecRunCompiledExpr</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>evalfunc_private</name></name> <operator>=</operator> <name>cstate</name></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>llvm_leave_fatal_on_oom</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>INSTR_TIME_SET_CURRENT</name><argument_list>(<argument><expr><name>endtime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INSTR_TIME_ACCUM_DIFF</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>instr</name><operator>.</operator><name>generation_counter</name></name></expr></argument>,
						  <argument><expr><name>endtime</name></expr></argument>, <argument><expr><name>starttime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Run compiled expression.
 *
 * This will only be called the first time a JITed expression is called. We
 * first make sure the expression is still up2date, and then get a pointer to
 * the emitted function. The latter can be the first thing that triggers
 * optimizing and emitting all the generated functions.
 */</comment>
<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>ExecRunCompiledExpr</name><parameter_list>(<parameter><decl><type><name>ExprState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isNull</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CompiledExprState</name> <modifier>*</modifier></type><name>cstate</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>evalfunc_private</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ExprStateEvalFunc</name></type> <name>func</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CheckExprStillValid</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>econtext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>llvm_enter_fatal_on_oom</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>func</name> <operator>=</operator> <operator>(</operator><name>ExprStateEvalFunc</name><operator>)</operator> <call><name>llvm_get_function</name><argument_list>(<argument><expr><name><name>cstate</name><operator>-&gt;</operator><name>context</name></name></expr></argument>,
												 <argument><expr><name><name>cstate</name><operator>-&gt;</operator><name>funcname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>llvm_leave_fatal_on_oom</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* remove indirection via this function for future calls */</comment>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>evalfunc</name></name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>

	<return>return <expr><call><name>func</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>econtext</name></expr></argument>, <argument><expr><name>isNull</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>LLVMValueRef</name></type>
<name>BuildV1Call</name><parameter_list>(<parameter><decl><type><name>LLVMJitContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>LLVMBuilderRef</name></type> <name>b</name></decl></parameter>,
			<parameter><decl><type><name>LLVMModuleRef</name></type> <name>mod</name></decl></parameter>, <parameter><decl><type><name>FunctionCallInfo</name></type> <name>fcinfo</name></decl></parameter>,
			<parameter><decl><type><name>LLVMValueRef</name> <modifier>*</modifier></type><name>v_fcinfo_isnull</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_fn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_fcinfo_isnullp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_fcinfo</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>v_fn</name> <operator>=</operator> <call><name>llvm_function_reference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>v_fcinfo</name> <operator>=</operator> <call><name>l_ptr_const</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><call><name>l_ptr</name><argument_list>(<argument><expr><name>StructFunctionCallInfoData</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>v_fcinfo_isnullp</name> <operator>=</operator> <call><name>LLVMBuildStructGEP</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_fcinfo</name></expr></argument>,
										  <argument><expr><name>FIELDNO_FUNCTIONCALLINFODATA_ISNULL</name></expr></argument>,
										  <argument><expr><literal type="string">"v_fcinfo_isnull"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LLVMBuildStore</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><call><name>l_sbool_const</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v_fcinfo_isnullp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>v_retval</name> <operator>=</operator> <call><name>LLVMBuildCall</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_fn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v_fcinfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"funccall"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>v_fcinfo_isnull</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>v_fcinfo_isnull</name> <operator>=</operator> <call><name>LLVMBuildLoad</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_fcinfo_isnullp</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Add lifetime-end annotation, signalling that writes to memory don't
	 * have to be retained (important for inlining potential).
	 */</comment>
	<block>{<block_content>
		<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_lifetime</name> <init>= <expr><call><name>create_LifetimeEnd</name><argument_list>(<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>l_int64_const</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>l_ptr_const</name><argument_list>(<argument><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><call><name>l_ptr</name><argument_list>(<argument><expr><call><name>LLVMInt8Type</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LLVMBuildCall</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_lifetime</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><call><name>lengthof</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>l_int64_const</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>argnull</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>l_ptr_const</name><argument_list>(<argument><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>argnull</name></name></expr></argument>, <argument><expr><call><name>l_ptr</name><argument_list>(<argument><expr><call><name>LLVMInt8Type</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LLVMBuildCall</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_lifetime</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><call><name>lengthof</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>l_int64_const</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>isnull</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>l_ptr_const</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fcinfo</name><operator>-&gt;</operator><name>isnull</name></name></expr></argument>, <argument><expr><call><name>l_ptr</name><argument_list>(<argument><expr><call><name>LLVMInt8Type</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LLVMBuildCall</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>v_lifetime</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><call><name>lengthof</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<return>return <expr><name>v_retval</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Implement an expression step by calling the function funcname.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>build_EvalXFunc</name><parameter_list>(<parameter><decl><type><name>LLVMBuilderRef</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>LLVMModuleRef</name></type> <name>mod</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>funcname</name></decl></parameter>,
				<parameter><decl><type><name>LLVMValueRef</name></type> <name>v_state</name></decl></parameter>, <parameter><decl><type><name>LLVMValueRef</name></type> <name>v_econtext</name></decl></parameter>,
				<parameter><decl><type><name>ExprEvalStep</name> <modifier>*</modifier></type><name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>LLVMTypeRef</name></type> <name>sig</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>v_fn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LLVMTypeRef</name></type> <name><name>param_types</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name>v_fn</name> <operator>=</operator> <call><name>LLVMGetNamedFunction</name><argument_list>(<argument><expr><name>mod</name></expr></argument>, <argument><expr><name>funcname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>v_fn</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>param_types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>l_ptr</name><argument_list>(<argument><expr><name>StructExprState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>param_types</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>l_ptr</name><argument_list>(<argument><expr><name>StructExprEvalStep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>param_types</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>l_ptr</name><argument_list>(<argument><expr><name>StructExprContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>sig</name> <operator>=</operator> <call><name>LLVMFunctionType</name><argument_list>(<argument><expr><call><name>LLVMVoidType</name><argument_list>()</argument_list></call></expr></argument>,
							   <argument><expr><name>param_types</name></expr></argument>, <argument><expr><call><name>lengthof</name><argument_list>(<argument><expr><name>param_types</name></expr></argument>)</argument_list></call></expr></argument>,
							   <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>v_fn</name> <operator>=</operator> <call><name>LLVMAddFunction</name><argument_list>(<argument><expr><name>mod</name></expr></argument>, <argument><expr><name>funcname</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>v_state</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>l_ptr_const</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><call><name>l_ptr</name><argument_list>(<argument><expr><name>StructExprEvalStep</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>v_econtext</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LLVMBuildCall</name><argument_list>(<argument><expr><name>b</name></expr></argument>,
				  <argument><expr><name>v_fn</name></expr></argument>,
				  <argument><expr><name>params</name></expr></argument>, <argument><expr><call><name>lengthof</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>LLVMValueRef</name></type>
<name>create_LifetimeEnd</name><parameter_list>(<parameter><decl><type><name>LLVMModuleRef</name></type> <name>mod</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>LLVMTypeRef</name></type> <name>sig</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LLVMValueRef</name></type> <name>fn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LLVMTypeRef</name></type> <name><name>param_types</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

	<comment type="block">/* LLVM 5+ has a variadic pointer argument */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LLVM_VERSION_MAJOR</name> <operator>&lt;</operator> <literal type="number">5</literal></expr></cpp:if>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nm</name> <init>= <expr><literal type="string">"llvm.lifetime.end"</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nm</name> <init>= <expr><literal type="string">"llvm.lifetime.end.p0i8"</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>fn</name> <operator>=</operator> <call><name>LLVMGetNamedFunction</name><argument_list>(<argument><expr><name>mod</name></expr></argument>, <argument><expr><name>nm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fn</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>fn</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>param_types</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>LLVMInt64Type</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>param_types</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>l_ptr</name><argument_list>(<argument><expr><call><name>LLVMInt8Type</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>sig</name> <operator>=</operator> <call><name>LLVMFunctionType</name><argument_list>(<argument><expr><call><name>LLVMVoidType</name><argument_list>()</argument_list></call></expr></argument>,
						   <argument><expr><name>param_types</name></expr></argument>, <argument><expr><call><name>lengthof</name><argument_list>(<argument><expr><name>param_types</name></expr></argument>)</argument_list></call></expr></argument>,
						   <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>fn</name> <operator>=</operator> <call><name>LLVMAddFunction</name><argument_list>(<argument><expr><name>mod</name></expr></argument>, <argument><expr><name>nm</name></expr></argument>, <argument><expr><name>sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LLVMSetFunctionCallConv</name><argument_list>(<argument><expr><name>fn</name></expr></argument>, <argument><expr><name>LLVMCCallConv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>LLVMGetIntrinsicID</name><argument_list>(<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>fn</name></expr>;</return>
</block_content>}</block></function>
</unit>
