<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/backend/tsearch/wparser_def.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * wparser_def.c
 *		Default text search parser
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 *
 *
 * IDENTIFICATION
 *	  src/backend/tsearch/wparser_def.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_collation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/defrem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsearch/ts_locale.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsearch/ts_public.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsearch/ts_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsearch/ts_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>


<comment type="block">/* Define me to enable tracing of parser behavior */</comment>
<comment type="block">/* #define WPARSER_TRACE */</comment>


<comment type="block">/* Output token categories */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASCIIWORD</name></cpp:macro>		<cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WORD_T</name></cpp:macro>			<cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUMWORD</name></cpp:macro>			<cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMAIL</name></cpp:macro>			<cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>URL_T</name></cpp:macro>			<cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOST</name></cpp:macro>			<cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCIENTIFIC</name></cpp:macro>		<cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VERSIONNUMBER</name></cpp:macro>	<cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUMPARTHWORD</name></cpp:macro>	<cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARTHWORD</name></cpp:macro>		<cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASCIIPARTHWORD</name></cpp:macro>	<cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPACE</name></cpp:macro>			<cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAG_T</name></cpp:macro>			<cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTOCOL</name></cpp:macro>		<cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUMHWORD</name></cpp:macro>		<cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASCIIHWORD</name></cpp:macro>		<cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HWORD</name></cpp:macro>			<cpp:value>17</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>URLPATH</name></cpp:macro>			<cpp:value>18</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILEPATH</name></cpp:macro>		<cpp:value>19</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECIMAL_T</name></cpp:macro>		<cpp:value>20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGNEDINT</name></cpp:macro>		<cpp:value>21</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNSIGNEDINT</name></cpp:macro>		<cpp:value>22</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XMLENTITY</name></cpp:macro>		<cpp:value>23</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LASTNUM</name></cpp:macro>			<cpp:value>23</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>tok_alias</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="string">""</literal></expr>,
	<expr><literal type="string">"asciiword"</literal></expr>,
	<expr><literal type="string">"word"</literal></expr>,
	<expr><literal type="string">"numword"</literal></expr>,
	<expr><literal type="string">"email"</literal></expr>,
	<expr><literal type="string">"url"</literal></expr>,
	<expr><literal type="string">"host"</literal></expr>,
	<expr><literal type="string">"sfloat"</literal></expr>,
	<expr><literal type="string">"version"</literal></expr>,
	<expr><literal type="string">"hword_numpart"</literal></expr>,
	<expr><literal type="string">"hword_part"</literal></expr>,
	<expr><literal type="string">"hword_asciipart"</literal></expr>,
	<expr><literal type="string">"blank"</literal></expr>,
	<expr><literal type="string">"tag"</literal></expr>,
	<expr><literal type="string">"protocol"</literal></expr>,
	<expr><literal type="string">"numhword"</literal></expr>,
	<expr><literal type="string">"asciihword"</literal></expr>,
	<expr><literal type="string">"hword"</literal></expr>,
	<expr><literal type="string">"url_path"</literal></expr>,
	<expr><literal type="string">"file"</literal></expr>,
	<expr><literal type="string">"float"</literal></expr>,
	<expr><literal type="string">"int"</literal></expr>,
	<expr><literal type="string">"uint"</literal></expr>,
	<expr><literal type="string">"entity"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>lex_descr</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="string">""</literal></expr>,
	<expr><literal type="string">"Word, all ASCII"</literal></expr>,
	<expr><literal type="string">"Word, all letters"</literal></expr>,
	<expr><literal type="string">"Word, letters and digits"</literal></expr>,
	<expr><literal type="string">"Email address"</literal></expr>,
	<expr><literal type="string">"URL"</literal></expr>,
	<expr><literal type="string">"Host"</literal></expr>,
	<expr><literal type="string">"Scientific notation"</literal></expr>,
	<expr><literal type="string">"Version number"</literal></expr>,
	<expr><literal type="string">"Hyphenated word part, letters and digits"</literal></expr>,
	<expr><literal type="string">"Hyphenated word part, all letters"</literal></expr>,
	<expr><literal type="string">"Hyphenated word part, all ASCII"</literal></expr>,
	<expr><literal type="string">"Space symbols"</literal></expr>,
	<expr><literal type="string">"XML tag"</literal></expr>,
	<expr><literal type="string">"Protocol head"</literal></expr>,
	<expr><literal type="string">"Hyphenated word, letters and digits"</literal></expr>,
	<expr><literal type="string">"Hyphenated word, all ASCII"</literal></expr>,
	<expr><literal type="string">"Hyphenated word, all letters"</literal></expr>,
	<expr><literal type="string">"URL path"</literal></expr>,
	<expr><literal type="string">"File or path name"</literal></expr>,
	<expr><literal type="string">"Decimal notation"</literal></expr>,
	<expr><literal type="string">"Signed integer"</literal></expr>,
	<expr><literal type="string">"Unsigned integer"</literal></expr>,
	<expr><literal type="string">"XML entity"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>


<comment type="block">/* Parser states */</comment>

<typedef>typedef <type><enum>enum
<block>{
	<decl><name>TPS_Base</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
	<decl><name>TPS_InNumWord</name></decl>,
	<decl><name>TPS_InAsciiWord</name></decl>,
	<decl><name>TPS_InWord</name></decl>,
	<decl><name>TPS_InUnsignedInt</name></decl>,
	<decl><name>TPS_InSignedIntFirst</name></decl>,
	<decl><name>TPS_InSignedInt</name></decl>,
	<decl><name>TPS_InSpace</name></decl>,
	<decl><name>TPS_InUDecimalFirst</name></decl>,
	<decl><name>TPS_InUDecimal</name></decl>,
	<decl><name>TPS_InDecimalFirst</name></decl>,
	<decl><name>TPS_InDecimal</name></decl>,
	<decl><name>TPS_InVerVersion</name></decl>,
	<decl><name>TPS_InSVerVersion</name></decl>,
	<decl><name>TPS_InVersionFirst</name></decl>,
	<decl><name>TPS_InVersion</name></decl>,
	<decl><name>TPS_InMantissaFirst</name></decl>,
	<decl><name>TPS_InMantissaSign</name></decl>,
	<decl><name>TPS_InMantissa</name></decl>,
	<decl><name>TPS_InXMLEntityFirst</name></decl>,
	<decl><name>TPS_InXMLEntity</name></decl>,
	<decl><name>TPS_InXMLEntityNumFirst</name></decl>,
	<decl><name>TPS_InXMLEntityNum</name></decl>,
	<decl><name>TPS_InXMLEntityHexNumFirst</name></decl>,
	<decl><name>TPS_InXMLEntityHexNum</name></decl>,
	<decl><name>TPS_InXMLEntityEnd</name></decl>,
	<decl><name>TPS_InTagFirst</name></decl>,
	<decl><name>TPS_InXMLBegin</name></decl>,
	<decl><name>TPS_InTagCloseFirst</name></decl>,
	<decl><name>TPS_InTagName</name></decl>,
	<decl><name>TPS_InTagBeginEnd</name></decl>,
	<decl><name>TPS_InTag</name></decl>,
	<decl><name>TPS_InTagEscapeK</name></decl>,
	<decl><name>TPS_InTagEscapeKK</name></decl>,
	<decl><name>TPS_InTagBackSleshed</name></decl>,
	<decl><name>TPS_InTagEnd</name></decl>,
	<decl><name>TPS_InCommentFirst</name></decl>,
	<decl><name>TPS_InCommentLast</name></decl>,
	<decl><name>TPS_InComment</name></decl>,
	<decl><name>TPS_InCloseCommentFirst</name></decl>,
	<decl><name>TPS_InCloseCommentLast</name></decl>,
	<decl><name>TPS_InCommentEnd</name></decl>,
	<decl><name>TPS_InHostFirstDomain</name></decl>,
	<decl><name>TPS_InHostDomainSecond</name></decl>,
	<decl><name>TPS_InHostDomain</name></decl>,
	<decl><name>TPS_InPortFirst</name></decl>,
	<decl><name>TPS_InPort</name></decl>,
	<decl><name>TPS_InHostFirstAN</name></decl>,
	<decl><name>TPS_InHost</name></decl>,
	<decl><name>TPS_InEmail</name></decl>,
	<decl><name>TPS_InFileFirst</name></decl>,
	<decl><name>TPS_InFileTwiddle</name></decl>,
	<decl><name>TPS_InPathFirst</name></decl>,
	<decl><name>TPS_InPathFirstFirst</name></decl>,
	<decl><name>TPS_InPathSecond</name></decl>,
	<decl><name>TPS_InFile</name></decl>,
	<decl><name>TPS_InFileNext</name></decl>,
	<decl><name>TPS_InURLPathFirst</name></decl>,
	<decl><name>TPS_InURLPathStart</name></decl>,
	<decl><name>TPS_InURLPath</name></decl>,
	<decl><name>TPS_InFURL</name></decl>,
	<decl><name>TPS_InProtocolFirst</name></decl>,
	<decl><name>TPS_InProtocolSecond</name></decl>,
	<decl><name>TPS_InProtocolEnd</name></decl>,
	<decl><name>TPS_InHyphenAsciiWordFirst</name></decl>,
	<decl><name>TPS_InHyphenAsciiWord</name></decl>,
	<decl><name>TPS_InHyphenWordFirst</name></decl>,
	<decl><name>TPS_InHyphenWord</name></decl>,
	<decl><name>TPS_InHyphenNumWordFirst</name></decl>,
	<decl><name>TPS_InHyphenNumWord</name></decl>,
	<decl><name>TPS_InHyphenDigitLookahead</name></decl>,
	<decl><name>TPS_InParseHyphen</name></decl>,
	<decl><name>TPS_InParseHyphenHyphen</name></decl>,
	<decl><name>TPS_InHyphenWordPart</name></decl>,
	<decl><name>TPS_InHyphenAsciiWordPart</name></decl>,
	<decl><name>TPS_InHyphenNumWordPart</name></decl>,
	<decl><name>TPS_InHyphenUnsignedInt</name></decl>,
	<decl><name>TPS_Null</name></decl>					<comment type="block">/* last state (fake value) */</comment>
}</block></enum></type> <name>TParserState</name>;</typedef>

<comment type="block">/* forward declaration */</comment>
<struct_decl>struct <name>TParser</name>;</struct_decl>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>TParserCharTest</name>) <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>TParser</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>	<comment type="block">/* any p_is* functions
													 * except p_iseq */</comment>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>TParserSpecial</name>) <parameter_list>(<parameter><decl><type><name><name>struct</name> <name>TParser</name></name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>	<comment type="block">/* special handler for
													 * special cases... */</comment>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>TParserCharTest</name></type> <name>isclass</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name>c</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint16</name></type>		<name>flags</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TParserState</name></type> <name>tostate</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TParserSpecial</name></type> <name>special</name></decl>;</decl_stmt>
}</block></struct></type> <name>TParserStateActionItem</name>;</typedef>

<comment type="block">/* Flag bits in TParserStateActionItem.flags */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_NEXT</name></cpp:macro>		<cpp:value>0x0000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_BINGO</name></cpp:macro>		<cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_POP</name></cpp:macro>		<cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_PUSH</name></cpp:macro>		<cpp:value>0x0004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_RERUN</name></cpp:macro>		<cpp:value>0x0008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_CLEAR</name></cpp:macro>		<cpp:value>0x0010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_MERGE</name></cpp:macro>		<cpp:value>0x0020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_CLRALL</name></cpp:macro>	<cpp:value>0x0040</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>TParserPosition</name>
<block>{
	<decl_stmt><decl><type><name>int</name></type>			<name>posbyte</name></decl>;</decl_stmt>		<comment type="block">/* position of parser in bytes */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>poschar</name></decl>;</decl_stmt>		<comment type="block">/* position of parser in characters */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>charlen</name></decl>;</decl_stmt>		<comment type="block">/* length of current char */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>lenbytetoken</name></decl>;</decl_stmt>	<comment type="block">/* length of token-so-far in bytes */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>lenchartoken</name></decl>;</decl_stmt>	<comment type="block">/* and in chars */</comment>
	<decl_stmt><decl><type><name>TParserState</name></type> <name>state</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>TParserPosition</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>TParserStateActionItem</name> <modifier>*</modifier></type><name>pushedAtAction</name></decl>;</decl_stmt>
}</block></struct></type> <name>TParserPosition</name>;</typedef>

<typedef>typedef <type><struct>struct <name>TParser</name>
<block>{
	<comment type="block">/* string and position information */</comment>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>			<comment type="block">/* multibyte string */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>lenstr</name></decl>;</decl_stmt>			<comment type="block">/* length of mbstring */</comment>
	<decl_stmt><decl><type><name>wchar_t</name>    <modifier>*</modifier></type><name>wstr</name></decl>;</decl_stmt>			<comment type="block">/* wide character string */</comment>
	<decl_stmt><decl><type><name>pg_wchar</name>   <modifier>*</modifier></type><name>pgwstr</name></decl>;</decl_stmt>			<comment type="block">/* wide character string for C-locale */</comment>
	<decl_stmt><decl><type><name>bool</name></type>		<name>usewide</name></decl>;</decl_stmt>

	<comment type="block">/* State of parse */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>charmaxlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TParserPosition</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>ignore</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>wanthost</name></decl>;</decl_stmt>

	<comment type="block">/* silly char */</comment>
	<decl_stmt><decl><type><name>char</name></type>		<name>c</name></decl>;</decl_stmt>

	<comment type="block">/* out */</comment>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>lenbytetoken</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>lenchartoken</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>type</name></decl>;</decl_stmt>
}</block></struct></type> <name>TParser</name>;</typedef>


<comment type="block">/* forward decls here */</comment>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>TParserGet</name><parameter_list>(<parameter><decl><type><name>TParser</name> <modifier>*</modifier></type><name>prs</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><specifier>static</specifier> <name>TParserPosition</name> <modifier>*</modifier></type>
<name>newTParserPosition</name><parameter_list>(<parameter><decl><type><name>TParserPosition</name> <modifier>*</modifier></type><name>prev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TParserPosition</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><operator>(</operator><name>TParserPosition</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TParserPosition</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TParserPosition</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TParserPosition</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>pushedAtAction</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>TParser</name> <modifier>*</modifier></type>
<name>TParserInit</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TParser</name>    <modifier>*</modifier></type><name>prs</name> <init>= <expr><operator>(</operator><name>TParser</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TParser</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>charmaxlen</name></name> <operator>=</operator> <call><name>pg_database_encoding_max_length</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>str</name></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>lenstr</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Use wide char code only when max encoding length &gt; 1.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>prs</name><operator>-&gt;</operator><name>charmaxlen</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Oid</name></type>			<name>collation</name> <init>= <expr><name>DEFAULT_COLLATION_OID</name></expr></init></decl>;</decl_stmt>	<comment type="block">/* TODO */</comment>
		<decl_stmt><decl><type><name>pg_locale_t</name></type> <name>mylocale</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>	<comment type="block">/* TODO */</comment>

		<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>usewide</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>lc_ctype_is_c</name><argument_list>(<argument><expr><name>collation</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * char2wchar doesn't work for C-locale and sizeof(pg_wchar) could
			 * be different from sizeof(wchar_t)
			 */</comment>
			<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>pgwstr</name></name> <operator>=</operator> <operator>(</operator><name>pg_wchar</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pg_wchar</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>prs</name><operator>-&gt;</operator><name>lenstr</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pg_mb2wchar_with_len</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>prs</name><operator>-&gt;</operator><name>pgwstr</name></name></expr></argument>, <argument><expr><name><name>prs</name><operator>-&gt;</operator><name>lenstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>wstr</name></name> <operator>=</operator> <operator>(</operator><name>wchar_t</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>prs</name><operator>-&gt;</operator><name>lenstr</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>char2wchar</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>wstr</name></name></expr></argument>, <argument><expr><name><name>prs</name><operator>-&gt;</operator><name>lenstr</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>prs</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>prs</name><operator>-&gt;</operator><name>lenstr</name></name></expr></argument>,
					   <argument><expr><name>mylocale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>usewide</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <call><name>newTParserPosition</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>TPS_Base</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WPARSER_TRACE</name></cpp:ifdef>

	<comment type="block">/*
	 * Use of %.*s here is a bit risky since it can misbehave if the data is
	 * not in what libc thinks is the prevailing encoding.  However, since
	 * this is just a debugging aid, we choose to live with that.
	 */</comment>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"parsing \"%.*s\"\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><name>prs</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * As an alternative to a full TParserInit one can create a
 * TParserCopy which basically is a regular TParser without a private
 * copy of the string - instead it uses the one from another TParser.
 * This is useful because at some places TParsers are created
 * recursively and the repeated copying around of the strings can
 * cause major inefficiency if the source string is long.
 * The new parser starts parsing at the original's current position.
 *
 * Obviously one must not close the original TParser before the copy.
 */</comment>
<function><type><specifier>static</specifier> <name>TParser</name> <modifier>*</modifier></type>
<name>TParserCopyInit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TParser</name> <modifier>*</modifier></type><name>orig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TParser</name>    <modifier>*</modifier></type><name>prs</name> <init>= <expr><operator>(</operator><name>TParser</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TParser</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>charmaxlen</name></name> <operator>=</operator> <name><name>orig</name><operator>-&gt;</operator><name>charmaxlen</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>str</name></name> <operator>=</operator> <name><name>orig</name><operator>-&gt;</operator><name>str</name></name> <operator>+</operator> <name><name>orig</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>posbyte</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>lenstr</name></name> <operator>=</operator> <name><name>orig</name><operator>-&gt;</operator><name>lenstr</name></name> <operator>-</operator> <name><name>orig</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>posbyte</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>usewide</name></name> <operator>=</operator> <name><name>orig</name><operator>-&gt;</operator><name>usewide</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>orig</name><operator>-&gt;</operator><name>pgwstr</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>pgwstr</name></name> <operator>=</operator> <name><name>orig</name><operator>-&gt;</operator><name>pgwstr</name></name> <operator>+</operator> <name><name>orig</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>poschar</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>orig</name><operator>-&gt;</operator><name>wstr</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>wstr</name></name> <operator>=</operator> <name><name>orig</name><operator>-&gt;</operator><name>wstr</name></name> <operator>+</operator> <name><name>orig</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>poschar</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <call><name>newTParserPosition</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>TPS_Base</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WPARSER_TRACE</name></cpp:ifdef>
	<comment type="block">/* See note above about %.*s */</comment>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"parsing copy of \"%.*s\"\n"</literal></expr></argument>, <argument><expr><name><name>prs</name><operator>-&gt;</operator><name>lenstr</name></name></expr></argument>, <argument><expr><name><name>prs</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><name>prs</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>TParserClose</name><parameter_list>(<parameter><decl><type><name>TParser</name> <modifier>*</modifier></type><name>prs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<while>while <condition>(<expr><name><name>prs</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>TParserPosition</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>prev</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name><name>prs</name><operator>-&gt;</operator><name>wstr</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>wstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>prs</name><operator>-&gt;</operator><name>pgwstr</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>pgwstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WPARSER_TRACE</name></cpp:ifdef>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"closing parser\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>prs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Close a parser created with TParserCopyInit
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>TParserCopyClose</name><parameter_list>(<parameter><decl><type><name>TParser</name> <modifier>*</modifier></type><name>prs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<while>while <condition>(<expr><name><name>prs</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>TParserPosition</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>prev</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
	</block_content>}</block></while>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WPARSER_TRACE</name></cpp:ifdef>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"closing parser copy\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>prs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Character-type support functions, equivalent to is* macros, but
 * working with any possible encodings and locales. Notes:
 *	- with multibyte encoding and C-locale isw* function may fail
 *	  or give wrong result.
 *	- multibyte encoding and C-locale often are used for
 *	  Asian languages.
 *	- if locale is C then we use pgwstr instead of wstr.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>p_iswhat</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>nonascii</name></type></parameter>)</parameter_list></cpp:macro>											\
																			\
<cpp:value>static int																	\
p_is##type(TParser *prs)													\
{																			\
	Assert(prs-&gt;state);														\
	if (prs-&gt;usewide)														\
	{																		\
		if (prs-&gt;pgwstr)													\
		{																	\
			unsigned int c = *(prs-&gt;pgwstr + prs-&gt;state-&gt;poschar);			\
			if (c &gt; 0x7f)													\
				return nonascii;											\
			return is##type(c);												\
		}																	\
		return isw##type(*(prs-&gt;wstr + prs-&gt;state-&gt;poschar));				\
	}																		\
	return is##type(*(unsigned char *) (prs-&gt;str + prs-&gt;state-&gt;posbyte));	\
}																			\
																			\
static int																	\
p_isnot##type(TParser *prs)													\
{																			\
	return !p_is##type(prs);												\
}</cpp:value></cpp:define>

<comment type="block">/*
 * In C locale with a multibyte encoding, any non-ASCII symbol is considered
 * an alpha character, but not a member of other char classes.
 */</comment>
<macro><name>p_iswhat</name><argument_list>(<argument>alnum</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>p_iswhat</name><argument_list>(<argument>alpha</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
<macro><name>p_iswhat</name><argument_list>(<argument>digit</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>p_iswhat</name><argument_list>(<argument>lower</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>p_iswhat</name><argument_list>(<argument>print</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>p_iswhat</name><argument_list>(<argument>punct</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>p_iswhat</name><argument_list>(<argument>space</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>p_iswhat</name><argument_list>(<argument>upper</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>
<macro><name>p_iswhat</name><argument_list>(<argument>xdigit</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<comment type="block">/* p_iseq should be used only for ascii symbols */</comment>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>p_iseq</name><parameter_list>(<parameter><decl><type><name>TParser</name> <modifier>*</modifier></type><name>prs</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>charlen</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name><name>prs</name><operator>-&gt;</operator><name>str</name></name> <operator>+</operator> <name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>posbyte</name></name><operator>)</operator> <operator>==</operator> <name>c</name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>p_isEOF</name><parameter_list>(<parameter><decl><type><name>TParser</name> <modifier>*</modifier></type><name>prs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>posbyte</name></name> <operator>==</operator> <name><name>prs</name><operator>-&gt;</operator><name>lenstr</name></name> <operator>||</operator> <name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>charlen</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>p_iseqC</name><parameter_list>(<parameter><decl><type><name>TParser</name> <modifier>*</modifier></type><name>prs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>p_iseq</name><argument_list>(<argument><expr><name>prs</name></expr></argument>, <argument><expr><name><name>prs</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>p_isneC</name><parameter_list>(<parameter><decl><type><name>TParser</name> <modifier>*</modifier></type><name>prs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>!</operator><call><name>p_iseq</name><argument_list>(<argument><expr><name>prs</name></expr></argument>, <argument><expr><name><name>prs</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>p_isascii</name><parameter_list>(<parameter><decl><type><name>TParser</name> <modifier>*</modifier></type><name>prs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>charlen</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>isascii</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><operator>(</operator><name><name>prs</name><operator>-&gt;</operator><name>str</name></name> <operator>+</operator> <name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>posbyte</name></name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>p_isasclet</name><parameter_list>(<parameter><decl><type><name>TParser</name> <modifier>*</modifier></type><name>prs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><ternary><condition><expr><operator>(</operator><call><name>p_isascii</name><argument_list>(<argument><expr><name>prs</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>p_isalpha</name><argument_list>(<argument><expr><name>prs</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>p_isurlchar</name><parameter_list>(<parameter><decl><type><name>TParser</name> <modifier>*</modifier></type><name>prs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name>ch</name></decl>;</decl_stmt>

	<comment type="block">/* no non-ASCII need apply */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>charlen</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>prs</name><operator>-&gt;</operator><name>str</name></name> <operator>+</operator> <name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>posbyte</name></name><operator>)</operator></expr>;</expr_stmt>
	<comment type="block">/* no spaces or control characters */</comment>
	<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&lt;=</operator> <literal type="number">0x20</literal> <operator>||</operator> <name>ch</name> <operator>&gt;=</operator> <literal type="number">0x7F</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	<comment type="block">/* reject characters disallowed by RFC 3986 */</comment>
	<switch>switch <condition>(<expr><name>ch</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><literal type="char">'"'</literal></expr>:</case>
		<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>
		<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>
		<case>case <expr><literal type="char">'\\'</literal></expr>:</case>
		<case>case <expr><literal type="char">'^'</literal></expr>:</case>
		<case>case <expr><literal type="char">'`'</literal></expr>:</case>
		<case>case <expr><literal type="char">'{'</literal></expr>:</case>
		<case>case <expr><literal type="char">'|'</literal></expr>:</case>
		<case>case <expr><literal type="char">'}'</literal></expr>:</case>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></switch>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* deliberately suppress unused-function complaints for the above */</comment>
<function_decl><type><name>void</name></type>		<name>_make_compiler_happy</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function><type><name>void</name></type>
<name>_make_compiler_happy</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>p_isalnum</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>p_isnotalnum</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>p_isalpha</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>p_isnotalpha</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>p_isdigit</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>p_isnotdigit</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>p_islower</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>p_isnotlower</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>p_isprint</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>p_isnotprint</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>p_ispunct</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>p_isnotpunct</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>p_isspace</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>p_isnotspace</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>p_isupper</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>p_isnotupper</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>p_isxdigit</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>p_isnotxdigit</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>p_isEOF</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>p_iseqC</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>p_isneC</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>SpecialTags</name><parameter_list>(<parameter><decl><type><name>TParser</name> <modifier>*</modifier></type><name>prs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>lenchartoken</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><literal type="number">8</literal></expr>:</case>					<comment type="block">/* &lt;/script */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>pg_strncasecmp</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><literal type="string">"&lt;/script"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>ignore</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">7</literal></expr>:</case>					<comment type="block">/* &lt;script || &lt;/style */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>pg_strncasecmp</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><literal type="string">"&lt;/style"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>ignore</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>pg_strncasecmp</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><literal type="string">"&lt;script"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>ignore</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">6</literal></expr>:</case>					<comment type="block">/* &lt;style */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>pg_strncasecmp</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>token</name></name></expr></argument>, <argument><expr><literal type="string">"&lt;style"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>ignore</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<default>default:</default>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SpecialFURL</name><parameter_list>(<parameter><decl><type><name>TParser</name> <modifier>*</modifier></type><name>prs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>wanthost</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>posbyte</name></name> <operator>-=</operator> <name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>lenbytetoken</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>poschar</name></name> <operator>-=</operator> <name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>lenchartoken</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SpecialHyphen</name><parameter_list>(<parameter><decl><type><name>TParser</name> <modifier>*</modifier></type><name>prs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>posbyte</name></name> <operator>-=</operator> <name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>lenbytetoken</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>poschar</name></name> <operator>-=</operator> <name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>lenchartoken</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>SpecialVerVersion</name><parameter_list>(<parameter><decl><type><name>TParser</name> <modifier>*</modifier></type><name>prs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>posbyte</name></name> <operator>-=</operator> <name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>lenbytetoken</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>poschar</name></name> <operator>-=</operator> <name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>lenchartoken</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>lenbytetoken</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>lenchartoken</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>p_isstophost</name><parameter_list>(<parameter><decl><type><name>TParser</name> <modifier>*</modifier></type><name>prs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>prs</name><operator>-&gt;</operator><name>wanthost</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>wanthost</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>p_isignore</name><parameter_list>(<parameter><decl><type><name>TParser</name> <modifier>*</modifier></type><name>prs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>prs</name><operator>-&gt;</operator><name>ignore</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>p_ishost</name><parameter_list>(<parameter><decl><type><name>TParser</name> <modifier>*</modifier></type><name>prs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TParser</name>    <modifier>*</modifier></type><name>tmpprs</name> <init>= <expr><call><name>TParserCopyInit</name><argument_list>(<argument><expr><name>prs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>tmpprs</name><operator>-&gt;</operator><name>wanthost</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>TParserGet</name><argument_list>(<argument><expr><name>tmpprs</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>tmpprs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>HOST</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>posbyte</name></name> <operator>+=</operator> <name><name>tmpprs</name><operator>-&gt;</operator><name>lenbytetoken</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>poschar</name></name> <operator>+=</operator> <name><name>tmpprs</name><operator>-&gt;</operator><name>lenchartoken</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>lenbytetoken</name></name> <operator>+=</operator> <name><name>tmpprs</name><operator>-&gt;</operator><name>lenbytetoken</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>lenchartoken</name></name> <operator>+=</operator> <name><name>tmpprs</name><operator>-&gt;</operator><name>lenchartoken</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>charlen</name></name> <operator>=</operator> <name><name>tmpprs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>charlen</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>TParserCopyClose</name><argument_list>(<argument><expr><name>tmpprs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>p_isURLPath</name><parameter_list>(<parameter><decl><type><name>TParser</name> <modifier>*</modifier></type><name>prs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TParser</name>    <modifier>*</modifier></type><name>tmpprs</name> <init>= <expr><call><name>TParserCopyInit</name><argument_list>(<argument><expr><name>prs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>tmpprs</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <call><name>newTParserPosition</name><argument_list>(<argument><expr><name><name>tmpprs</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tmpprs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>TPS_InURLPathFirst</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>TParserGet</name><argument_list>(<argument><expr><name>tmpprs</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>tmpprs</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>URLPATH</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>posbyte</name></name> <operator>+=</operator> <name><name>tmpprs</name><operator>-&gt;</operator><name>lenbytetoken</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>poschar</name></name> <operator>+=</operator> <name><name>tmpprs</name><operator>-&gt;</operator><name>lenchartoken</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>lenbytetoken</name></name> <operator>+=</operator> <name><name>tmpprs</name><operator>-&gt;</operator><name>lenbytetoken</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>lenchartoken</name></name> <operator>+=</operator> <name><name>tmpprs</name><operator>-&gt;</operator><name>lenchartoken</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>charlen</name></name> <operator>=</operator> <name><name>tmpprs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>charlen</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>TParserCopyClose</name><argument_list>(<argument><expr><name>tmpprs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * returns true if current character has zero display length or
 * it's a special sign in several languages. Such characters
 * aren't a word-breaker although they aren't an isalpha.
 * In beginning of word they aren't a part of it.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>p_isspecial</name><parameter_list>(<parameter><decl><type><name>TParser</name> <modifier>*</modifier></type><name>prs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * pg_dsplen could return -1 which means error or control character
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>pg_dsplen</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>str</name></name> <operator>+</operator> <name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>posbyte</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Unicode Characters in the 'Mark, Spacing Combining' Category That
	 * characters are not alpha although they are not breakers of word too.
	 * Check that only in utf encoding, because other encodings aren't
	 * supported by postgres or even exists.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>GetDatabaseEncoding</name><argument_list>()</argument_list></call> <operator>==</operator> <name>PG_UTF8</name> <operator>&amp;&amp;</operator> <name><name>prs</name><operator>-&gt;</operator><name>usewide</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>pg_wchar</name></type> <name><name>strange_letter</name><index>[]</index></name> <init>= <expr><block>{
			<comment type="block">/*
			 * use binary search, so elements should be ordered
			 */</comment>
			<expr><literal type="number">0x0903</literal></expr>,				<comment type="block">/* DEVANAGARI SIGN VISARGA */</comment>
			<expr><literal type="number">0x093E</literal></expr>,				<comment type="block">/* DEVANAGARI VOWEL SIGN AA */</comment>
			<expr><literal type="number">0x093F</literal></expr>,				<comment type="block">/* DEVANAGARI VOWEL SIGN I */</comment>
			<expr><literal type="number">0x0940</literal></expr>,				<comment type="block">/* DEVANAGARI VOWEL SIGN II */</comment>
			<expr><literal type="number">0x0949</literal></expr>,				<comment type="block">/* DEVANAGARI VOWEL SIGN CANDRA O */</comment>
			<expr><literal type="number">0x094A</literal></expr>,				<comment type="block">/* DEVANAGARI VOWEL SIGN SHORT O */</comment>
			<expr><literal type="number">0x094B</literal></expr>,				<comment type="block">/* DEVANAGARI VOWEL SIGN O */</comment>
			<expr><literal type="number">0x094C</literal></expr>,				<comment type="block">/* DEVANAGARI VOWEL SIGN AU */</comment>
			<expr><literal type="number">0x0982</literal></expr>,				<comment type="block">/* BENGALI SIGN ANUSVARA */</comment>
			<expr><literal type="number">0x0983</literal></expr>,				<comment type="block">/* BENGALI SIGN VISARGA */</comment>
			<expr><literal type="number">0x09BE</literal></expr>,				<comment type="block">/* BENGALI VOWEL SIGN AA */</comment>
			<expr><literal type="number">0x09BF</literal></expr>,				<comment type="block">/* BENGALI VOWEL SIGN I */</comment>
			<expr><literal type="number">0x09C0</literal></expr>,				<comment type="block">/* BENGALI VOWEL SIGN II */</comment>
			<expr><literal type="number">0x09C7</literal></expr>,				<comment type="block">/* BENGALI VOWEL SIGN E */</comment>
			<expr><literal type="number">0x09C8</literal></expr>,				<comment type="block">/* BENGALI VOWEL SIGN AI */</comment>
			<expr><literal type="number">0x09CB</literal></expr>,				<comment type="block">/* BENGALI VOWEL SIGN O */</comment>
			<expr><literal type="number">0x09CC</literal></expr>,				<comment type="block">/* BENGALI VOWEL SIGN AU */</comment>
			<expr><literal type="number">0x09D7</literal></expr>,				<comment type="block">/* BENGALI AU LENGTH MARK */</comment>
			<expr><literal type="number">0x0A03</literal></expr>,				<comment type="block">/* GURMUKHI SIGN VISARGA */</comment>
			<expr><literal type="number">0x0A3E</literal></expr>,				<comment type="block">/* GURMUKHI VOWEL SIGN AA */</comment>
			<expr><literal type="number">0x0A3F</literal></expr>,				<comment type="block">/* GURMUKHI VOWEL SIGN I */</comment>
			<expr><literal type="number">0x0A40</literal></expr>,				<comment type="block">/* GURMUKHI VOWEL SIGN II */</comment>
			<expr><literal type="number">0x0A83</literal></expr>,				<comment type="block">/* GUJARATI SIGN VISARGA */</comment>
			<expr><literal type="number">0x0ABE</literal></expr>,				<comment type="block">/* GUJARATI VOWEL SIGN AA */</comment>
			<expr><literal type="number">0x0ABF</literal></expr>,				<comment type="block">/* GUJARATI VOWEL SIGN I */</comment>
			<expr><literal type="number">0x0AC0</literal></expr>,				<comment type="block">/* GUJARATI VOWEL SIGN II */</comment>
			<expr><literal type="number">0x0AC9</literal></expr>,				<comment type="block">/* GUJARATI VOWEL SIGN CANDRA O */</comment>
			<expr><literal type="number">0x0ACB</literal></expr>,				<comment type="block">/* GUJARATI VOWEL SIGN O */</comment>
			<expr><literal type="number">0x0ACC</literal></expr>,				<comment type="block">/* GUJARATI VOWEL SIGN AU */</comment>
			<expr><literal type="number">0x0B02</literal></expr>,				<comment type="block">/* ORIYA SIGN ANUSVARA */</comment>
			<expr><literal type="number">0x0B03</literal></expr>,				<comment type="block">/* ORIYA SIGN VISARGA */</comment>
			<expr><literal type="number">0x0B3E</literal></expr>,				<comment type="block">/* ORIYA VOWEL SIGN AA */</comment>
			<expr><literal type="number">0x0B40</literal></expr>,				<comment type="block">/* ORIYA VOWEL SIGN II */</comment>
			<expr><literal type="number">0x0B47</literal></expr>,				<comment type="block">/* ORIYA VOWEL SIGN E */</comment>
			<expr><literal type="number">0x0B48</literal></expr>,				<comment type="block">/* ORIYA VOWEL SIGN AI */</comment>
			<expr><literal type="number">0x0B4B</literal></expr>,				<comment type="block">/* ORIYA VOWEL SIGN O */</comment>
			<expr><literal type="number">0x0B4C</literal></expr>,				<comment type="block">/* ORIYA VOWEL SIGN AU */</comment>
			<expr><literal type="number">0x0B57</literal></expr>,				<comment type="block">/* ORIYA AU LENGTH MARK */</comment>
			<expr><literal type="number">0x0BBE</literal></expr>,				<comment type="block">/* TAMIL VOWEL SIGN AA */</comment>
			<expr><literal type="number">0x0BBF</literal></expr>,				<comment type="block">/* TAMIL VOWEL SIGN I */</comment>
			<expr><literal type="number">0x0BC1</literal></expr>,				<comment type="block">/* TAMIL VOWEL SIGN U */</comment>
			<expr><literal type="number">0x0BC2</literal></expr>,				<comment type="block">/* TAMIL VOWEL SIGN UU */</comment>
			<expr><literal type="number">0x0BC6</literal></expr>,				<comment type="block">/* TAMIL VOWEL SIGN E */</comment>
			<expr><literal type="number">0x0BC7</literal></expr>,				<comment type="block">/* TAMIL VOWEL SIGN EE */</comment>
			<expr><literal type="number">0x0BC8</literal></expr>,				<comment type="block">/* TAMIL VOWEL SIGN AI */</comment>
			<expr><literal type="number">0x0BCA</literal></expr>,				<comment type="block">/* TAMIL VOWEL SIGN O */</comment>
			<expr><literal type="number">0x0BCB</literal></expr>,				<comment type="block">/* TAMIL VOWEL SIGN OO */</comment>
			<expr><literal type="number">0x0BCC</literal></expr>,				<comment type="block">/* TAMIL VOWEL SIGN AU */</comment>
			<expr><literal type="number">0x0BD7</literal></expr>,				<comment type="block">/* TAMIL AU LENGTH MARK */</comment>
			<expr><literal type="number">0x0C01</literal></expr>,				<comment type="block">/* TELUGU SIGN CANDRABINDU */</comment>
			<expr><literal type="number">0x0C02</literal></expr>,				<comment type="block">/* TELUGU SIGN ANUSVARA */</comment>
			<expr><literal type="number">0x0C03</literal></expr>,				<comment type="block">/* TELUGU SIGN VISARGA */</comment>
			<expr><literal type="number">0x0C41</literal></expr>,				<comment type="block">/* TELUGU VOWEL SIGN U */</comment>
			<expr><literal type="number">0x0C42</literal></expr>,				<comment type="block">/* TELUGU VOWEL SIGN UU */</comment>
			<expr><literal type="number">0x0C43</literal></expr>,				<comment type="block">/* TELUGU VOWEL SIGN VOCALIC R */</comment>
			<expr><literal type="number">0x0C44</literal></expr>,				<comment type="block">/* TELUGU VOWEL SIGN VOCALIC RR */</comment>
			<expr><literal type="number">0x0C82</literal></expr>,				<comment type="block">/* KANNADA SIGN ANUSVARA */</comment>
			<expr><literal type="number">0x0C83</literal></expr>,				<comment type="block">/* KANNADA SIGN VISARGA */</comment>
			<expr><literal type="number">0x0CBE</literal></expr>,				<comment type="block">/* KANNADA VOWEL SIGN AA */</comment>
			<expr><literal type="number">0x0CC0</literal></expr>,				<comment type="block">/* KANNADA VOWEL SIGN II */</comment>
			<expr><literal type="number">0x0CC1</literal></expr>,				<comment type="block">/* KANNADA VOWEL SIGN U */</comment>
			<expr><literal type="number">0x0CC2</literal></expr>,				<comment type="block">/* KANNADA VOWEL SIGN UU */</comment>
			<expr><literal type="number">0x0CC3</literal></expr>,				<comment type="block">/* KANNADA VOWEL SIGN VOCALIC R */</comment>
			<expr><literal type="number">0x0CC4</literal></expr>,				<comment type="block">/* KANNADA VOWEL SIGN VOCALIC RR */</comment>
			<expr><literal type="number">0x0CC7</literal></expr>,				<comment type="block">/* KANNADA VOWEL SIGN EE */</comment>
			<expr><literal type="number">0x0CC8</literal></expr>,				<comment type="block">/* KANNADA VOWEL SIGN AI */</comment>
			<expr><literal type="number">0x0CCA</literal></expr>,				<comment type="block">/* KANNADA VOWEL SIGN O */</comment>
			<expr><literal type="number">0x0CCB</literal></expr>,				<comment type="block">/* KANNADA VOWEL SIGN OO */</comment>
			<expr><literal type="number">0x0CD5</literal></expr>,				<comment type="block">/* KANNADA LENGTH MARK */</comment>
			<expr><literal type="number">0x0CD6</literal></expr>,				<comment type="block">/* KANNADA AI LENGTH MARK */</comment>
			<expr><literal type="number">0x0D02</literal></expr>,				<comment type="block">/* MALAYALAM SIGN ANUSVARA */</comment>
			<expr><literal type="number">0x0D03</literal></expr>,				<comment type="block">/* MALAYALAM SIGN VISARGA */</comment>
			<expr><literal type="number">0x0D3E</literal></expr>,				<comment type="block">/* MALAYALAM VOWEL SIGN AA */</comment>
			<expr><literal type="number">0x0D3F</literal></expr>,				<comment type="block">/* MALAYALAM VOWEL SIGN I */</comment>
			<expr><literal type="number">0x0D40</literal></expr>,				<comment type="block">/* MALAYALAM VOWEL SIGN II */</comment>
			<expr><literal type="number">0x0D46</literal></expr>,				<comment type="block">/* MALAYALAM VOWEL SIGN E */</comment>
			<expr><literal type="number">0x0D47</literal></expr>,				<comment type="block">/* MALAYALAM VOWEL SIGN EE */</comment>
			<expr><literal type="number">0x0D48</literal></expr>,				<comment type="block">/* MALAYALAM VOWEL SIGN AI */</comment>
			<expr><literal type="number">0x0D4A</literal></expr>,				<comment type="block">/* MALAYALAM VOWEL SIGN O */</comment>
			<expr><literal type="number">0x0D4B</literal></expr>,				<comment type="block">/* MALAYALAM VOWEL SIGN OO */</comment>
			<expr><literal type="number">0x0D4C</literal></expr>,				<comment type="block">/* MALAYALAM VOWEL SIGN AU */</comment>
			<expr><literal type="number">0x0D57</literal></expr>,				<comment type="block">/* MALAYALAM AU LENGTH MARK */</comment>
			<expr><literal type="number">0x0D82</literal></expr>,				<comment type="block">/* SINHALA SIGN ANUSVARAYA */</comment>
			<expr><literal type="number">0x0D83</literal></expr>,				<comment type="block">/* SINHALA SIGN VISARGAYA */</comment>
			<expr><literal type="number">0x0DCF</literal></expr>,				<comment type="block">/* SINHALA VOWEL SIGN AELA-PILLA */</comment>
			<expr><literal type="number">0x0DD0</literal></expr>,				<comment type="block">/* SINHALA VOWEL SIGN KETTI AEDA-PILLA */</comment>
			<expr><literal type="number">0x0DD1</literal></expr>,				<comment type="block">/* SINHALA VOWEL SIGN DIGA AEDA-PILLA */</comment>
			<expr><literal type="number">0x0DD8</literal></expr>,				<comment type="block">/* SINHALA VOWEL SIGN GAETTA-PILLA */</comment>
			<expr><literal type="number">0x0DD9</literal></expr>,				<comment type="block">/* SINHALA VOWEL SIGN KOMBUVA */</comment>
			<expr><literal type="number">0x0DDA</literal></expr>,				<comment type="block">/* SINHALA VOWEL SIGN DIGA KOMBUVA */</comment>
			<expr><literal type="number">0x0DDB</literal></expr>,				<comment type="block">/* SINHALA VOWEL SIGN KOMBU DEKA */</comment>
			<expr><literal type="number">0x0DDC</literal></expr>,				<comment type="block">/* SINHALA VOWEL SIGN KOMBUVA HAA AELA-PILLA */</comment>
			<expr><literal type="number">0x0DDD</literal></expr>,				<comment type="block">/* SINHALA VOWEL SIGN KOMBUVA HAA DIGA
								 * AELA-PILLA */</comment>
			<expr><literal type="number">0x0DDE</literal></expr>,				<comment type="block">/* SINHALA VOWEL SIGN KOMBUVA HAA GAYANUKITTA */</comment>
			<expr><literal type="number">0x0DDF</literal></expr>,				<comment type="block">/* SINHALA VOWEL SIGN GAYANUKITTA */</comment>
			<expr><literal type="number">0x0DF2</literal></expr>,				<comment type="block">/* SINHALA VOWEL SIGN DIGA GAETTA-PILLA */</comment>
			<expr><literal type="number">0x0DF3</literal></expr>,				<comment type="block">/* SINHALA VOWEL SIGN DIGA GAYANUKITTA */</comment>
			<expr><literal type="number">0x0F3E</literal></expr>,				<comment type="block">/* TIBETAN SIGN YAR TSHES */</comment>
			<expr><literal type="number">0x0F3F</literal></expr>,				<comment type="block">/* TIBETAN SIGN MAR TSHES */</comment>
			<expr><literal type="number">0x0F7F</literal></expr>,				<comment type="block">/* TIBETAN SIGN RNAM BCAD */</comment>
			<expr><literal type="number">0x102B</literal></expr>,				<comment type="block">/* MYANMAR VOWEL SIGN TALL AA */</comment>
			<expr><literal type="number">0x102C</literal></expr>,				<comment type="block">/* MYANMAR VOWEL SIGN AA */</comment>
			<expr><literal type="number">0x1031</literal></expr>,				<comment type="block">/* MYANMAR VOWEL SIGN E */</comment>
			<expr><literal type="number">0x1038</literal></expr>,				<comment type="block">/* MYANMAR SIGN VISARGA */</comment>
			<expr><literal type="number">0x103B</literal></expr>,				<comment type="block">/* MYANMAR CONSONANT SIGN MEDIAL YA */</comment>
			<expr><literal type="number">0x103C</literal></expr>,				<comment type="block">/* MYANMAR CONSONANT SIGN MEDIAL RA */</comment>
			<expr><literal type="number">0x1056</literal></expr>,				<comment type="block">/* MYANMAR VOWEL SIGN VOCALIC R */</comment>
			<expr><literal type="number">0x1057</literal></expr>,				<comment type="block">/* MYANMAR VOWEL SIGN VOCALIC RR */</comment>
			<expr><literal type="number">0x1062</literal></expr>,				<comment type="block">/* MYANMAR VOWEL SIGN SGAW KAREN EU */</comment>
			<expr><literal type="number">0x1063</literal></expr>,				<comment type="block">/* MYANMAR TONE MARK SGAW KAREN HATHI */</comment>
			<expr><literal type="number">0x1064</literal></expr>,				<comment type="block">/* MYANMAR TONE MARK SGAW KAREN KE PHO */</comment>
			<expr><literal type="number">0x1067</literal></expr>,				<comment type="block">/* MYANMAR VOWEL SIGN WESTERN PWO KAREN EU */</comment>
			<expr><literal type="number">0x1068</literal></expr>,				<comment type="block">/* MYANMAR VOWEL SIGN WESTERN PWO KAREN UE */</comment>
			<expr><literal type="number">0x1069</literal></expr>,				<comment type="block">/* MYANMAR SIGN WESTERN PWO KAREN TONE-1 */</comment>
			<expr><literal type="number">0x106A</literal></expr>,				<comment type="block">/* MYANMAR SIGN WESTERN PWO KAREN TONE-2 */</comment>
			<expr><literal type="number">0x106B</literal></expr>,				<comment type="block">/* MYANMAR SIGN WESTERN PWO KAREN TONE-3 */</comment>
			<expr><literal type="number">0x106C</literal></expr>,				<comment type="block">/* MYANMAR SIGN WESTERN PWO KAREN TONE-4 */</comment>
			<expr><literal type="number">0x106D</literal></expr>,				<comment type="block">/* MYANMAR SIGN WESTERN PWO KAREN TONE-5 */</comment>
			<expr><literal type="number">0x1083</literal></expr>,				<comment type="block">/* MYANMAR VOWEL SIGN SHAN AA */</comment>
			<expr><literal type="number">0x1084</literal></expr>,				<comment type="block">/* MYANMAR VOWEL SIGN SHAN E */</comment>
			<expr><literal type="number">0x1087</literal></expr>,				<comment type="block">/* MYANMAR SIGN SHAN TONE-2 */</comment>
			<expr><literal type="number">0x1088</literal></expr>,				<comment type="block">/* MYANMAR SIGN SHAN TONE-3 */</comment>
			<expr><literal type="number">0x1089</literal></expr>,				<comment type="block">/* MYANMAR SIGN SHAN TONE-5 */</comment>
			<expr><literal type="number">0x108A</literal></expr>,				<comment type="block">/* MYANMAR SIGN SHAN TONE-6 */</comment>
			<expr><literal type="number">0x108B</literal></expr>,				<comment type="block">/* MYANMAR SIGN SHAN COUNCIL TONE-2 */</comment>
			<expr><literal type="number">0x108C</literal></expr>,				<comment type="block">/* MYANMAR SIGN SHAN COUNCIL TONE-3 */</comment>
			<expr><literal type="number">0x108F</literal></expr>,				<comment type="block">/* MYANMAR SIGN RUMAI PALAUNG TONE-5 */</comment>
			<expr><literal type="number">0x17B6</literal></expr>,				<comment type="block">/* KHMER VOWEL SIGN AA */</comment>
			<expr><literal type="number">0x17BE</literal></expr>,				<comment type="block">/* KHMER VOWEL SIGN OE */</comment>
			<expr><literal type="number">0x17BF</literal></expr>,				<comment type="block">/* KHMER VOWEL SIGN YA */</comment>
			<expr><literal type="number">0x17C0</literal></expr>,				<comment type="block">/* KHMER VOWEL SIGN IE */</comment>
			<expr><literal type="number">0x17C1</literal></expr>,				<comment type="block">/* KHMER VOWEL SIGN E */</comment>
			<expr><literal type="number">0x17C2</literal></expr>,				<comment type="block">/* KHMER VOWEL SIGN AE */</comment>
			<expr><literal type="number">0x17C3</literal></expr>,				<comment type="block">/* KHMER VOWEL SIGN AI */</comment>
			<expr><literal type="number">0x17C4</literal></expr>,				<comment type="block">/* KHMER VOWEL SIGN OO */</comment>
			<expr><literal type="number">0x17C5</literal></expr>,				<comment type="block">/* KHMER VOWEL SIGN AU */</comment>
			<expr><literal type="number">0x17C7</literal></expr>,				<comment type="block">/* KHMER SIGN REAHMUK */</comment>
			<expr><literal type="number">0x17C8</literal></expr>,				<comment type="block">/* KHMER SIGN YUUKALEAPINTU */</comment>
			<expr><literal type="number">0x1923</literal></expr>,				<comment type="block">/* LIMBU VOWEL SIGN EE */</comment>
			<expr><literal type="number">0x1924</literal></expr>,				<comment type="block">/* LIMBU VOWEL SIGN AI */</comment>
			<expr><literal type="number">0x1925</literal></expr>,				<comment type="block">/* LIMBU VOWEL SIGN OO */</comment>
			<expr><literal type="number">0x1926</literal></expr>,				<comment type="block">/* LIMBU VOWEL SIGN AU */</comment>
			<expr><literal type="number">0x1929</literal></expr>,				<comment type="block">/* LIMBU SUBJOINED LETTER YA */</comment>
			<expr><literal type="number">0x192A</literal></expr>,				<comment type="block">/* LIMBU SUBJOINED LETTER RA */</comment>
			<expr><literal type="number">0x192B</literal></expr>,				<comment type="block">/* LIMBU SUBJOINED LETTER WA */</comment>
			<expr><literal type="number">0x1930</literal></expr>,				<comment type="block">/* LIMBU SMALL LETTER KA */</comment>
			<expr><literal type="number">0x1931</literal></expr>,				<comment type="block">/* LIMBU SMALL LETTER NGA */</comment>
			<expr><literal type="number">0x1933</literal></expr>,				<comment type="block">/* LIMBU SMALL LETTER TA */</comment>
			<expr><literal type="number">0x1934</literal></expr>,				<comment type="block">/* LIMBU SMALL LETTER NA */</comment>
			<expr><literal type="number">0x1935</literal></expr>,				<comment type="block">/* LIMBU SMALL LETTER PA */</comment>
			<expr><literal type="number">0x1936</literal></expr>,				<comment type="block">/* LIMBU SMALL LETTER MA */</comment>
			<expr><literal type="number">0x1937</literal></expr>,				<comment type="block">/* LIMBU SMALL LETTER RA */</comment>
			<expr><literal type="number">0x1938</literal></expr>,				<comment type="block">/* LIMBU SMALL LETTER LA */</comment>
			<expr><literal type="number">0x19B0</literal></expr>,				<comment type="block">/* NEW TAI LUE VOWEL SIGN VOWEL SHORTENER */</comment>
			<expr><literal type="number">0x19B1</literal></expr>,				<comment type="block">/* NEW TAI LUE VOWEL SIGN AA */</comment>
			<expr><literal type="number">0x19B2</literal></expr>,				<comment type="block">/* NEW TAI LUE VOWEL SIGN II */</comment>
			<expr><literal type="number">0x19B3</literal></expr>,				<comment type="block">/* NEW TAI LUE VOWEL SIGN U */</comment>
			<expr><literal type="number">0x19B4</literal></expr>,				<comment type="block">/* NEW TAI LUE VOWEL SIGN UU */</comment>
			<expr><literal type="number">0x19B5</literal></expr>,				<comment type="block">/* NEW TAI LUE VOWEL SIGN E */</comment>
			<expr><literal type="number">0x19B6</literal></expr>,				<comment type="block">/* NEW TAI LUE VOWEL SIGN AE */</comment>
			<expr><literal type="number">0x19B7</literal></expr>,				<comment type="block">/* NEW TAI LUE VOWEL SIGN O */</comment>
			<expr><literal type="number">0x19B8</literal></expr>,				<comment type="block">/* NEW TAI LUE VOWEL SIGN OA */</comment>
			<expr><literal type="number">0x19B9</literal></expr>,				<comment type="block">/* NEW TAI LUE VOWEL SIGN UE */</comment>
			<expr><literal type="number">0x19BA</literal></expr>,				<comment type="block">/* NEW TAI LUE VOWEL SIGN AY */</comment>
			<expr><literal type="number">0x19BB</literal></expr>,				<comment type="block">/* NEW TAI LUE VOWEL SIGN AAY */</comment>
			<expr><literal type="number">0x19BC</literal></expr>,				<comment type="block">/* NEW TAI LUE VOWEL SIGN UY */</comment>
			<expr><literal type="number">0x19BD</literal></expr>,				<comment type="block">/* NEW TAI LUE VOWEL SIGN OY */</comment>
			<expr><literal type="number">0x19BE</literal></expr>,				<comment type="block">/* NEW TAI LUE VOWEL SIGN OAY */</comment>
			<expr><literal type="number">0x19BF</literal></expr>,				<comment type="block">/* NEW TAI LUE VOWEL SIGN UEY */</comment>
			<expr><literal type="number">0x19C0</literal></expr>,				<comment type="block">/* NEW TAI LUE VOWEL SIGN IY */</comment>
			<expr><literal type="number">0x19C8</literal></expr>,				<comment type="block">/* NEW TAI LUE TONE MARK-1 */</comment>
			<expr><literal type="number">0x19C9</literal></expr>,				<comment type="block">/* NEW TAI LUE TONE MARK-2 */</comment>
			<expr><literal type="number">0x1A19</literal></expr>,				<comment type="block">/* BUGINESE VOWEL SIGN E */</comment>
			<expr><literal type="number">0x1A1A</literal></expr>,				<comment type="block">/* BUGINESE VOWEL SIGN O */</comment>
			<expr><literal type="number">0x1A1B</literal></expr>,				<comment type="block">/* BUGINESE VOWEL SIGN AE */</comment>
			<expr><literal type="number">0x1B04</literal></expr>,				<comment type="block">/* BALINESE SIGN BISAH */</comment>
			<expr><literal type="number">0x1B35</literal></expr>,				<comment type="block">/* BALINESE VOWEL SIGN TEDUNG */</comment>
			<expr><literal type="number">0x1B3B</literal></expr>,				<comment type="block">/* BALINESE VOWEL SIGN RA REPA TEDUNG */</comment>
			<expr><literal type="number">0x1B3D</literal></expr>,				<comment type="block">/* BALINESE VOWEL SIGN LA LENGA TEDUNG */</comment>
			<expr><literal type="number">0x1B3E</literal></expr>,				<comment type="block">/* BALINESE VOWEL SIGN TALING */</comment>
			<expr><literal type="number">0x1B3F</literal></expr>,				<comment type="block">/* BALINESE VOWEL SIGN TALING REPA */</comment>
			<expr><literal type="number">0x1B40</literal></expr>,				<comment type="block">/* BALINESE VOWEL SIGN TALING TEDUNG */</comment>
			<expr><literal type="number">0x1B41</literal></expr>,				<comment type="block">/* BALINESE VOWEL SIGN TALING REPA TEDUNG */</comment>
			<expr><literal type="number">0x1B43</literal></expr>,				<comment type="block">/* BALINESE VOWEL SIGN PEPET TEDUNG */</comment>
			<expr><literal type="number">0x1B44</literal></expr>,				<comment type="block">/* BALINESE ADEG ADEG */</comment>
			<expr><literal type="number">0x1B82</literal></expr>,				<comment type="block">/* SUNDANESE SIGN PANGWISAD */</comment>
			<expr><literal type="number">0x1BA1</literal></expr>,				<comment type="block">/* SUNDANESE CONSONANT SIGN PAMINGKAL */</comment>
			<expr><literal type="number">0x1BA6</literal></expr>,				<comment type="block">/* SUNDANESE VOWEL SIGN PANAELAENG */</comment>
			<expr><literal type="number">0x1BA7</literal></expr>,				<comment type="block">/* SUNDANESE VOWEL SIGN PANOLONG */</comment>
			<expr><literal type="number">0x1BAA</literal></expr>,				<comment type="block">/* SUNDANESE SIGN PAMAAEH */</comment>
			<expr><literal type="number">0x1C24</literal></expr>,				<comment type="block">/* LEPCHA SUBJOINED LETTER YA */</comment>
			<expr><literal type="number">0x1C25</literal></expr>,				<comment type="block">/* LEPCHA SUBJOINED LETTER RA */</comment>
			<expr><literal type="number">0x1C26</literal></expr>,				<comment type="block">/* LEPCHA VOWEL SIGN AA */</comment>
			<expr><literal type="number">0x1C27</literal></expr>,				<comment type="block">/* LEPCHA VOWEL SIGN I */</comment>
			<expr><literal type="number">0x1C28</literal></expr>,				<comment type="block">/* LEPCHA VOWEL SIGN O */</comment>
			<expr><literal type="number">0x1C29</literal></expr>,				<comment type="block">/* LEPCHA VOWEL SIGN OO */</comment>
			<expr><literal type="number">0x1C2A</literal></expr>,				<comment type="block">/* LEPCHA VOWEL SIGN U */</comment>
			<expr><literal type="number">0x1C2B</literal></expr>,				<comment type="block">/* LEPCHA VOWEL SIGN UU */</comment>
			<expr><literal type="number">0x1C34</literal></expr>,				<comment type="block">/* LEPCHA CONSONANT SIGN NYIN-DO */</comment>
			<expr><literal type="number">0x1C35</literal></expr>,				<comment type="block">/* LEPCHA CONSONANT SIGN KANG */</comment>
			<expr><literal type="number">0xA823</literal></expr>,				<comment type="block">/* SYLOTI NAGRI VOWEL SIGN A */</comment>
			<expr><literal type="number">0xA824</literal></expr>,				<comment type="block">/* SYLOTI NAGRI VOWEL SIGN I */</comment>
			<expr><literal type="number">0xA827</literal></expr>,				<comment type="block">/* SYLOTI NAGRI VOWEL SIGN OO */</comment>
			<expr><literal type="number">0xA880</literal></expr>,				<comment type="block">/* SAURASHTRA SIGN ANUSVARA */</comment>
			<expr><literal type="number">0xA881</literal></expr>,				<comment type="block">/* SAURASHTRA SIGN VISARGA */</comment>
			<expr><literal type="number">0xA8B4</literal></expr>,				<comment type="block">/* SAURASHTRA CONSONANT SIGN HAARU */</comment>
			<expr><literal type="number">0xA8B5</literal></expr>,				<comment type="block">/* SAURASHTRA VOWEL SIGN AA */</comment>
			<expr><literal type="number">0xA8B6</literal></expr>,				<comment type="block">/* SAURASHTRA VOWEL SIGN I */</comment>
			<expr><literal type="number">0xA8B7</literal></expr>,				<comment type="block">/* SAURASHTRA VOWEL SIGN II */</comment>
			<expr><literal type="number">0xA8B8</literal></expr>,				<comment type="block">/* SAURASHTRA VOWEL SIGN U */</comment>
			<expr><literal type="number">0xA8B9</literal></expr>,				<comment type="block">/* SAURASHTRA VOWEL SIGN UU */</comment>
			<expr><literal type="number">0xA8BA</literal></expr>,				<comment type="block">/* SAURASHTRA VOWEL SIGN VOCALIC R */</comment>
			<expr><literal type="number">0xA8BB</literal></expr>,				<comment type="block">/* SAURASHTRA VOWEL SIGN VOCALIC RR */</comment>
			<expr><literal type="number">0xA8BC</literal></expr>,				<comment type="block">/* SAURASHTRA VOWEL SIGN VOCALIC L */</comment>
			<expr><literal type="number">0xA8BD</literal></expr>,				<comment type="block">/* SAURASHTRA VOWEL SIGN VOCALIC LL */</comment>
			<expr><literal type="number">0xA8BE</literal></expr>,				<comment type="block">/* SAURASHTRA VOWEL SIGN E */</comment>
			<expr><literal type="number">0xA8BF</literal></expr>,				<comment type="block">/* SAURASHTRA VOWEL SIGN EE */</comment>
			<expr><literal type="number">0xA8C0</literal></expr>,				<comment type="block">/* SAURASHTRA VOWEL SIGN AI */</comment>
			<expr><literal type="number">0xA8C1</literal></expr>,				<comment type="block">/* SAURASHTRA VOWEL SIGN O */</comment>
			<expr><literal type="number">0xA8C2</literal></expr>,				<comment type="block">/* SAURASHTRA VOWEL SIGN OO */</comment>
			<expr><literal type="number">0xA8C3</literal></expr>,				<comment type="block">/* SAURASHTRA VOWEL SIGN AU */</comment>
			<expr><literal type="number">0xA952</literal></expr>,				<comment type="block">/* REJANG CONSONANT SIGN H */</comment>
			<expr><literal type="number">0xA953</literal></expr>,				<comment type="block">/* REJANG VIRAMA */</comment>
			<expr><literal type="number">0xAA2F</literal></expr>,				<comment type="block">/* CHAM VOWEL SIGN O */</comment>
			<expr><literal type="number">0xAA30</literal></expr>,				<comment type="block">/* CHAM VOWEL SIGN AI */</comment>
			<expr><literal type="number">0xAA33</literal></expr>,				<comment type="block">/* CHAM CONSONANT SIGN YA */</comment>
			<expr><literal type="number">0xAA34</literal></expr>,				<comment type="block">/* CHAM CONSONANT SIGN RA */</comment>
			<expr><literal type="number">0xAA4D</literal></expr>				<comment type="block">/* CHAM CONSONANT SIGN FINAL H */</comment>
		}</block></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>pg_wchar</name> <modifier>*</modifier></type><name>StopLow</name> <init>= <expr><name>strange_letter</name></expr></init></decl>,
				   <decl><type ref="prev"><modifier>*</modifier></type><name>StopHigh</name> <init>= <expr><name>strange_letter</name> <operator>+</operator> <call><name>lengthof</name><argument_list>(<argument><expr><name>strange_letter</name></expr></argument>)</argument_list></call></expr></init></decl>,
				   <decl><type ref="prev"><modifier>*</modifier></type><name>StopMiddle</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>pg_wchar</name></type>	<name>c</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>prs</name><operator>-&gt;</operator><name>pgwstr</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>prs</name><operator>-&gt;</operator><name>pgwstr</name></name> <operator>+</operator> <name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>poschar</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>pg_wchar</name><operator>)</operator> <operator>*</operator><operator>(</operator><name><name>prs</name><operator>-&gt;</operator><name>wstr</name></name> <operator>+</operator> <name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>poschar</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<while>while <condition>(<expr><name>StopLow</name> <operator>&lt;</operator> <name>StopHigh</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>StopMiddle</name> <operator>=</operator> <name>StopLow</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>StopHigh</name> <operator>-</operator> <name>StopLow</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>StopMiddle</name> <operator>==</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><operator>*</operator><name>StopMiddle</name> <operator>&lt;</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>StopLow</name> <operator>=</operator> <name>StopMiddle</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>StopHigh</name> <operator>=</operator> <name>StopMiddle</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Table of state/action of parser
 */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_Base</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'&lt;'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InTagFirst</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isignore</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InSpace</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isasclet</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InAsciiWord</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isalpha</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InWord</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InUnsignedInt</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'-'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InSignedIntFirst</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'+'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InSignedIntFirst</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'&amp;'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InXMLEntityFirst</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'~'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InFileTwiddle</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'/'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InFileFirst</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'.'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InPathFirstFirst</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InSpace</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InNumWord</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>NUMWORD</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isalnum</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InNumWord</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isspecial</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InNumWord</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'@'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InEmail</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'/'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InFileFirst</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'.'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InFileNext</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'-'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InHyphenNumWordFirst</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>NUMWORD</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InAsciiWord</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>ASCIIWORD</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isasclet</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'.'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InHostFirstDomain</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'.'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InFileNext</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'-'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InHostFirstAN</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'-'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InHyphenAsciiWordFirst</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'_'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InHostFirstAN</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'@'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InEmail</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">':'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InProtocolFirst</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'/'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InFileFirst</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InHost</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InNumWord</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isalpha</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InWord</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isspecial</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InWord</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>ASCIIWORD</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InWord</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>WORD_T</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isalpha</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isspecial</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InNumWord</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'-'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InHyphenWordFirst</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>WORD_T</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InUnsignedInt</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>UNSIGNEDINT</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'.'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InHostFirstDomain</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'.'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InUDecimalFirst</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InMantissaFirst</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'E'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InMantissaFirst</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'-'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InHostFirstAN</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'_'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InHostFirstAN</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'@'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InEmail</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isasclet</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InHost</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isalpha</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InNumWord</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isspecial</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InNumWord</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'/'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InFileFirst</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>UNSIGNEDINT</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InSignedIntFirst</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name> <operator>|</operator> <name>A_CLEAR</name></expr>, <expr><name>TPS_InSignedInt</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InSignedInt</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>SIGNEDINT</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'.'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InDecimalFirst</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InMantissaFirst</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'E'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InMantissaFirst</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>SIGNEDINT</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InSpace</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>SPACE</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'&lt;'</literal></expr>, <expr><name>A_BINGO</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>SPACE</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isignore</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'-'</literal></expr>, <expr><name>A_BINGO</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>SPACE</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'+'</literal></expr>, <expr><name>A_BINGO</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>SPACE</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'&amp;'</literal></expr>, <expr><name>A_BINGO</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>SPACE</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'/'</literal></expr>, <expr><name>A_BINGO</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>SPACE</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isnotalnum</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InSpace</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>SPACE</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InUDecimalFirst</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_CLEAR</name></expr>, <expr><name>TPS_InUDecimal</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InUDecimal</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>DECIMAL_T</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InUDecimal</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'.'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InVersionFirst</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InMantissaFirst</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'E'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InMantissaFirst</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>DECIMAL_T</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InDecimalFirst</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_CLEAR</name></expr>, <expr><name>TPS_InDecimal</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InDecimal</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>DECIMAL_T</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InDecimal</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'.'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InVerVersion</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InMantissaFirst</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'E'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InMantissaFirst</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>DECIMAL_T</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InVerVersion</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_RERUN</name></expr>, <expr><name>TPS_InSVerVersion</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>SpecialVerVersion</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InSVerVersion</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name> <operator>|</operator> <name>A_CLRALL</name></expr>, <expr><name>TPS_InUnsignedInt</name></expr>, <expr><name>SPACE</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InVersionFirst</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_CLEAR</name></expr>, <expr><name>TPS_InVersion</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InVersion</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>VERSIONNUMBER</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InVersion</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'.'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InVersionFirst</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>VERSIONNUMBER</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InMantissaFirst</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_CLEAR</name></expr>, <expr><name>TPS_InMantissa</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'+'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InMantissaSign</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'-'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InMantissaSign</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InMantissaSign</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_CLEAR</name></expr>, <expr><name>TPS_InMantissa</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InMantissa</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>SCIENTIFIC</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InMantissa</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>SCIENTIFIC</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InXMLEntityFirst</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'#'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InXMLEntityNumFirst</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isasclet</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InXMLEntity</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">':'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InXMLEntity</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'_'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InXMLEntity</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InXMLEntity</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isalnum</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InXMLEntity</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">':'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InXMLEntity</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'_'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InXMLEntity</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'.'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InXMLEntity</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'-'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InXMLEntity</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">';'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InXMLEntityEnd</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InXMLEntityNumFirst</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'x'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InXMLEntityHexNumFirst</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'X'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InXMLEntityHexNumFirst</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InXMLEntityNum</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InXMLEntityHexNumFirst</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isxdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InXMLEntityHexNum</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InXMLEntityNum</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InXMLEntityNum</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">';'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InXMLEntityEnd</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InXMLEntityHexNum</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isxdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InXMLEntityHexNum</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">';'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InXMLEntityEnd</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InXMLEntityEnd</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name> <operator>|</operator> <name>A_CLEAR</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>XMLENTITY</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InTagFirst</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'/'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InTagCloseFirst</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'!'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InCommentFirst</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'?'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InXMLBegin</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isasclet</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InTagName</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">':'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InTagName</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'_'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InTagName</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InXMLBegin</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<comment type="block">/* &lt;?xml ... */</comment>
	<comment type="block">/* XXX do we wants states for the m and l ?  Right now this accepts &lt;?xZ */</comment>
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'x'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InTag</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InTagCloseFirst</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isasclet</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InTagName</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InTagName</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<comment type="block">/* &lt;br/&gt; case */</comment>
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'/'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InTagBeginEnd</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'&gt;'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InTagEnd</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>SpecialTags</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isspace</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InTag</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>SpecialTags</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isalnum</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">':'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'_'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'.'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'-'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InTagBeginEnd</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'&gt;'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InTagEnd</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InTag</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'&gt;'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InTagEnd</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>SpecialTags</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'\''</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InTagEscapeK</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'"'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InTagEscapeKK</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isasclet</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'='</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'-'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'_'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'#'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'/'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">':'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'.'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'&amp;'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'?'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'%'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'~'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isspace</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>SpecialTags</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InTagEscapeK</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'\\'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InTagBackSleshed</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'\''</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InTag</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InTagEscapeK</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InTagEscapeKK</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'\\'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InTagBackSleshed</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'"'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InTag</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InTagEscapeKK</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InTagBackSleshed</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_MERGE</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InTagEnd</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name> <operator>|</operator> <name>A_CLRALL</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>TAG_T</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InCommentFirst</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'-'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InCommentLast</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<comment type="block">/* &lt;!DOCTYPE ...&gt; */</comment>
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'D'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InTag</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InTag</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InCommentLast</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'-'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InComment</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InComment</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'-'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InCloseCommentFirst</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InCloseCommentFirst</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'-'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InCloseCommentLast</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InComment</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InCloseCommentLast</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'-'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'&gt;'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InCommentEnd</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InComment</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InCommentEnd</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name> <operator>|</operator> <name>A_CLRALL</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>TAG_T</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InHostFirstDomain</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isasclet</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InHostDomainSecond</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InHost</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InHostDomainSecond</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isasclet</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InHostDomain</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InHost</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'-'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InHostFirstAN</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'_'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InHostFirstAN</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'.'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InHostFirstDomain</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'@'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InEmail</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InHostDomain</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name> <operator>|</operator> <name>A_CLRALL</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>HOST</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isasclet</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InHostDomain</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InHost</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">':'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InPortFirst</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'-'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InHostFirstAN</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'_'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InHostFirstAN</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'.'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InHostFirstDomain</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'@'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InEmail</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isstophost</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name> <operator>|</operator> <name>A_CLRALL</name></expr>, <expr><name>TPS_InURLPathStart</name></expr>, <expr><name>HOST</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'/'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InFURL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name> <operator>|</operator> <name>A_CLRALL</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>HOST</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InPortFirst</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InPort</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InPort</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name> <operator>|</operator> <name>A_CLRALL</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>HOST</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InPort</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isstophost</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name> <operator>|</operator> <name>A_CLRALL</name></expr>, <expr><name>TPS_InURLPathStart</name></expr>, <expr><name>HOST</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'/'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InFURL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name> <operator>|</operator> <name>A_CLRALL</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>HOST</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InHostFirstAN</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InHost</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isasclet</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InHost</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InHost</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InHost</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isasclet</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InHost</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'@'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InEmail</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'.'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InHostFirstDomain</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'-'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InHostFirstAN</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'_'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InHostFirstAN</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InEmail</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isstophost</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_ishost</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name> <operator>|</operator> <name>A_CLRALL</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>EMAIL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InFileFirst</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isasclet</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InFile</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InFile</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'.'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InPathFirst</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'_'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InFile</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'~'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InFileTwiddle</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InFileTwiddle</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isasclet</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InFile</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InFile</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'_'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InFile</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'/'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InFileFirst</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InPathFirst</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isasclet</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InFile</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InFile</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'_'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InFile</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'.'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InPathSecond</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'/'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InFileFirst</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InPathFirstFirst</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'.'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InPathSecond</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'/'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InFileFirst</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InPathSecond</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name> <operator>|</operator> <name>A_CLEAR</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>FILEPATH</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'/'</literal></expr>, <expr><name>A_NEXT</name> <operator>|</operator> <name>A_PUSH</name></expr>, <expr><name>TPS_InFileFirst</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'/'</literal></expr>, <expr><name>A_BINGO</name> <operator>|</operator> <name>A_CLEAR</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>FILEPATH</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isspace</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name> <operator>|</operator> <name>A_CLEAR</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>FILEPATH</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InFile</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>FILEPATH</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isasclet</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InFile</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InFile</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'.'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InFileNext</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'_'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InFile</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'-'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InFile</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'/'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InFileFirst</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>FILEPATH</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InFileNext</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isasclet</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_CLEAR</name></expr>, <expr><name>TPS_InFile</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_CLEAR</name></expr>, <expr><name>TPS_InFile</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'_'</literal></expr>, <expr><name>A_CLEAR</name></expr>, <expr><name>TPS_InFile</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InURLPathFirst</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isurlchar</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InURLPath</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InURLPathStart</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InURLPath</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InURLPath</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>URLPATH</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isurlchar</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InURLPath</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>URLPATH</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InFURL</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isURLPath</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name> <operator>|</operator> <name>A_CLRALL</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>URL_T</name></expr>, <expr><name>SpecialFURL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InProtocolFirst</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'/'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InProtocolSecond</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InProtocolSecond</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'/'</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InProtocolEnd</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InProtocolEnd</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name> <operator>|</operator> <name>A_CLRALL</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>PROTOCOL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InHyphenAsciiWordFirst</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isasclet</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InHyphenAsciiWord</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isalpha</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InHyphenWord</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InHyphenDigitLookahead</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InHyphenAsciiWord</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name> <operator>|</operator> <name>A_CLRALL</name></expr>, <expr><name>TPS_InParseHyphen</name></expr>, <expr><name>ASCIIHWORD</name></expr>, <expr><name>SpecialHyphen</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isasclet</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InHyphenAsciiWord</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isalpha</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InHyphenWord</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isspecial</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InHyphenWord</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InHyphenNumWord</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'-'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InHyphenAsciiWordFirst</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name> <operator>|</operator> <name>A_CLRALL</name></expr>, <expr><name>TPS_InParseHyphen</name></expr>, <expr><name>ASCIIHWORD</name></expr>, <expr><name>SpecialHyphen</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InHyphenWordFirst</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isalpha</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InHyphenWord</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InHyphenDigitLookahead</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InHyphenWord</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name> <operator>|</operator> <name>A_CLRALL</name></expr>, <expr><name>TPS_InParseHyphen</name></expr>, <expr><name>HWORD</name></expr>, <expr><name>SpecialHyphen</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isalpha</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InHyphenWord</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isspecial</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InHyphenWord</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InHyphenNumWord</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'-'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InHyphenWordFirst</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name> <operator>|</operator> <name>A_CLRALL</name></expr>, <expr><name>TPS_InParseHyphen</name></expr>, <expr><name>HWORD</name></expr>, <expr><name>SpecialHyphen</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InHyphenNumWordFirst</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isalpha</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InHyphenNumWord</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InHyphenDigitLookahead</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InHyphenNumWord</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name> <operator>|</operator> <name>A_CLRALL</name></expr>, <expr><name>TPS_InParseHyphen</name></expr>, <expr><name>NUMHWORD</name></expr>, <expr><name>SpecialHyphen</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isalnum</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InHyphenNumWord</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isspecial</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InHyphenNumWord</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'-'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InHyphenNumWordFirst</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name> <operator>|</operator> <name>A_CLRALL</name></expr>, <expr><name>TPS_InParseHyphen</name></expr>, <expr><name>NUMHWORD</name></expr>, <expr><name>SpecialHyphen</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InHyphenDigitLookahead</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InHyphenDigitLookahead</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isalpha</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InHyphenNumWord</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isspecial</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InHyphenNumWord</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InParseHyphen</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_RERUN</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isasclet</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InHyphenAsciiWordPart</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isalpha</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InHyphenWordPart</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InHyphenUnsignedInt</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_iseqC</name></expr>, <expr><literal type="char">'-'</literal></expr>, <expr><name>A_PUSH</name></expr>, <expr><name>TPS_InParseHyphenHyphen</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_RERUN</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InParseHyphenHyphen</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isalnum</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name> <operator>|</operator> <name>A_CLEAR</name></expr>, <expr><name>TPS_InParseHyphen</name></expr>, <expr><name>SPACE</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isspecial</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name> <operator>|</operator> <name>A_CLEAR</name></expr>, <expr><name>TPS_InParseHyphen</name></expr>, <expr><name>SPACE</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InHyphenWordPart</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>PARTHWORD</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isalpha</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InHyphenWordPart</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isspecial</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InHyphenWordPart</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InHyphenNumWordPart</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name></expr>, <expr><name>TPS_InParseHyphen</name></expr>, <expr><name>PARTHWORD</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InHyphenAsciiWordPart</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>ASCIIPARTHWORD</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isasclet</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InHyphenAsciiWordPart</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isalpha</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InHyphenWordPart</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isspecial</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InHyphenWordPart</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InHyphenNumWordPart</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name></expr>, <expr><name>TPS_InParseHyphen</name></expr>, <expr><name>ASCIIPARTHWORD</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InHyphenNumWordPart</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name></expr>, <expr><name>TPS_Base</name></expr>, <expr><name>NUMPARTHWORD</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isalnum</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InHyphenNumWordPart</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isspecial</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_InHyphenNumWordPart</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_BINGO</name></expr>, <expr><name>TPS_InParseHyphen</name></expr>, <expr><name>NUMPARTHWORD</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateActionItem</name></type> <name><name>actionTPS_InHyphenUnsignedInt</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>p_isEOF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isdigit</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_NEXT</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isalpha</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_CLEAR</name></expr>, <expr><name>TPS_InHyphenNumWordPart</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>p_isspecial</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_CLEAR</name></expr>, <expr><name>TPS_InHyphenNumWordPart</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>A_POP</name></expr>, <expr><name>TPS_Null</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<comment type="block">/*
 * main table of per-state parser actions
 */</comment>
<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><specifier>const</specifier> <name>TParserStateActionItem</name> <modifier>*</modifier></type><name>action</name></decl>;</decl_stmt>	<comment type="block">/* the actual state info */</comment>
	<decl_stmt><decl><type><name>TParserState</name></type> <name>state</name></decl>;</decl_stmt>			<comment type="block">/* only for Assert crosscheck */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WPARSER_TRACE</name></cpp:ifdef>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>state_name</name></decl>;</decl_stmt>		<comment type="block">/* only for debug printout */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>TParserStateAction</name>;</typedef>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WPARSER_TRACE</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TPARSERSTATEACTION</name><parameter_list>(<parameter><type><name>state</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>{ CppConcat(action,state), state, CppAsString(state) }</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TPARSERSTATEACTION</name><parameter_list>(<parameter><type><name>state</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>{ CppConcat(action,state), state }</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * order must be the same as in typedef enum {} TParserState!!
 */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TParserStateAction</name></type> <name><name>Actions</name><index>[]</index></name> <init>= <expr><block>{
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_Base</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InNumWord</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InAsciiWord</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InWord</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InUnsignedInt</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InSignedIntFirst</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InSignedInt</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InSpace</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InUDecimalFirst</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InUDecimal</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InDecimalFirst</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InDecimal</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InVerVersion</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InSVerVersion</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InVersionFirst</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InVersion</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InMantissaFirst</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InMantissaSign</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InMantissa</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InXMLEntityFirst</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InXMLEntity</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InXMLEntityNumFirst</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InXMLEntityNum</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InXMLEntityHexNumFirst</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InXMLEntityHexNum</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InXMLEntityEnd</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InTagFirst</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InXMLBegin</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InTagCloseFirst</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InTagName</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InTagBeginEnd</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InTag</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InTagEscapeK</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InTagEscapeKK</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InTagBackSleshed</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InTagEnd</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InCommentFirst</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InCommentLast</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InComment</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InCloseCommentFirst</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InCloseCommentLast</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InCommentEnd</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InHostFirstDomain</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InHostDomainSecond</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InHostDomain</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InPortFirst</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InPort</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InHostFirstAN</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InHost</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InEmail</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InFileFirst</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InFileTwiddle</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InPathFirst</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InPathFirstFirst</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InPathSecond</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InFile</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InFileNext</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InURLPathFirst</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InURLPathStart</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InURLPath</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InFURL</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InProtocolFirst</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InProtocolSecond</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InProtocolEnd</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InHyphenAsciiWordFirst</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InHyphenAsciiWord</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InHyphenWordFirst</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InHyphenWord</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InHyphenNumWordFirst</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InHyphenNumWord</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InHyphenDigitLookahead</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InParseHyphen</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InParseHyphenHyphen</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InHyphenWordPart</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InHyphenAsciiWordPart</name></expr></argument>)</argument_list></call></expr>,
	<expr><call><name>TPARSERSTATEACTION</name><argument_list>(<argument><expr><name>TPS_InHyphenNumWordPart</name></expr></argument>)</argument_list></call></expr>,
	<macro><name>TPARSERSTATEACTION</name><argument_list>(<argument>TPS_InHyphenUnsignedInt</argument>)</argument_list></macro>
}</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>bool</name></type>
<name>TParserGet</name><parameter_list>(<parameter><decl><type><name>TParser</name> <modifier>*</modifier></type><name>prs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>TParserStateActionItem</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>posbyte</name></name> <operator>&gt;=</operator> <name><name>prs</name><operator>-&gt;</operator><name>lenstr</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>token</name></name> <operator>=</operator> <name><name>prs</name><operator>-&gt;</operator><name>str</name></name> <operator>+</operator> <name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>posbyte</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>pushedAtAction</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/* look at string */</comment>
	<while>while <condition>(<expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>posbyte</name></name> <operator>&lt;=</operator> <name><name>prs</name><operator>-&gt;</operator><name>lenstr</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>posbyte</name></name> <operator>==</operator> <name><name>prs</name><operator>-&gt;</operator><name>lenstr</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>charlen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>charlen</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>prs</name><operator>-&gt;</operator><name>charmaxlen</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>prs</name><operator>-&gt;</operator><name>charmaxlen</name></name></expr> </then><else>:
				<expr><call><name>pg_mblen</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>str</name></name> <operator>+</operator> <name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>posbyte</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>posbyte</name></name> <operator>+</operator> <name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>charlen</name></name> <operator>&lt;=</operator> <name><name>prs</name><operator>-&gt;</operator><name>lenstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>&gt;=</operator> <name>TPS_Base</name> <operator>&amp;&amp;</operator> <name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>&lt;</operator> <name>TPS_Null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>Actions</name><index>[<expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>state</name></name></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>pushedAtAction</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* After a POP, pick up at the next test */</comment>
			<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>pushedAtAction</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>pushedAtAction</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>Actions</name><index>[<expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>state</name></name></expr>]</index></name><operator>.</operator><name>action</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="block">/* find action by character class */</comment>
		<while>while <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>isclass</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name><name>item</name><operator>-&gt;</operator><name>isclass</name></name><argument_list>(<argument><expr><name>prs</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>item</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WPARSER_TRACE</name></cpp:ifdef>
		<block>{<block_content>
			<decl_stmt><decl><type><name>TParserPosition</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"state "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* indent according to stack depth */</comment>
			<for>for <control>(<init><expr><name>ptr</name> <operator>=</operator> <name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>prev</name></name></expr>;</init> <condition><expr><name>ptr</name></expr>;</condition> <incr><expr><name>ptr</name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>prev</name></name></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"  "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><name><name>Actions</name><index>[<expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>state</name></name></expr>]</index></name><operator>.</operator><name>state_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>posbyte</name></name> <operator>&lt;</operator> <name><name>prs</name><operator>-&gt;</operator><name>lenstr</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"at %c"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name><name>prs</name><operator>-&gt;</operator><name>str</name></name> <operator>+</operator> <name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>posbyte</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"at EOF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">" matched rule %d flags%s%s%s%s%s%s%s%s%s%s%s\n"</literal></expr></argument>,
					<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>item</name> <operator>-</operator> <name><name>Actions</name><index>[<expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>state</name></name></expr>]</index></name><operator>.</operator><name>action</name><operator>)</operator></expr></argument>,
					<argument><expr><ternary><condition><expr><operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>A_BINGO</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">" BINGO"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
					<argument><expr><ternary><condition><expr><operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>A_POP</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">" POP"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
					<argument><expr><ternary><condition><expr><operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>A_PUSH</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">" PUSH"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
					<argument><expr><ternary><condition><expr><operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>A_RERUN</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">" RERUN"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
					<argument><expr><ternary><condition><expr><operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>A_CLEAR</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">" CLEAR"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
					<argument><expr><ternary><condition><expr><operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>A_MERGE</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">" MERGE"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
					<argument><expr><ternary><condition><expr><operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>A_CLRALL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">" CLRALL"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
					<argument><expr><ternary><condition><expr><operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>tostate</name></name> <operator>!=</operator> <name>TPS_Null</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">" tostate "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
					<argument><expr><ternary><condition><expr><operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>tostate</name></name> <operator>!=</operator> <name>TPS_Null</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>Actions</name><index>[<expr><name><name>item</name><operator>-&gt;</operator><name>tostate</name></name></expr>]</index></name><operator>.</operator><name>state_name</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
					<argument><expr><ternary><condition><expr><operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">" type "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
					<argument><expr><name><name>tok_alias</name><index>[<expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<comment type="block">/* call special handler if exists */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>special</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name><name>item</name><operator>-&gt;</operator><name>special</name></name><argument_list>(<argument><expr><name>prs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* BINGO, token is found */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>A_BINGO</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>lenbytetoken</name></name> <operator>=</operator> <name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>lenbytetoken</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>lenchartoken</name></name> <operator>=</operator> <name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>lenchartoken</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>lenbytetoken</name></name> <operator>=</operator> <name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>lenchartoken</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* do various actions by flags */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>A_POP</name></expr>)</condition>
		<block>{<block_content>						<comment type="block">/* pop stored state in stack */</comment>
			<decl_stmt><decl><type><name>TParserPosition</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>prev</name></name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>A_PUSH</name></expr>)</condition>
		<block>{<block_content>						<comment type="block">/* push (store) state in stack */</comment>
			<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>pushedAtAction</name></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>	<comment type="block">/* remember where we push */</comment>
			<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <call><name>newTParserPosition</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>A_CLEAR</name></expr>)</condition>
		<block>{<block_content>						<comment type="block">/* clear previous pushed state */</comment>
			<decl_stmt><decl><type><name>TParserPosition</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>A_CLRALL</name></expr>)</condition>
		<block>{<block_content>						<comment type="block">/* clear all previous pushed state */</comment>
			<decl_stmt><decl><type><name>TParserPosition</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

			<while>while <condition>(<expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
			</block_content>}</block></while>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>A_MERGE</name></expr>)</condition>
		<block>{<block_content>						<comment type="block">/* merge posinfo with current and pushed state */</comment>
			<decl_stmt><decl><type><name>TParserPosition</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>prs</name><operator>-&gt;</operator><name>state</name></name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>posbyte</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>posbyte</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>poschar</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>poschar</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>charlen</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>charlen</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>lenbytetoken</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>lenbytetoken</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>lenchartoken</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>lenchartoken</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* set new state if pointed */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>tostate</name></name> <operator>!=</operator> <name>TPS_Null</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>tostate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* check for go away */</comment>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>A_BINGO</name><operator>)</operator> <operator>||</operator>
			<operator>(</operator><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>posbyte</name></name> <operator>&gt;=</operator> <name><name>prs</name><operator>-&gt;</operator><name>lenstr</name></name> <operator>&amp;&amp;</operator>
			 <operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>A_RERUN</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<comment type="block">/* go to beginning of loop if we should rerun or we just restore state */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>A_RERUN</name> <operator>|</operator> <name>A_POP</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/* move forward */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>charlen</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>posbyte</name></name> <operator>+=</operator> <name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>charlen</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>lenbytetoken</name></name> <operator>+=</operator> <name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>charlen</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>poschar</name></name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>lenchartoken</name></name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><ternary><condition><expr><operator>(</operator><name>item</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>A_BINGO</name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>prsd_lextype</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>LexDescr</name>   <modifier>*</modifier></type><name>descr</name> <init>= <expr><operator>(</operator><name>LexDescr</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LexDescr</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>LASTNUM</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>LASTNUM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>descr</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>lexid</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>descr</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>alias</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name><name>tok_alias</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>descr</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>descr</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name><name>lex_descr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name><name>descr</name><index>[<expr><name>LASTNUM</name></expr>]</index></name><operator>.</operator><name>lexid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>descr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>prsd_start</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><call><name>TParserInit</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>prsd_nexttoken</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TParser</name>    <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>TParser</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	  <modifier>*</modifier><modifier>*</modifier></type><name>t</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name>		   <modifier>*</modifier></type><name>tlen</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TParserGet</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>t</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>token</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>tlen</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>lenbytetoken</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>prsd_end</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TParser</name>    <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>TParser</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>TParserClose</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEAVETOKEN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>( (x)==SPACE )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPLEXTOKEN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( (x)==URL_T || (x)==NUMHWORD || (x)==ASCIIHWORD || (x)==HWORD )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENDPUNCTOKEN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( (x)==SPACE )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TS_IDIGNORE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>( (x)==TAG_T || (x)==PROTOCOL || (x)==SPACE || (x)==XMLENTITY )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HLIDREPLACE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>( (x)==TAG_T )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HLIDSKIP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>( (x)==URL_T || (x)==NUMHWORD || (x)==ASCIIHWORD || (x)==HWORD )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XMLHLIDSKIP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>( (x)==URL_T || (x)==NUMHWORD || (x)==ASCIIHWORD || (x)==HWORD )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NONWORDTOKEN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( (x)==SPACE || HLIDREPLACE(x) || HLIDSKIP(x) )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOENDTOKEN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>( NONWORDTOKEN(x) || (x)==SCIENTIFIC || (x)==VERSIONNUMBER || (x)==DECIMAL_T || (x)==SIGNEDINT || (x)==UNSIGNEDINT || TS_IDIGNORE(x) )</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>HeadlineWordEntry</name> <modifier>*</modifier></type><name>words</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>
}</block></struct></type> <name>hlCheck</name>;</typedef>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>checkcondition_HL</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>QueryOperand</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>ExecPhraseData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>hlCheck</name>    <modifier>*</modifier></type><name>checkval</name> <init>= <expr><operator>(</operator><name>hlCheck</name> <operator>*</operator><operator>)</operator> <name>opaque</name></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>checkval</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>checkval</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>item</name> <operator>==</operator> <name>val</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* don't need to find all positions */</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>pos</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WordEntryPos</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>checkval</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>allocated</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>npos</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>checkval</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>pos</name><index>[<expr><name><name>data</name><operator>-&gt;</operator><name>npos</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>checkval</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>pos</name><index>[<expr><name><name>data</name><operator>-&gt;</operator><name>npos</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>checkval</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>npos</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type>
<name>hlCover</name><parameter_list>(<parameter><decl><type><name>HeadlineParsedText</name> <modifier>*</modifier></type><name>prs</name></decl></parameter>, <parameter><decl><type><name>TSQuery</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QueryItem</name>  <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>GETQUERY</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>pos</name> <init>= <expr><operator>*</operator><name>p</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>query</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>QI_VAL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>item</name><operator>++</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>pos</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>prs</name><operator>-&gt;</operator><name>curwords</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>item</name> <operator>==</operator> <operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>qoperand</name></name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <operator>*</operator><name>q</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name>item</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>q</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>GETQUERY</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>query</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>QI_VAL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>item</name><operator>++</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>*</operator><name>q</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name>pos</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>item</name> <operator>==</operator> <operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>qoperand</name></name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name>item</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>&lt;=</operator> <operator>*</operator><name>q</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>hlCheck</name></type>		<name>ch</name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>ch</name><operator>.</operator><name>words</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><operator>*</operator><name>p</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ch</name><operator>.</operator><name>len</name></name> <operator>=</operator> <operator>*</operator><name>q</name> <operator>-</operator> <operator>*</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>TS_execute</name><argument_list>(<argument><expr><call><name>GETQUERY</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>, <argument><expr><name>TS_EXEC_EMPTY</name></expr></argument>, <argument><expr><name>checkcondition_HL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>true</name></expr>;</return></block_content></block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
			<return>return <expr><call><name>hlCover</name><argument_list>(<argument><expr><name>prs</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>mark_fragment</name><parameter_list>(<parameter><decl><type><name>HeadlineParsedText</name> <modifier>*</modifier></type><name>prs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>highlight</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>startpos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>endpos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>startpos</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>endpos</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>item</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>selected</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>highlight</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>HLIDREPLACE</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>replace</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>HLIDSKIP</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>skip</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>XMLHLIDSKIP</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>skip</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>in</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>repeated</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>int32</name></type>		<name>startpos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>endpos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>poslen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>curlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int16</name></type>		<name>in</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int16</name></type>		<name>excluded</name></decl>;</decl_stmt>
}</block></struct></type> <name>CoverPos</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>get_next_fragment</name><parameter_list>(<parameter><decl><type><name>HeadlineParsedText</name> <modifier>*</modifier></type><name>prs</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>startpos</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>endpos</name></decl></parameter>,
				  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>curlen</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>poslen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_words</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Objective: Generate a fragment of words between startpos and endpos
	 * such that it has at most max_words and both ends has query words. If
	 * the startpos and endpos are the endpoints of the cover and the cover
	 * has fewer words than max_words, then this function should just return
	 * the cover
	 */</comment>
	<comment type="block">/* first move startpos to an item */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>*</operator><name>startpos</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <operator>*</operator><name>endpos</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>startpos</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>item</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>repeated</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<comment type="block">/* cut endpos to have only max_words */</comment>
	<expr_stmt><expr><operator>*</operator><name>curlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>poslen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>*</operator><name>startpos</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <operator>*</operator><name>endpos</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>curlen</name> <operator>&lt;</operator> <name>max_words</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NONWORDTOKEN</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>curlen</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>item</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>repeated</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>poslen</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<comment type="block">/* if the cover was cut then move back endpos to a query item */</comment>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>endpos</name> <operator>&gt;</operator> <name>i</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>endpos</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>*</operator><name>endpos</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <operator>*</operator><name>startpos</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>endpos</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>item</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>repeated</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NONWORDTOKEN</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>curlen</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>mark_hl_fragments</name><parameter_list>(<parameter><decl><type><name>HeadlineParsedText</name> <modifier>*</modifier></type><name>prs</name></decl></parameter>, <parameter><decl><type><name>TSQuery</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>highlight</name></decl></parameter>,
				  <parameter><decl><type><name>int</name></type> <name>shortword</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min_words</name></decl></parameter>,
				  <parameter><decl><type><name>int</name></type> <name>max_words</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_fragments</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type>		<name>poslen</name></decl>,
				<decl><type ref="prev"/><name>curlen</name></decl>,
				<decl><type ref="prev"/><name>i</name></decl>,
				<decl><type ref="prev"/><name>f</name></decl>,
				<decl><type ref="prev"/><name>num_f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>stretch</name></decl>,
				<decl><type ref="prev"/><name>maxstretch</name></decl>,
				<decl><type ref="prev"/><name>posmarker</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int32</name></type>		<name>startpos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
				<decl><type ref="prev"/><name>endpos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
				<decl><type ref="prev"/><name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
				<decl><type ref="prev"/><name>q</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int32</name></type>		<name>numcovers</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
				<decl><type ref="prev"/><name>maxcovers</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int32</name></type>		<name>minI</name></decl>,
				<decl><type ref="prev"/><name>minwords</name></decl>,
				<decl><type ref="prev"/><name>maxitems</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CoverPos</name>   <modifier>*</modifier></type><name>covers</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>covers</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>maxcovers</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CoverPos</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* get all covers */</comment>
	<while>while <condition>(<expr><call><name>hlCover</name><argument_list>(<argument><expr><name>prs</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>startpos</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>endpos</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

		<comment type="block">/*
		 * Break the cover into smaller fragments such that each fragment has
		 * at most max_words. Also ensure that each end of the fragment is a
		 * query word. This will allow us to stretch the fragment in either
		 * direction
		 */</comment>

		<while>while <condition>(<expr><name>startpos</name> <operator>&lt;=</operator> <name>endpos</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>get_next_fragment</name><argument_list>(<argument><expr><name>prs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>startpos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endpos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>curlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>poslen</name></expr></argument>, <argument><expr><name>max_words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>numcovers</name> <operator>&gt;=</operator> <name>maxcovers</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>maxcovers</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>covers</name> <operator>=</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name>covers</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CoverPos</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>maxcovers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>covers</name><index>[<expr><name>numcovers</name></expr>]</index></name><operator>.</operator><name>startpos</name> <operator>=</operator> <name>startpos</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>covers</name><index>[<expr><name>numcovers</name></expr>]</index></name><operator>.</operator><name>endpos</name> <operator>=</operator> <name>endpos</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>covers</name><index>[<expr><name>numcovers</name></expr>]</index></name><operator>.</operator><name>curlen</name> <operator>=</operator> <name>curlen</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>covers</name><index>[<expr><name>numcovers</name></expr>]</index></name><operator>.</operator><name>poslen</name> <operator>=</operator> <name>poslen</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>covers</name><index>[<expr><name>numcovers</name></expr>]</index></name><operator>.</operator><name>in</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>covers</name><index>[<expr><name>numcovers</name></expr>]</index></name><operator>.</operator><name>excluded</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>numcovers</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>startpos</name> <operator>=</operator> <name>endpos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>endpos</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
		</block_content>}</block></while>
		<comment type="block">/* move p to generate the next cover */</comment>
		<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/* choose best covers */</comment>
	<for>for <control>(<init><expr><name>f</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>f</name> <operator>&lt;</operator> <name>max_fragments</name></expr>;</condition> <incr><expr><name>f</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>maxitems</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>minwords</name> <operator>=</operator> <name>PG_INT32_MAX</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>minI</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

		<comment type="block">/*
		 * Choose the cover that contains max items. In case of tie choose the
		 * one with smaller number of words.
		 */</comment>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numcovers</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>covers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>in</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>covers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>excluded</name> <operator>&amp;&amp;</operator>
				<operator>(</operator><name>maxitems</name> <operator>&lt;</operator> <name><name>covers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>poslen</name> <operator>||</operator> <operator>(</operator><name>maxitems</name> <operator>==</operator> <name><name>covers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>poslen</name>
												 <operator>&amp;&amp;</operator> <name>minwords</name> <operator>&gt;</operator> <name><name>covers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>curlen</name><operator>)</operator><operator>)</operator></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>maxitems</name> <operator>=</operator> <name><name>covers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>poslen</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>minwords</name> <operator>=</operator> <name><name>covers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>curlen</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>minI</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<comment type="block">/* if a cover was found mark it */</comment>
		<if_stmt><if>if <condition>(<expr><name>minI</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>covers</name><index>[<expr><name>minI</name></expr>]</index></name><operator>.</operator><name>in</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<comment type="block">/* adjust the size of cover */</comment>
			<expr_stmt><expr><name>startpos</name> <operator>=</operator> <name><name>covers</name><index>[<expr><name>minI</name></expr>]</index></name><operator>.</operator><name>startpos</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>endpos</name> <operator>=</operator> <name><name>covers</name><index>[<expr><name>minI</name></expr>]</index></name><operator>.</operator><name>endpos</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>curlen</name> <operator>=</operator> <name><name>covers</name><index>[<expr><name>minI</name></expr>]</index></name><operator>.</operator><name>curlen</name></expr>;</expr_stmt>
			<comment type="block">/* stretch the cover if cover size is lower than max_words */</comment>
			<if_stmt><if>if <condition>(<expr><name>curlen</name> <operator>&lt;</operator> <name>max_words</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* divide the stretch on both sides of cover */</comment>
				<expr_stmt><expr><name>maxstretch</name> <operator>=</operator> <operator>(</operator><name>max_words</name> <operator>-</operator> <name>curlen</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

				<comment type="block">/*
				 * first stretch the startpos stop stretching if 1. we hit the
				 * beginning of document 2. exceed maxstretch 3. we hit an
				 * already marked fragment
				 */</comment>
				<expr_stmt><expr><name>stretch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>posmarker</name> <operator>=</operator> <name>startpos</name></expr>;</expr_stmt>
				<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>startpos</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>stretch</name> <operator>&lt;</operator> <name>maxstretch</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>in</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NONWORDTOKEN</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name>curlen</name><operator>++</operator></expr>;</expr_stmt>
						<expr_stmt><expr><name>stretch</name><operator>++</operator></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><name>posmarker</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
				</block_content>}</block></for>
				<comment type="block">/* cut back startpos till we find a non short token */</comment>
				<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>posmarker</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>startpos</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>NOENDTOKEN</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>&lt;=</operator> <name>shortword</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NONWORDTOKEN</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>curlen</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></for>
				<expr_stmt><expr><name>startpos</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
				<comment type="block">/* now stretch the endpos as much as possible */</comment>
				<expr_stmt><expr><name>posmarker</name> <operator>=</operator> <name>endpos</name></expr>;</expr_stmt>
				<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>endpos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>prs</name><operator>-&gt;</operator><name>curwords</name></name> <operator>&amp;&amp;</operator> <name>curlen</name> <operator>&lt;</operator> <name>max_words</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>in</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NONWORDTOKEN</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>curlen</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<expr_stmt><expr><name>posmarker</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
				</block_content>}</block></for>
				<comment type="block">/* cut back endpos till we find a non-short token */</comment>
				<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>posmarker</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <name>endpos</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>NOENDTOKEN</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>&lt;=</operator> <name>shortword</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NONWORDTOKEN</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>curlen</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></for>
				<expr_stmt><expr><name>endpos</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>covers</name><index>[<expr><name>minI</name></expr>]</index></name><operator>.</operator><name>startpos</name> <operator>=</operator> <name>startpos</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>covers</name><index>[<expr><name>minI</name></expr>]</index></name><operator>.</operator><name>endpos</name> <operator>=</operator> <name>endpos</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>covers</name><index>[<expr><name>minI</name></expr>]</index></name><operator>.</operator><name>curlen</name> <operator>=</operator> <name>curlen</name></expr>;</expr_stmt>
			<comment type="block">/* Mark the chosen fragments (covers) */</comment>
			<expr_stmt><expr><call><name>mark_fragment</name><argument_list>(<argument><expr><name>prs</name></expr></argument>, <argument><expr><name>highlight</name></expr></argument>, <argument><expr><name>startpos</name></expr></argument>, <argument><expr><name>endpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>num_f</name><operator>++</operator></expr>;</expr_stmt>
			<comment type="block">/* exclude overlapping covers */</comment>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numcovers</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>minI</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>covers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>startpos</name> <operator>&gt;=</operator> <name><name>covers</name><index>[<expr><name>minI</name></expr>]</index></name><operator>.</operator><name>startpos</name> <operator>&amp;&amp;</operator> <name><name>covers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>startpos</name> <operator>&lt;=</operator> <name><name>covers</name><index>[<expr><name>minI</name></expr>]</index></name><operator>.</operator><name>endpos</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>covers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>endpos</name> <operator>&gt;=</operator> <name><name>covers</name><index>[<expr><name>minI</name></expr>]</index></name><operator>.</operator><name>startpos</name> <operator>&amp;&amp;</operator> <name><name>covers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>endpos</name> <operator>&lt;=</operator> <name><name>covers</name><index>[<expr><name>minI</name></expr>]</index></name><operator>.</operator><name>endpos</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>covers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>excluded</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<break>break;</break></block_content></block></else></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* show at least min_words we have not marked anything */</comment>
	<if_stmt><if>if <condition>(<expr><name>num_f</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>startpos</name> <operator>=</operator> <name>endpos</name> <operator>=</operator> <name>curlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>prs</name><operator>-&gt;</operator><name>curwords</name></name> <operator>&amp;&amp;</operator> <name>curlen</name> <operator>&lt;</operator> <name>min_words</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NONWORDTOKEN</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>curlen</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>endpos</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>mark_fragment</name><argument_list>(<argument><expr><name>prs</name></expr></argument>, <argument><expr><name>highlight</name></expr></argument>, <argument><expr><name>startpos</name></expr></argument>, <argument><expr><name>endpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>covers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>mark_hl_words</name><parameter_list>(<parameter><decl><type><name>HeadlineParsedText</name> <modifier>*</modifier></type><name>prs</name></decl></parameter>, <parameter><decl><type><name>TSQuery</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>highlight</name></decl></parameter>,
			  <parameter><decl><type><name>int</name></type> <name>shortword</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min_words</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_words</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
				<decl><type ref="prev"/><name>q</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>bestb</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
				<decl><type ref="prev"/><name>beste</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>bestlen</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>pose</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
				<decl><type ref="prev"/><name>posb</name></decl>,
				<decl><type ref="prev"/><name>poslen</name></decl>,
				<decl><type ref="prev"/><name>curlen</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>highlight</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<while>while <condition>(<expr><call><name>hlCover</name><argument_list>(<argument><expr><name>prs</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* find cover len in words */</comment>
			<expr_stmt><expr><name>curlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>poslen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>p</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>q</name> <operator>&amp;&amp;</operator> <name>curlen</name> <operator>&lt;</operator> <name>max_words</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NONWORDTOKEN</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>curlen</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>item</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>repeated</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>poslen</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>pose</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			</block_content>}</block></for>

			<if_stmt><if>if <condition>(<expr><name>poslen</name> <operator>&lt;</operator> <name>bestlen</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>NOENDTOKEN</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>beste</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>beste</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>&lt;=</operator> <name>shortword</name><operator>)</operator></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* best already found, so try one more cover */</comment>
				<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name>posb</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>curlen</name> <operator>&lt;</operator> <name>max_words</name></expr>)</condition>
			<block>{<block_content>					<comment type="block">/* find good end */</comment>
				<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>prs</name><operator>-&gt;</operator><name>curwords</name></name> <operator>&amp;&amp;</operator> <name>curlen</name> <operator>&lt;</operator> <name>max_words</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>q</name></expr>)</condition>
					<block>{<block_content>
						<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NONWORDTOKEN</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name>curlen</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
						<if_stmt><if>if <condition>(<expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>item</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>repeated</name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name>poslen</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><name>pose</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><call><name>NOENDTOKEN</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>&lt;=</operator> <name>shortword</name></expr>)</condition><block type="pseudo"><block_content>
						<continue>continue;</continue></block_content></block></if></if_stmt>
					<if_stmt><if>if <condition>(<expr><name>curlen</name> <operator>&gt;=</operator> <name>min_words</name></expr>)</condition><block type="pseudo"><block_content>
						<break>break;</break></block_content></block></if></if_stmt>
				</block_content>}</block></for>
				<if_stmt><if>if <condition>(<expr><name>curlen</name> <operator>&lt;</operator> <name>min_words</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;=</operator> <name><name>prs</name><operator>-&gt;</operator><name>curwords</name></name></expr>)</condition>
				<block>{<block_content>				<comment type="block">/* got end of text and our cover is shorter
								 * than min_words */</comment>
					<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>p</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
					<block>{<block_content>
						<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NONWORDTOKEN</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name>curlen</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
						<if_stmt><if>if <condition>(<expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>item</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>repeated</name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name>poslen</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
						<if_stmt><if>if <condition>(<expr><name>curlen</name> <operator>&gt;=</operator> <name>max_words</name></expr>)</condition><block type="pseudo"><block_content>
							<break>break;</break></block_content></block></if></if_stmt>
						<if_stmt><if>if <condition>(<expr><call><name>NOENDTOKEN</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>&lt;=</operator> <name>shortword</name></expr>)</condition><block type="pseudo"><block_content>
							<continue>continue;</continue></block_content></block></if></if_stmt>
						<if_stmt><if>if <condition>(<expr><name>curlen</name> <operator>&gt;=</operator> <name>min_words</name></expr>)</condition><block type="pseudo"><block_content>
							<break>break;</break></block_content></block></if></if_stmt>
					</block_content>}</block></for>
					<expr_stmt><expr><name>posb</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>i</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>					<comment type="block">/* shorter cover :((( */</comment>
				<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>q</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>i</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<for>for <control>(<init>;</init> <condition><expr><name>curlen</name> <operator>&gt;</operator> <name>min_words</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NONWORDTOKEN</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>curlen</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<if_stmt><if>if <condition>(<expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>item</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>repeated</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>poslen</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<expr_stmt><expr><name>pose</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><call><name>NOENDTOKEN</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>&lt;=</operator> <name>shortword</name></expr>)</condition><block type="pseudo"><block_content>
						<continue>continue;</continue></block_content></block></if></if_stmt>
					<break>break;</break>
				</block_content>}</block></for>
			</block_content>}</block></else></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>bestlen</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>poslen</name> <operator>&gt;</operator> <name>bestlen</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>NOENDTOKEN</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>pose</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>pose</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>&lt;=</operator> <name>shortword</name><operator>)</operator><operator>)</operator> <operator>||</operator>
				<operator>(</operator><name>bestlen</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>NOENDTOKEN</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>pose</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>pose</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>&lt;=</operator> <name>shortword</name><operator>)</operator> <operator>&amp;&amp;</operator>
				 <operator>(</operator><call><name>NOENDTOKEN</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>beste</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>beste</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>&lt;=</operator> <name>shortword</name><operator>)</operator><operator>)</operator></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>bestb</name> <operator>=</operator> <name>posb</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>beste</name> <operator>=</operator> <name>pose</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>bestlen</name> <operator>=</operator> <name>poslen</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>

		<if_stmt><if>if <condition>(<expr><name>bestlen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>curlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>prs</name><operator>-&gt;</operator><name>curwords</name></name> <operator>&amp;&amp;</operator> <name>curlen</name> <operator>&lt;</operator> <name>min_words</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NONWORDTOKEN</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>curlen</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>pose</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			</block_content>}</block></for>
			<expr_stmt><expr><name>bestb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>beste</name> <operator>=</operator> <name>pose</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>bestb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>beste</name> <operator>=</operator> <name><name>prs</name><operator>-&gt;</operator><name>curwords</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>bestb</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>beste</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>item</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>selected</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>highlight</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>HLIDREPLACE</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>replace</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>HLIDSKIP</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>skip</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>XMLHLIDSKIP</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>skip</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>in</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>repeated</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
	</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>prsd_headline</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HeadlineParsedText</name> <modifier>*</modifier></type><name>prs</name> <init>= <expr><operator>(</operator><name>HeadlineParsedText</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>prsoptions</name> <init>= <expr><operator>(</operator><name>List</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSQuery</name></type>		<name>query</name> <init>= <expr><call><name>PG_GETARG_TSQUERY</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* from opt + start and end tag */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>min_words</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>max_words</name> <init>= <expr><literal type="number">35</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>shortword</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>max_fragments</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>highlight</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

	<comment type="block">/* config */</comment>
	<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>startsel</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>stopsel</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<macro><name>foreach</name><argument_list>(<argument>l</argument>, <argument>prsoptions</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>DefElem</name>    <modifier>*</modifier></type><name>defel</name> <init>= <expr><operator>(</operator><name>DefElem</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>defGetString</name><argument_list>(<argument><expr><name>defel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name><name>defel</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>, <argument><expr><literal type="string">"MaxWords"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>max_words</name> <operator>=</operator> <call><name>pg_atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name><name>defel</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>, <argument><expr><literal type="string">"MinWords"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>min_words</name> <operator>=</operator> <call><name>pg_atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name><name>defel</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>, <argument><expr><literal type="string">"ShortWord"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>shortword</name> <operator>=</operator> <call><name>pg_atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name><name>defel</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>, <argument><expr><literal type="string">"MaxFragments"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>max_fragments</name> <operator>=</operator> <call><name>pg_atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name><name>defel</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>, <argument><expr><literal type="string">"StartSel"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>startsel</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name><name>defel</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>, <argument><expr><literal type="string">"StopSel"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>stopsel</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name><name>defel</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>, <argument><expr><literal type="string">"FragmentDelimiter"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>fragdelim</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name><name>defel</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>, <argument><expr><literal type="string">"HighlightAll"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>highlight</name> <operator>=</operator> <operator>(</operator><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
						 <call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"on"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
						 <call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
						 <call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"t"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
						 <call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"y"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
						 <call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"yes"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unrecognized headline parameter: \"%s\""</literal></expr></argument>,
							<argument><expr><name><name>defel</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><name>highlight</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>min_words</name> <operator>&gt;=</operator> <name>max_words</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"MinWords should be less than MaxWords"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>min_words</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"MinWords should be positive"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>shortword</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"ShortWord should be &gt;= 0"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>max_fragments</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"MaxFragments should be &gt;= 0"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>max_fragments</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/* call the default headline generator */</comment>
		<expr_stmt><expr><call><name>mark_hl_words</name><argument_list>(<argument><expr><name>prs</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>highlight</name></expr></argument>, <argument><expr><name>shortword</name></expr></argument>, <argument><expr><name>min_words</name></expr></argument>, <argument><expr><name>max_words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>mark_hl_fragments</name><argument_list>(<argument><expr><name>prs</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>highlight</name></expr></argument>, <argument><expr><name>shortword</name></expr></argument>, <argument><expr><name>min_words</name></expr></argument>, <argument><expr><name>max_words</name></expr></argument>, <argument><expr><name>max_fragments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>prs</name><operator>-&gt;</operator><name>startsel</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>startsel</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><literal type="string">"&lt;b&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>prs</name><operator>-&gt;</operator><name>stopsel</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>stopsel</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><literal type="string">"&lt;/b&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>prs</name><operator>-&gt;</operator><name>fragdelim</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>fragdelim</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><literal type="string">" ... "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>startsellen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>startsel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>stopsellen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>stopsel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>fragdelimlen</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>fragdelim</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>prs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
