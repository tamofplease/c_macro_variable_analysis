<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/backend/tsearch/to_tsany.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * to_tsany.c
 *		to_ts* function definitions
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 *
 *
 * IDENTIFICATION
 *	  src/backend/tsearch/to_tsany.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsearch/ts_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsearch/ts_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/jsonapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/jsonfuncs.h"</cpp:file></cpp:include>


<typedef>typedef <type><struct>struct <name>MorphOpaque</name>
<block>{
	<decl_stmt><decl><type><name>Oid</name></type>			<name>cfg_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>qoperator</name></decl>;</decl_stmt>		<comment type="block">/* query operator */</comment>
}</block></struct></type> <name>MorphOpaque</name>;</typedef>

<typedef>typedef <type><struct>struct <name>TSVectorBuildState</name>
<block>{
	<decl_stmt><decl><type><name>ParsedText</name> <modifier>*</modifier></type><name>prs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>cfgId</name></decl>;</decl_stmt>
}</block></struct></type> <name>TSVectorBuildState</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>add_to_tsvector</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_state</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>elem_value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>elem_len</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>Datum</name></type>
<name>get_current_ts_config</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_RETURN_OID</name><argument_list>(<argument><expr><call><name>getTSCurrentConfig</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * to_tsvector
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>compareWORD</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>tsCompareString</name><argument_list>(
						  <argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>ParsedWord</name> <operator>*</operator><operator>)</operator> <name>a</name><operator>)</operator><operator>-&gt;</operator><name>word</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>ParsedWord</name> <operator>*</operator><operator>)</operator> <name>a</name><operator>)</operator><operator>-&gt;</operator><name>len</name></expr></argument>,
						  <argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>ParsedWord</name> <operator>*</operator><operator>)</operator> <name>b</name><operator>)</operator><operator>-&gt;</operator><name>word</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>ParsedWord</name> <operator>*</operator><operator>)</operator> <name>b</name><operator>)</operator><operator>-&gt;</operator><name>len</name></expr></argument>,
						  <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>ParsedWord</name> <operator>*</operator><operator>)</operator> <name>a</name><operator>)</operator><operator>-&gt;</operator><name><name>pos</name><operator>.</operator><name>pos</name></name> <operator>==</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>ParsedWord</name> <operator>*</operator><operator>)</operator> <name>b</name><operator>)</operator><operator>-&gt;</operator><name><name>pos</name><operator>.</operator><name>pos</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>res</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>ParsedWord</name> <operator>*</operator><operator>)</operator> <name>a</name><operator>)</operator><operator>-&gt;</operator><name><name>pos</name><operator>.</operator><name>pos</name></name> <operator>&gt;</operator> <operator>(</operator><operator>(</operator><specifier>const</specifier> <name>ParsedWord</name> <operator>*</operator><operator>)</operator> <name>b</name><operator>)</operator><operator>-&gt;</operator><name><name>pos</name><operator>.</operator><name>pos</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>uniqueWORD</name><parameter_list>(<parameter><decl><type><name>ParsedWord</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ParsedWord</name> <modifier>*</modifier></type><name>ptr</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>tmppos</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>tmppos</name> <operator>=</operator> <call><name>LIMITPOS</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>alen</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>apos</name></name> <operator>=</operator> <operator>(</operator><name>uint16</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint16</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>a</name><operator>-&gt;</operator><name>alen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>apos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>apos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>tmppos</name></expr>;</expr_stmt>
		<return>return <expr><name>l</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>a</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * Sort words with its positions
	 */</comment>
	<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>a</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ParsedWord</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>compareWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Initialize first word and its first position
	 */</comment>
	<expr_stmt><expr><name>tmppos</name> <operator>=</operator> <call><name>LIMITPOS</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>alen</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>apos</name></name> <operator>=</operator> <operator>(</operator><name>uint16</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint16</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>a</name><operator>-&gt;</operator><name>alen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>apos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>apos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>tmppos</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Summarize position information for each word
	 */</comment>
	<while>while <condition>(<expr><name>ptr</name> <operator>-</operator> <name>a</name> <operator>&lt;</operator> <name>l</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ptr</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <name><name>res</name><operator>-&gt;</operator><name>len</name></name> <operator>&amp;&amp;</operator>
			  <call><name>strncmp</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>word</name></name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>word</name></name></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * Got a new word, so put it in result
			 */</comment>
			<expr_stmt><expr><name>res</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>word</name></name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>word</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>tmppos</name> <operator>=</operator> <call><name>LIMITPOS</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>alen</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>apos</name></name> <operator>=</operator> <operator>(</operator><name>uint16</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint16</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>res</name><operator>-&gt;</operator><name>alen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>apos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>apos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>tmppos</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/*
			 * The word already exists, so adjust position information. But
			 * before we should check size of position's array, max allowed
			 * value for position and uniqueness of position
			 */</comment>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>word</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>apos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name>MAXNUMPOS</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>res</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>apos</name><index>[<expr><name><name>res</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>apos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>!=</operator> <name>MAXENTRYPOS</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
				<name><name>res</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>apos</name><index>[<expr><name><name>res</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>apos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>!=</operator> <call><name>LIMITPOS</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>apos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>res</name><operator>-&gt;</operator><name>alen</name></name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>alen</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>apos</name></name> <operator>=</operator> <operator>(</operator><name>uint16</name> <operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>apos</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint16</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>res</name><operator>-&gt;</operator><name>alen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>apos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>res</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>apos</name><index>[<expr><name><name>res</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>apos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>!=</operator> <call><name>LIMITPOS</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>apos</name><index>[<expr><name><name>res</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>apos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>LIMITPOS</name><argument_list>(<argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>res</name><operator>-&gt;</operator><name>pos</name><operator>.</operator><name>apos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>res</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>a</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * make value of tsvector, given parsed text
 *
 * Note: frees prs-&gt;words and subsidiary data.
 */</comment>
<function><type><name>TSVector</name></type>
<name>make_tsvector</name><parameter_list>(<parameter><decl><type><name>ParsedText</name> <modifier>*</modifier></type><name>prs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>j</name></decl>,
				<decl><type ref="prev"/><name>lenstr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
				<decl><type ref="prev"/><name>totallen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSVector</name></type>	<name>in</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WordEntry</name>  <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>stroff</name></decl>;</decl_stmt>

	<comment type="block">/* Merge duplicate words */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>prs</name><operator>-&gt;</operator><name>curwords</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>curwords</name></name> <operator>=</operator> <call><name>uniqueWORD</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name></name></expr></argument>, <argument><expr><name><name>prs</name><operator>-&gt;</operator><name>curwords</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Determine space needed */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>prs</name><operator>-&gt;</operator><name>curwords</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>lenstr</name> <operator>+=</operator> <name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alen</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>lenstr</name> <operator>=</operator> <call><name>SHORTALIGN</name><argument_list>(<argument><expr><name>lenstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>lenstr</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pos</name><operator>.</operator><name>apos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WordEntryPos</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>lenstr</name> <operator>&gt;</operator> <name>MAXSTRPOS</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROGRAM_LIMIT_EXCEEDED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"string is too long for tsvector (%d bytes, max %d bytes)"</literal></expr></argument>, <argument><expr><name>lenstr</name></expr></argument>, <argument><expr><name>MAXSTRPOS</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>totallen</name> <operator>=</operator> <call><name>CALCDATASIZE</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>curwords</name></name></expr></argument>, <argument><expr><name>lenstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>in</name> <operator>=</operator> <operator>(</operator><name>TSVector</name><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>totallen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>totallen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>prs</name><operator>-&gt;</operator><name>curwords</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>ARRPTR</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>STRPTR</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>stroff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>prs</name><operator>-&gt;</operator><name>curwords</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>stroff</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <name>stroff</name></expr></argument>, <argument><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>word</name></expr></argument>, <argument><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>stroff</name> <operator>+=</operator> <name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>alen</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>k</name> <init>= <expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pos</name><operator>.</operator><name>apos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>WordEntryPos</name> <modifier>*</modifier></type><name>wptr</name></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0xFFFF</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"positions array too long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>haspos</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>stroff</name> <operator>=</operator> <call><name>SHORTALIGN</name><argument_list>(<argument><expr><name>stroff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint16</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>str</name> <operator>+</operator> <name>stroff</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>uint16</name><operator>)</operator> <name>k</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>wptr</name> <operator>=</operator> <call><name>POSDATAPTR</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<expr_stmt><expr><call><name>WEP_SETWEIGHT</name><argument_list>(<argument><expr><name><name>wptr</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>WEP_SETPOS</name><argument_list>(<argument><expr><name><name>wptr</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pos</name><operator>.</operator><name>apos</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
			<expr_stmt><expr><name>stroff</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>k</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WordEntryPos</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>pos</name><operator>.</operator><name>apos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>haspos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name><name>prs</name><operator>-&gt;</operator><name>words</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>in</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>to_tsvector_byid</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>cfgId</name> <init>= <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>in</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ParsedText</name></type>	<name>prs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSVector</name></type>	<name>out</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>prs</name><operator>.</operator><name>lenwords</name></name> <operator>=</operator> <call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">6</literal></expr>;</expr_stmt>	<comment type="block">/* just estimation of word's
												 * number */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>prs</name><operator>.</operator><name>lenwords</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>prs</name><operator>.</operator><name>lenwords</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>prs</name><operator>.</operator><name>curwords</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>prs</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>prs</name><operator>.</operator><name>words</name></name> <operator>=</operator> <operator>(</operator><name>ParsedWord</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ParsedWord</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>prs</name><operator>.</operator><name>lenwords</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>parsetext</name><argument_list>(<argument><expr><name>cfgId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prs</name></expr></argument>, <argument><expr><call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>make_tsvector</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_TSVECTOR</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>to_tsvector</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>in</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>cfgId</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cfgId</name> <operator>=</operator> <call><name>getTSCurrentConfig</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>to_tsvector_byid</name></expr></argument>,
										<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>cfgId</name></expr></argument>)</argument_list></call></expr></argument>,
										<argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Worker function for jsonb(_string)_to_tsvector(_byid)
 */</comment>
<function><type><specifier>static</specifier> <name>TSVector</name></type>
<name>jsonb_to_tsvector_worker</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>cfgId</name></decl></parameter>, <parameter><decl><type><name>Jsonb</name> <modifier>*</modifier></type><name>jb</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TSVectorBuildState</name></type> <name>state</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ParsedText</name></type>	<name>prs</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>prs</name><operator>.</operator><name>words</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>prs</name><operator>.</operator><name>curwords</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>.</operator><name>prs</name></name> <operator>=</operator> <operator>&amp;</operator><name>prs</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>.</operator><name>cfgId</name></name> <operator>=</operator> <name>cfgId</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>iterate_jsonb_values</name><argument_list>(<argument><expr><name>jb</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>add_to_tsvector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>make_tsvector</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prs</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>jsonb_string_to_tsvector_byid</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>cfgId</name> <init>= <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Jsonb</name>	   <modifier>*</modifier></type><name>jb</name> <init>= <expr><call><name>PG_GETARG_JSONB_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSVector</name></type>	<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>jsonb_to_tsvector_worker</name><argument_list>(<argument><expr><name>cfgId</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><name>jtiString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>jb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_TSVECTOR</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>jsonb_string_to_tsvector</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Jsonb</name>	   <modifier>*</modifier></type><name>jb</name> <init>= <expr><call><name>PG_GETARG_JSONB_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>cfgId</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSVector</name></type>	<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cfgId</name> <operator>=</operator> <call><name>getTSCurrentConfig</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>jsonb_to_tsvector_worker</name><argument_list>(<argument><expr><name>cfgId</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><name>jtiString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>jb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_TSVECTOR</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>jsonb_to_tsvector_byid</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>cfgId</name> <init>= <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Jsonb</name>	   <modifier>*</modifier></type><name>jb</name> <init>= <expr><call><name>PG_GETARG_JSONB_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Jsonb</name>	   <modifier>*</modifier></type><name>jbFlags</name> <init>= <expr><call><name>PG_GETARG_JSONB_P</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSVector</name></type>	<name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>flags</name> <init>= <expr><call><name>parse_jsonb_index_flags</name><argument_list>(<argument><expr><name>jbFlags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>jsonb_to_tsvector_worker</name><argument_list>(<argument><expr><name>cfgId</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>jb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>jbFlags</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_TSVECTOR</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>jsonb_to_tsvector</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Jsonb</name>	   <modifier>*</modifier></type><name>jb</name> <init>= <expr><call><name>PG_GETARG_JSONB_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Jsonb</name>	   <modifier>*</modifier></type><name>jbFlags</name> <init>= <expr><call><name>PG_GETARG_JSONB_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>cfgId</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSVector</name></type>	<name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>flags</name> <init>= <expr><call><name>parse_jsonb_index_flags</name><argument_list>(<argument><expr><name>jbFlags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>cfgId</name> <operator>=</operator> <call><name>getTSCurrentConfig</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>jsonb_to_tsvector_worker</name><argument_list>(<argument><expr><name>cfgId</name></expr></argument>, <argument><expr><name>jb</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>jb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>jbFlags</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_TSVECTOR</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Worker function for json(_string)_to_tsvector(_byid)
 */</comment>
<function><type><specifier>static</specifier> <name>TSVector</name></type>
<name>json_to_tsvector_worker</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>cfgId</name></decl></parameter>, <parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TSVectorBuildState</name></type> <name>state</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ParsedText</name></type>	<name>prs</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>prs</name><operator>.</operator><name>words</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>prs</name><operator>.</operator><name>curwords</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>.</operator><name>prs</name></name> <operator>=</operator> <operator>&amp;</operator><name>prs</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>.</operator><name>cfgId</name></name> <operator>=</operator> <name>cfgId</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>iterate_json_values</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>add_to_tsvector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>make_tsvector</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prs</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>json_string_to_tsvector_byid</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>cfgId</name> <init>= <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>json</name> <init>= <expr><call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSVector</name></type>	<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>json_to_tsvector_worker</name><argument_list>(<argument><expr><name>cfgId</name></expr></argument>, <argument><expr><name>json</name></expr></argument>, <argument><expr><name>jtiString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_TSVECTOR</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>json_string_to_tsvector</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>json</name> <init>= <expr><call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>cfgId</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSVector</name></type>	<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cfgId</name> <operator>=</operator> <call><name>getTSCurrentConfig</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>json_to_tsvector_worker</name><argument_list>(<argument><expr><name>cfgId</name></expr></argument>, <argument><expr><name>json</name></expr></argument>, <argument><expr><name>jtiString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_TSVECTOR</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>json_to_tsvector_byid</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>cfgId</name> <init>= <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>json</name> <init>= <expr><call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Jsonb</name>	   <modifier>*</modifier></type><name>jbFlags</name> <init>= <expr><call><name>PG_GETARG_JSONB_P</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSVector</name></type>	<name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>flags</name> <init>= <expr><call><name>parse_jsonb_index_flags</name><argument_list>(<argument><expr><name>jbFlags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>json_to_tsvector_worker</name><argument_list>(<argument><expr><name>cfgId</name></expr></argument>, <argument><expr><name>json</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>jbFlags</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_TSVECTOR</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>json_to_tsvector</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>json</name> <init>= <expr><call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Jsonb</name>	   <modifier>*</modifier></type><name>jbFlags</name> <init>= <expr><call><name>PG_GETARG_JSONB_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>cfgId</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSVector</name></type>	<name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>flags</name> <init>= <expr><call><name>parse_jsonb_index_flags</name><argument_list>(<argument><expr><name>jbFlags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>cfgId</name> <operator>=</operator> <call><name>getTSCurrentConfig</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>json_to_tsvector_worker</name><argument_list>(<argument><expr><name>cfgId</name></expr></argument>, <argument><expr><name>json</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>jbFlags</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_TSVECTOR</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Parse lexemes in an element of a json(b) value, add to TSVectorBuildState.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_to_tsvector</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_state</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>elem_value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>elem_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TSVectorBuildState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>(</operator><name>TSVectorBuildState</name> <operator>*</operator><operator>)</operator> <name>_state</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ParsedText</name> <modifier>*</modifier></type><name>prs</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>prs</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>prevwords</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>prs</name><operator>-&gt;</operator><name>words</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * First time through: initialize words array to a reasonable size.
		 * (parsetext() will realloc it bigger as needed.)
		 */</comment>
		<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>lenwords</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>words</name></name> <operator>=</operator> <operator>(</operator><name>ParsedWord</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ParsedWord</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>prs</name><operator>-&gt;</operator><name>lenwords</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>curwords</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>prevwords</name> <operator>=</operator> <name><name>prs</name><operator>-&gt;</operator><name>curwords</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>parsetext</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>cfgId</name></name></expr></argument>, <argument><expr><name>prs</name></expr></argument>, <argument><expr><name>elem_value</name></expr></argument>, <argument><expr><name>elem_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If we extracted any words from this JSON element, advance pos to create
	 * an artificial break between elements.  This is because we don't want
	 * phrase searches to think that the last word in this element is adjacent
	 * to the first word in the next one.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>prs</name><operator>-&gt;</operator><name>curwords</name></name> <operator>&gt;</operator> <name>prevwords</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>prs</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * to_tsquery
 */</comment>


<comment type="block">/*
 * This function is used for morph parsing.
 *
 * The value is passed to parsetext which will call the right dictionary to
 * lexize the word. If it turns out to be a stopword, we push a QI_VALSTOP
 * to the stack.
 *
 * All words belonging to the same variant are pushed as an ANDed list,
 * and different variants are ORed together.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>pushval_morph</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>opaque</name></decl></parameter>, <parameter><decl><type><name>TSQueryParserState</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>strval</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lenval</name></decl></parameter>, <parameter><decl><type><name>int16</name></type> <name>weight</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>prefix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type>		<name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ParsedText</name></type>	<name>prs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>variant</name></decl>,
				<decl><type ref="prev"/><name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
				<decl><type ref="prev"/><name>cntvar</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
				<decl><type ref="prev"/><name>cntpos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
				<decl><type ref="prev"/><name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MorphOpaque</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>MorphOpaque</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>opaque</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>prs</name><operator>.</operator><name>lenwords</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>prs</name><operator>.</operator><name>curwords</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>prs</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>prs</name><operator>.</operator><name>words</name></name> <operator>=</operator> <operator>(</operator><name>ParsedWord</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ParsedWord</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>prs</name><operator>.</operator><name>lenwords</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>parsetext</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>cfg_id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prs</name></expr></argument>, <argument><expr><name>strval</name></expr></argument>, <argument><expr><name>lenval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>prs</name><operator>.</operator><name>curwords</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<while>while <condition>(<expr><name>count</name> <operator>&lt;</operator> <name><name>prs</name><operator>.</operator><name>curwords</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * Were any stop words removed? If so, fill empty positions with
			 * placeholders linked by an appropriate operator.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pos</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>prs</name><operator>.</operator><name>words</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name><name>pos</name><operator>.</operator><name>pos</name></name></expr>)</condition>
			<block>{<block_content>
				<while>while <condition>(<expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>prs</name><operator>.</operator><name>words</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name><name>pos</name><operator>.</operator><name>pos</name></name></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* put placeholders for each missing stop word */</comment>
					<expr_stmt><expr><call><name>pushStop</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>cntpos</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>pushOperator</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>qoperator</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<expr_stmt><expr><name>cntpos</name><operator>++</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></while>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* save current word's position */</comment>
			<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>prs</name><operator>.</operator><name>words</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name><name>pos</name><operator>.</operator><name>pos</name></name></expr>;</expr_stmt>

			<comment type="block">/* Go through all variants obtained from this token */</comment>
			<expr_stmt><expr><name>cntvar</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<while>while <condition>(<expr><name>count</name> <operator>&lt;</operator> <name><name>prs</name><operator>.</operator><name>curwords</name></name> <operator>&amp;&amp;</operator> <name>pos</name> <operator>==</operator> <name><name>prs</name><operator>.</operator><name>words</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name><name>pos</name><operator>.</operator><name>pos</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>variant</name> <operator>=</operator> <name><name>prs</name><operator>.</operator><name>words</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name>nvariant</name></expr>;</expr_stmt>

				<comment type="block">/* Push all words belonging to the same variant */</comment>
				<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<while>while <condition>(<expr><name>count</name> <operator>&lt;</operator> <name><name>prs</name><operator>.</operator><name>curwords</name></name> <operator>&amp;&amp;</operator>
					   <name>pos</name> <operator>==</operator> <name><name>prs</name><operator>.</operator><name>words</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name><name>pos</name><operator>.</operator><name>pos</name></name> <operator>&amp;&amp;</operator>
					   <name>variant</name> <operator>==</operator> <name><name>prs</name><operator>.</operator><name>words</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name>nvariant</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>pushValue</name><argument_list>(<argument><expr><name>state</name></expr></argument>,
							  <argument><expr><name><name>prs</name><operator>.</operator><name>words</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name>word</name></expr></argument>,
							  <argument><expr><name><name>prs</name><operator>.</operator><name>words</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>,
							  <argument><expr><name>weight</name></expr></argument>,
							  <argument><expr><operator>(</operator><operator>(</operator><name><name>prs</name><operator>.</operator><name>words</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>TSL_PREFIX</name><operator>)</operator> <operator>||</operator> <name>prefix</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>prs</name><operator>.</operator><name>words</name><index>[<expr><name>count</name></expr>]</index></name><operator>.</operator><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>cnt</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>pushOperator</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>OP_AND</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></while>

				<if_stmt><if>if <condition>(<expr><name>cntvar</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>pushOperator</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>OP_OR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>cntvar</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></while>

			<if_stmt><if>if <condition>(<expr><name>cntpos</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* distance may be useful */</comment>
				<expr_stmt><expr><call><name>pushOperator</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>qoperator</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name>cntpos</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>

		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>prs</name><operator>.</operator><name>words</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pushStop</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>to_tsquery_byid</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>in</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSQuery</name></type>		<name>query</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MorphOpaque</name></type> <name>data</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>data</name><operator>.</operator><name>cfg_id</name></name> <operator>=</operator> <call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>data</name><operator>.</operator><name>qoperator</name></name> <operator>=</operator> <name>OP_AND</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>parse_tsquery</name><argument_list>(<argument><expr><call><name>text_to_cstring</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>,
						  <argument><expr><name>pushval_morph</name></expr></argument>,
						  <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></argument>,
						  <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_TSQUERY</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>to_tsquery</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>in</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>cfgId</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cfgId</name> <operator>=</operator> <call><name>getTSCurrentConfig</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>to_tsquery_byid</name></expr></argument>,
										<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>cfgId</name></expr></argument>)</argument_list></call></expr></argument>,
										<argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>plainto_tsquery_byid</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>in</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSQuery</name></type>		<name>query</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MorphOpaque</name></type> <name>data</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>data</name><operator>.</operator><name>cfg_id</name></name> <operator>=</operator> <call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>data</name><operator>.</operator><name>qoperator</name></name> <operator>=</operator> <name>OP_AND</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>parse_tsquery</name><argument_list>(<argument><expr><call><name>text_to_cstring</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>,
						  <argument><expr><name>pushval_morph</name></expr></argument>,
						  <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></argument>,
						  <argument><expr><name>P_TSQ_PLAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>plainto_tsquery</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>in</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>cfgId</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cfgId</name> <operator>=</operator> <call><name>getTSCurrentConfig</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>plainto_tsquery_byid</name></expr></argument>,
										<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>cfgId</name></expr></argument>)</argument_list></call></expr></argument>,
										<argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>phraseto_tsquery_byid</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>in</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSQuery</name></type>		<name>query</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MorphOpaque</name></type> <name>data</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>data</name><operator>.</operator><name>cfg_id</name></name> <operator>=</operator> <call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>data</name><operator>.</operator><name>qoperator</name></name> <operator>=</operator> <name>OP_PHRASE</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>parse_tsquery</name><argument_list>(<argument><expr><call><name>text_to_cstring</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>,
						  <argument><expr><name>pushval_morph</name></expr></argument>,
						  <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></argument>,
						  <argument><expr><name>P_TSQ_PLAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_TSQUERY</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>phraseto_tsquery</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>in</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>cfgId</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cfgId</name> <operator>=</operator> <call><name>getTSCurrentConfig</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>phraseto_tsquery_byid</name></expr></argument>,
										<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>cfgId</name></expr></argument>)</argument_list></call></expr></argument>,
										<argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>websearch_to_tsquery_byid</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>in</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MorphOpaque</name></type> <name>data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TSQuery</name></type>		<name>query</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>data</name><operator>.</operator><name>cfg_id</name></name> <operator>=</operator> <call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>data</name><operator>.</operator><name>qoperator</name></name> <operator>=</operator> <name>OP_AND</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>parse_tsquery</name><argument_list>(<argument><expr><call><name>text_to_cstring</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>,
						  <argument><expr><name>pushval_morph</name></expr></argument>,
						  <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></argument>,
						  <argument><expr><name>P_TSQ_WEB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_TSQUERY</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>websearch_to_tsquery</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>in</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>cfgId</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cfgId</name> <operator>=</operator> <call><name>getTSCurrentConfig</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>websearch_to_tsquery_byid</name></expr></argument>,
										<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>cfgId</name></expr></argument>)</argument_list></call></expr></argument>,
										<argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
