<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/backend/storage/ipc/barrier.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * barrier.c
 *	  Barriers for synchronizing cooperating processes.
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * From Wikipedia[1]: "In parallel computing, a barrier is a type of
 * synchronization method.  A barrier for a group of threads or processes in
 * the source code means any thread/process must stop at this point and cannot
 * proceed until all other threads/processes reach this barrier."
 *
 * This implementation of barriers allows for static sets of participants
 * known up front, or dynamic sets of participants which processes can join or
 * leave at any time.  In the dynamic case, a phase number can be used to
 * track progress through a parallel algorithm, and may be necessary to
 * synchronize with the current phase of a multi-phase algorithm when a new
 * participant joins.  In the static case, the phase number is used
 * internally, but it isn't strictly necessary for client code to access it
 * because the phase can only advance when the declared number of participants
 * reaches the barrier, so client code should be in no doubt about the current
 * phase of computation at all times.
 *
 * Consider a parallel algorithm that involves separate phases of computation
 * A, B and C where the output of each phase is needed before the next phase
 * can begin.
 *
 * In the case of a static barrier initialized with 4 participants, each
 * participant works on phase A, then calls BarrierArriveAndWait to wait until
 * all 4 participants have reached that point.  When BarrierArriveAndWait
 * returns control, each participant can work on B, and so on.  Because the
 * barrier knows how many participants to expect, the phases of computation
 * don't need labels or numbers, since each process's program counter implies
 * the current phase.  Even if some of the processes are slow to start up and
 * begin running phase A, the other participants are expecting them and will
 * patiently wait at the barrier.  The code could be written as follows:
 *
 *     perform_a();
 *     BarrierArriveAndWait(&amp;barrier, ...);
 *     perform_b();
 *     BarrierArriveAndWait(&amp;barrier, ...);
 *     perform_c();
 *     BarrierArriveAndWait(&amp;barrier, ...);
 *
 * If the number of participants is not known up front, then a dynamic barrier
 * is needed and the number should be set to zero at initialization.  New
 * complications arise because the number necessarily changes over time as
 * participants attach and detach, and therefore phases B, C or even the end
 * of processing may be reached before any given participant has started
 * running and attached.  Therefore the client code must perform an initial
 * test of the phase number after attaching, because it needs to find out
 * which phase of the algorithm has been reached by any participants that are
 * already attached in order to synchronize with that work.  Once the program
 * counter or some other representation of current progress is synchronized
 * with the barrier's phase, normal control flow can be used just as in the
 * static case.  Our example could be written using a switch statement with
 * cases that fall-through, as follows:
 *
 *     phase = BarrierAttach(&amp;barrier);
 *     switch (phase)
 *     {
 *     case PHASE_A:
 *         perform_a();
 *         BarrierArriveAndWait(&amp;barrier, ...);
 *     case PHASE_B:
 *         perform_b();
 *         BarrierArriveAndWait(&amp;barrier, ...);
 *     case PHASE_C:
 *         perform_c();
 *         BarrierArriveAndWait(&amp;barrier, ...);
 *     }
 *     BarrierDetach(&amp;barrier);
 *
 * Static barriers behave similarly to POSIX's pthread_barrier_t.  Dynamic
 * barriers behave similarly to Java's java.util.concurrent.Phaser.
 *
 * [1] https://en.wikipedia.org/wiki/Barrier_(computer_science)
 *
 * IDENTIFICATION
 *	  src/backend/storage/ipc/barrier.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/barrier.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>BarrierDetachImpl</name><parameter_list>(<parameter><decl><type><name>Barrier</name> <modifier>*</modifier></type><name>barrier</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>arrive</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Initialize this barrier.  To use a static party size, provide the number of
 * participants to wait for at each phase indicating that that number of
 * backends is implicitly attached.  To use a dynamic party size, specify zero
 * here and then use BarrierAttach() and
 * BarrierDetach()/BarrierArriveAndDetach() to register and deregister
 * participants explicitly.
 */</comment>
<function><type><name>void</name></type>
<name>BarrierInit</name><parameter_list>(<parameter><decl><type><name>Barrier</name> <modifier>*</modifier></type><name>barrier</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>participants</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SpinLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>barrier</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>barrier</name><operator>-&gt;</operator><name>participants</name></name> <operator>=</operator> <name>participants</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>barrier</name><operator>-&gt;</operator><name>arrived</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>barrier</name><operator>-&gt;</operator><name>phase</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>barrier</name><operator>-&gt;</operator><name>elected</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>barrier</name><operator>-&gt;</operator><name>static_party</name></name> <operator>=</operator> <name>participants</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ConditionVariableInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>barrier</name><operator>-&gt;</operator><name>condition_variable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Arrive at this barrier, wait for all other attached participants to arrive
 * too and then return.  Increments the current phase.  The caller must be
 * attached.
 *
 * While waiting, pg_stat_activity shows a wait_event_class and wait_event
 * controlled by the wait_event_info passed in, which should be a value from
 * from one of the WaitEventXXX enums defined in pgstat.h.
 *
 * Return true in one arbitrarily chosen participant.  Return false in all
 * others.  The return code can be used to elect one participant to execute a
 * phase of work that must be done serially while other participants wait.
 */</comment>
<function><type><name>bool</name></type>
<name>BarrierArriveAndWait</name><parameter_list>(<parameter><decl><type><name>Barrier</name> <modifier>*</modifier></type><name>barrier</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>wait_event_info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>release</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>elected</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>start_phase</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>next_phase</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>barrier</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>start_phase</name> <operator>=</operator> <name><name>barrier</name><operator>-&gt;</operator><name>phase</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>next_phase</name> <operator>=</operator> <name>start_phase</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>++</operator><name><name>barrier</name><operator>-&gt;</operator><name>arrived</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>barrier</name><operator>-&gt;</operator><name>arrived</name></name> <operator>==</operator> <name><name>barrier</name><operator>-&gt;</operator><name>participants</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>release</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>barrier</name><operator>-&gt;</operator><name>arrived</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>barrier</name><operator>-&gt;</operator><name>phase</name></name> <operator>=</operator> <name>next_phase</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>barrier</name><operator>-&gt;</operator><name>elected</name></name> <operator>=</operator> <name>next_phase</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>barrier</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If we were the last expected participant to arrive, we can release our
	 * peers and return true to indicate that this backend has been elected to
	 * perform any serial work.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>release</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ConditionVariableBroadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>barrier</name><operator>-&gt;</operator><name>condition_variable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Otherwise we have to wait for the last participant to arrive and
	 * advance the phase.
	 */</comment>
	<expr_stmt><expr><name>elected</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ConditionVariablePrepareToSleep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>barrier</name><operator>-&gt;</operator><name>condition_variable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<comment type="block">/*
		 * We know that phase must either be start_phase, indicating that we
		 * need to keep waiting, or next_phase, indicating that the last
		 * participant that we were waiting for has either arrived or detached
		 * so that the next phase has begun.  The phase cannot advance any
		 * further than that without this backend's participation, because
		 * this backend is attached.
		 */</comment>
		<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>barrier</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>barrier</name><operator>-&gt;</operator><name>phase</name></name> <operator>==</operator> <name>start_phase</name> <operator>||</operator> <name><name>barrier</name><operator>-&gt;</operator><name>phase</name></name> <operator>==</operator> <name>next_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>release</name> <operator>=</operator> <name><name>barrier</name><operator>-&gt;</operator><name>phase</name></name> <operator>==</operator> <name>next_phase</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>release</name> <operator>&amp;&amp;</operator> <name><name>barrier</name><operator>-&gt;</operator><name>elected</name></name> <operator>!=</operator> <name>next_phase</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * Usually the backend that arrives last and releases the other
			 * backends is elected to return true (see above), so that it can
			 * begin processing serial work while it has a CPU timeslice.
			 * However, if the barrier advanced because someone detached, then
			 * one of the backends that is awoken will need to be elected.
			 */</comment>
			<expr_stmt><expr><name><name>barrier</name><operator>-&gt;</operator><name>elected</name></name> <operator>=</operator> <name><name>barrier</name><operator>-&gt;</operator><name>phase</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elected</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>barrier</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>release</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>ConditionVariableSleep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>barrier</name><operator>-&gt;</operator><name>condition_variable</name></name></expr></argument>, <argument><expr><name>wait_event_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>ConditionVariableCancelSleep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>elected</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Arrive at this barrier, but detach rather than waiting.  Returns true if
 * the caller was the last to detach.
 */</comment>
<function><type><name>bool</name></type>
<name>BarrierArriveAndDetach</name><parameter_list>(<parameter><decl><type><name>Barrier</name> <modifier>*</modifier></type><name>barrier</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>BarrierDetachImpl</name><argument_list>(<argument><expr><name>barrier</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Attach to a barrier.  All waiting participants will now wait for this
 * participant to call BarrierArriveAndWait(), BarrierDetach() or
 * BarrierArriveAndDetach().  Return the current phase.
 */</comment>
<function><type><name>int</name></type>
<name>BarrierAttach</name><parameter_list>(<parameter><decl><type><name>Barrier</name> <modifier>*</modifier></type><name>barrier</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>phase</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>barrier</name><operator>-&gt;</operator><name>static_party</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>barrier</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>++</operator><name><name>barrier</name><operator>-&gt;</operator><name>participants</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>phase</name> <operator>=</operator> <name><name>barrier</name><operator>-&gt;</operator><name>phase</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>barrier</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>phase</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Detach from a barrier.  This may release other waiters from BarrierWait and
 * advance the phase if they were only waiting for this backend.  Return true
 * if this participant was the last to detach.
 */</comment>
<function><type><name>bool</name></type>
<name>BarrierDetach</name><parameter_list>(<parameter><decl><type><name>Barrier</name> <modifier>*</modifier></type><name>barrier</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>BarrierDetachImpl</name><argument_list>(<argument><expr><name>barrier</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Return the current phase of a barrier.  The caller must be attached.
 */</comment>
<function><type><name>int</name></type>
<name>BarrierPhase</name><parameter_list>(<parameter><decl><type><name>Barrier</name> <modifier>*</modifier></type><name>barrier</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * It is OK to read barrier-&gt;phase without locking, because it can't
	 * change without us (we are attached to it), and we executed a memory
	 * barrier when we either attached or participated in changing it last
	 * time.
	 */</comment>
	<return>return <expr><name><name>barrier</name><operator>-&gt;</operator><name>phase</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Return an instantaneous snapshot of the number of participants currently
 * attached to this barrier.  For debugging purposes only.
 */</comment>
<function><type><name>int</name></type>
<name>BarrierParticipants</name><parameter_list>(<parameter><decl><type><name>Barrier</name> <modifier>*</modifier></type><name>barrier</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>participants</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>barrier</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>participants</name> <operator>=</operator> <name><name>barrier</name><operator>-&gt;</operator><name>participants</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>barrier</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>participants</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Detach from a barrier.  If 'arrive' is true then also increment the phase
 * if there are no other participants.  If there are other participants
 * waiting, then the phase will be advanced and they'll be released if they
 * were only waiting for the caller.  Return true if this participant was the
 * last to detach.
 */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>BarrierDetachImpl</name><parameter_list>(<parameter><decl><type><name>Barrier</name> <modifier>*</modifier></type><name>barrier</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>arrive</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>release</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>last</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>barrier</name><operator>-&gt;</operator><name>static_party</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>barrier</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>barrier</name><operator>-&gt;</operator><name>participants</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>--</operator><name><name>barrier</name><operator>-&gt;</operator><name>participants</name></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * If any other participants are waiting and we were the last participant
	 * waited for, release them.  If no other participants are waiting, but
	 * this is a BarrierArriveAndDetach() call, then advance the phase too.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>arrive</name> <operator>||</operator> <name><name>barrier</name><operator>-&gt;</operator><name>participants</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
		<name><name>barrier</name><operator>-&gt;</operator><name>arrived</name></name> <operator>==</operator> <name><name>barrier</name><operator>-&gt;</operator><name>participants</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>release</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>barrier</name><operator>-&gt;</operator><name>arrived</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>++</operator><name><name>barrier</name><operator>-&gt;</operator><name>phase</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>release</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>last</name> <operator>=</operator> <name><name>barrier</name><operator>-&gt;</operator><name>participants</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>barrier</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>release</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ConditionVariableBroadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>barrier</name><operator>-&gt;</operator><name>condition_variable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>last</name></expr>;</return>
</block_content>}</block></function>
</unit>
