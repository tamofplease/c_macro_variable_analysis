<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/backend/storage/ipc/sinval.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * sinval.c
 *	  POSTGRES shared cache invalidation communication code.
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/storage/ipc/sinval.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/async.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/ipc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/sinvaladt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/inval.h"</cpp:file></cpp:include>


<decl_stmt><decl><type><name>uint64</name></type>		<name>SharedInvalidMessageCounter</name></decl>;</decl_stmt>


<comment type="block">/*
 * Because backends sitting idle will not be reading sinval events, we
 * need a way to give an idle backend a swift kick in the rear and make
 * it catch up before the sinval queue overflows and forces it to go
 * through a cache reset exercise.  This is done by sending
 * PROCSIG_CATCHUP_INTERRUPT to any backend that gets too far behind.
 *
 * The signal handler will set an interrupt pending flag and will set the
 * processes latch. Whenever starting to read from the client, or when
 * interrupted while doing so, ProcessClientReadInterrupt() will call
 * ProcessCatchupEvent().
 */</comment>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>catchupInterruptPending</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<comment type="block">/*
 * SendSharedInvalidMessages
 *	Add shared-cache-invalidation message(s) to the global SI message queue.
 */</comment>
<function><type><name>void</name></type>
<name>SendSharedInvalidMessages</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SharedInvalidationMessage</name> <modifier>*</modifier></type><name>msgs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SIInsertDataEntries</name><argument_list>(<argument><expr><name>msgs</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * ReceiveSharedInvalidMessages
 *		Process shared-cache-invalidation messages waiting for this backend
 *
 * We guarantee to process all messages that had been queued before the
 * routine was entered.  It is of course possible for more messages to get
 * queued right after our last SIGetDataEntries call.
 *
 * NOTE: it is entirely possible for this routine to be invoked recursively
 * as a consequence of processing inside the invalFunction or resetFunction.
 * Furthermore, such a recursive call must guarantee that all outstanding
 * inval messages have been processed before it exits.  This is the reason
 * for the strange-looking choice to use a statically allocated buffer array
 * and counters; it's so that a recursive call can process messages already
 * sucked out of sinvaladt.c.
 */</comment>
<function><type><name>void</name></type>
<name>ReceiveSharedInvalidMessages</name><parameter_list>(
							 <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>invalFunction</name>) <parameter_list>(<parameter><decl><type><name>SharedInvalidationMessage</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list></function_decl></parameter>,
							 <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>resetFunction</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXINVALMSGS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
	<decl_stmt><decl><type><specifier>static</specifier> <name>SharedInvalidationMessage</name></type> <name><name>messages</name><index>[<expr><name>MAXINVALMSGS</name></expr>]</index></name></decl>;</decl_stmt>

	<comment type="block">/*
	 * We use volatile here to prevent bugs if a compiler doesn't realize that
	 * recursion is a possibility ...
	 */</comment>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>nextmsg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>nummsgs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Deal with any messages still pending from an outer recursion */</comment>
	<while>while <condition>(<expr><name>nextmsg</name> <operator>&lt;</operator> <name>nummsgs</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>SharedInvalidationMessage</name></type> <name>msg</name> <init>= <expr><name><name>messages</name><index>[<expr><name>nextmsg</name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>SharedInvalidMessageCounter</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>invalFunction</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<do>do
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>getResult</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>nextmsg</name> <operator>=</operator> <name>nummsgs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<comment type="block">/* Try to get some more messages */</comment>
		<expr_stmt><expr><name>getResult</name> <operator>=</operator> <call><name>SIGetDataEntries</name><argument_list>(<argument><expr><name>messages</name></expr></argument>, <argument><expr><name>MAXINVALMSGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>getResult</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* got a reset message */</comment>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG4</name></expr></argument>, <argument><expr><literal type="string">"cache state reset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>SharedInvalidMessageCounter</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>resetFunction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>				<comment type="block">/* nothing more to do */</comment>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Process them, being wary that a recursive call might eat some */</comment>
		<expr_stmt><expr><name>nextmsg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>nummsgs</name> <operator>=</operator> <name>getResult</name></expr>;</expr_stmt>

		<while>while <condition>(<expr><name>nextmsg</name> <operator>&lt;</operator> <name>nummsgs</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>SharedInvalidationMessage</name></type> <name>msg</name> <init>= <expr><name><name>messages</name><index>[<expr><name>nextmsg</name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name>SharedInvalidMessageCounter</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>invalFunction</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>

		<comment type="block">/*
		 * We only need to loop if the last SIGetDataEntries call (which might
		 * have been within a recursive call) returned a full buffer.
		 */</comment>
	</block_content>}</block> while <condition>(<expr><name>nummsgs</name> <operator>==</operator> <name>MAXINVALMSGS</name></expr>)</condition>;</do>

	<comment type="block">/*
	 * We are now caught up.  If we received a catchup signal, reset that
	 * flag, and call SICleanupQueue().  This is not so much because we need
	 * to flush dead messages right now, as that we want to pass on the
	 * catchup signal to the next slowest backend.  "Daisy chaining" the
	 * catchup signal this way avoids creating spikes in system load for what
	 * should be just a background maintenance activity.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>catchupInterruptPending</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>catchupInterruptPending</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG4</name></expr></argument>, <argument><expr><literal type="string">"sinval catchup complete, cleaning queue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SICleanupQueue</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * HandleCatchupInterrupt
 *
 * This is called when PROCSIG_CATCHUP_INTERRUPT is received.
 *
 * We used to directly call ProcessCatchupEvent directly when idle. These days
 * we just set a flag to do it later and notify the process of that fact by
 * setting the process's latch.
 */</comment>
<function><type><name>void</name></type>
<name>HandleCatchupInterrupt</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Note: this is called by a SIGNAL HANDLER. You must be very wary what
	 * you do here.
	 */</comment>

	<expr_stmt><expr><name>catchupInterruptPending</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* make sure the event is processed in due course */</comment>
	<expr_stmt><expr><call><name>SetLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * ProcessCatchupInterrupt
 *
 * The portion of catchup interrupt handling that runs outside of the signal
 * handler, which allows it to actually process pending invalidations.
 */</comment>
<function><type><name>void</name></type>
<name>ProcessCatchupInterrupt</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<while>while <condition>(<expr><name>catchupInterruptPending</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * What we need to do here is cause ReceiveSharedInvalidMessages() to
		 * run, which will do the necessary work and also reset the
		 * catchupInterruptPending flag.  If we are inside a transaction we
		 * can just call AcceptInvalidationMessages() to do this.  If we
		 * aren't, we start and immediately end a transaction; the call to
		 * AcceptInvalidationMessages() happens down inside transaction start.
		 *
		 * It is awfully tempting to just call AcceptInvalidationMessages()
		 * without the rest of the xact start/stop overhead, and I think that
		 * would actually work in the normal case; but I am not sure that
		 * things would clean up nicely if we got an error partway through.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>IsTransactionOrTransactionBlock</name><argument_list>()</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG4</name></expr></argument>, <argument><expr><literal type="string">"ProcessCatchupEvent inside transaction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>AcceptInvalidationMessages</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG4</name></expr></argument>, <argument><expr><literal type="string">"ProcessCatchupEvent outside transaction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>StartTransactionCommand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>CommitTransactionCommand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>
</unit>
