<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/backend/storage/ipc/shm_toc.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * shm_toc.c
 *	  shared memory segment table of contents
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * src/backend/storage/ipc/shm_toc.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"port/atomics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/shm_toc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/spin.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>shm_toc_entry</name>
<block>{
	<decl_stmt><decl><type><name>uint64</name></type>		<name>key</name></decl>;</decl_stmt>			<comment type="block">/* Arbitrary identifier */</comment>
	<decl_stmt><decl><type><name>Size</name></type>		<name>offset</name></decl>;</decl_stmt>			<comment type="block">/* Offset, in bytes, from TOC start */</comment>
}</block></struct></type> <name>shm_toc_entry</name>;</typedef>

<struct>struct <name>shm_toc</name>
<block>{
	<decl_stmt><decl><type><name>uint64</name></type>		<name>toc_magic</name></decl>;</decl_stmt>		<comment type="block">/* Magic number identifying this TOC */</comment>
	<decl_stmt><decl><type><name>slock_t</name></type>		<name>toc_mutex</name></decl>;</decl_stmt>		<comment type="block">/* Spinlock for mutual exclusion */</comment>
	<decl_stmt><decl><type><name>Size</name></type>		<name>toc_total_bytes</name></decl>;</decl_stmt>	<comment type="block">/* Bytes managed by this TOC */</comment>
	<decl_stmt><decl><type><name>Size</name></type>		<name>toc_allocated_bytes</name></decl>;</decl_stmt>	<comment type="block">/* Bytes allocated of those managed */</comment>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>toc_nentry</name></decl>;</decl_stmt>		<comment type="block">/* Number of entries in TOC */</comment>
	<decl_stmt><decl><type><name>shm_toc_entry</name></type> <name><name>toc_entry</name><index>[<expr><name>FLEXIBLE_ARRAY_MEMBER</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/*
 * Initialize a region of shared memory with a table of contents.
 */</comment>
<function><type><name>shm_toc</name> <modifier>*</modifier></type>
<name>shm_toc_create</name><parameter_list>(<parameter><decl><type><name>uint64</name></type> <name>magic</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>address</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>nbytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>shm_toc</name>    <modifier>*</modifier></type><name>toc</name> <init>= <expr><operator>(</operator><name>shm_toc</name> <operator>*</operator><operator>)</operator> <name>address</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>nbytes</name> <operator>&gt;</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>shm_toc</name></expr></argument>, <argument><expr><name>toc_entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>toc</name><operator>-&gt;</operator><name>toc_magic</name></name> <operator>=</operator> <name>magic</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SpinLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>toc</name><operator>-&gt;</operator><name>toc_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * The alignment code in shm_toc_allocate() assumes that the starting
	 * value is buffer-aligned.
	 */</comment>
	<expr_stmt><expr><name><name>toc</name><operator>-&gt;</operator><name>toc_total_bytes</name></name> <operator>=</operator> <call><name>BUFFERALIGN_DOWN</name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>toc</name><operator>-&gt;</operator><name>toc_allocated_bytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>toc</name><operator>-&gt;</operator><name>toc_nentry</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<return>return <expr><name>toc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Attach to an existing table of contents.  If the magic number found at
 * the target address doesn't match our expectations, return NULL.
 */</comment>
<function><type><name>shm_toc</name> <modifier>*</modifier></type>
<name>shm_toc_attach</name><parameter_list>(<parameter><decl><type><name>uint64</name></type> <name>magic</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>address</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>shm_toc</name>    <modifier>*</modifier></type><name>toc</name> <init>= <expr><operator>(</operator><name>shm_toc</name> <operator>*</operator><operator>)</operator> <name>address</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>toc</name><operator>-&gt;</operator><name>toc_magic</name></name> <operator>!=</operator> <name>magic</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>toc</name><operator>-&gt;</operator><name>toc_total_bytes</name></name> <operator>&gt;=</operator> <name><name>toc</name><operator>-&gt;</operator><name>toc_allocated_bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>toc</name><operator>-&gt;</operator><name>toc_total_bytes</name></name> <operator>&gt;</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>shm_toc</name></expr></argument>, <argument><expr><name>toc_entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>toc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Allocate shared memory from a segment managed by a table of contents.
 *
 * This is not a full-blown allocator; there's no way to free memory.  It's
 * just a way of dividing a single physical shared memory segment into logical
 * chunks that may be used for different purposes.
 *
 * We allocate backwards from the end of the segment, so that the TOC entries
 * can grow forward from the start of the segment.
 */</comment>
<function><type><name>void</name> <modifier>*</modifier></type>
<name>shm_toc_allocate</name><parameter_list>(<parameter><decl><type><name>shm_toc</name> <modifier>*</modifier></type><name>toc</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>nbytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>shm_toc</name> <modifier>*</modifier></type><name>vtoc</name> <init>= <expr><name>toc</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type>		<name>total_bytes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type>		<name>allocated_bytes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type>		<name>nentry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type>		<name>toc_bytes</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Make sure request is well-aligned.  XXX: MAXALIGN is not enough,
	 * because atomic ops might need a wider alignment.  We don't have a
	 * proper definition for the minimum to make atomic ops safe, but
	 * BUFFERALIGN ought to be enough.
	 */</comment>
	<expr_stmt><expr><name>nbytes</name> <operator>=</operator> <call><name>BUFFERALIGN</name><argument_list>(<argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>toc</name><operator>-&gt;</operator><name>toc_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>total_bytes</name> <operator>=</operator> <name><name>vtoc</name><operator>-&gt;</operator><name>toc_total_bytes</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>allocated_bytes</name> <operator>=</operator> <name><name>vtoc</name><operator>-&gt;</operator><name>toc_allocated_bytes</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>nentry</name> <operator>=</operator> <name><name>vtoc</name><operator>-&gt;</operator><name>toc_nentry</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>toc_bytes</name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>shm_toc</name></expr></argument>, <argument><expr><name>toc_entry</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>nentry</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>shm_toc_entry</name></expr></argument>)</argument_list></sizeof>
		<operator>+</operator> <name>allocated_bytes</name></expr>;</expr_stmt>

	<comment type="block">/* Check for memory exhaustion and overflow. */</comment>
	<if_stmt><if>if <condition>(<expr><name>toc_bytes</name> <operator>+</operator> <name>nbytes</name> <operator>&gt;</operator> <name>total_bytes</name> <operator>||</operator> <name>toc_bytes</name> <operator>+</operator> <name>nbytes</name> <operator>&lt;</operator> <name>toc_bytes</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>toc</name><operator>-&gt;</operator><name>toc_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of shared memory"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>vtoc</name><operator>-&gt;</operator><name>toc_allocated_bytes</name></name> <operator>+=</operator> <name>nbytes</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>toc</name><operator>-&gt;</operator><name>toc_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>toc</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>total_bytes</name> <operator>-</operator> <name>allocated_bytes</name> <operator>-</operator> <name>nbytes</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Return the number of bytes that can still be allocated.
 */</comment>
<function><type><name>Size</name></type>
<name>shm_toc_freespace</name><parameter_list>(<parameter><decl><type><name>shm_toc</name> <modifier>*</modifier></type><name>toc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>shm_toc</name> <modifier>*</modifier></type><name>vtoc</name> <init>= <expr><name>toc</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type>		<name>total_bytes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type>		<name>allocated_bytes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type>		<name>nentry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type>		<name>toc_bytes</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>toc</name><operator>-&gt;</operator><name>toc_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>total_bytes</name> <operator>=</operator> <name><name>vtoc</name><operator>-&gt;</operator><name>toc_total_bytes</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>allocated_bytes</name> <operator>=</operator> <name><name>vtoc</name><operator>-&gt;</operator><name>toc_allocated_bytes</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>nentry</name> <operator>=</operator> <name><name>vtoc</name><operator>-&gt;</operator><name>toc_nentry</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>toc</name><operator>-&gt;</operator><name>toc_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>toc_bytes</name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>shm_toc</name></expr></argument>, <argument><expr><name>toc_entry</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>nentry</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>shm_toc_entry</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>allocated_bytes</name> <operator>+</operator> <call><name>BUFFERALIGN</name><argument_list>(<argument><expr><name>toc_bytes</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>total_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>total_bytes</name> <operator>-</operator> <operator>(</operator><name>allocated_bytes</name> <operator>+</operator> <call><name>BUFFERALIGN</name><argument_list>(<argument><expr><name>toc_bytes</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Insert a TOC entry.
 *
 * The idea here is that the process setting up the shared memory segment will
 * register the addresses of data structures within the segment using this
 * function.  Each data structure will be identified using a 64-bit key, which
 * is assumed to be a well-known or discoverable integer.  Other processes
 * accessing the shared memory segment can pass the same key to
 * shm_toc_lookup() to discover the addresses of those data structures.
 *
 * Since the shared memory segment may be mapped at different addresses within
 * different backends, we store relative rather than absolute pointers.
 *
 * This won't scale well to a large number of keys.  Hopefully, that isn't
 * necessary; if it proves to be, we might need to provide a more sophisticated
 * data structure here.  But the real idea here is just to give someone mapping
 * a dynamic shared memory the ability to find the bare minimum number of
 * pointers that they need to bootstrap.  If you're storing a lot of stuff in
 * the TOC, you're doing it wrong.
 */</comment>
<function><type><name>void</name></type>
<name>shm_toc_insert</name><parameter_list>(<parameter><decl><type><name>shm_toc</name> <modifier>*</modifier></type><name>toc</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>address</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>shm_toc</name> <modifier>*</modifier></type><name>vtoc</name> <init>= <expr><name>toc</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type>		<name>total_bytes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type>		<name>allocated_bytes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type>		<name>nentry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type>		<name>toc_bytes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type>		<name>offset</name></decl>;</decl_stmt>

	<comment type="block">/* Relativize pointer. */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>address</name> <operator>&gt;</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>toc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>address</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>toc</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>toc</name><operator>-&gt;</operator><name>toc_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>total_bytes</name> <operator>=</operator> <name><name>vtoc</name><operator>-&gt;</operator><name>toc_total_bytes</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>allocated_bytes</name> <operator>=</operator> <name><name>vtoc</name><operator>-&gt;</operator><name>toc_allocated_bytes</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>nentry</name> <operator>=</operator> <name><name>vtoc</name><operator>-&gt;</operator><name>toc_nentry</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>toc_bytes</name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>shm_toc</name></expr></argument>, <argument><expr><name>toc_entry</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>nentry</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>shm_toc_entry</name></expr></argument>)</argument_list></sizeof>
		<operator>+</operator> <name>allocated_bytes</name></expr>;</expr_stmt>

	<comment type="block">/* Check for memory exhaustion and overflow. */</comment>
	<if_stmt><if>if <condition>(<expr><name>toc_bytes</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>shm_toc_entry</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name>total_bytes</name> <operator>||</operator>
		<name>toc_bytes</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>shm_toc_entry</name></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <name>toc_bytes</name> <operator>||</operator>
		<name>nentry</name> <operator>&gt;=</operator> <name>PG_UINT32_MAX</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>toc</name><operator>-&gt;</operator><name>toc_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of shared memory"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>offset</name> <operator>&lt;</operator> <name>total_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vtoc</name><operator>-&gt;</operator><name>toc_entry</name><index>[<expr><name>nentry</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vtoc</name><operator>-&gt;</operator><name>toc_entry</name><index>[<expr><name>nentry</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * By placing a write barrier after filling in the entry and before
	 * updating the number of entries, we make it safe to read the TOC
	 * unlocked.
	 */</comment>
	<expr_stmt><expr><call><name>pg_write_barrier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>vtoc</name><operator>-&gt;</operator><name>toc_nentry</name></name><operator>++</operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>toc</name><operator>-&gt;</operator><name>toc_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Look up a TOC entry.
 *
 * If the key is not found, returns NULL if noError is true, otherwise
 * throws elog(ERROR).
 *
 * Unlike the other functions in this file, this operation acquires no lock;
 * it uses only barriers.  It probably wouldn't hurt concurrency very much even
 * if it did get a lock, but since it's reasonably likely that a group of
 * worker processes could each read a series of entries from the same TOC
 * right around the same time, there seems to be some value in avoiding it.
 */</comment>
<function><type><name>void</name> <modifier>*</modifier></type>
<name>shm_toc_lookup</name><parameter_list>(<parameter><decl><type><name>shm_toc</name> <modifier>*</modifier></type><name>toc</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>noError</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>nentry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>i</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Read the number of entries before we examine any entry.  We assume that
	 * reading a uint32 is atomic.
	 */</comment>
	<expr_stmt><expr><name>nentry</name> <operator>=</operator> <name><name>toc</name><operator>-&gt;</operator><name>toc_nentry</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_read_barrier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Now search for a matching entry. */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nentry</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>toc</name><operator>-&gt;</operator><name>toc_entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>==</operator> <name>key</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>toc</name><operator>)</operator> <operator>+</operator> <name><name>toc</name><operator>-&gt;</operator><name>toc_entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* No matching entry was found. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>noError</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not find key "</literal> <name>UINT64_FORMAT</name> <literal type="string">" in shm TOC at %p"</literal></expr></argument>,
			 <argument><expr><name>key</name></expr></argument>, <argument><expr><name>toc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Estimate how much shared memory will be required to store a TOC and its
 * dependent data structures.
 */</comment>
<function><type><name>Size</name></type>
<name>shm_toc_estimate</name><parameter_list>(<parameter><decl><type><name>shm_toc_estimator</name> <modifier>*</modifier></type><name>e</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type>		<name>sz</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>shm_toc</name></expr></argument>, <argument><expr><name>toc_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><call><name>mul_size</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>number_of_keys</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>shm_toc_entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>space_for_chunks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>BUFFERALIGN</name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
