<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/backend/snowball/libstemmer/stem_UTF_8_turkish.c">
<comment type="block">/* This file was generated automatically by the Snowball to ANSI C compiler */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"header.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>turkish_UTF_8_stem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_stem_suffix_chain_before_ki</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_stem_noun_suffixes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_stem_nominal_verb_suffixes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_postlude</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_post_process_last_consonants</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_more_than_one_syllable_word</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_suffix_with_optional_s_consonant</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_suffix_with_optional_n_consonant</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_suffix_with_optional_U_vowel</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_suffix_with_optional_y_consonant</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_ysA</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_ymUs_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_yken</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_yDU</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_yUz</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_yUm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_yU</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_ylA</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_yA</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_possessives</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_sUnUz</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_sUn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_sU</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_nUz</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_nUn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_nU</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_ndAn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_ndA</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_ncA</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_nA</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_lArI</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_lAr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_ki</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_DUr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_DAn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_DA</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_cAsInA</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_is_reserved_word</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_check_vowel_harmony</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_append_U_to_stems_ending_with_d_or_g</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function_decl><type><specifier>extern</specifier> <name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>turkish_UTF_8_create_env</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>turkish_UTF_8_close_env</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'m'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'z'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'z'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_4</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'u'</literal></expr>, <expr><literal type="char">'z'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_5</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'u'</literal></expr>, <expr><literal type="char">'z'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_6</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'m'</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="char">'z'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_7</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'n'</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="char">'z'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_8</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'m'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="char">'z'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_9</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'n'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="char">'z'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_0</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><name>s_0_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><name>s_0_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  4 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_4</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  5 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_0_5</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  6 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_0_6</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  7 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_0_7</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  8 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_0_8</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  9 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_0_9</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_1_0</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'i'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_1_1</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xB1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_1_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_1_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_2_0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'i'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_2_1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'u'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_2_2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'n'</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xB1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_2_3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'n'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xBC</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_2_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_2_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_2_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_2_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_3_0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_3_1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'u'</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_3_2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_3_3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_3</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_3_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_3_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_3_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_3_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_4_0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_4_1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'e'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_4</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><name>s_4_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><name>s_4_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_5_0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'a'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_5_1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'e'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_5</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_5_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_5_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'a'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'a'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'e'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_3</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'e'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_6</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_6_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_6_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_6_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_6_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_7_0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'a'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_7_1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'e'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_7</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_7_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_7_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_8</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_8_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_8_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_8_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_8_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_9_0</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_9_1</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_9</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_9_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_9_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_10_0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'a'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_10_1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'e'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_10</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_10_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_10_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_11_0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'c'</literal></expr>, <expr><literal type="char">'a'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_11_1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'c'</literal></expr>, <expr><literal type="char">'e'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_11</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_11_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_11_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_12_0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'m'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_12_1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'u'</literal></expr>, <expr><literal type="char">'m'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_12_2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="char">'m'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_12_3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="char">'m'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_12</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_12_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_12_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_12_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_12_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_13_0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_13_1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'u'</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_13_2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'s'</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_13_3</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'s'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_13</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_13_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_13_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_13_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_13_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_14_0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'z'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_14_1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'u'</literal></expr>, <expr><literal type="char">'z'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_14_2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="char">'z'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_14_3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="char">'z'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_14</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_14_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_14_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_14_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_14_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_15_0</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'z'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_15_1</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'u'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'u'</literal></expr>, <expr><literal type="char">'z'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_15_2</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'s'</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="char">'z'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_15_3</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'s'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="char">'z'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_15</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_15_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_15_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><name>s_15_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><name>s_15_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_16_0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'r'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_16_1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'r'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_16</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_16_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_16_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_17_0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'z'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_17_1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'u'</literal></expr>, <expr><literal type="char">'z'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_17_2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'n'</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="char">'z'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_17_3</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'n'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="char">'z'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_17</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_17_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_17_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_17_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_17_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_18_0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'r'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_18_1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'r'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_18_2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'u'</literal></expr>, <expr><literal type="char">'r'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_18_3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'u'</literal></expr>, <expr><literal type="char">'r'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_18_4</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'d'</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="char">'r'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_18_5</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'t'</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="char">'r'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_18_6</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'d'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="char">'r'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_18_7</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'t'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="char">'r'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_18</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_18_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_18_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_18_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_18_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  4 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_18_4</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  5 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_18_5</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  6 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_18_6</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  7 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_18_7</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_19_0</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'c'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'a'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_19_1</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'c'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'e'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_19</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><name>s_19_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_19_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20_0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'i'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20_1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'i'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20_2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'k'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20_3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'k'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20_4</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'u'</literal></expr>, <expr><literal type="char">'k'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20_5</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'u'</literal></expr>, <expr><literal type="char">'k'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20_6</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'d'</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="char">'k'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20_7</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'t'</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="char">'k'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20_8</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'d'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="char">'k'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20_9</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'t'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="char">'k'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20_10</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'m'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20_11</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'m'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20_12</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'u'</literal></expr>, <expr><literal type="char">'m'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20_13</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'u'</literal></expr>, <expr><literal type="char">'m'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20_14</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'d'</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="char">'m'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20_15</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'t'</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="char">'m'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20_16</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'d'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="char">'m'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20_17</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'t'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="char">'m'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20_18</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20_19</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20_20</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'u'</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20_21</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'u'</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20_22</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'d'</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20_23</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'t'</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20_24</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'d'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20_25</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'t'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20_26</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'u'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20_27</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'u'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20_28</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'d'</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xB1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20_29</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'t'</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xB1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20_30</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'d'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xBC</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20_31</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'t'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xBC</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_20</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_20_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_20_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_20_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_20_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  4 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_20_4</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  5 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_20_5</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  6 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_20_6</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  7 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_20_7</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  8 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_20_8</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  9 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_20_9</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 10 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_20_10</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 11 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_20_11</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 12 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_20_12</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 13 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_20_13</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 14 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_20_14</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 15 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_20_15</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 16 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_20_16</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 17 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_20_17</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 18 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_20_18</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 19 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_20_19</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 20 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_20_20</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 21 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_20_21</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 22 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_20_22</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 23 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_20_23</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 24 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_20_24</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 25 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_20_25</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 26 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_20_26</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 27 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_20_27</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 28 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_20_28</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 29 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_20_29</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 30 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_20_30</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 31 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_20_31</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_21_0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'a'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_21_1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'e'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_21_2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'k'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_21_3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'k'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_21_4</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'m'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_21_5</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'m'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_21_6</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_21_7</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_21</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_21_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_21_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_21_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_21_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  4 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_21_4</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  5 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_21_5</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  6 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_21_6</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  7 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_21_7</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_22_0</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0xC5</literal></expr>, <expr><literal type="number">0x9F</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_22_1</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'u'</literal></expr>, <expr><literal type="number">0xC5</literal></expr>, <expr><literal type="number">0x9F</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_22_2</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'m'</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0xC5</literal></expr>, <expr><literal type="number">0x9F</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_22_3</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'m'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="number">0xC5</literal></expr>, <expr><literal type="number">0x9F</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_22</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_22_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_22_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_22_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_22_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_23_0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'b'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_23_1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'c'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_23_2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'d'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_23_3</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0x9F</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_23</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><name>s_23_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><name>s_23_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><name>s_23_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_23_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>g_vowel</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">17</literal></expr>, <expr><literal type="number">65</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>g_U</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>g_vowel1</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>g_vowel2</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">17</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">130</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>g_vowel3</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>g_vowel4</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">17</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>g_vowel5</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">65</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>g_vowel6</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">65</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_1</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'e'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_2</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xB1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_3</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_4</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'o'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_5</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xB6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'u'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_7</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xBC</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_9</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_10</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_11</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_12</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'y'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_13</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'y'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_14</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'i'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_15</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_16</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'p'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_17</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xA7</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_18</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'t'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_19</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'k'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'d'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_21</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'g'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_22</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_23</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xB1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_24</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xB1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_25</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'e'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_26</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_27</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_28</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'o'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_29</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'u'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_30</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'u'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_31</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xB6</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_32</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xBC</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_33</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xBC</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_34</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'d'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_35</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'y'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'d'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_check_vowel_harmony</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 112 */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>out_grouping_b_U</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>g_vowel</name></expr></argument>, <argument><expr><literal type="number">97</literal></expr></argument>, <argument><expr><literal type="number">305</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* goto */</comment> <comment type="block">/* grouping vowel, line 114 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m1</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m1</name></expr>;</expr_stmt> <comment type="block">/* or, line 116 */</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_0</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab1</name>;</goto></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>out_grouping_b_U</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>g_vowel1</name></expr></argument>, <argument><expr><literal type="number">97</literal></expr></argument>, <argument><expr><literal type="number">305</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab1</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* goto */</comment> <comment type="block">/* grouping vowel1, line 116 */</comment>
            <goto>goto <name>lab0</name>;</goto>
        <label><name>lab1</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_1</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab2</name>;</goto></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>out_grouping_b_U</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>g_vowel2</name></expr></argument>, <argument><expr><literal type="number">101</literal></expr></argument>, <argument><expr><literal type="number">252</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab2</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* goto */</comment> <comment type="block">/* grouping vowel2, line 117 */</comment>
            <goto>goto <name>lab0</name>;</goto>
        <label><name>lab2</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab3</name>;</goto></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>out_grouping_b_U</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>g_vowel3</name></expr></argument>, <argument><expr><literal type="number">97</literal></expr></argument>, <argument><expr><literal type="number">305</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab3</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* goto */</comment> <comment type="block">/* grouping vowel3, line 118 */</comment>
            <goto>goto <name>lab0</name>;</goto>
        <label><name>lab3</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_3</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab4</name>;</goto></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>out_grouping_b_U</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>g_vowel4</name></expr></argument>, <argument><expr><literal type="number">101</literal></expr></argument>, <argument><expr><literal type="number">105</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab4</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* goto */</comment> <comment type="block">/* grouping vowel4, line 119 */</comment>
            <goto>goto <name>lab0</name>;</goto>
        <label><name>lab4</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_4</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab5</name>;</goto></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>out_grouping_b_U</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>g_vowel5</name></expr></argument>, <argument><expr><literal type="number">111</literal></expr></argument>, <argument><expr><literal type="number">117</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab5</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* goto */</comment> <comment type="block">/* grouping vowel5, line 120 */</comment>
            <goto>goto <name>lab0</name>;</goto>
        <label><name>lab5</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_5</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab6</name>;</goto></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>out_grouping_b_U</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>g_vowel6</name></expr></argument>, <argument><expr><literal type="number">246</literal></expr></argument>, <argument><expr><literal type="number">252</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab6</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* goto */</comment> <comment type="block">/* grouping vowel6, line 121 */</comment>
            <goto>goto <name>lab0</name>;</goto>
        <label><name>lab6</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_6</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab7</name>;</goto></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>out_grouping_b_U</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>g_vowel5</name></expr></argument>, <argument><expr><literal type="number">111</literal></expr></argument>, <argument><expr><literal type="number">117</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab7</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* goto */</comment> <comment type="block">/* grouping vowel5, line 122 */</comment>
            <goto>goto <name>lab0</name>;</goto>
        <label><name>lab7</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_7</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>out_grouping_b_U</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>g_vowel6</name></expr></argument>, <argument><expr><literal type="number">246</literal></expr></argument>, <argument><expr><literal type="number">252</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* goto */</comment> <comment type="block">/* grouping vowel6, line 123 */</comment>
        </block_content>}</block>
    <label><name>lab0</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test</name></expr>;</expr_stmt>
    </block_content>}</block>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_suffix_with_optional_n_consonant</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m1</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m1</name></expr>;</expr_stmt> <comment type="block">/* or, line 134 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 133 */</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_8</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab1</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test</name></expr>;</expr_stmt>
        </block_content>}</block>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>skip_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab1</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt> <comment type="block">/* next, line 133 */</comment>
        </block_content>}</block>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 133 */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>in_grouping_b_U</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>g_vowel</name></expr></argument>, <argument><expr><literal type="number">97</literal></expr></argument>, <argument><expr><literal type="number">305</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab1</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test</name></expr>;</expr_stmt>
        </block_content>}</block>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab1</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m2</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m2</name></expr>;</expr_stmt> <comment type="block">/* not, line 135 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 135 */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_9</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab2</name>;</goto></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test</name></expr>;</expr_stmt>
            </block_content>}</block>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        <label><name>lab2</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m2</name></expr>;</expr_stmt>
        </block_content>}</block>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 135 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>skip_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt> <comment type="block">/* next, line 135 */</comment>
            </block_content>}</block>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 135 */</comment>
                <if_stmt><if>if <condition>(<expr><call><name>in_grouping_b_U</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>g_vowel</name></expr></argument>, <argument><expr><literal type="number">97</literal></expr></argument>, <argument><expr><literal type="number">305</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test</name></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test</name></expr>;</expr_stmt>
        </block_content>}</block>
    </block_content>}</block>
<label><name>lab0</name>:</label>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_suffix_with_optional_s_consonant</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m1</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m1</name></expr>;</expr_stmt> <comment type="block">/* or, line 145 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 144 */</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_10</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab1</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test</name></expr>;</expr_stmt>
        </block_content>}</block>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>skip_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab1</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt> <comment type="block">/* next, line 144 */</comment>
        </block_content>}</block>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 144 */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>in_grouping_b_U</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>g_vowel</name></expr></argument>, <argument><expr><literal type="number">97</literal></expr></argument>, <argument><expr><literal type="number">305</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab1</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test</name></expr>;</expr_stmt>
        </block_content>}</block>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab1</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m2</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m2</name></expr>;</expr_stmt> <comment type="block">/* not, line 146 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 146 */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_11</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab2</name>;</goto></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test</name></expr>;</expr_stmt>
            </block_content>}</block>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        <label><name>lab2</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m2</name></expr>;</expr_stmt>
        </block_content>}</block>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 146 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>skip_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt> <comment type="block">/* next, line 146 */</comment>
            </block_content>}</block>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 146 */</comment>
                <if_stmt><if>if <condition>(<expr><call><name>in_grouping_b_U</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>g_vowel</name></expr></argument>, <argument><expr><literal type="number">97</literal></expr></argument>, <argument><expr><literal type="number">305</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test</name></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test</name></expr>;</expr_stmt>
        </block_content>}</block>
    </block_content>}</block>
<label><name>lab0</name>:</label>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_suffix_with_optional_y_consonant</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m1</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m1</name></expr>;</expr_stmt> <comment type="block">/* or, line 155 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 154 */</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_12</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab1</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test</name></expr>;</expr_stmt>
        </block_content>}</block>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>skip_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab1</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt> <comment type="block">/* next, line 154 */</comment>
        </block_content>}</block>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 154 */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>in_grouping_b_U</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>g_vowel</name></expr></argument>, <argument><expr><literal type="number">97</literal></expr></argument>, <argument><expr><literal type="number">305</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab1</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test</name></expr>;</expr_stmt>
        </block_content>}</block>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab1</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m2</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m2</name></expr>;</expr_stmt> <comment type="block">/* not, line 156 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 156 */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_13</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab2</name>;</goto></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test</name></expr>;</expr_stmt>
            </block_content>}</block>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        <label><name>lab2</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m2</name></expr>;</expr_stmt>
        </block_content>}</block>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 156 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>skip_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt> <comment type="block">/* next, line 156 */</comment>
            </block_content>}</block>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 156 */</comment>
                <if_stmt><if>if <condition>(<expr><call><name>in_grouping_b_U</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>g_vowel</name></expr></argument>, <argument><expr><literal type="number">97</literal></expr></argument>, <argument><expr><literal type="number">305</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test</name></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test</name></expr>;</expr_stmt>
        </block_content>}</block>
    </block_content>}</block>
<label><name>lab0</name>:</label>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_suffix_with_optional_U_vowel</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m1</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m1</name></expr>;</expr_stmt> <comment type="block">/* or, line 161 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 160 */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>in_grouping_b_U</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>g_U</name></expr></argument>, <argument><expr><literal type="number">105</literal></expr></argument>, <argument><expr><literal type="number">305</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab1</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test</name></expr>;</expr_stmt>
        </block_content>}</block>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>skip_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab1</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt> <comment type="block">/* next, line 160 */</comment>
        </block_content>}</block>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 160 */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>out_grouping_b_U</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>g_vowel</name></expr></argument>, <argument><expr><literal type="number">97</literal></expr></argument>, <argument><expr><literal type="number">305</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab1</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test</name></expr>;</expr_stmt>
        </block_content>}</block>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab1</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m2</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m2</name></expr>;</expr_stmt> <comment type="block">/* not, line 162 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 162 */</comment>
                <if_stmt><if>if <condition>(<expr><call><name>in_grouping_b_U</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>g_U</name></expr></argument>, <argument><expr><literal type="number">105</literal></expr></argument>, <argument><expr><literal type="number">305</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab2</name>;</goto></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test</name></expr>;</expr_stmt>
            </block_content>}</block>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        <label><name>lab2</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m2</name></expr>;</expr_stmt>
        </block_content>}</block>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 162 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>skip_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt> <comment type="block">/* next, line 162 */</comment>
            </block_content>}</block>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 162 */</comment>
                <if_stmt><if>if <condition>(<expr><call><name>out_grouping_b_U</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>g_vowel</name></expr></argument>, <argument><expr><literal type="number">97</literal></expr></argument>, <argument><expr><literal type="number">305</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test</name></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test</name></expr>;</expr_stmt>
        </block_content>}</block>
    </block_content>}</block>
<label><name>lab0</name>:</label>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_possessives</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal> <operator>!=</operator> <literal type="number">3</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><operator>(</operator><literal type="number">67133440</literal> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_0</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* among, line 167 */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_suffix_with_optional_U_vowel</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call mark_suffix_with_optional_U_vowel, line 169 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_sU</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_check_vowel_harmony</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call check_vowel_harmony, line 173 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <if_stmt><if>if <condition>(<expr><call><name>in_grouping_b_U</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>g_U</name></expr></argument>, <argument><expr><literal type="number">105</literal></expr></argument>, <argument><expr><literal type="number">305</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_suffix_with_optional_s_consonant</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call mark_suffix_with_optional_s_consonant, line 175 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_lArI</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">3</literal> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">105</literal> <operator>&amp;&amp;</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">177</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* among, line 179 */</comment>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_yU</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_check_vowel_harmony</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call check_vowel_harmony, line 183 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <if_stmt><if>if <condition>(<expr><call><name>in_grouping_b_U</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>g_U</name></expr></argument>, <argument><expr><literal type="number">105</literal></expr></argument>, <argument><expr><literal type="number">305</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_suffix_with_optional_y_consonant</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call mark_suffix_with_optional_y_consonant, line 185 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_nU</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_check_vowel_harmony</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call check_vowel_harmony, line 189 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_2</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* among, line 190 */</comment>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_nUn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_check_vowel_harmony</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call check_vowel_harmony, line 194 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">110</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_3</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* among, line 195 */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_suffix_with_optional_n_consonant</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call mark_suffix_with_optional_n_consonant, line 196 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_yA</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_check_vowel_harmony</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call check_vowel_harmony, line 200 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">97</literal> <operator>&amp;&amp;</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">101</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_4</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* among, line 201 */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_suffix_with_optional_y_consonant</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call mark_suffix_with_optional_y_consonant, line 202 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_nA</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_check_vowel_harmony</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call check_vowel_harmony, line 206 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">97</literal> <operator>&amp;&amp;</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">101</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_5</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* among, line 207 */</comment>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_DA</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_check_vowel_harmony</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call check_vowel_harmony, line 211 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">97</literal> <operator>&amp;&amp;</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">101</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_6</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* among, line 212 */</comment>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_ndA</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_check_vowel_harmony</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call check_vowel_harmony, line 216 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">97</literal> <operator>&amp;&amp;</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">101</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_7</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* among, line 217 */</comment>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_DAn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_check_vowel_harmony</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call check_vowel_harmony, line 221 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">110</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_8</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* among, line 222 */</comment>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_ndAn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_check_vowel_harmony</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call check_vowel_harmony, line 226 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">3</literal> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">110</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_9</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* among, line 227 */</comment>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_ylA</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_check_vowel_harmony</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call check_vowel_harmony, line 231 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">97</literal> <operator>&amp;&amp;</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">101</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_10</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* among, line 232 */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_suffix_with_optional_y_consonant</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call mark_suffix_with_optional_y_consonant, line 233 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_ki</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_14</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_ncA</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_check_vowel_harmony</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call check_vowel_harmony, line 241 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">97</literal> <operator>&amp;&amp;</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">101</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_11</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* among, line 242 */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_suffix_with_optional_n_consonant</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call mark_suffix_with_optional_n_consonant, line 243 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_yUm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_check_vowel_harmony</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call check_vowel_harmony, line 247 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">109</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_12</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* among, line 248 */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_suffix_with_optional_y_consonant</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call mark_suffix_with_optional_y_consonant, line 249 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_sUn</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_check_vowel_harmony</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call check_vowel_harmony, line 253 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">110</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_13</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* among, line 254 */</comment>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_yUz</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_check_vowel_harmony</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call check_vowel_harmony, line 258 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">122</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_14</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* among, line 259 */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_suffix_with_optional_y_consonant</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call mark_suffix_with_optional_y_consonant, line 260 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_sUnUz</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">4</literal> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">122</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_15</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* among, line 264 */</comment>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_lAr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_check_vowel_harmony</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call check_vowel_harmony, line 268 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">114</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_16</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* among, line 269 */</comment>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_nUz</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_check_vowel_harmony</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call check_vowel_harmony, line 273 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">122</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_17</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* among, line 274 */</comment>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_DUr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_check_vowel_harmony</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call check_vowel_harmony, line 278 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">114</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_18</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* among, line 279 */</comment>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_cAsInA</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">5</literal> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">97</literal> <operator>&amp;&amp;</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">101</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_19</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* among, line 283 */</comment>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_yDU</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_check_vowel_harmony</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call check_vowel_harmony, line 287 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_20</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* among, line 288 */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_suffix_with_optional_y_consonant</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call mark_suffix_with_optional_y_consonant, line 292 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_ysA</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal> <operator>!=</operator> <literal type="number">3</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><operator>(</operator><literal type="number">26658</literal> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_21</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* among, line 297 */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_suffix_with_optional_y_consonant</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call mark_suffix_with_optional_y_consonant, line 298 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_ymUs_</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_check_vowel_harmony</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call check_vowel_harmony, line 302 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">3</literal> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">159</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_22</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* among, line 303 */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_suffix_with_optional_y_consonant</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call mark_suffix_with_optional_y_consonant, line 304 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_yken</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>s_15</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_suffix_with_optional_y_consonant</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call mark_suffix_with_optional_y_consonant, line 308 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_stem_nominal_verb_suffixes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 312 */</comment>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* set continue_stemming_noun_suffixes, line 313 */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m1</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m1</name></expr>;</expr_stmt> <comment type="block">/* or, line 315 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m2</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m2</name></expr>;</expr_stmt> <comment type="block">/* or, line 314 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_ymUs_</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab3</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_ymUs_, line 314 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <goto>goto <name>lab2</name>;</goto>
        <label><name>lab3</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m2</name></expr>;</expr_stmt>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_yDU</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab4</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_yDU, line 314 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <goto>goto <name>lab2</name>;</goto>
        <label><name>lab4</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m2</name></expr>;</expr_stmt>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_ysA</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab5</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_ysA, line 314 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <goto>goto <name>lab2</name>;</goto>
        <label><name>lab5</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m2</name></expr>;</expr_stmt>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_yken</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab1</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_yken, line 314 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
        </block_content>}</block>
    <label><name>lab2</name>:</label>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab1</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_cAsInA</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab6</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_cAsInA, line 316 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m3</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m3</name></expr>;</expr_stmt> <comment type="block">/* or, line 316 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_sUnUz</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab8</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_sUnUz, line 316 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <goto>goto <name>lab7</name>;</goto>
        <label><name>lab8</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m3</name></expr>;</expr_stmt>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_lAr</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab9</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_lAr, line 316 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <goto>goto <name>lab7</name>;</goto>
        <label><name>lab9</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m3</name></expr>;</expr_stmt>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_yUm</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab10</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_yUm, line 316 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <goto>goto <name>lab7</name>;</goto>
        <label><name>lab10</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m3</name></expr>;</expr_stmt>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_sUn</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab11</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_sUn, line 316 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <goto>goto <name>lab7</name>;</goto>
        <label><name>lab11</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m3</name></expr>;</expr_stmt>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_yUz</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab12</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_yUz, line 316 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <goto>goto <name>lab7</name>;</goto>
        <label><name>lab12</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m3</name></expr>;</expr_stmt>
        </block_content>}</block>
    <label><name>lab7</name>:</label>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_ymUs_</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab6</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_ymUs_, line 316 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab6</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_lAr</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab13</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_lAr, line 319 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 319 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 319 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_keep</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt><comment type="block">/* (void) m_keep;*/</comment> <comment type="block">/* try, line 319 */</comment>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 319 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m4</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m4</name></expr>;</expr_stmt> <comment type="block">/* or, line 319 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_DUr</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab16</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_DUr, line 319 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <goto>goto <name>lab15</name>;</goto>
            <label><name>lab16</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m4</name></expr>;</expr_stmt>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_yDU</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab17</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_yDU, line 319 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <goto>goto <name>lab15</name>;</goto>
            <label><name>lab17</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m4</name></expr>;</expr_stmt>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_ysA</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab18</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_ysA, line 319 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <goto>goto <name>lab15</name>;</goto>
            <label><name>lab18</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m4</name></expr>;</expr_stmt>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_ymUs_</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab14</name>;</goto> </block_content>}</block></if></if_stmt> <comment type="block">/* call mark_ymUs_, line 319 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
            </block_content>}</block>
        <label><name>lab15</name>:</label>
        <label><name>lab14</name>:</label>
            <empty_stmt>;</empty_stmt>
        </block_content>}</block>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* unset continue_stemming_noun_suffixes, line 320 */</comment>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab13</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_nUz</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab19</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_nUz, line 323 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m5</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m5</name></expr>;</expr_stmt> <comment type="block">/* or, line 323 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_yDU</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab21</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_yDU, line 323 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <goto>goto <name>lab20</name>;</goto>
        <label><name>lab21</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m5</name></expr>;</expr_stmt>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_ysA</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab19</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_ysA, line 323 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
        </block_content>}</block>
    <label><name>lab20</name>:</label>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab19</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m6</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m6</name></expr>;</expr_stmt> <comment type="block">/* or, line 325 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_sUnUz</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab24</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_sUnUz, line 325 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <goto>goto <name>lab23</name>;</goto>
        <label><name>lab24</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m6</name></expr>;</expr_stmt>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_yUz</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab25</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_yUz, line 325 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <goto>goto <name>lab23</name>;</goto>
        <label><name>lab25</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m6</name></expr>;</expr_stmt>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_sUn</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab26</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_sUn, line 325 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <goto>goto <name>lab23</name>;</goto>
        <label><name>lab26</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m6</name></expr>;</expr_stmt>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_yUm</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab22</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_yUm, line 325 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
        </block_content>}</block>
    <label><name>lab23</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 325 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 325 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_keep</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt><comment type="block">/* (void) m_keep;*/</comment> <comment type="block">/* try, line 325 */</comment>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 325 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_ymUs_</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab27</name>;</goto> </block_content>}</block></if></if_stmt> <comment type="block">/* call mark_ymUs_, line 325 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
        <label><name>lab27</name>:</label>
            <empty_stmt>;</empty_stmt>
        </block_content>}</block>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab22</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_DUr</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call mark_DUr, line 327 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 327 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 327 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_keep</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt><comment type="block">/* (void) m_keep;*/</comment> <comment type="block">/* try, line 327 */</comment>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 327 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m7</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m7</name></expr>;</expr_stmt> <comment type="block">/* or, line 327 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_sUnUz</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab30</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_sUnUz, line 327 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <goto>goto <name>lab29</name>;</goto>
            <label><name>lab30</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m7</name></expr>;</expr_stmt>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_lAr</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab31</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_lAr, line 327 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <goto>goto <name>lab29</name>;</goto>
            <label><name>lab31</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m7</name></expr>;</expr_stmt>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_yUm</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab32</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_yUm, line 327 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <goto>goto <name>lab29</name>;</goto>
            <label><name>lab32</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m7</name></expr>;</expr_stmt>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_sUn</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab33</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_sUn, line 327 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <goto>goto <name>lab29</name>;</goto>
            <label><name>lab33</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m7</name></expr>;</expr_stmt>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_yUz</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab34</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_yUz, line 327 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <goto>goto <name>lab29</name>;</goto>
            <label><name>lab34</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m7</name></expr>;</expr_stmt>
            </block_content>}</block>
        <label><name>lab29</name>:</label>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_ymUs_</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab28</name>;</goto> </block_content>}</block></if></if_stmt> <comment type="block">/* call mark_ymUs_, line 327 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
        <label><name>lab28</name>:</label>
            <empty_stmt>;</empty_stmt>
        </block_content>}</block>
    </block_content>}</block>
<label><name>lab0</name>:</label>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 328 */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 328 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_stem_suffix_chain_before_ki</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 333 */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_ki</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call mark_ki, line 334 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m1</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m1</name></expr>;</expr_stmt> <comment type="block">/* or, line 342 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_DA</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab1</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_DA, line 336 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 336 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 336 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_keep</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt><comment type="block">/* (void) m_keep;*/</comment> <comment type="block">/* try, line 336 */</comment>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 336 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m2</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m2</name></expr>;</expr_stmt> <comment type="block">/* or, line 338 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_lAr</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab4</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_lAr, line 337 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 337 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 337 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_keep</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt><comment type="block">/* (void) m_keep;*/</comment> <comment type="block">/* try, line 337 */</comment>
                    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_stem_suffix_chain_before_ki</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab5</name>;</goto> </block_content>}</block></if></if_stmt> <comment type="block">/* call stem_suffix_chain_before_ki, line 337 */</comment>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                    </block_content>}</block>
                <label><name>lab5</name>:</label>
                    <empty_stmt>;</empty_stmt>
                </block_content>}</block>
                <goto>goto <name>lab3</name>;</goto>
            <label><name>lab4</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m2</name></expr>;</expr_stmt>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_possessives</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab2</name>;</goto> </block_content>}</block></if></if_stmt> <comment type="block">/* call mark_possessives, line 339 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 339 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 339 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_keep</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt><comment type="block">/* (void) m_keep;*/</comment> <comment type="block">/* try, line 339 */</comment>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 339 */</comment>
                    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_lAr</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab6</name>;</goto> </block_content>}</block></if></if_stmt> <comment type="block">/* call mark_lAr, line 339 */</comment>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                    </block_content>}</block>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 339 */</comment>
                    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 339 */</comment>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                    </block_content>}</block>
                    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_stem_suffix_chain_before_ki</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab6</name>;</goto> </block_content>}</block></if></if_stmt> <comment type="block">/* call stem_suffix_chain_before_ki, line 339 */</comment>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                    </block_content>}</block>
                <label><name>lab6</name>:</label>
                    <empty_stmt>;</empty_stmt>
                </block_content>}</block>
            </block_content>}</block>
        <label><name>lab3</name>:</label>
        <label><name>lab2</name>:</label>
            <empty_stmt>;</empty_stmt>
        </block_content>}</block>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab1</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_nUn</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab7</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_nUn, line 343 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 343 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 343 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_keep</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt><comment type="block">/* (void) m_keep;*/</comment> <comment type="block">/* try, line 343 */</comment>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 343 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m3</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m3</name></expr>;</expr_stmt> <comment type="block">/* or, line 345 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_lArI</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab10</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_lArI, line 344 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 344 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 344 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <goto>goto <name>lab9</name>;</goto>
            <label><name>lab10</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m3</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 346 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m4</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m4</name></expr>;</expr_stmt> <comment type="block">/* or, line 346 */</comment>
                    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_possessives</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab13</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_possessives, line 346 */</comment>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                    </block_content>}</block>
                    <goto>goto <name>lab12</name>;</goto>
                <label><name>lab13</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m4</name></expr>;</expr_stmt>
                    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_sU</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab11</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_sU, line 346 */</comment>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                    </block_content>}</block>
                </block_content>}</block>
            <label><name>lab12</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 346 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 346 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_keep</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt><comment type="block">/* (void) m_keep;*/</comment> <comment type="block">/* try, line 346 */</comment>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 346 */</comment>
                    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_lAr</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab14</name>;</goto> </block_content>}</block></if></if_stmt> <comment type="block">/* call mark_lAr, line 346 */</comment>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                    </block_content>}</block>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 346 */</comment>
                    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 346 */</comment>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                    </block_content>}</block>
                    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_stem_suffix_chain_before_ki</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab14</name>;</goto> </block_content>}</block></if></if_stmt> <comment type="block">/* call stem_suffix_chain_before_ki, line 346 */</comment>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                    </block_content>}</block>
                <label><name>lab14</name>:</label>
                    <empty_stmt>;</empty_stmt>
                </block_content>}</block>
                <goto>goto <name>lab9</name>;</goto>
            <label><name>lab11</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m3</name></expr>;</expr_stmt>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_stem_suffix_chain_before_ki</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab8</name>;</goto> </block_content>}</block></if></if_stmt> <comment type="block">/* call stem_suffix_chain_before_ki, line 348 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
            </block_content>}</block>
        <label><name>lab9</name>:</label>
        <label><name>lab8</name>:</label>
            <empty_stmt>;</empty_stmt>
        </block_content>}</block>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab7</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_ndA</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call mark_ndA, line 351 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m5</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m5</name></expr>;</expr_stmt> <comment type="block">/* or, line 353 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_lArI</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab16</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_lArI, line 352 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 352 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 352 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <goto>goto <name>lab15</name>;</goto>
        <label><name>lab16</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m5</name></expr>;</expr_stmt>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_sU</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab17</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_sU, line 354 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 354 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 354 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_keep</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt><comment type="block">/* (void) m_keep;*/</comment> <comment type="block">/* try, line 354 */</comment>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 354 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_lAr</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab18</name>;</goto> </block_content>}</block></if></if_stmt> <comment type="block">/* call mark_lAr, line 354 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 354 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 354 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_stem_suffix_chain_before_ki</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab18</name>;</goto> </block_content>}</block></if></if_stmt> <comment type="block">/* call stem_suffix_chain_before_ki, line 354 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
            <label><name>lab18</name>:</label>
                <empty_stmt>;</empty_stmt>
            </block_content>}</block>
            <goto>goto <name>lab15</name>;</goto>
        <label><name>lab17</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m5</name></expr>;</expr_stmt>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_stem_suffix_chain_before_ki</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call stem_suffix_chain_before_ki, line 356 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
        </block_content>}</block>
    <label><name>lab15</name>:</label>
        <empty_stmt>;</empty_stmt>
    </block_content>}</block>
<label><name>lab0</name>:</label>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_stem_noun_suffixes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m1</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m1</name></expr>;</expr_stmt> <comment type="block">/* or, line 363 */</comment>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 362 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_lAr</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab1</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_lAr, line 362 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 362 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 362 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_keep</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt><comment type="block">/* (void) m_keep;*/</comment> <comment type="block">/* try, line 362 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_stem_suffix_chain_before_ki</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab2</name>;</goto> </block_content>}</block></if></if_stmt> <comment type="block">/* call stem_suffix_chain_before_ki, line 362 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
        <label><name>lab2</name>:</label>
            <empty_stmt>;</empty_stmt>
        </block_content>}</block>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab1</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 364 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_ncA</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab3</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_ncA, line 364 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 364 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 364 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_keep</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt><comment type="block">/* (void) m_keep;*/</comment> <comment type="block">/* try, line 365 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m2</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m2</name></expr>;</expr_stmt> <comment type="block">/* or, line 367 */</comment>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 366 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_lArI</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab6</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_lArI, line 366 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 366 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 366 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <goto>goto <name>lab5</name>;</goto>
            <label><name>lab6</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m2</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 368 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m3</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m3</name></expr>;</expr_stmt> <comment type="block">/* or, line 368 */</comment>
                    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_possessives</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab9</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_possessives, line 368 */</comment>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                    </block_content>}</block>
                    <goto>goto <name>lab8</name>;</goto>
                <label><name>lab9</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m3</name></expr>;</expr_stmt>
                    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_sU</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab7</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_sU, line 368 */</comment>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                    </block_content>}</block>
                </block_content>}</block>
            <label><name>lab8</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 368 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 368 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_keep</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt><comment type="block">/* (void) m_keep;*/</comment> <comment type="block">/* try, line 368 */</comment>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 368 */</comment>
                    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_lAr</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab10</name>;</goto> </block_content>}</block></if></if_stmt> <comment type="block">/* call mark_lAr, line 368 */</comment>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                    </block_content>}</block>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 368 */</comment>
                    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 368 */</comment>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                    </block_content>}</block>
                    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_stem_suffix_chain_before_ki</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab10</name>;</goto> </block_content>}</block></if></if_stmt> <comment type="block">/* call stem_suffix_chain_before_ki, line 368 */</comment>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                    </block_content>}</block>
                <label><name>lab10</name>:</label>
                    <empty_stmt>;</empty_stmt>
                </block_content>}</block>
                <goto>goto <name>lab5</name>;</goto>
            <label><name>lab7</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m2</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 370 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_lAr</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab4</name>;</goto> </block_content>}</block></if></if_stmt> <comment type="block">/* call mark_lAr, line 370 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 370 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 370 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_stem_suffix_chain_before_ki</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab4</name>;</goto> </block_content>}</block></if></if_stmt> <comment type="block">/* call stem_suffix_chain_before_ki, line 370 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
            </block_content>}</block>
        <label><name>lab5</name>:</label>
        <label><name>lab4</name>:</label>
            <empty_stmt>;</empty_stmt>
        </block_content>}</block>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab3</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 374 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m4</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m4</name></expr>;</expr_stmt> <comment type="block">/* or, line 374 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_ndA</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab13</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_ndA, line 374 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <goto>goto <name>lab12</name>;</goto>
        <label><name>lab13</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m4</name></expr>;</expr_stmt>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_nA</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab11</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_nA, line 374 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
        </block_content>}</block>
    <label><name>lab12</name>:</label>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m5</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m5</name></expr>;</expr_stmt> <comment type="block">/* or, line 377 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_lArI</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab15</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_lArI, line 376 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 376 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 376 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <goto>goto <name>lab14</name>;</goto>
        <label><name>lab15</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m5</name></expr>;</expr_stmt>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_sU</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab16</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_sU, line 378 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 378 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 378 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_keep</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt><comment type="block">/* (void) m_keep;*/</comment> <comment type="block">/* try, line 378 */</comment>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 378 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_lAr</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab17</name>;</goto> </block_content>}</block></if></if_stmt> <comment type="block">/* call mark_lAr, line 378 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 378 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 378 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_stem_suffix_chain_before_ki</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab17</name>;</goto> </block_content>}</block></if></if_stmt> <comment type="block">/* call stem_suffix_chain_before_ki, line 378 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
            <label><name>lab17</name>:</label>
                <empty_stmt>;</empty_stmt>
            </block_content>}</block>
            <goto>goto <name>lab14</name>;</goto>
        <label><name>lab16</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m5</name></expr>;</expr_stmt>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_stem_suffix_chain_before_ki</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab11</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call stem_suffix_chain_before_ki, line 380 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
        </block_content>}</block>
    <label><name>lab14</name>:</label>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab11</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 384 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m6</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m6</name></expr>;</expr_stmt> <comment type="block">/* or, line 384 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_ndAn</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab20</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_ndAn, line 384 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <goto>goto <name>lab19</name>;</goto>
        <label><name>lab20</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m6</name></expr>;</expr_stmt>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_nU</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab18</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_nU, line 384 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
        </block_content>}</block>
    <label><name>lab19</name>:</label>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m7</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m7</name></expr>;</expr_stmt> <comment type="block">/* or, line 384 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_sU</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab22</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_sU, line 384 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 384 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 384 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_keep</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt><comment type="block">/* (void) m_keep;*/</comment> <comment type="block">/* try, line 384 */</comment>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 384 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_lAr</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab23</name>;</goto> </block_content>}</block></if></if_stmt> <comment type="block">/* call mark_lAr, line 384 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 384 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 384 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_stem_suffix_chain_before_ki</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab23</name>;</goto> </block_content>}</block></if></if_stmt> <comment type="block">/* call stem_suffix_chain_before_ki, line 384 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
            <label><name>lab23</name>:</label>
                <empty_stmt>;</empty_stmt>
            </block_content>}</block>
            <goto>goto <name>lab21</name>;</goto>
        <label><name>lab22</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m7</name></expr>;</expr_stmt>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_lArI</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab18</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_lArI, line 384 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
        </block_content>}</block>
    <label><name>lab21</name>:</label>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab18</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 386 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_DAn</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab24</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_DAn, line 386 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 386 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 386 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_keep</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt><comment type="block">/* (void) m_keep;*/</comment> <comment type="block">/* try, line 386 */</comment>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 386 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m8</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m8</name></expr>;</expr_stmt> <comment type="block">/* or, line 389 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_possessives</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab27</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_possessives, line 388 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 388 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 388 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_keep</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt><comment type="block">/* (void) m_keep;*/</comment> <comment type="block">/* try, line 388 */</comment>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 388 */</comment>
                    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_lAr</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab28</name>;</goto> </block_content>}</block></if></if_stmt> <comment type="block">/* call mark_lAr, line 388 */</comment>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                    </block_content>}</block>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 388 */</comment>
                    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 388 */</comment>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                    </block_content>}</block>
                    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_stem_suffix_chain_before_ki</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab28</name>;</goto> </block_content>}</block></if></if_stmt> <comment type="block">/* call stem_suffix_chain_before_ki, line 388 */</comment>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                    </block_content>}</block>
                <label><name>lab28</name>:</label>
                    <empty_stmt>;</empty_stmt>
                </block_content>}</block>
                <goto>goto <name>lab26</name>;</goto>
            <label><name>lab27</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m8</name></expr>;</expr_stmt>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_lAr</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab29</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_lAr, line 390 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 390 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 390 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_keep</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt><comment type="block">/* (void) m_keep;*/</comment> <comment type="block">/* try, line 390 */</comment>
                    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_stem_suffix_chain_before_ki</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab30</name>;</goto> </block_content>}</block></if></if_stmt> <comment type="block">/* call stem_suffix_chain_before_ki, line 390 */</comment>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                    </block_content>}</block>
                <label><name>lab30</name>:</label>
                    <empty_stmt>;</empty_stmt>
                </block_content>}</block>
                <goto>goto <name>lab26</name>;</goto>
            <label><name>lab29</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m8</name></expr>;</expr_stmt>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_stem_suffix_chain_before_ki</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab25</name>;</goto> </block_content>}</block></if></if_stmt> <comment type="block">/* call stem_suffix_chain_before_ki, line 392 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
            </block_content>}</block>
        <label><name>lab26</name>:</label>
        <label><name>lab25</name>:</label>
            <empty_stmt>;</empty_stmt>
        </block_content>}</block>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab24</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 396 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m9</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m9</name></expr>;</expr_stmt> <comment type="block">/* or, line 396 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_nUn</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab33</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_nUn, line 396 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <goto>goto <name>lab32</name>;</goto>
        <label><name>lab33</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m9</name></expr>;</expr_stmt>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_ylA</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab31</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_ylA, line 396 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
        </block_content>}</block>
    <label><name>lab32</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 396 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 396 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_keep</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt><comment type="block">/* (void) m_keep;*/</comment> <comment type="block">/* try, line 397 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m10</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m10</name></expr>;</expr_stmt> <comment type="block">/* or, line 399 */</comment>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 398 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_lAr</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab36</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_lAr, line 398 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 398 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 398 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_stem_suffix_chain_before_ki</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab36</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call stem_suffix_chain_before_ki, line 398 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <goto>goto <name>lab35</name>;</goto>
            <label><name>lab36</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m10</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 400 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m11</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m11</name></expr>;</expr_stmt> <comment type="block">/* or, line 400 */</comment>
                    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_possessives</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab39</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_possessives, line 400 */</comment>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                    </block_content>}</block>
                    <goto>goto <name>lab38</name>;</goto>
                <label><name>lab39</name>:</label>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m11</name></expr>;</expr_stmt>
                    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_sU</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab37</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_sU, line 400 */</comment>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                    </block_content>}</block>
                </block_content>}</block>
            <label><name>lab38</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 400 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 400 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_keep</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt><comment type="block">/* (void) m_keep;*/</comment> <comment type="block">/* try, line 400 */</comment>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 400 */</comment>
                    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_lAr</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab40</name>;</goto> </block_content>}</block></if></if_stmt> <comment type="block">/* call mark_lAr, line 400 */</comment>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                    </block_content>}</block>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 400 */</comment>
                    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 400 */</comment>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                    </block_content>}</block>
                    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_stem_suffix_chain_before_ki</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab40</name>;</goto> </block_content>}</block></if></if_stmt> <comment type="block">/* call stem_suffix_chain_before_ki, line 400 */</comment>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                    </block_content>}</block>
                <label><name>lab40</name>:</label>
                    <empty_stmt>;</empty_stmt>
                </block_content>}</block>
                <goto>goto <name>lab35</name>;</goto>
            <label><name>lab37</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m10</name></expr>;</expr_stmt>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_stem_suffix_chain_before_ki</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab34</name>;</goto> </block_content>}</block></if></if_stmt> <comment type="block">/* call stem_suffix_chain_before_ki, line 402 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
            </block_content>}</block>
        <label><name>lab35</name>:</label>
        <label><name>lab34</name>:</label>
            <empty_stmt>;</empty_stmt>
        </block_content>}</block>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab31</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 406 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_lArI</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab41</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_lArI, line 406 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 406 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 406 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab41</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_stem_suffix_chain_before_ki</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab42</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call stem_suffix_chain_before_ki, line 408 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab42</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 410 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m12</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m12</name></expr>;</expr_stmt> <comment type="block">/* or, line 410 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_DA</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab45</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_DA, line 410 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <goto>goto <name>lab44</name>;</goto>
        <label><name>lab45</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m12</name></expr>;</expr_stmt>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_yU</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab46</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_yU, line 410 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <goto>goto <name>lab44</name>;</goto>
        <label><name>lab46</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m12</name></expr>;</expr_stmt>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_yA</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab43</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_yA, line 410 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
        </block_content>}</block>
    <label><name>lab44</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 410 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 410 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_keep</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt><comment type="block">/* (void) m_keep;*/</comment> <comment type="block">/* try, line 410 */</comment>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 410 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m13</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m13</name></expr>;</expr_stmt> <comment type="block">/* or, line 410 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_possessives</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab49</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_possessives, line 410 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 410 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 410 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_keep</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt><comment type="block">/* (void) m_keep;*/</comment> <comment type="block">/* try, line 410 */</comment>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 410 */</comment>
                    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_lAr</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab50</name>;</goto> </block_content>}</block></if></if_stmt> <comment type="block">/* call mark_lAr, line 410 */</comment>
                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                    </block_content>}</block>
                <label><name>lab50</name>:</label>
                    <empty_stmt>;</empty_stmt>
                </block_content>}</block>
                <goto>goto <name>lab48</name>;</goto>
            <label><name>lab49</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m13</name></expr>;</expr_stmt>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_lAr</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab47</name>;</goto> </block_content>}</block></if></if_stmt> <comment type="block">/* call mark_lAr, line 410 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
            </block_content>}</block>
        <label><name>lab48</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 410 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 410 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 410 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_stem_suffix_chain_before_ki</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab47</name>;</goto> </block_content>}</block></if></if_stmt> <comment type="block">/* call stem_suffix_chain_before_ki, line 410 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
        <label><name>lab47</name>:</label>
            <empty_stmt>;</empty_stmt>
        </block_content>}</block>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab43</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 412 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m14</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m14</name></expr>;</expr_stmt> <comment type="block">/* or, line 412 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_possessives</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab52</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_possessives, line 412 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <goto>goto <name>lab51</name>;</goto>
        <label><name>lab52</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m14</name></expr>;</expr_stmt>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_sU</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call mark_sU, line 412 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
        </block_content>}</block>
    <label><name>lab51</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 412 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 412 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_keep</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt><comment type="block">/* (void) m_keep;*/</comment> <comment type="block">/* try, line 412 */</comment>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 412 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_lAr</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab53</name>;</goto> </block_content>}</block></if></if_stmt> <comment type="block">/* call mark_lAr, line 412 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 412 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 412 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_stem_suffix_chain_before_ki</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab53</name>;</goto> </block_content>}</block></if></if_stmt> <comment type="block">/* call stem_suffix_chain_before_ki, line 412 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
        <label><name>lab53</name>:</label>
            <empty_stmt>;</empty_stmt>
        </block_content>}</block>
    </block_content>}</block>
<label><name>lab0</name>:</label>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_post_process_last_consonants</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>among_var</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 416 */</comment>
    <expr_stmt><expr><name>among_var</name> <operator>=</operator> <call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_23</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* substring, line 416 */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>among_var</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 416 */</comment>
    <switch>switch<condition>(<expr><name>among_var</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">0</literal></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_16</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 417 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
        <case>case <expr><literal type="number">2</literal></expr>:</case>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_17</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 418 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
        <case>case <expr><literal type="number">3</literal></expr>:</case>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_18</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 419 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
        <case>case <expr><literal type="number">4</literal></expr>:</case>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_19</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 420 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
    </block_content>}</block></switch>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_append_U_to_stems_ending_with_d_or_g</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 431 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m1</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m1</name></expr>;</expr_stmt> <comment type="block">/* or, line 431 */</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_20</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab1</name>;</goto></block_content></block></if></if_stmt>
            <goto>goto <name>lab0</name>;</goto>
        <label><name>lab1</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_21</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
    <label><name>lab0</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test</name></expr>;</expr_stmt>
    </block_content>}</block>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m2</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m2</name></expr>;</expr_stmt> <comment type="block">/* or, line 433 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 432 */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>out_grouping_b_U</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>g_vowel</name></expr></argument>, <argument><expr><literal type="number">97</literal></expr></argument>, <argument><expr><literal type="number">305</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab3</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* goto */</comment> <comment type="block">/* grouping vowel, line 432 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m3</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m3</name></expr>;</expr_stmt> <comment type="block">/* or, line 432 */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_22</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab5</name>;</goto></block_content></block></if></if_stmt>
                <goto>goto <name>lab4</name>;</goto>
            <label><name>lab5</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m3</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_23</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab3</name>;</goto></block_content></block></if></if_stmt>
            </block_content>}</block>
        <label><name>lab4</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test</name></expr>;</expr_stmt>
        </block_content>}</block>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c_keep</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>insert_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_24</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;+, line 432 */</comment>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c_keep</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <goto>goto <name>lab2</name>;</goto>
    <label><name>lab3</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m2</name></expr>;</expr_stmt>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 434 */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>out_grouping_b_U</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>g_vowel</name></expr></argument>, <argument><expr><literal type="number">97</literal></expr></argument>, <argument><expr><literal type="number">305</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab6</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* goto */</comment> <comment type="block">/* grouping vowel, line 434 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m4</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m4</name></expr>;</expr_stmt> <comment type="block">/* or, line 434 */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_25</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab8</name>;</goto></block_content></block></if></if_stmt>
                <goto>goto <name>lab7</name>;</goto>
            <label><name>lab8</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m4</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_26</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab6</name>;</goto></block_content></block></if></if_stmt>
            </block_content>}</block>
        <label><name>lab7</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test</name></expr>;</expr_stmt>
        </block_content>}</block>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c_keep</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>insert_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_27</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;+, line 434 */</comment>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c_keep</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <goto>goto <name>lab2</name>;</goto>
    <label><name>lab6</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m2</name></expr>;</expr_stmt>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 436 */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>out_grouping_b_U</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>g_vowel</name></expr></argument>, <argument><expr><literal type="number">97</literal></expr></argument>, <argument><expr><literal type="number">305</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab9</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* goto */</comment> <comment type="block">/* grouping vowel, line 436 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m5</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m5</name></expr>;</expr_stmt> <comment type="block">/* or, line 436 */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_28</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab11</name>;</goto></block_content></block></if></if_stmt>
                <goto>goto <name>lab10</name>;</goto>
            <label><name>lab11</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m5</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_29</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab9</name>;</goto></block_content></block></if></if_stmt>
            </block_content>}</block>
        <label><name>lab10</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test</name></expr>;</expr_stmt>
        </block_content>}</block>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c_keep</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>insert_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_30</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;+, line 436 */</comment>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c_keep</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <goto>goto <name>lab2</name>;</goto>
    <label><name>lab9</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m2</name></expr>;</expr_stmt>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 438 */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>out_grouping_b_U</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>g_vowel</name></expr></argument>, <argument><expr><literal type="number">97</literal></expr></argument>, <argument><expr><literal type="number">305</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* goto */</comment> <comment type="block">/* grouping vowel, line 438 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m6</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m6</name></expr>;</expr_stmt> <comment type="block">/* or, line 438 */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_31</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab13</name>;</goto></block_content></block></if></if_stmt>
                <goto>goto <name>lab12</name>;</goto>
            <label><name>lab13</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m6</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_32</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
        <label><name>lab12</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test</name></expr>;</expr_stmt>
        </block_content>}</block>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c_keep</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>insert_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_33</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;+, line 438 */</comment>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c_keep</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
    </block_content>}</block>
<label><name>lab2</name>:</label>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_more_than_one_syllable_word</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c_test</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 446 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
            <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content> <comment type="block">/* atleast, line 446 */</comment>
                <decl_stmt><decl><type><name>int</name></type> <name>c1</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>
                <block>{<block_content>    <comment type="block">/* gopast */</comment> <comment type="block">/* grouping vowel, line 446 */</comment>
                    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>out_grouping_U</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>g_vowel</name></expr></argument>, <argument><expr><literal type="number">97</literal></expr></argument>, <argument><expr><literal type="number">305</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab0</name>;</goto></block_content></block></if></if_stmt>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
                </block_content>}</block>
                <expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
                <continue>continue;</continue>
            <label><name>lab0</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></while>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c_test</name></expr>;</expr_stmt>
    </block_content>}</block>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_is_reserved_word</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c1</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* or, line 451 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c_test</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 450 */</comment>
            <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content> <comment type="block">/* gopast, line 450 */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_34</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab2</name>;</goto></block_content></block></if></if_stmt>
                <break>break;</break>
            <label><name>lab2</name>:</label>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>skip_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab1</name>;</goto></block_content></block></if></if_stmt>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt> <comment type="block">/* gopast, line 450 */</comment>
                </block_content>}</block>
            </block_content>}</block></while>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>I</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>I</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab1</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c_test</name></expr>;</expr_stmt>
        </block_content>}</block>
        <goto>goto <name>lab0</name>;</goto>
    <label><name>lab1</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c_test</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 452 */</comment>
            <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content> <comment type="block">/* gopast, line 452 */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>s_35</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab3</name>;</goto></block_content></block></if></if_stmt>
                <break>break;</break>
            <label><name>lab3</name>:</label>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>skip_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt> <comment type="block">/* gopast, line 452 */</comment>
                </block_content>}</block>
            </block_content>}</block></while>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>I</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>I</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c_test</name></expr>;</expr_stmt>
        </block_content>}</block>
    </block_content>}</block>
<label><name>lab0</name>:</label>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_postlude</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c1</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* not, line 456 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_is_reserved_word</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab0</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call is_reserved_word, line 456 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    <label><name>lab0</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name></expr>;</expr_stmt> <comment type="block">/* backwards, line 457 */</comment>

    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m2</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m2</name></expr>;</expr_stmt> <comment type="block">/* do, line 458 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_append_U_to_stems_ending_with_d_or_g</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab1</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call append_U_to_stems_ending_with_d_or_g, line 458 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
    <label><name>lab1</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m2</name></expr>;</expr_stmt>
    </block_content>}</block>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m3</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m3</name></expr>;</expr_stmt> <comment type="block">/* do, line 459 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_post_process_last_consonants</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab2</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call post_process_last_consonants, line 459 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
    <label><name>lab2</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m3</name></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type> <name>turkish_UTF_8_stem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_more_than_one_syllable_word</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call more_than_one_syllable_word, line 465 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name></expr>;</expr_stmt> <comment type="block">/* backwards, line 467 */</comment>

    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m1</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m1</name></expr>;</expr_stmt> <comment type="block">/* do, line 468 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_stem_nominal_verb_suffixes</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab0</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call stem_nominal_verb_suffixes, line 468 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
    <label><name>lab0</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
    </block_content>}</block>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* Boolean test continue_stemming_noun_suffixes, line 469 */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m2</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m2</name></expr>;</expr_stmt> <comment type="block">/* do, line 470 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_stem_noun_suffixes</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab1</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call stem_noun_suffixes, line 470 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
    <label><name>lab1</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m2</name></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name></expr>;</expr_stmt>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_postlude</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call postlude, line 473 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>turkish_UTF_8_create_env</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>SN_create_env</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>void</name></type> <name>turkish_UTF_8_close_env</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>SN_close_env</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

</unit>
