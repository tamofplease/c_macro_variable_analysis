<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/backend/snowball/libstemmer/stem_UTF_8_spanish.c">
<comment type="block">/* This file was generated automatically by the Snowball to ANSI C compiler */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"header.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>spanish_UTF_8_stem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_residual_suffix</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_verb_suffix</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_y_verb_suffix</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_standard_suffix</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_attached_pronoun</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_R2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_R1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_RV</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_regions</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>r_postlude</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function_decl><type><specifier>extern</specifier> <name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>spanish_UTF_8_create_env</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>spanish_UTF_8_close_env</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list>;</function_decl>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xA1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xA9</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_3</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xAD</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_4</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xB3</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0_5</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xBA</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_0</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_0_1</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_0_2</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_0_3</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  4 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_0_4</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  5 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_0_5</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_1_0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'a'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_1_1</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'a'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_1_2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'e'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_1_3</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'e'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_1_4</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'e'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_1_5</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'o'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_1_6</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'o'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_1_7</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_1_8</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_1_9</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_1_10</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_1_11</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_1_12</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_1</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_1_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_1_1</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_1_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_1_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  4 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_1_4</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  5 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_1_5</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  6 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_1_6</name></expr>, <expr><literal type="number">5</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  7 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_1_7</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  8 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_1_8</name></expr>, <expr><literal type="number">7</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  9 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_1_9</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 10 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_1_10</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 11 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_1_11</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 12 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_1_12</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_2_0</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'o'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_2_1</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'o'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_2_2</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'y'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'o'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_2_3</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'o'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_2_4</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'o'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_2_5</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'r'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_2_6</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'r'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_2_7</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'r'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_2_8</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="char">'r'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_2_9</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="char">'r'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_2_10</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="char">'r'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_2</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_2_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_2_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_2_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_2_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  4 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_2_4</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  5 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_2_5</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  6 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_2_6</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  7 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_2_7</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  8 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_2_8</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  9 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_2_9</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 10 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_2_10</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_3_0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'c'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_3_1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'d'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_3_2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_3_3</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'v'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_3</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_3_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_3_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_3_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_3_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_4_0</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'b'</literal></expr>, <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'e'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_4_1</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'b'</literal></expr>, <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'e'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_4_2</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'e'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_4</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_4_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_4_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_4_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_5_0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'c'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_5_1</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'b'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'l'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_5_2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'v'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_5</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_5_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_5_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_5_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'c'</literal></expr>, <expr><literal type="char">'a'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_1</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'c'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'a'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_2</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'c'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'a'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_3</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'a'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_4</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'a'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_5</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'a'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_6</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'v'</literal></expr>, <expr><literal type="char">'a'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_7</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'z'</literal></expr>, <expr><literal type="char">'a'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_8</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'g'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="char">'a'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_9</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'d'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_10</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'b'</literal></expr>, <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'e'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_11</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'b'</literal></expr>, <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'e'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_12</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'e'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_13</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'e'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_14</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'e'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_15</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'c'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_16</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'u'</literal></expr>, <expr><literal type="char">'c'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_17</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'c'</literal></expr>, <expr><literal type="char">'o'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_18</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'o'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_19</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'o'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_20</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'o'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_21</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'o'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_22</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'v'</literal></expr>, <expr><literal type="char">'o'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_23</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'r'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_24</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'c'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_25</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'c'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_26</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'c'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_27</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_28</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_29</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_30</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'v'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_31</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'z'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_32</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'g'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_33</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_34</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'b'</literal></expr>, <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_35</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'b'</literal></expr>, <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_36</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'c'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_37</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'u'</literal></expr>, <expr><literal type="char">'c'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_38</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_39</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_40</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'c'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_41</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_42</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_43</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_44</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6_45</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'v'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_6</name><index>[<expr><literal type="number">46</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_6_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_6_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_6_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_6_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  4 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_6_4</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  5 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_6_5</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  6 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_6_6</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  7 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_6_7</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  8 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_6_8</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  9 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_6_9</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 10 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_6_10</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 11 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_6_11</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 12 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_6_12</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 13 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_6_13</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 14 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_6_14</name></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 15 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_6_15</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 16 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_6_16</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 17 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_6_17</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 18 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_6_18</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 19 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_6_19</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 20 */</comment> <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><name>s_6_20</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 21 */</comment> <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><name>s_6_21</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 22 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_6_22</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 23 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_6_23</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 24 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_6_24</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 25 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_6_25</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 26 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_6_26</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 27 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_6_27</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 28 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_6_28</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 29 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_6_29</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 30 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_6_30</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 31 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_6_31</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 32 */</comment> <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><name>s_6_32</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 33 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_6_33</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 34 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_6_34</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 35 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_6_35</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 36 */</comment> <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><name>s_6_36</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 37 */</comment> <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><name>s_6_37</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 38 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_6_38</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 39 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_6_39</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 40 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_6_40</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 41 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_6_41</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 42 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_6_42</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 43 */</comment> <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><name>s_6_43</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 44 */</comment> <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><name>s_6_44</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 45 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_6_45</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_7_0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'y'</literal></expr>, <expr><literal type="char">'a'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_7_1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'y'</literal></expr>, <expr><literal type="char">'e'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_7_2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'y'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_7_3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'y'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_7_4</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'y'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_7_5</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'y'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'o'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_7_6</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'y'</literal></expr>, <expr><literal type="char">'o'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_7_7</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'y'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_7_8</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'y'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_7_9</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'y'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_7_10</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'y'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_7_11</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'y'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xB3</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_7</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_7_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_7_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_7_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_7_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  4 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_7_4</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  5 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_7_5</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  6 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_7_6</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  7 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_7_7</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  8 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_7_8</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  9 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_7_9</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 10 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_7_10</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 11 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_7_11</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'b'</literal></expr>, <expr><literal type="char">'a'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'a'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'a'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_3</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'a'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_4</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'a'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_5</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="char">'a'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_6</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="char">'a'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_7</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="char">'a'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_8</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="char">'a'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_9</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'d'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_10</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'d'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_11</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'d'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_12</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'e'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_13</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'e'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_14</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'e'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_15</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'e'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_16</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_17</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'b'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_18</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_19</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_20</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_21</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_22</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_23</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_24</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_25</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_26</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_27</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_28</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_29</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_30</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_31</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="char">'n'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'o'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_33</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'o'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_34</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'o'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_35</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'o'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_36</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'r'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_37</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'r'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_38</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'r'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_39</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_40</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'b'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_41</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_42</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_43</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_44</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_45</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_46</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_47</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_48</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_49</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_50</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_51</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_52</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'b'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_53</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_54</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_55</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_56</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_57</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_58</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_59</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_60</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_61</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_62</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_63</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_64</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_65</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_66</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_67</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_68</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_69</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_70</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_71</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="char">'b'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_72</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_73</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_74</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_75</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_76</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_77</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_78</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_79</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_80</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_81</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_82</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_83</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_84</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_85</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_86</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_87</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_88</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_89</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xA1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_90</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xA1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_91</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xA1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_92</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xA9</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_93</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xA9</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_94</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xA9</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8_95</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xB3</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_8</name><index>[<expr><literal type="number">96</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_8_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_8_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_8_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_8_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  4 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_8_4</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  5 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_8_5</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  6 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_8_6</name></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  7 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_8_7</name></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  8 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_8_8</name></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  9 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_8_9</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 10 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_8_10</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 11 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_8_11</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 12 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_8_12</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 13 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_8_13</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 14 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_8_14</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 15 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_8_15</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 16 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_8_16</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 17 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_8_17</name></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 18 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_8_18</name></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 19 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_8_19</name></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 20 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_8_20</name></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 21 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_8_21</name></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 22 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_8_22</name></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 23 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_8_23</name></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 24 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_8_24</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 25 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_8_25</name></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 26 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_8_26</name></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 27 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_8_27</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 28 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_8_28</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 29 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_8_29</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 30 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_8_30</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 31 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_8_31</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 32 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_8_32</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 33 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_8_33</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 34 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_8_34</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 35 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_8_35</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 36 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_8_36</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 37 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_8_37</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 38 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_8_38</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 39 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_8_39</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 40 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_8_40</name></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 41 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_8_41</name></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 42 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_8_42</name></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 43 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_8_43</name></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 44 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_8_44</name></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 45 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_8_45</name></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 46 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_8_46</name></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 47 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_8_47</name></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 48 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_8_48</name></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 49 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_8_49</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 50 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_8_50</name></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 51 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_8_51</name></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 52 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_8_52</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 53 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_8_53</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 54 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_8_54</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 55 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_8_55</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 56 */</comment> <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><name>s_8_56</name></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 57 */</comment> <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><name>s_8_57</name></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 58 */</comment> <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><name>s_8_58</name></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 59 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_8_59</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 60 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_8_60</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 61 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_8_61</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 62 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_8_62</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 63 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_8_63</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 64 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_8_64</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 65 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_8_65</name></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 66 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_8_66</name></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 67 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_8_67</name></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 68 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_8_68</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 69 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_8_69</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 70 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_8_70</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 71 */</comment> <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><name>s_8_71</name></expr>, <expr><literal type="number">70</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 72 */</comment> <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><name>s_8_72</name></expr>, <expr><literal type="number">70</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 73 */</comment> <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><name>s_8_73</name></expr>, <expr><literal type="number">70</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 74 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_8_74</name></expr>, <expr><literal type="number">70</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 75 */</comment> <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><name>s_8_75</name></expr>, <expr><literal type="number">74</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 76 */</comment> <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><name>s_8_76</name></expr>, <expr><literal type="number">74</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 77 */</comment> <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><name>s_8_77</name></expr>, <expr><literal type="number">74</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 78 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_8_78</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 79 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_8_79</name></expr>, <expr><literal type="number">78</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 80 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_8_80</name></expr>, <expr><literal type="number">78</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 81 */</comment> <expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><name>s_8_81</name></expr>, <expr><literal type="number">78</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 82 */</comment> <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><name>s_8_82</name></expr>, <expr><literal type="number">78</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 83 */</comment> <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><name>s_8_83</name></expr>, <expr><literal type="number">78</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 84 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_8_84</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 85 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_8_85</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 86 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_8_86</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 87 */</comment> <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><name>s_8_87</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 88 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_8_88</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 89 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_8_89</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 90 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_8_90</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 91 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_8_91</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 92 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_8_92</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 93 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_8_93</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 94 */</comment> <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><name>s_8_94</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/* 95 */</comment> <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><name>s_8_95</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_9_0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_9_1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'e'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_9_2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'o'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_9_3</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'s'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_9_4</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xA1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_9_5</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xA9</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_9_6</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xAD</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_9_7</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xB3</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>among</name></name></type> <name><name>a_9</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>=
<expr><block>{
<comment type="block">/*  0 */</comment> <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><name>s_9_0</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  1 */</comment> <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><name>s_9_1</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  2 */</comment> <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><name>s_9_2</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  3 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_9_3</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  4 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_9_4</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  5 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_9_5</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  6 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_9_6</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
<comment type="block">/*  7 */</comment> <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><name>s_9_7</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>g_v</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">17</literal></expr>, <expr><literal type="number">65</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">10</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_0</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_1</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'e'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_2</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_3</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'o'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_4</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'u'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_5</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'o'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_6</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'o'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_7</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'r'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_8</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'r'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_9</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'r'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_10</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'u'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_11</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'c'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_12</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'g'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_13</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'u'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_14</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'e'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_15</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'t'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_16</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'t'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_17</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'u'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_18</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'u'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_19</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'g'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_20</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'u'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>symbol</name></type> <name><name>s_21</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="char">'g'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_mark_regions</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>I</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>I</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>I</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name></expr>;</expr_stmt>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c1</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* do, line 37 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c2</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* or, line 39 */</comment>
            <if_stmt><if>if <condition>(<expr><call><name>in_grouping_U</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>g_v</name></expr></argument>, <argument><expr><literal type="number">97</literal></expr></argument>, <argument><expr><literal type="number">252</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab2</name>;</goto></block_content></block></if></if_stmt>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c3</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* or, line 38 */</comment>
                <if_stmt><if>if <condition>(<expr><call><name>out_grouping_U</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>g_v</name></expr></argument>, <argument><expr><literal type="number">97</literal></expr></argument>, <argument><expr><literal type="number">252</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab4</name>;</goto></block_content></block></if></if_stmt>
                <block>{<block_content>    <comment type="block">/* gopast */</comment> <comment type="block">/* grouping v, line 38 */</comment>
                    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>out_grouping_U</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>g_v</name></expr></argument>, <argument><expr><literal type="number">97</literal></expr></argument>, <argument><expr><literal type="number">252</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab4</name>;</goto></block_content></block></if></if_stmt>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
                </block_content>}</block>
                <goto>goto <name>lab3</name>;</goto>
            <label><name>lab4</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c3</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>in_grouping_U</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>g_v</name></expr></argument>, <argument><expr><literal type="number">97</literal></expr></argument>, <argument><expr><literal type="number">252</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab2</name>;</goto></block_content></block></if></if_stmt>
                <block>{<block_content>    <comment type="block">/* gopast */</comment> <comment type="block">/* non v, line 38 */</comment>
                    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>in_grouping_U</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>g_v</name></expr></argument>, <argument><expr><literal type="number">97</literal></expr></argument>, <argument><expr><literal type="number">252</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab2</name>;</goto></block_content></block></if></if_stmt>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
                </block_content>}</block>
            </block_content>}</block>
        <label><name>lab3</name>:</label>
            <goto>goto <name>lab1</name>;</goto>
        <label><name>lab2</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c2</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>out_grouping_U</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>g_v</name></expr></argument>, <argument><expr><literal type="number">97</literal></expr></argument>, <argument><expr><literal type="number">252</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab0</name>;</goto></block_content></block></if></if_stmt>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c4</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* or, line 40 */</comment>
                <if_stmt><if>if <condition>(<expr><call><name>out_grouping_U</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>g_v</name></expr></argument>, <argument><expr><literal type="number">97</literal></expr></argument>, <argument><expr><literal type="number">252</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab6</name>;</goto></block_content></block></if></if_stmt>
                <block>{<block_content>    <comment type="block">/* gopast */</comment> <comment type="block">/* grouping v, line 40 */</comment>
                    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>out_grouping_U</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>g_v</name></expr></argument>, <argument><expr><literal type="number">97</literal></expr></argument>, <argument><expr><literal type="number">252</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab6</name>;</goto></block_content></block></if></if_stmt>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
                </block_content>}</block>
                <goto>goto <name>lab5</name>;</goto>
            <label><name>lab6</name>:</label>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c4</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>in_grouping_U</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>g_v</name></expr></argument>, <argument><expr><literal type="number">97</literal></expr></argument>, <argument><expr><literal type="number">252</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab0</name>;</goto></block_content></block></if></if_stmt>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>skip_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab0</name>;</goto></block_content></block></if></if_stmt>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt> <comment type="block">/* next, line 40 */</comment>
                </block_content>}</block>
            </block_content>}</block>
        <label><name>lab5</name>:</label>
            <empty_stmt>;</empty_stmt>
        </block_content>}</block>
    <label><name>lab1</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>I</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* setmark pV, line 41 */</comment>
    <label><name>lab0</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
    </block_content>}</block>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c5</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* do, line 43 */</comment>
        <block>{<block_content>    <comment type="block">/* gopast */</comment> <comment type="block">/* grouping v, line 44 */</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>out_grouping_U</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>g_v</name></expr></argument>, <argument><expr><literal type="number">97</literal></expr></argument>, <argument><expr><literal type="number">252</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab7</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
        </block_content>}</block>
        <block>{<block_content>    <comment type="block">/* gopast */</comment> <comment type="block">/* non v, line 44 */</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>in_grouping_U</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>g_v</name></expr></argument>, <argument><expr><literal type="number">97</literal></expr></argument>, <argument><expr><literal type="number">252</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab7</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>I</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* setmark p1, line 44 */</comment>
        <block>{<block_content>    <comment type="block">/* gopast */</comment> <comment type="block">/* grouping v, line 45 */</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>out_grouping_U</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>g_v</name></expr></argument>, <argument><expr><literal type="number">97</literal></expr></argument>, <argument><expr><literal type="number">252</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab7</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
        </block_content>}</block>
        <block>{<block_content>    <comment type="block">/* gopast */</comment> <comment type="block">/* non v, line 45 */</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>in_grouping_U</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>g_v</name></expr></argument>, <argument><expr><literal type="number">97</literal></expr></argument>, <argument><expr><literal type="number">252</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab7</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>I</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* setmark p2, line 45 */</comment>
    <label><name>lab7</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c5</name></expr>;</expr_stmt>
    </block_content>}</block>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_postlude</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>among_var</name></decl>;</decl_stmt>
    <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content> <comment type="block">/* repeat, line 49 */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>c1</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 50 */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal> <operator>!=</operator> <literal type="number">5</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><operator>(</operator><literal type="number">67641858</literal> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>among_var</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>among_var</name> <operator>=</operator> <call><name>find_among</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_0</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> <comment type="block">/* substring, line 50 */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>among_var</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab0</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 50 */</comment>
        <switch>switch<condition>(<expr><name>among_var</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="number">0</literal></expr>:</case> <goto>goto <name>lab0</name>;</goto>
            <case>case <expr><literal type="number">1</literal></expr>:</case>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 51 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <break>break;</break>
            <case>case <expr><literal type="number">2</literal></expr>:</case>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 52 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <break>break;</break>
            <case>case <expr><literal type="number">3</literal></expr>:</case>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 53 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <break>break;</break>
            <case>case <expr><literal type="number">4</literal></expr>:</case>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 54 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <break>break;</break>
            <case>case <expr><literal type="number">5</literal></expr>:</case>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 55 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <break>break;</break>
            <case>case <expr><literal type="number">6</literal></expr>:</case>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>skip_utf8</name><argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab0</name>;</goto></block_content></block></if></if_stmt>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt> <comment type="block">/* next, line 57 */</comment>
                </block_content>}</block>
                <break>break;</break>
        </block_content>}</block></switch>
        <continue>continue;</continue>
    <label><name>lab0</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></while>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_RV</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>I</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_R1</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>I</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_R2</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>I</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_attached_pronoun</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>among_var</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 68 */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal> <operator>!=</operator> <literal type="number">3</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><operator>(</operator><literal type="number">557090</literal> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_1</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* substring, line 68 */</comment>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 68 */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">111</literal> <operator>&amp;&amp;</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">114</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>among_var</name> <operator>=</operator> <call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_2</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* substring, line 72 */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>among_var</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_RV</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call RV, line 72 */</comment>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    <switch>switch<condition>(<expr><name>among_var</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">0</literal></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 73 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>s_5</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 73 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
        <case>case <expr><literal type="number">2</literal></expr>:</case>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 74 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>s_6</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 74 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
        <case>case <expr><literal type="number">3</literal></expr>:</case>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 75 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_7</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 75 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
        <case>case <expr><literal type="number">4</literal></expr>:</case>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 76 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_8</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 76 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
        <case>case <expr><literal type="number">5</literal></expr>:</case>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 77 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_9</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 77 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
        <case>case <expr><literal type="number">6</literal></expr>:</case>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 81 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
        <case>case <expr><literal type="number">7</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_10</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 82 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
    </block_content>}</block></switch>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_standard_suffix</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>among_var</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 87 */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal> <operator>!=</operator> <literal type="number">3</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><operator>(</operator><literal type="number">835634</literal> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>among_var</name> <operator>=</operator> <call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_6</name></expr></argument>, <argument><expr><literal type="number">46</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* substring, line 87 */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>among_var</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 87 */</comment>
    <switch>switch<condition>(<expr><name>among_var</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">0</literal></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_R2</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call R2, line 99 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 99 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
        <case>case <expr><literal type="number">2</literal></expr>:</case>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_R2</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call R2, line 105 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 105 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_keep</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt><comment type="block">/* (void) m_keep;*/</comment> <comment type="block">/* try, line 106 */</comment>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 106 */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_11</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab0</name>;</goto> </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 106 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_R2</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab0</name>;</goto> </block_content>}</block></if></if_stmt> <comment type="block">/* call R2, line 106 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 106 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
            <label><name>lab0</name>:</label>
                <empty_stmt>;</empty_stmt>
            </block_content>}</block>
            <break>break;</break>
        <case>case <expr><literal type="number">3</literal></expr>:</case>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_R2</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call R2, line 111 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>s_12</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 111 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
        <case>case <expr><literal type="number">4</literal></expr>:</case>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_R2</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call R2, line 115 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_13</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 115 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
        <case>case <expr><literal type="number">5</literal></expr>:</case>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_R2</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call R2, line 119 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_from_s</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>s_14</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* &lt;-, line 119 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
        <case>case <expr><literal type="number">6</literal></expr>:</case>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_R1</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call R1, line 123 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 123 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_keep</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt><comment type="block">/* (void) m_keep;*/</comment> <comment type="block">/* try, line 124 */</comment>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 125 */</comment>
                <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal> <operator>!=</operator> <literal type="number">3</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><operator>(</operator><literal type="number">4718616</literal> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab1</name>;</goto> </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>among_var</name> <operator>=</operator> <call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_3</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* substring, line 125 */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>among_var</name><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab1</name>;</goto> </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 125 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_R2</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab1</name>;</goto> </block_content>}</block></if></if_stmt> <comment type="block">/* call R2, line 125 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 125 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <switch>switch<condition>(<expr><name>among_var</name></expr>)</condition> <block>{<block_content>
                    <case>case <expr><literal type="number">0</literal></expr>:</case> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab1</name>;</goto> </block_content>}</block>
                    <case>case <expr><literal type="number">1</literal></expr>:</case>
                        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 126 */</comment>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_15</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab1</name>;</goto> </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 126 */</comment>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_R2</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab1</name>;</goto> </block_content>}</block></if></if_stmt> <comment type="block">/* call R2, line 126 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 126 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                </block_content>}</block></switch>
            <label><name>lab1</name>:</label>
                <empty_stmt>;</empty_stmt>
            </block_content>}</block>
            <break>break;</break>
        <case>case <expr><literal type="number">7</literal></expr>:</case>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_R2</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call R2, line 135 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 135 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_keep</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt><comment type="block">/* (void) m_keep;*/</comment> <comment type="block">/* try, line 136 */</comment>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 137 */</comment>
                <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">3</literal> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">101</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab2</name>;</goto> </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>among_var</name> <operator>=</operator> <call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_4</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* substring, line 137 */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>among_var</name><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab2</name>;</goto> </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 137 */</comment>
                <switch>switch<condition>(<expr><name>among_var</name></expr>)</condition> <block>{<block_content>
                    <case>case <expr><literal type="number">0</literal></expr>:</case> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab2</name>;</goto> </block_content>}</block>
                    <case>case <expr><literal type="number">1</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_R2</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab2</name>;</goto> </block_content>}</block></if></if_stmt> <comment type="block">/* call R2, line 140 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 140 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                </block_content>}</block></switch>
            <label><name>lab2</name>:</label>
                <empty_stmt>;</empty_stmt>
            </block_content>}</block>
            <break>break;</break>
        <case>case <expr><literal type="number">8</literal></expr>:</case>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_R2</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call R2, line 147 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 147 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_keep</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt><comment type="block">/* (void) m_keep;*/</comment> <comment type="block">/* try, line 148 */</comment>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 149 */</comment>
                <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>||</operator> <name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal> <operator>!=</operator> <literal type="number">3</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><operator>(</operator><literal type="number">4198408</literal> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>z</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1f</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab3</name>;</goto> </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>among_var</name> <operator>=</operator> <call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_5</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* substring, line 149 */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>among_var</name><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab3</name>;</goto> </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 149 */</comment>
                <switch>switch<condition>(<expr><name>among_var</name></expr>)</condition> <block>{<block_content>
                    <case>case <expr><literal type="number">0</literal></expr>:</case> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab3</name>;</goto> </block_content>}</block>
                    <case>case <expr><literal type="number">1</literal></expr>:</case>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_R2</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab3</name>;</goto> </block_content>}</block></if></if_stmt> <comment type="block">/* call R2, line 152 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 152 */</comment>
                            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                        </block_content>}</block>
                        <break>break;</break>
                </block_content>}</block></switch>
            <label><name>lab3</name>:</label>
                <empty_stmt>;</empty_stmt>
            </block_content>}</block>
            <break>break;</break>
        <case>case <expr><literal type="number">9</literal></expr>:</case>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_R2</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call R2, line 159 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 159 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_keep</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt><comment type="block">/* (void) m_keep;*/</comment> <comment type="block">/* try, line 160 */</comment>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 161 */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>s_16</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab4</name>;</goto> </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 161 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_R2</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab4</name>;</goto> </block_content>}</block></if></if_stmt> <comment type="block">/* call R2, line 161 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 161 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
            <label><name>lab4</name>:</label>
                <empty_stmt>;</empty_stmt>
            </block_content>}</block>
            <break>break;</break>
    </block_content>}</block></switch>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_y_verb_suffix</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>among_var</name></decl>;</decl_stmt>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>mlimit</name></decl>;</decl_stmt> <comment type="block">/* setlimit, line 168 */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>m1</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m1</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>&lt;</operator> <name><name>z</name><operator>-&gt;</operator><name>I</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>I</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <comment type="block">/* tomark, line 168 */</comment>
        <expr_stmt><expr><name>mlimit</name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 168 */</comment>
        <expr_stmt><expr><name>among_var</name> <operator>=</operator> <call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_7</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* substring, line 168 */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>among_var</name><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>=</operator> <name>mlimit</name></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 168 */</comment>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>=</operator> <name>mlimit</name></expr>;</expr_stmt>
    </block_content>}</block>
    <switch>switch<condition>(<expr><name>among_var</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">0</literal></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_17</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 171 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
    </block_content>}</block></switch>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_verb_suffix</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>among_var</name></decl>;</decl_stmt>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>mlimit</name></decl>;</decl_stmt> <comment type="block">/* setlimit, line 176 */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>m1</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m1</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>&lt;</operator> <name><name>z</name><operator>-&gt;</operator><name>I</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>I</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <comment type="block">/* tomark, line 176 */</comment>
        <expr_stmt><expr><name>mlimit</name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 176 */</comment>
        <expr_stmt><expr><name>among_var</name> <operator>=</operator> <call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_8</name></expr></argument>, <argument><expr><literal type="number">96</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* substring, line 176 */</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>among_var</name><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>=</operator> <name>mlimit</name></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 176 */</comment>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>=</operator> <name>mlimit</name></expr>;</expr_stmt>
    </block_content>}</block>
    <switch>switch<condition>(<expr><name>among_var</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">0</literal></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_keep</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt><comment type="block">/* (void) m_keep;*/</comment> <comment type="block">/* try, line 179 */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_18</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab0</name>;</goto> </block_content>}</block></if></if_stmt>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 179 */</comment>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_19</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab0</name>;</goto> </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test</name></expr>;</expr_stmt>
                </block_content>}</block>
            <label><name>lab0</name>:</label>
                <empty_stmt>;</empty_stmt>
            </block_content>}</block>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 179 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 179 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
        <case>case <expr><literal type="number">2</literal></expr>:</case>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 200 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
    </block_content>}</block></switch>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>r_residual_suffix</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>among_var</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 205 */</comment>
    <expr_stmt><expr><name>among_var</name> <operator>=</operator> <call><name>find_among_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a_9</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* substring, line 205 */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>among_var</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 205 */</comment>
    <switch>switch<condition>(<expr><name>among_var</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">0</literal></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_RV</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call RV, line 208 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 208 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <break>break;</break>
        <case>case <expr><literal type="number">2</literal></expr>:</case>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_RV</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* call RV, line 210 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 210 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_keep</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt><comment type="block">/* (void) m_keep;*/</comment> <comment type="block">/* try, line 210 */</comment>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>ket</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* [, line 210 */</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_20</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab0</name>;</goto> </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>bra</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <comment type="block">/* ], line 210 */</comment>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m_test</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* test, line 210 */</comment>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>eq_s_b</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s_21</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab0</name>;</goto> </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_test</name></expr>;</expr_stmt>
                </block_content>}</block>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_RV</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m_keep</name></expr>;</expr_stmt> <goto>goto <name>lab0</name>;</goto> </block_content>}</block></if></if_stmt> <comment type="block">/* call RV, line 210 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
                <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>slice_del</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* delete, line 210 */</comment>
                    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
                </block_content>}</block>
            <label><name>lab0</name>:</label>
                <empty_stmt>;</empty_stmt>
            </block_content>}</block>
            <break>break;</break>
    </block_content>}</block></switch>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>int</name></type> <name>spanish_UTF_8_stem</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c1</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* do, line 216 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_mark_regions</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab0</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call mark_regions, line 216 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
    <label><name>lab0</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>lb</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name></expr>;</expr_stmt> <comment type="block">/* backwards, line 217 */</comment>

    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m2</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m2</name></expr>;</expr_stmt> <comment type="block">/* do, line 218 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_attached_pronoun</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab1</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call attached_pronoun, line 218 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
    <label><name>lab1</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m2</name></expr>;</expr_stmt>
    </block_content>}</block>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m3</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m3</name></expr>;</expr_stmt> <comment type="block">/* do, line 219 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m4</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m4</name></expr>;</expr_stmt> <comment type="block">/* or, line 219 */</comment>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_standard_suffix</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab4</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call standard_suffix, line 219 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <goto>goto <name>lab3</name>;</goto>
        <label><name>lab4</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m4</name></expr>;</expr_stmt>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_y_verb_suffix</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab5</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call y_verb_suffix, line 220 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
            <goto>goto <name>lab3</name>;</goto>
        <label><name>lab5</name>:</label>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m4</name></expr>;</expr_stmt>
            <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_verb_suffix</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab2</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call verb_suffix, line 221 */</comment>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block>
        </block_content>}</block>
    <label><name>lab3</name>:</label>
    <label><name>lab2</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m3</name></expr>;</expr_stmt>
    </block_content>}</block>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>m5</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>m5</name></expr>;</expr_stmt> <comment type="block">/* do, line 223 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_residual_suffix</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab6</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call residual_suffix, line 223 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
    <label><name>lab6</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>l</name></name> <operator>-</operator> <name>m5</name></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name><name>z</name><operator>-&gt;</operator><name>lb</name></name></expr>;</expr_stmt>
    <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>c6</name> <init>= <expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* do, line 225 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>r_postlude</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>lab7</name>;</goto></block_content></block></if></if_stmt> <comment type="block">/* call postlude, line 225 */</comment>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block>
    <label><name>lab7</name>:</label>
        <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c6</name></expr>;</expr_stmt>
    </block_content>}</block>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>extern</specifier> <name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>spanish_UTF_8_create_env</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>SN_create_env</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>extern</specifier> <name>void</name></type> <name>spanish_UTF_8_close_env</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SN_env</name></name> <modifier>*</modifier></type> <name>z</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>SN_close_env</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

</unit>
