<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/backend/lib/binaryheap.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * binaryheap.c
 *	  A simple binary heap implementation
 *
 * Portions Copyright (c) 2012-2018, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *	  src/backend/lib/binaryheap.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/binaryheap.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>sift_down</name><parameter_list>(<parameter><decl><type><name>binaryheap</name> <modifier>*</modifier></type><name>heap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>node_off</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>sift_up</name><parameter_list>(<parameter><decl><type><name>binaryheap</name> <modifier>*</modifier></type><name>heap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>node_off</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>swap_nodes</name><parameter_list>(<parameter><decl><type><name>binaryheap</name> <modifier>*</modifier></type><name>heap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * binaryheap_allocate
 *
 * Returns a pointer to a newly-allocated heap that has the capacity to
 * store the given number of nodes, with the heap property defined by
 * the given comparator function, which will be invoked with the additional
 * argument specified by 'arg'.
 */</comment>
<function><type><name>binaryheap</name> <modifier>*</modifier></type>
<name>binaryheap_allocate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>capacity</name></decl></parameter>, <parameter><decl><type><name>binaryheap_comparator</name></type> <name>compare</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>sz</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>binaryheap</name> <modifier>*</modifier></type><name>heap</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>binaryheap</name></expr></argument>, <argument><expr><name>bh_nodes</name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>capacity</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>heap</name> <operator>=</operator> <operator>(</operator><name>binaryheap</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>bh_space</name></name> <operator>=</operator> <name>capacity</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>bh_compare</name></name> <operator>=</operator> <name>compare</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>bh_arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>bh_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>bh_has_heap_property</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<return>return <expr><name>heap</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * binaryheap_reset
 *
 * Resets the heap to an empty state, losing its data content but not the
 * parameters passed at allocation.
 */</comment>
<function><type><name>void</name></type>
<name>binaryheap_reset</name><parameter_list>(<parameter><decl><type><name>binaryheap</name> <modifier>*</modifier></type><name>heap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>bh_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>bh_has_heap_property</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * binaryheap_free
 *
 * Releases memory used by the given binaryheap.
 */</comment>
<function><type><name>void</name></type>
<name>binaryheap_free</name><parameter_list>(<parameter><decl><type><name>binaryheap</name> <modifier>*</modifier></type><name>heap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>heap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * These utility functions return the offset of the left child, right
 * child, and parent of the node at the given index, respectively.
 *
 * The heap is represented as an array of nodes, with the root node
 * stored at index 0. The left child of node i is at index 2*i+1, and
 * the right child at 2*i+2. The parent of node i is at index (i-1)/2.
 */</comment>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>left_offset</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>right_offset</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>parent_offset</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * binaryheap_add_unordered
 *
 * Adds the given datum to the end of the heap's list of nodes in O(1) without
 * preserving the heap property. This is a convenience to add elements quickly
 * to a new heap. To obtain a valid heap, one must call binaryheap_build()
 * afterwards.
 */</comment>
<function><type><name>void</name></type>
<name>binaryheap_add_unordered</name><parameter_list>(<parameter><decl><type><name>binaryheap</name> <modifier>*</modifier></type><name>heap</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>heap</name><operator>-&gt;</operator><name>bh_size</name></name> <operator>&gt;=</operator> <name><name>heap</name><operator>-&gt;</operator><name>bh_space</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"out of binary heap slots"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>bh_has_heap_property</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>bh_nodes</name><index>[<expr><name><name>heap</name><operator>-&gt;</operator><name>bh_size</name></name></expr>]</index></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>bh_size</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * binaryheap_build
 *
 * Assembles a valid heap in O(n) from the nodes added by
 * binaryheap_add_unordered(). Not needed otherwise.
 */</comment>
<function><type><name>void</name></type>
<name>binaryheap_build</name><parameter_list>(<parameter><decl><type><name>binaryheap</name> <modifier>*</modifier></type><name>heap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <call><name>parent_offset</name><argument_list>(<argument><expr><name><name>heap</name><operator>-&gt;</operator><name>bh_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>sift_down</name><argument_list>(<argument><expr><name>heap</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>bh_has_heap_property</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * binaryheap_add
 *
 * Adds the given datum to the heap in O(log n) time, while preserving
 * the heap property.
 */</comment>
<function><type><name>void</name></type>
<name>binaryheap_add</name><parameter_list>(<parameter><decl><type><name>binaryheap</name> <modifier>*</modifier></type><name>heap</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>heap</name><operator>-&gt;</operator><name>bh_size</name></name> <operator>&gt;=</operator> <name><name>heap</name><operator>-&gt;</operator><name>bh_space</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"out of binary heap slots"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>bh_nodes</name><index>[<expr><name><name>heap</name><operator>-&gt;</operator><name>bh_size</name></name></expr>]</index></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>bh_size</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sift_up</name><argument_list>(<argument><expr><name>heap</name></expr></argument>, <argument><expr><name><name>heap</name><operator>-&gt;</operator><name>bh_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * binaryheap_first
 *
 * Returns a pointer to the first (root, topmost) node in the heap
 * without modifying the heap. The caller must ensure that this
 * routine is not used on an empty heap. Always O(1).
 */</comment>
<function><type><name>Datum</name></type>
<name>binaryheap_first</name><parameter_list>(<parameter><decl><type><name>binaryheap</name> <modifier>*</modifier></type><name>heap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>binaryheap_empty</name><argument_list>(<argument><expr><name>heap</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>heap</name><operator>-&gt;</operator><name>bh_has_heap_property</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>heap</name><operator>-&gt;</operator><name>bh_nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * binaryheap_remove_first
 *
 * Removes the first (root, topmost) node in the heap and returns a
 * pointer to it after rebalancing the heap. The caller must ensure
 * that this routine is not used on an empty heap. O(log n) worst
 * case.
 */</comment>
<function><type><name>Datum</name></type>
<name>binaryheap_remove_first</name><parameter_list>(<parameter><decl><type><name>binaryheap</name> <modifier>*</modifier></type><name>heap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>binaryheap_empty</name><argument_list>(<argument><expr><name>heap</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>heap</name><operator>-&gt;</operator><name>bh_has_heap_property</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>heap</name><operator>-&gt;</operator><name>bh_size</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>bh_size</name></name><operator>--</operator></expr>;</expr_stmt>
		<return>return <expr><name><name>heap</name><operator>-&gt;</operator><name>bh_nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Swap the root and last nodes, decrease the size of the heap (i.e.
	 * remove the former root node) and sift the new root node down to its
	 * correct position.
	 */</comment>
	<expr_stmt><expr><call><name>swap_nodes</name><argument_list>(<argument><expr><name>heap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>heap</name><operator>-&gt;</operator><name>bh_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>bh_size</name></name><operator>--</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sift_down</name><argument_list>(<argument><expr><name>heap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name><name>heap</name><operator>-&gt;</operator><name>bh_nodes</name><index>[<expr><name><name>heap</name><operator>-&gt;</operator><name>bh_size</name></name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * binaryheap_replace_first
 *
 * Replace the topmost element of a non-empty heap, preserving the heap
 * property.  O(1) in the best case, or O(log n) if it must fall back to
 * sifting the new node down.
 */</comment>
<function><type><name>void</name></type>
<name>binaryheap_replace_first</name><parameter_list>(<parameter><decl><type><name>binaryheap</name> <modifier>*</modifier></type><name>heap</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>binaryheap_empty</name><argument_list>(<argument><expr><name>heap</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>heap</name><operator>-&gt;</operator><name>bh_has_heap_property</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>bh_nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>heap</name><operator>-&gt;</operator><name>bh_size</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>sift_down</name><argument_list>(<argument><expr><name>heap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Swap the contents of two nodes.
 */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>swap_nodes</name><parameter_list>(<parameter><decl><type><name>binaryheap</name> <modifier>*</modifier></type><name>heap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>swap</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>swap</name> <operator>=</operator> <name><name>heap</name><operator>-&gt;</operator><name>bh_nodes</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>bh_nodes</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <name><name>heap</name><operator>-&gt;</operator><name>bh_nodes</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>heap</name><operator>-&gt;</operator><name>bh_nodes</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name>swap</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Sift a node up to the highest position it can hold according to the
 * comparator.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>sift_up</name><parameter_list>(<parameter><decl><type><name>binaryheap</name> <modifier>*</modifier></type><name>heap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>node_off</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<while>while <condition>(<expr><name>node_off</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>cmp</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>parent_off</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * If this node is smaller than its parent, the heap condition is
		 * satisfied, and we're done.
		 */</comment>
		<expr_stmt><expr><name>parent_off</name> <operator>=</operator> <call><name>parent_offset</name><argument_list>(<argument><expr><name>node_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name><name>heap</name><operator>-&gt;</operator><name>bh_compare</name></name><argument_list>(<argument><expr><name><name>heap</name><operator>-&gt;</operator><name>bh_nodes</name><index>[<expr><name>node_off</name></expr>]</index></name></expr></argument>,
							   <argument><expr><name><name>heap</name><operator>-&gt;</operator><name>bh_nodes</name><index>[<expr><name>parent_off</name></expr>]</index></name></expr></argument>,
							   <argument><expr><name><name>heap</name><operator>-&gt;</operator><name>bh_arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * Otherwise, swap the node and its parent and go on to check the
		 * node's new parent.
		 */</comment>
		<expr_stmt><expr><call><name>swap_nodes</name><argument_list>(<argument><expr><name>heap</name></expr></argument>, <argument><expr><name>node_off</name></expr></argument>, <argument><expr><name>parent_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>node_off</name> <operator>=</operator> <name>parent_off</name></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/*
 * Sift a node down from its current position to satisfy the heap
 * property.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>sift_down</name><parameter_list>(<parameter><decl><type><name>binaryheap</name> <modifier>*</modifier></type><name>heap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>node_off</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<while>while <condition>(<expr><name>true</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>left_off</name> <init>= <expr><call><name>left_offset</name><argument_list>(<argument><expr><name>node_off</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>right_off</name> <init>= <expr><call><name>right_offset</name><argument_list>(<argument><expr><name>node_off</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>swap_off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

		<comment type="block">/* Is the left child larger than the parent? */</comment>
		<if_stmt><if>if <condition>(<expr><name>left_off</name> <operator>&lt;</operator> <name><name>heap</name><operator>-&gt;</operator><name>bh_size</name></name> <operator>&amp;&amp;</operator>
			<call><name><name>heap</name><operator>-&gt;</operator><name>bh_compare</name></name><argument_list>(<argument><expr><name><name>heap</name><operator>-&gt;</operator><name>bh_nodes</name><index>[<expr><name>node_off</name></expr>]</index></name></expr></argument>,
							 <argument><expr><name><name>heap</name><operator>-&gt;</operator><name>bh_nodes</name><index>[<expr><name>left_off</name></expr>]</index></name></expr></argument>,
							 <argument><expr><name><name>heap</name><operator>-&gt;</operator><name>bh_arg</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>swap_off</name> <operator>=</operator> <name>left_off</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* Is the right child larger than the parent? */</comment>
		<if_stmt><if>if <condition>(<expr><name>right_off</name> <operator>&lt;</operator> <name><name>heap</name><operator>-&gt;</operator><name>bh_size</name></name> <operator>&amp;&amp;</operator>
			<call><name><name>heap</name><operator>-&gt;</operator><name>bh_compare</name></name><argument_list>(<argument><expr><name><name>heap</name><operator>-&gt;</operator><name>bh_nodes</name><index>[<expr><name>node_off</name></expr>]</index></name></expr></argument>,
							 <argument><expr><name><name>heap</name><operator>-&gt;</operator><name>bh_nodes</name><index>[<expr><name>right_off</name></expr>]</index></name></expr></argument>,
							 <argument><expr><name><name>heap</name><operator>-&gt;</operator><name>bh_arg</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* swap with the larger child */</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>swap_off</name> <operator>||</operator>
				<call><name><name>heap</name><operator>-&gt;</operator><name>bh_compare</name></name><argument_list>(<argument><expr><name><name>heap</name><operator>-&gt;</operator><name>bh_nodes</name><index>[<expr><name>left_off</name></expr>]</index></name></expr></argument>,
								 <argument><expr><name><name>heap</name><operator>-&gt;</operator><name>bh_nodes</name><index>[<expr><name>right_off</name></expr>]</index></name></expr></argument>,
								 <argument><expr><name><name>heap</name><operator>-&gt;</operator><name>bh_arg</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>swap_off</name> <operator>=</operator> <name>right_off</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * If we didn't find anything to swap, the heap condition is
		 * satisfied, and we're done.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>swap_off</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * Otherwise, swap the node with the child that violates the heap
		 * property; then go on to check its children.
		 */</comment>
		<expr_stmt><expr><call><name>swap_nodes</name><argument_list>(<argument><expr><name>heap</name></expr></argument>, <argument><expr><name>swap_off</name></expr></argument>, <argument><expr><name>node_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>node_off</name> <operator>=</operator> <name>swap_off</name></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>
</unit>
