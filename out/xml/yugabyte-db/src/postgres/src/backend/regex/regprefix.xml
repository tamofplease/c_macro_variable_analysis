<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/backend/regex/regprefix.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * regprefix.c
 *	  Extract a common prefix, if any, from a compiled regex.
 *
 *
 * Portions Copyright (c) 2012-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1998, 1999 Henry Spencer
 *
 * IDENTIFICATION
 *	  src/backend/regex/regprefix.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regex/regguts.h"</cpp:file></cpp:include>


<comment type="block">/*
 * forward declarations
 */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>findprefix</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cnfa</name></name> <modifier>*</modifier></type><name>cnfa</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>colormap</name></name> <modifier>*</modifier></type><name>cm</name></decl></parameter>,
		   <parameter><decl><type><name>chr</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>slength</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * pg_regprefix - get common prefix for regular expression
 *
 * Returns one of:
 *	REG_NOMATCH: there is no common prefix of strings matching the regex
 *	REG_PREFIX: there is a common prefix of strings matching the regex
 *	REG_EXACT: all strings satisfying the regex must match the same string
 *	or a REG_XXX error code
 *
 * In the non-failure cases, *string is set to a malloc'd string containing
 * the common prefix or exact value, of length *slength (measured in chrs
 * not bytes!).
 *
 * This function does not analyze all complex cases (such as lookaround
 * constraints) exactly.  Therefore it is possible that some strings matching
 * the reported prefix or exact-match string do not satisfy the regex.  But
 * it should never be the case that a string satisfying the regex does not
 * match the reported prefix or exact-match string.
 */</comment>
<function><type><name>int</name></type>
<name>pg_regprefix</name><parameter_list>(<parameter><decl><type><name>regex_t</name> <modifier>*</modifier></type><name>re</name></decl></parameter>,
			 <parameter><decl><type><name>chr</name> <modifier>*</modifier><modifier>*</modifier></type><name>string</name></decl></parameter>,
			 <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>slength</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>guts</name></name> <modifier>*</modifier></type><name>g</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>cnfa</name></name> <modifier>*</modifier></type><name>cnfa</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>st</name></decl>;</decl_stmt>

	<comment type="block">/* sanity checks */</comment>
	<if_stmt><if>if <condition>(<expr><name>string</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>slength</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>REG_INVARG</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>string</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>				<comment type="block">/* initialize for failure cases */</comment>
	<expr_stmt><expr><operator>*</operator><name>slength</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>re</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>re</name><operator>-&gt;</operator><name>re_magic</name></name> <operator>!=</operator> <name>REMAGIC</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>REG_INVARG</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>re</name><operator>-&gt;</operator><name>re_csize</name></name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>chr</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>REG_MIXED</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Initialize locale-dependent support */</comment>
	<expr_stmt><expr><call><name>pg_set_regex_collation</name><argument_list>(<argument><expr><name><name>re</name><operator>-&gt;</operator><name>re_collation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* setup */</comment>
	<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator>struct <name>guts</name> <operator>*</operator><operator>)</operator> <name><name>re</name><operator>-&gt;</operator><name>re_guts</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>g</name><operator>-&gt;</operator><name>info</name></name> <operator>&amp;</operator> <name>REG_UIMPOSSIBLE</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>REG_NOMATCH</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * This implementation considers only the search NFA for the topmost regex
	 * tree node.  Therefore, constraints such as backrefs are not fully
	 * applied, which is allowed per the function's API spec.
	 */</comment>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>g</name><operator>-&gt;</operator><name>tree</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cnfa</name> <operator>=</operator> <operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>tree</name><operator>-&gt;</operator><name>cnfa</name></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Since a correct NFA should never contain any exit-free loops, it should
	 * not be possible for our traversal to return to a previously visited NFA
	 * state.  Hence we need at most nstates chrs in the output string.
	 */</comment>
	<expr_stmt><expr><operator>*</operator><name>string</name> <operator>=</operator> <operator>(</operator><name>chr</name> <operator>*</operator><operator>)</operator> <call><name>MALLOC</name><argument_list>(<argument><expr><name><name>cnfa</name><operator>-&gt;</operator><name>nstates</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>chr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>string</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>REG_ESPACE</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* do it */</comment>
	<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>findprefix</name><argument_list>(<argument><expr><name>cnfa</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>g</name><operator>-&gt;</operator><name>cmap</name></name></expr></argument>, <argument><expr><operator>*</operator><name>string</name></expr></argument>, <argument><expr><name>slength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><name>slength</name> <operator>&lt;=</operator> <name><name>cnfa</name><operator>-&gt;</operator><name>nstates</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* clean up */</comment>
	<if_stmt><if>if <condition>(<expr><name>st</name> <operator>!=</operator> <name>REG_PREFIX</name> <operator>&amp;&amp;</operator> <name>st</name> <operator>!=</operator> <name>REG_EXACT</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>FREE</name><argument_list>(<argument><expr><operator>*</operator><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>string</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>slength</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>st</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * findprefix - extract common prefix from cNFA
 *
 * Results are returned into the preallocated chr array string[], with
 * *slength (which must be preset to zero) incremented for each chr.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>						<comment type="block">/* regprefix return code */</comment>
<name>findprefix</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>cnfa</name></name> <modifier>*</modifier></type><name>cnfa</name></decl></parameter>,
		   <parameter><decl><type><name><name>struct</name> <name>colormap</name></name> <modifier>*</modifier></type><name>cm</name></decl></parameter>,
		   <parameter><decl><type><name>chr</name> <modifier>*</modifier></type><name>string</name></decl></parameter>,
		   <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>slength</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>st</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nextst</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>color</name></type>		<name>thiscolor</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>chr</name></type>			<name>c</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>carc</name></name> <modifier>*</modifier></type><name>ca</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * The "pre" state must have only BOS/BOL outarcs, else pattern isn't
	 * anchored left.  If we have both BOS and BOL, they must go to the same
	 * next state.
	 */</comment>
	<expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>cnfa</name><operator>-&gt;</operator><name>pre</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>nextst</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>ca</name> <operator>=</operator> <name><name>cnfa</name><operator>-&gt;</operator><name>states</name><index>[<expr><name>st</name></expr>]</index></name></expr>;</init> <condition><expr><name><name>ca</name><operator>-&gt;</operator><name>co</name></name> <operator>!=</operator> <name>COLORLESS</name></expr>;</condition> <incr><expr><name>ca</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>ca</name><operator>-&gt;</operator><name>co</name></name> <operator>==</operator> <name><name>cnfa</name><operator>-&gt;</operator><name>bos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name><name>ca</name><operator>-&gt;</operator><name>co</name></name> <operator>==</operator> <name><name>cnfa</name><operator>-&gt;</operator><name>bos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>nextst</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>nextst</name> <operator>=</operator> <name><name>ca</name><operator>-&gt;</operator><name>to</name></name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name>nextst</name> <operator>!=</operator> <name><name>ca</name><operator>-&gt;</operator><name>to</name></name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>REG_NOMATCH</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<return>return <expr><name>REG_NOMATCH</name></expr>;</return></block_content></block></else></if_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><name>nextst</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>REG_NOMATCH</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Scan through successive states, stopping as soon as we find one with
	 * more than one acceptable transition character (either multiple colors
	 * on out-arcs, or a color with more than one member chr).
	 *
	 * We could find a state with multiple out-arcs that are all labeled with
	 * the same singleton color; this comes from patterns like "^ab(cde|cxy)".
	 * In that case we add the chr "c" to the output string but then exit the
	 * loop with nextst == -1.  This leaves a little bit on the table: if the
	 * pattern is like "^ab(cde|cdy)", we won't notice that "d" could be added
	 * to the prefix.  But chasing multiple parallel state chains doesn't seem
	 * worth the trouble.
	 */</comment>
	<do>do
	<block>{<block_content>
		<expr_stmt><expr><name>st</name> <operator>=</operator> <name>nextst</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>nextst</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>thiscolor</name> <operator>=</operator> <name>COLORLESS</name></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>ca</name> <operator>=</operator> <name><name>cnfa</name><operator>-&gt;</operator><name>states</name><index>[<expr><name>st</name></expr>]</index></name></expr>;</init> <condition><expr><name><name>ca</name><operator>-&gt;</operator><name>co</name></name> <operator>!=</operator> <name>COLORLESS</name></expr>;</condition> <incr><expr><name>ca</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<comment type="block">/* We can ignore BOS/BOL arcs */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>ca</name><operator>-&gt;</operator><name>co</name></name> <operator>==</operator> <name><name>cnfa</name><operator>-&gt;</operator><name>bos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name><name>ca</name><operator>-&gt;</operator><name>co</name></name> <operator>==</operator> <name><name>cnfa</name><operator>-&gt;</operator><name>bos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>
			<comment type="block">/* ... but EOS/EOL arcs terminate the search, as do LACONs */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>ca</name><operator>-&gt;</operator><name>co</name></name> <operator>==</operator> <name><name>cnfa</name><operator>-&gt;</operator><name>eos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name><name>ca</name><operator>-&gt;</operator><name>co</name></name> <operator>==</operator> <name><name>cnfa</name><operator>-&gt;</operator><name>eos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>||</operator>
				<name><name>ca</name><operator>-&gt;</operator><name>co</name></name> <operator>&gt;=</operator> <name><name>cnfa</name><operator>-&gt;</operator><name>ncolors</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>thiscolor</name> <operator>=</operator> <name>COLORLESS</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>thiscolor</name> <operator>==</operator> <name>COLORLESS</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* First plain outarc */</comment>
				<expr_stmt><expr><name>thiscolor</name> <operator>=</operator> <name><name>ca</name><operator>-&gt;</operator><name>co</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>nextst</name> <operator>=</operator> <name><name>ca</name><operator>-&gt;</operator><name>to</name></name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>thiscolor</name> <operator>==</operator> <name><name>ca</name><operator>-&gt;</operator><name>co</name></name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* Another plain outarc for same color */</comment>
				<expr_stmt><expr><name>nextst</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/* More than one plain outarc color terminates the search */</comment>
				<expr_stmt><expr><name>thiscolor</name> <operator>=</operator> <name>COLORLESS</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></for>
		<comment type="block">/* Done if we didn't find exactly one color on plain outarcs */</comment>
		<if_stmt><if>if <condition>(<expr><name>thiscolor</name> <operator>==</operator> <name>COLORLESS</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<comment type="block">/* The color must be a singleton */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>cm</name><operator>-&gt;</operator><name>cd</name><index>[<expr><name>thiscolor</name></expr>]</index></name><operator>.</operator><name>nschrs</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<comment type="block">/* Must not have any high-color-map entries */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>cm</name><operator>-&gt;</operator><name>cd</name><index>[<expr><name>thiscolor</name></expr>]</index></name><operator>.</operator><name>nuchrs</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * Identify the color's sole member chr and add it to the prefix
		 * string.  In general the colormap data structure doesn't provide a
		 * way to find color member chrs, except by trying GETCOLOR() on each
		 * possible chr value, which won't do at all.  However, for the cases
		 * we care about it should be sufficient to test the "firstchr" value,
		 * that is the first chr ever added to the color.  There are cases
		 * where this might no longer be a member of the color (so we do need
		 * to test), but none of them are likely to arise for a character that
		 * is a member of a common prefix.  If we do hit such a corner case,
		 * we just fall out without adding anything to the prefix string.
		 */</comment>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>cm</name><operator>-&gt;</operator><name>cd</name><index>[<expr><name>thiscolor</name></expr>]</index></name><operator>.</operator><name>firstchr</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>GETCOLOR</name><argument_list>(<argument><expr><name>cm</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>thiscolor</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>string</name><index>[<expr><operator>(</operator><operator>*</operator><name>slength</name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

		<comment type="block">/* Advance to next state, but only if we have a unique next state */</comment>
	</block_content>}</block> while <condition>(<expr><name>nextst</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>;</do>

	<comment type="block">/*
	 * If we ended at a state that only has EOS/EOL outarcs leading to the
	 * "post" state, then we have an exact-match string.  Note this is true
	 * even if the string is of zero length.
	 */</comment>
	<expr_stmt><expr><name>nextst</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>ca</name> <operator>=</operator> <name><name>cnfa</name><operator>-&gt;</operator><name>states</name><index>[<expr><name>st</name></expr>]</index></name></expr>;</init> <condition><expr><name><name>ca</name><operator>-&gt;</operator><name>co</name></name> <operator>!=</operator> <name>COLORLESS</name></expr>;</condition> <incr><expr><name>ca</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>ca</name><operator>-&gt;</operator><name>co</name></name> <operator>==</operator> <name><name>cnfa</name><operator>-&gt;</operator><name>eos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <name><name>ca</name><operator>-&gt;</operator><name>co</name></name> <operator>==</operator> <name><name>cnfa</name><operator>-&gt;</operator><name>eos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>nextst</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>nextst</name> <operator>=</operator> <name><name>ca</name><operator>-&gt;</operator><name>to</name></name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name>nextst</name> <operator>!=</operator> <name><name>ca</name><operator>-&gt;</operator><name>to</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>nextst</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>nextst</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><name>nextst</name> <operator>==</operator> <name><name>cnfa</name><operator>-&gt;</operator><name>post</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>REG_EXACT</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Otherwise, if we were unable to identify any prefix characters, say
	 * NOMATCH --- the pattern is anchored left, but doesn't specify any
	 * particular first character.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>slength</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>REG_PREFIX</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>REG_NOMATCH</name></expr>;</return>
</block_content>}</block></function>
</unit>
