<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/backend/regex/regerror.c"><comment type="block">/*
 * regerror - error-code expansion
 *
 * Copyright (c) 1998, 1999 Henry Spencer.  All rights reserved.
 *
 * Development of this software was funded, in part, by Cray Research Inc.,
 * UUNET Communications Services Inc., Sun Microsystems Inc., and Scriptics
 * Corporation, none of whom are responsible for the results.  The author
 * thanks all of them.
 *
 * Redistribution and use in source and binary forms -- with or without
 * modification -- are permitted for any purpose, provided that
 * redistributions in source form retain this entire copyright notice and
 * indicate the origin and nature of any modifications.
 *
 * I'd appreciate being given credit for this package in the documentation
 * of software which uses it, but that is not a requirement.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
 * HENRY SPENCER BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * src/backend/regex/regerror.c
 *
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regex/regguts.h"</cpp:file></cpp:include>

<comment type="block">/* unknown-error explanation */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>unk</name><index>[]</index></name> <init>= <expr><literal type="string">"*** unknown regex error code 0x%x ***"</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* struct to map among codes, code names, and explanations */</comment>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>rerr</name>
<block>{
	<decl_stmt><decl><type><name>int</name></type>			<name>code</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>explain</name></decl>;</decl_stmt>
}</block>			<decl><name><name>rerrs</name><index>[]</index></name> <init>=

<expr><block>{
	<comment type="block">/* the actual table is built from regex.h */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regex/regerrs.h"</cpp:file></cpp:include>		<comment type="block">/* pgrminclude ignore */</comment>
	<expr><block>{
		<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"oops"</literal></expr>
	}</block></expr>,							<comment type="block">/* explanation special-cased in code */</comment>
}</block></expr></init></decl>;</struct>

<comment type="block">/*
 * pg_regerror - the interface to error numbers
 */</comment>
<comment type="block">/* ARGSUSED */</comment>
<function><type><name>size_t</name></type>							<comment type="block">/* actual space needed (including NUL) */</comment>
<name>pg_regerror</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>errcode</name></decl></parameter>,		<comment type="block">/* error code, or REG_ATOI or REG_ITOA */</comment>
			<parameter><decl><type><specifier>const</specifier> <name>regex_t</name> <modifier>*</modifier></type><name>preg</name></decl></parameter>,	<comment type="block">/* associated regex_t (unused at present) */</comment>
			<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>,		<comment type="block">/* result buffer (unless errbuf_size==0) */</comment>
			<parameter><decl><type><name>size_t</name></type> <name>errbuf_size</name></decl></parameter>)</parameter_list> <comment type="block">/* available space in errbuf, can be 0 */</comment>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rerr</name></name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>convbuf</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>unk</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>	<comment type="block">/* 50 = plenty for int */</comment>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>icode</name></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>errcode</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>REG_ATOI</name></expr>:</case>			<comment type="block">/* convert name to number */</comment>
			<for>for <control>(<init><expr><name>r</name> <operator>=</operator> <name>rerrs</name></expr>;</init> <condition><expr><name><name>r</name><operator>-&gt;</operator><name>code</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
			<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>convbuf</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* -1 for unknown */</comment>
			<expr_stmt><expr><name>msg</name> <operator>=</operator> <name>convbuf</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>REG_ITOA</name></expr>:</case>			<comment type="block">/* convert number to name */</comment>
			<expr_stmt><expr><name>icode</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* not our problem if this fails */</comment>
			<for>for <control>(<init><expr><name>r</name> <operator>=</operator> <name>rerrs</name></expr>;</init> <condition><expr><name><name>r</name><operator>-&gt;</operator><name>code</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>code</name></name> <operator>==</operator> <name>icode</name></expr>)</condition><block type="pseudo"><block_content>
					<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
			<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>code</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>msg</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt></block_content></block></if>
			<else>else
			<block>{<block_content>					<comment type="block">/* unknown; tell him the number */</comment>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>convbuf</name></expr></argument>, <argument><expr><literal type="string">"REG_%u"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name>icode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>msg</name> <operator>=</operator> <name>convbuf</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
		<default>default:</default>				<comment type="block">/* a real, normal error code */</comment>
			<for>for <control>(<init><expr><name>r</name> <operator>=</operator> <name>rerrs</name></expr>;</init> <condition><expr><name><name>r</name><operator>-&gt;</operator><name>code</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>code</name></name> <operator>==</operator> <name>errcode</name></expr>)</condition><block type="pseudo"><block_content>
					<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
			<if_stmt><if>if <condition>(<expr><name><name>r</name><operator>-&gt;</operator><name>code</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>msg</name> <operator>=</operator> <name><name>r</name><operator>-&gt;</operator><name>explain</name></name></expr>;</expr_stmt></block_content></block></if>
			<else>else
			<block>{<block_content>					<comment type="block">/* unknown; say so */</comment>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>convbuf</name></expr></argument>, <argument><expr><name>unk</name></expr></argument>, <argument><expr><name>errcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>msg</name> <operator>=</operator> <name>convbuf</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>		<comment type="block">/* space needed, including NUL */</comment>
	<if_stmt><if>if <condition>(<expr><name>errbuf_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>errbuf_size</name> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>						<comment type="block">/* truncate to fit */</comment>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>errbuf_size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>errbuf</name><index>[<expr><name>errbuf_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>
</unit>
