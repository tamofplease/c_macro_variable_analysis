<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/backend/bootstrap/ybcbootstrap.c"><comment type="block">/*--------------------------------------------------------------------------------------------------
 *
 * ybcbootstrap.c
 *        YB commands for creating and altering table structures and settings
 *
 * Copyright (c) YugaByte, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.  See the License for the specific language governing permissions and limitations
 * under the License.
 *
 * IDENTIFICATION
 *        src/backend/commands/ybcbootstrap.c
 *
 *------------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_attribute.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/sysattr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_class.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/dbcommands.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_database.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/ybccmds.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/yb_type.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/catalog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/relcache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/tuptable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/ybcExpr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"yb/yql/pggate/ybc_pggate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_yb_utils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parser.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>YBCAddSysCatalogColumn</name><parameter_list>(<parameter><decl><type><name>YBCPgStatement</name></type> <name>yb_stmt</name></decl></parameter>,
								   <parameter><decl><type><name>IndexStmt</name> <modifier>*</modifier></type><name>pkey_idx</name></decl></parameter>,
								   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>attname</name></decl></parameter>,
								   <parameter><decl><type><name>int</name></type> <name>attnum</name></decl></parameter>,
								   <parameter><decl><type><name>Oid</name></type> <name>type_id</name></decl></parameter>,
								   <parameter><decl><type><name>int32</name></type> <name>typmod</name></decl></parameter>,
								   <parameter><decl><type><name>bool</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<decl_stmt><decl><type><name>ListCell</name>      <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>          <name>is_key</name>    <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>YBCPgTypeEntity</name> <modifier>*</modifier></type><name>col_type</name>  <init>= <expr><call><name>YbDataTypeFromOidMod</name><argument_list>(<argument><expr><name>attnum</name></expr></argument>, <argument><expr><name>type_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>pkey_idx</name></expr>)</condition>
	<block>{<block_content>
		<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>pkey_idx-&gt;indexParams</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>IndexElem</name> <modifier>*</modifier></type><name>elem</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>elem</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>attname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>is_key</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* We will call this twice, first for key columns, then for regular
	 * columns to handle any re-ordering.
	 * So only adding the if matching the is_key property.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>is_key</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>HandleYBStatus</name><argument_list>(<argument><expr><call><name>YBCPgCreateTableAddColumn</name><argument_list>(<argument><expr><name>yb_stmt</name></expr></argument>,
																						 <argument><expr><name>attname</name></expr></argument>,
																						 <argument><expr><name>attnum</name></expr></argument>,
																						 <argument><expr><name>col_type</name></expr></argument>,
																						 <argument><expr><name>false</name></expr></argument> <comment type="block">/* is_hash */</comment>,
																						 <argument><expr><name>is_key</name></expr></argument>,
																						 <argument><expr><name>false</name></expr></argument> <comment type="block">/* is_desc */</comment>,
																						 <argument><expr><name>false</name></expr></argument> <comment type="block">/* is_nulls_first */</comment>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>YBCAddSysCatalogColumns</name><parameter_list>(<parameter><decl><type><name>YBCPgStatement</name></type> <name>yb_stmt</name></decl></parameter>,
									<parameter><decl><type><name>TupleDesc</name></type> <name>tupdesc</name></decl></parameter>,
									<parameter><decl><type><name>IndexStmt</name> <modifier>*</modifier></type><name>pkey_idx</name></decl></parameter>,
									<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>tupdesc</name><operator>-&gt;</operator><name>tdhasoid</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Add the OID column if the table was declared with OIDs. */</comment>
		<expr_stmt><expr><call><name>YBCAddSysCatalogColumn</name><argument_list>(<argument><expr><name>yb_stmt</name></expr></argument>,
							   <argument><expr><name>pkey_idx</name></expr></argument>,
							   <argument><expr><literal type="string">"oid"</literal></expr></argument>,
							   <argument><expr><name>ObjectIdAttributeNumber</name></expr></argument>,
							   <argument><expr><name>OIDOID</name></expr></argument>,
							   <argument><expr><literal type="number">0</literal></expr></argument>,
							   <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Add the rest of the columns. */</comment>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>attno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>attno</name> <operator>&lt;</operator> <name><name>tupdesc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</condition> <incr><expr><name>attno</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>attr</name> <init>= <expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>YBCAddSysCatalogColumn</name><argument_list>(<argument><expr><name>yb_stmt</name></expr></argument>,
							   <argument><expr><name>pkey_idx</name></expr></argument>,
							   <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>attname</name><operator>.</operator><name>data</name></name></expr></argument>,
							   <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>attnum</name></name></expr></argument>,
							   <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>atttypid</name></name></expr></argument>,
							   <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>atttypmod</name></name></expr></argument>,
							   <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>YBCCreateSysCatalogTable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>table_name</name></decl></parameter>,
                              <parameter><decl><type><name>Oid</name></type> <name>table_oid</name></decl></parameter>,
                              <parameter><decl><type><name>TupleDesc</name></type> <name>tupdesc</name></decl></parameter>,
                              <parameter><decl><type><name>bool</name></type> <name>is_shared_relation</name></decl></parameter>,
                              <parameter><decl><type><name>IndexStmt</name> <modifier>*</modifier></type><name>pkey_idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Database and schema are fixed when running inidb. */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>IsBootstrapProcessingMode</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>char</name>           <modifier>*</modifier></type><name>db_name</name>     <init>= <expr><literal type="string">"template1"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>           <modifier>*</modifier></type><name>schema_name</name> <init>= <expr><literal type="string">"pg_catalog"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>YBCPgStatement</name></type> <name>yb_stmt</name>      <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>HandleYBStatus</name><argument_list>(<argument><expr><call><name>YBCPgNewCreateTable</name><argument_list>(<argument><expr><name>db_name</name></expr></argument>,
	                                   <argument><expr><name>schema_name</name></expr></argument>,
	                                   <argument><expr><name>table_name</name></expr></argument>,
	                                   <argument><expr><name>TemplateDbOid</name></expr></argument>,
	                                   <argument><expr><name>table_oid</name></expr></argument>,
	                                   <argument><expr><name>is_shared_relation</name></expr></argument>,
	                                   <argument><expr><name>false</name></expr></argument>, <comment type="block">/* if_not_exists */</comment>
	                                   <argument><expr><name>pkey_idx</name> <operator>==</operator> <name>NULL</name></expr></argument>, <comment type="block">/* add_primary_key */</comment>
	                                   <argument><expr><name>true</name></expr></argument>, <comment type="block">/* is_colocated_via_database */</comment>
	                                   <argument><expr><name>InvalidOid</name></expr></argument> <comment type="block">/* tablegroup_oid */</comment>,
	                                   <argument><expr><name>InvalidOid</name></expr></argument> <comment type="block">/* colocation_id */</comment>,
	                                   <argument><expr><name>InvalidOid</name></expr></argument> <comment type="block">/* tablespace_oid */</comment>,
	                                   <argument><expr><name>false</name></expr></argument> <comment type="block">/* is_matview */</comment>,
	                                   <argument><expr><name>InvalidOid</name></expr></argument> <comment type="block">/* matviewPgTableId */</comment>,
	                                   <argument><expr><operator>&amp;</operator><name>yb_stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Add all key columns first, then the regular columns */</comment>
	<if_stmt><if>if <condition>(<expr><name>pkey_idx</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>YBCAddSysCatalogColumns</name><argument_list>(<argument><expr><name>yb_stmt</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>pkey_idx</name></expr></argument>, <comment type="block">/* key */</comment> <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>YBCAddSysCatalogColumns</name><argument_list>(<argument><expr><name>yb_stmt</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>pkey_idx</name></expr></argument>, <comment type="block">/* key */</comment> <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>HandleYBStatus</name><argument_list>(<argument><expr><call><name>YBCPgExecCreateTable</name><argument_list>(<argument><expr><name>yb_stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
