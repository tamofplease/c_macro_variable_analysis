<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/backend/utils/mb/conversion_procs/euc2004_sjis2004/euc2004_sjis2004.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 *	  EUC_JIS_2004, SHIFT_JIS_2004
 *
 * Copyright (c) 2007-2018, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *	  src/backend/utils/mb/conversion_procs/euc2004_sjis2004/euc2004_sjis2004.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mb/pg_wchar.h"</cpp:file></cpp:include>

<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>euc_jis_2004_to_shift_jis_2004</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>shift_jis_2004_to_euc_jis_2004</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>euc_jis_20042shift_jis_2004</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>euc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>shift_jis_20042euc_jis_2004</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sjis</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* ----------
 * conv_proc(
 *		INTEGER,	-- source encoding id
 *		INTEGER,	-- destination encoding id
 *		CSTRING,	-- source string (null terminated C string)
 *		CSTRING,	-- destination string (null terminated C string)
 *		INTEGER		-- source string length
 * ) returns VOID;
 * ----------
 */</comment>

<function><type><name>Datum</name></type>
<name>euc_jis_2004_to_shift_jis_2004</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_CSTRING</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_CSTRING</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ENCODING_CONVERSION_ARGS</name><argument_list>(<argument><expr><name>PG_EUC_JIS_2004</name></expr></argument>, <argument><expr><name>PG_SHIFT_JIS_2004</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>euc_jis_20042shift_jis_2004</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>shift_jis_2004_to_euc_jis_2004</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_CSTRING</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_CSTRING</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ENCODING_CONVERSION_ARGS</name><argument_list>(<argument><expr><name>PG_SHIFT_JIS_2004</name></expr></argument>, <argument><expr><name>PG_EUC_JIS_2004</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>shift_jis_20042euc_jis_2004</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * EUC_JIS_2004 -&gt; SHIFT_JIS_2004
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>euc_jis_20042shift_jis_2004</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>euc</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>c1</name></decl>,
				<decl><type ref="prev"/><name>ku</name></decl>,
				<decl><type ref="prev"/><name>ten</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>l</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>*</operator><name>euc</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_HIGHBIT_SET</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* ASCII */</comment>
			<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>report_invalid_encoding</name><argument_list>(<argument><expr><name>PG_EUC_JIS_2004</name></expr></argument>,
										<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>euc</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>euc</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>pg_encoding_verifymb</name><argument_list>(<argument><expr><name>PG_EUC_JIS_2004</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>euc</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>report_invalid_encoding</name><argument_list>(<argument><expr><name>PG_EUC_JIS_2004</name></expr></argument>,
									<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>euc</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <name>SS2</name> <operator>&amp;&amp;</operator> <name>l</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>	<comment type="block">/* JIS X 0201 kana? */</comment>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>euc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>c1</name> <operator>==</operator> <name>SS3</name> <operator>&amp;&amp;</operator> <name>l</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>	<comment type="block">/* JIS X 0213 plane 2? */</comment>
		<block>{<block_content>
			<expr_stmt><expr><name>ku</name> <operator>=</operator> <name><name>euc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">0xa0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>ten</name> <operator>=</operator> <name><name>euc</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <literal type="number">0xa0</literal></expr>;</expr_stmt>

			<switch>switch <condition>(<expr><name>ku</name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><literal type="number">1</literal></expr>:</case>
				<case>case <expr><literal type="number">3</literal></expr>:</case>
				<case>case <expr><literal type="number">4</literal></expr>:</case>
				<case>case <expr><literal type="number">5</literal></expr>:</case>
				<case>case <expr><literal type="number">8</literal></expr>:</case>
				<case>case <expr><literal type="number">12</literal></expr>:</case>
				<case>case <expr><literal type="number">13</literal></expr>:</case>
				<case>case <expr><literal type="number">14</literal></expr>:</case>
				<case>case <expr><literal type="number">15</literal></expr>:</case>
					<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ku</name> <operator>+</operator> <literal type="number">0x1df</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>ku</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
					<break>break;</break>
				<default>default:</default>
					<if_stmt><if>if <condition>(<expr><name>ku</name> <operator>&gt;=</operator> <literal type="number">78</literal> <operator>&amp;&amp;</operator> <name>ku</name> <operator>&lt;=</operator> <literal type="number">94</literal></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>ku</name> <operator>+</operator> <literal type="number">0x19b</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					</block_content>}</block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>report_invalid_encoding</name><argument_list>(<argument><expr><name>PG_EUC_JIS_2004</name></expr></argument>,
												<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>euc</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></switch>

			<if_stmt><if>if <condition>(<expr><name>ku</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>ten</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>ten</name> <operator>&lt;=</operator> <literal type="number">63</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>ten</name> <operator>+</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><name>ten</name> <operator>&gt;=</operator> <literal type="number">64</literal> <operator>&amp;&amp;</operator> <name>ten</name> <operator>&lt;=</operator> <literal type="number">94</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>ten</name> <operator>+</operator> <literal type="number">0x40</literal></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>report_invalid_encoding</name><argument_list>(<argument><expr><name>PG_EUC_JIS_2004</name></expr></argument>,
											<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>euc</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>ten</name> <operator>+</operator> <literal type="number">0x9e</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if>

		<if type="elseif">else if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>		<comment type="block">/* JIS X 0213 plane 1? */</comment>
		<block>{<block_content>
			<expr_stmt><expr><name>ku</name> <operator>=</operator> <name>c1</name> <operator>-</operator> <literal type="number">0xa0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>ten</name> <operator>=</operator> <name><name>euc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">0xa0</literal></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>ku</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>ku</name> <operator>&lt;=</operator> <literal type="number">62</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>ku</name> <operator>+</operator> <literal type="number">0x101</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name>ku</name> <operator>&gt;=</operator> <literal type="number">63</literal> <operator>&amp;&amp;</operator> <name>ku</name> <operator>&lt;=</operator> <literal type="number">94</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>ku</name> <operator>+</operator> <literal type="number">0x181</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>report_invalid_encoding</name><argument_list>(<argument><expr><name>PG_EUC_JIS_2004</name></expr></argument>,
										<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>euc</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>ku</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>ten</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>ten</name> <operator>&lt;=</operator> <literal type="number">63</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>ten</name> <operator>+</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><name>ten</name> <operator>&gt;=</operator> <literal type="number">64</literal> <operator>&amp;&amp;</operator> <name>ten</name> <operator>&lt;=</operator> <literal type="number">94</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>ten</name> <operator>+</operator> <literal type="number">0x40</literal></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>report_invalid_encoding</name><argument_list>(<argument><expr><name>PG_EUC_JIS_2004</name></expr></argument>,
											<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>euc</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>ten</name> <operator>+</operator> <literal type="number">0x9e</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>report_invalid_encoding</name><argument_list>(<argument><expr><name>PG_EUC_JIS_2004</name></expr></argument>,
									<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>euc</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><name>euc</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>l</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * returns SHIFT_JIS_2004 "ku" code indicated by second byte
 * *ku = 0: "ku" = even
 * *ku = 1: "ku" = odd
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_ten</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ku</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>ten</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&gt;=</operator> <literal type="number">0x40</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>&lt;=</operator> <literal type="number">0x7e</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>ten</name> <operator>=</operator> <name>b</name> <operator>-</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>ku</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>b</name> <operator>&gt;=</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>&lt;=</operator> <literal type="number">0x9e</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>ten</name> <operator>=</operator> <name>b</name> <operator>-</operator> <literal type="number">0x40</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>ku</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>b</name> <operator>&gt;=</operator> <literal type="number">0x9f</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>&lt;=</operator> <literal type="number">0xfc</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>ten</name> <operator>=</operator> <name>b</name> <operator>-</operator> <literal type="number">0x9e</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>ku</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>ten</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>				<comment type="block">/* error */</comment>
		<expr_stmt><expr><operator>*</operator><name>ku</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>				<comment type="block">/* keep compiler quiet */</comment>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>ten</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * SHIFT_JIS_2004 ---&gt; EUC_JIS_2004
 */</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>shift_jis_20042euc_jis_2004</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sjis</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>c1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>ku</name></decl>,
				<decl><type ref="prev"/><name>ten</name></decl>,
				<decl><type ref="prev"/><name>kubun</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>plane</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>l</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>*</operator><name>sjis</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_HIGHBIT_SET</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* ASCII */</comment>
			<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>report_invalid_encoding</name><argument_list>(<argument><expr><name>PG_SHIFT_JIS_2004</name></expr></argument>,
										<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>sjis</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>sjis</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>pg_encoding_verifymb</name><argument_list>(<argument><expr><name>PG_SHIFT_JIS_2004</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>sjis</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>l</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>l</name></expr></argument> &gt;</argument_list></name> <name>len</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>report_invalid_encoding</name><argument_list>(<argument><expr><name>PG_SHIFT_JIS_2004</name></expr></argument>,
									<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>sjis</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>&gt;=</operator> <literal type="number">0xa1</literal> <operator>&amp;&amp;</operator> <name>c1</name> <operator>&lt;=</operator> <literal type="number">0xdf</literal> <operator>&amp;&amp;</operator> <name>l</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* JIS X0201 (1 byte kana) */</comment>
			<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>SS2</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>c2</name> <init>= <expr><name><name>sjis</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name>plane</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>ku</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>ten</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

			<comment type="block">/*
			 * JIS X 0213
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>&gt;=</operator> <literal type="number">0x81</literal> <operator>&amp;&amp;</operator> <name>c1</name> <operator>&lt;=</operator> <literal type="number">0x9f</literal></expr>)</condition>	<comment type="block">/* plane 1 1ku-62ku */</comment>
			<block>{<block_content>
				<expr_stmt><expr><name>ku</name> <operator>=</operator> <operator>(</operator><name>c1</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">0x100</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>ten</name> <operator>=</operator> <call><name>get_ten</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kubun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>ten</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>report_invalid_encoding</name><argument_list>(<argument><expr><name>PG_SHIFT_JIS_2004</name></expr></argument>,
											<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>sjis</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>ku</name> <operator>-=</operator> <name>kubun</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>c1</name> <operator>&gt;=</operator> <literal type="number">0xe0</literal> <operator>&amp;&amp;</operator> <name>c1</name> <operator>&lt;=</operator> <literal type="number">0xef</literal></expr>)</condition>	<comment type="block">/* plane 1 62ku-94ku */</comment>
			<block>{<block_content>
				<expr_stmt><expr><name>ku</name> <operator>=</operator> <operator>(</operator><name>c1</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">0x180</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>ten</name> <operator>=</operator> <call><name>get_ten</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kubun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>ten</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>report_invalid_encoding</name><argument_list>(<argument><expr><name>PG_SHIFT_JIS_2004</name></expr></argument>,

											<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>sjis</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>ku</name> <operator>-=</operator> <name>kubun</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>c1</name> <operator>&gt;=</operator> <literal type="number">0xf0</literal> <operator>&amp;&amp;</operator> <name>c1</name> <operator>&lt;=</operator> <literal type="number">0xf3</literal></expr>)</condition>	<comment type="block">/* plane 2
												 * 1,3,4,5,8,12,13,14,15 ku */</comment>
			<block>{<block_content>
				<expr_stmt><expr><name>plane</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>ten</name> <operator>=</operator> <call><name>get_ten</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kubun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>ten</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>report_invalid_encoding</name><argument_list>(<argument><expr><name>PG_SHIFT_JIS_2004</name></expr></argument>,
											<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>sjis</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<switch>switch <condition>(<expr><name>c1</name></expr>)</condition>
				<block>{<block_content>
					<case>case <expr><literal type="number">0xf0</literal></expr>:</case>
						<expr_stmt><expr><name>ku</name> <operator>=</operator> <ternary><condition><expr><name>kubun</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><literal type="number">0xf1</literal></expr>:</case>
						<expr_stmt><expr><name>ku</name> <operator>=</operator> <ternary><condition><expr><name>kubun</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><literal type="number">0xf2</literal></expr>:</case>
						<expr_stmt><expr><name>ku</name> <operator>=</operator> <ternary><condition><expr><name>kubun</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">12</literal></expr> </then><else>: <expr><literal type="number">5</literal></expr></else></ternary></expr>;</expr_stmt>
						<break>break;</break>
					<default>default:</default>
						<expr_stmt><expr><name>ku</name> <operator>=</operator> <ternary><condition><expr><name>kubun</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">14</literal></expr> </then><else>: <expr><literal type="number">13</literal></expr></else></ternary></expr>;</expr_stmt>
						<break>break;</break>
				</block_content>}</block></switch>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>c1</name> <operator>&gt;=</operator> <literal type="number">0xf4</literal> <operator>&amp;&amp;</operator> <name>c1</name> <operator>&lt;=</operator> <literal type="number">0xfc</literal></expr>)</condition>	<comment type="block">/* plane 2 78-94ku */</comment>
			<block>{<block_content>
				<expr_stmt><expr><name>plane</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>ten</name> <operator>=</operator> <call><name>get_ten</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kubun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>ten</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>report_invalid_encoding</name><argument_list>(<argument><expr><name>PG_SHIFT_JIS_2004</name></expr></argument>,
											<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>sjis</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="number">0xf4</literal> <operator>&amp;&amp;</operator> <name>kubun</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>ku</name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>ku</name> <operator>=</operator> <operator>(</operator><name>c1</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">0x19a</literal> <operator>-</operator> <name>kubun</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>report_invalid_encoding</name><argument_list>(<argument><expr><name>PG_SHIFT_JIS_2004</name></expr></argument>,
										<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>sjis</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>plane</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>SS3</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>ku</name> <operator>+</operator> <literal type="number">0xa0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>ten</name> <operator>+</operator> <literal type="number">0xa0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>sjis</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>l</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
