<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/backend/utils/adt/levenshtein.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * levenshtein.c
 *	  Levenshtein distance implementation.
 *
 * Original author:  Joe Conway &lt;mail@joeconway.com&gt;
 *
 * This file is included by varlena.c twice, to provide matching code for (1)
 * Levenshtein distance with custom costings, and (2) Levenshtein distance with
 * custom costings and a "max" value above which exact distances are not
 * interesting.  Before the inclusion, we rely on the presence of the inline
 * function rest_of_char_same().
 *
 * Written based on a description of the algorithm by Michael Gilleland found
 * at http://www.merriampark.com/ld.htm.  Also looked at levenshtein.c in the
 * PHP 4.0.6 distribution for inspiration.  Configurable penalty costs
 * extension is introduced by Volkan YAZICI &lt;volkan.yazici@gmail.com.
 *
 * Copyright (c) 2001-2018, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *	src/backend/utils/adt/levenshtein.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_LEVENSHTEIN_STRLEN</name></cpp:macro>		<cpp:value>255</cpp:value></cpp:define>

<comment type="block">/*
 * Calculates Levenshtein distance metric between supplied strings, which are
 * not necessarily null-terminated.
 *
 * source: source string, of length slen bytes.
 * target: target string, of length tlen bytes.
 * ins_c, del_c, sub_c: costs to charge for character insertion, deletion,
 *		and substitution respectively; (1, 1, 1) costs suffice for common
 *		cases, but your mileage may vary.
 * max_d: if provided and &gt;= 0, maximum distance we care about; see below.
 * trusted: caller is trusted and need not obey MAX_LEVENSHTEIN_STRLEN.
 *
 * One way to compute Levenshtein distance is to incrementally construct
 * an (m+1)x(n+1) matrix where cell (i, j) represents the minimum number
 * of operations required to transform the first i characters of s into
 * the first j characters of t.  The last column of the final row is the
 * answer.
 *
 * We use that algorithm here with some modification.  In lieu of holding
 * the entire array in memory at once, we'll just use two arrays of size
 * m+1 for storing accumulated values. At each step one array represents
 * the "previous" row and one is the "current" row of the notional large
 * array.
 *
 * If max_d &gt;= 0, we only need to provide an accurate answer when that answer
 * is less than or equal to max_d.  From any cell in the matrix, there is
 * theoretical "minimum residual distance" from that cell to the last column
 * of the final row.  This minimum residual distance is zero when the
 * untransformed portions of the strings are of equal length (because we might
 * get lucky and find all the remaining characters matching) and is otherwise
 * based on the minimum number of insertions or deletions needed to make them
 * equal length.  The residual distance grows as we move toward the upper
 * right or lower left corners of the matrix.  When the max_d bound is
 * usefully tight, we can use this property to avoid computing the entirety
 * of each row; instead, we maintain a start_column and stop_column that
 * identify the portion of the matrix close to the diagonal which can still
 * affect the final answer.
 */</comment>
<function><type><name>int</name></type>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LEVENSHTEIN_LESS_EQUAL</name></cpp:ifdef>
<name>varstr_levenshtein_less_equal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slen</name></decl></parameter>,
							  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tlen</name></decl></parameter>,
							  <parameter><decl><type><name>int</name></type> <name>ins_c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>del_c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sub_c</name></decl></parameter>,
							  <parameter><decl><type><name>int</name></type> <name>max_d</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>trusted</name></decl></parameter>)</parameter_list>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
varstr_levenshtein<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slen</name></decl></parameter>,
				   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tlen</name></decl></parameter>,
				   <parameter><decl><type><name>int</name></type> <name>ins_c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>del_c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sub_c</name></decl></parameter>,
				   <parameter><decl><type><name>bool</name></type> <name>trusted</name></decl></parameter>)</parameter_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>m</name></decl>,
				<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name>		   <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name>		   <modifier>*</modifier></type><name>curr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name>		   <modifier>*</modifier></type><name>s_char_len</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>y</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * For varstr_levenshtein_less_equal, we have real variables called
	 * start_column and stop_column; otherwise it's just short-hand for 0 and
	 * m.
	 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LEVENSHTEIN_LESS_EQUAL</name></cpp:ifdef>
	<decl_stmt><decl><type><name>int</name></type>			<name>start_column</name></decl>,
				<decl><type ref="prev"/><name>stop_column</name></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>START_COLUMN</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>STOP_COLUMN</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>START_COLUMN</name></cpp:macro> <cpp:value>start_column</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STOP_COLUMN</name></cpp:macro> <cpp:value>stop_column</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>START_COLUMN</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>STOP_COLUMN</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>START_COLUMN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STOP_COLUMN</name></cpp:macro> <cpp:value>m</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* Convert string lengths (in bytes) to lengths in characters */</comment>
	<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>pg_mbstrlen_with_len</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>pg_mbstrlen_with_len</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * We can transform an empty s into t with n insertions, or a non-empty t
	 * into an empty s with m deletions.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>m</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>n</name> <operator>*</operator> <name>ins_c</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>n</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>m</name> <operator>*</operator> <name>del_c</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * For security concerns, restrict excessive CPU+RAM usage. (This
	 * implementation uses O(m) memory and has O(mn) complexity.)  If
	 * "trusted" is true, caller is responsible for not making excessive
	 * requests, typically by using a small max_d along with strings that are
	 * bounded, though not necessarily to MAX_LEVENSHTEIN_STRLEN exactly.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>trusted</name> <operator>&amp;&amp;</operator>
		<operator>(</operator><name>m</name> <operator>&gt;</operator> <name>MAX_LEVENSHTEIN_STRLEN</name> <operator>||</operator>
		 <name>n</name> <operator>&gt;</operator> <name>MAX_LEVENSHTEIN_STRLEN</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"levenshtein argument exceeds maximum length of %d characters"</literal></expr></argument>,
						<argument><expr><name>MAX_LEVENSHTEIN_STRLEN</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LEVENSHTEIN_LESS_EQUAL</name></cpp:ifdef>
	<comment type="block">/* Initialize start and stop columns. */</comment>
	<expr_stmt><expr><name>start_column</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>stop_column</name> <operator>=</operator> <name>m</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * If max_d &gt;= 0, determine whether the bound is impossibly tight.  If so,
	 * return max_d + 1 immediately.  Otherwise, determine whether it's tight
	 * enough to limit the computation we must perform.  If so, figure out
	 * initial stop column.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>max_d</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>min_theo_d</name></decl>;</decl_stmt> <comment type="block">/* Theoretical minimum distance. */</comment>
		<decl_stmt><decl><type><name>int</name></type>			<name>max_theo_d</name></decl>;</decl_stmt> <comment type="block">/* Theoretical maximum distance. */</comment>
		<decl_stmt><decl><type><name>int</name></type>			<name>net_inserts</name> <init>= <expr><name>n</name> <operator>-</operator> <name>m</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>min_theo_d</name> <operator>=</operator> <ternary><condition><expr><name>net_inserts</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then>
			<expr><operator>-</operator><name>net_inserts</name> <operator>*</operator> <name>del_c</name></expr> </then><else>: <expr><name>net_inserts</name> <operator>*</operator> <name>ins_c</name></expr></else></ternary></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>min_theo_d</name> <operator>&gt;</operator> <name>max_d</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>max_d</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>ins_c</name> <operator>+</operator> <name>del_c</name> <operator>&lt;</operator> <name>sub_c</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>sub_c</name> <operator>=</operator> <name>ins_c</name> <operator>+</operator> <name>del_c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>max_theo_d</name> <operator>=</operator> <name>min_theo_d</name> <operator>+</operator> <name>sub_c</name> <operator>*</operator> <call><name>Min</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>max_d</name> <operator>&gt;=</operator> <name>max_theo_d</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>max_d</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>ins_c</name> <operator>+</operator> <name>del_c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * Figure out how much of the first row of the notional matrix we
			 * need to fill in.  If the string is growing, the theoretical
			 * minimum distance already incorporates the cost of deleting the
			 * number of characters necessary to make the two strings equal in
			 * length.  Each additional deletion forces another insertion, so
			 * the best-case total cost increases by ins_c + del_c. If the
			 * string is shrinking, the minimum theoretical cost assumes no
			 * excess deletions; that is, we're starting no further right than
			 * column n - m.  If we do start further right, the best-case
			 * total cost increases by ins_c + del_c for each move right.
			 */</comment>
			<decl_stmt><decl><type><name>int</name></type>			<name>slack_d</name> <init>= <expr><name>max_d</name> <operator>-</operator> <name>min_theo_d</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>best_column</name> <init>= <expr><ternary><condition><expr><name>net_inserts</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><name>net_inserts</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name>stop_column</name> <operator>=</operator> <name>best_column</name> <operator>+</operator> <operator>(</operator><name>slack_d</name> <operator>/</operator> <operator>(</operator><name>ins_c</name> <operator>+</operator> <name>del_c</name><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>stop_column</name> <operator>&gt;</operator> <name>m</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>stop_column</name> <operator>=</operator> <name>m</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/*
	 * In order to avoid calling pg_mblen() repeatedly on each character in s,
	 * we cache all the lengths before starting the main loop -- but if all
	 * the characters in both strings are single byte, then we skip this and
	 * use a fast-path in the main loop.  If only one string contains
	 * multi-byte characters, we still build the array, so that the fast-path
	 * needn't deal with the case where the array hasn't been initialized.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>m</name> <operator>!=</operator> <name>slen</name> <operator>||</operator> <name>n</name> <operator>!=</operator> <name>tlen</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cp</name> <init>= <expr><name>source</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>s_char_len</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><operator>(</operator><name>m</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name><name>s_char_len</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>cp</name> <operator>+=</operator> <name><name>s_char_len</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name><name>s_char_len</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* One more cell for initialization column and row. */</comment>
	<expr_stmt><expr><operator>++</operator><name>m</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>

	<comment type="block">/* Previous and current rows of notional array. */</comment>
	<expr_stmt><expr><name>prev</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>m</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>curr</name> <operator>=</operator> <name>prev</name> <operator>+</operator> <name>m</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * To transform the first i characters of s into the first 0 characters of
	 * t, we must perform i deletions.
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>START_COLUMN</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>STOP_COLUMN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>prev</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>*</operator> <name>del_c</name></expr>;</expr_stmt></block_content></block></for>

	<comment type="block">/* Loop through rows of the notional array */</comment>
	<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>target</name></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name>		   <modifier>*</modifier></type><name>temp</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><name>source</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>y_char_len</name> <init>= <expr><ternary><condition><expr><name>n</name> <operator>!=</operator> <name>tlen</name> <operator>+</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><call><name>pg_mblen</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LEVENSHTEIN_LESS_EQUAL</name></cpp:ifdef>

		<comment type="block">/*
		 * In the best case, values percolate down the diagonal unchanged, so
		 * we must increment stop_column unless it's already on the right end
		 * of the array.  The inner loop will read prev[stop_column], so we
		 * have to initialize it even though it shouldn't affect the result.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>stop_column</name> <operator>&lt;</operator> <name>m</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>prev</name><index>[<expr><name>stop_column</name></expr>]</index></name> <operator>=</operator> <name>max_d</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><operator>++</operator><name>stop_column</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * The main loop fills in curr, but curr[0] needs a special case: to
		 * transform the first 0 characters of s into the first j characters
		 * of t, we must perform j insertions.  However, if start_column &gt; 0,
		 * this special case does not apply.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>start_column</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>curr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>j</name> <operator>*</operator> <name>ins_c</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>i</name> <operator>=</operator> <name>start_column</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><name><name>curr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>j</name> <operator>*</operator> <name>ins_c</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<comment type="block">/*
		 * This inner loop is critical to performance, so we include a
		 * fast-path to handle the (fairly common) case where no multibyte
		 * characters are in the mix.  The fast-path is entitled to assume
		 * that if s_char_len is not initialized then BOTH strings contain
		 * only single-byte characters.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>s_char_len</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>STOP_COLUMN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type>			<name>ins</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>			<name>del</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>			<name>sub</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>			<name>x_char_len</name> <init>= <expr><name><name>s_char_len</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

				<comment type="block">/*
				 * Calculate costs for insertion, deletion, and substitution.
				 *
				 * When calculating cost for substitution, we compare the last
				 * character of each possibly-multibyte character first,
				 * because that's enough to rule out most mis-matches.  If we
				 * get past that test, then we compare the lengths and the
				 * remaining bytes.
				 */</comment>
				<expr_stmt><expr><name>ins</name> <operator>=</operator> <name><name>prev</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>ins_c</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>del</name> <operator>=</operator> <name><name>curr</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>del_c</name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>x</name><index>[<expr><name>x_char_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>y</name><index>[<expr><name>y_char_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name>
					<operator>&amp;&amp;</operator> <name>x_char_len</name> <operator>==</operator> <name>y_char_len</name> <operator>&amp;&amp;</operator>
					<operator>(</operator><name>x_char_len</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <call><name>rest_of_char_same</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x_char_len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>sub</name> <operator>=</operator> <name><name>prev</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>sub</name> <operator>=</operator> <name><name>prev</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>sub_c</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<comment type="block">/* Take the one with minimum cost. */</comment>
				<expr_stmt><expr><name><name>curr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>ins</name></expr></argument>, <argument><expr><name>del</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>curr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name><name>curr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* Point to next character. */</comment>
				<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>x_char_len</name></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>STOP_COLUMN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type>			<name>ins</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>			<name>del</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>			<name>sub</name></decl>;</decl_stmt>

				<comment type="block">/* Calculate costs for insertion, deletion, and substitution. */</comment>
				<expr_stmt><expr><name>ins</name> <operator>=</operator> <name><name>prev</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>ins_c</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>del</name> <operator>=</operator> <name><name>curr</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>del_c</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>sub</name> <operator>=</operator> <name><name>prev</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><operator>*</operator><name>x</name> <operator>==</operator> <operator>*</operator><name>y</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>sub_c</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

				<comment type="block">/* Take the one with minimum cost. */</comment>
				<expr_stmt><expr><name><name>curr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>ins</name></expr></argument>, <argument><expr><name>del</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>curr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name><name>curr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* Point to next character. */</comment>
				<expr_stmt><expr><name>x</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></else></if_stmt>

		<comment type="block">/* Swap current row with previous row. */</comment>
		<expr_stmt><expr><name>temp</name> <operator>=</operator> <name>curr</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>curr</name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>

		<comment type="block">/* Point to next character. */</comment>
		<expr_stmt><expr><name>y</name> <operator>+=</operator> <name>y_char_len</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LEVENSHTEIN_LESS_EQUAL</name></cpp:ifdef>

		<comment type="block">/*
		 * This chunk of code represents a significant performance hit if used
		 * in the case where there is no max_d bound.  This is probably not
		 * because the max_d &gt;= 0 test itself is expensive, but rather because
		 * the possibility of needing to execute this code prevents tight
		 * optimization of the loop as a whole.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>max_d</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * The "zero point" is the column of the current row where the
			 * remaining portions of the strings are of equal length.  There
			 * are (n - 1) characters in the target string, of which j have
			 * been transformed.  There are (m - 1) characters in the source
			 * string, so we want to find the value for zp where (n - 1) - j =
			 * (m - 1) - zp.
			 */</comment>
			<decl_stmt><decl><type><name>int</name></type>			<name>zp</name> <init>= <expr><name>j</name> <operator>-</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>m</name><operator>)</operator></expr></init></decl>;</decl_stmt>

			<comment type="block">/* Check whether the stop column can slide left. */</comment>
			<while>while <condition>(<expr><name>stop_column</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type>			<name>ii</name> <init>= <expr><name>stop_column</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>			<name>net_inserts</name> <init>= <expr><name>ii</name> <operator>-</operator> <name>zp</name></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>prev</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>net_inserts</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>net_inserts</name> <operator>*</operator> <name>ins_c</name></expr> </then><else>:
								<expr><operator>-</operator><name>net_inserts</name> <operator>*</operator> <name>del_c</name></expr></else></ternary><operator>)</operator> <operator>&lt;=</operator> <name>max_d</name></expr>)</condition><block type="pseudo"><block_content>
					<break>break;</break></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>stop_column</name><operator>--</operator></expr>;</expr_stmt>
			</block_content>}</block></while>

			<comment type="block">/* Check whether the start column can slide right. */</comment>
			<while>while <condition>(<expr><name>start_column</name> <operator>&lt;</operator> <name>stop_column</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type>			<name>net_inserts</name> <init>= <expr><name>start_column</name> <operator>-</operator> <name>zp</name></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>prev</name><index>[<expr><name>start_column</name></expr>]</index></name> <operator>+</operator>
					<operator>(</operator><ternary><condition><expr><name>net_inserts</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>net_inserts</name> <operator>*</operator> <name>ins_c</name></expr> </then><else>:
					 <expr><operator>-</operator><name>net_inserts</name> <operator>*</operator> <name>del_c</name></expr></else></ternary><operator>)</operator> <operator>&lt;=</operator> <name>max_d</name></expr>)</condition><block type="pseudo"><block_content>
					<break>break;</break></block_content></block></if></if_stmt>

				<comment type="block">/*
				 * We'll never again update these values, so we must make sure
				 * there's nothing here that could confuse any future
				 * iteration of the outer loop.
				 */</comment>
				<expr_stmt><expr><name><name>prev</name><index>[<expr><name>start_column</name></expr>]</index></name> <operator>=</operator> <name>max_d</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>curr</name><index>[<expr><name>start_column</name></expr>]</index></name> <operator>=</operator> <name>max_d</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>start_column</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>source</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name>s_char_len</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>s_char_len</name><index>[<expr><name>start_column</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>start_column</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></while>

			<comment type="block">/* If they cross, we're going to exceed the bound. */</comment>
			<if_stmt><if>if <condition>(<expr><name>start_column</name> <operator>&gt;=</operator> <name>stop_column</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>max_d</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></for>

	<comment type="block">/*
	 * Because the final value was swapped from the previous row to the
	 * current row, that's where we'll find it.
	 */</comment>
	<return>return <expr><name><name>prev</name><index>[<expr><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
</unit>
