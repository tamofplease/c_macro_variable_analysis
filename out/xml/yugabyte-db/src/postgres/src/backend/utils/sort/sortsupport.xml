<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/backend/utils/sort/sortsupport.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * sortsupport.c
 *	  Support routines for accelerated sorting.
 *
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *	  src/backend/utils/sort/sortsupport.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/nbtree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_am.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/sortsupport.h"</cpp:file></cpp:include>


<comment type="block">/* Info needed to use an old-style comparison function as a sort comparator */</comment>
<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>FunctionCallInfoData</name></type> <name>fcinfo</name></decl>;</decl_stmt>	<comment type="block">/* reusable callinfo structure */</comment>
	<decl_stmt><decl><type><name>FmgrInfo</name></type>	<name>flinfo</name></decl>;</decl_stmt>			<comment type="block">/* lookup data for comparison function */</comment>
}</block></struct></type> <name>SortShimExtra</name>;</typedef>


<comment type="block">/*
 * Shim function for calling an old-style comparator
 *
 * This is essentially an inlined version of FunctionCall2Coll(), except
 * we assume that the FunctionCallInfoData was already mostly set up by
 * PrepareSortSupportComparisonShim.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>comparison_shim</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>SortSupport</name></type> <name>ssup</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SortShimExtra</name> <modifier>*</modifier></type><name>extra</name> <init>= <expr><operator>(</operator><name>SortShimExtra</name> <operator>*</operator><operator>)</operator> <name><name>ssup</name><operator>-&gt;</operator><name>ssup_extra</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>extra</name><operator>-&gt;</operator><name>fcinfo</name><operator>.</operator><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>extra</name><operator>-&gt;</operator><name>fcinfo</name><operator>.</operator><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

	<comment type="block">/* just for paranoia's sake, we reset isnull each time */</comment>
	<expr_stmt><expr><name><name>extra</name><operator>-&gt;</operator><name>fcinfo</name><operator>.</operator><name>isnull</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>FunctionCallInvoke</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>extra</name><operator>-&gt;</operator><name>fcinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Check for null result, since caller is clearly not expecting one */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>extra</name><operator>-&gt;</operator><name>fcinfo</name><operator>.</operator><name>isnull</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"function %u returned NULL"</literal></expr></argument>, <argument><expr><name><name>extra</name><operator>-&gt;</operator><name>flinfo</name><operator>.</operator><name>fn_oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Set up a shim function to allow use of an old-style btree comparison
 * function as if it were a sort support comparator.
 */</comment>
<function><type><name>void</name></type>
<name>PrepareSortSupportComparisonShim</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>cmpFunc</name></decl></parameter>, <parameter><decl><type><name>SortSupport</name></type> <name>ssup</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SortShimExtra</name> <modifier>*</modifier></type><name>extra</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>extra</name> <operator>=</operator> <operator>(</operator><name>SortShimExtra</name> <operator>*</operator><operator>)</operator> <call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name><name>ssup</name><operator>-&gt;</operator><name>ssup_cxt</name></name></expr></argument>,
												 <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SortShimExtra</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Lookup the comparison function */</comment>
	<expr_stmt><expr><call><name>fmgr_info_cxt</name><argument_list>(<argument><expr><name>cmpFunc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>extra</name><operator>-&gt;</operator><name>flinfo</name></name></expr></argument>, <argument><expr><name><name>ssup</name><operator>-&gt;</operator><name>ssup_cxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* We can initialize the callinfo just once and re-use it */</comment>
	<expr_stmt><expr><call><name>InitFunctionCallInfoData</name><argument_list>(<argument><expr><name><name>extra</name><operator>-&gt;</operator><name>fcinfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>extra</name><operator>-&gt;</operator><name>flinfo</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
							 <argument><expr><name><name>ssup</name><operator>-&gt;</operator><name>ssup_collation</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>extra</name><operator>-&gt;</operator><name>fcinfo</name><operator>.</operator><name>argnull</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>extra</name><operator>-&gt;</operator><name>fcinfo</name><operator>.</operator><name>argnull</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ssup</name><operator>-&gt;</operator><name>ssup_extra</name></name> <operator>=</operator> <name>extra</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ssup</name><operator>-&gt;</operator><name>comparator</name></name> <operator>=</operator> <name>comparison_shim</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Look up and call sortsupport function to setup SortSupport comparator;
 * or if no such function exists or it declines to set up the appropriate
 * state, prepare a suitable shim.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>FinishSortSupportFunction</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>opfamily</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>opcintype</name></decl></parameter>, <parameter><decl><type><name>SortSupport</name></type> <name>ssup</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>sortSupportFunction</name></decl>;</decl_stmt>

	<comment type="block">/* Look for a sort support function */</comment>
	<expr_stmt><expr><name>sortSupportFunction</name> <operator>=</operator> <call><name>get_opfamily_proc</name><argument_list>(<argument><expr><name>opfamily</name></expr></argument>, <argument><expr><name>opcintype</name></expr></argument>, <argument><expr><name>opcintype</name></expr></argument>,
											<argument><expr><name>BTSORTSUPPORT_PROC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>sortSupportFunction</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * The sort support function can provide a comparator, but it can also
		 * choose not to so (e.g. based on the selected collation).
		 */</comment>
		<expr_stmt><expr><call><name>OidFunctionCall1</name><argument_list>(<argument><expr><name>sortSupportFunction</name></expr></argument>, <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>ssup</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ssup</name><operator>-&gt;</operator><name>comparator</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Oid</name></type>			<name>sortFunction</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>sortFunction</name> <operator>=</operator> <call><name>get_opfamily_proc</name><argument_list>(<argument><expr><name>opfamily</name></expr></argument>, <argument><expr><name>opcintype</name></expr></argument>, <argument><expr><name>opcintype</name></expr></argument>,
										 <argument><expr><name>BTORDER_PROC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>sortFunction</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"missing support function %d(%u,%u) in opfamily %u"</literal></expr></argument>,
				 <argument><expr><name>BTORDER_PROC</name></expr></argument>, <argument><expr><name>opcintype</name></expr></argument>, <argument><expr><name>opcintype</name></expr></argument>, <argument><expr><name>opfamily</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* We'll use a shim to call the old-style btree comparator */</comment>
		<expr_stmt><expr><call><name>PrepareSortSupportComparisonShim</name><argument_list>(<argument><expr><name>sortFunction</name></expr></argument>, <argument><expr><name>ssup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Fill in SortSupport given an ordering operator (btree "&lt;" or "&gt;" operator).
 *
 * Caller must previously have zeroed the SortSupportData structure and then
 * filled in ssup_cxt, ssup_collation, and ssup_nulls_first.  This will fill
 * in ssup_reverse as well as the comparator function pointer.
 */</comment>
<function><type><name>void</name></type>
<name>PrepareSortSupportFromOrderingOp</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>orderingOp</name></decl></parameter>, <parameter><decl><type><name>SortSupport</name></type> <name>ssup</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>opfamily</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>opcintype</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int16</name></type>		<name>strategy</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>ssup</name><operator>-&gt;</operator><name>comparator</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Find the operator in pg_amop */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_ordering_op_properties</name><argument_list>(<argument><expr><name>orderingOp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opfamily</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opcintype</name></expr></argument>,
									<argument><expr><operator>&amp;</operator><name>strategy</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"operator %u is not a valid ordering operator"</literal></expr></argument>,
			 <argument><expr><name>orderingOp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>ssup</name><operator>-&gt;</operator><name>ssup_reverse</name></name> <operator>=</operator> <operator>(</operator><name>strategy</name> <operator>==</operator> <name>BTGreaterStrategyNumber</name><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>FinishSortSupportFunction</name><argument_list>(<argument><expr><name>opfamily</name></expr></argument>, <argument><expr><name>opcintype</name></expr></argument>, <argument><expr><name>ssup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Fill in SortSupport given an index relation, attribute, and strategy.
 *
 * Caller must previously have zeroed the SortSupportData structure and then
 * filled in ssup_cxt, ssup_attno, ssup_collation, and ssup_nulls_first.  This
 * will fill in ssup_reverse (based on the supplied strategy), as well as the
 * comparator function pointer.
 */</comment>
<function><type><name>void</name></type>
<name>PrepareSortSupportFromIndexRel</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>indexRel</name></decl></parameter>, <parameter><decl><type><name>int16</name></type> <name>strategy</name></decl></parameter>,
							   <parameter><decl><type><name>SortSupport</name></type> <name>ssup</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>opfamily</name> <init>= <expr><name><name>indexRel</name><operator>-&gt;</operator><name>rd_opfamily</name><index>[<expr><name><name>ssup</name><operator>-&gt;</operator><name>ssup_attno</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>opcintype</name> <init>= <expr><name><name>indexRel</name><operator>-&gt;</operator><name>rd_opcintype</name><index>[<expr><name><name>ssup</name><operator>-&gt;</operator><name>ssup_attno</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>ssup</name><operator>-&gt;</operator><name>comparator</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>indexRel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relam</name></name> <operator>!=</operator> <name>BTREE_AM_OID</name> <operator>&amp;&amp;</operator> <name><name>indexRel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relam</name></name> <operator>!=</operator> <name>LSM_AM_OID</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unexpected non-btree AM: %u"</literal></expr></argument>, <argument><expr><name><name>indexRel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relam</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>strategy</name> <operator>!=</operator> <name>BTGreaterStrategyNumber</name> <operator>&amp;&amp;</operator>
		<name>strategy</name> <operator>!=</operator> <name>BTLessStrategyNumber</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unexpected sort support strategy: %d"</literal></expr></argument>, <argument><expr><name>strategy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>ssup</name><operator>-&gt;</operator><name>ssup_reverse</name></name> <operator>=</operator> <operator>(</operator><name>strategy</name> <operator>==</operator> <name>BTGreaterStrategyNumber</name><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>FinishSortSupportFunction</name><argument_list>(<argument><expr><name>opfamily</name></expr></argument>, <argument><expr><name>opcintype</name></expr></argument>, <argument><expr><name>ssup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
