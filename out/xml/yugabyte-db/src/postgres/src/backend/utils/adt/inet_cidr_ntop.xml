<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/backend/utils/adt/inet_cidr_ntop.c"><comment type="block">/*
 * Copyright (c) 2004 by Internet Systems Consortium, Inc. ("ISC")
 * Copyright (c) 1996,1999 by Internet Software Consortium.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 *	  src/backend/utils/adt/inet_cidr_ntop.c
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LIBC_SCCS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>lint</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>rcsid</name><index>[]</index></name> <init>= <expr><literal type="string">"Id: inet_net_ntop.c,v 1.1.2.2 2004/03/09 09:17:27 marka Exp $"</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/inet.h"</cpp:file></cpp:include>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SPRINTF_CHAR</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPRINTF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>strlen(sprintf<comment type="block">/**/</comment>x)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPRINTF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((size_t)sprintf x)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>inet_cidr_ntop_ipv4</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>,
					<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>inet_cidr_ntop_ipv6</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>,
					<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * char *
 * inet_cidr_ntop(af, src, bits, dst, size)
 *	convert network number from network to presentation format.
 *	generates CIDR style result always.
 * return:
 *	pointer to dst, or NULL if an error occurred (check errno).
 * author:
 *	Paul Vixie (ISC), July 1996
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>inet_cidr_ntop</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>af</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>af</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>PGSQL_AF_INET</name></expr>:</case>
			<return>return <expr><call><name>inet_cidr_ntop_ipv4</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>PGSQL_AF_INET6</name></expr>:</case>
			<return>return <expr><call><name>inet_cidr_ntop_ipv6</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
		<default>default:</default>
			<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EAFNOSUPPORT</name></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>


<comment type="block">/*
 * static char *
 * inet_cidr_ntop_ipv4(src, bits, dst, size)
 *	convert IPv4 network number from network to presentation format.
 *	generates CIDR style result always.
 * return:
 *	pointer to dst, or NULL if an error occurred (check errno).
 * note:
 *	network byte order assumed.  this means 192.5.5.240/28 has
 *	0b11110000 in its fourth octet.
 * author:
 *	Paul Vixie (ISC), July 1996
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>inet_cidr_ntop_ipv4</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>odst</name> <init>= <expr><name>dst</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>u_int</name></type>		<name>m</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>b</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>bits</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>bits</name></expr></argument> &gt;</argument_list></name> <literal type="number">32</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <sizeof>sizeof <name/></sizeof>"0"</expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>emsgsize</name>;</goto></block_content></block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>size</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Format whole octets. */</comment>
	<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <name>bits</name> <operator>/</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>b</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>b</name><operator>--</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <sizeof>sizeof <name/></sizeof>"255."</expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>emsgsize</name>;</goto></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>t</name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>dst</name> <operator>+=</operator> <call><name>SPRINTF</name><argument_list>(<argument><expr><operator>(</operator><name>dst</name><operator>,</operator> <literal type="string">"%u"</literal><operator>,</operator> <operator>*</operator><name>src</name><operator>++</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>size</name> <operator>-=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>dst</name> <operator>-</operator> <name>t</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Format partial octet. */</comment>
	<expr_stmt><expr><name>b</name> <operator>=</operator> <name>bits</name> <operator>%</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <sizeof>sizeof <name/></sizeof>".255"</expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>emsgsize</name>;</goto></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>t</name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>!=</operator> <name>odst</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>b</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>b</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>dst</name> <operator>+=</operator> <call><name>SPRINTF</name><argument_list>(<argument><expr><operator>(</operator><name>dst</name><operator>,</operator> <literal type="string">"%u"</literal><operator>,</operator> <operator>*</operator><name>src</name> <operator>&amp;</operator> <name>m</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>size</name> <operator>-=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <operator>(</operator><name>dst</name> <operator>-</operator> <name>t</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Format CIDR /width. */</comment>
	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <sizeof>sizeof <name/></sizeof>"/32"</expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>emsgsize</name>;</goto></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>dst</name> <operator>+=</operator> <call><name>SPRINTF</name><argument_list>(<argument><expr><operator>(</operator><name>dst</name><operator>,</operator> <literal type="string">"/%u"</literal><operator>,</operator> <name>bits</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>odst</name></expr>;</return>

<label><name>emsgsize</name>:</label>
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EMSGSIZE</name></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * static char *
 * inet_cidr_ntop_ipv6(src, bits, fakebits, dst, size)
 *	convert IPv6 network number from network to presentation format.
 *	generates CIDR style result always. Picks the shortest representation
 *	unless the IP is really IPv4.
 *	always prints specified number of bits (bits).
 * return:
 *	pointer to dst, or NULL if an error occurred (check errno).
 * note:
 *	network byte order assumed.  this means 192.5.5.240/28 has
 *	0x11110000 in its fourth octet.
 * author:
 *	Vadim Kogan (UCB), June 2001
 *	Original version (IPv4) by Paul Vixie (ISC), July 1996
 */</comment>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>inet_cidr_ntop_ipv6</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>u_char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>u_int</name></type>		<name>m</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>b</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>zero_s</name></decl>,
				<decl><type ref="prev"/><name>zero_l</name></decl>,
				<decl><type ref="prev"/><name>tmp_zero_s</name></decl>,
				<decl><type ref="prev"/><name>tmp_zero_l</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>is_ipv4</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>inbuf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>outbuf</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:255.255.255.255/128"</literal></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>words</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>u_char</name>	   <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>bits</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>bits</name></expr></argument> &gt;</argument_list></name> <literal type="number">128</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>cp</name> <operator>=</operator> <name>outbuf</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* Copy src to private buffer.  Zero host part. */</comment>
		<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>bits</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>inbuf</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>inbuf</name> <operator>+</operator> <name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>b</name> <operator>=</operator> <name>bits</name> <operator>%</operator> <literal type="number">8</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>b</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>u_int</name><operator>)</operator> <operator>~</operator><literal type="number">0</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>b</name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>inbuf</name><index>[<expr><name>p</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;=</operator> <name>m</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>s</name> <operator>=</operator> <name>inbuf</name></expr>;</expr_stmt>

		<comment type="block">/* how many words need to be displayed in output */</comment>
		<expr_stmt><expr><name>words</name> <operator>=</operator> <operator>(</operator><name>bits</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>/</operator> <literal type="number">16</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>words</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>words</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* Find the longest substring of zero's */</comment>
		<expr_stmt><expr><name>zero_s</name> <operator>=</operator> <name>zero_l</name> <operator>=</operator> <name>tmp_zero_s</name> <operator>=</operator> <name>tmp_zero_l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>words</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>|</operator> <name><name>s</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>tmp_zero_l</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>tmp_zero_s</name> <operator>=</operator> <name>i</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>tmp_zero_l</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>tmp_zero_l</name> <operator>&amp;&amp;</operator> <name>zero_l</name> <operator>&lt;</operator> <name>tmp_zero_l</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>zero_s</name> <operator>=</operator> <name>tmp_zero_s</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>zero_l</name> <operator>=</operator> <name>tmp_zero_l</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>tmp_zero_l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></for>

		<if_stmt><if>if <condition>(<expr><name>tmp_zero_l</name> <operator>&amp;&amp;</operator> <name>zero_l</name> <operator>&lt;</operator> <name>tmp_zero_l</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>zero_s</name> <operator>=</operator> <name>tmp_zero_s</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>zero_l</name> <operator>=</operator> <name>tmp_zero_l</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>zero_l</name> <operator>!=</operator> <name>words</name> <operator>&amp;&amp;</operator> <name>zero_s</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>zero_l</name> <operator>==</operator> <literal type="number">6</literal><operator>)</operator> <operator>||</operator>
											   <operator>(</operator><operator>(</operator><name>zero_l</name> <operator>==</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>||</operator>
												<operator>(</operator><operator>(</operator><name>zero_l</name> <operator>==</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>is_ipv4</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* Format whole words. */</comment>
		<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>words</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>zero_l</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>p</name> <operator>&gt;=</operator> <name>zero_s</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;</operator> <name>zero_s</name> <operator>+</operator> <name>zero_l</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* Time to skip some zeros */</comment>
				<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>zero_s</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>words</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>is_ipv4</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>p</name> <operator>==</operator> <literal type="number">6</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">':'</literal></expr> </then><else>: <expr><literal type="char">'.'</literal></expr></else></ternary></expr>;</expr_stmt>
				<expr_stmt><expr><name>cp</name> <operator>+=</operator> <call><name>SPRINTF</name><argument_list>(<argument><expr><operator>(</operator><name>cp</name><operator>,</operator> <literal type="string">"%u"</literal><operator>,</operator> <operator>*</operator><name>s</name><operator>++</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* we can potentially drop the last octet */</comment>
				<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <literal type="number">7</literal> <operator>||</operator> <name>bits</name> <operator>&gt;</operator> <literal type="number">120</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>cp</name> <operator>+=</operator> <call><name>SPRINTF</name><argument_list>(<argument><expr><operator>(</operator><name>cp</name><operator>,</operator> <literal type="string">"%u"</literal><operator>,</operator> <operator>*</operator><name>s</name><operator>++</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>cp</name> <operator>!=</operator> <name>outbuf</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>cp</name><operator>++</operator> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>cp</name> <operator>+=</operator> <call><name>SPRINTF</name><argument_list>(<argument><expr><operator>(</operator><name>cp</name><operator>,</operator> <literal type="string">"%x"</literal><operator>,</operator> <operator>*</operator><name>s</name> <operator>*</operator> <literal type="number">256</literal> <operator>+</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></else></if_stmt>
	<comment type="block">/* Format CIDR /width. */</comment>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>SPRINTF</name><argument_list>(<argument><expr><operator>(</operator><name>cp</name><operator>,</operator> <literal type="string">"/%u"</literal><operator>,</operator> <name>bits</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>emsgsize</name>;</goto></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>outbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>dst</name></expr>;</return>

<label><name>emsgsize</name>:</label>
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EMSGSIZE</name></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
