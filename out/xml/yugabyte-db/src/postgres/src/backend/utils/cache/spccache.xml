<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/backend/utils/cache/spccache.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * spccache.c
 *	  Tablespace cache management.
 *
 * We cache the parsed version of spcoptions for each tablespace to avoid
 * needing to reparse on every lookup.  Right now, there doesn't appear to
 * be a measurable performance gain from doing this, but that might change
 * in the future as we add more options.
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *	  src/backend/utils/cache/spccache.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/reloptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_tablespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/tablespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/pg_yb_common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_yb_utils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/cost.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/bufmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/catcache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/hsearch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/inval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/jsonfuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/spccache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>


<comment type="block">/* Hash table for information about each tablespace */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>HTAB</name> <modifier>*</modifier></type><name>TableSpaceCacheHash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>Oid</name></type>			<name>oid</name></decl>;</decl_stmt>			<comment type="block">/* lookup key - must be first */</comment>
	<union>union <name>Opts_t</name>
	<block>{
		<decl_stmt><decl><type><name>TableSpaceOpts</name> <modifier>*</modifier></type><name>pg_opts</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>YBTableSpaceOpts</name> <modifier>*</modifier></type><name>yb_opts</name></decl>;</decl_stmt>
	}</block> <decl><name>opts</name></decl>;</union> 					<comment type="block">/* options, or NULL if none */</comment>
}</block></struct></type> <name>TableSpaceCacheEntry</name>;</typedef>

<comment type="block">/*
 * InvalidateTableSpaceCacheCallback
 *		Flush all cache entries when pg_tablespace is updated.
 *
 * When pg_tablespace is updated, we must flush the cache entry at least
 * for that tablespace.  Currently, we just flush them all.  This is quick
 * and easy and doesn't cost much, since there shouldn't be terribly many
 * tablespaces, nor do we expect them to be frequently modified.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>InvalidateTableSpaceCacheCallback</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cacheid</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>hashvalue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> <name>status</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TableSpaceCacheEntry</name> <modifier>*</modifier></type><name>spc</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><name>TableSpaceCacheHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>spc</name> <operator>=</operator> <operator>(</operator><name>TableSpaceCacheEntry</name> <operator>*</operator><operator>)</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>spc</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>pg_opts</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>spc</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>pg_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>hash_search</name><argument_list>(<argument><expr><name>TableSpaceCacheHash</name></expr></argument>,
						<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>spc</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>,
						<argument><expr><name>HASH_REMOVE</name></expr></argument>,
						<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"hash table corrupted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/*
 * InitializeTableSpaceCache
 *		Initialize the tablespace cache.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>InitializeTableSpaceCache</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HASHCTL</name></type>		<name>ctl</name></decl>;</decl_stmt>

	<comment type="block">/* Initialize the hash table. */</comment>
	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ctl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctl</name><operator>.</operator><name>keysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctl</name><operator>.</operator><name>entrysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TableSpaceCacheEntry</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name>TableSpaceCacheHash</name> <operator>=</operator>
		<call><name>hash_create</name><argument_list>(<argument><expr><literal type="string">"TableSpace cache"</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>,
					<argument><expr><name>HASH_ELEM</name> <operator>|</operator> <name>HASH_BLOBS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Make sure we've initialized CacheMemoryContext. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>CacheMemoryContext</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>CreateCacheMemoryContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Watch for invalidation events. */</comment>
	<expr_stmt><expr><call><name>CacheRegisterSyscacheCallback</name><argument_list>(<argument><expr><name>TABLESPACEOID</name></expr></argument>,
								  <argument><expr><name>InvalidateTableSpaceCacheCallback</name></expr></argument>,
								  <argument><expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * get_tablespace
 *		Fetch TableSpaceCacheEntry structure for a specified table OID.
 *
 * Pointers returned by this function should not be stored, since a cache
 * flush will invalidate them.
 */</comment>
<function><type><specifier>static</specifier> <name>TableSpaceCacheEntry</name> <modifier>*</modifier></type>
<name>get_tablespace</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>spcid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TableSpaceCacheEntry</name> <modifier>*</modifier></type><name>spc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TableSpaceOpts</name> <modifier>*</modifier></type><name>opts</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Since spcid is always from a pg_class tuple, InvalidOid implies the
	 * default.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>spcid</name> <operator>==</operator> <name>InvalidOid</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>spcid</name> <operator>=</operator> <name>MyDatabaseTableSpace</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Find existing cache entry, if any. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>TableSpaceCacheHash</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>InitializeTableSpaceCache</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>spc</name> <operator>=</operator> <operator>(</operator><name>TableSpaceCacheEntry</name> <operator>*</operator><operator>)</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>TableSpaceCacheHash</name></expr></argument>,
											   <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>spcid</name></expr></argument>,
											   <argument><expr><name>HASH_FIND</name></expr></argument>,
											   <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>spc</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>spc</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Not found in TableSpace cache.  Check catcache.  If we don't find a
	 * valid HeapTuple, it must mean someone has managed to request tablespace
	 * details for a non-existent tablespace.  We'll just treat that case as
	 * if no options were specified.
	 */</comment>
	<expr_stmt><expr><name>tp</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>TABLESPACEOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>spcid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>opts</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>Datum</name></type>		<name>datum</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>isNull</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>datum</name> <operator>=</operator> <call><name>SysCacheGetAttr</name><argument_list>(<argument><expr><name>TABLESPACEOID</name></expr></argument>,
								<argument><expr><name>tp</name></expr></argument>,
								<argument><expr><name>Anum_pg_tablespace_spcoptions</name></expr></argument>,
								<argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>isNull</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>opts</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>bytea</name> <modifier>*</modifier></type><name>bytea_opts</name></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>IsYugaByteEnabled</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>bytea_opts</name> <operator>=</operator> <call><name>yb_tablespace_reloptions</name><argument_list>(<argument><expr><name>datum</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>bytea_opts</name> <operator>=</operator> <call><name>tablespace_reloptions</name><argument_list>(<argument><expr><name>datum</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<expr_stmt><expr><name>opts</name> <operator>=</operator> <call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name>CacheMemoryContext</name></expr></argument>, <argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>bytea_opts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>bytea_opts</name></expr></argument>, <argument><expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name>bytea_opts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * Now create the cache entry.  It's important to do this only after
	 * reading the pg_tablespace entry, since doing so could cause a cache
	 * flush.
	 */</comment>
	<expr_stmt><expr><name>spc</name> <operator>=</operator> <operator>(</operator><name>TableSpaceCacheEntry</name> <operator>*</operator><operator>)</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>TableSpaceCacheHash</name></expr></argument>,
											   <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>spcid</name></expr></argument>,
											   <argument><expr><name>HASH_ENTER</name></expr></argument>,
											   <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Equivalent to spc-&gt;opts.yb_opts = opts as spc-&gt;opts is a union between
	 * yb_opts and pg_opts.
	 */</comment>
	<expr_stmt><expr><name><name>spc</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>pg_opts</name></name> <operator>=</operator> <name>opts</name></expr>;</expr_stmt>
	<return>return <expr><name>spc</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * get_tablespace_distance
 *
 *		Returns a GeolocationDistance indicating how far away a given
 *		tablespace is from the current node.
 */</comment>
<function><type><name>GeolocationDistance</name></type> <name>get_tablespace_distance</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>spcid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>IsYugaByteEnabled</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>spcid</name> <operator>==</operator> <name>InvalidOid</name></expr>)</condition><block type="pseudo"><block_content>
       <return>return <expr><name>UNKNOWN_DISTANCE</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>TableSpaceCacheEntry</name> <modifier>*</modifier></type><name>spc</name> <init>= <expr><call><name>get_tablespace</name><argument_list>(<argument><expr><name>spcid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>spc</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>yb_opts</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>UNKNOWN_DISTANCE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * The tablespace options json is stored as a payload after the header
	 * information in memory address pointed to by spc-&gt;opts.yb_opts. In other
	 * words, the json is stored sizeof(YBTableSpaceOpts) bytes after the
	 * memory adddress in spc-&gt;opts.yb_opts
	 */</comment>
	<decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>tsp_options_json</name> <init>= <expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator>
								<operator>(</operator><name><name>spc</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>yb_opts</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>placement_array</name> <init>= <expr><call><name>json_get_value</name><argument_list>(<argument><expr><name>tsp_options_json</name></expr></argument>,
											<argument><expr><literal type="string">"placement_blocks"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>length</name> <init>= <expr><call><name>get_json_array_length</name><argument_list>(<argument><expr><name>placement_array</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>keys</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"cloud"</literal></expr>, <expr><literal type="string">"region"</literal></expr>, <expr><literal type="string">"zone"</literal></expr>, <expr><literal type="string">"min_num_replicas"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>current_cloud</name> <init>= <expr><call><name>YBGetCurrentCloud</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>current_region</name> <init>= <expr><call><name>YBGetCurrentRegion</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>current_zone</name> <init>= <expr><call><name>YBGetCurrentZone</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>current_cloud</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>current_region</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>current_zone</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* no placement info specified, so nothing to do */</comment>
		<return>return <expr><name>UNKNOWN_DISTANCE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>GeolocationDistance</name></type> <name>farthest</name> <init>= <expr><name>ZONE_LOCAL</name></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>GeolocationDistance</name></type> <name>current_dist</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>json_element</name> <init>= <expr><call><name>get_json_array_element</name><argument_list>(<argument><expr><name>placement_array</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tsp_cloud</name> <init>= <expr><call><name>text_to_cstring</name><argument_list>(
			<argument><expr><call><name>json_get_denormalized_value</name><argument_list>(<argument><expr><name>json_element</name></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tsp_region</name> <init>= <expr><call><name>text_to_cstring</name><argument_list>(
			<argument><expr><call><name>json_get_denormalized_value</name><argument_list>(<argument><expr><name>json_element</name></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tsp_zone</name> <init>= <expr><call><name>text_to_cstring</name><argument_list>(
			<argument><expr><call><name>json_get_denormalized_value</name><argument_list>(<argument><expr><name>json_element</name></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


		<comment type="block">/* are the current cloud and the given cloud the same */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>tsp_cloud</name></expr></argument>, <argument><expr><name>current_cloud</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* are the current region and the given region the same */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>tsp_region</name></expr></argument>, <argument><expr><name>current_region</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* are the current cloud and the given zone the same */</comment>
				<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>tsp_zone</name></expr></argument>, <argument><expr><name>current_zone</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>current_dist</name> <operator>=</operator> <name>ZONE_LOCAL</name></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><name>current_dist</name> <operator>=</operator> <name>REGION_LOCAL</name></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name>current_dist</name> <operator>=</operator> <name>CLOUD_LOCAL</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>current_dist</name> <operator>=</operator> <name>INTER_CLOUD</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>farthest</name> <operator>=</operator> <ternary><condition><expr><name>current_dist</name> <operator>&gt;</operator> <name>farthest</name></expr> ?</condition><then> <expr><name>current_dist</name></expr> </then><else>: <expr><name>farthest</name></expr></else></ternary></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>farthest</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * get_yb_tablespace_cost
 *
 *		Costs per-tuple access on a given tablespace. Currently we score a
 *		placement option in a tablespace by assigning a cost based on its
 *		distance that is denoted by a GeolocationDistance. The computed cost
 *		is stored in yb_tsp_cost. Returns false iff geolocation costing is
 *		disabled or a NULL pointer was passed in for yb_tsp_cost.
 */</comment>
<function><type><name>bool</name></type> <name>get_yb_tablespace_cost</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>spcid</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>yb_tsp_cost</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>yb_enable_geolocation_costing</name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>IsYugaByteEnabled</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>yb_tsp_cost</name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>GeolocationDistance</name></type> <name>distance</name> <init>= <expr><call><name>get_tablespace_distance</name><argument_list>(<argument><expr><name>spcid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>cost</name></decl>;</decl_stmt>
	<switch>switch <condition>(<expr><name>distance</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>UNKNOWN_DISTANCE</name></expr>:</case>
			<expr_stmt><expr><call><name>switch_fallthrough</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<case>case <expr><name>INTER_CLOUD</name></expr>:</case>
			<expr_stmt><expr><name>cost</name> <operator>=</operator> <name>yb_intercloud_cost</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>CLOUD_LOCAL</name></expr>:</case>
			<expr_stmt><expr><name>cost</name> <operator>=</operator> <name>yb_interregion_cost</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>REGION_LOCAL</name></expr>:</case>
			<expr_stmt><expr><name>cost</name> <operator>=</operator> <name>yb_interzone_cost</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ZONE_LOCAL</name></expr>:</case>
			<expr_stmt><expr><name>cost</name> <operator>=</operator> <name>yb_local_cost</name></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<expr_stmt><expr><operator>*</operator><name>yb_tsp_cost</name> <operator>=</operator> <name>cost</name></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * get_tablespace_page_costs
 *		Return random and/or sequential page costs for a given tablespace.
 *
 *		This value is not locked by the transaction, so this value may
 *		be changed while a SELECT that has used these values for planning
 *		is still executing.
 */</comment>
<function><type><name>void</name></type>
<name>get_tablespace_page_costs</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>spcid</name></decl></parameter>,
						  <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>spc_random_page_cost</name></decl></parameter>,
						  <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>spc_seq_page_cost</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TableSpaceCacheEntry</name> <modifier>*</modifier></type><name>spc</name> <init>= <expr><call><name>get_tablespace</name><argument_list>(<argument><expr><name>spcid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>spc_random_page_cost</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>spc</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>pg_opts</name></name> <operator>||</operator> <name><name>spc</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>pg_opts</name><operator>-&gt;</operator><name>random_page_cost</name></name> <operator>&lt;</operator> <literal type="number">0</literal>
			<operator>||</operator> <call><name>IsYugaByteEnabled</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>spc_random_page_cost</name> <operator>=</operator> <name>random_page_cost</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>spc_random_page_cost</name> <operator>=</operator> <name><name>spc</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>pg_opts</name><operator>-&gt;</operator><name>random_page_cost</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>spc_seq_page_cost</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>spc</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>pg_opts</name></name> <operator>||</operator> <name><name>spc</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>pg_opts</name><operator>-&gt;</operator><name>seq_page_cost</name></name> <operator>&lt;</operator> <literal type="number">0</literal>
			<operator>||</operator> <call><name>IsYugaByteEnabled</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>spc_seq_page_cost</name> <operator>=</operator> <name>seq_page_cost</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>spc_seq_page_cost</name> <operator>=</operator> <name><name>spc</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>pg_opts</name><operator>-&gt;</operator><name>seq_page_cost</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * get_tablespace_io_concurrency
 *
 *		This value is not locked by the transaction, so this value may
 *		be changed while a SELECT that has used these values for planning
 *		is still executing.
 */</comment>
<function><type><name>int</name></type>
<name>get_tablespace_io_concurrency</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>spcid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TableSpaceCacheEntry</name> <modifier>*</modifier></type><name>spc</name> <init>= <expr><call><name>get_tablespace</name><argument_list>(<argument><expr><name>spcid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>spc</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>pg_opts</name></name> <operator>||</operator> <name><name>spc</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>pg_opts</name><operator>-&gt;</operator><name>effective_io_concurrency</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>effective_io_concurrency</name></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name><name>spc</name><operator>-&gt;</operator><name>opts</name><operator>.</operator><name>pg_opts</name><operator>-&gt;</operator><name>effective_io_concurrency</name></name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
</unit>
