<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/backend/utils/misc/sampling.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * sampling.c
 *	  Relation block sampling routines.
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/utils/misc/sampling.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/sampling.h"</cpp:file></cpp:include>


<comment type="block">/*
 * BlockSampler_Init -- prepare for random sampling of blocknumbers
 *
 * BlockSampler provides algorithm for block level sampling of a relation
 * as discussed on pgsql-hackers 2004-04-02 (subject "Large DB")
 * It selects a random sample of samplesize blocks out of
 * the nblocks blocks in the table. If the table has less than
 * samplesize blocks, all blocks are selected.
 *
 * Since we know the total number of blocks in advance, we can use the
 * straightforward Algorithm S from Knuth 3.4.2, rather than Vitter's
 * algorithm.
 */</comment>
<function><type><name>void</name></type>
<name>BlockSampler_Init</name><parameter_list>(<parameter><decl><type><name>BlockSampler</name></type> <name>bs</name></decl></parameter>, <parameter><decl><type><name>BlockNumber</name></type> <name>nblocks</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>samplesize</name></decl></parameter>,
				  <parameter><decl><type><name>long</name></type> <name>randseed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>N</name></name> <operator>=</operator> <name>nblocks</name></expr>;</expr_stmt>			<comment type="block">/* measured table size */</comment>

	<comment type="block">/*
	 * If we decide to reduce samplesize for tables that have less or not much
	 * more than samplesize blocks, here is the place to do it.
	 */</comment>
	<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <name>samplesize</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>t</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>					<comment type="block">/* blocks scanned so far */</comment>
	<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>m</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>					<comment type="block">/* blocks selected so far */</comment>

	<expr_stmt><expr><call><name>sampler_random_init_state</name><argument_list>(<argument><expr><name>randseed</name></expr></argument>, <argument><expr><name><name>bs</name><operator>-&gt;</operator><name>randstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>BlockSampler_HasMore</name><parameter_list>(<parameter><decl><type><name>BlockSampler</name></type> <name>bs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name><name>bs</name><operator>-&gt;</operator><name>t</name></name> <operator>&lt;</operator> <name><name>bs</name><operator>-&gt;</operator><name>N</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>bs</name><operator>-&gt;</operator><name>m</name></name> <operator>&lt;</operator> <name><name>bs</name><operator>-&gt;</operator><name>n</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>BlockNumber</name></type>
<name>BlockSampler_Next</name><parameter_list>(<parameter><decl><type><name>BlockSampler</name></type> <name>bs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BlockNumber</name></type> <name>K</name> <init>= <expr><name><name>bs</name><operator>-&gt;</operator><name>N</name></name> <operator>-</operator> <name><name>bs</name><operator>-&gt;</operator><name>t</name></name></expr></init></decl>;</decl_stmt>	<comment type="block">/* remaining blocks */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>k</name> <init>= <expr><name><name>bs</name><operator>-&gt;</operator><name>n</name></name> <operator>-</operator> <name><name>bs</name><operator>-&gt;</operator><name>m</name></name></expr></init></decl>;</decl_stmt>	<comment type="block">/* blocks still to sample */</comment>
	<decl_stmt><decl><type><name>double</name></type>		<name>p</name></decl>;</decl_stmt>				<comment type="block">/* probability to skip block */</comment>
	<decl_stmt><decl><type><name>double</name></type>		<name>V</name></decl>;</decl_stmt>				<comment type="block">/* random */</comment>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>BlockSampler_HasMore</name><argument_list>(<argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* hence K &gt; 0 and k &gt; 0 */</comment>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>BlockNumber</name><operator>)</operator> <name>k</name> <operator>&gt;=</operator> <name>K</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* need all the rest */</comment>
		<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>m</name></name><operator>++</operator></expr>;</expr_stmt>
		<return>return <expr><name><name>bs</name><operator>-&gt;</operator><name>t</name></name><operator>++</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*----------
	 * It is not obvious that this code matches Knuth's Algorithm S.
	 * Knuth says to skip the current block with probability 1 - k/K.
	 * If we are to skip, we should advance t (hence decrease K), and
	 * repeat the same probabilistic test for the next block.  The naive
	 * implementation thus requires a sampler_random_fract() call for each
	 * block number.  But we can reduce this to one sampler_random_fract()
	 * call per selected block, by noting that each time the while-test
	 * succeeds, we can reinterpret V as a uniform random number in the range
	 * 0 to p. Therefore, instead of choosing a new V, we just adjust p to be
	 * the appropriate fraction of its former value, and our next loop
	 * makes the appropriate probabilistic test.
	 *
	 * We have initially K &gt; k &gt; 0.  If the loop reduces K to equal k,
	 * the next while-test must fail since p will become exactly zero
	 * (we assume there will not be roundoff error in the division).
	 * (Note: Knuth suggests a "&lt;=" loop condition, but we use "&lt;" just
	 * to be doubly sure about roundoff error.)  Therefore K cannot become
	 * less than k, which means that we cannot fail to select enough blocks.
	 *----------
	 */</comment>
	<expr_stmt><expr><name>V</name> <operator>=</operator> <call><name>sampler_random_fract</name><argument_list>(<argument><expr><name><name>bs</name><operator>-&gt;</operator><name>randstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>-</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>k</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>K</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>V</name> <operator>&lt;</operator> <name>p</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* skip */</comment>
		<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>t</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>K</name><operator>--</operator></expr>;</expr_stmt>					<comment type="block">/* keep K == N - t */</comment>

		<comment type="block">/* adjust p to be new cutoff point in reduced range */</comment>
		<expr_stmt><expr><name>p</name> <operator>*=</operator> <literal type="number">1.0</literal> <operator>-</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>k</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>K</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/* select */</comment>
	<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>m</name></name><operator>++</operator></expr>;</expr_stmt>
	<return>return <expr><name><name>bs</name><operator>-&gt;</operator><name>t</name></name><operator>++</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * These two routines embody Algorithm Z from "Random sampling with a
 * reservoir" by Jeffrey S. Vitter, in ACM Trans. Math. Softw. 11, 1
 * (Mar. 1985), Pages 37-57.  Vitter describes his algorithm in terms
 * of the count S of records to skip before processing another record.
 * It is computed primarily based on t, the number of records already read.
 * The only extra state needed between calls is W, a random state variable.
 *
 * reservoir_init_selection_state computes the initial W value.
 *
 * Given that we've already read t records (t &gt;= n), reservoir_get_next_S
 * determines the number of records to skip before the next record is
 * processed.
 */</comment>
<function><type><name>void</name></type>
<name>reservoir_init_selection_state</name><parameter_list>(<parameter><decl><type><name>ReservoirState</name></type> <name>rs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Reservoir sampling is not used anywhere where it would need to return
	 * repeatable results so we can initialize it randomly.
	 */</comment>
	<expr_stmt><expr><call><name>sampler_random_init_state</name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>rs</name><operator>-&gt;</operator><name>randstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Initial value of W (for use when Algorithm Z is first applied) */</comment>
	<expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>W</name></name> <operator>=</operator> <call><name>exp</name><argument_list>(<argument><expr><operator>-</operator><call><name>log</name><argument_list>(<argument><expr><call><name>sampler_random_fract</name><argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>randstate</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>/</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>double</name></type>
<name>reservoir_get_next_S</name><parameter_list>(<parameter><decl><type><name>ReservoirState</name></type> <name>rs</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>double</name></type>		<name>S</name></decl>;</decl_stmt>

	<comment type="block">/* The magic constant here is T from Vitter's paper */</comment>
	<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&lt;=</operator> <operator>(</operator><literal type="number">22.0</literal> <operator>*</operator> <name>n</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Process records using Algorithm X until t is large enough */</comment>
		<decl_stmt><decl><type><name>double</name></type>		<name>V</name></decl>,
					<decl><type ref="prev"/><name>quot</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>V</name> <operator>=</operator> <call><name>sampler_random_fract</name><argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>randstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* Generate V */</comment>
		<expr_stmt><expr><name>S</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<comment type="block">/* Note: "num" in Vitter's code is always equal to t - n */</comment>
		<expr_stmt><expr><name>quot</name> <operator>=</operator> <operator>(</operator><name>t</name> <operator>-</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>n</name><operator>)</operator> <operator>/</operator> <name>t</name></expr>;</expr_stmt>
		<comment type="block">/* Find min S satisfying (4.1) */</comment>
		<while>while <condition>(<expr><name>quot</name> <operator>&gt;</operator> <name>V</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>S</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>t</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>quot</name> <operator>*=</operator> <operator>(</operator><name>t</name> <operator>-</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>n</name><operator>)</operator> <operator>/</operator> <name>t</name></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* Now apply Algorithm Z */</comment>
		<decl_stmt><decl><type><name>double</name></type>		<name>W</name> <init>= <expr><name><name>rs</name><operator>-&gt;</operator><name>W</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>double</name></type>		<name>term</name> <init>= <expr><name>t</name> <operator>-</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>double</name></type>		<name>numer</name></decl>,
						<decl><type ref="prev"/><name>numer_lim</name></decl>,
						<decl><type ref="prev"/><name>denom</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>double</name></type>		<name>U</name></decl>,
						<decl><type ref="prev"/><name>X</name></decl>,
						<decl><type ref="prev"/><name>lhs</name></decl>,
						<decl><type ref="prev"/><name>rhs</name></decl>,
						<decl><type ref="prev"/><name>y</name></decl>,
						<decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

			<comment type="block">/* Generate U and X */</comment>
			<expr_stmt><expr><name>U</name> <operator>=</operator> <call><name>sampler_random_fract</name><argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>randstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>X</name> <operator>=</operator> <name>t</name> <operator>*</operator> <operator>(</operator><name>W</name> <operator>-</operator> <literal type="number">1.0</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>S</name> <operator>=</operator> <call><name>floor</name><argument_list>(<argument><expr><name>X</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* S is tentatively set to floor(X) */</comment>
			<comment type="block">/* Test if U &lt;= h(S)/cg(X) in the manner of (6.3) */</comment>
			<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><name>t</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>term</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>lhs</name> <operator>=</operator> <call><name>exp</name><argument_list>(<argument><expr><call><name>log</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>U</name> <operator>*</operator> <name>tmp</name> <operator>*</operator> <name>tmp</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>term</name> <operator>+</operator> <name>S</name><operator>)</operator><operator>)</operator> <operator>/</operator> <operator>(</operator><name>t</name> <operator>+</operator> <name>X</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>/</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>rhs</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>t</name> <operator>+</operator> <name>X</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>term</name> <operator>+</operator> <name>S</name><operator>)</operator><operator>)</operator> <operator>*</operator> <name>term</name><operator>)</operator> <operator>/</operator> <name>t</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>lhs</name> <operator>&lt;=</operator> <name>rhs</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>W</name> <operator>=</operator> <name>rhs</name> <operator>/</operator> <name>lhs</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Test if U &lt;= f(S)/cg(X) */</comment>
			<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>U</name> <operator>*</operator> <operator>(</operator><name>t</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>term</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>t</name> <operator>+</operator> <name>S</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <operator>(</operator><name>t</name> <operator>+</operator> <name>X</name><operator>)</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>double</name><operator>)</operator> <name>n</name> <operator>&lt;</operator> <name>S</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>denom</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>numer_lim</name> <operator>=</operator> <name>term</name> <operator>+</operator> <name>S</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name>denom</name> <operator>=</operator> <name>t</name> <operator>-</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>n</name> <operator>+</operator> <name>S</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>numer_lim</name> <operator>=</operator> <name>t</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<for>for <control>(<init><expr><name>numer</name> <operator>=</operator> <name>t</name> <operator>+</operator> <name>S</name></expr>;</init> <condition><expr><name>numer</name> <operator>&gt;=</operator> <name>numer_lim</name></expr>;</condition> <incr><expr><name>numer</name> <operator>-=</operator> <literal type="number">1</literal></expr></incr>)</control>
			<block>{<block_content>
				<expr_stmt><expr><name>y</name> <operator>*=</operator> <name>numer</name> <operator>/</operator> <name>denom</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>denom</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></for>
			<expr_stmt><expr><name>W</name> <operator>=</operator> <call><name>exp</name><argument_list>(<argument><expr><operator>-</operator><call><name>log</name><argument_list>(<argument><expr><call><name>sampler_random_fract</name><argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>randstate</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>/</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Generate W in advance */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>exp</name><argument_list>(<argument><expr><call><name>log</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>n</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <operator>(</operator><name>t</name> <operator>+</operator> <name>X</name><operator>)</operator> <operator>/</operator> <name>t</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name><name>rs</name><operator>-&gt;</operator><name>W</name></name> <operator>=</operator> <name>W</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>S</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*----------
 * Random number generator used by sampling
 *----------
 */</comment>
<function><type><name>void</name></type>
<name>sampler_random_init_state</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>seed</name></decl></parameter>, <parameter><decl><type><name>SamplerRandomState</name></type> <name>randstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>randstate</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x330e</literal></expr>;</expr_stmt>		<comment type="block">/* same as pg_erand48, but could be anything */</comment>
	<expr_stmt><expr><name><name>randstate</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator> <name>seed</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>randstate</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator> <operator>(</operator><name>seed</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Select a random value R uniformly distributed in (0 - 1) */</comment>
<function><type><name>double</name></type>
<name>sampler_random_fract</name><parameter_list>(<parameter><decl><type><name>SamplerRandomState</name></type> <name>randstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>double</name></type>		<name>res</name></decl>;</decl_stmt>

	<comment type="block">/* pg_erand48 returns a value in [0.0 - 1.0), so we must reject 0 */</comment>
	<do>do
	<block>{<block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pg_erand48</name><argument_list>(<argument><expr><name>randstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">0.0</literal></expr>)</condition>;</do>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Backwards-compatible API for block sampling
 *
 * This code is now deprecated, but since it's still in use by many FDWs,
 * we should keep it for awhile at least.  The functionality is the same as
 * sampler_random_fract/reservoir_init_selection_state/reservoir_get_next_S,
 * except that a common random state is used across all callers.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>ReservoirStateData</name></type> <name>oldrs</name></decl>;</decl_stmt>

<function><type><name>double</name></type>
<name>anl_random_fract</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* initialize if first time through */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>oldrs</name><operator>.</operator><name>randstate</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>sampler_random_init_state</name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>oldrs</name><operator>.</operator><name>randstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* and compute a random fraction */</comment>
	<return>return <expr><call><name>sampler_random_fract</name><argument_list>(<argument><expr><name><name>oldrs</name><operator>.</operator><name>randstate</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>double</name></type>
<name>anl_init_selection_state</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* initialize if first time through */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>oldrs</name><operator>.</operator><name>randstate</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>sampler_random_init_state</name><argument_list>(<argument><expr><call><name>random</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>oldrs</name><operator>.</operator><name>randstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Initial value of W (for use when Algorithm Z is first applied) */</comment>
	<return>return <expr><call><name>exp</name><argument_list>(<argument><expr><operator>-</operator><call><name>log</name><argument_list>(<argument><expr><call><name>sampler_random_fract</name><argument_list>(<argument><expr><name><name>oldrs</name><operator>.</operator><name>randstate</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>/</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>double</name></type>
<name>anl_get_next_S</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>stateptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>double</name></type>		<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>oldrs</name><operator>.</operator><name>W</name></name> <operator>=</operator> <operator>*</operator><name>stateptr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>reservoir_get_next_S</name><argument_list>(<argument><expr><operator>&amp;</operator><name>oldrs</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>stateptr</name> <operator>=</operator> <name><name>oldrs</name><operator>.</operator><name>W</name></name></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
</unit>
