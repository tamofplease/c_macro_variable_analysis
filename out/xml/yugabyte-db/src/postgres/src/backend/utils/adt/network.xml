<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/backend/utils/adt/network.c"><comment type="block">/*
 *	PostgreSQL type definitions for the INET and CIDR types.
 *
 *	src/backend/utils/adt/network.c
 *
 *	Jon Postel RIP 16 Oct 1998
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/ip.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/libpq-be.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/pqformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/inet.h"</cpp:file></cpp:include>


<function_decl><type><specifier>static</specifier> <name>int32</name></type> <name>network_cmp_internal</name><parameter_list>(<parameter><decl><type><name>inet</name> <modifier>*</modifier></type><name>a1</name></decl></parameter>, <parameter><decl><type><name>inet</name> <modifier>*</modifier></type><name>a2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>addressOK</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>family</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>inet</name> <modifier>*</modifier></type><name>internal_inetpl</name><parameter_list>(<parameter><decl><type><name>inet</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>addend</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * Common INET/CIDR input routine
 */</comment>
<function><type><specifier>static</specifier> <name>inet</name> <modifier>*</modifier></type>
<name>network_in</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_cidr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>bits</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>inet</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>inet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * First, check to see if this is an IPv6 or IPv4 address.  IPv6 addresses
	 * will have a : somewhere in them (several, in fact) so if there is one
	 * present, assume it's V6, otherwise assume it's V4.
	 */</comment>

	<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ip_family</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>PGSQL_AF_INET6</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ip_family</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>PGSQL_AF_INET</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>inet_net_pton</name><argument_list>(<argument><expr><call><name>ip_family</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><call><name>ip_addr</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>,
						 <argument><expr><ternary><condition><expr><name>is_cidr</name></expr> ?</condition><then> <expr><call><name>ip_addrsize</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bits</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>bits</name> <operator>&gt;</operator> <call><name>ip_maxbits</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_TEXT_REPRESENTATION</name></expr></argument>)</argument_list></call><operator>,</operator>
		<comment type="block">/* translator: first %s is inet or cidr */</comment>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid input syntax for type %s: \"%s\""</literal></expr></argument>,
						<argument><expr><ternary><condition><expr><name>is_cidr</name></expr> ?</condition><then> <expr><literal type="string">"cidr"</literal></expr> </then><else>: <expr><literal type="string">"inet"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Error check: CIDR values must not have any bits set beyond the masklen.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>is_cidr</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>addressOK</name><argument_list>(<argument><expr><call><name>ip_addr</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><call><name>ip_family</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_TEXT_REPRESENTATION</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid cidr value: \"%s\""</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Value has bits set to right of mask."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ip_bits</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SET_INET_VARSIZE</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>inet_in</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>src</name> <init>= <expr><call><name>PG_GETARG_CSTRING</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_INET_P</name><argument_list>(<argument><expr><call><name>network_in</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>cidr_in</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>src</name> <init>= <expr><call><name>PG_GETARG_CSTRING</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_INET_P</name><argument_list>(<argument><expr><call><name>network_in</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Common INET/CIDR output routine
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>network_out</name><parameter_list>(<parameter><decl><type><name>inet</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_cidr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>tmp</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:255.255.255.255/128"</literal></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>inet_net_ntop</name><argument_list>(<argument><expr><call><name>ip_family</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ip_addr</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ip_bits</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_BINARY_REPRESENTATION</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not format inet value: %m"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* For CIDR, add /n if not present */</comment>
	<if_stmt><if>if <condition>(<expr><name>is_cidr</name> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"/%u"</literal></expr></argument>, <argument><expr><call><name>ip_bits</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>pstrdup</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>inet_out</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>src</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_CSTRING</name><argument_list>(<argument><expr><call><name>network_out</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>cidr_out</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>src</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_CSTRING</name><argument_list>(<argument><expr><call><name>network_out</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 *		network_recv		- converts external binary format to inet
 *
 * The external representation is (one byte apiece for)
 * family, bits, is_cidr, address length, address in network byte order.
 *
 * Presence of is_cidr is largely for historical reasons, though it might
 * allow some code-sharing on the client side.  We send it correctly on
 * output, but ignore the value on input.
 */</comment>
<function><type><specifier>static</specifier> <name>inet</name> <modifier>*</modifier></type>
<name>network_recv</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_cidr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>addr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>addrptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>bits</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nb</name></decl>,
				<decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

	<comment type="block">/* make sure any unused bits in a CIDR value are zeroed */</comment>
	<expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>(</operator><name>inet</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>inet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ip_family</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>pq_getmsgbyte</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>ip_family</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PGSQL_AF_INET</name> <operator>&amp;&amp;</operator>
		<call><name>ip_family</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PGSQL_AF_INET6</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_BINARY_REPRESENTATION</name></expr></argument>)</argument_list></call><operator>,</operator>
		<comment type="block">/* translator: %s is inet or cidr */</comment>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid address family in external \"%s\" value"</literal></expr></argument>,
						<argument><expr><ternary><condition><expr><name>is_cidr</name></expr> ?</condition><then> <expr><literal type="string">"cidr"</literal></expr> </then><else>: <expr><literal type="string">"inet"</literal></expr></else></ternary></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>pq_getmsgbyte</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>bits</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>bits</name></expr></argument> &gt;</argument_list></name> <call><name>ip_maxbits</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_BINARY_REPRESENTATION</name></expr></argument>)</argument_list></call><operator>,</operator>
		<comment type="block">/* translator: %s is inet or cidr */</comment>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid bits in external \"%s\" value"</literal></expr></argument>,
						<argument><expr><ternary><condition><expr><name>is_cidr</name></expr> ?</condition><then> <expr><literal type="string">"cidr"</literal></expr> </then><else>: <expr><literal type="string">"inet"</literal></expr></else></ternary></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>ip_bits</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>pq_getmsgbyte</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* ignore is_cidr */</comment>
	<expr_stmt><expr><name>nb</name> <operator>=</operator> <call><name>pq_getmsgbyte</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>nb</name> <operator>!=</operator> <call><name>ip_addrsize</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_BINARY_REPRESENTATION</name></expr></argument>)</argument_list></call><operator>,</operator>
		<comment type="block">/* translator: %s is inet or cidr */</comment>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid length in external \"%s\" value"</literal></expr></argument>,
						<argument><expr><ternary><condition><expr><name>is_cidr</name></expr> ?</condition><then> <expr><literal type="string">"cidr"</literal></expr> </then><else>: <expr><literal type="string">"inet"</literal></expr></else></ternary></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>addrptr</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>ip_addr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>addrptr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>pq_getmsgbyte</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<comment type="block">/*
	 * Error check: CIDR values must not have any bits set beyond the masklen.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>is_cidr</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>addressOK</name><argument_list>(<argument><expr><call><name>ip_addr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><call><name>ip_family</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_BINARY_REPRESENTATION</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid external \"cidr\" value"</literal></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Value has bits set to right of mask."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>SET_INET_VARSIZE</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>addr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>inet_recv</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StringInfo</name></type>	<name>buf</name> <init>= <expr><operator>(</operator><name>StringInfo</name><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_INET_P</name><argument_list>(<argument><expr><call><name>network_recv</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>cidr_recv</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StringInfo</name></type>	<name>buf</name> <init>= <expr><operator>(</operator><name>StringInfo</name><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_INET_P</name><argument_list>(<argument><expr><call><name>network_recv</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 *		network_send		- converts inet to binary format
 */</comment>
<function><type><specifier>static</specifier> <name>bytea</name> <modifier>*</modifier></type>
<name>network_send</name><parameter_list>(<parameter><decl><type><name>inet</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_cidr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>addrptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nb</name></decl>,
				<decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pq_begintypsend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><call><name>ip_family</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><call><name>ip_bits</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>is_cidr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>nb</name> <operator>=</operator> <call><name>ip_addrsize</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>nb</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>nb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>nb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>addrptr</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>ip_addr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>addrptr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<return>return <expr><call><name>pq_endtypsend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>inet_send</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>addr</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BYTEA_P</name><argument_list>(<argument><expr><call><name>network_send</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>cidr_send</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>addr</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BYTEA_P</name><argument_list>(<argument><expr><call><name>network_send</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>inet_to_cidr</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>src</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>bits</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>ip_bits</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* safety check */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bits</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>bits</name> <operator>&gt;</operator> <call><name>ip_maxbits</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid inet bit length: %d"</literal></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_INET_P</name><argument_list>(<argument><expr><call><name>cidr_set_masklen_internal</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>inet_set_masklen</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>src</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>bits</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>ip_maxbits</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bits</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>bits</name> <operator>&gt;</operator> <call><name>ip_maxbits</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid mask length: %d"</literal></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* clone the original data */</comment>
	<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>inet</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><call><name>VARSIZE_ANY</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><call><name>VARSIZE_ANY</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ip_bits</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_INET_P</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>cidr_set_masklen</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>src</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>bits</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>ip_maxbits</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bits</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>bits</name> <operator>&gt;</operator> <call><name>ip_maxbits</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid mask length: %d"</literal></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_INET_P</name><argument_list>(<argument><expr><call><name>cidr_set_masklen_internal</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Copy src and set mask length to 'bits' (which must be valid for the family)
 */</comment>
<function><type><name>inet</name> <modifier>*</modifier></type>
<name>cidr_set_masklen_internal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>inet</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>inet</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>inet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ip_family</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>ip_family</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ip_bits</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>bits</name> <operator>&lt;=</operator> <call><name>ip_maxbits</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Clone appropriate bytes of the address, leaving the rest 0 */</comment>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>ip_addr</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ip_addr</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>bits</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Clear any unwanted bits in the last partial byte */</comment>
		<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>%</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ip_addr</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call><index>[<expr><name>bits</name> <operator>/</operator> <literal type="number">8</literal></expr>]</index> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><literal type="number">0xFF</literal> <operator>&gt;&gt;</operator> <operator>(</operator><name>bits</name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Set varlena header correctly */</comment>
	<expr_stmt><expr><call><name>SET_INET_VARSIZE</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 *	Basic comparison function for sorting and inet/cidr comparisons.
 *
 * Comparison is first on the common bits of the network part, then on
 * the length of the network part, and then on the whole unmasked address.
 * The effect is that the network part is the major sort key, and for
 * equal network parts we sort on the host part.  Note this is only sane
 * for CIDR if address bits to the right of the mask are guaranteed zero;
 * otherwise logically-equal CIDRs might compare different.
 */</comment>

<function><type><specifier>static</specifier> <name>int32</name></type>
<name>network_cmp_internal</name><parameter_list>(<parameter><decl><type><name>inet</name> <modifier>*</modifier></type><name>a1</name></decl></parameter>, <parameter><decl><type><name>inet</name> <modifier>*</modifier></type><name>a2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>ip_family</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>ip_family</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>order</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>order</name> <operator>=</operator> <call><name>bitncmp</name><argument_list>(<argument><expr><call><name>ip_addr</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ip_addr</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><call><name>Min</name><argument_list>(<argument><expr><call><name>ip_bits</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ip_bits</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>order</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>order</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>order</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <call><name>ip_bits</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <call><name>ip_bits</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>order</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>order</name></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><call><name>bitncmp</name><argument_list>(<argument><expr><call><name>ip_addr</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ip_addr</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ip_maxbits</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>ip_family</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>ip_family</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>network_cmp</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>a1</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>a2</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><call><name>network_cmp_internal</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 *	Boolean ordering tests.
 */</comment>
<function><type><name>Datum</name></type>
<name>network_lt</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>a1</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>a2</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><call><name>network_cmp_internal</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>network_le</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>a1</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>a2</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><call><name>network_cmp_internal</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>network_eq</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>a1</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>a2</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><call><name>network_cmp_internal</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>network_ge</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>a1</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>a2</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><call><name>network_cmp_internal</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>network_gt</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>a1</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>a2</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><call><name>network_cmp_internal</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>network_ne</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>a1</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>a2</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><call><name>network_cmp_internal</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * MIN/MAX support functions.
 */</comment>
<function><type><name>Datum</name></type>
<name>network_smaller</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>a1</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>a2</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>network_cmp_internal</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_INET_P</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_INET_P</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>network_larger</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>a1</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>a2</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>network_cmp_internal</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_INET_P</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_INET_P</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Support function for hash indexes on inet/cidr.
 */</comment>
<function><type><name>Datum</name></type>
<name>hashinet</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>addr</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>addrsize</name> <init>= <expr><call><name>ip_addrsize</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* XXX this assumes there are no pad bytes in the data structure */</comment>
	<return>return <expr><call><name>hash_any</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>addrsize</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>hashinetextended</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>addr</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>addrsize</name> <init>= <expr><call><name>ip_addrsize</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>hash_any_extended</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>addrsize</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>,
							 <argument><expr><call><name>PG_GETARG_INT64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 *	Boolean network-inclusion tests.
 */</comment>
<function><type><name>Datum</name></type>
<name>network_sub</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>a1</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>a2</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ip_family</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>ip_family</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><call><name>ip_bits</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>ip_bits</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
					   <call><name>bitncmp</name><argument_list>(<argument><expr><call><name>ip_addr</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ip_addr</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ip_bits</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>network_subeq</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>a1</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>a2</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ip_family</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>ip_family</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><call><name>ip_bits</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <call><name>ip_bits</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
					   <call><name>bitncmp</name><argument_list>(<argument><expr><call><name>ip_addr</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ip_addr</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ip_bits</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>network_sup</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>a1</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>a2</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ip_family</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>ip_family</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><call><name>ip_bits</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>ip_bits</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
					   <call><name>bitncmp</name><argument_list>(<argument><expr><call><name>ip_addr</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ip_addr</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ip_bits</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>network_supeq</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>a1</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>a2</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ip_family</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>ip_family</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><call><name>ip_bits</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <call><name>ip_bits</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
					   <call><name>bitncmp</name><argument_list>(<argument><expr><call><name>ip_addr</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ip_addr</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ip_bits</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>network_overlap</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>a1</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>a2</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ip_family</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>ip_family</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><call><name>bitncmp</name><argument_list>(<argument><expr><call><name>ip_addr</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ip_addr</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>,
							   <argument><expr><call><name>Min</name><argument_list>(<argument><expr><call><name>ip_bits</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ip_bits</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Extract data from a network datatype.
 */</comment>
<function><type><name>Datum</name></type>
<name>network_host</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>ip</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>tmp</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:255.255.255.255/128"</literal></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>

	<comment type="block">/* force display of max bits, regardless of masklen... */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>inet_net_ntop</name><argument_list>(<argument><expr><call><name>ip_family</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ip_addr</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ip_maxbits</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr></argument>,
					  <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_BINARY_REPRESENTATION</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not format inet value: %m"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Suppress /n if present (shouldn't happen now) */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ptr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * network_show implements the inet and cidr casts to text.  This is not
 * quite the same behavior as network_out, hence we can't drop it in favor
 * of CoerceViaIO.
 */</comment>
<function><type><name>Datum</name></type>
<name>network_show</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>ip</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>tmp</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:255.255.255.255/128"</literal></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>inet_net_ntop</name><argument_list>(<argument><expr><call><name>ip_family</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ip_addr</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ip_maxbits</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr></argument>,
					  <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_BINARY_REPRESENTATION</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not format inet value: %m"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Add /n if not present (which it won't be) */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"/%u"</literal></expr></argument>, <argument><expr><call><name>ip_bits</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>inet_abbrev</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>ip</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>tmp</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:255.255.255.255/128"</literal></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>inet_net_ntop</name><argument_list>(<argument><expr><call><name>ip_family</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ip_addr</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><call><name>ip_bits</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_BINARY_REPRESENTATION</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not format inet value: %m"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>cidr_abbrev</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>ip</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>tmp</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:255.255.255.255/128"</literal></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>inet_cidr_ntop</name><argument_list>(<argument><expr><call><name>ip_family</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ip_addr</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr></argument>,
						 <argument><expr><call><name>ip_bits</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_BINARY_REPRESENTATION</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not format cidr value: %m"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>network_masklen</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>ip</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><call><name>ip_bits</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>network_family</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>ip</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><call><name>ip_family</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>PGSQL_AF_INET</name></expr>:</case>
			<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PGSQL_AF_INET6</name></expr>:</case>
			<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>network_broadcast</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>ip</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>byte</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>bits</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>maxbytes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>mask</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

	<comment type="block">/* make sure any unused bits are zeroed */</comment>
	<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>inet</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>inet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>maxbytes</name> <operator>=</operator> <call><name>ip_addrsize</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>ip_bits</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>ip_addr</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>ip_addr</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>byte</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>byte</name> <operator>&lt;</operator> <name>maxbytes</name></expr>;</condition> <incr><expr><name>byte</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>bits</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>bits</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0xff</literal> <operator>&gt;&gt;</operator> <name>bits</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name><name>b</name><index>[<expr><name>byte</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>byte</name></expr>]</index></name> <operator>|</operator> <name>mask</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>ip_family</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>ip_family</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ip_bits</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>ip_bits</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SET_INET_VARSIZE</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_INET_P</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>network_network</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>ip</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>byte</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>bits</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>mask</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

	<comment type="block">/* make sure any unused bits are zeroed */</comment>
	<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>inet</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>inet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>ip_bits</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>ip_addr</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>ip_addr</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>byte</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>bits</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>bits</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0xff</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>bits</name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name><name>b</name><index>[<expr><name>byte</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>byte</name></expr>]</index></name> <operator>&amp;</operator> <name>mask</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>byte</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>ip_family</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>ip_family</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ip_bits</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>ip_bits</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SET_INET_VARSIZE</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_INET_P</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>network_netmask</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>ip</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>byte</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>bits</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>mask</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

	<comment type="block">/* make sure any unused bits are zeroed */</comment>
	<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>inet</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>inet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>ip_bits</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>ip_addr</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>byte</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>bits</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>bits</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0xff</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>bits</name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name><name>b</name><index>[<expr><name>byte</name></expr>]</index></name> <operator>=</operator> <name>mask</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>byte</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>ip_family</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>ip_family</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ip_bits</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>ip_maxbits</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SET_INET_VARSIZE</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_INET_P</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>network_hostmask</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>ip</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>byte</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>bits</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>maxbytes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>mask</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

	<comment type="block">/* make sure any unused bits are zeroed */</comment>
	<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>inet</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>inet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>maxbytes</name> <operator>=</operator> <call><name>ip_addrsize</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>ip_maxbits</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>ip_bits</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>ip_addr</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>byte</name> <operator>=</operator> <name>maxbytes</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>bits</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>bits</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0xff</literal> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>bits</name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name><name>b</name><index>[<expr><name>byte</name></expr>]</index></name> <operator>=</operator> <name>mask</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>byte</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>ip_family</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>ip_family</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ip_bits</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>ip_maxbits</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SET_INET_VARSIZE</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_INET_P</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Returns true if the addresses are from the same family, or false.  Used to
 * check that we can create a network which contains both of the networks.
 */</comment>
<function><type><name>Datum</name></type>
<name>inet_same_family</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>a1</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>a2</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><call><name>ip_family</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>ip_family</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Returns the smallest CIDR which contains both of the inputs.
 */</comment>
<function><type><name>Datum</name></type>
<name>inet_merge</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>a1</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>a2</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>commonbits</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ip_family</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>ip_family</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cannot merge addresses from different families"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>commonbits</name> <operator>=</operator> <call><name>bitncommon</name><argument_list>(<argument><expr><call><name>ip_addr</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ip_addr</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><call><name>Min</name><argument_list>(<argument><expr><call><name>ip_bits</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ip_bits</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_INET_P</name><argument_list>(<argument><expr><call><name>cidr_set_masklen_internal</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>commonbits</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Convert a value of a network datatype to an approximate scalar value.
 * This is used for estimating selectivities of inequality operators
 * involving network types.
 *
 * On failure (e.g., unsupported typid), set *failure to true;
 * otherwise, that variable is not changed.
 */</comment>
<function><type><name>double</name></type>
<name>convert_network_to_scalar</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>typid</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>failure</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>typid</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>INETOID</name></expr>:</case>
		<case>case <expr><name>CIDROID</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>ip</name> <init>= <expr><call><name>DatumGetInetPP</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>double</name></type>		<name>res</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

				<comment type="block">/*
				 * Note that we don't use the full address for IPv6.
				 */</comment>
				<if_stmt><if>if <condition>(<expr><call><name>ip_family</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PGSQL_AF_INET</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ip_family</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block>{<block_content>
					<expr_stmt><expr><name>res</name> <operator>*=</operator> <literal type="number">256</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>res</name> <operator>+=</operator> <call><name>ip_addr</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt>
				</block_content>}</block></for>
				<return>return <expr><name>res</name></expr>;</return>
			</block_content>}</block>
		<case>case <expr><name>MACADDROID</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>macaddr</name>    <modifier>*</modifier></type><name>mac</name> <init>= <expr><call><name>DatumGetMacaddrP</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>double</name></type>		<name>res</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name><name>mac</name><operator>-&gt;</operator><name>a</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>mac</name><operator>-&gt;</operator><name>b</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>mac</name><operator>-&gt;</operator><name>c</name></name><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>res</name> <operator>*=</operator> <literal type="number">256</literal> <operator>*</operator> <literal type="number">256</literal> <operator>*</operator> <literal type="number">256</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>res</name> <operator>+=</operator> <operator>(</operator><name><name>mac</name><operator>-&gt;</operator><name>d</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>mac</name><operator>-&gt;</operator><name>e</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>mac</name><operator>-&gt;</operator><name>f</name></name><operator>)</operator></expr>;</expr_stmt>
				<return>return <expr><name>res</name></expr>;</return>
			</block_content>}</block>
		<case>case <expr><name>MACADDR8OID</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>macaddr8</name>   <modifier>*</modifier></type><name>mac</name> <init>= <expr><call><name>DatumGetMacaddr8P</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>double</name></type>		<name>res</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name><name>mac</name><operator>-&gt;</operator><name>a</name></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>mac</name><operator>-&gt;</operator><name>b</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>mac</name><operator>-&gt;</operator><name>c</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>mac</name><operator>-&gt;</operator><name>d</name></name><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>res</name> <operator>*=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <literal type="number">256</literal><operator>)</operator> <operator>*</operator> <literal type="number">256</literal> <operator>*</operator> <literal type="number">256</literal> <operator>*</operator> <literal type="number">256</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>res</name> <operator>+=</operator> <operator>(</operator><name><name>mac</name><operator>-&gt;</operator><name>e</name></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>mac</name><operator>-&gt;</operator><name>f</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>mac</name><operator>-&gt;</operator><name>g</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>mac</name><operator>-&gt;</operator><name>h</name></name><operator>)</operator></expr>;</expr_stmt>
				<return>return <expr><name>res</name></expr>;</return>
			</block_content>}</block>
	</block_content>}</block></switch>

	<expr_stmt><expr><operator>*</operator><name>failure</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * int
 * bitncmp(l, r, n)
 *		compare bit masks l and r, for n bits.
 * return:
 *		&lt;0, &gt;0, or 0 in the libc tradition.
 * note:
 *		network byte order assumed.  this means 192.5.5.240/28 has
 *		0x11110000 in its fourth octet.
 * author:
 *		Paul Vixie (ISC), June 1996
 */</comment>
<function><type><name>int</name></type>
<name>bitncmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>lb</name></decl>,
				<decl><type ref="prev"/><name>rb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>x</name></decl>,
				<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>b</name> <operator>=</operator> <name>n</name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>x</name> <operator>||</operator> <operator>(</operator><name>n</name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>x</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>lb</name> <operator>=</operator> <name><name>l</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rb</name> <operator>=</operator> <name><name>r</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <name>n</name> <operator>%</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>b</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>b</name><operator>--</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>IS_HIGHBIT_SET</name><argument_list>(<argument><expr><name>lb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>IS_HIGHBIT_SET</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>IS_HIGHBIT_SET</name><argument_list>(<argument><expr><name>lb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>lb</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>rb</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * bitncommon: compare bit masks l and r, for up to n bits.
 *
 * Returns the number of leading bits that match (0 to n).
 */</comment>
<function><type><name>int</name></type>
<name>bitncommon</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>byte</name></decl>,
				<decl><type ref="prev"/><name>nbits</name></decl>;</decl_stmt>

	<comment type="block">/* number of bits to examine in last byte */</comment>
	<expr_stmt><expr><name>nbits</name> <operator>=</operator> <name>n</name> <operator>%</operator> <literal type="number">8</literal></expr>;</expr_stmt>

	<comment type="block">/* check whole bytes */</comment>
	<for>for <control>(<init><expr><name>byte</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>byte</name> <operator>&lt;</operator> <name>n</name> <operator>/</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>byte</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>l</name><index>[<expr><name>byte</name></expr>]</index></name> <operator>!=</operator> <name><name>r</name><index>[<expr><name>byte</name></expr>]</index></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* at least one bit in the last byte is not common */</comment>
			<expr_stmt><expr><name>nbits</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* check bits in last partial byte */</comment>
	<if_stmt><if>if <condition>(<expr><name>nbits</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* calculate diff of first non-matching bytes */</comment>
		<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>diff</name> <init>= <expr><name><name>l</name><index>[<expr><name>byte</name></expr>]</index></name> <operator>^</operator> <name><name>r</name><index>[<expr><name>byte</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<comment type="block">/* compare the bits from the most to the least */</comment>
		<while>while <condition>(<expr><operator>(</operator><name>diff</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>nbits</name><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>nbits</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>byte</name><operator>)</operator> <operator>+</operator> <name>nbits</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Verify a CIDR address is OK (doesn't have bits set past the masklen)
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>addressOK</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>family</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>byte</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nbits</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>maxbits</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>maxbytes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>mask</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>family</name> <operator>==</operator> <name>PGSQL_AF_INET</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>maxbits</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>maxbytes</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>maxbits</name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>maxbytes</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>bits</name> <operator>&lt;=</operator> <name>maxbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>==</operator> <name>maxbits</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>byte</name> <operator>=</operator> <name>bits</name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>nbits</name> <operator>=</operator> <name>bits</name> <operator>%</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>mask</name> <operator>&gt;&gt;=</operator> <name>nbits</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><name>byte</name> <operator>&lt;</operator> <name>maxbytes</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>a</name><index>[<expr><name>byte</name></expr>]</index></name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>byte</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * These functions are used by planner to generate indexscan limits
 * for clauses a &lt;&lt; b and a &lt;&lt;= b
 */</comment>

<comment type="block">/* return the minimal value for an IP on a given network */</comment>
<function><type><name>Datum</name></type>
<name>network_scan_first</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>network_network</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * return "last" IP on a given network. It's the broadcast address,
 * however, masklen has to be set to its max bits, since
 * 192.168.0.255/24 is considered less than 192.168.0.255/32
 *
 * inet_set_masklen() hacked to max out the masklength to 128 for IPv6
 * and 32 for IPv4 when given '-1' as argument.
 */</comment>
<function><type><name>Datum</name></type>
<name>network_scan_last</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>DirectFunctionCall2</name><argument_list>(<argument><expr><name>inet_set_masklen</name></expr></argument>,
							   <argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>network_broadcast</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>,
							   <argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * IP address that the client is connecting from (NULL if Unix socket)
 */</comment>
<function><type><name>Datum</name></type>
<name>inet_client_addr</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Port</name>	   <modifier>*</modifier></type><name>port</name> <init>= <expr><name>MyProcPort</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>remote_host</name><index>[<expr><name>NI_MAXHOST</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>port</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><name><name>port</name><operator>-&gt;</operator><name>raddr</name><operator>.</operator><name>addr</name><operator>.</operator><name>ss_family</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>AF_INET</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_IPV6</name></cpp:ifdef>
		<case>case <expr><name>AF_INET6</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<expr_stmt><expr><name><name>remote_host</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pg_getnameinfo_all</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>port</name><operator>-&gt;</operator><name>raddr</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>port</name><operator>-&gt;</operator><name>raddr</name><operator>.</operator><name>salen</name></name></expr></argument>,
							 <argument><expr><name>remote_host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>remote_host</name></expr></argument>)</argument_list></sizeof></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
							 <argument><expr><name>NI_NUMERICHOST</name> <operator>|</operator> <name>NI_NUMERICSERV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>clean_ipv6_addr</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>raddr</name><operator>.</operator><name>addr</name><operator>.</operator><name>ss_family</name></name></expr></argument>, <argument><expr><name>remote_host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_INET_P</name><argument_list>(<argument><expr><call><name>network_in</name><argument_list>(<argument><expr><name>remote_host</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * port that the client is connecting from (NULL if Unix socket)
 */</comment>
<function><type><name>Datum</name></type>
<name>inet_client_port</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Port</name>	   <modifier>*</modifier></type><name>port</name> <init>= <expr><name>MyProcPort</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>remote_port</name><index>[<expr><name>NI_MAXSERV</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>port</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><name><name>port</name><operator>-&gt;</operator><name>raddr</name><operator>.</operator><name>addr</name><operator>.</operator><name>ss_family</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>AF_INET</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_IPV6</name></cpp:ifdef>
		<case>case <expr><name>AF_INET6</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<expr_stmt><expr><name><name>remote_port</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pg_getnameinfo_all</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>port</name><operator>-&gt;</operator><name>raddr</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>port</name><operator>-&gt;</operator><name>raddr</name><operator>.</operator><name>salen</name></name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
							 <argument><expr><name>remote_port</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>remote_port</name></expr></argument>)</argument_list></sizeof></expr></argument>,
							 <argument><expr><name>NI_NUMERICHOST</name> <operator>|</operator> <name>NI_NUMERICSERV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>int4in</name></expr></argument>, <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>remote_port</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * IP address that the server accepted the connection on (NULL if Unix socket)
 */</comment>
<function><type><name>Datum</name></type>
<name>inet_server_addr</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Port</name>	   <modifier>*</modifier></type><name>port</name> <init>= <expr><name>MyProcPort</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>local_host</name><index>[<expr><name>NI_MAXHOST</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>port</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><name><name>port</name><operator>-&gt;</operator><name>laddr</name><operator>.</operator><name>addr</name><operator>.</operator><name>ss_family</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>AF_INET</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_IPV6</name></cpp:ifdef>
		<case>case <expr><name>AF_INET6</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<expr_stmt><expr><name><name>local_host</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pg_getnameinfo_all</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>port</name><operator>-&gt;</operator><name>laddr</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>port</name><operator>-&gt;</operator><name>laddr</name><operator>.</operator><name>salen</name></name></expr></argument>,
							 <argument><expr><name>local_host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>local_host</name></expr></argument>)</argument_list></sizeof></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
							 <argument><expr><name>NI_NUMERICHOST</name> <operator>|</operator> <name>NI_NUMERICSERV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>clean_ipv6_addr</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>laddr</name><operator>.</operator><name>addr</name><operator>.</operator><name>ss_family</name></name></expr></argument>, <argument><expr><name>local_host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_INET_P</name><argument_list>(<argument><expr><call><name>network_in</name><argument_list>(<argument><expr><name>local_host</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * port that the server accepted the connection on (NULL if Unix socket)
 */</comment>
<function><type><name>Datum</name></type>
<name>inet_server_port</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Port</name>	   <modifier>*</modifier></type><name>port</name> <init>= <expr><name>MyProcPort</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>local_port</name><index>[<expr><name>NI_MAXSERV</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>port</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><name><name>port</name><operator>-&gt;</operator><name>laddr</name><operator>.</operator><name>addr</name><operator>.</operator><name>ss_family</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>AF_INET</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_IPV6</name></cpp:ifdef>
		<case>case <expr><name>AF_INET6</name></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<expr_stmt><expr><name><name>local_port</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pg_getnameinfo_all</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>port</name><operator>-&gt;</operator><name>laddr</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>port</name><operator>-&gt;</operator><name>laddr</name><operator>.</operator><name>salen</name></name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
							 <argument><expr><name>local_port</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>local_port</name></expr></argument>)</argument_list></sizeof></expr></argument>,
							 <argument><expr><name>NI_NUMERICHOST</name> <operator>|</operator> <name>NI_NUMERICSERV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>int4in</name></expr></argument>, <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>local_port</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>inetnot</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>ip</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>inet</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>inet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>nb</name> <init>= <expr><call><name>ip_addrsize</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pip</name> <init>= <expr><call><name>ip_addr</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pdst</name> <init>= <expr><call><name>ip_addr</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<while>while <condition>(<expr><name>nb</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>pdst</name><index>[<expr><name>nb</name></expr>]</index></name> <operator>=</operator> <operator>~</operator><name><name>pip</name><index>[<expr><name>nb</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></while>
	</block_content>}</block>
	<expr_stmt><expr><call><name>ip_bits</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>ip_bits</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ip_family</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>ip_family</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SET_INET_VARSIZE</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_INET_P</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>inetand</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>ip</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>ip2</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>inet</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>inet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ip_family</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>ip_family</name><argument_list>(<argument><expr><name>ip2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cannot AND inet values of different sizes"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>nb</name> <init>= <expr><call><name>ip_addrsize</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pip</name> <init>= <expr><call><name>ip_addr</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pip2</name> <init>= <expr><call><name>ip_addr</name><argument_list>(<argument><expr><name>ip2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pdst</name> <init>= <expr><call><name>ip_addr</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<while>while <condition>(<expr><name>nb</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>pdst</name><index>[<expr><name>nb</name></expr>]</index></name> <operator>=</operator> <name><name>pip</name><index>[<expr><name>nb</name></expr>]</index></name> <operator>&amp;</operator> <name><name>pip2</name><index>[<expr><name>nb</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></while>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>ip_bits</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><call><name>ip_bits</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ip_bits</name><argument_list>(<argument><expr><name>ip2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ip_family</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>ip_family</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SET_INET_VARSIZE</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_INET_P</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>inetor</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>ip</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>ip2</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>inet</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>inet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ip_family</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>ip_family</name><argument_list>(<argument><expr><name>ip2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cannot OR inet values of different sizes"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>nb</name> <init>= <expr><call><name>ip_addrsize</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pip</name> <init>= <expr><call><name>ip_addr</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pip2</name> <init>= <expr><call><name>ip_addr</name><argument_list>(<argument><expr><name>ip2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pdst</name> <init>= <expr><call><name>ip_addr</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<while>while <condition>(<expr><name>nb</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>pdst</name><index>[<expr><name>nb</name></expr>]</index></name> <operator>=</operator> <name><name>pip</name><index>[<expr><name>nb</name></expr>]</index></name> <operator>|</operator> <name><name>pip2</name><index>[<expr><name>nb</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></while>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>ip_bits</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><call><name>ip_bits</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ip_bits</name><argument_list>(<argument><expr><name>ip2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ip_family</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>ip_family</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SET_INET_VARSIZE</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_INET_P</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>inet</name> <modifier>*</modifier></type>
<name>internal_inetpl</name><parameter_list>(<parameter><decl><type><name>inet</name> <modifier>*</modifier></type><name>ip</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>addend</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>inet</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>inet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>nb</name> <init>= <expr><call><name>ip_addrsize</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pip</name> <init>= <expr><call><name>ip_addr</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pdst</name> <init>= <expr><call><name>ip_addr</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>carry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

		<while>while <condition>(<expr><name>nb</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>carry</name> <operator>=</operator> <name><name>pip</name><index>[<expr><name>nb</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>addend</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>+</operator> <name>carry</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pdst</name><index>[<expr><name>nb</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>(</operator><name>carry</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>carry</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

			<comment type="block">/*
			 * We have to be careful about right-shifting addend because
			 * right-shift isn't portable for negative values, while simply
			 * dividing by 256 doesn't work (the standard rounding is in the
			 * wrong direction, besides which there may be machines out there
			 * that round the wrong way).  So, explicitly clear the low-order
			 * byte to remove any doubt about the correct result of the
			 * division, and then divide rather than shift.
			 */</comment>
			<expr_stmt><expr><name>addend</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><operator>(</operator><name>int64</name><operator>)</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>addend</name> <operator>/=</operator> <literal type="number">0x100</literal></expr>;</expr_stmt>
		</block_content>}</block></while>

		<comment type="block">/*
		 * At this point we should have addend and carry both zero if original
		 * addend was &gt;= 0, or addend -1 and carry 1 if original addend was &lt;
		 * 0.  Anything else means overflow.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>addend</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>carry</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
			  <operator>(</operator><name>addend</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>carry</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_NUMERIC_VALUE_OUT_OF_RANGE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"result is out of range"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>ip_bits</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>ip_bits</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ip_family</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>ip_family</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SET_INET_VARSIZE</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>dst</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>inetpl</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>ip</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type>		<name>addend</name> <init>= <expr><call><name>PG_GETARG_INT64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_INET_P</name><argument_list>(<argument><expr><call><name>internal_inetpl</name><argument_list>(<argument><expr><name>ip</name></expr></argument>, <argument><expr><name>addend</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>inetmi_int8</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>ip</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type>		<name>addend</name> <init>= <expr><call><name>PG_GETARG_INT64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_INET_P</name><argument_list>(<argument><expr><call><name>internal_inetpl</name><argument_list>(<argument><expr><name>ip</name></expr></argument>, <argument><expr><operator>-</operator><name>addend</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>inetmi</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>ip</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>inet</name>	   <modifier>*</modifier></type><name>ip2</name> <init>= <expr><call><name>PG_GETARG_INET_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type>		<name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ip_family</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>ip_family</name><argument_list>(<argument><expr><name>ip2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cannot subtract inet values of different sizes"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * We form the difference using the traditional complement, increment,
		 * and add rule, with the increment part being handled by starting the
		 * carry off at 1.  If you don't think integer arithmetic is done in
		 * two's complement, too bad.
		 */</comment>
		<decl_stmt><decl><type><name>int</name></type>			<name>nb</name> <init>= <expr><call><name>ip_addrsize</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>byte</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pip</name> <init>= <expr><call><name>ip_addr</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pip2</name> <init>= <expr><call><name>ip_addr</name><argument_list>(<argument><expr><name>ip2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>carry</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

		<while>while <condition>(<expr><name>nb</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>lobyte</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>carry</name> <operator>=</operator> <name><name>pip</name><index>[<expr><name>nb</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>~</operator><name><name>pip2</name><index>[<expr><name>nb</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>+</operator> <name>carry</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>lobyte</name> <operator>=</operator> <name>carry</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>byte</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>res</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>int64</name><operator>)</operator> <name>lobyte</name><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>byte</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/*
				 * Input wider than int64: check for overflow.  All bytes to
				 * the left of what will fit should be 0 or 0xFF, depending on
				 * sign of the now-complete result.
				 */</comment>
				<if_stmt><if>if <condition>(<expr><ternary><condition><expr><operator>(</operator><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>lobyte</name> <operator>!=</operator> <literal type="number">0xFF</literal><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>lobyte</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></else></ternary></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_NUMERIC_VALUE_OUT_OF_RANGE</name></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"result is out of range"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><name>carry</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>byte</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>

		<comment type="block">/*
		 * If input is narrower than int64, overflow is not possible, but we
		 * have to do proper sign extension.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>carry</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>byte</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>res</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>uint64</name><operator>)</operator> <operator>(</operator><name>int64</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>byte</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_INT64</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * clean_ipv6_addr --- remove any '%zone' part from an IPv6 address string
 *
 * XXX This should go away someday!
 *
 * This is a kluge needed because we don't yet support zones in stored inet
 * values.  Since the result of getnameinfo() might include a zone spec,
 * call this to remove it anywhere we want to feed getnameinfo's output to
 * network_in.  Beats failing entirely.
 *
 * An alternative approach would be to let network_in ignore %-parts for
 * itself, but that would mean we'd silently drop zone specs in user input,
 * which seems not such a good idea.
 */</comment>
<function><type><name>void</name></type>
<name>clean_ipv6_addr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>addr_family</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_IPV6</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name>addr_family</name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>pct</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><literal type="char">'%'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>pct</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>pct</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
