<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/backend/utils/adt/jsonapi.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * jsonapi.c
 *		JSON parser and lexer interfaces
 *
 * Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *	  src/backend/utils/adt/jsonapi.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mb/pg_wchar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/jsonapi.h"</cpp:file></cpp:include>

<comment type="block">/*
 * The context of the parser is maintained by the recursive descent
 * mechanism, but is passed explicitly to the error reporting routine
 * for better diagnostics.
 */</comment>
<typedef>typedef <type><enum>enum					<comment type="block">/* contexts of JSON parser */</comment>
<block>{
	<decl><name>JSON_PARSE_VALUE</name></decl>,			<comment type="block">/* expecting a value */</comment>
	<decl><name>JSON_PARSE_STRING</name></decl>,			<comment type="block">/* expecting a string (for a field name) */</comment>
	<decl><name>JSON_PARSE_ARRAY_START</name></decl>,		<comment type="block">/* saw '[', expecting value or ']' */</comment>
	<decl><name>JSON_PARSE_ARRAY_NEXT</name></decl>,		<comment type="block">/* saw array element, expecting ',' or ']' */</comment>
	<decl><name>JSON_PARSE_OBJECT_START</name></decl>,	<comment type="block">/* saw '{', expecting label or '}' */</comment>
	<decl><name>JSON_PARSE_OBJECT_LABEL</name></decl>,	<comment type="block">/* saw object label, expecting ':' */</comment>
	<decl><name>JSON_PARSE_OBJECT_NEXT</name></decl>,		<comment type="block">/* saw object value, expecting ',' or '}' */</comment>
	<decl><name>JSON_PARSE_OBJECT_COMMA</name></decl>,	<comment type="block">/* saw object ',', expecting next label */</comment>
	<decl><name>JSON_PARSE_END</name></decl>				<comment type="block">/* saw the end of a document, expect nothing */</comment>
}</block></enum></type> <name>JsonParseContext</name>;</typedef>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>JsonParseErrorType</name></type> <name>json_lex_string</name><parameter_list>(<parameter><decl><type><name>JsonLexContext</name> <modifier>*</modifier></type><name>lex</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>JsonParseErrorType</name></type> <name>json_lex_number</name><parameter_list>(<parameter><decl><type><name>JsonLexContext</name> <modifier>*</modifier></type><name>lex</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
								   <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>num_err</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>total_len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>JsonParseErrorType</name></type> <name>parse_scalar</name><parameter_list>(<parameter><decl><type><name>JsonLexContext</name> <modifier>*</modifier></type><name>lex</name></decl></parameter>, <parameter><decl><type><name>JsonSemAction</name> <modifier>*</modifier></type><name>sem</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>JsonParseErrorType</name></type> <name>parse_object_field</name><parameter_list>(<parameter><decl><type><name>JsonLexContext</name> <modifier>*</modifier></type><name>lex</name></decl></parameter>, <parameter><decl><type><name>JsonSemAction</name> <modifier>*</modifier></type><name>sem</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>JsonParseErrorType</name></type> <name>parse_object</name><parameter_list>(<parameter><decl><type><name>JsonLexContext</name> <modifier>*</modifier></type><name>lex</name></decl></parameter>, <parameter><decl><type><name>JsonSemAction</name> <modifier>*</modifier></type><name>sem</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>JsonParseErrorType</name></type> <name>parse_array_element</name><parameter_list>(<parameter><decl><type><name>JsonLexContext</name> <modifier>*</modifier></type><name>lex</name></decl></parameter>, <parameter><decl><type><name>JsonSemAction</name> <modifier>*</modifier></type><name>sem</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>JsonParseErrorType</name></type> <name>parse_array</name><parameter_list>(<parameter><decl><type><name>JsonLexContext</name> <modifier>*</modifier></type><name>lex</name></decl></parameter>, <parameter><decl><type><name>JsonSemAction</name> <modifier>*</modifier></type><name>sem</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>JsonParseErrorType</name></type> <name>report_parse_error</name><parameter_list>(<parameter><decl><type><name>JsonParseContext</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>JsonLexContext</name> <modifier>*</modifier></type><name>lex</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>extract_token</name><parameter_list>(<parameter><decl><type><name>JsonLexContext</name> <modifier>*</modifier></type><name>lex</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* the null action object used for pure validation */</comment>
<decl_stmt><decl><type><name>JsonSemAction</name></type> <name>nullSemAction</name> <init>=
<expr><block>{
	<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
	<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Recursive Descent parser support routines */</comment>

<comment type="block">/*
 * lex_peek
 *
 * what is the current look_ahead token?
*/</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>JsonTokenType</name></type>
<name>lex_peek</name><parameter_list>(<parameter><decl><type><name>JsonLexContext</name> <modifier>*</modifier></type><name>lex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>lex</name><operator>-&gt;</operator><name>token_type</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * lex_expect
 *
 * move the lexer to the next token if the current look_ahead token matches
 * the parameter token. Otherwise, report an error.
 */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>JsonParseErrorType</name></type>
<name>lex_expect</name><parameter_list>(<parameter><decl><type><name>JsonParseContext</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>JsonLexContext</name> <modifier>*</modifier></type><name>lex</name></decl></parameter>, <parameter><decl><type><name>JsonTokenType</name></type> <name>token</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>lex_peek</name><argument_list>(<argument><expr><name>lex</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>token</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>json_lex</name><argument_list>(<argument><expr><name>lex</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><call><name>report_parse_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>lex</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* chars to consider as part of an alphanumeric token */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JSON_ALPHANUMERIC_CHAR</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>  \
	<cpp:value>(((c) &gt;= 'a' &amp;&amp; (c) &lt;= 'z') || \
	 ((c) &gt;= 'A' &amp;&amp; (c) &lt;= 'Z') || \
	 ((c) &gt;= '0' &amp;&amp; (c) &lt;= '9') || \
	 (c) == '_' || \
	 IS_HIGHBIT_SET(c))</cpp:value></cpp:define>

<comment type="block">/*
 * Utility function to check if a string is a valid JSON number.
 *
 * str is of length len, and need not be null-terminated.
 */</comment>
<function><type><name>bool</name></type>
<name>IsValidJsonNumber</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>numeric_error</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>total_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonLexContext</name></type> <name>dummy_lex</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * json_lex_number expects a leading  '-' to have been eaten already.
	 *
	 * having to cast away the constness of str is ugly, but there's not much
	 * easy alternative.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>dummy_lex</name><operator>.</operator><name>input</name></name> <operator>=</operator> <call><name>unconstify</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dummy_lex</name><operator>.</operator><name>input_length</name></name> <operator>=</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>dummy_lex</name><operator>.</operator><name>input</name></name> <operator>=</operator> <call><name>unconstify</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dummy_lex</name><operator>.</operator><name>input_length</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>json_lex_number</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dummy_lex</name></expr></argument>, <argument><expr><name><name>dummy_lex</name><operator>.</operator><name>input</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numeric_error</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>total_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><operator>!</operator><name>numeric_error</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>total_len</name> <operator>==</operator> <name><name>dummy_lex</name><operator>.</operator><name>input_length</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * makeJsonLexContextCstringLen
 *
 * lex constructor, with or without StringInfo object for de-escaped lexemes.
 *
 * Without is better as it makes the processing faster, so only make one
 * if really required.
 */</comment>
<function><type><name>JsonLexContext</name> <modifier>*</modifier></type>
<name>makeJsonLexContextCstringLen</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>json</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>need_escapes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonLexContext</name> <modifier>*</modifier></type><name>lex</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>JsonLexContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>input</name></name> <operator>=</operator> <name><name>lex</name><operator>-&gt;</operator><name>token_terminator</name></name> <operator>=</operator> <name><name>lex</name><operator>-&gt;</operator><name>line_start</name></name> <operator>=</operator> <name>json</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>line_number</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>input_length</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>need_escapes</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>strval</name></name> <operator>=</operator> <call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>lex</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * pg_parse_json
 *
 * Publicly visible entry point for the JSON parser.
 *
 * lex is a lexing context, set up for the json to be processed by calling
 * makeJsonLexContext(). sem is a structure of function pointers to semantic
 * action routines to be called at appropriate spots during parsing, and a
 * pointer to a state object to be passed to those routines.
 */</comment>
<function><type><name>JsonParseErrorType</name></type>
<name>pg_parse_json</name><parameter_list>(<parameter><decl><type><name>JsonLexContext</name> <modifier>*</modifier></type><name>lex</name></decl></parameter>, <parameter><decl><type><name>JsonSemAction</name> <modifier>*</modifier></type><name>sem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonTokenType</name></type> <name>tok</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonParseErrorType</name></type>	<name>result</name></decl>;</decl_stmt>

	<comment type="block">/* get the initial token */</comment>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>json_lex</name><argument_list>(<argument><expr><name>lex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>JSON_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>tok</name> <operator>=</operator> <call><name>lex_peek</name><argument_list>(<argument><expr><name>lex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* parse by recursive descent */</comment>
	<switch>switch <condition>(<expr><name>tok</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>JSON_TOKEN_OBJECT_START</name></expr>:</case>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>parse_object</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>JSON_TOKEN_ARRAY_START</name></expr>:</case>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>parse_array</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>parse_scalar</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* json can be a bare scalar */</comment>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>JSON_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>lex_expect</name><argument_list>(<argument><expr><name>JSON_PARSE_END</name></expr></argument>, <argument><expr><name>lex</name></expr></argument>, <argument><expr><name>JSON_TOKEN_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * json_count_array_elements
 *
 * Returns number of array elements in lex context at start of array token
 * until end of array token at same nesting level.
 *
 * Designed to be called from array_start routines.
 */</comment>
<function><type><name>JsonParseErrorType</name></type>
<name>json_count_array_elements</name><parameter_list>(<parameter><decl><type><name>JsonLexContext</name> <modifier>*</modifier></type><name>lex</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>elements</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonLexContext</name></type> <name>copylex</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>count</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonParseErrorType</name></type>	<name>result</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * It's safe to do this with a shallow copy because the lexical routines
	 * don't scribble on the input. They do scribble on the other pointers
	 * etc, so doing this with a copy makes that safe.
	 */</comment>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>copylex</name></expr></argument>, <argument><expr><name>lex</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>JsonLexContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>copylex</name><operator>.</operator><name>strval</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>		<comment type="block">/* not interested in values here */</comment>
	<expr_stmt><expr><name><name>copylex</name><operator>.</operator><name>lex_level</name></name><operator>++</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>lex_expect</name><argument_list>(<argument><expr><name>JSON_PARSE_ARRAY_START</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>copylex</name></expr></argument>,
						<argument><expr><name>JSON_TOKEN_ARRAY_START</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>JSON_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>lex_peek</name><argument_list>(<argument><expr><operator>&amp;</operator><name>copylex</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>JSON_TOKEN_ARRAY_END</name></expr>)</condition>
	<block>{<block_content>
		<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>parse_array_element</name><argument_list>(<argument><expr><operator>&amp;</operator><name>copylex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nullSemAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>JSON_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>copylex</name><operator>.</operator><name>token_type</name></name> <operator>!=</operator> <name>JSON_TOKEN_COMMA</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>json_lex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>copylex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>JSON_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>lex_expect</name><argument_list>(<argument><expr><name>JSON_PARSE_ARRAY_NEXT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>copylex</name></expr></argument>,
							<argument><expr><name>JSON_TOKEN_ARRAY_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>JSON_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>elements</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
	<return>return <expr><name>JSON_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 *	Recursive Descent parse routines. There is one for each structural
 *	element in a json document:
 *	  - scalar (string, number, true, false, null)
 *	  - array  ( [ ] )
 *	  - array element
 *	  - object ( { } )
 *	  - object field
 */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>JsonParseErrorType</name></type>
<name>parse_scalar</name><parameter_list>(<parameter><decl><type><name>JsonLexContext</name> <modifier>*</modifier></type><name>lex</name></decl></parameter>, <parameter><decl><type><name>JsonSemAction</name> <modifier>*</modifier></type><name>sem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>json_scalar_action</name></type> <name>sfunc</name> <init>= <expr><name><name>sem</name><operator>-&gt;</operator><name>scalar</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonTokenType</name></type> <name>tok</name> <init>= <expr><call><name>lex_peek</name><argument_list>(<argument><expr><name>lex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonParseErrorType</name></type> <name>result</name></decl>;</decl_stmt>

	<comment type="block">/* a scalar must be a string, a number, true, false, or null */</comment>
	<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>!=</operator> <name>JSON_TOKEN_STRING</name> <operator>&amp;&amp;</operator> <name>tok</name> <operator>!=</operator> <name>JSON_TOKEN_NUMBER</name> <operator>&amp;&amp;</operator>
		<name>tok</name> <operator>!=</operator> <name>JSON_TOKEN_TRUE</name> <operator>&amp;&amp;</operator> <name>tok</name> <operator>!=</operator> <name>JSON_TOKEN_FALSE</name> <operator>&amp;&amp;</operator>
		<name>tok</name> <operator>!=</operator> <name>JSON_TOKEN_NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>report_parse_error</name><argument_list>(<argument><expr><name>JSON_PARSE_VALUE</name></expr></argument>, <argument><expr><name>lex</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* if no semantic function, just consume the token */</comment>
	<if_stmt><if>if <condition>(<expr><name>sfunc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>json_lex</name><argument_list>(<argument><expr><name>lex</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* extract the de-escaped string value, or the raw lexeme */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>lex_peek</name><argument_list>(<argument><expr><name>lex</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>JSON_TOKEN_STRING</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>lex</name><operator>-&gt;</operator><name>strval</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name><name>lex</name><operator>-&gt;</operator><name>strval</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>len</name> <init>= <expr><operator>(</operator><name><name>lex</name><operator>-&gt;</operator><name>token_terminator</name></name> <operator>-</operator> <name><name>lex</name><operator>-&gt;</operator><name>token_start</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>lex</name><operator>-&gt;</operator><name>token_start</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>val</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* consume the token */</comment>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>json_lex</name><argument_list>(<argument><expr><name>lex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>JSON_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* invoke the callback */</comment>
	<expr_stmt><expr><call>(<modifier>*</modifier><name>sfunc</name>) <argument_list>(<argument><expr><name><name>sem</name><operator>-&gt;</operator><name>semstate</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>JSON_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JsonParseErrorType</name></type>
<name>parse_object_field</name><parameter_list>(<parameter><decl><type><name>JsonLexContext</name> <modifier>*</modifier></type><name>lex</name></decl></parameter>, <parameter><decl><type><name>JsonSemAction</name> <modifier>*</modifier></type><name>sem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * An object field is "fieldname" : value where value can be a scalar,
	 * object or array.  Note: in user-facing docs and error messages, we
	 * generally call a field name a "key".
	 */</comment>

	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>fname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>	<comment type="block">/* keep compiler quiet */</comment>
	<decl_stmt><decl><type><name>json_ofield_action</name></type> <name>ostart</name> <init>= <expr><name><name>sem</name><operator>-&gt;</operator><name>object_field_start</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>json_ofield_action</name></type> <name>oend</name> <init>= <expr><name><name>sem</name><operator>-&gt;</operator><name>object_field_end</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>isnull</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonTokenType</name></type> <name>tok</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonParseErrorType</name></type> <name>result</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>lex_peek</name><argument_list>(<argument><expr><name>lex</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>JSON_TOKEN_STRING</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>report_parse_error</name><argument_list>(<argument><expr><name>JSON_PARSE_STRING</name></expr></argument>, <argument><expr><name>lex</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ostart</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>oend</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>lex</name><operator>-&gt;</operator><name>strval</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name><name>lex</name><operator>-&gt;</operator><name>strval</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>json_lex</name><argument_list>(<argument><expr><name>lex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>JSON_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>lex_expect</name><argument_list>(<argument><expr><name>JSON_PARSE_OBJECT_LABEL</name></expr></argument>, <argument><expr><name>lex</name></expr></argument>, <argument><expr><name>JSON_TOKEN_COLON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>JSON_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>tok</name> <operator>=</operator> <call><name>lex_peek</name><argument_list>(<argument><expr><name>lex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>isnull</name> <operator>=</operator> <name>tok</name> <operator>==</operator> <name>JSON_TOKEN_NULL</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>ostart</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call>(<modifier>*</modifier><name>ostart</name>) <argument_list>(<argument><expr><name><name>sem</name><operator>-&gt;</operator><name>semstate</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><name>tok</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>JSON_TOKEN_OBJECT_START</name></expr>:</case>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>parse_object</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>JSON_TOKEN_ARRAY_START</name></expr>:</case>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>parse_array</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>parse_scalar</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>JSON_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>oend</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call>(<modifier>*</modifier><name>oend</name>) <argument_list>(<argument><expr><name><name>sem</name><operator>-&gt;</operator><name>semstate</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>JSON_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JsonParseErrorType</name></type>
<name>parse_object</name><parameter_list>(<parameter><decl><type><name>JsonLexContext</name> <modifier>*</modifier></type><name>lex</name></decl></parameter>, <parameter><decl><type><name>JsonSemAction</name> <modifier>*</modifier></type><name>sem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * an object is a possibly empty sequence of object fields, separated by
	 * commas and surrounded by curly braces.
	 */</comment>
	<decl_stmt><decl><type><name>json_struct_action</name></type> <name>ostart</name> <init>= <expr><name><name>sem</name><operator>-&gt;</operator><name>object_start</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>json_struct_action</name></type> <name>oend</name> <init>= <expr><name><name>sem</name><operator>-&gt;</operator><name>object_end</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonTokenType</name></type> <name>tok</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonParseErrorType</name></type> <name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>check_stack_depth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>ostart</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call>(<modifier>*</modifier><name>ostart</name>) <argument_list>(<argument><expr><name><name>sem</name><operator>-&gt;</operator><name>semstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Data inside an object is at a higher nesting level than the object
	 * itself. Note that we increment this after we call the semantic routine
	 * for the object start and restore it before we call the routine for the
	 * object end.
	 */</comment>
	<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>lex_level</name></name><operator>++</operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>lex_peek</name><argument_list>(<argument><expr><name>lex</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>JSON_TOKEN_OBJECT_START</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>json_lex</name><argument_list>(<argument><expr><name>lex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>JSON_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>tok</name> <operator>=</operator> <call><name>lex_peek</name><argument_list>(<argument><expr><name>lex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name>tok</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>JSON_TOKEN_STRING</name></expr>:</case>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>parse_object_field</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<while>while <condition>(<expr><name>result</name> <operator>==</operator> <name>JSON_SUCCESS</name> <operator>&amp;&amp;</operator> <call><name>lex_peek</name><argument_list>(<argument><expr><name>lex</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>JSON_TOKEN_COMMA</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>json_lex</name><argument_list>(<argument><expr><name>lex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>JSON_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
					<break>break;</break></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>parse_object_field</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></while>
			<break>break;</break>
		<case>case <expr><name>JSON_TOKEN_OBJECT_END</name></expr>:</case>
			<break>break;</break>
		<default>default:</default>
			<comment type="block">/* case of an invalid initial token inside the object */</comment>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>report_parse_error</name><argument_list>(<argument><expr><name>JSON_PARSE_OBJECT_START</name></expr></argument>, <argument><expr><name>lex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>JSON_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>lex_expect</name><argument_list>(<argument><expr><name>JSON_PARSE_OBJECT_NEXT</name></expr></argument>, <argument><expr><name>lex</name></expr></argument>, <argument><expr><name>JSON_TOKEN_OBJECT_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>JSON_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>lex_level</name></name><operator>--</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>oend</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call>(<modifier>*</modifier><name>oend</name>) <argument_list>(<argument><expr><name><name>sem</name><operator>-&gt;</operator><name>semstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>JSON_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JsonParseErrorType</name></type>
<name>parse_array_element</name><parameter_list>(<parameter><decl><type><name>JsonLexContext</name> <modifier>*</modifier></type><name>lex</name></decl></parameter>, <parameter><decl><type><name>JsonSemAction</name> <modifier>*</modifier></type><name>sem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>json_aelem_action</name></type> <name>astart</name> <init>= <expr><name><name>sem</name><operator>-&gt;</operator><name>array_element_start</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>json_aelem_action</name></type> <name>aend</name> <init>= <expr><name><name>sem</name><operator>-&gt;</operator><name>array_element_end</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonTokenType</name></type> <name>tok</name> <init>= <expr><call><name>lex_peek</name><argument_list>(<argument><expr><name>lex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonParseErrorType</name></type> <name>result</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type>		<name>isnull</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>isnull</name> <operator>=</operator> <name>tok</name> <operator>==</operator> <name>JSON_TOKEN_NULL</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>astart</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call>(<modifier>*</modifier><name>astart</name>) <argument_list>(<argument><expr><name><name>sem</name><operator>-&gt;</operator><name>semstate</name></name></expr></argument>, <argument><expr><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* an array element is any object, array or scalar */</comment>
	<switch>switch <condition>(<expr><name>tok</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>JSON_TOKEN_OBJECT_START</name></expr>:</case>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>parse_object</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>JSON_TOKEN_ARRAY_START</name></expr>:</case>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>parse_array</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>parse_scalar</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>JSON_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>aend</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call>(<modifier>*</modifier><name>aend</name>) <argument_list>(<argument><expr><name><name>sem</name><operator>-&gt;</operator><name>semstate</name></name></expr></argument>, <argument><expr><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>JSON_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>JsonParseErrorType</name></type>
<name>parse_array</name><parameter_list>(<parameter><decl><type><name>JsonLexContext</name> <modifier>*</modifier></type><name>lex</name></decl></parameter>, <parameter><decl><type><name>JsonSemAction</name> <modifier>*</modifier></type><name>sem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * an array is a possibly empty sequence of array elements, separated by
	 * commas and surrounded by square brackets.
	 */</comment>
	<decl_stmt><decl><type><name>json_struct_action</name></type> <name>astart</name> <init>= <expr><name><name>sem</name><operator>-&gt;</operator><name>array_start</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>json_struct_action</name></type> <name>aend</name> <init>= <expr><name><name>sem</name><operator>-&gt;</operator><name>array_end</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonParseErrorType</name></type> <name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>check_stack_depth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>astart</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call>(<modifier>*</modifier><name>astart</name>) <argument_list>(<argument><expr><name><name>sem</name><operator>-&gt;</operator><name>semstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Data inside an array is at a higher nesting level than the array
	 * itself. Note that we increment this after we call the semantic routine
	 * for the array start and restore it before we call the routine for the
	 * array end.
	 */</comment>
	<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>lex_level</name></name><operator>++</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>lex_expect</name><argument_list>(<argument><expr><name>JSON_PARSE_ARRAY_START</name></expr></argument>, <argument><expr><name>lex</name></expr></argument>, <argument><expr><name>JSON_TOKEN_ARRAY_START</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>JSON_SUCCESS</name> <operator>&amp;&amp;</operator> <call><name>lex_peek</name><argument_list>(<argument><expr><name>lex</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>JSON_TOKEN_ARRAY_END</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>parse_array_element</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<while>while <condition>(<expr><name>result</name> <operator>==</operator> <name>JSON_SUCCESS</name> <operator>&amp;&amp;</operator> <call><name>lex_peek</name><argument_list>(<argument><expr><name>lex</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>JSON_TOKEN_COMMA</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>json_lex</name><argument_list>(<argument><expr><name>lex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>JSON_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>parse_array_element</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>sem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>JSON_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>lex_expect</name><argument_list>(<argument><expr><name>JSON_PARSE_ARRAY_NEXT</name></expr></argument>, <argument><expr><name>lex</name></expr></argument>, <argument><expr><name>JSON_TOKEN_ARRAY_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>JSON_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>lex_level</name></name><operator>--</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>aend</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call>(<modifier>*</modifier><name>aend</name>) <argument_list>(<argument><expr><name><name>sem</name><operator>-&gt;</operator><name>semstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>JSON_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Lex one token from the input stream.
 */</comment>
<function><type><name>JsonParseErrorType</name></type>
<name>json_lex</name><parameter_list>(<parameter><decl><type><name>JsonLexContext</name> <modifier>*</modifier></type><name>lex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonParseErrorType</name></type>	<name>result</name></decl>;</decl_stmt>

	<comment type="block">/* Skip leading whitespace. */</comment>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>lex</name><operator>-&gt;</operator><name>token_terminator</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <name>s</name> <operator>-</operator> <name><name>lex</name><operator>-&gt;</operator><name>input</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>len</name> <operator>&lt;</operator> <name><name>lex</name><operator>-&gt;</operator><name>input_length</name></name> <operator>&amp;&amp;</operator>
		   <operator>(</operator><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\r'</literal><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>++</operator><name><name>lex</name><operator>-&gt;</operator><name>line_number</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><operator>++</operator><name>s</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token_start</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

	<comment type="block">/* Determine token type. */</comment>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name><name>lex</name><operator>-&gt;</operator><name>input_length</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token_start</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>prev_token_terminator</name></name> <operator>=</operator> <name><name>lex</name><operator>-&gt;</operator><name>token_terminator</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token_terminator</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token_type</name></name> <operator>=</operator> <name>JSON_TOKEN_END</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<switch>switch <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition>
		<block>{<block_content>
				<comment type="block">/* Single-character token, some kind of punctuation mark. */</comment>
			<case>case <expr><literal type="char">'{'</literal></expr>:</case>
				<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>prev_token_terminator</name></name> <operator>=</operator> <name><name>lex</name><operator>-&gt;</operator><name>token_terminator</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token_terminator</name></name> <operator>=</operator> <name>s</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token_type</name></name> <operator>=</operator> <name>JSON_TOKEN_OBJECT_START</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'}'</literal></expr>:</case>
				<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>prev_token_terminator</name></name> <operator>=</operator> <name><name>lex</name><operator>-&gt;</operator><name>token_terminator</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token_terminator</name></name> <operator>=</operator> <name>s</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token_type</name></name> <operator>=</operator> <name>JSON_TOKEN_OBJECT_END</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'['</literal></expr>:</case>
				<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>prev_token_terminator</name></name> <operator>=</operator> <name><name>lex</name><operator>-&gt;</operator><name>token_terminator</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token_terminator</name></name> <operator>=</operator> <name>s</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token_type</name></name> <operator>=</operator> <name>JSON_TOKEN_ARRAY_START</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">']'</literal></expr>:</case>
				<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>prev_token_terminator</name></name> <operator>=</operator> <name><name>lex</name><operator>-&gt;</operator><name>token_terminator</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token_terminator</name></name> <operator>=</operator> <name>s</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token_type</name></name> <operator>=</operator> <name>JSON_TOKEN_ARRAY_END</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">','</literal></expr>:</case>
				<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>prev_token_terminator</name></name> <operator>=</operator> <name><name>lex</name><operator>-&gt;</operator><name>token_terminator</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token_terminator</name></name> <operator>=</operator> <name>s</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token_type</name></name> <operator>=</operator> <name>JSON_TOKEN_COMMA</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">':'</literal></expr>:</case>
				<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>prev_token_terminator</name></name> <operator>=</operator> <name><name>lex</name><operator>-&gt;</operator><name>token_terminator</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token_terminator</name></name> <operator>=</operator> <name>s</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token_type</name></name> <operator>=</operator> <name>JSON_TOKEN_COLON</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'"'</literal></expr>:</case>
				<comment type="block">/* string */</comment>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>json_lex_string</name><argument_list>(<argument><expr><name>lex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>JSON_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
				<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token_type</name></name> <operator>=</operator> <name>JSON_TOKEN_STRING</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'-'</literal></expr>:</case>
				<comment type="block">/* Negative number. */</comment>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>json_lex_number</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>JSON_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
				<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token_type</name></name> <operator>=</operator> <name>JSON_TOKEN_NUMBER</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'0'</literal></expr>:</case>
			<case>case <expr><literal type="char">'1'</literal></expr>:</case>
			<case>case <expr><literal type="char">'2'</literal></expr>:</case>
			<case>case <expr><literal type="char">'3'</literal></expr>:</case>
			<case>case <expr><literal type="char">'4'</literal></expr>:</case>
			<case>case <expr><literal type="char">'5'</literal></expr>:</case>
			<case>case <expr><literal type="char">'6'</literal></expr>:</case>
			<case>case <expr><literal type="char">'7'</literal></expr>:</case>
			<case>case <expr><literal type="char">'8'</literal></expr>:</case>
			<case>case <expr><literal type="char">'9'</literal></expr>:</case>
				<comment type="block">/* Positive number. */</comment>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>json_lex_number</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>JSON_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
				<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token_type</name></name> <operator>=</operator> <name>JSON_TOKEN_NUMBER</name></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<block>{<block_content>
					<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

					<comment type="block">/*
					 * We're not dealing with a string, number, legal
					 * punctuation mark, or end of string.  The only legal
					 * tokens we might find here are true, false, and null,
					 * but for error reporting purposes we scan until we see a
					 * non-alphanumeric character.  That way, we can report
					 * the whole word as an unexpected token, rather than just
					 * some unintuitive prefix thereof.
					 */</comment>
					<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>s</name></expr>;</init> <condition><expr><name>p</name> <operator>-</operator> <name>s</name> <operator>&lt;</operator> <name><name>lex</name><operator>-&gt;</operator><name>input_length</name></name> <operator>-</operator> <name>len</name> <operator>&amp;&amp;</operator> <call><name>JSON_ALPHANUMERIC_CHAR</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
						 <comment type="block">/* skip */</comment> <empty_stmt>;</empty_stmt></block_content></block></for>

					<comment type="block">/*
					 * We got some sort of unexpected punctuation or an
					 * otherwise unexpected character, so just complain about
					 * that one character.
					 */</comment>
					<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>s</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>prev_token_terminator</name></name> <operator>=</operator> <name><name>lex</name><operator>-&gt;</operator><name>token_terminator</name></name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token_terminator</name></name> <operator>=</operator> <name>s</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
						<return>return <expr><name>JSON_INVALID_TOKEN</name></expr>;</return>
					</block_content>}</block></if></if_stmt>

					<comment type="block">/*
					 * We've got a real alphanumeric token here.  If it
					 * happens to be true, false, or null, all is well.  If
					 * not, error out.
					 */</comment>
					<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>prev_token_terminator</name></name> <operator>=</operator> <name><name>lex</name><operator>-&gt;</operator><name>token_terminator</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token_terminator</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>p</name> <operator>-</operator> <name>s</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition>
					<block>{<block_content>
						<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token_type</name></name> <operator>=</operator> <name>JSON_TOKEN_TRUE</name></expr>;</expr_stmt></block_content></block></if>
						<if type="elseif">else if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token_type</name></name> <operator>=</operator> <name>JSON_TOKEN_NULL</name></expr>;</expr_stmt></block_content></block></if>
						<else>else<block type="pseudo"><block_content>
							<return>return <expr><name>JSON_INVALID_TOKEN</name></expr>;</return></block_content></block></else></if_stmt>
					</block_content>}</block></if>
					<if type="elseif">else if <condition>(<expr><name>p</name> <operator>-</operator> <name>s</name> <operator>==</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token_type</name></name> <operator>=</operator> <name>JSON_TOKEN_FALSE</name></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<return>return <expr><name>JSON_INVALID_TOKEN</name></expr>;</return></block_content></block></else></if_stmt>

				</block_content>}</block>
		</block_content>}</block></switch>						<comment type="block">/* end of switch */</comment>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>JSON_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * The next token in the input stream is known to be a string; lex it.
 */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>JsonParseErrorType</name></type>
<name>json_lex_string</name><parameter_list>(<parameter><decl><type><name>JsonLexContext</name> <modifier>*</modifier></type><name>lex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>hi_surrogate</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>lex</name><operator>-&gt;</operator><name>strval</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>resetStringInfo</name><argument_list>(<argument><expr><name><name>lex</name><operator>-&gt;</operator><name>strval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>lex</name><operator>-&gt;</operator><name>input_length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>lex</name><operator>-&gt;</operator><name>token_start</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>lex</name><operator>-&gt;</operator><name>token_start</name></name> <operator>-</operator> <name><name>lex</name><operator>-&gt;</operator><name>input</name></name></expr>;</expr_stmt>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
		<comment type="block">/* Premature end of the string. */</comment>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name><name>lex</name><operator>-&gt;</operator><name>input_length</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token_terminator</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
			<return>return <expr><name>JSON_INVALID_TOKEN</name></expr>;</return>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>s</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Per RFC4627, these characters MUST be escaped. */</comment>
			<comment type="block">/* Since *s isn't printable, exclude it from the context string */</comment>
			<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token_terminator</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
			<return>return <expr><name>JSON_ESCAPING_REQUIRED</name></expr>;</return>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* OK, we have an escape character. */</comment>
			<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name><name>lex</name><operator>-&gt;</operator><name>input_length</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token_terminator</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
				<return>return <expr><name>JSON_INVALID_TOKEN</name></expr>;</return>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>			<name>ch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

				<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block>{<block_content>
					<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name><name>lex</name><operator>-&gt;</operator><name>input_length</name></name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token_terminator</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
						<return>return <expr><name>JSON_INVALID_TOKEN</name></expr>;</return>
					</block_content>}</block></if>
					<if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>(</operator><name>ch</name> <operator>*</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>*</operator><name>s</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
					<if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>&lt;=</operator> <literal type="char">'f'</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>(</operator><name>ch</name> <operator>*</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>*</operator><name>s</name> <operator>-</operator> <literal type="char">'a'</literal><operator>)</operator> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if>
					<if type="elseif">else if <condition>(<expr><operator>*</operator><name>s</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>&lt;=</operator> <literal type="char">'F'</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>ch</name> <operator>=</operator> <operator>(</operator><name>ch</name> <operator>*</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>*</operator><name>s</name> <operator>-</operator> <literal type="char">'A'</literal><operator>)</operator> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if>
					<else>else
					<block>{<block_content>
						<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token_terminator</name></name> <operator>=</operator> <name>s</name> <operator>+</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<return>return <expr><name>JSON_UNICODE_ESCAPE_FORMAT</name></expr>;</return>
					</block_content>}</block></else></if_stmt>
				</block_content>}</block></for>
				<if_stmt><if>if <condition>(<expr><name><name>lex</name><operator>-&gt;</operator><name>strval</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>char</name></type>		<name><name>utf8str</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type>			<name>utf8len</name></decl>;</decl_stmt>

					<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <literal type="number">0xd800</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="number">0xdbff</literal></expr>)</condition>
					<block>{<block_content>
						<if_stmt><if>if <condition>(<expr><name>hi_surrogate</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
							<return>return <expr><name>JSON_UNICODE_HIGH_SURROGATE</name></expr>;</return></block_content></block></if></if_stmt>
						<expr_stmt><expr><name>hi_surrogate</name> <operator>=</operator> <operator>(</operator><name>ch</name> <operator>&amp;</operator> <literal type="number">0x3ff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>
						<continue>continue;</continue>
					</block_content>}</block></if>
					<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <literal type="number">0xdc00</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="number">0xdfff</literal></expr>)</condition>
					<block>{<block_content>
						<if_stmt><if>if <condition>(<expr><name>hi_surrogate</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
							<return>return <expr><name>JSON_UNICODE_LOW_SURROGATE</name></expr>;</return></block_content></block></if></if_stmt>
						<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="number">0x10000</literal> <operator>+</operator> <name>hi_surrogate</name> <operator>+</operator> <operator>(</operator><name>ch</name> <operator>&amp;</operator> <literal type="number">0x3ff</literal><operator>)</operator></expr>;</expr_stmt>
						<expr_stmt><expr><name>hi_surrogate</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>

					<if_stmt><if>if <condition>(<expr><name>hi_surrogate</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
						<return>return <expr><name>JSON_UNICODE_LOW_SURROGATE</name></expr>;</return></block_content></block></if></if_stmt>

					<comment type="block">/*
					 * For UTF8, replace the escape sequence by the actual
					 * utf8 character in lex-&gt;strval. Do this also for other
					 * encodings if the escape designates an ASCII character,
					 * otherwise raise an error.
					 */</comment>

					<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
					<block>{<block_content>
						<comment type="block">/* We can't allow this, since our TEXT type doesn't */</comment>
						<return>return <expr><name>JSON_UNICODE_CODE_POINT_ZERO</name></expr>;</return>
					</block_content>}</block></if>
					<if type="elseif">else if <condition>(<expr><call><name>GetDatabaseEncoding</name><argument_list>()</argument_list></call> <operator>==</operator> <name>PG_UTF8</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>unicode_to_utf8</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>utf8str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>utf8len</name> <operator>=</operator> <call><name>pg_utf_mblen</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>utf8str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>appendBinaryStringInfo</name><argument_list>(<argument><expr><name><name>lex</name><operator>-&gt;</operator><name>strval</name></name></expr></argument>, <argument><expr><name>utf8str</name></expr></argument>, <argument><expr><name>utf8len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if>
					<if type="elseif">else if <condition>(<expr><name>ch</name> <operator>&lt;=</operator> <literal type="number">0x007f</literal></expr>)</condition>
					<block>{<block_content>
						<comment type="block">/*
						 * This is the only way to designate things like a
						 * form feed character in JSON, so it's useful in all
						 * encodings.
						 */</comment>
						<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name><name>lex</name><operator>-&gt;</operator><name>strval</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator> <name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if>
					<else>else<block type="pseudo"><block_content>
						<return>return <expr><name>JSON_UNICODE_HIGH_ESCAPE</name></expr>;</return></block_content></block></else></if_stmt>

				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name><name>lex</name><operator>-&gt;</operator><name>strval</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>hi_surrogate</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>JSON_UNICODE_LOW_SURROGATE</name></expr>;</return></block_content></block></if></if_stmt>

				<switch>switch <condition>(<expr><operator>*</operator><name>s</name></expr>)</condition>
				<block>{<block_content>
					<case>case <expr><literal type="char">'"'</literal></expr>:</case>
					<case>case <expr><literal type="char">'\\'</literal></expr>:</case>
					<case>case <expr><literal type="char">'/'</literal></expr>:</case>
						<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name><name>lex</name><operator>-&gt;</operator><name>strval</name></name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><literal type="char">'b'</literal></expr>:</case>
						<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name><name>lex</name><operator>-&gt;</operator><name>strval</name></name></expr></argument>, <argument><expr><literal type="char">'\b'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><literal type="char">'f'</literal></expr>:</case>
						<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name><name>lex</name><operator>-&gt;</operator><name>strval</name></name></expr></argument>, <argument><expr><literal type="char">'\f'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><literal type="char">'n'</literal></expr>:</case>
						<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name><name>lex</name><operator>-&gt;</operator><name>strval</name></name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><literal type="char">'r'</literal></expr>:</case>
						<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name><name>lex</name><operator>-&gt;</operator><name>strval</name></name></expr></argument>, <argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><literal type="char">'t'</literal></expr>:</case>
						<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name><name>lex</name><operator>-&gt;</operator><name>strval</name></name></expr></argument>, <argument><expr><literal type="char">'\t'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<default>default:</default>
						<comment type="block">/* Not a valid string escape, so signal error. */</comment>
						<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token_start</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token_terminator</name></name> <operator>=</operator> <name>s</name> <operator>+</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<return>return <expr><name>JSON_ESCAPING_INVALID</name></expr>;</return>
				</block_content>}</block></switch>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><literal type="string">"\"\\/bfnrt"</literal></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * Simpler processing if we're not bothered about de-escaping
				 *
				 * It's very tempting to remove the strchr() call here and
				 * replace it with a switch statement, but testing so far has
				 * shown it's not a performance win.
				 */</comment>
				<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token_start</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token_terminator</name></name> <operator>=</operator> <name>s</name> <operator>+</operator> <call><name>pg_mblen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>JSON_ESCAPING_INVALID</name></expr>;</return>
			</block_content>}</block></if></if_stmt>

		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>lex</name><operator>-&gt;</operator><name>strval</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>hi_surrogate</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>JSON_UNICODE_LOW_SURROGATE</name></expr>;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name><name>lex</name><operator>-&gt;</operator><name>strval</name></name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>hi_surrogate</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>JSON_UNICODE_LOW_SURROGATE</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Hooray, we found the end of the string! */</comment>
	<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>prev_token_terminator</name></name> <operator>=</operator> <name><name>lex</name><operator>-&gt;</operator><name>token_terminator</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token_terminator</name></name> <operator>=</operator> <name>s</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<return>return <expr><name>JSON_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * The next token in the input stream is known to be a number; lex it.
 *
 * In JSON, a number consists of four parts:
 *
 * (1) An optional minus sign ('-').
 *
 * (2) Either a single '0', or a string of one or more digits that does not
 *	   begin with a '0'.
 *
 * (3) An optional decimal part, consisting of a period ('.') followed by
 *	   one or more digits.  (Note: While this part can be omitted
 *	   completely, it's not OK to have only the decimal point without
 *	   any digits afterwards.)
 *
 * (4) An optional exponent part, consisting of 'e' or 'E', optionally
 *	   followed by '+' or '-', followed by one or more digits.  (Note:
 *	   As with the decimal part, if 'e' or 'E' is present, it must be
 *	   followed by at least one digit.)
 *
 * The 's' argument to this function points to the ostensible beginning
 * of part 2 - i.e. the character after any optional minus sign, or the
 * first character of the string if there is none.
 *
 * If num_err is not NULL, we return an error flag to *num_err rather than
 * raising an error for a badly-formed number.  Also, if total_len is not NULL
 * the distance from lex-&gt;input to the token end+1 is returned to *total_len.
 */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>JsonParseErrorType</name></type>
<name>json_lex_number</name><parameter_list>(<parameter><decl><type><name>JsonLexContext</name> <modifier>*</modifier></type><name>lex</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,
				<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>num_err</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>total_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>error</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name> <init>= <expr><name>s</name> <operator>-</operator> <name><name>lex</name><operator>-&gt;</operator><name>input</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Part (1): leading sign indicator. */</comment>
	<comment type="block">/* Caller already did this for us; so do nothing. */</comment>

	<comment type="block">/* Part (2): parse main digit string. */</comment>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name><name>lex</name><operator>-&gt;</operator><name>input_length</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name><name>lex</name><operator>-&gt;</operator><name>input_length</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>&gt;=</operator> <literal type="char">'1'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition>
	<block>{<block_content>
		<do>do
		<block>{<block_content>
			<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block> while <condition>(<expr><name>len</name> <operator>&lt;</operator> <name><name>lex</name><operator>-&gt;</operator><name>input_length</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition>;</do>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/* Part (3): parse optional decimal portion. */</comment>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name><name>lex</name><operator>-&gt;</operator><name>input_length</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name><name>lex</name><operator>-&gt;</operator><name>input_length</name></name> <operator>||</operator> <operator>*</operator><name><name>s</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <operator>*</operator><name>s</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<do>do
			<block>{<block_content>
				<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block> while <condition>(<expr><name>len</name> <operator>&lt;</operator> <name><name>lex</name><operator>-&gt;</operator><name>input_length</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition>;</do>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Part (4): parse optional exponent. */</comment>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name><name>lex</name><operator>-&gt;</operator><name>input_length</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'e'</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'E'</literal><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name><name>lex</name><operator>-&gt;</operator><name>input_length</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name><name>lex</name><operator>-&gt;</operator><name>input_length</name></name> <operator>||</operator> <operator>*</operator><name><name>s</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <operator>*</operator><name>s</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<do>do
			<block>{<block_content>
				<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block> while <condition>(<expr><name>len</name> <operator>&lt;</operator> <name><name>lex</name><operator>-&gt;</operator><name>input_length</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition>;</do>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Check for trailing garbage.  As in json_lex(), any alphanumeric stuff
	 * here should be considered part of the token for error-reporting
	 * purposes.
	 */</comment>
	<for>for <control>(<init>;</init> <condition><expr><name>len</name> <operator>&lt;</operator> <name><name>lex</name><operator>-&gt;</operator><name>input_length</name></name> <operator>&amp;&amp;</operator> <call><name>JSON_ALPHANUMERIC_CHAR</name><argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr><operator>,</operator> <expr><name>len</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name>error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></for>

	<if_stmt><if>if <condition>(<expr><name>total_len</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>total_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>num_err</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* let the caller handle any error */</comment>
		<expr_stmt><expr><operator>*</operator><name>num_err</name> <operator>=</operator> <name>error</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* return token endpoint */</comment>
		<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>prev_token_terminator</name></name> <operator>=</operator> <name><name>lex</name><operator>-&gt;</operator><name>token_terminator</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>token_terminator</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
		<comment type="block">/* handle error if any */</comment>
		<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>JSON_INVALID_TOKEN</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>JSON_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Report a parse error.
 *
 * lex-&gt;token_start and lex-&gt;token_terminator must identify the current token.
 */</comment>
<function><type><specifier>static</specifier> <name>JsonParseErrorType</name></type>
<name>report_parse_error</name><parameter_list>(<parameter><decl><type><name>JsonParseContext</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>JsonLexContext</name> <modifier>*</modifier></type><name>lex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Handle case where the input ended prematurely. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>lex</name><operator>-&gt;</operator><name>token_start</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>lex</name><operator>-&gt;</operator><name>token_type</name></name> <operator>==</operator> <name>JSON_TOKEN_END</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>JSON_EXPECTED_MORE</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Otherwise choose the error type based on the parsing context. */</comment>
	<switch>switch <condition>(<expr><name>ctx</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>JSON_PARSE_END</name></expr>:</case>
			<return>return <expr><name>JSON_EXPECTED_END</name></expr>;</return>
		<case>case <expr><name>JSON_PARSE_VALUE</name></expr>:</case>
			<return>return <expr><name>JSON_EXPECTED_JSON</name></expr>;</return>
		<case>case <expr><name>JSON_PARSE_STRING</name></expr>:</case>
			<return>return <expr><name>JSON_EXPECTED_STRING</name></expr>;</return>
		<case>case <expr><name>JSON_PARSE_ARRAY_START</name></expr>:</case>
			<return>return <expr><name>JSON_EXPECTED_ARRAY_FIRST</name></expr>;</return>
		<case>case <expr><name>JSON_PARSE_ARRAY_NEXT</name></expr>:</case>
			<return>return <expr><name>JSON_EXPECTED_ARRAY_NEXT</name></expr>;</return>
		<case>case <expr><name>JSON_PARSE_OBJECT_START</name></expr>:</case>
			<return>return <expr><name>JSON_EXPECTED_OBJECT_FIRST</name></expr>;</return>
		<case>case <expr><name>JSON_PARSE_OBJECT_LABEL</name></expr>:</case>
			<return>return <expr><name>JSON_EXPECTED_COLON</name></expr>;</return>
		<case>case <expr><name>JSON_PARSE_OBJECT_NEXT</name></expr>:</case>
			<return>return <expr><name>JSON_EXPECTED_OBJECT_NEXT</name></expr>;</return>
		<case>case <expr><name>JSON_PARSE_OBJECT_COMMA</name></expr>:</case>
			<return>return <expr><name>JSON_EXPECTED_STRING</name></expr>;</return>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unexpected json parse state: %d"</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
 * Construct a detail message for a JSON error.
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>json_errdetail</name><parameter_list>(<parameter><decl><type><name>JsonParseErrorType</name></type> <name>error</name></decl></parameter>, <parameter><decl><type><name>JsonLexContext</name> <modifier>*</modifier></type><name>lex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>error</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>JSON_SUCCESS</name></expr>:</case>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"internal error in json parser"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>JSON_ESCAPING_INVALID</name></expr>:</case>
			<return>return <expr><call><name>psprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Escape sequence \"\\%s\" is invalid."</literal></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><call><name>extract_token</name><argument_list>(<argument><expr><name>lex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>JSON_ESCAPING_REQUIRED</name></expr>:</case>
			<return>return <expr><call><name>psprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Character with value 0x%02x must be escaped."</literal></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><operator>(</operator><name><name>lex</name><operator>-&gt;</operator><name>token_terminator</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>JSON_EXPECTED_END</name></expr>:</case>
			<return>return <expr><call><name>psprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Expected end of input, but found \"%s\"."</literal></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><call><name>extract_token</name><argument_list>(<argument><expr><name>lex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>JSON_EXPECTED_ARRAY_FIRST</name></expr>:</case>
			<return>return <expr><call><name>psprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Expected array element or \"]\", but found \"%s\"."</literal></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><call><name>extract_token</name><argument_list>(<argument><expr><name>lex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>JSON_EXPECTED_ARRAY_NEXT</name></expr>:</case>
			<return>return <expr><call><name>psprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Expected \",\" or \"]\", but found \"%s\"."</literal></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><call><name>extract_token</name><argument_list>(<argument><expr><name>lex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>JSON_EXPECTED_COLON</name></expr>:</case>
			<return>return <expr><call><name>psprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Expected \":\", but found \"%s\"."</literal></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><call><name>extract_token</name><argument_list>(<argument><expr><name>lex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>JSON_EXPECTED_JSON</name></expr>:</case>
			<return>return <expr><call><name>psprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Expected JSON value, but found \"%s\"."</literal></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><call><name>extract_token</name><argument_list>(<argument><expr><name>lex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>JSON_EXPECTED_MORE</name></expr>:</case>
			<return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"The input string ended unexpectedly."</literal></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>JSON_EXPECTED_OBJECT_FIRST</name></expr>:</case>
			<return>return <expr><call><name>psprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Expected string or \"}\", but found \"%s\"."</literal></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><call><name>extract_token</name><argument_list>(<argument><expr><name>lex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>JSON_EXPECTED_OBJECT_NEXT</name></expr>:</case>
			<return>return <expr><call><name>psprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Expected \",\" or \"}\", but found \"%s\"."</literal></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><call><name>extract_token</name><argument_list>(<argument><expr><name>lex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>JSON_EXPECTED_STRING</name></expr>:</case>
			<return>return <expr><call><name>psprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Expected string, but found \"%s\"."</literal></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><call><name>extract_token</name><argument_list>(<argument><expr><name>lex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>JSON_INVALID_TOKEN</name></expr>:</case>
			<return>return <expr><call><name>psprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Token \"%s\" is invalid."</literal></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><call><name>extract_token</name><argument_list>(<argument><expr><name>lex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>JSON_UNICODE_CODE_POINT_ZERO</name></expr>:</case>
			<return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\\u0000 cannot be converted to text."</literal></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>JSON_UNICODE_ESCAPE_FORMAT</name></expr>:</case>
			<return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\"\\u\" must be followed by four hexadecimal digits."</literal></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>JSON_UNICODE_HIGH_ESCAPE</name></expr>:</case>
			<return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Unicode escape values cannot be used for code point values above 007F when the server encoding is not UTF8."</literal></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>JSON_UNICODE_HIGH_SURROGATE</name></expr>:</case>
			<return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Unicode high surrogate must not follow a high surrogate."</literal></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>JSON_UNICODE_LOW_SURROGATE</name></expr>:</case>
			<return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Unicode low surrogate must follow a high surrogate."</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></switch>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Extract the current token from a lexing context, for error reporting.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>extract_token</name><parameter_list>(<parameter><decl><type><name>JsonLexContext</name> <modifier>*</modifier></type><name>lex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>toklen</name> <init>= <expr><name><name>lex</name><operator>-&gt;</operator><name>token_terminator</name></name> <operator>-</operator> <name><name>lex</name><operator>-&gt;</operator><name>token_start</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>token</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><name>toklen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name><name>lex</name><operator>-&gt;</operator><name>token_start</name></name></expr></argument>, <argument><expr><name>toklen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>token</name><index>[<expr><name>toklen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<return>return <expr><name>token</name></expr>;</return>
</block_content>}</block></function>
</unit>
