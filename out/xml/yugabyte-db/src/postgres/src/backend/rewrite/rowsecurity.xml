<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/backend/rewrite/rowsecurity.c"><comment type="block">/*
 * rewrite/rowsecurity.c
 *	  Routines to support policies for row level security (aka RLS).
 *
 * Policies in PostgreSQL provide a mechanism to limit what records are
 * returned to a user and what records a user is permitted to add to a table.
 *
 * Policies can be defined for specific roles, specific commands, or provided
 * by an extension.  Row security can also be enabled for a table without any
 * policies being explicitly defined, in which case a default-deny policy is
 * applied.
 *
 * Any part of the system which is returning records back to the user, or
 * which is accepting records from the user to add to a table, needs to
 * consider the policies associated with the table (if any).  For normal
 * queries, this is handled by calling get_row_security_policies() during
 * rewrite, for each RTE in the query.  This returns the expressions defined
 * by the table's policies as a list that is prepended to the securityQuals
 * list for the RTE.  For queries which modify the table, any WITH CHECK
 * clauses from the table's policies are also returned and prepended to the
 * list of WithCheckOptions for the Query to check each row that is being
 * added to the table.  Other parts of the system (eg: COPY) simply construct
 * a normal query and use that, if RLS is to be applied.
 *
 * The check to see if RLS should be enabled is provided through
 * check_enable_rls(), which returns an enum (defined in rowsecurity.h) to
 * indicate if RLS should be enabled (RLS_ENABLED), or bypassed (RLS_NONE or
 * RLS_NONE_ENV).  RLS_NONE_ENV indicates that RLS should be bypassed
 * in the current environment, but that may change if the row_security GUC or
 * the current role changes.
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/heapam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/sysattr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_class.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_inherits.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_policy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/makefuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/nodeFuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/pg_list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/plannodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parsetree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rewrite/rewriteHandler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rewrite/rewriteManip.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rewrite/rowsecurity.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcop/utility.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>get_policies_for_relation</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>,
						  <parameter><decl><type><name>CmdType</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>user_id</name></decl></parameter>,
						  <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>permissive_policies</name></decl></parameter>,
						  <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>restrictive_policies</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type><name>sort_policies_by_name</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>policies</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>row_security_policy_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>add_security_quals</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rt_index</name></decl></parameter>,
				   <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>permissive_policies</name></decl></parameter>,
				   <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>restrictive_policies</name></decl></parameter>,
				   <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>securityQuals</name></decl></parameter>,
				   <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>hasSubLinks</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>add_with_check_options</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>,
					   <parameter><decl><type><name>int</name></type> <name>rt_index</name></decl></parameter>,
					   <parameter><decl><type><name>WCOKind</name></type> <name>kind</name></decl></parameter>,
					   <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>permissive_policies</name></decl></parameter>,
					   <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>restrictive_policies</name></decl></parameter>,
					   <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>withCheckOptions</name></decl></parameter>,
					   <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>hasSubLinks</name></decl></parameter>,
					   <parameter><decl><type><name>bool</name></type> <name>force_using</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>check_role_for_policy</name><parameter_list>(<parameter><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>policy_roles</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>user_id</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * hooks to allow extensions to add their own security policies
 *
 * row_security_policy_hook_permissive can be used to add policies which
 * are combined with the other permissive policies, using OR.
 *
 * row_security_policy_hook_restrictive can be used to add policies which
 * are enforced, regardless of other policies (they are combined using AND).
 */</comment>
<decl_stmt><decl><type><name>row_security_policy_hook_type</name></type> <name>row_security_policy_hook_permissive</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>row_security_policy_hook_type</name></type> <name>row_security_policy_hook_restrictive</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Get any row security quals and WithCheckOption checks that should be
 * applied to the specified RTE.
 *
 * In addition, hasRowSecurity is set to true if row level security is enabled
 * (even if this RTE doesn't have any row security quals), and hasSubLinks is
 * set to true if any of the quals returned contain sublinks.
 */</comment>
<function><type><name>void</name></type>
<name>get_row_security_policies</name><parameter_list>(<parameter><decl><type><name>Query</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>rte</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rt_index</name></decl></parameter>,
						  <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>securityQuals</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>withCheckOptions</name></decl></parameter>,
						  <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>hasRowSecurity</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>hasSubLinks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>user_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>rls_status</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>rel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CmdType</name></type>		<name>commandType</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>permissive_policies</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>restrictive_policies</name></decl>;</decl_stmt>

	<comment type="block">/* Defaults for the return values */</comment>
	<expr_stmt><expr><operator>*</operator><name>securityQuals</name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>withCheckOptions</name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>hasRowSecurity</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>hasSubLinks</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<comment type="block">/* If this is not a normal relation, just return immediately */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>rte</name><operator>-&gt;</operator><name>relkind</name></name> <operator>!=</operator> <name>RELKIND_RELATION</name> <operator>&amp;&amp;</operator>
		<name><name>rte</name><operator>-&gt;</operator><name>relkind</name></name> <operator>!=</operator> <name>RELKIND_PARTITIONED_TABLE</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Switch to checkAsUser if it's set */</comment>
	<expr_stmt><expr><name>user_id</name> <operator>=</operator> <ternary><condition><expr><name><name>rte</name><operator>-&gt;</operator><name>checkAsUser</name></name></expr> ?</condition><then> <expr><name><name>rte</name><operator>-&gt;</operator><name>checkAsUser</name></name></expr> </then><else>: <expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

	<comment type="block">/* Determine the state of RLS for this, pass checkAsUser explicitly */</comment>
	<expr_stmt><expr><name>rls_status</name> <operator>=</operator> <call><name>check_enable_rls</name><argument_list>(<argument><expr><name><name>rte</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>, <argument><expr><name><name>rte</name><operator>-&gt;</operator><name>checkAsUser</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* If there is no RLS on this table at all, nothing to do */</comment>
	<if_stmt><if>if <condition>(<expr><name>rls_status</name> <operator>==</operator> <name>RLS_NONE</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * RLS_NONE_ENV means we are not doing any RLS now, but that may change
	 * with changes to the environment, so we mark it as hasRowSecurity to
	 * force a re-plan when the environment changes.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>rls_status</name> <operator>==</operator> <name>RLS_NONE_ENV</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Indicate that this query may involve RLS and must therefore be
		 * replanned if the environment changes (GUCs, role), but we are not
		 * adding anything here.
		 */</comment>
		<expr_stmt><expr><operator>*</operator><name>hasRowSecurity</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * RLS is enabled for this relation.
	 *
	 * Get the security policies that should be applied, based on the command
	 * type.  Note that if this isn't the target relation, we actually want
	 * the relation's SELECT policies, regardless of the query command type,
	 * for example in UPDATE t1 ... FROM t2 we need to apply t1's UPDATE
	 * policies and t2's SELECT policies.
	 */</comment>
	<expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name><name>rte</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>commandType</name> <operator>=</operator> <ternary><condition><expr><name>rt_index</name> <operator>==</operator> <name><name>root</name><operator>-&gt;</operator><name>resultRelation</name></name></expr> ?</condition><then>
		<expr><name><name>root</name><operator>-&gt;</operator><name>commandType</name></name></expr> </then><else>: <expr><name>CMD_SELECT</name></expr></else></ternary></expr>;</expr_stmt>

	<comment type="block">/*
	 * In some cases, we need to apply USING policies (which control the
	 * visibility of records) associated with multiple command types (see
	 * specific cases below).
	 *
	 * When considering the order in which to apply these USING policies, we
	 * prefer to apply higher privileged policies, those which allow the user
	 * to lock records (UPDATE and DELETE), first, followed by policies which
	 * don't (SELECT).
	 *
	 * Note that the optimizer is free to push down and reorder quals which
	 * use leakproof functions.
	 *
	 * In all cases, if there are no policy clauses allowing access to rows in
	 * the table for the specific type of operation, then a single
	 * always-false clause (a default-deny policy) will be added (see
	 * add_security_quals).
	 */</comment>

	<comment type="block">/*
	 * For a SELECT, if UPDATE privileges are required (eg: the user has
	 * specified FOR [KEY] UPDATE/SHARE), then add the UPDATE USING quals
	 * first.
	 *
	 * This way, we filter out any records from the SELECT FOR SHARE/UPDATE
	 * which the user does not have access to via the UPDATE USING policies,
	 * similar to how we require normal UPDATE rights for these queries.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>commandType</name> <operator>==</operator> <name>CMD_SELECT</name> <operator>&amp;&amp;</operator> <name><name>rte</name><operator>-&gt;</operator><name>requiredPerms</name></name> <operator>&amp;</operator> <name>ACL_UPDATE</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>update_permissive_policies</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>update_restrictive_policies</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>get_policies_for_relation</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>CMD_UPDATE</name></expr></argument>, <argument><expr><name>user_id</name></expr></argument>,
								  <argument><expr><operator>&amp;</operator><name>update_permissive_policies</name></expr></argument>,
								  <argument><expr><operator>&amp;</operator><name>update_restrictive_policies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>add_security_quals</name><argument_list>(<argument><expr><name>rt_index</name></expr></argument>,
						   <argument><expr><name>update_permissive_policies</name></expr></argument>,
						   <argument><expr><name>update_restrictive_policies</name></expr></argument>,
						   <argument><expr><name>securityQuals</name></expr></argument>,
						   <argument><expr><name>hasSubLinks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * For SELECT, UPDATE and DELETE, add security quals to enforce the USING
	 * policies.  These security quals control access to existing table rows.
	 * Restrictive policies are combined together using AND, and permissive
	 * policies are combined together using OR.
	 */</comment>

	<expr_stmt><expr><call><name>get_policies_for_relation</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>commandType</name></expr></argument>, <argument><expr><name>user_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>permissive_policies</name></expr></argument>,
							  <argument><expr><operator>&amp;</operator><name>restrictive_policies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>commandType</name> <operator>==</operator> <name>CMD_SELECT</name> <operator>||</operator>
		<name>commandType</name> <operator>==</operator> <name>CMD_UPDATE</name> <operator>||</operator>
		<name>commandType</name> <operator>==</operator> <name>CMD_DELETE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>add_security_quals</name><argument_list>(<argument><expr><name>rt_index</name></expr></argument>,
						   <argument><expr><name>permissive_policies</name></expr></argument>,
						   <argument><expr><name>restrictive_policies</name></expr></argument>,
						   <argument><expr><name>securityQuals</name></expr></argument>,
						   <argument><expr><name>hasSubLinks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Similar to above, during an UPDATE or DELETE, if SELECT rights are also
	 * required (eg: when a RETURNING clause exists, or the user has provided
	 * a WHERE clause which involves columns from the relation), we collect up
	 * CMD_SELECT policies and add them via add_security_quals first.
	 *
	 * This way, we filter out any records which are not visible through an
	 * ALL or SELECT USING policy.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>commandType</name> <operator>==</operator> <name>CMD_UPDATE</name> <operator>||</operator> <name>commandType</name> <operator>==</operator> <name>CMD_DELETE</name><operator>)</operator> <operator>&amp;&amp;</operator>
		<name><name>rte</name><operator>-&gt;</operator><name>requiredPerms</name></name> <operator>&amp;</operator> <name>ACL_SELECT</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>select_permissive_policies</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>select_restrictive_policies</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>get_policies_for_relation</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>CMD_SELECT</name></expr></argument>, <argument><expr><name>user_id</name></expr></argument>,
								  <argument><expr><operator>&amp;</operator><name>select_permissive_policies</name></expr></argument>,
								  <argument><expr><operator>&amp;</operator><name>select_restrictive_policies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>add_security_quals</name><argument_list>(<argument><expr><name>rt_index</name></expr></argument>,
						   <argument><expr><name>select_permissive_policies</name></expr></argument>,
						   <argument><expr><name>select_restrictive_policies</name></expr></argument>,
						   <argument><expr><name>securityQuals</name></expr></argument>,
						   <argument><expr><name>hasSubLinks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * For INSERT and UPDATE, add withCheckOptions to verify that any new
	 * records added are consistent with the security policies.  This will use
	 * each policy's WITH CHECK clause, or its USING clause if no explicit
	 * WITH CHECK clause is defined.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>commandType</name> <operator>==</operator> <name>CMD_INSERT</name> <operator>||</operator> <name>commandType</name> <operator>==</operator> <name>CMD_UPDATE</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* This should be the target relation */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>rt_index</name> <operator>==</operator> <name><name>root</name><operator>-&gt;</operator><name>resultRelation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>add_with_check_options</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>rt_index</name></expr></argument>,
							   <argument><expr><ternary><condition><expr><name>commandType</name> <operator>==</operator> <name>CMD_INSERT</name></expr> ?</condition><then>
							   <expr><name>WCO_RLS_INSERT_CHECK</name></expr> </then><else>: <expr><name>WCO_RLS_UPDATE_CHECK</name></expr></else></ternary></expr></argument>,
							   <argument><expr><name>permissive_policies</name></expr></argument>,
							   <argument><expr><name>restrictive_policies</name></expr></argument>,
							   <argument><expr><name>withCheckOptions</name></expr></argument>,
							   <argument><expr><name>hasSubLinks</name></expr></argument>,
							   <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Get and add ALL/SELECT policies, if SELECT rights are required for
		 * this relation (eg: when RETURNING is used).  These are added as WCO
		 * policies rather than security quals to ensure that an error is
		 * raised if a policy is violated; otherwise, we might end up silently
		 * dropping rows to be added.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>rte</name><operator>-&gt;</operator><name>requiredPerms</name></name> <operator>&amp;</operator> <name>ACL_SELECT</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>select_permissive_policies</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>select_restrictive_policies</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>get_policies_for_relation</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>CMD_SELECT</name></expr></argument>, <argument><expr><name>user_id</name></expr></argument>,
									  <argument><expr><operator>&amp;</operator><name>select_permissive_policies</name></expr></argument>,
									  <argument><expr><operator>&amp;</operator><name>select_restrictive_policies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>add_with_check_options</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>rt_index</name></expr></argument>,
								   <argument><expr><ternary><condition><expr><name>commandType</name> <operator>==</operator> <name>CMD_INSERT</name></expr> ?</condition><then>
								   <expr><name>WCO_RLS_INSERT_CHECK</name></expr> </then><else>: <expr><name>WCO_RLS_UPDATE_CHECK</name></expr></else></ternary></expr></argument>,
								   <argument><expr><name>select_permissive_policies</name></expr></argument>,
								   <argument><expr><name>select_restrictive_policies</name></expr></argument>,
								   <argument><expr><name>withCheckOptions</name></expr></argument>,
								   <argument><expr><name>hasSubLinks</name></expr></argument>,
								   <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * For INSERT ... ON CONFLICT DO UPDATE we need additional policy
		 * checks for the UPDATE which may be applied to the same RTE.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>commandType</name> <operator>==</operator> <name>CMD_INSERT</name> <operator>&amp;&amp;</operator>
			<name><name>root</name><operator>-&gt;</operator><name>onConflict</name></name> <operator>&amp;&amp;</operator> <name><name>root</name><operator>-&gt;</operator><name>onConflict</name><operator>-&gt;</operator><name>action</name></name> <operator>==</operator> <name>ONCONFLICT_UPDATE</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>conflict_permissive_policies</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>conflict_restrictive_policies</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>conflict_select_permissive_policies</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>conflict_select_restrictive_policies</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>

			<comment type="block">/* Get the policies that apply to the auxiliary UPDATE */</comment>
			<expr_stmt><expr><call><name>get_policies_for_relation</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>CMD_UPDATE</name></expr></argument>, <argument><expr><name>user_id</name></expr></argument>,
									  <argument><expr><operator>&amp;</operator><name>conflict_permissive_policies</name></expr></argument>,
									  <argument><expr><operator>&amp;</operator><name>conflict_restrictive_policies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * Enforce the USING clauses of the UPDATE policies using WCOs
			 * rather than security quals.  This ensures that an error is
			 * raised if the conflicting row cannot be updated due to RLS,
			 * rather than the change being silently dropped.
			 */</comment>
			<expr_stmt><expr><call><name>add_with_check_options</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>rt_index</name></expr></argument>,
								   <argument><expr><name>WCO_RLS_CONFLICT_CHECK</name></expr></argument>,
								   <argument><expr><name>conflict_permissive_policies</name></expr></argument>,
								   <argument><expr><name>conflict_restrictive_policies</name></expr></argument>,
								   <argument><expr><name>withCheckOptions</name></expr></argument>,
								   <argument><expr><name>hasSubLinks</name></expr></argument>,
								   <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * Get and add ALL/SELECT policies, as WCO_RLS_CONFLICT_CHECK WCOs
			 * to ensure they are considered when taking the UPDATE path of an
			 * INSERT .. ON CONFLICT DO UPDATE, if SELECT rights are required
			 * for this relation, also as WCO policies, again, to avoid
			 * silently dropping data.  See above.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>rte</name><operator>-&gt;</operator><name>requiredPerms</name></name> <operator>&amp;</operator> <name>ACL_SELECT</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>get_policies_for_relation</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>CMD_SELECT</name></expr></argument>, <argument><expr><name>user_id</name></expr></argument>,
										  <argument><expr><operator>&amp;</operator><name>conflict_select_permissive_policies</name></expr></argument>,
										  <argument><expr><operator>&amp;</operator><name>conflict_select_restrictive_policies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>add_with_check_options</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>rt_index</name></expr></argument>,
									   <argument><expr><name>WCO_RLS_CONFLICT_CHECK</name></expr></argument>,
									   <argument><expr><name>conflict_select_permissive_policies</name></expr></argument>,
									   <argument><expr><name>conflict_select_restrictive_policies</name></expr></argument>,
									   <argument><expr><name>withCheckOptions</name></expr></argument>,
									   <argument><expr><name>hasSubLinks</name></expr></argument>,
									   <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* Enforce the WITH CHECK clauses of the UPDATE policies */</comment>
			<expr_stmt><expr><call><name>add_with_check_options</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>rt_index</name></expr></argument>,
								   <argument><expr><name>WCO_RLS_UPDATE_CHECK</name></expr></argument>,
								   <argument><expr><name>conflict_permissive_policies</name></expr></argument>,
								   <argument><expr><name>conflict_restrictive_policies</name></expr></argument>,
								   <argument><expr><name>withCheckOptions</name></expr></argument>,
								   <argument><expr><name>hasSubLinks</name></expr></argument>,
								   <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * Add ALL/SELECT policies as WCO_RLS_UPDATE_CHECK WCOs, to ensure
			 * that the final updated row is visible when taking the UPDATE
			 * path of an INSERT .. ON CONFLICT DO UPDATE, if SELECT rights
			 * are required for this relation.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>rte</name><operator>-&gt;</operator><name>requiredPerms</name></name> <operator>&amp;</operator> <name>ACL_SELECT</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>add_with_check_options</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>rt_index</name></expr></argument>,
									   <argument><expr><name>WCO_RLS_UPDATE_CHECK</name></expr></argument>,
									   <argument><expr><name>conflict_select_permissive_policies</name></expr></argument>,
									   <argument><expr><name>conflict_select_restrictive_policies</name></expr></argument>,
									   <argument><expr><name>withCheckOptions</name></expr></argument>,
									   <argument><expr><name>hasSubLinks</name></expr></argument>,
									   <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Mark this query as having row security, so plancache can invalidate it
	 * when necessary (eg: role changes)
	 */</comment>
	<expr_stmt><expr><operator>*</operator><name>hasRowSecurity</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
 * get_policies_for_relation
 *
 * Returns lists of permissive and restrictive policies to be applied to the
 * specified relation, based on the command type and role.
 *
 * This includes any policies added by extensions.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>get_policies_for_relation</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>, <parameter><decl><type><name>CmdType</name></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>user_id</name></decl></parameter>,
						  <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>permissive_policies</name></decl></parameter>,
						  <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>restrictive_policies</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>permissive_policies</name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>restrictive_policies</name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>

	<comment type="block">/* First find all internal policies for the relation. */</comment>
	<macro><name>foreach</name><argument_list>(<argument>item</argument>, <argument>relation-&gt;rd_rsdesc-&gt;policies</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type>		<name>cmd_matches</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>RowSecurityPolicy</name> <modifier>*</modifier></type><name>policy</name> <init>= <expr><operator>(</operator><name>RowSecurityPolicy</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/* Always add ALL policies, if they exist. */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>policy</name><operator>-&gt;</operator><name>polcmd</name></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>cmd_matches</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* Check whether the policy applies to the specified command type */</comment>
			<switch>switch <condition>(<expr><name>cmd</name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>CMD_SELECT</name></expr>:</case>
					<if_stmt><if>if <condition>(<expr><name><name>policy</name><operator>-&gt;</operator><name>polcmd</name></name> <operator>==</operator> <name>ACL_SELECT_CHR</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>cmd_matches</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<break>break;</break>
				<case>case <expr><name>CMD_INSERT</name></expr>:</case>
					<if_stmt><if>if <condition>(<expr><name><name>policy</name><operator>-&gt;</operator><name>polcmd</name></name> <operator>==</operator> <name>ACL_INSERT_CHR</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>cmd_matches</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<break>break;</break>
				<case>case <expr><name>CMD_UPDATE</name></expr>:</case>
					<if_stmt><if>if <condition>(<expr><name><name>policy</name><operator>-&gt;</operator><name>polcmd</name></name> <operator>==</operator> <name>ACL_UPDATE_CHR</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>cmd_matches</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<break>break;</break>
				<case>case <expr><name>CMD_DELETE</name></expr>:</case>
					<if_stmt><if>if <condition>(<expr><name><name>policy</name><operator>-&gt;</operator><name>polcmd</name></name> <operator>==</operator> <name>ACL_DELETE_CHR</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>cmd_matches</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<break>break;</break>
				<default>default:</default>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized policy command type %d"</literal></expr></argument>,
						 <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
			</block_content>}</block></switch>
		</block_content>}</block></else></if_stmt>

		<comment type="block">/*
		 * Add this policy to the relevant list of policies if it applies to
		 * the specified role.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>cmd_matches</name> <operator>&amp;&amp;</operator> <call><name>check_role_for_policy</name><argument_list>(<argument><expr><name><name>policy</name><operator>-&gt;</operator><name>roles</name></name></expr></argument>, <argument><expr><name>user_id</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>policy</name><operator>-&gt;</operator><name>permissive</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>permissive_policies</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><operator>*</operator><name>permissive_policies</name></expr></argument>, <argument><expr><name>policy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>restrictive_policies</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><operator>*</operator><name>restrictive_policies</name></expr></argument>, <argument><expr><name>policy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<comment type="block">/*
	 * We sort restrictive policies by name so that any WCOs they generate are
	 * checked in a well-defined order.
	 */</comment>
	<expr_stmt><expr><operator>*</operator><name>restrictive_policies</name> <operator>=</operator> <call><name>sort_policies_by_name</name><argument_list>(<argument><expr><operator>*</operator><name>restrictive_policies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Then add any permissive or restrictive policies defined by extensions.
	 * These are simply appended to the lists of internal policies, if they
	 * apply to the specified role.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>row_security_policy_hook_restrictive</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>hook_policies</name> <init>=
		<expr><call>(<modifier>*</modifier><name>row_security_policy_hook_restrictive</name>) <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/*
		 * As with built-in restrictive policies, we sort any hook-provided
		 * restrictive policies by name also.  Note that we also intentionally
		 * always check all built-in restrictive policies, in name order,
		 * before checking restrictive policies added by hooks, in name order.
		 */</comment>
		<expr_stmt><expr><name>hook_policies</name> <operator>=</operator> <call><name>sort_policies_by_name</name><argument_list>(<argument><expr><name>hook_policies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<macro><name>foreach</name><argument_list>(<argument>item</argument>, <argument>hook_policies</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>RowSecurityPolicy</name> <modifier>*</modifier></type><name>policy</name> <init>= <expr><operator>(</operator><name>RowSecurityPolicy</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>check_role_for_policy</name><argument_list>(<argument><expr><name><name>policy</name><operator>-&gt;</operator><name>roles</name></name></expr></argument>, <argument><expr><name>user_id</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>restrictive_policies</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><operator>*</operator><name>restrictive_policies</name></expr></argument>, <argument><expr><name>policy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>row_security_policy_hook_permissive</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>hook_policies</name> <init>=
		<expr><call>(<modifier>*</modifier><name>row_security_policy_hook_permissive</name>) <argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<macro><name>foreach</name><argument_list>(<argument>item</argument>, <argument>hook_policies</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>RowSecurityPolicy</name> <modifier>*</modifier></type><name>policy</name> <init>= <expr><operator>(</operator><name>RowSecurityPolicy</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>check_role_for_policy</name><argument_list>(<argument><expr><name><name>policy</name><operator>-&gt;</operator><name>roles</name></name></expr></argument>, <argument><expr><name>user_id</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>permissive_policies</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><operator>*</operator><name>permissive_policies</name></expr></argument>, <argument><expr><name>policy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * sort_policies_by_name
 *
 * This is only used for restrictive policies, ensuring that any
 * WithCheckOptions they generate are applied in a well-defined order.
 * This is not necessary for permissive policies, since they are all combined
 * together using OR into a single WithCheckOption check.
 */</comment>
<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type>
<name>sort_policies_by_name</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>policies</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>npol</name> <init>= <expr><call><name>list_length</name><argument_list>(<argument><expr><name>policies</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RowSecurityPolicy</name> <modifier>*</modifier></type><name>pols</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>ii</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>npol</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>policies</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>pols</name> <operator>=</operator> <operator>(</operator><name>RowSecurityPolicy</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RowSecurityPolicy</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>npol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>foreach</name><argument_list>(<argument>item</argument>, <argument>policies</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>RowSecurityPolicy</name> <modifier>*</modifier></type><name>policy</name> <init>= <expr><operator>(</operator><name>RowSecurityPolicy</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>pols</name><index>[<expr><name>ii</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>policy</name></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>pols</name></expr></argument>, <argument><expr><name>npol</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RowSecurityPolicy</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>row_security_policy_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>policies</name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>ii</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>npol</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name>policies</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>policies</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pols</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<return>return <expr><name>policies</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * qsort comparator to sort RowSecurityPolicy entries by name
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>row_security_policy_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>RowSecurityPolicy</name> <modifier>*</modifier></type><name>pa</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>RowSecurityPolicy</name> <operator>*</operator><operator>)</operator> <name>a</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>RowSecurityPolicy</name> <modifier>*</modifier></type><name>pb</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>RowSecurityPolicy</name> <operator>*</operator><operator>)</operator> <name>b</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Guard against NULL policy names from extensions */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>pa</name><operator>-&gt;</operator><name>policy_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><ternary><condition><expr><name><name>pb</name><operator>-&gt;</operator><name>policy_name</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>pb</name><operator>-&gt;</operator><name>policy_name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pa</name><operator>-&gt;</operator><name>policy_name</name></name></expr></argument>, <argument><expr><name><name>pb</name><operator>-&gt;</operator><name>policy_name</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * add_security_quals
 *
 * Add security quals to enforce the specified RLS policies, restricting
 * access to existing data in a table.  If there are no policies controlling
 * access to the table, then all access is prohibited --- i.e., an implicit
 * default-deny policy is used.
 *
 * New security quals are added to securityQuals, and hasSubLinks is set to
 * true if any of the quals added contain sublink subqueries.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_security_quals</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rt_index</name></decl></parameter>,
				   <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>permissive_policies</name></decl></parameter>,
				   <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>restrictive_policies</name></decl></parameter>,
				   <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>securityQuals</name></decl></parameter>,
				   <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>hasSubLinks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>permissive_quals</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Expr</name>	   <modifier>*</modifier></type><name>rowsec_expr</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * First collect up the permissive quals.  If we do not find any
	 * permissive policies then no rows are visible (this is handled below).
	 */</comment>
	<macro><name>foreach</name><argument_list>(<argument>item</argument>, <argument>permissive_policies</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>RowSecurityPolicy</name> <modifier>*</modifier></type><name>policy</name> <init>= <expr><operator>(</operator><name>RowSecurityPolicy</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>policy</name><operator>-&gt;</operator><name>qual</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>permissive_quals</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>permissive_quals</name></expr></argument>,
									   <argument><expr><call><name>copyObject</name><argument_list>(<argument><expr><name><name>policy</name><operator>-&gt;</operator><name>qual</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>hasSubLinks</name> <operator>|=</operator> <name><name>policy</name><operator>-&gt;</operator><name>hassublinks</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<comment type="block">/*
	 * We must have permissive quals, always, or no rows are visible.
	 *
	 * If we do not, then we simply return a single 'false' qual which results
	 * in no rows being visible.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>permissive_quals</name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * We now know that permissive policies exist, so we can now add
		 * security quals based on the USING clauses from the restrictive
		 * policies.  Since these need to be combined together using AND, we
		 * can just add them one at a time.
		 */</comment>
		<macro><name>foreach</name><argument_list>(<argument>item</argument>, <argument>restrictive_policies</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>RowSecurityPolicy</name> <modifier>*</modifier></type><name>policy</name> <init>= <expr><operator>(</operator><name>RowSecurityPolicy</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Expr</name>	   <modifier>*</modifier></type><name>qual</name></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>policy</name><operator>-&gt;</operator><name>qual</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>qual</name> <operator>=</operator> <call><name>copyObject</name><argument_list>(<argument><expr><name><name>policy</name><operator>-&gt;</operator><name>qual</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ChangeVarNodes</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>qual</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>rt_index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><operator>*</operator><name>securityQuals</name> <operator>=</operator> <call><name>list_append_unique</name><argument_list>(<argument><expr><operator>*</operator><name>securityQuals</name></expr></argument>, <argument><expr><name>qual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>hasSubLinks</name> <operator>|=</operator> <name><name>policy</name><operator>-&gt;</operator><name>hassublinks</name></name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block>

		<comment type="block">/*
		 * Then add a single security qual combining together the USING
		 * clauses from all the permissive policies using OR.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name>permissive_quals</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>rowsec_expr</name> <operator>=</operator> <operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <call><name>linitial</name><argument_list>(<argument><expr><name>permissive_quals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>rowsec_expr</name> <operator>=</operator> <call><name>makeBoolExpr</name><argument_list>(<argument><expr><name>OR_EXPR</name></expr></argument>, <argument><expr><name>permissive_quals</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><call><name>ChangeVarNodes</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>rowsec_expr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>rt_index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>securityQuals</name> <operator>=</operator> <call><name>list_append_unique</name><argument_list>(<argument><expr><operator>*</operator><name>securityQuals</name></expr></argument>, <argument><expr><name>rowsec_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>

		<comment type="block">/*
		 * A permissive policy must exist for rows to be visible at all.
		 * Therefore, if there were no permissive policies found, return a
		 * single always-false clause.
		 */</comment>
		<expr_stmt><expr><operator>*</operator><name>securityQuals</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><operator>*</operator><name>securityQuals</name></expr></argument>,
								 <argument><expr><call><name>makeConst</name><argument_list>(<argument><expr><name>BOOLOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>,
										   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>BoolGetDatum</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>,
										   <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * add_with_check_options
 *
 * Add WithCheckOptions of the specified kind to check that new records
 * added by an INSERT or UPDATE are consistent with the specified RLS
 * policies.  Normally new data must satisfy the WITH CHECK clauses from the
 * policies.  If a policy has no explicit WITH CHECK clause, its USING clause
 * is used instead.  In the special case of an UPDATE arising from an
 * INSERT ... ON CONFLICT DO UPDATE, existing records are first checked using
 * a WCO_RLS_CONFLICT_CHECK WithCheckOption, which always uses the USING
 * clauses from RLS policies.
 *
 * New WCOs are added to withCheckOptions, and hasSubLinks is set to true if
 * any of the check clauses added contain sublink subqueries.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_with_check_options</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>,
					   <parameter><decl><type><name>int</name></type> <name>rt_index</name></decl></parameter>,
					   <parameter><decl><type><name>WCOKind</name></type> <name>kind</name></decl></parameter>,
					   <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>permissive_policies</name></decl></parameter>,
					   <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>restrictive_policies</name></decl></parameter>,
					   <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>withCheckOptions</name></decl></parameter>,
					   <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>hasSubLinks</name></decl></parameter>,
					   <parameter><decl><type><name>bool</name></type> <name>force_using</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>permissive_quals</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUAL_FOR_WCO</name><parameter_list>(<parameter><type><name>policy</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>( !force_using &amp;&amp; \
	  (policy)-&gt;with_check_qual != NULL ? \
	  (policy)-&gt;with_check_qual : (policy)-&gt;qual )</cpp:value></cpp:define>

	<comment type="block">/*
	 * First collect up the permissive policy clauses, similar to
	 * add_security_quals.
	 */</comment>
	<macro><name>foreach</name><argument_list>(<argument>item</argument>, <argument>permissive_policies</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>RowSecurityPolicy</name> <modifier>*</modifier></type><name>policy</name> <init>= <expr><operator>(</operator><name>RowSecurityPolicy</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Expr</name>	   <modifier>*</modifier></type><name>qual</name> <init>= <expr><call><name>QUAL_FOR_WCO</name><argument_list>(<argument><expr><name>policy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>qual</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>permissive_quals</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>permissive_quals</name></expr></argument>, <argument><expr><call><name>copyObject</name><argument_list>(<argument><expr><name>qual</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>hasSubLinks</name> <operator>|=</operator> <name><name>policy</name><operator>-&gt;</operator><name>hassublinks</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<comment type="block">/*
	 * There must be at least one permissive qual found or no rows are allowed
	 * to be added.  This is the same as in add_security_quals.
	 *
	 * If there are no permissive_quals then we fall through and return a
	 * single 'false' WCO, preventing all new rows.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>permissive_quals</name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Add a single WithCheckOption for all the permissive policy clauses,
		 * combining them together using OR.  This check has no policy name,
		 * since if the check fails it means that no policy granted permission
		 * to perform the update, rather than any particular policy being
		 * violated.
		 */</comment>
		<decl_stmt><decl><type><name>WithCheckOption</name> <modifier>*</modifier></type><name>wco</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>wco</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>WithCheckOption</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>wco</name><operator>-&gt;</operator><name>kind</name></name> <operator>=</operator> <name>kind</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>wco</name><operator>-&gt;</operator><name>relname</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>wco</name><operator>-&gt;</operator><name>polname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>wco</name><operator>-&gt;</operator><name>cascaded</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name>permissive_quals</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>wco</name><operator>-&gt;</operator><name>qual</name></name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>linitial</name><argument_list>(<argument><expr><name>permissive_quals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>wco</name><operator>-&gt;</operator><name>qual</name></name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>makeBoolExpr</name><argument_list>(<argument><expr><name>OR_EXPR</name></expr></argument>, <argument><expr><name>permissive_quals</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><call><name>ChangeVarNodes</name><argument_list>(<argument><expr><name><name>wco</name><operator>-&gt;</operator><name>qual</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>rt_index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><operator>*</operator><name>withCheckOptions</name> <operator>=</operator> <call><name>list_append_unique</name><argument_list>(<argument><expr><operator>*</operator><name>withCheckOptions</name></expr></argument>, <argument><expr><name>wco</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Now add WithCheckOptions for each of the restrictive policy clauses
		 * (which will be combined together using AND).  We use a separate
		 * WithCheckOption for each restrictive policy to allow the policy
		 * name to be included in error reports if the policy is violated.
		 */</comment>
		<macro><name>foreach</name><argument_list>(<argument>item</argument>, <argument>restrictive_policies</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>RowSecurityPolicy</name> <modifier>*</modifier></type><name>policy</name> <init>= <expr><operator>(</operator><name>RowSecurityPolicy</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Expr</name>	   <modifier>*</modifier></type><name>qual</name> <init>= <expr><call><name>QUAL_FOR_WCO</name><argument_list>(<argument><expr><name>policy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>WithCheckOption</name> <modifier>*</modifier></type><name>wco</name></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>qual</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>qual</name> <operator>=</operator> <call><name>copyObject</name><argument_list>(<argument><expr><name>qual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ChangeVarNodes</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>qual</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>rt_index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>wco</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>WithCheckOption</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>wco</name><operator>-&gt;</operator><name>kind</name></name> <operator>=</operator> <name>kind</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>wco</name><operator>-&gt;</operator><name>relname</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>wco</name><operator>-&gt;</operator><name>polname</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name><name>policy</name><operator>-&gt;</operator><name>policy_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>wco</name><operator>-&gt;</operator><name>qual</name></name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>qual</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>wco</name><operator>-&gt;</operator><name>cascaded</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

				<expr_stmt><expr><operator>*</operator><name>withCheckOptions</name> <operator>=</operator> <call><name>list_append_unique</name><argument_list>(<argument><expr><operator>*</operator><name>withCheckOptions</name></expr></argument>, <argument><expr><name>wco</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>hasSubLinks</name> <operator>|=</operator> <name><name>policy</name><operator>-&gt;</operator><name>hassublinks</name></name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * If there were no policy clauses to check new data, add a single
		 * always-false WCO (a default-deny policy).
		 */</comment>
		<decl_stmt><decl><type><name>WithCheckOption</name> <modifier>*</modifier></type><name>wco</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>wco</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>WithCheckOption</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>wco</name><operator>-&gt;</operator><name>kind</name></name> <operator>=</operator> <name>kind</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>wco</name><operator>-&gt;</operator><name>relname</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>wco</name><operator>-&gt;</operator><name>polname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>wco</name><operator>-&gt;</operator><name>qual</name></name> <operator>=</operator> <operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>makeConst</name><argument_list>(<argument><expr><name>BOOLOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>,
									   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>BoolGetDatum</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>,
									   <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>wco</name><operator>-&gt;</operator><name>cascaded</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

		<expr_stmt><expr><operator>*</operator><name>withCheckOptions</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><operator>*</operator><name>withCheckOptions</name></expr></argument>, <argument><expr><name>wco</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * check_role_for_policy -
 *	 determines if the policy should be applied for the current role
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>check_role_for_policy</name><parameter_list>(<parameter><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>policy_roles</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>user_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name>		   <modifier>*</modifier></type><name>roles</name> <init>= <expr><operator>(</operator><name>Oid</name> <operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>policy_roles</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Quick fall-thru for policies applied to all roles */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>roles</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>ACL_ID_PUBLIC</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARR_DIMS</name><argument_list>(<argument><expr><name>policy_roles</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>has_privs_of_role</name><argument_list>(<argument><expr><name>user_id</name></expr></argument>, <argument><expr><name><name>roles</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
</unit>
