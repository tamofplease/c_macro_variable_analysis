<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/backend/executor/nodeYbBatchedNestloop.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * nodeYbBatchedNestLoop.c
 *	  Implementation of Yugabyte's batched nested loop join.
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * Copyright (c) YugaByte, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.  See the License for the specific language governing permissions and limitations
 * under the License.
 *
 * src/postgres/src/backend/executor/nodeYbBatchedNestLoop.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<comment type="block">/*
 *	 INTERFACE ROUTINES
 *		ExecYbBatchedNestLoop	 - process a YbBatchedNestLoop join of two plans
 *		ExecInitYbBatchedNestLoop - initialize the join
 *		ExecEndYbBatchedNestLoop  - shut down the join
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/execdebug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/nodeYbBatchedNestloop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/relation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>


<decl_stmt><decl><type><name>bool</name></type> <name>yb_bnl_enable_hashing</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* Methods to help keep track of outer tuple batches */</comment>
<function_decl><type><name>bool</name></type> <name>CreateBatch</name><parameter_list>(<parameter><decl><type><name>YbBatchedNestLoopState</name> <modifier>*</modifier></type><name>bnlstate</name></decl></parameter>, <parameter><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>GetBatchSize</name><parameter_list>(<parameter><decl><type><name>YbBatchedNestLoop</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>IsBatched</name><parameter_list>(<parameter><decl><type><name>YbBatchedNestLoop</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Local join methods that use the tuplestore batching strategy */</comment>
<function_decl><type><name>bool</name></type> <name>FlushTupleTS</name><parameter_list>(<parameter><decl><type><name>YbBatchedNestLoopState</name> <modifier>*</modifier></type><name>bnlstate</name></decl></parameter>, <parameter><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>GetNewOuterTupleTS</name><parameter_list>(<parameter><decl><type><name>YbBatchedNestLoopState</name> <modifier>*</modifier></type><name>bnlstate</name></decl></parameter>, <parameter><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ResetBatchTS</name><parameter_list>(<parameter><decl><type><name>YbBatchedNestLoopState</name> <modifier>*</modifier></type><name>bnlstate</name></decl></parameter>, <parameter><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>RegisterOuterMatchTS</name><parameter_list>(<parameter><decl><type><name>YbBatchedNestLoopState</name> <modifier>*</modifier></type><name>bnlstate</name></decl></parameter>,
						  <parameter><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>AddTupleToOuterBatchTS</name><parameter_list>(<parameter><decl><type><name>YbBatchedNestLoopState</name> <modifier>*</modifier></type><name>bnlstate</name></decl></parameter>,
							<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>FreeBatchTS</name><parameter_list>(<parameter><decl><type><name>YbBatchedNestLoopState</name> <modifier>*</modifier></type><name>bnlstate</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>EndTS</name><parameter_list>(<parameter><decl><type><name>YbBatchedNestLoopState</name> <modifier>*</modifier></type><name>bnlstate</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Local join methods that use the hash table batching strategy */</comment>
<function_decl><type><name>bool</name></type> <name>FlushTupleHash</name><parameter_list>(<parameter><decl><type><name>YbBatchedNestLoopState</name> <modifier>*</modifier></type><name>bnlstate</name></decl></parameter>, <parameter><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>GetNewOuterTupleHash</name><parameter_list>(<parameter><decl><type><name>YbBatchedNestLoopState</name> <modifier>*</modifier></type><name>bnlstate</name></decl></parameter>, <parameter><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ResetBatchHash</name><parameter_list>(<parameter><decl><type><name>YbBatchedNestLoopState</name> <modifier>*</modifier></type><name>bnlstate</name></decl></parameter>, <parameter><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>RegisterOuterMatchHash</name><parameter_list>(<parameter><decl><type><name>YbBatchedNestLoopState</name> <modifier>*</modifier></type><name>bnlstate</name></decl></parameter>,
							<parameter><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>AddTupleToOuterBatchHash</name><parameter_list>(<parameter><decl><type><name>YbBatchedNestLoopState</name> <modifier>*</modifier></type><name>bnlstate</name></decl></parameter>,
							  <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>FreeBatchHash</name><parameter_list>(<parameter><decl><type><name>YbBatchedNestLoopState</name> <modifier>*</modifier></type><name>bnlstate</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>EndHash</name><parameter_list>(<parameter><decl><type><name>YbBatchedNestLoopState</name> <modifier>*</modifier></type><name>bnlstate</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Wrappers for invoking local join methods with the correct strategy */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGISTER_LOCAL_JOIN_FN</name><parameter_list>(<parameter><type><name>fn</name></type></parameter>, <parameter><type><name>strategy</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bnlstate-&gt;fn##Impl = &amp;fn##strategy</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCAL_JOIN_FN</name><parameter_list>(<parameter><type><name>fn</name></type></parameter>, <parameter><type><name>node</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(*node-&gt;fn##Impl)(node, ## __VA_ARGS__)</cpp:value></cpp:define>


<comment type="block">/* ----------------------------------------------------------------
 *		ExecYbBatchedNestLoop(node)
 *
 *		Returns the tuple joined from inner and outer tuples which
 *		satisfies the qualification clause.
 *
 *		This performs the operations of nodenestloop.c in a batched fashion.
 *
 *		In order to execute in batched mode, we use a state here to denote
 *		the status of our current batch of outer tuples. The various states and
 *		overall workflow are outlined as follows:
 *
 *		- BNL_INIT:	   The current tuple batch is invalid and we must create a
 *				  	   fresh batch and then transition to BNL_NEWINNER.
 *
 *		- BNL_NEWINNER: We need a new inner tuple. This can occur as a result of
 *						the outer tuple batch being freshly populated or the
 *						previous inner tuple running out of matches in the
 *						current outer tuple batch. We transition to BNL_MATCHING
 *						from here if new inner tuples are found or BNL_FLUSHING
 *						if else.
 *
 *		- BNL_MATCHING: The current tuple batch is valid and we have a valid
 *						inner tuple that we can match with outer tuples
 *						from the current batch. Once an inner tuple runs
 *						out of outer tuples in the current batch to match with,
 *						we go back to BNL_NEWINNER to retrieve a new inner
 *						tuple.
 *
 *		- BNL_FLUSHING: The current tuple batch is valid and we have run out of
 *						matching inner tuples. If this is an outer/anti join, we
 *						are iterating over tuples that have not been matched 
 *						with any inner tuple. Once we run out of unmatched outer
 *						tuples here, we invalidate the current batch by
 *						transitioning to BNL_INIT.
 *
 * ----------------------------------------------------------------
 */</comment>
<function><type><specifier>static</specifier> <name>TupleTableSlot</name> <modifier>*</modifier></type>
<name>ExecYbBatchedNestLoop</name><parameter_list>(<parameter><decl><type><name>PlanState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>YbBatchedNestLoopState</name> <modifier>*</modifier></type><name>bnlstate</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>YbBatchedNestLoopState</name></expr></argument>, <argument><expr><name>pstate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>YbBatchedNestLoop</name>   <modifier>*</modifier></type><name>batchnl</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PlanState</name>  <modifier>*</modifier></type><name>innerPlan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>innerTupleSlot</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ExprState</name>  <modifier>*</modifier></type><name>joinqual</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ExprState</name>  <modifier>*</modifier></type><name>otherqual</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * get information from the node
	 */</comment>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>, <argument><expr><literal type="string">"getting info from node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>batchnl</name> <operator>=</operator> <operator>(</operator><name>YbBatchedNestLoop</name> <operator>*</operator><operator>)</operator> <name><name>bnlstate</name><operator>-&gt;</operator><name>js</name><operator>.</operator><name>ps</name><operator>.</operator><name>plan</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>joinqual</name> <operator>=</operator> <name><name>bnlstate</name><operator>-&gt;</operator><name>js</name><operator>.</operator><name>joinqual</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>otherqual</name> <operator>=</operator> <name><name>bnlstate</name><operator>-&gt;</operator><name>js</name><operator>.</operator><name>ps</name><operator>.</operator><name>qual</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>econtext</name> <operator>=</operator> <name><name>bnlstate</name><operator>-&gt;</operator><name>js</name><operator>.</operator><name>ps</name><operator>.</operator><name>ps_ExprContext</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>innerPlan</name> <operator>=</operator> <call><name>innerPlanState</name><argument_list>(<argument><expr><name>bnlstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Reset per-tuple memory context to free any expression evaluation
	 * storage allocated in the previous tuple cycle.
	 */</comment>
	<expr_stmt><expr><call><name>ResetExprContext</name><argument_list>(<argument><expr><name>econtext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Ok, everything is setup for the join so now loop until we return a
	 * qualifying join tuple.
	 */</comment>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>, <argument><expr><literal type="string">"entering main loop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<comment type="block">/*
		 * We process the current batch and populate econtext-&gt;ecxt_outertuple
		 * according to the operations listed in the batching comments of this
		 * method.
		 */</comment>
		<switch>switch <condition>(<expr><name><name>bnlstate</name><operator>-&gt;</operator><name>bnl_currentstatus</name></name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>BNL_INIT</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><call><name>CreateBatch</name><argument_list>(<argument><expr><name>bnlstate</name></expr></argument>, <argument><expr><name>econtext</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* Transition */</comment>
					<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>bnl_currentstatus</name></name> <operator>=</operator> <name>BNL_NEWINNER</name></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><call><name>LOCAL_JOIN_FN</name><argument_list>(<argument><expr><name>FreeBatch</name></expr></argument>, <argument><expr><name>bnlstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><name>NULL</name></expr>;</return>
				</block_content>}</block></else></if_stmt>

				<comment type="block">/*
				 * now rescan the inner plan
				 */</comment>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>, <argument><expr><literal type="string">"rescanning inner plan"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ExecReScan</name><argument_list>(<argument><expr><name>innerPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>switch_fallthrough</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<case>case <expr><name>BNL_NEWINNER</name></expr>:</case>
				<comment type="block">/*
				 * we have an outerTuple batch, try to get the next inner tuple.
				 */</comment>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>, <argument><expr><literal type="string">"getting new inner tuple"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>innerTupleSlot</name> <operator>=</operator> <call><name>ExecProcNode</name><argument_list>(<argument><expr><name>innerPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_innertuple</name></name> <operator>=</operator> <name>innerTupleSlot</name></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>LOCAL_JOIN_FN</name><argument_list>(<argument><expr><name>ResetBatch</name></expr></argument>, <argument><expr><name>bnlstate</name></expr></argument>, <argument><expr><name>econtext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>TupIsNull</name><argument_list>(<argument><expr><name>innerTupleSlot</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* No more inner tuples: transition */</comment>
					<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>bnl_currentstatus</name></name> <operator>=</operator> <name>BNL_FLUSHING</name></expr>;</expr_stmt>
					<continue>continue;</continue>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>bnl_currentstatus</name></name> <operator>=</operator> <name>BNL_MATCHING</name></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>switch_fallthrough</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<case>case <expr><name>BNL_MATCHING</name></expr>:</case>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>TupIsNull</name><argument_list>(<argument><expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_innertuple</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>LOCAL_JOIN_FN</name><argument_list>(<argument><expr><name>GetNewOuterTuple</name></expr></argument>, <argument><expr><name>bnlstate</name></expr></argument>, <argument><expr><name>econtext</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>bnl_currentstatus</name></name> <operator>=</operator> <name>BNL_NEWINNER</name></expr>;</expr_stmt>
					<continue>continue;</continue>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>

			<case>case <expr><name>BNL_FLUSHING</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><name><name>batchnl</name><operator>-&gt;</operator><name>nl</name><operator>.</operator><name>join</name><operator>.</operator><name>jointype</name></name> <operator>==</operator> <name>JOIN_INNER</name>
					<operator>||</operator> <name><name>batchnl</name><operator>-&gt;</operator><name>nl</name><operator>.</operator><name>join</name><operator>.</operator><name>jointype</name></name> <operator>==</operator> <name>JOIN_SEMI</name></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* This state is not applicable here: transition */</comment>
					<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>bnl_currentstatus</name></name> <operator>=</operator> <name>BNL_INIT</name></expr>;</expr_stmt>
					<continue>continue;</continue>
				</block_content>}</block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>LOCAL_JOIN_FN</name><argument_list>(<argument><expr><name>FlushTuple</name></expr></argument>, <argument><expr><name>bnlstate</name></expr></argument>, <argument><expr><name>econtext</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* tuplestate should be clean */</comment>
					<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>bnl_currentstatus</name></name> <operator>=</operator> <name>BNL_INIT</name></expr>;</expr_stmt>
					<continue>continue;</continue>
				</block_content>}</block></if></if_stmt>

				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>
		
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>TupIsNull</name><argument_list>(<argument><expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_outertuple</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>innerTupleSlot</name> <operator>=</operator> <name><name>econtext</name><operator>-&gt;</operator><name>ecxt_innertuple</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>bnlstate</name><operator>-&gt;</operator><name>bnl_currentstatus</name></name> <operator>==</operator> <name>BNL_FLUSHING</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>, <argument><expr><literal type="string">"no inner tuple, need new outer tuple"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>js</name><operator>.</operator><name>jointype</name></name> <operator>==</operator> <name>JOIN_LEFT</name> <operator>||</operator>
				   <name><name>bnlstate</name><operator>-&gt;</operator><name>js</name><operator>.</operator><name>jointype</name></name> <operator>==</operator> <name>JOIN_ANTI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/*
			 * We are doing an outer join and there were no join matches
			 * for this outer tuple.  Generate a fake join tuple with
			 * nulls for the inner tuple, and return it if it passes the
			 * non-join quals.
			 */</comment>
			<expr_stmt><expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_innertuple</name></name> <operator>=</operator> <name><name>bnlstate</name><operator>-&gt;</operator><name>nl_NullInnerTupleSlot</name></name></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>, <argument><expr><literal type="string">"testing qualification for outer-join tuple"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>otherqual</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>ExecQual</name><argument_list>(<argument><expr><name>otherqual</name></expr></argument>, <argument><expr><name>econtext</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * qualification was satisfied so we project and return
				 * the slot containing the result tuple using
				 * ExecProject().
				 */</comment>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>, <argument><expr><literal type="string">"qualification succeeded, projecting tuple"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<return>return <expr><call><name>ExecProject</name><argument_list>(<argument><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>js</name><operator>.</operator><name>ps</name><operator>.</operator><name>ps_ProjInfo</name></name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>InstrCountFiltered2</name><argument_list>(<argument><expr><name>bnlstate</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<comment type="block">/*
			 * Otherwise just return to top of loop for a new outer tuple.
			 */</comment>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * at this point we have a new pair of inner and outer tuples so we
		 * test the inner and outer tuples to see if they satisfy the node's
		 * qualification.
		 *
		 * Only the joinquals determine MatchedOuter status, but all quals
		 * must pass to actually return the tuple.
		 */</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>, <argument><expr><literal type="string">"testing qualification"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>ExecQual</name><argument_list>(<argument><expr><name>joinqual</name></expr></argument>, <argument><expr><name>econtext</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>LOCAL_JOIN_FN</name><argument_list>(<argument><expr><name>RegisterOuterMatch</name></expr></argument>, <argument><expr><name>bnlstate</name></expr></argument>, <argument><expr><name>econtext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* In an antijoin, we never return a matched tuple */</comment>

			<if_stmt><if>if <condition>(<expr><name><name>bnlstate</name><operator>-&gt;</operator><name>js</name><operator>.</operator><name>jointype</name></name> <operator>==</operator> <name>JOIN_ANTI</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * This outer tuple has been matched so never think about 
				 * this outer tuple again.
				 */</comment>
				<continue>continue;</continue>		<comment type="block">/* return to top of loop */</comment>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>otherqual</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>ExecQual</name><argument_list>(<argument><expr><name>otherqual</name></expr></argument>, <argument><expr><name>econtext</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * qualification was satisfied so we project and return the
				 * slot containing the result tuple using ExecProject().
				 */</comment>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>, <argument><expr><literal type="string">"qualification succeeded, projecting tuple"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<return>return <expr><call><name>ExecProject</name><argument_list>(<argument><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>js</name><operator>.</operator><name>ps</name><operator>.</operator><name>ps_ProjInfo</name></name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>InstrCountFiltered2</name><argument_list>(<argument><expr><name>bnlstate</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>InstrCountFiltered1</name><argument_list>(<argument><expr><name>bnlstate</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<comment type="block">/*
		 * Tuple fails qual, so free per-tuple memory and try again.
		 */</comment>
		<expr_stmt><expr><call><name>ResetExprContext</name><argument_list>(<argument><expr><name>econtext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>, <argument><expr><literal type="string">"qualification failed, looping"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>


<comment type="block">/*
 * Whether or not we are using the hash batching strategy. We go with
 * the hash strategy if we have at least one hashable clause in our join
 * condition as signified by the number of elements in plan-&gt;hashOps.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>UseHash</name><parameter_list>(<parameter><decl><type><name>YbBatchedNestLoop</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>YbBatchedNestLoopState</name> <modifier>*</modifier></type><name>nl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>yb_bnl_enable_hashing</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>plan-&gt;hashOps</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Oid</name></type> <name>op</name> <init>= <expr><call><name>lfirst_oid</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize batch state for the hashing strategy
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>InitHash</name><parameter_list>(<parameter><decl><type><name>YbBatchedNestLoopState</name> <modifier>*</modifier></type><name>bnlstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name> <init>= <expr><name><name>bnlstate</name><operator>-&gt;</operator><name>js</name><operator>.</operator><name>ps</name><operator>.</operator><name>state</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>YbBatchedNestLoop</name> <modifier>*</modifier></type><name>plan</name> <init>= <expr><operator>(</operator><name>YbBatchedNestLoop</name><operator>*</operator><operator>)</operator> <name><name>bnlstate</name><operator>-&gt;</operator><name>js</name><operator>.</operator><name>ps</name><operator>.</operator><name>plan</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name> <init>= <expr><call><name>GetPerTupleExprContext</name><argument_list>(<argument><expr><name>estate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type> <name>outer_tdesc</name> <init>= <expr><call><name>outerPlanState</name><argument_list>(<argument><expr><name>bnlstate</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>ps_ResultTupleDesc</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>UseHash</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>bnlstate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc3</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name> <modifier>*</modifier></type><name>eqops</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>hashOps</name><operator>-&gt;</operator><name>length</name></name> <operator>*</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	
	<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>numLookupAttrs</name></name> <operator>=</operator> <name><name>plan</name><operator>-&gt;</operator><name>hashOps</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>innerAttrs</name></name> <operator>=</operator>
		<call><name>palloc</name><argument_list>(<argument><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>numLookupAttrs</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AttrNumber</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>numattrs</name> <init>= <expr><name><name>plan</name><operator>-&gt;</operator><name>nl</name><operator>.</operator><name>nestParams</name><operator>-&gt;</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ExprState</name> <modifier>*</modifier><modifier>*</modifier></type><name>keyexprs</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><name>numattrs</name> <operator>*</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>ExprState</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>outerParamExprs</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>

	<macro><name>forthree</name><argument_list>(<argument>lc</argument>, <argument>plan-&gt;hashOps</argument>,
			 <argument>lc2</argument>, <argument>plan-&gt;innerHashAttNos</argument>,
			 <argument>lc3</argument>, <argument>plan-&gt;outerParamExprs</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Oid</name></type> <name>eqop</name> <init>= <expr><call><name>lfirst_oid</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>eqop</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>eqops</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>eqop</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>innerAttrs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>lfirst_int</name><argument_list>(<argument><expr><name>lc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>Expr</name> <modifier>*</modifier></type><name>outerExpr</name> <init>= <expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>keyexprs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ExecInitExpr</name><argument_list>(<argument><expr><name>outerExpr</name></expr></argument>, <argument><expr><operator>(</operator><name>PlanState</name> <operator>*</operator><operator>)</operator> <name>bnlstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>outerParamExprs</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>outerParamExprs</name></expr></argument>, <argument><expr><name>outerExpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block>
	<decl_stmt><decl><type><name>Oid</name> <modifier>*</modifier></type><name>eqFuncOids</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>execTuplesHashPrepare</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>eqops</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eqFuncOids</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bnlstate</name><operator>-&gt;</operator><name>hashFunctions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>ExprState</name> <modifier>*</modifier></type><name>tab_eq_fn</name> <init>=
		<expr><call><name>ybPrepareOuterExprsEqualFn</name><argument_list>(<argument><expr><name>outerParamExprs</name></expr></argument>,
								   <argument><expr><name>eqops</name></expr></argument>,
								   <argument><expr><operator>(</operator><name>PlanState</name> <operator>*</operator><operator>)</operator> <name>bnlstate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>hashslot</name></name> <operator>=</operator>
		<call><name>ExecAllocTableSlot</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>estate</name><operator>-&gt;</operator><name>es_tupleTable</name></name></expr></argument>, <argument><expr><name>outer_tdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Per batch memory context for the hash table to work with */</comment>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>tablecxt</name> <init>=
		<expr><call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><call><name>GetCurrentMemoryContext</name><argument_list>()</argument_list></call></expr></argument>,
							  <argument><expr><literal type="string">"BNL_HASHTABLE"</literal></expr></argument>,
							  <argument><expr><name>ALLOCSET_DEFAULT_SIZES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>hashtable</name></name> <operator>=</operator>
		<call><name>YbBuildTupleHashTableExt</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bnlstate</name><operator>-&gt;</operator><name>js</name><operator>.</operator><name>ps</name></name></expr></argument>, <argument><expr><name>outer_tdesc</name></expr></argument>,
								 <argument><expr><name>i</name></expr></argument>, <argument><expr><name>keyexprs</name></expr></argument>, <argument><expr><name>tab_eq_fn</name></expr></argument>,
								 <argument><expr><name>eqFuncOids</name></expr></argument>, <argument><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>hashFunctions</name></name></expr></argument>,
								 <argument><expr><call><name>GetBatchSize</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
								 <argument><expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_per_query_memory</name></name></expr></argument>, <argument><expr><name>tablecxt</name></expr></argument>,
								 <argument><expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_per_tuple_memory</name></name></expr></argument>, <argument><expr><name>econtext</name></expr></argument>,
								 <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>hashiterinit</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>current_hash_entry</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>FlushTupleHash</name><parameter_list>(<parameter><decl><type><name>YbBatchedNestLoopState</name> <modifier>*</modifier></type><name>bnlstate</name></decl></parameter>, <parameter><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Initialize hash iterator if not done so already */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bnlstate</name><operator>-&gt;</operator><name>hashiterinit</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>InitTupleHashIterator</name><argument_list>(<argument><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>hashtable</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bnlstate</name><operator>-&gt;</operator><name>hashiter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>hashiterinit</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>current_hash_entry</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	
	<comment type="block">/* Find the current/next bucket that we'll be using */</comment>
	<decl_stmt><decl><type><name>TupleHashEntry</name></type> <name>entry</name> <init>= <expr><name><name>bnlstate</name><operator>-&gt;</operator><name>current_hash_entry</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>ScanTupleHashTable</name><argument_list>(<argument><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>hashtable</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bnlstate</name><operator>-&gt;</operator><name>hashiter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<while>while <condition>(<expr><name>entry</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>NLBucketInfo</name> <modifier>*</modifier></type><name>binfo</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>additional</name></name></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><name><name>binfo</name><operator>-&gt;</operator><name>current</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>BucketTupleInfo</name> <modifier>*</modifier></type><name>btinfo</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name><name>binfo</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>binfo</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name><name>binfo</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

			<while>while <condition>(<expr><name>btinfo</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>btinfo</name><operator>-&gt;</operator><name>matched</name></name><operator>)</operator></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ExecStoreMinimalTuple</name><argument_list>(<argument><expr><name><name>btinfo</name><operator>-&gt;</operator><name>tuple</name></name></expr></argument>,
									  <argument><expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_outertuple</name></name></expr></argument>,
									  <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>current_hash_entry</name></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>current_ht_tuple</name></name> <operator>=</operator> <name>btinfo</name></expr>;</expr_stmt>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></while>
		</block_content>}</block></while>
		<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>ScanTupleHashTable</name><argument_list>(<argument><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>hashtable</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bnlstate</name><operator>-&gt;</operator><name>hashiter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>TermTupleHashIterator</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bnlstate</name><operator>-&gt;</operator><name>hashiter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>hashiterinit</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>current_hash_entry</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>current_ht_tuple</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>GetNewOuterTupleHash</name><parameter_list>(<parameter><decl><type><name>YbBatchedNestLoopState</name> <modifier>*</modifier></type><name>bnlstate</name></decl></parameter>, <parameter><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>inner</name> <init>= <expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_innertuple</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleHashTable</name></type> <name>ht</name> <init>= <expr><name><name>bnlstate</name><operator>-&gt;</operator><name>hashtable</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ExprState</name> <modifier>*</modifier></type><name>eq</name> <init>= <expr><name><name>bnlstate</name><operator>-&gt;</operator><name>js</name><operator>.</operator><name>joinqual</name></name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>TupleHashEntry</name></type> <name>data</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>FindTupleHashEntry</name><argument_list>(<argument><expr><name>ht</name></expr></argument>,
							  <argument><expr><name>inner</name></expr></argument>,
							  <argument><expr><name>eq</name></expr></argument>,
							  <argument><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>hashFunctions</name></name></expr></argument>,
							  <argument><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>innerAttrs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>data</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>NLBucketInfo</name> <modifier>*</modifier></type><name>binfo</name> <init>= <expr><operator>(</operator><name>NLBucketInfo</name><operator>*</operator><operator>)</operator> <name><name>data</name><operator>-&gt;</operator><name>additional</name></name></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name><name>binfo</name><operator>-&gt;</operator><name>current</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>BucketTupleInfo</name> <modifier>*</modifier></type><name>curr_btinfo</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name><name>binfo</name><operator>-&gt;</operator><name>current</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="block">/* Change the bucket's state for the next invocation of this method */</comment>
		<expr_stmt><expr><name><name>binfo</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name><name>binfo</name><operator>-&gt;</operator><name>current</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

		<comment type="block">/* We found a bucket with more matching tuples to be outputted. */</comment>
		<decl_stmt><decl><type><name>BucketTupleInfo</name> <modifier>*</modifier></type><name>btinfo</name> <init>= <expr><operator>(</operator><name>BucketTupleInfo</name> <operator>*</operator><operator>)</operator> <name>curr_btinfo</name></expr></init></decl>;</decl_stmt>

		<comment type="block">/*
		 * This has already been matched so no need to look at this again in a
		 * semijoin.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>bnlstate</name><operator>-&gt;</operator><name>js</name><operator>.</operator><name>single_match</name></name> <operator>&amp;&amp;</operator> <name><name>btinfo</name><operator>-&gt;</operator><name>matched</name></name></expr>)</condition>
		<block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>ExecStoreMinimalTuple</name><argument_list>(<argument><expr><name><name>btinfo</name><operator>-&gt;</operator><name>tuple</name></name></expr></argument>, <argument><expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_outertuple</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>current_ht_tuple</name></name> <operator>=</operator> <name>btinfo</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>data</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>	
	</block_content>}</block></while>

	<comment type="block">/* 
	 * There are no more matches for the current inner tuple so reset
	 * this bucket's state and return false. 
	 */</comment>
	<expr_stmt><expr><name><name>binfo</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <call><name>list_head</name><argument_list>(<argument><expr><name><name>binfo</name><operator>-&gt;</operator><name>tuples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Resets any iteration on this batch.
 */</comment>
<function><type><name>void</name></type>
<name>ResetBatchHash</name><parameter_list>(<parameter><decl><type><name>YbBatchedNestLoopState</name> <modifier>*</modifier></type><name>bnlstate</name></decl></parameter>, <parameter><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>bnlstate</name><operator>-&gt;</operator><name>hashiterinit</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>hashiterinit</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TermTupleHashIterator</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bnlstate</name><operator>-&gt;</operator><name>hashiterinit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>current_hash_entry</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>current_ht_tuple</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Marks the current outer tuple as matched.
 * "Current outer tuple" refers to the outer tuple most recently returned by
 * GetNewOuterTupleHash.
 */</comment>
<function><type><name>void</name></type>
<name>RegisterOuterMatchHash</name><parameter_list>(<parameter><decl><type><name>YbBatchedNestLoopState</name> <modifier>*</modifier></type><name>bnlstate</name></decl></parameter>, <parameter><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>current_ht_tuple</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>current_ht_tuple</name><operator>-&gt;</operator><name>matched</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Add the tuple in slot to the batch hash table in the appropriate bucket.
 */</comment>
<function><type><name>void</name></type>
<name>AddTupleToOuterBatchHash</name><parameter_list>(<parameter><decl><type><name>YbBatchedNestLoopState</name> <modifier>*</modifier></type><name>bnlstate</name></decl></parameter>,
							  <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TupleHashTable</name></type> <name>ht</name> <init>= <expr><name><name>bnlstate</name><operator>-&gt;</operator><name>hashtable</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>isnew</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>TupIsNull</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>TupleHashEntry</name></type> <name>orig_data</name> <init>= <expr><call><name>LookupTupleHashEntry</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnew</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>orig_data</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>orig_data</name><operator>-&gt;</operator><name>firstTuple</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>cxt</name> <init>= <expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>ht</name><operator>-&gt;</operator><name>tablecxt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MinimalTuple</name></type> <name>tuple</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>isnew</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* We must create a new bucket. */</comment>
		<expr_stmt><expr><name><name>orig_data</name><operator>-&gt;</operator><name>additional</name></name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>NLBucketInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tuple</name> <operator>=</operator> <name><name>orig_data</name><operator>-&gt;</operator><name>firstTuple</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<decl_stmt><decl><type><name>NLBucketInfo</name> <modifier>*</modifier></type><name>binfo</name> <init>= <expr><operator>(</operator><name>NLBucketInfo</name> <operator>*</operator><operator>)</operator> <name><name>orig_data</name><operator>-&gt;</operator><name>additional</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>tl</name> <init>= <expr><name><name>binfo</name><operator>-&gt;</operator><name>tuples</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isnew</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Bucket already exists. */</comment>
		<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>ExecCopySlotMinimalTuple</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>BucketTupleInfo</name> <modifier>*</modifier></type><name>tupinfo</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BucketTupleInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>tupinfo</name><operator>-&gt;</operator><name>tuple</name></name> <operator>=</operator> <name>tuple</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tupinfo</name><operator>-&gt;</operator><name>matched</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>binfo</name><operator>-&gt;</operator><name>tuples</name></name> <operator>=</operator> <call><name>list_append_unique_ptr</name><argument_list>(<argument><expr><name>tl</name></expr></argument>, <argument><expr><name>tupinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>binfo</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <call><name>list_head</name><argument_list>(<argument><expr><name><name>binfo</name><operator>-&gt;</operator><name>tuples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ExecStoreMinimalTuple</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Clean up hash state.
 */</comment>
<function><type><name>void</name></type>
<name>FreeBatchHash</name><parameter_list>(<parameter><decl><type><name>YbBatchedNestLoopState</name> <modifier>*</modifier></type><name>bnlstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>hashtable</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>hashiterinit</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ResetTupleHashTable</name><argument_list>(<argument><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>hashtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextReset</name><argument_list>(<argument><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>hashtable</name><operator>-&gt;</operator><name>tablecxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>current_hash_entry</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Clean up and end hash state.
 */</comment>
<function><type><name>void</name></type>
<name>EndHash</name><parameter_list>(<parameter><decl><type><name>YbBatchedNestLoopState</name> <modifier>*</modifier></type><name>bnlstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>bnlstate</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextDelete</name><argument_list>(<argument><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>hashtable</name><operator>-&gt;</operator><name>tablecxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>InitTS</name><parameter_list>(<parameter><decl><type><name>YbBatchedNestLoopState</name> <modifier>*</modifier></type><name>bnlstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>bnl_tupleStoreState</name></name> <operator>=</operator>
		<call><name>tuplestore_begin_heap</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>work_mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>AddTupleToOuterBatchTS</name><parameter_list>(<parameter><decl><type><name>YbBatchedNestLoopState</name> <modifier>*</modifier></type><name>bnlstate</name></decl></parameter>,
					   <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>tuplestore_puttupleslot</name><argument_list>(<argument><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>bnl_tupleStoreState</name></name></expr></argument>,
							<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>bnl_batchMatchedInfo</name></name> <operator>=</operator>
		<call><name>lappend_int</name><argument_list>(<argument><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>bnl_batchMatchedInfo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tuplestore_gettupleslot</name><argument_list>(<argument><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>bnl_tupleStoreState</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>FlushTupleTS</name><parameter_list>(<parameter><decl><type><name>YbBatchedNestLoopState</name> <modifier>*</modifier></type><name>bnlstate</name></decl></parameter>, <parameter><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>bnl_tupleStoreState</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name><name>bnlstate</name><operator>-&gt;</operator><name>bnl_batchTupNo</name></name> <operator>&lt;</operator> <call><name>tuplestore_tuple_count</name><argument_list>(<argument><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>bnl_tupleStoreState</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name> <init>= <expr><call><name>list_nth_cell</name><argument_list>(<argument><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>bnl_batchMatchedInfo</name></name></expr></argument>, 
								 	 <argument><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>bnl_batchTupNo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>lfirst_int</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>GetNewOuterTupleTS</name><argument_list>(<argument><expr><name>bnlstate</name></expr></argument>, <argument><expr><name>econtext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>tuplestore_skiptuples</name><argument_list>(<argument><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>bnl_tupleStoreState</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>bnl_batchTupNo</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>RegisterOuterMatchTS</name><parameter_list>(<parameter><decl><type><name>YbBatchedNestLoopState</name> <modifier>*</modifier></type><name>bnlstate</name></decl></parameter>, <parameter><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>bnl_tupleStoreState</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>econtext</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name> <init>= <expr><call><name>list_nth_cell</name><argument_list>(<argument><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>bnl_batchMatchedInfo</name></name></expr></argument>, 
								 <argument><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>bnl_batchTupNo</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>lc</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>int_value</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>GetNewOuterTupleTS</name><parameter_list>(<parameter><decl><type><name>YbBatchedNestLoopState</name> <modifier>*</modifier></type><name>bnlstate</name></decl></parameter>, <parameter><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Tuplestorestate</name> <modifier>*</modifier></type><name>outertuples</name> <init>= <expr><name><name>bnlstate</name><operator>-&gt;</operator><name>bnl_tupleStoreState</name></name></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><operator>!</operator><call><name>tuplestore_ateof</name><argument_list>(<argument><expr><name>outertuples</name></expr></argument>)</argument_list></call>
		<operator>&amp;&amp;</operator> <call><name>tuplestore_tuple_count</name><argument_list>(<argument><expr><name>outertuples</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal>
		<operator>&amp;&amp;</operator> <call><name>tuplestore_gettupleslot</name><argument_list>(<argument><expr><name>outertuples</name></expr></argument>,
								   <argument><expr><name>true</name></expr></argument>,
								   <argument><expr><name>false</name></expr></argument>,
								   <argument><expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_outertuple</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>current_tup_no</name> <init>= <expr><name><name>bnlstate</name><operator>-&gt;</operator><name>bnl_batchTupNo</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>bnl_batchTupNo</name></name><operator>++</operator></expr>;</expr_stmt>

		<comment type="block">/*
		 * This has already been matched so no need to look at this again in a
		 * semijoin.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>bnlstate</name><operator>-&gt;</operator><name>js</name><operator>.</operator><name>single_match</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name> <init>= <expr><call><name>list_nth_cell</name><argument_list>(<argument><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>bnl_batchMatchedInfo</name></name></expr></argument>, 
								 		 <argument><expr><name>current_tup_no</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>lfirst_int</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></while>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ResetBatchTS</name><parameter_list>(<parameter><decl><type><name>YbBatchedNestLoopState</name> <modifier>*</modifier></type><name>bnlstate</name></decl></parameter>, <parameter><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Tuplestorestate</name> <modifier>*</modifier></type><name>outertuples</name> <init>= <expr><name><name>bnlstate</name><operator>-&gt;</operator><name>bnl_tupleStoreState</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>outertuples</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tuplestore_rescan</name><argument_list>(<argument><expr><name>outertuples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>bnl_batchTupNo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>FreeBatchTS</name><parameter_list>(<parameter><decl><type><name>YbBatchedNestLoopState</name> <modifier>*</modifier></type><name>bnlstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Tuplestorestate</name> <modifier>*</modifier></type><name>outertuples</name> <init>= <expr><name><name>bnlstate</name><operator>-&gt;</operator><name>bnl_tupleStoreState</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>outertuples</name></expr>)</condition>
	<block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>tuplestore_clear</name><argument_list>(<argument><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>bnl_tupleStoreState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>bnl_batchMatchedInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>bnl_batchMatchedInfo</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Clean up and end tuplestore state.
 */</comment>
<function><type><name>void</name></type>
<name>EndTS</name><parameter_list>(<parameter><decl><type><name>YbBatchedNestLoopState</name> <modifier>*</modifier></type><name>bnlstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>tuplestore_end</name><argument_list>(<argument><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>bnl_tupleStoreState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>bnl_batchMatchedInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>bnl_batchMatchedInfo</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>CreateBatch</name><parameter_list>(<parameter><decl><type><name>YbBatchedNestLoopState</name> <modifier>*</modifier></type><name>bnlstate</name></decl></parameter>, <parameter><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>outer_done</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>YbBatchedNestLoop</name>   <modifier>*</modifier></type><name>batchnl</name> <init>= <expr><operator>(</operator><name>YbBatchedNestLoop</name> <operator>*</operator><operator>)</operator> <name><name>bnlstate</name><operator>-&gt;</operator><name>js</name><operator>.</operator><name>ps</name><operator>.</operator><name>plan</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>outerTupleSlot</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PlanState</name>  <modifier>*</modifier></type><name>outerPlan</name> <init>= <expr><call><name>outerPlanState</name><argument_list>(<argument><expr><name>bnlstate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PlanState</name>  <modifier>*</modifier></type><name>innerPlan</name> <init>= <expr><call><name>innerPlanState</name><argument_list>(<argument><expr><name>bnlstate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>LOCAL_JOIN_FN</name><argument_list>(<argument><expr><name>FreeBatch</name></expr></argument>, <argument><expr><name>bnlstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>batchno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>batchno</name> <operator>&lt;</operator> <call><name>GetBatchSize</name><argument_list>(<argument><expr><name>batchnl</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>batchno</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>, <argument><expr><literal type="string">"getting new outer tuple"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>outer_done</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>outerTupleSlot</name> <operator>=</operator> <call><name>ExecProcNode</name><argument_list>(<argument><expr><name>outerPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * if there are no more outer tuples, then the join is complete..
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>outer_done</name> <operator>||</operator> <call><name>TupIsNull</name><argument_list>(<argument><expr><name>outerTupleSlot</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>batchno</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>, <argument><expr><literal type="string">"no outer tuple, ending join"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>false</name></expr>;</return>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name>outer_done</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>, <argument><expr><literal type="string">"saving new outer tuple information"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_outertuple</name></name> <operator>=</operator> <name>outerTupleSlot</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>LOCAL_JOIN_FN</name><argument_list>(<argument><expr><name>AddTupleToOuterBatch</name></expr></argument>, <argument><expr><name>bnlstate</name></expr></argument>, <argument><expr><name>outerTupleSlot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="block">/*
		 * fetch the values of any outer Vars that must be passed to the
		 * inner scan, and store them in the appropriate PARAM_EXEC slots.
		 */</comment>
		<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
		<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>batchnl-&gt;nl.nestParams</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>NestLoopParam</name> <modifier>*</modifier></type><name>nlp</name> <init>= <expr><operator>(</operator><name>NestLoopParam</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>paramno</name> <init>= <expr><name><name>nlp</name><operator>-&gt;</operator><name>paramno</name></name> <operator>+</operator> <name>batchno</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ParamExecData</name> <modifier>*</modifier></type><name>prm</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>prm</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>econtext</name><operator>-&gt;</operator><name>ecxt_param_exec_vals</name><index>[<expr><name>paramno</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
			<comment type="block">/* Param value should be an OUTER_VAR var */</comment>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>IsA</name><argument_list>(<argument><expr><name><name>nlp</name><operator>-&gt;</operator><name>paramval</name></name></expr></argument>, <argument><expr><name>Var</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>nlp</name><operator>-&gt;</operator><name>paramval</name><operator>-&gt;</operator><name>varno</name></name> <operator>==</operator> <name>OUTER_VAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>nlp</name><operator>-&gt;</operator><name>paramval</name><operator>-&gt;</operator><name>varattno</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>outer_done</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>prm</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <call><name>slot_getattr</name><argument_list>(<argument><expr><name>outerTupleSlot</name></expr></argument>,
										  <argument><expr><name><name>nlp</name><operator>-&gt;</operator><name>paramval</name><operator>-&gt;</operator><name>varattno</name></name></expr></argument>,
										  <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>prm</name><operator>-&gt;</operator><name>isnull</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name><name>prm</name><operator>-&gt;</operator><name>isnull</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<comment type="block">/* Flag parameter value as changed */</comment>
			<expr_stmt><expr><name><name>innerPlan</name><operator>-&gt;</operator><name>chgParam</name></name> <operator>=</operator> <call><name>bms_add_member</name><argument_list>(<argument><expr><name><name>innerPlan</name><operator>-&gt;</operator><name>chgParam</name></name></expr></argument>,
												 <argument><expr><name>paramno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>LOCAL_JOIN_FN</name><argument_list>(<argument><expr><name>ResetBatch</name></expr></argument>, <argument><expr><name>bnlstate</name></expr></argument>, <argument><expr><name>econtext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>GetBatchSize</name><parameter_list>(<parameter><decl><type><name>YbBatchedNestLoop</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>plan</name><operator>-&gt;</operator><name>nl</name><operator>.</operator><name>nestParams</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>NestLoopParam</name> <modifier>*</modifier></type><name>nlp</name> <init>=
		<expr><operator>(</operator><name>NestLoopParam</name> <operator>*</operator><operator>)</operator> <call><name>linitial</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>nl</name><operator>.</operator><name>nestParams</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><name><name>nlp</name><operator>-&gt;</operator><name>yb_batch_size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>IsBatched</name><parameter_list>(<parameter><decl><type><name>YbBatchedNestLoop</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>GetBatchSize</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* ----------------------------------------------------------------
 *		ExecInitYbBatchedNestLoop
 * ----------------------------------------------------------------
 */</comment>
<function><type><name>YbBatchedNestLoopState</name> <modifier>*</modifier></type>
<name>ExecInitYbBatchedNestLoop</name><parameter_list>(<parameter><decl><type><name>YbBatchedNestLoop</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>, <parameter><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>YbBatchedNestLoopState</name> <modifier>*</modifier></type><name>bnlstate</name></decl>;</decl_stmt>

	<comment type="block">/* check for unsupported flags */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>eflags</name> <operator>&amp;</operator> <operator>(</operator><name>EXEC_FLAG_BACKWARD</name> <operator>|</operator> <name>EXEC_FLAG_MARK</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>NL1_printf</name><argument_list>(<argument><expr><literal type="string">"ExecInitYbBatchedNestLoop: %s\n"</literal></expr></argument>,
			   <argument><expr><literal type="string">"initializing node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * create state structure
	 */</comment>
	<expr_stmt><expr><name>bnlstate</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>YbBatchedNestLoopState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>js</name><operator>.</operator><name>ps</name><operator>.</operator><name>plan</name></name> <operator>=</operator> <operator>(</operator><name>Plan</name> <operator>*</operator><operator>)</operator> <name>plan</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>js</name><operator>.</operator><name>ps</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>estate</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>js</name><operator>.</operator><name>ps</name><operator>.</operator><name>ExecProcNode</name></name> <operator>=</operator> <name>ExecYbBatchedNestLoop</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>bnl_tupleStoreState</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>IsBatched</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Miscellaneous initialization
	 *
	 * create expression context for node
	 */</comment>
	<expr_stmt><expr><call><name>ExecAssignExprContext</name><argument_list>(<argument><expr><name>estate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>bnlstate</name><operator>-&gt;</operator><name>js</name><operator>.</operator><name>ps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * initialize child nodes
	 *
	 * If we have no parameters to pass into the inner rel from the outer,
	 * tell the inner child that cheap rescans would be good.  If we do have
	 * such parameters, then there is no point in REWIND support at all in the
	 * inner child, because it will always be rescanned with fresh parameter
	 * values.
	 */</comment>
	<expr_stmt><expr><call><name>outerPlanState</name><argument_list>(<argument><expr><name>bnlstate</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>ExecInitNode</name><argument_list>(<argument><expr><call><name>outerPlan</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>estate</name></expr></argument>, <argument><expr><name>eflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>plan</name><operator>-&gt;</operator><name>nl</name><operator>.</operator><name>nestParams</name></name> <operator>==</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>eflags</name> <operator>|=</operator> <name>EXEC_FLAG_REWIND</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>eflags</name> <operator>&amp;=</operator> <operator>~</operator><name>EXEC_FLAG_REWIND</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><call><name>innerPlanState</name><argument_list>(<argument><expr><name>bnlstate</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>ExecInitNode</name><argument_list>(<argument><expr><call><name>innerPlan</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>estate</name></expr></argument>, <argument><expr><name>eflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Initialize result slot, type and projection.
	 */</comment>
	<expr_stmt><expr><call><name>ExecInitResultTupleSlotTL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bnlstate</name><operator>-&gt;</operator><name>js</name><operator>.</operator><name>ps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ExecAssignProjectionInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bnlstate</name><operator>-&gt;</operator><name>js</name><operator>.</operator><name>ps</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * initialize child expressions
	 */</comment>
	<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>js</name><operator>.</operator><name>ps</name><operator>.</operator><name>qual</name></name> <operator>=</operator>
		<call><name>ExecInitQual</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>nl</name><operator>.</operator><name>join</name><operator>.</operator><name>plan</name><operator>.</operator><name>qual</name></name></expr></argument>, <argument><expr><operator>(</operator><name>PlanState</name> <operator>*</operator><operator>)</operator> <name>bnlstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>js</name><operator>.</operator><name>jointype</name></name> <operator>=</operator> <name><name>plan</name><operator>-&gt;</operator><name>nl</name><operator>.</operator><name>join</name><operator>.</operator><name>jointype</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>js</name><operator>.</operator><name>joinqual</name></name> <operator>=</operator>
		<call><name>ExecInitQual</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>nl</name><operator>.</operator><name>join</name><operator>.</operator><name>joinqual</name></name></expr></argument>, <argument><expr><operator>(</operator><name>PlanState</name> <operator>*</operator><operator>)</operator> <name>bnlstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * detect whether we need only consider the first matching inner tuple
	 */</comment>
	<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>js</name><operator>.</operator><name>single_match</name></name> <operator>=</operator> <operator>(</operator><name><name>plan</name><operator>-&gt;</operator><name>nl</name><operator>.</operator><name>join</name><operator>.</operator><name>inner_unique</name></name> <operator>||</operator>
								<name><name>plan</name><operator>-&gt;</operator><name>nl</name><operator>.</operator><name>join</name><operator>.</operator><name>jointype</name></name> <operator>==</operator> <name>JOIN_SEMI</name><operator>)</operator></expr>;</expr_stmt>

	<comment type="block">/* set up null tuples for outer joins, if needed */</comment>
	<switch>switch <condition>(<expr><name><name>plan</name><operator>-&gt;</operator><name>nl</name><operator>.</operator><name>join</name><operator>.</operator><name>jointype</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>JOIN_INNER</name></expr>:</case>
		<case>case <expr><name>JOIN_SEMI</name></expr>:</case>
			<break>break;</break>
		<case>case <expr><name>JOIN_LEFT</name></expr>:</case>
		<case>case <expr><name>JOIN_ANTI</name></expr>:</case>
			<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>nl_NullInnerTupleSlot</name></name> <operator>=</operator>
				<call><name>ExecInitNullTupleSlot</name><argument_list>(
					<argument><expr><name>estate</name></expr></argument>,
					<argument><expr><call><name>ExecGetResultType</name><argument_list>(<argument><expr><call><name>innerPlanState</name><argument_list>(<argument><expr><name>bnlstate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized join type: %d"</literal></expr></argument>,
				 <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>plan</name><operator>-&gt;</operator><name>nl</name><operator>.</operator><name>join</name><operator>.</operator><name>jointype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<comment type="block">/*
	 * finally, reset the outer tuple batch state.
	 */</comment>

	<expr_stmt><expr><call><name>NL1_printf</name><argument_list>(<argument><expr><literal type="string">"ExecInitYbBatchedNestLoop: %s\n"</literal></expr></argument>,
			   <argument><expr><literal type="string">"node initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>bnl_currentstatus</name></name> <operator>=</operator> <name>BNL_INIT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>bnl_batchMatchedInfo</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>bnl_batchTupNo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	
	<if_stmt><if>if <condition>(<expr><call><name>UseHash</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>bnlstate</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>InitHash</name><argument_list>(<argument><expr><name>bnlstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>REGISTER_LOCAL_JOIN_FN</name><argument_list>(<argument><expr><name>FlushTuple</name></expr></argument>, <argument><expr><name>Hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>REGISTER_LOCAL_JOIN_FN</name><argument_list>(<argument><expr><name>FlushTuple</name></expr></argument>, <argument><expr><name>Hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>REGISTER_LOCAL_JOIN_FN</name><argument_list>(<argument><expr><name>GetNewOuterTuple</name></expr></argument>, <argument><expr><name>Hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>REGISTER_LOCAL_JOIN_FN</name><argument_list>(<argument><expr><name>ResetBatch</name></expr></argument>, <argument><expr><name>Hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>REGISTER_LOCAL_JOIN_FN</name><argument_list>(<argument><expr><name>RegisterOuterMatch</name></expr></argument>, <argument><expr><name>Hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>REGISTER_LOCAL_JOIN_FN</name><argument_list>(<argument><expr><name>AddTupleToOuterBatch</name></expr></argument>, <argument><expr><name>Hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>REGISTER_LOCAL_JOIN_FN</name><argument_list>(<argument><expr><name>FreeBatch</name></expr></argument>, <argument><expr><name>Hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>REGISTER_LOCAL_JOIN_FN</name><argument_list>(<argument><expr><name>End</name></expr></argument>, <argument><expr><name>Hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>InitTS</name><argument_list>(<argument><expr><name>bnlstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>REGISTER_LOCAL_JOIN_FN</name><argument_list>(<argument><expr><name>FlushTuple</name></expr></argument>, <argument><expr><name>TS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>REGISTER_LOCAL_JOIN_FN</name><argument_list>(<argument><expr><name>FlushTuple</name></expr></argument>, <argument><expr><name>TS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>REGISTER_LOCAL_JOIN_FN</name><argument_list>(<argument><expr><name>GetNewOuterTuple</name></expr></argument>, <argument><expr><name>TS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>REGISTER_LOCAL_JOIN_FN</name><argument_list>(<argument><expr><name>ResetBatch</name></expr></argument>, <argument><expr><name>TS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>REGISTER_LOCAL_JOIN_FN</name><argument_list>(<argument><expr><name>RegisterOuterMatch</name></expr></argument>, <argument><expr><name>TS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>REGISTER_LOCAL_JOIN_FN</name><argument_list>(<argument><expr><name>AddTupleToOuterBatch</name></expr></argument>, <argument><expr><name>TS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>REGISTER_LOCAL_JOIN_FN</name><argument_list>(<argument><expr><name>FreeBatch</name></expr></argument>, <argument><expr><name>TS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>REGISTER_LOCAL_JOIN_FN</name><argument_list>(<argument><expr><name>End</name></expr></argument>, <argument><expr><name>TS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>bnlstate</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ----------------------------------------------------------------
 *		ExecEndYbBatchedNestLoop
 *
 *		closes down scans and frees allocated storage
 * ----------------------------------------------------------------
 */</comment>
<function><type><name>void</name></type>
<name>ExecEndYbBatchedNestLoop</name><parameter_list>(<parameter><decl><type><name>YbBatchedNestLoopState</name> <modifier>*</modifier></type><name>bnlstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>NL1_printf</name><argument_list>(<argument><expr><literal type="string">"ExecEndYbBatchedNestLoop: %s\n"</literal></expr></argument>,
			   <argument><expr><literal type="string">"ending node processing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LOCAL_JOIN_FN</name><argument_list>(<argument><expr><name>End</name></expr></argument>, <argument><expr><name>bnlstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Free the exprcontext
	 */</comment>
	<expr_stmt><expr><call><name>ExecFreeExprContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bnlstate</name><operator>-&gt;</operator><name>js</name><operator>.</operator><name>ps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * clean out the tuple table
	 */</comment>
	<expr_stmt><expr><call><name>ExecClearTuple</name><argument_list>(<argument><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>js</name><operator>.</operator><name>ps</name><operator>.</operator><name>ps_ResultTupleSlot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * close down subplans
	 */</comment>
	<expr_stmt><expr><call><name>ExecEndNode</name><argument_list>(<argument><expr><call><name>outerPlanState</name><argument_list>(<argument><expr><name>bnlstate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ExecEndNode</name><argument_list>(<argument><expr><call><name>innerPlanState</name><argument_list>(<argument><expr><name>bnlstate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>NL1_printf</name><argument_list>(<argument><expr><literal type="string">"ExecEndYbBatchedNestLoop: %s\n"</literal></expr></argument>,
			   <argument><expr><literal type="string">"node processing ended"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ----------------------------------------------------------------
 *		ExecReScanYbBatchedNestLoop
 * ----------------------------------------------------------------
 */</comment>
<function><type><name>void</name></type>
<name>ExecReScanYbBatchedNestLoop</name><parameter_list>(<parameter><decl><type><name>YbBatchedNestLoopState</name> <modifier>*</modifier></type><name>bnlstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PlanState</name>  <modifier>*</modifier></type><name>outerPlan</name> <init>= <expr><call><name>outerPlanState</name><argument_list>(<argument><expr><name>bnlstate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * If outerPlan-&gt;chgParam is not null then plan will be automatically
	 * re-scanned by first ExecProcNode.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>outerPlan</name><operator>-&gt;</operator><name>chgParam</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ExecReScan</name><argument_list>(<argument><expr><name>outerPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
	<expr_stmt><expr><call><name>LOCAL_JOIN_FN</name><argument_list>(<argument><expr><name>FreeBatch</name></expr></argument>, <argument><expr><name>bnlstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bnlstate</name><operator>-&gt;</operator><name>bnl_currentstatus</name></name> <operator>=</operator> <name>BNL_INIT</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * innerPlan is re-scanned for each new outer tuple and MUST NOT be
	 * re-scanned from here or you'll get troubles from inner index scans when
	 * outer Vars are used as run-time keys...
	 */</comment>
</block_content>}</block></function>
</unit>
