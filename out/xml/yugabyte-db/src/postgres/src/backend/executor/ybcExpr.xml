<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/backend/executor/ybcExpr.c"><comment type="block">/*--------------------------------------------------------------------------------------------------
 * ybcExpr.c
 *        Routines to construct YBC expression tree.
 *
 * Copyright (c) YugaByte, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.  See the License for the specific language governing permissions and limitations
 * under the License.
 *
 * IDENTIFICATION
 *        src/backend/executor/ybcExpr.c
 *--------------------------------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_collation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/makefuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/nodeFuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/datum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/relcache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parse_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/dbcommands.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/nodeSubplan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/tuptable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_yb_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/ybcExpr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/yb_type.h"</cpp:file></cpp:include>

<function_decl><type><name>Node</name> <modifier>*</modifier></type><name>yb_expr_instantiate_params_mutator</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>yb_pushdown_walker</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>yb_can_pushdown_func</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>funcid</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>YBCPgExpr</name></type> <name>YBCNewColumnRef</name><parameter_list>(<parameter><decl><type><name>YBCPgStatement</name></type> <name>ybc_stmt</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>attr_num</name></decl></parameter>,
						  <parameter><decl><type><name>int</name></type> <name>attr_typid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attr_collation</name></decl></parameter>,
						  <parameter><decl><type><specifier>const</specifier> <name>YBCPgTypeAttrs</name> <modifier>*</modifier></type><name>type_attrs</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>YBCPgExpr</name></type> <name>expr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>YBCPgTypeEntity</name> <modifier>*</modifier></type><name>type_entity</name> <init>= <expr><call><name>YbDataTypeFromOidMod</name><argument_list>(<argument><expr><name>attr_num</name></expr></argument>, <argument><expr><name>attr_typid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>YBCPgCollationInfo</name></type> <name>collation_info</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>YBGetCollationInfo</name><argument_list>(<argument><expr><name>attr_collation</name></expr></argument>, <argument><expr><name>type_entity</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> <comment type="block">/* datum */</comment>, <argument><expr><name>true</name></expr></argument> <comment type="block">/* is_null */</comment>,
					   <argument><expr><operator>&amp;</operator><name>collation_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HandleYBStatus</name><argument_list>(<argument><expr><call><name>YBCPgNewColumnRef</name><argument_list>(<argument><expr><name>ybc_stmt</name></expr></argument>, <argument><expr><name>attr_num</name></expr></argument>, <argument><expr><name>type_entity</name></expr></argument>,
									 <argument><expr><name><name>collation_info</name><operator>.</operator><name>collate_is_valid_non_c</name></name></expr></argument>,
									 <argument><expr><name>type_attrs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>expr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>expr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>YBCPgExpr</name></type> <name>YBCNewConstant</name><parameter_list>(<parameter><decl><type><name>YBCPgStatement</name></type> <name>ybc_stmt</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>type_id</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>collation_id</name></decl></parameter>,
						 <parameter><decl><type><name>Datum</name></type> <name>datum</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_null</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>YBCPgExpr</name></type> <name>expr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>YBCPgTypeEntity</name> <modifier>*</modifier></type><name>type_entity</name> <init>= <expr><call><name>YbDataTypeFromOidMod</name><argument_list>(<argument><expr><name>InvalidAttrNumber</name></expr></argument>, <argument><expr><name>type_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>YBCPgCollationInfo</name></type> <name>collation_info</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>YBGetCollationInfo</name><argument_list>(<argument><expr><name>collation_id</name></expr></argument>, <argument><expr><name>type_entity</name></expr></argument>, <argument><expr><name>datum</name></expr></argument>, <argument><expr><name>is_null</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>collation_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HandleYBStatus</name><argument_list>(<argument><expr><call><name>YBCPgNewConstant</name><argument_list>(<argument><expr><name>ybc_stmt</name></expr></argument>, <argument><expr><name>type_entity</name></expr></argument>,
									<argument><expr><name><name>collation_info</name><operator>.</operator><name>collate_is_valid_non_c</name></name></expr></argument>,
									<argument><expr><name><name>collation_info</name><operator>.</operator><name>sortkey</name></name></expr></argument>,
									<argument><expr><name>datum</name></expr></argument>, <argument><expr><name>is_null</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>expr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>expr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>YBCPgExpr</name></type> <name>YBCNewConstantVirtual</name><parameter_list>(<parameter><decl><type><name>YBCPgStatement</name></type> <name>ybc_stmt</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>type_id</name></decl></parameter>, <parameter><decl><type><name>YBCPgDatumKind</name></type> <name>kind</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>YBCPgExpr</name></type> <name>expr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>YBCPgTypeEntity</name> <modifier>*</modifier></type><name>type_entity</name> <init>= <expr><call><name>YbDataTypeFromOidMod</name><argument_list>(<argument><expr><name>InvalidAttrNumber</name></expr></argument>, <argument><expr><name>type_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>HandleYBStatus</name><argument_list>(<argument><expr><call><name>YBCPgNewConstantVirtual</name><argument_list>(<argument><expr><name>ybc_stmt</name></expr></argument>, <argument><expr><name>type_entity</name></expr></argument>, <argument><expr><name>kind</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>expr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>expr</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * yb_expr_instantiate_params_mutator
 *
 *	  Expression mutator used internally by YbExprInstantiateParams
 */</comment>
<function><type><name>Node</name> <modifier>*</modifier></type><name>yb_expr_instantiate_params_mutator</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>Param</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Param</name>	   <modifier>*</modifier></type><name>param</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>Param</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type>		<name>pval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>pnull</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int16</name></type>		<name>typLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>typByVal</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>paramkind</name></name> <operator>==</operator> <name>PARAM_EXEC</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>ParamExecData</name> <modifier>*</modifier></type><name>prm</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>estate</name><operator>-&gt;</operator><name>es_param_exec_vals</name><index>[<expr><name><name>param</name><operator>-&gt;</operator><name>paramid</name></name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>prm</name><operator>-&gt;</operator><name>execPlan</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* Parameter not evaluated yet, so go do it */</comment>
				<expr_stmt><expr><call><name>ExecSetParamPlan</name><argument_list>(<argument><expr><name><name>prm</name><operator>-&gt;</operator><name>execPlan</name></name></expr></argument>, <argument><expr><call><name>GetPerTupleExprContext</name><argument_list>(<argument><expr><name>estate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* ExecSetParamPlan should have processed this param... */</comment>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>prm</name><operator>-&gt;</operator><name>execPlan</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>pval</name> <operator>=</operator> <name><name>prm</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>pnull</name> <operator>=</operator> <name><name>prm</name><operator>-&gt;</operator><name>isnull</name></name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>ParamExternData</name> <modifier>*</modifier></type><name>prm</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ParamExternData</name></type> <name>prmdata</name></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>estate</name><operator>-&gt;</operator><name>es_param_list_info</name><operator>-&gt;</operator><name>paramFetch</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>prm</name> <operator>=</operator> <call><name><name>estate</name><operator>-&gt;</operator><name>es_param_list_info</name><operator>-&gt;</operator><name>paramFetch</name></name><argument_list>(
					<argument><expr><name><name>estate</name><operator>-&gt;</operator><name>es_param_list_info</name></name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>paramid</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prmdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>prm</name> <operator>=</operator> <operator>&amp;</operator><name><name>estate</name><operator>-&gt;</operator><name>es_param_list_info</name><operator>-&gt;</operator><name>params</name><index>[<expr><name><name>param</name><operator>-&gt;</operator><name>paramid</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>prm</name><operator>-&gt;</operator><name>ptype</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>prm</name><operator>-&gt;</operator><name>ptype</name></name> <operator>==</operator> <name><name>param</name><operator>-&gt;</operator><name>paramtype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>pval</name> <operator>=</operator> <name><name>prm</name><operator>-&gt;</operator><name>value</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>pnull</name> <operator>=</operator> <name><name>prm</name><operator>-&gt;</operator><name>isnull</name></name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name>get_typlenbyval</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>paramtype</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>typLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>typByVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/*
		 * If parameter is by reference, make a copy in the current memory
		 * context
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pnull</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>typByVal</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>pval</name> <operator>=</operator> <call><name>datumCopy</name><argument_list>(<argument><expr><name>pval</name></expr></argument>, <argument><expr><name>typByVal</name></expr></argument>, <argument><expr><name>typLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<return>return <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>makeConst</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>paramtype</name></name></expr></argument>,
								  <argument><expr><name><name>param</name><operator>-&gt;</operator><name>paramtypmod</name></name></expr></argument>,
								  <argument><expr><name><name>param</name><operator>-&gt;</operator><name>paramcollid</name></name></expr></argument>,
								  <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>typLen</name></expr></argument>,
								  <argument><expr><name>pval</name></expr></argument>,
								  <argument><expr><name>pnull</name></expr></argument>,
								  <argument><expr><name>typByVal</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><call><name>expression_tree_mutator</name><argument_list>(<argument><expr><name>node</name></expr></argument>,
								   <argument><expr><name>yb_expr_instantiate_params_mutator</name></expr></argument>,
								   <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>estate</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * YbExprInstantiateParams
 *
 *	  Replace the Param nodes of the expression tree with Const nodes carrying
 *	  current parameter values before pushing the expression down to DocDB
 */</comment>
<function><type><name>Expr</name> <modifier>*</modifier></type><name>YbExprInstantiateParams</name><parameter_list>(<parameter><decl><type><name>Expr</name><modifier>*</modifier></type> <name>expr</name></decl></parameter>, <parameter><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Fast-path if there are no params. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>estate</name><operator>-&gt;</operator><name>es_param_list_info</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
		<name><name>estate</name><operator>-&gt;</operator><name>es_param_exec_vals</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>expr</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * This does not follow common pattern of mutator invocation due to the
	 * corner case when expr is a bare T_Param node. The expression_tree_mutator
	 * just makes a copy of primitive nodes without running the mutator function
	 * on them. So here we run the mutator to make sure the bare T_Param is
	 * getting replaced, and if the expr is anything else, it will be properly
	 * forwarded to the expression_tree_mutator.
	 */</comment>
	<return>return <expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <call><name>yb_expr_instantiate_params_mutator</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>expr</name></expr></argument>, <argument><expr><name>estate</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * YbInstantiateRemoteParams
 *	  Replace the Param nodes of the expression trees with Const nodes carrying
 *	  current parameter values before pushing the expression down to DocDB.
 */</comment>
<function><type><name>PushdownExprs</name> <modifier>*</modifier></type>
<name>YbInstantiateRemoteParams</name><parameter_list>(<parameter><decl><type><name>PushdownExprs</name> <modifier>*</modifier></type><name>remote</name></decl></parameter>, <parameter><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PushdownExprs</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>remote</name><operator>-&gt;</operator><name>qual</name></name> <operator>==</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<comment type="block">/* Make new instance for the scan state. */</comment>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>PushdownExprs</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PushdownExprs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Store mutated list of expressions. */</comment>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>qual</name></name> <operator>=</operator> <operator>(</operator><name>List</name> <operator>*</operator><operator>)</operator>
		<call><name>YbExprInstantiateParams</name><argument_list>(<argument><expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <name><name>remote</name><operator>-&gt;</operator><name>qual</name></name></expr></argument>, <argument><expr><name>estate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/*
	 * Column references are not modified by the executor, so it is OK to copy
	 * the reference.
	 */</comment>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>colrefs</name></name> <operator>=</operator> <name><name>remote</name><operator>-&gt;</operator><name>colrefs</name></name></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * yb_can_pushdown_func
 *
 *	  Determine if the function can be pushed down to DocDB
 *	  Since catalog access is not currently available in DocDB, only built in
 *	  functions are pushable. The lack of catalog access imposes also other
 *	  limitations:
 *	   - Only immutable functions are pushable. Stable and volatile functions
 *	     are permitted to access the catalog;
 *	   - DocDB must support conversion of parameter and result values between
 *	     DocDB and Postgres formats, so there should be conversion functions;
 *	   - Typically functions with polymorfic parameters or result need catalog
 *	     access to determine runtime data types, so they are not pushed down.
 */</comment>
<function><type><name>bool</name></type> <name>yb_can_pushdown_func</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>funcid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HeapTuple</name></type>		<name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_proc</name></type>	<name>pg_proc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>			<name>result</name></decl>;</decl_stmt>

	<comment type="block">/* Quick check if the function is builtin */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_builtin_func</name><argument_list>(<argument><expr><name>funcid</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Check whether this function is on a list of hand-picked functions
	 * safe for pushdown.
	 */</comment>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>yb_funcs_safe_for_pushdown_count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>funcid</name> <operator>==</operator> <name><name>yb_funcs_safe_for_pushdown</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Examine misc function attributes that may affect pushability */</comment>
	<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>PROCOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>funcid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for function %u"</literal></expr></argument>, <argument><expr><name>funcid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>pg_proc</name> <operator>=</operator> <operator>(</operator><name>Form_pg_proc</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>pg_proc</name><operator>-&gt;</operator><name>provolatile</name></name> <operator>!=</operator> <name>PROVOLATILE_IMMUTABLE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&amp;&amp;</operator>
		<operator>(</operator><operator>!</operator><call><name>YBCPgFindTypeEntity</name><argument_list>(<argument><expr><name><name>pg_proc</name><operator>-&gt;</operator><name>prorettype</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
		 <call><name>IsPolymorphicType</name><argument_list>(<argument><expr><name><name>pg_proc</name><operator>-&gt;</operator><name>prorettype</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition>
	<block>{<block_content>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pg_proc</name><operator>-&gt;</operator><name>pronargs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Oid</name></type> <name>typid</name> <init>= <expr><name><name>pg_proc</name><operator>-&gt;</operator><name>proargtypes</name><operator>.</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>YBCPgFindTypeEntity</name><argument_list>(<argument><expr><name>typid</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IsPolymorphicType</name><argument_list>(<argument><expr><name>typid</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * yb_pushdown_walker
 *
 *	  Expression walker used internally by YbCanPushdownExpr
 */</comment>
<function><type><name>bool</name></type> <name>yb_pushdown_walker</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	<switch>switch <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>T_Var</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Var</name>		   <modifier>*</modifier></type><name>var_expr</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>Var</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>AttrNumber</name></type>	<name>attno</name> <init>= <expr><name><name>var_expr</name><operator>-&gt;</operator><name>varattno</name></name></expr></init></decl>;</decl_stmt>
			<comment type="block">/* DocDB is not aware of Postgres virtual attributes */</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AttrNumberIsForUserDefinedAttr</name><argument_list>(<argument><expr><name>attno</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Need to convert values between DocDB and Postgres formats */</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>YBCPgFindTypeEntity</name><argument_list>(<argument><expr><name><name>var_expr</name><operator>-&gt;</operator><name>vartype</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Collect column reference */</comment>
			<if_stmt><if>if <condition>(<expr><name>params</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>bool</name></type>		<name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

				<comment type="block">/* Check if the column reference has already been collected */</comment>
				<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>*params</argument>)</argument_list></macro>
				<block>{<block_content>
					<decl_stmt><decl><type><name>YbExprParamDesc</name> <modifier>*</modifier></type><name>param</name> <init>= <expr><operator>(</operator><name>YbExprParamDesc</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if_stmt><if>if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>attno</name></name> <operator>==</operator> <name>attno</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
						<break>break;</break>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* Add new column reference to the list */</comment>
					<decl_stmt><decl><type><name>YbExprParamDesc</name> <modifier>*</modifier></type><name>new_param</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>YbExprParamDesc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name><name>new_param</name><operator>-&gt;</operator><name>attno</name></name> <operator>=</operator> <name>attno</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>new_param</name><operator>-&gt;</operator><name>typid</name></name> <operator>=</operator> <name><name>var_expr</name><operator>-&gt;</operator><name>vartype</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>new_param</name><operator>-&gt;</operator><name>typmod</name></name> <operator>=</operator> <name><name>var_expr</name><operator>-&gt;</operator><name>vartypmod</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>new_param</name><operator>-&gt;</operator><name>collid</name></name> <operator>=</operator> <name><name>var_expr</name><operator>-&gt;</operator><name>varcollid</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><operator>*</operator><name>params</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><operator>*</operator><name>params</name></expr></argument>, <argument><expr><name>new_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		</block_content>}</block>
		<case>case <expr><name>T_FuncExpr</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>FuncExpr</name> <modifier>*</modifier></type><name>func_expr</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>FuncExpr</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<comment type="block">/* DocDB executor does not expand variadic argument */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>func_expr</name><operator>-&gt;</operator><name>funcvariadic</name></name></expr>)</condition>
			<block>{<block_content>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/*
			 * Unsafe to pushdown function if collation is not C, there may be
			 * needed metadata lookup for collation details.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>YBIsCollationValidNonC</name><argument_list>(<argument><expr><name><name>func_expr</name><operator>-&gt;</operator><name>inputcollid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<comment type="block">/* Check if the function is pushable */</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yb_can_pushdown_func</name><argument_list>(<argument><expr><name><name>func_expr</name><operator>-&gt;</operator><name>funcid</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		</block_content>}</block>
		<case>case <expr><name>T_OpExpr</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>OpExpr</name> <modifier>*</modifier></type><name>op_expr</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>OpExpr</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<comment type="block">/*
			 * Unsafe to pushdown function if collation is not C, there may be
			 * needed metadata lookup for collation details.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>YBIsCollationValidNonC</name><argument_list>(<argument><expr><name><name>op_expr</name><operator>-&gt;</operator><name>inputcollid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yb_can_pushdown_func</name><argument_list>(<argument><expr><name><name>op_expr</name><operator>-&gt;</operator><name>opfuncid</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		</block_content>}</block>
		<case>case <expr><name>T_CaseExpr</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>CaseExpr</name> <modifier>*</modifier></type><name>case_expr</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>CaseExpr</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<comment type="block">/*
			 * Support for implicit equality comparison would require catalog
			 * lookup to find equality operation for the argument data type.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>case_expr</name><operator>-&gt;</operator><name>arg</name></name></expr>)</condition>
			<block>{<block_content>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		</block_content>}</block>
		<case>case <expr><name>T_Param</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Param</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>Param</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>YBCPgFindTypeEntity</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>paramtype</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		</block_content>}</block>
		<case>case <expr><name>T_Const</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Const</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>Const</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<comment type="block">/*
			* Constant value may need to be converted to DocDB format, but
			* DocDB does not support arbitrary types.
			*/</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>YBCPgFindTypeEntity</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>consttype</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>
		</block_content>}</block>
		<case>case <expr><name>T_RelabelType</name></expr>:</case>
		<case>case <expr><name>T_NullTest</name></expr>:</case>
		<case>case <expr><name>T_BoolExpr</name></expr>:</case>
		<case>case <expr><name>T_CaseWhen</name></expr>:</case>
			<break>break;</break>
		<default>default:</default>
			<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></switch>
	<return>return <expr><call><name>expression_tree_walker</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>yb_pushdown_walker</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>params</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * YbCanPushdownExpr
 *
 *	  Determine if the expression is pushable.
 *	  In general, expression tree is pushable if DocDB knows how to execute
 *	  all its nodes, in other words, it should be handeled by the evalExpr()
 *	  function defined in the ybgate_api.c. In addition, external paremeter
 *	  references of supported data types are also pushable, since these
 *	  references are replaced with constants by YbExprInstantiateParams before
 *	  the DocDB request is sent.
 *
 *	  If the params parameter is provided, function also collects column
 *	  references represented by Var nodes in the expression tree. The params
 *	  list may be initially empty (NIL) or already contain some YbExprParamDesc
 *	  entries. That allows to collect column references from multiple
 *	  expressions into single list. The function avoids adding duplicate
 *	  references, however it does not remove duplecates if they are already
 *	  present in the params list.
 *
 *	  To add support for another expression node type it should be added to the
 *	  yb_pushdown_walker where it should check node attributes that may affect
 *	  pushability, and implement evaluation of that node type instance in the
 *	  evalExpr() function.
 */</comment>
<function><type><name>bool</name></type> <name>YbCanPushdownExpr</name><parameter_list>(<parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>pg_expr</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>params</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* respond with false if pushdown disabled in GUC */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>yb_enable_expression_pushdown</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><operator>!</operator><call><name>yb_pushdown_walker</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>pg_expr</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * yb_transactional_walker
 *
 *	  Expression tree walker for the YbIsTransactionalExpr function.
 *	  As of initial version, it may be too optimistic, needs revisit.
 */</comment>
<function><type><name>bool</name></type> <name>yb_transactional_walker</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	<switch>switch <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>T_FuncExpr</name></expr>:</case>
		<block>{<block_content>
			<comment type="block">/*
			 * Built-in functions should be safe. If we learn of functions
			 * that are unsafe we may need a blacklist here.
			 * User defined function may be everything, unless it is immutable
			 * By definition, immutable functions can not access database.
			 * Otherwise safely assume that not immutable function would needs
			 * a distributed transaction.
			 */</comment>
			<decl_stmt><decl><type><name>FuncExpr</name>	   <modifier>*</modifier></type><name>func_expr</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>FuncExpr</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Oid</name></type> 			<name>funcid</name> <init>= <expr><name><name>func_expr</name><operator>-&gt;</operator><name>funcid</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>HeapTuple</name></type>		<name>tuple</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Form_pg_proc</name></type>	<name>pg_proc</name></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>is_builtin_func</name><argument_list>(<argument><expr><name>funcid</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>PROCOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>funcid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for function %u"</literal></expr></argument>, <argument><expr><name>funcid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>pg_proc</name> <operator>=</operator> <operator>(</operator><name>Form_pg_proc</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>pg_proc</name><operator>-&gt;</operator><name>provolatile</name></name> <operator>!=</operator> <name>PROVOLATILE_IMMUTABLE</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block>
		<comment type="block">/*
		 * The list of the expression types below was built by scrolling over
		 * expression_tree_walker function and selecting those looking like they
		 * do suspiciously transactional thing like running a subquery.
		 */</comment>
		<case>case <expr><name>T_NextValueExpr</name></expr>:</case>
		<case>case <expr><name>T_RangeTblRef</name></expr>:</case>
		<case>case <expr><name>T_SubLink</name></expr>:</case>
		<case>case <expr><name>T_SubPlan</name></expr>:</case>
		<case>case <expr><name>T_AlternativeSubPlan</name></expr>:</case>
		<case>case <expr><name>T_Query</name></expr>:</case>
		<case>case <expr><name>T_CommonTableExpr</name></expr>:</case>
		<case>case <expr><name>T_FromExpr</name></expr>:</case>
		<case>case <expr><name>T_JoinExpr</name></expr>:</case>
		<case>case <expr><name>T_AppendRelInfo</name></expr>:</case>
		<case>case <expr><name>T_RangeTblFunction</name></expr>:</case>
		<case>case <expr><name>T_TableSampleClause</name></expr>:</case>
		<case>case <expr><name>T_TableFunc</name></expr>:</case>
			<return>return <expr><name>true</name></expr>;</return>
		<comment type="block">/*
		 * Optimistically assume all other expression types do not
		 * require a distributed transaction.
		 */</comment>
		<default>default:</default>
			<break>break;</break>
	</block_content>}</block></switch>
	<return>return <expr><call><name>expression_tree_walker</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>yb_transactional_walker</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * YbIsTransactionalExpr
 *
 *	  Determine if the expression may need distributed transaction.
 *	  One shard modify table queries (INSERT, UPDATE, DELETE) running in
 *	  autocommit mode may skip starting distributed transactions. Without
 *	  distributed transaction overhead those statements perform much better.
 *	  However, certain expression may need to run a subquery or otherwise
 *	  access multiple nodes transactionally. This function checks if that
 *	  might be the case for given expression, and therefore distributed
 *	  transaction should be used for parent statement.
 *	  Historically the same function was used to determine if an expression
 *	  is pushable or if expression is (not) transactional, out of consideration
 *	  that if expression is simple enough to be pushable, it is not
 *	  transactional. That is generally true, pushable expression are not
 *	  transactional, however there are many not pushable expressions, which are
 *	  not transactional at the same time, so we can still benefit from higher
 *	  performing one shard queries even if they use not pushable expressions.
 *	  Besides, expression pushdown may be turned off with a GUC parameter.
 *	  If this function misdetermine transactional expression as not
 *	  transactional distributed transaction may be forced by surrounding the
 *	  statement with BEGIN; ... COMMIT;
 *	  Opposite misdetermination causes performance overhead only.
 */</comment>
<function><type><name>bool</name></type> <name>YbIsTransactionalExpr</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>pg_expr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>yb_transactional_walker</name><argument_list>(<argument><expr><name>pg_expr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * YBCNewEvalExprCall
 *
 *	  Serialize the Postgres expression tree and associate it with the
 *	  DocDB statement. Caller is supposed to ensure that expression is pushable
 *	  so DocDB can handle it.
 */</comment>
<function><type><name>YBCPgExpr</name></type> <name>YBCNewEvalExprCall</name><parameter_list>(<parameter><decl><type><name>YBCPgStatement</name></type> <name>ybc_stmt</name></decl></parameter>, <parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>pg_expr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>YBCPgExpr</name></type> <name>ybc_expr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>YBCPgCollationInfo</name></type> <name>collation_info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>YBCPgTypeEntity</name> <modifier>*</modifier></type><name>type_ent</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>type_ent</name> <operator>=</operator> <call><name>YbDataTypeFromOidMod</name><argument_list>(<argument><expr><name>InvalidAttrNumber</name></expr></argument>,
									<argument><expr><call><name>exprType</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>pg_expr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>YBGetCollationInfo</name><argument_list>(<argument><expr><call><name>exprCollation</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>pg_expr</name></expr></argument>)</argument_list></call></expr></argument>,
					   <argument><expr><name>type_ent</name></expr></argument>,
					   <argument><expr><literal type="number">0</literal></expr></argument> <comment type="block">/* Datum */</comment>,
					   <argument><expr><name>true</name></expr></argument> <comment type="block">/* is_null */</comment>,
					   <argument><expr><operator>&amp;</operator><name>collation_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HandleYBStatus</name><argument_list>(<argument><expr><call><name>YBCPgNewOperator</name><argument_list>(<argument><expr><name>ybc_stmt</name></expr></argument>,
									<argument><expr><literal type="string">"eval_expr_call"</literal></expr></argument>,
									<argument><expr><name>type_ent</name></expr></argument>,
									<argument><expr><name><name>collation_info</name><operator>.</operator><name>collate_is_valid_non_c</name></name></expr></argument>,
									<argument><expr><operator>&amp;</operator><name>ybc_expr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Datum</name></type> <name>expr_datum</name> <init>= <expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><call><name>nodeToString</name><argument_list>(<argument><expr><name>pg_expr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>YBCPgExpr</name></type> <name>expr</name> <init>= <expr><call><name>YBCNewConstant</name><argument_list>(<argument><expr><name>ybc_stmt</name></expr></argument>, <argument><expr><name>CSTRINGOID</name></expr></argument>, <argument><expr><name>C_COLLATION_OID</name></expr></argument>,
									<argument><expr><name>expr_datum</name></expr></argument> , <comment type="block">/* IsNull */</comment> <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>HandleYBStatus</name><argument_list>(<argument><expr><call><name>YBCPgOperatorAppendArg</name><argument_list>(<argument><expr><name>ybc_expr</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ybc_expr</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ------------------------------------------------------------------------- */</comment>
<comment type="block">/*  Execution output parameter from Yugabyte */</comment>
<function><type><name>YbPgExecOutParam</name> <modifier>*</modifier></type><name>YbCreateExecOutParam</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>YbPgExecOutParam</name> <modifier>*</modifier></type><name>param</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>YbPgExecOutParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>bfoutput</name></name> <operator>=</operator> <call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Not yet used */</comment>
	<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>status_code</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<return>return <expr><name>param</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>YbWriteExecOutParam</name><parameter_list>(<parameter><decl><type><name>YbPgExecOutParam</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>YbcPgExecOutParamValue</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>bfoutput</name></name></expr></argument>, <argument><expr><name><name>value</name><operator>-&gt;</operator><name>bfoutput</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Not yet used */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>status</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><name><name>value</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>status_code</name></name> <operator>=</operator> <name><name>value</name><operator>-&gt;</operator><name>status_code</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
