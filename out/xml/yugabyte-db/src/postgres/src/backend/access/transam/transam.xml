<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/backend/access/transam/transam.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * transam.c
 *	  postgres transaction (commit) log interface routines
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/access/transam/transam.c
 *
 * NOTES
 *	  This file contains the high level access-method interface to the
 *	  transaction system.
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/clog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/subtrans.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/transam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/snapmgr.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Single-item cache for results of TransactionLogFetch.  It's worth having
 * such a cache because we frequently find ourselves repeatedly checking the
 * same XID, for example when scanning a table just after a bulk insert,
 * update, or delete.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>TransactionId</name></type> <name>cachedFetchXid</name> <init>= <expr><name>InvalidTransactionId</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>XidStatus</name></type> <name>cachedFetchXidStatus</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>XLogRecPtr</name></type> <name>cachedCommitLSN</name></decl>;</decl_stmt>

<comment type="block">/* Local functions */</comment>
<function_decl><type><specifier>static</specifier> <name>XidStatus</name></type> <name>TransactionLogFetch</name><parameter_list>(<parameter><decl><type><name>TransactionId</name></type> <name>transactionId</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/* ----------------------------------------------------------------
 *		Postgres log access method interface
 *
 *		TransactionLogFetch
 * ----------------------------------------------------------------
 */</comment>

<comment type="block">/*
 * TransactionLogFetch --- fetch commit status of specified transaction id
 */</comment>
<function><type><specifier>static</specifier> <name>XidStatus</name></type>
<name>TransactionLogFetch</name><parameter_list>(<parameter><decl><type><name>TransactionId</name></type> <name>transactionId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>XidStatus</name></type>	<name>xidstatus</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>xidlsn</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Before going to the commit log manager, check our single item cache to
	 * see if we didn't just check the transaction status a moment ago.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>TransactionIdEquals</name><argument_list>(<argument><expr><name>transactionId</name></expr></argument>, <argument><expr><name>cachedFetchXid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>cachedFetchXidStatus</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Also, check to see if the transaction ID is a permanent one.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TransactionIdIsNormal</name><argument_list>(<argument><expr><name>transactionId</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>TransactionIdEquals</name><argument_list>(<argument><expr><name>transactionId</name></expr></argument>, <argument><expr><name>BootstrapTransactionId</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>TRANSACTION_STATUS_COMMITTED</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>TransactionIdEquals</name><argument_list>(<argument><expr><name>transactionId</name></expr></argument>, <argument><expr><name>FrozenTransactionId</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>TRANSACTION_STATUS_COMMITTED</name></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><name>TRANSACTION_STATUS_ABORTED</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Get the transaction status.
	 */</comment>
	<expr_stmt><expr><name>xidstatus</name> <operator>=</operator> <call><name>TransactionIdGetStatus</name><argument_list>(<argument><expr><name>transactionId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xidlsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Cache it, but DO NOT cache status for unfinished or sub-committed
	 * transactions!  We only cache status that is guaranteed not to change.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>xidstatus</name> <operator>!=</operator> <name>TRANSACTION_STATUS_IN_PROGRESS</name> <operator>&amp;&amp;</operator>
		<name>xidstatus</name> <operator>!=</operator> <name>TRANSACTION_STATUS_SUB_COMMITTED</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>cachedFetchXid</name> <operator>=</operator> <name>transactionId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cachedFetchXidStatus</name> <operator>=</operator> <name>xidstatus</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cachedCommitLSN</name> <operator>=</operator> <name>xidlsn</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>xidstatus</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ----------------------------------------------------------------
 *						Interface functions
 *
 *		TransactionIdDidCommit
 *		TransactionIdDidAbort
 *		========
 *		   these functions test the transaction status of
 *		   a specified transaction id.
 *
 *		TransactionIdCommitTree
 *		TransactionIdAsyncCommitTree
 *		TransactionIdAbortTree
 *		========
 *		   these functions set the transaction status of the specified
 *		   transaction tree.
 *
 * See also TransactionIdIsInProgress, which once was in this module
 * but now lives in procarray.c.
 * ----------------------------------------------------------------
 */</comment>

<comment type="block">/*
 * TransactionIdDidCommit
 *		True iff transaction associated with the identifier did commit.
 *
 * Note:
 *		Assumes transaction identifier is valid and exists in clog.
 */</comment>
<function><type><name>bool</name></type>							<comment type="block">/* true if given transaction committed */</comment>
<name>TransactionIdDidCommit</name><parameter_list>(<parameter><decl><type><name>TransactionId</name></type> <name>transactionId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>XidStatus</name></type>	<name>xidstatus</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>xidstatus</name> <operator>=</operator> <call><name>TransactionLogFetch</name><argument_list>(<argument><expr><name>transactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If it's marked committed, it's committed.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>xidstatus</name> <operator>==</operator> <name>TRANSACTION_STATUS_COMMITTED</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * If it's marked subcommitted, we have to check the parent recursively.
	 * However, if it's older than TransactionXmin, we can't look at
	 * pg_subtrans; instead assume that the parent crashed without cleaning up
	 * its children.
	 *
	 * Originally we Assert'ed that the result of SubTransGetParent was not
	 * zero. However with the introduction of prepared transactions, there can
	 * be a window just after database startup where we do not have complete
	 * knowledge in pg_subtrans of the transactions after TransactionXmin.
	 * StartupSUBTRANS() has ensured that any missing information will be
	 * zeroed.  Since this case should not happen under normal conditions, it
	 * seems reasonable to emit a WARNING for it.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>xidstatus</name> <operator>==</operator> <name>TRANSACTION_STATUS_SUB_COMMITTED</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>TransactionId</name></type> <name>parentXid</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>TransactionIdPrecedes</name><argument_list>(<argument><expr><name>transactionId</name></expr></argument>, <argument><expr><name>TransactionXmin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>parentXid</name> <operator>=</operator> <call><name>SubTransGetParent</name><argument_list>(<argument><expr><name>transactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TransactionIdIsValid</name><argument_list>(<argument><expr><name>parentXid</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"no pg_subtrans entry for subcommitted XID %u"</literal></expr></argument>,
				 <argument><expr><name>transactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><call><name>TransactionIdDidCommit</name><argument_list>(<argument><expr><name>parentXid</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * It's not committed.
	 */</comment>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * TransactionIdDidAbort
 *		True iff transaction associated with the identifier did abort.
 *
 * Note:
 *		Assumes transaction identifier is valid and exists in clog.
 */</comment>
<function><type><name>bool</name></type>							<comment type="block">/* true if given transaction aborted */</comment>
<name>TransactionIdDidAbort</name><parameter_list>(<parameter><decl><type><name>TransactionId</name></type> <name>transactionId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>XidStatus</name></type>	<name>xidstatus</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>xidstatus</name> <operator>=</operator> <call><name>TransactionLogFetch</name><argument_list>(<argument><expr><name>transactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If it's marked aborted, it's aborted.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>xidstatus</name> <operator>==</operator> <name>TRANSACTION_STATUS_ABORTED</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * If it's marked subcommitted, we have to check the parent recursively.
	 * However, if it's older than TransactionXmin, we can't look at
	 * pg_subtrans; instead assume that the parent crashed without cleaning up
	 * its children.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>xidstatus</name> <operator>==</operator> <name>TRANSACTION_STATUS_SUB_COMMITTED</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>TransactionId</name></type> <name>parentXid</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>TransactionIdPrecedes</name><argument_list>(<argument><expr><name>transactionId</name></expr></argument>, <argument><expr><name>TransactionXmin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>parentXid</name> <operator>=</operator> <call><name>SubTransGetParent</name><argument_list>(<argument><expr><name>transactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TransactionIdIsValid</name><argument_list>(<argument><expr><name>parentXid</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* see notes in TransactionIdDidCommit */</comment>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"no pg_subtrans entry for subcommitted XID %u"</literal></expr></argument>,
				 <argument><expr><name>transactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><call><name>TransactionIdDidAbort</name><argument_list>(<argument><expr><name>parentXid</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * It's not aborted.
	 */</comment>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * TransactionIdIsKnownCompleted
 *		True iff transaction associated with the identifier is currently
 *		known to have either committed or aborted.
 *
 * This does NOT look into pg_xact but merely probes our local cache
 * (and so it's not named TransactionIdDidComplete, which would be the
 * appropriate name for a function that worked that way).  The intended
 * use is just to short-circuit TransactionIdIsInProgress calls when doing
 * repeated tqual.c checks for the same XID.  If this isn't extremely fast
 * then it will be counterproductive.
 *
 * Note:
 *		Assumes transaction identifier is valid.
 */</comment>
<function><type><name>bool</name></type>
<name>TransactionIdIsKnownCompleted</name><parameter_list>(<parameter><decl><type><name>TransactionId</name></type> <name>transactionId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>TransactionIdEquals</name><argument_list>(<argument><expr><name>transactionId</name></expr></argument>, <argument><expr><name>cachedFetchXid</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* If it's in the cache at all, it must be completed. */</comment>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * TransactionIdCommitTree
 *		Marks the given transaction and children as committed
 *
 * "xid" is a toplevel transaction commit, and the xids array contains its
 * committed subtransactions.
 *
 * This commit operation is not guaranteed to be atomic, but if not, subxids
 * are correctly marked subcommit first.
 */</comment>
<function><type><name>void</name></type>
<name>TransactionIdCommitTree</name><parameter_list>(<parameter><decl><type><name>TransactionId</name></type> <name>xid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nxids</name></decl></parameter>, <parameter><decl><type><name>TransactionId</name> <modifier>*</modifier></type><name>xids</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>TransactionIdSetTreeStatus</name><argument_list>(<argument><expr><name>xid</name></expr></argument>, <argument><expr><name>nxids</name></expr></argument>, <argument><expr><name>xids</name></expr></argument>,
							   <argument><expr><name>TRANSACTION_STATUS_COMMITTED</name></expr></argument>,
							   <argument><expr><name>InvalidXLogRecPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * TransactionIdAsyncCommitTree
 *		Same as above, but for async commits.  The commit record LSN is needed.
 */</comment>
<function><type><name>void</name></type>
<name>TransactionIdAsyncCommitTree</name><parameter_list>(<parameter><decl><type><name>TransactionId</name></type> <name>xid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nxids</name></decl></parameter>, <parameter><decl><type><name>TransactionId</name> <modifier>*</modifier></type><name>xids</name></decl></parameter>,
							 <parameter><decl><type><name>XLogRecPtr</name></type> <name>lsn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>TransactionIdSetTreeStatus</name><argument_list>(<argument><expr><name>xid</name></expr></argument>, <argument><expr><name>nxids</name></expr></argument>, <argument><expr><name>xids</name></expr></argument>,
							   <argument><expr><name>TRANSACTION_STATUS_COMMITTED</name></expr></argument>, <argument><expr><name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * TransactionIdAbortTree
 *		Marks the given transaction and children as aborted.
 *
 * "xid" is a toplevel transaction commit, and the xids array contains its
 * committed subtransactions.
 *
 * We don't need to worry about the non-atomic behavior, since any onlookers
 * will consider all the xacts as not-yet-committed anyway.
 */</comment>
<function><type><name>void</name></type>
<name>TransactionIdAbortTree</name><parameter_list>(<parameter><decl><type><name>TransactionId</name></type> <name>xid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nxids</name></decl></parameter>, <parameter><decl><type><name>TransactionId</name> <modifier>*</modifier></type><name>xids</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>TransactionIdSetTreeStatus</name><argument_list>(<argument><expr><name>xid</name></expr></argument>, <argument><expr><name>nxids</name></expr></argument>, <argument><expr><name>xids</name></expr></argument>,
							   <argument><expr><name>TRANSACTION_STATUS_ABORTED</name></expr></argument>, <argument><expr><name>InvalidXLogRecPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * TransactionIdPrecedes --- is id1 logically &lt; id2?
 */</comment>
<function><type><name>bool</name></type>
<name>TransactionIdPrecedes</name><parameter_list>(<parameter><decl><type><name>TransactionId</name></type> <name>id1</name></decl></parameter>, <parameter><decl><type><name>TransactionId</name></type> <name>id2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * If either ID is a permanent XID then we can just do unsigned
	 * comparison.  If both are normal, do a modulo-2^32 comparison.
	 */</comment>
	<decl_stmt><decl><type><name>int32</name></type>		<name>diff</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TransactionIdIsNormal</name><argument_list>(<argument><expr><name>id1</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>TransactionIdIsNormal</name><argument_list>(<argument><expr><name>id2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>id1</name> <operator>&lt;</operator> <name>id2</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><name>int32</name><operator>)</operator> <operator>(</operator><name>id1</name> <operator>-</operator> <name>id2</name><operator>)</operator></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>diff</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * TransactionIdPrecedesOrEquals --- is id1 logically &lt;= id2?
 */</comment>
<function><type><name>bool</name></type>
<name>TransactionIdPrecedesOrEquals</name><parameter_list>(<parameter><decl><type><name>TransactionId</name></type> <name>id1</name></decl></parameter>, <parameter><decl><type><name>TransactionId</name></type> <name>id2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type>		<name>diff</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TransactionIdIsNormal</name><argument_list>(<argument><expr><name>id1</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>TransactionIdIsNormal</name><argument_list>(<argument><expr><name>id2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>id1</name> <operator>&lt;=</operator> <name>id2</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><name>int32</name><operator>)</operator> <operator>(</operator><name>id1</name> <operator>-</operator> <name>id2</name><operator>)</operator></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>diff</name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * TransactionIdFollows --- is id1 logically &gt; id2?
 */</comment>
<function><type><name>bool</name></type>
<name>TransactionIdFollows</name><parameter_list>(<parameter><decl><type><name>TransactionId</name></type> <name>id1</name></decl></parameter>, <parameter><decl><type><name>TransactionId</name></type> <name>id2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type>		<name>diff</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TransactionIdIsNormal</name><argument_list>(<argument><expr><name>id1</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>TransactionIdIsNormal</name><argument_list>(<argument><expr><name>id2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>id1</name> <operator>&gt;</operator> <name>id2</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><name>int32</name><operator>)</operator> <operator>(</operator><name>id1</name> <operator>-</operator> <name>id2</name><operator>)</operator></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>diff</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * TransactionIdFollowsOrEquals --- is id1 logically &gt;= id2?
 */</comment>
<function><type><name>bool</name></type>
<name>TransactionIdFollowsOrEquals</name><parameter_list>(<parameter><decl><type><name>TransactionId</name></type> <name>id1</name></decl></parameter>, <parameter><decl><type><name>TransactionId</name></type> <name>id2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type>		<name>diff</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TransactionIdIsNormal</name><argument_list>(<argument><expr><name>id1</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>TransactionIdIsNormal</name><argument_list>(<argument><expr><name>id2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>id1</name> <operator>&gt;=</operator> <name>id2</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><name>int32</name><operator>)</operator> <operator>(</operator><name>id1</name> <operator>-</operator> <name>id2</name><operator>)</operator></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>diff</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * TransactionIdLatest --- get latest XID among a main xact and its children
 */</comment>
<function><type><name>TransactionId</name></type>
<name>TransactionIdLatest</name><parameter_list>(<parameter><decl><type><name>TransactionId</name></type> <name>mainxid</name></decl></parameter>,
					<parameter><decl><type><name>int</name></type> <name>nxids</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TransactionId</name> <modifier>*</modifier></type><name>xids</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TransactionId</name></type> <name>result</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * In practice it is highly likely that the xids[] array is sorted, and so
	 * we could save some cycles by just taking the last child XID, but this
	 * probably isn't so performance-critical that it's worth depending on
	 * that assumption.  But just to show we're not totally stupid, scan the
	 * array back-to-front to avoid useless assignments.
	 */</comment>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <name>mainxid</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>--</operator><name>nxids</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>TransactionIdPrecedes</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>xids</name><index>[<expr><name>nxids</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>xids</name><index>[<expr><name>nxids</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * TransactionIdGetCommitLSN
 *
 * This function returns an LSN that is late enough to be able
 * to guarantee that if we flush up to the LSN returned then we
 * will have flushed the transaction's commit record to disk.
 *
 * The result is not necessarily the exact LSN of the transaction's
 * commit record!  For example, for long-past transactions (those whose
 * clog pages already migrated to disk), we'll return InvalidXLogRecPtr.
 * Also, because we group transactions on the same clog page to conserve
 * storage, we might return the LSN of a later transaction that falls into
 * the same group.
 */</comment>
<function><type><name>XLogRecPtr</name></type>
<name>TransactionIdGetCommitLSN</name><parameter_list>(<parameter><decl><type><name>TransactionId</name></type> <name>xid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>result</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Currently, all uses of this function are for xids that were just
	 * reported to be committed by TransactionLogFetch, so we expect that
	 * checking TransactionLogFetch's cache will usually succeed and avoid an
	 * extra trip to shared memory.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>TransactionIdEquals</name><argument_list>(<argument><expr><name>xid</name></expr></argument>, <argument><expr><name>cachedFetchXid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>cachedCommitLSN</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Special XIDs are always known committed */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TransactionIdIsNormal</name><argument_list>(<argument><expr><name>xid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>InvalidXLogRecPtr</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Get the transaction status.
	 */</comment>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>TransactionIdGetStatus</name><argument_list>(<argument><expr><name>xid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
</unit>
