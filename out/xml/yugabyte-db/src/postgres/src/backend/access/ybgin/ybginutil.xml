<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/backend/access/ybgin/ybginutil.c"><comment type="block">/*--------------------------------------------------------------------------
 *
 * ybginutil.c
 *	  Utility routines for the Yugabyte inverted index access method.
 *
 * Copyright (c) YugaByte, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * IDENTIFICATION
 *			src/backend/access/ybgin/ybginutil.c
 *--------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/gin_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/reloptions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"c.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/relation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/nodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/index_selfuncs.h"</cpp:file></cpp:include>

<function><type><name>void</name></type>
<name>ybgincostestimate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>PlannerInfo</name></name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>IndexPath</name></name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
				  <parameter><decl><type><name>double</name></type> <name>loop_count</name></decl></parameter>, <parameter><decl><type><name>Cost</name> <modifier>*</modifier></type><name>indexStartupCost</name></decl></parameter>,
				  <parameter><decl><type><name>Cost</name> <modifier>*</modifier></type><name>indexTotalCost</name></decl></parameter>, <parameter><decl><type><name>Selectivity</name> <modifier>*</modifier></type><name>indexSelectivity</name></decl></parameter>,
				  <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>indexCorrelation</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>indexPages</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>gincostestimate</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>loop_count</name></expr></argument>, <argument><expr><name>indexStartupCost</name></expr></argument>, <argument><expr><name>indexTotalCost</name></expr></argument>,
					<argument><expr><name>indexSelectivity</name></expr></argument>, <argument><expr><name>indexCorrelation</name></expr></argument>, <argument><expr><name>indexPages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bytea</name> <modifier>*</modifier></type>
<name>ybginoptions</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>reloptions</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>validate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>relopt_value</name> <modifier>*</modifier></type><name>options</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>numoptions</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Rather than creating a new RELOPT_KIND_YBGIN, reuse RELOPT_KIND_GIN and
	 * disallow the options that aren't supported.  The downside is that most
	 * gin options will probably apply to only one of (pg)gin or ybgin.  The
	 * upside is that the unsupported options can be ignored to be compatible
	 * with existing scripts without needing modification.
	 *
	 * Since, currently, we disallow any gin reloptions being set, we should be
	 * able to change our mind later and introduce a RELOPT_KIND_YBGIN if
	 * desired.
	 *
	 * TODO(jason): ignore and clear, rather than error, on unsupported options
	 *
	 * To automatically disallow new options in case upstream postgres creates
	 * them and we import them,
	 * 1. if the relopt kind is not gin, allow
	 * 2. allow specific gin relopts (currently none)
	 * 3. disallow the rest
	 */</comment>
	<expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>parseRelOptions</name><argument_list>(<argument><expr><name>reloptions</name></expr></argument>, <argument><expr><name>validate</name></expr></argument>, <argument><expr><name>RELOPT_KIND_GIN</name></expr></argument>,
							  <argument><expr><operator>&amp;</operator><name>numoptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numoptions</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>isset</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>gen</name><operator>-&gt;</operator><name>kinds</name></name> <operator>!=</operator> <name>RELOPT_KIND_GIN</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"ybgin indexes do not support reloption %s"</literal></expr></argument>,
						<argument><expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>gen</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ybginvalidate</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>opclassoid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Calling ginvalidate is probably right.  It's hard to tell since it
	 * doesn't work in the first place (issue #8949).
	 *
	 * TODO(jason): when it starts working, refactor to use "ybgin" instead of
	 * "gin" for error messages (probably should create a layer to accept this
	 * string and pass it down).
	 */</comment>
	<return>return <expr><call><name>ginvalidate</name><argument_list>(<argument><expr><name>opclassoid</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Given gin null category, return human-readable string.
 */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>ybginNullCategoryToString</name><parameter_list>(<parameter><decl><type><name>GinNullCategory</name></type> <name>category</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>category</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>GIN_CAT_NORM_KEY</name></expr>:</case>
			<return>return <expr><literal type="string">"normal"</literal></expr>;</return>
		<case>case <expr><name>GIN_CAT_NULL_KEY</name></expr>:</case>
			<return>return <expr><literal type="string">"null-key"</literal></expr>;</return>
		<case>case <expr><name>GIN_CAT_EMPTY_ITEM</name></expr>:</case>
			<return>return <expr><literal type="string">"empty-item"</literal></expr>;</return>
		<case>case <expr><name>GIN_CAT_NULL_ITEM</name></expr>:</case>
			<return>return <expr><literal type="string">"null-item"</literal></expr>;</return>
		<case>case <expr><name>GIN_CAT_EMPTY_QUERY</name></expr>:</case>
			<return>return <expr><literal type="string">"empty-query"</literal></expr>;</return>
		<default>default:</default>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unrecognized null category: %d"</literal></expr></argument>,
							<argument><expr><name>category</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
 * Given gin search mode, return human-readable string.
 */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>ybginSearchModeToString</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>searchMode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>searchMode</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>GIN_SEARCH_MODE_DEFAULT</name></expr>:</case>
			<return>return <expr><literal type="string">"default"</literal></expr>;</return>
		<case>case <expr><name>GIN_SEARCH_MODE_INCLUDE_EMPTY</name></expr>:</case>
			<return>return <expr><literal type="string">"include-empty"</literal></expr>;</return>
		<case>case <expr><name>GIN_SEARCH_MODE_ALL</name></expr>:</case>
			<return>return <expr><literal type="string">"all"</literal></expr>;</return>
		<case>case <expr><name>GIN_SEARCH_MODE_EVERYTHING</name></expr>:</case>
			<return>return <expr><literal type="string">"everything"</literal></expr>;</return>
		<default>default:</default>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unrecognized search mode: %d"</literal></expr></argument>,
							<argument><expr><name>searchMode</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
</block_content>}</block></function>
</unit>
