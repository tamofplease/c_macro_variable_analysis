<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/backend/access/brin/brin_inclusion.c"><comment type="block">/*
 * brin_inclusion.c
 *		Implementation of inclusion opclasses for BRIN
 *
 * This module provides framework BRIN support functions for the "inclusion"
 * operator classes.  A few SQL-level support functions are also required for
 * each opclass.
 *
 * The "inclusion" BRIN strategy is useful for types that support R-Tree
 * operations.  This implementation is a straight mapping of those operations
 * to the block-range nature of BRIN, with two exceptions: (a) we explicitly
 * support "empty" elements: at least with range types, we need to consider
 * emptiness separately from regular R-Tree strategies; and (b) we need to
 * consider "unmergeable" elements, that is, a set of elements for whose union
 * no representation exists.  The only case where that happens as of this
 * writing is the INET type, where IPv6 values cannot be merged with IPv4
 * values.
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *	  src/backend/access/brin/brin_inclusion.c
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/brin_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/brin_tuple.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/genam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/skey.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_amop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/datum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>


<comment type="block">/*
 * Additional SQL level support functions
 *
 * Procedure numbers must not use values reserved for BRIN itself; see
 * brin_internal.h.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>		<cpp:macro><name>INCLUSION_MAX_PROCNUMS</name></cpp:macro>	<cpp:value>4</cpp:value></cpp:define>	<comment type="block">/* maximum support procs we need */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>		<cpp:macro><name>PROCNUM_MERGE</name></cpp:macro>			<cpp:value>11</cpp:value></cpp:define>	<comment type="block">/* required */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>		<cpp:macro><name>PROCNUM_MERGEABLE</name></cpp:macro>		<cpp:value>12</cpp:value></cpp:define>	<comment type="block">/* optional */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>		<cpp:macro><name>PROCNUM_CONTAINS</name></cpp:macro>		<cpp:value>13</cpp:value></cpp:define>	<comment type="block">/* optional */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>		<cpp:macro><name>PROCNUM_EMPTY</name></cpp:macro>			<cpp:value>14</cpp:value></cpp:define>	<comment type="block">/* optional */</comment>


<comment type="block">/*
 * Subtract this from procnum to obtain index in InclusionOpaque arrays
 * (Must be equal to minimum of private procnums).
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>		<cpp:macro><name>PROCNUM_BASE</name></cpp:macro>			<cpp:value>11</cpp:value></cpp:define>

<comment type="block">/*-
 * The values stored in the bv_values arrays correspond to:
 *
 * INCLUSION_UNION
 *		the union of the values in the block range
 * INCLUSION_UNMERGEABLE
 *		whether the values in the block range cannot be merged
 *		(e.g. an IPv6 address amidst IPv4 addresses)
 * INCLUSION_CONTAINS_EMPTY
 *		whether an empty value is present in any tuple
 *		in the block range
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCLUSION_UNION</name></cpp:macro>				<cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCLUSION_UNMERGEABLE</name></cpp:macro>		<cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCLUSION_CONTAINS_EMPTY</name></cpp:macro>	<cpp:value>2</cpp:value></cpp:define>


<typedef>typedef <type><struct>struct <name>InclusionOpaque</name>
<block>{
	<decl_stmt><decl><type><name>FmgrInfo</name></type>	<name><name>extra_procinfos</name><index>[<expr><name>INCLUSION_MAX_PROCNUMS</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name><name>extra_proc_missing</name><index>[<expr><name>INCLUSION_MAX_PROCNUMS</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>cached_subtype</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FmgrInfo</name></type>	<name><name>strategy_procinfos</name><index>[<expr><name>RTMaxStrategyNumber</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>InclusionOpaque</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>FmgrInfo</name> <modifier>*</modifier></type><name>inclusion_get_procinfo</name><parameter_list>(<parameter><decl><type><name>BrinDesc</name> <modifier>*</modifier></type><name>bdesc</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>attno</name></decl></parameter>,
					   <parameter><decl><type><name>uint16</name></type> <name>procnum</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>FmgrInfo</name> <modifier>*</modifier></type><name>inclusion_get_strategy_procinfo</name><parameter_list>(<parameter><decl><type><name>BrinDesc</name> <modifier>*</modifier></type><name>bdesc</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>attno</name></decl></parameter>,
								<parameter><decl><type><name>Oid</name></type> <name>subtype</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>strategynum</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * BRIN inclusion OpcInfo function
 */</comment>
<function><type><name>Datum</name></type>
<name>brin_inclusion_opcinfo</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>typoid</name> <init>= <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BrinOpcInfo</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TypeCacheEntry</name> <modifier>*</modifier></type><name>bool_typcache</name> <init>= <expr><call><name>lookup_type_cache</name><argument_list>(<argument><expr><name>BOOLOID</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * All members of opaque are initialized lazily; both procinfo arrays
	 * start out as non-initialized by having fn_oid be InvalidOid, and
	 * "missing" to false, by zeroing here.  strategy_procinfos elements can
	 * be invalidated when cached_subtype changes by zeroing fn_oid.
	 * extra_procinfo entries are never invalidated, but if a lookup fails
	 * (which is expected), extra_proc_missing is set to true, indicating not
	 * to look it up again.
	 */</comment>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><call><name>MAXALIGN</name><argument_list>(<argument><expr><call><name>SizeofBrinOpcInfo</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>InclusionOpaque</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>oi_nstored</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>oi_opaque</name></name> <operator>=</operator> <operator>(</operator><name>InclusionOpaque</name> <operator>*</operator><operator>)</operator>
		<call><name>MAXALIGN</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>result</name> <operator>+</operator> <call><name>SizeofBrinOpcInfo</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* the union */</comment>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>oi_typcache</name><index>[<expr><name>INCLUSION_UNION</name></expr>]</index></name> <operator>=</operator>
		<call><name>lookup_type_cache</name><argument_list>(<argument><expr><name>typoid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* includes elements that are not mergeable */</comment>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>oi_typcache</name><index>[<expr><name>INCLUSION_UNMERGEABLE</name></expr>]</index></name> <operator>=</operator> <name>bool_typcache</name></expr>;</expr_stmt>

	<comment type="block">/* includes the empty element */</comment>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>oi_typcache</name><index>[<expr><name>INCLUSION_CONTAINS_EMPTY</name></expr>]</index></name> <operator>=</operator> <name>bool_typcache</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * BRIN inclusion add value function
 *
 * Examine the given index tuple (which contains partial status of a certain
 * page range) by comparing it to the given value that comes from another heap
 * tuple.  If the new value is outside the union specified by the existing
 * tuple values, update the index tuple and return true.  Otherwise, return
 * false and do not modify in this case.
 */</comment>
<function><type><name>Datum</name></type>
<name>brin_inclusion_add_value</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BrinDesc</name>   <modifier>*</modifier></type><name>bdesc</name> <init>= <expr><operator>(</operator><name>BrinDesc</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BrinValues</name> <modifier>*</modifier></type><name>column</name> <init>= <expr><operator>(</operator><name>BrinValues</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>newval</name> <init>= <expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>isnull</name> <init>= <expr><call><name>PG_GETARG_BOOL</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>colloid</name> <init>= <expr><call><name>PG_GET_COLLATION</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FmgrInfo</name>   <modifier>*</modifier></type><name>finfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>new</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AttrNumber</name></type>	<name>attno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>attr</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * If the new value is null, we record that we saw it if it's the first
	 * one; otherwise, there's nothing to do.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>column</name><operator>-&gt;</operator><name>bv_hasnulls</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>column</name><operator>-&gt;</operator><name>bv_hasnulls</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>attno</name> <operator>=</operator> <name><name>column</name><operator>-&gt;</operator><name>bv_attno</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>TupleDescAttr</name><argument_list>(<argument><expr><name><name>bdesc</name><operator>-&gt;</operator><name>bd_tupdesc</name></name></expr></argument>, <argument><expr><name>attno</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If the recorded value is null, copy the new value (which we know to be
	 * not null), and we're almost done.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>column</name><operator>-&gt;</operator><name>bv_allnulls</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>column</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><name>INCLUSION_UNION</name></expr>]</index></name> <operator>=</operator>
			<call><name>datumCopy</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>attbyval</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>attlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>column</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><name>INCLUSION_UNMERGEABLE</name></expr>]</index></name> <operator>=</operator> <call><name>BoolGetDatum</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>column</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><name>INCLUSION_CONTAINS_EMPTY</name></expr>]</index></name> <operator>=</operator> <call><name>BoolGetDatum</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>column</name><operator>-&gt;</operator><name>bv_allnulls</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>new</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * No need for further processing if the block range is marked as
	 * containing unmergeable values.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>DatumGetBool</name><argument_list>(<argument><expr><name><name>column</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><name>INCLUSION_UNMERGEABLE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * If the opclass supports the concept of empty values, test the passed
	 * new value for emptiness; if it returns true, we need to set the
	 * "contains empty" flag in the element (unless already set).
	 */</comment>
	<expr_stmt><expr><name>finfo</name> <operator>=</operator> <call><name>inclusion_get_procinfo</name><argument_list>(<argument><expr><name>bdesc</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name>PROCNUM_EMPTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>finfo</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>DatumGetBool</name><argument_list>(<argument><expr><call><name>FunctionCall1Coll</name><argument_list>(<argument><expr><name>finfo</name></expr></argument>, <argument><expr><name>colloid</name></expr></argument>, <argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DatumGetBool</name><argument_list>(<argument><expr><name><name>column</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><name>INCLUSION_CONTAINS_EMPTY</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>column</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><name>INCLUSION_CONTAINS_EMPTY</name></expr>]</index></name> <operator>=</operator> <call><name>BoolGetDatum</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>new</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Check if the new value is already contained. */</comment>
	<expr_stmt><expr><name>finfo</name> <operator>=</operator> <call><name>inclusion_get_procinfo</name><argument_list>(<argument><expr><name>bdesc</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name>PROCNUM_CONTAINS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>finfo</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
		<call><name>DatumGetBool</name><argument_list>(<argument><expr><call><name>FunctionCall2Coll</name><argument_list>(<argument><expr><name>finfo</name></expr></argument>, <argument><expr><name>colloid</name></expr></argument>,
									   <argument><expr><name><name>column</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><name>INCLUSION_UNION</name></expr>]</index></name></expr></argument>,
									   <argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Check if the new value is mergeable to the existing union.  If it is
	 * not, mark the value as containing unmergeable elements and get out.
	 *
	 * Note: at this point we could remove the value from the union, since
	 * it's not going to be used any longer.  However, the BRIN framework
	 * doesn't allow for the value not being present.  Improve someday.
	 */</comment>
	<expr_stmt><expr><name>finfo</name> <operator>=</operator> <call><name>inclusion_get_procinfo</name><argument_list>(<argument><expr><name>bdesc</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name>PROCNUM_MERGEABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>finfo</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
		<operator>!</operator><call><name>DatumGetBool</name><argument_list>(<argument><expr><call><name>FunctionCall2Coll</name><argument_list>(<argument><expr><name>finfo</name></expr></argument>, <argument><expr><name>colloid</name></expr></argument>,
										<argument><expr><name><name>column</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><name>INCLUSION_UNION</name></expr>]</index></name></expr></argument>,
										<argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>column</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><name>INCLUSION_UNMERGEABLE</name></expr>]</index></name> <operator>=</operator> <call><name>BoolGetDatum</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Finally, merge the new value to the existing union. */</comment>
	<expr_stmt><expr><name>finfo</name> <operator>=</operator> <call><name>inclusion_get_procinfo</name><argument_list>(<argument><expr><name>bdesc</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name>PROCNUM_MERGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>finfo</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>FunctionCall2Coll</name><argument_list>(<argument><expr><name>finfo</name></expr></argument>, <argument><expr><name>colloid</name></expr></argument>,
							   <argument><expr><name><name>column</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><name>INCLUSION_UNION</name></expr>]</index></name></expr></argument>, <argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>attr</name><operator>-&gt;</operator><name>attbyval</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>column</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><name>INCLUSION_UNION</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>column</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><name>INCLUSION_UNION</name></expr>]</index></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * BRIN inclusion consistent function
 *
 * All of the strategies are optional.
 */</comment>
<function><type><name>Datum</name></type>
<name>brin_inclusion_consistent</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BrinDesc</name>   <modifier>*</modifier></type><name>bdesc</name> <init>= <expr><operator>(</operator><name>BrinDesc</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BrinValues</name> <modifier>*</modifier></type><name>column</name> <init>= <expr><operator>(</operator><name>BrinValues</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScanKey</name></type>		<name>key</name> <init>= <expr><operator>(</operator><name>ScanKey</name><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>colloid</name> <init>= <expr><call><name>PG_GET_COLLATION</name><argument_list>()</argument_list></call></expr></init></decl>,
				<decl><type ref="prev"/><name>subtype</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>unionval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AttrNumber</name></type>	<name>attno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>query</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FmgrInfo</name>   <modifier>*</modifier></type><name>finfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>key</name><operator>-&gt;</operator><name>sk_attno</name></name> <operator>==</operator> <name><name>column</name><operator>-&gt;</operator><name>bv_attno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Handle IS NULL/IS NOT NULL tests. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>sk_flags</name></name> <operator>&amp;</operator> <name>SK_ISNULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>sk_flags</name></name> <operator>&amp;</operator> <name>SK_SEARCHNULL</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>column</name><operator>-&gt;</operator><name>bv_allnulls</name></name> <operator>||</operator> <name><name>column</name><operator>-&gt;</operator><name>bv_hasnulls</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * For IS NOT NULL, we can only skip ranges that are known to have
		 * only nulls.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>sk_flags</name></name> <operator>&amp;</operator> <name>SK_SEARCHNOTNULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><operator>!</operator><name><name>column</name><operator>-&gt;</operator><name>bv_allnulls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * Neither IS NULL nor IS NOT NULL was used; assume all indexable
		 * operators are strict and return false.
		 */</comment>
		<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* If it is all nulls, it cannot possibly be consistent. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>column</name><operator>-&gt;</operator><name>bv_allnulls</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* It has to be checked, if it contains elements that are not mergeable. */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>DatumGetBool</name><argument_list>(<argument><expr><name><name>column</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><name>INCLUSION_UNMERGEABLE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>attno</name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>sk_attno</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>subtype</name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>sk_subtype</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>query</name> <operator>=</operator> <name><name>key</name><operator>-&gt;</operator><name>sk_argument</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>unionval</name> <operator>=</operator> <name><name>column</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><name>INCLUSION_UNION</name></expr>]</index></name></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>sk_strategy</name></name></expr>)</condition>
	<block>{<block_content>
			<comment type="block">/*
			 * Placement strategies
			 *
			 * These are implemented by logically negating the result of the
			 * converse placement operator; for this to work, the converse
			 * operator must be part of the opclass.  An error will be thrown
			 * by inclusion_get_strategy_procinfo() if the required strategy
			 * is not part of the opclass.
			 *
			 * These all return false if either argument is empty, so there is
			 * no need to check for empty elements.
			 */</comment>

		<case>case <expr><name>RTLeftStrategyNumber</name></expr>:</case>
			<expr_stmt><expr><name>finfo</name> <operator>=</operator> <call><name>inclusion_get_strategy_procinfo</name><argument_list>(<argument><expr><name>bdesc</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name>subtype</name></expr></argument>,
													<argument><expr><name>RTOverRightStrategyNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>FunctionCall2Coll</name><argument_list>(<argument><expr><name>finfo</name></expr></argument>, <argument><expr><name>colloid</name></expr></argument>, <argument><expr><name>unionval</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><operator>!</operator><call><name>DatumGetBool</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<case>case <expr><name>RTOverLeftStrategyNumber</name></expr>:</case>
			<expr_stmt><expr><name>finfo</name> <operator>=</operator> <call><name>inclusion_get_strategy_procinfo</name><argument_list>(<argument><expr><name>bdesc</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name>subtype</name></expr></argument>,
													<argument><expr><name>RTRightStrategyNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>FunctionCall2Coll</name><argument_list>(<argument><expr><name>finfo</name></expr></argument>, <argument><expr><name>colloid</name></expr></argument>, <argument><expr><name>unionval</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><operator>!</operator><call><name>DatumGetBool</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<case>case <expr><name>RTOverRightStrategyNumber</name></expr>:</case>
			<expr_stmt><expr><name>finfo</name> <operator>=</operator> <call><name>inclusion_get_strategy_procinfo</name><argument_list>(<argument><expr><name>bdesc</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name>subtype</name></expr></argument>,
													<argument><expr><name>RTLeftStrategyNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>FunctionCall2Coll</name><argument_list>(<argument><expr><name>finfo</name></expr></argument>, <argument><expr><name>colloid</name></expr></argument>, <argument><expr><name>unionval</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><operator>!</operator><call><name>DatumGetBool</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<case>case <expr><name>RTRightStrategyNumber</name></expr>:</case>
			<expr_stmt><expr><name>finfo</name> <operator>=</operator> <call><name>inclusion_get_strategy_procinfo</name><argument_list>(<argument><expr><name>bdesc</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name>subtype</name></expr></argument>,
													<argument><expr><name>RTOverLeftStrategyNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>FunctionCall2Coll</name><argument_list>(<argument><expr><name>finfo</name></expr></argument>, <argument><expr><name>colloid</name></expr></argument>, <argument><expr><name>unionval</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><operator>!</operator><call><name>DatumGetBool</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<case>case <expr><name>RTBelowStrategyNumber</name></expr>:</case>
			<expr_stmt><expr><name>finfo</name> <operator>=</operator> <call><name>inclusion_get_strategy_procinfo</name><argument_list>(<argument><expr><name>bdesc</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name>subtype</name></expr></argument>,
													<argument><expr><name>RTOverAboveStrategyNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>FunctionCall2Coll</name><argument_list>(<argument><expr><name>finfo</name></expr></argument>, <argument><expr><name>colloid</name></expr></argument>, <argument><expr><name>unionval</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><operator>!</operator><call><name>DatumGetBool</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<case>case <expr><name>RTOverBelowStrategyNumber</name></expr>:</case>
			<expr_stmt><expr><name>finfo</name> <operator>=</operator> <call><name>inclusion_get_strategy_procinfo</name><argument_list>(<argument><expr><name>bdesc</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name>subtype</name></expr></argument>,
													<argument><expr><name>RTAboveStrategyNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>FunctionCall2Coll</name><argument_list>(<argument><expr><name>finfo</name></expr></argument>, <argument><expr><name>colloid</name></expr></argument>, <argument><expr><name>unionval</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><operator>!</operator><call><name>DatumGetBool</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<case>case <expr><name>RTOverAboveStrategyNumber</name></expr>:</case>
			<expr_stmt><expr><name>finfo</name> <operator>=</operator> <call><name>inclusion_get_strategy_procinfo</name><argument_list>(<argument><expr><name>bdesc</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name>subtype</name></expr></argument>,
													<argument><expr><name>RTBelowStrategyNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>FunctionCall2Coll</name><argument_list>(<argument><expr><name>finfo</name></expr></argument>, <argument><expr><name>colloid</name></expr></argument>, <argument><expr><name>unionval</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><operator>!</operator><call><name>DatumGetBool</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<case>case <expr><name>RTAboveStrategyNumber</name></expr>:</case>
			<expr_stmt><expr><name>finfo</name> <operator>=</operator> <call><name>inclusion_get_strategy_procinfo</name><argument_list>(<argument><expr><name>bdesc</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name>subtype</name></expr></argument>,
													<argument><expr><name>RTOverBelowStrategyNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>FunctionCall2Coll</name><argument_list>(<argument><expr><name>finfo</name></expr></argument>, <argument><expr><name>colloid</name></expr></argument>, <argument><expr><name>unionval</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><operator>!</operator><call><name>DatumGetBool</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * Overlap and contains strategies
			 *
			 * These strategies are simple enough that we can simply call the
			 * operator and return its result.  Empty elements don't change
			 * the result.
			 */</comment>

		<case>case <expr><name>RTOverlapStrategyNumber</name></expr>:</case>
		<case>case <expr><name>RTContainsStrategyNumber</name></expr>:</case>
		<case>case <expr><name>RTOldContainsStrategyNumber</name></expr>:</case>
		<case>case <expr><name>RTContainsElemStrategyNumber</name></expr>:</case>
		<case>case <expr><name>RTSubStrategyNumber</name></expr>:</case>
		<case>case <expr><name>RTSubEqualStrategyNumber</name></expr>:</case>
			<expr_stmt><expr><name>finfo</name> <operator>=</operator> <call><name>inclusion_get_strategy_procinfo</name><argument_list>(<argument><expr><name>bdesc</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name>subtype</name></expr></argument>,
													<argument><expr><name><name>key</name><operator>-&gt;</operator><name>sk_strategy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>FunctionCall2Coll</name><argument_list>(<argument><expr><name>finfo</name></expr></argument>, <argument><expr><name>colloid</name></expr></argument>, <argument><expr><name>unionval</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * Contained by strategies
			 *
			 * We cannot just call the original operator for the contained by
			 * strategies because some elements can be contained even though
			 * the union is not; instead we use the overlap operator.
			 *
			 * We check for empty elements separately as they are not merged
			 * to the union but contained by everything.
			 */</comment>

		<case>case <expr><name>RTContainedByStrategyNumber</name></expr>:</case>
		<case>case <expr><name>RTOldContainedByStrategyNumber</name></expr>:</case>
		<case>case <expr><name>RTSuperStrategyNumber</name></expr>:</case>
		<case>case <expr><name>RTSuperEqualStrategyNumber</name></expr>:</case>
			<expr_stmt><expr><name>finfo</name> <operator>=</operator> <call><name>inclusion_get_strategy_procinfo</name><argument_list>(<argument><expr><name>bdesc</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name>subtype</name></expr></argument>,
													<argument><expr><name>RTOverlapStrategyNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>FunctionCall2Coll</name><argument_list>(<argument><expr><name>finfo</name></expr></argument>, <argument><expr><name>colloid</name></expr></argument>, <argument><expr><name>unionval</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>DatumGetBool</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><name><name>column</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><name>INCLUSION_CONTAINS_EMPTY</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * Adjacent strategy
			 *
			 * We test for overlap first but to be safe we need to call the
			 * actual adjacent operator also.
			 *
			 * An empty element cannot be adjacent to any other, so there is
			 * no need to check for it.
			 */</comment>

		<case>case <expr><name>RTAdjacentStrategyNumber</name></expr>:</case>
			<expr_stmt><expr><name>finfo</name> <operator>=</operator> <call><name>inclusion_get_strategy_procinfo</name><argument_list>(<argument><expr><name>bdesc</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name>subtype</name></expr></argument>,
													<argument><expr><name>RTOverlapStrategyNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>FunctionCall2Coll</name><argument_list>(<argument><expr><name>finfo</name></expr></argument>, <argument><expr><name>colloid</name></expr></argument>, <argument><expr><name>unionval</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>DatumGetBool</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>finfo</name> <operator>=</operator> <call><name>inclusion_get_strategy_procinfo</name><argument_list>(<argument><expr><name>bdesc</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name>subtype</name></expr></argument>,
													<argument><expr><name>RTAdjacentStrategyNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>FunctionCall2Coll</name><argument_list>(<argument><expr><name>finfo</name></expr></argument>, <argument><expr><name>colloid</name></expr></argument>, <argument><expr><name>unionval</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * Basic comparison strategies
			 *
			 * It is straightforward to support the equality strategies with
			 * the contains operator.  Generally, inequality strategies do not
			 * make much sense for the types which will be used with the
			 * inclusion BRIN family of opclasses, but is possible to
			 * implement them with logical negation of the left-of and
			 * right-of operators.
			 *
			 * NB: These strategies cannot be used with geometric datatypes
			 * that use comparison of areas!  The only exception is the "same"
			 * strategy.
			 *
			 * Empty elements are considered to be less than the others.  We
			 * cannot use the empty support function to check the query is an
			 * empty element, because the query can be another data type than
			 * the empty support function argument.  So we will return true,
			 * if there is a possibility that empty elements will change the
			 * result.
			 */</comment>

		<case>case <expr><name>RTLessStrategyNumber</name></expr>:</case>
		<case>case <expr><name>RTLessEqualStrategyNumber</name></expr>:</case>
			<expr_stmt><expr><name>finfo</name> <operator>=</operator> <call><name>inclusion_get_strategy_procinfo</name><argument_list>(<argument><expr><name>bdesc</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name>subtype</name></expr></argument>,
													<argument><expr><name>RTRightStrategyNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>FunctionCall2Coll</name><argument_list>(<argument><expr><name>finfo</name></expr></argument>, <argument><expr><name>colloid</name></expr></argument>, <argument><expr><name>unionval</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DatumGetBool</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><name><name>column</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><name>INCLUSION_CONTAINS_EMPTY</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<case>case <expr><name>RTSameStrategyNumber</name></expr>:</case>
		<case>case <expr><name>RTEqualStrategyNumber</name></expr>:</case>
			<expr_stmt><expr><name>finfo</name> <operator>=</operator> <call><name>inclusion_get_strategy_procinfo</name><argument_list>(<argument><expr><name>bdesc</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name>subtype</name></expr></argument>,
													<argument><expr><name>RTContainsStrategyNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>FunctionCall2Coll</name><argument_list>(<argument><expr><name>finfo</name></expr></argument>, <argument><expr><name>colloid</name></expr></argument>, <argument><expr><name>unionval</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>DatumGetBool</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><name><name>column</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><name>INCLUSION_CONTAINS_EMPTY</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<case>case <expr><name>RTGreaterEqualStrategyNumber</name></expr>:</case>
			<expr_stmt><expr><name>finfo</name> <operator>=</operator> <call><name>inclusion_get_strategy_procinfo</name><argument_list>(<argument><expr><name>bdesc</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name>subtype</name></expr></argument>,
													<argument><expr><name>RTLeftStrategyNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>FunctionCall2Coll</name><argument_list>(<argument><expr><name>finfo</name></expr></argument>, <argument><expr><name>colloid</name></expr></argument>, <argument><expr><name>unionval</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DatumGetBool</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><name><name>column</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><name>INCLUSION_CONTAINS_EMPTY</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<case>case <expr><name>RTGreaterStrategyNumber</name></expr>:</case>
			<comment type="block">/* no need to check for empty elements */</comment>
			<expr_stmt><expr><name>finfo</name> <operator>=</operator> <call><name>inclusion_get_strategy_procinfo</name><argument_list>(<argument><expr><name>bdesc</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name>subtype</name></expr></argument>,
													<argument><expr><name>RTLeftStrategyNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>FunctionCall2Coll</name><argument_list>(<argument><expr><name>finfo</name></expr></argument>, <argument><expr><name>colloid</name></expr></argument>, <argument><expr><name>unionval</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><operator>!</operator><call><name>DatumGetBool</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<default>default:</default>
			<comment type="block">/* shouldn't happen */</comment>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid strategy number %d"</literal></expr></argument>, <argument><expr><name><name>key</name><operator>-&gt;</operator><name>sk_strategy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
 * BRIN inclusion union function
 *
 * Given two BrinValues, update the first of them as a union of the summary
 * values contained in both.  The second one is untouched.
 */</comment>
<function><type><name>Datum</name></type>
<name>brin_inclusion_union</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BrinDesc</name>   <modifier>*</modifier></type><name>bdesc</name> <init>= <expr><operator>(</operator><name>BrinDesc</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BrinValues</name> <modifier>*</modifier></type><name>col_a</name> <init>= <expr><operator>(</operator><name>BrinValues</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BrinValues</name> <modifier>*</modifier></type><name>col_b</name> <init>= <expr><operator>(</operator><name>BrinValues</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>colloid</name> <init>= <expr><call><name>PG_GET_COLLATION</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AttrNumber</name></type>	<name>attno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>attr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FmgrInfo</name>   <modifier>*</modifier></type><name>finfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>col_a</name><operator>-&gt;</operator><name>bv_attno</name></name> <operator>==</operator> <name><name>col_b</name><operator>-&gt;</operator><name>bv_attno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Adjust "hasnulls". */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>col_a</name><operator>-&gt;</operator><name>bv_hasnulls</name></name> <operator>&amp;&amp;</operator> <name><name>col_b</name><operator>-&gt;</operator><name>bv_hasnulls</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>col_a</name><operator>-&gt;</operator><name>bv_hasnulls</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* If there are no values in B, there's nothing left to do. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>col_b</name><operator>-&gt;</operator><name>bv_allnulls</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>attno</name> <operator>=</operator> <name><name>col_a</name><operator>-&gt;</operator><name>bv_attno</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>TupleDescAttr</name><argument_list>(<argument><expr><name><name>bdesc</name><operator>-&gt;</operator><name>bd_tupdesc</name></name></expr></argument>, <argument><expr><name>attno</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Adjust "allnulls".  If A doesn't have values, just copy the values from
	 * B into A, and we're done.  We cannot run the operators in this case,
	 * because values in A might contain garbage.  Note we already established
	 * that B contains values.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>col_a</name><operator>-&gt;</operator><name>bv_allnulls</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>col_a</name><operator>-&gt;</operator><name>bv_allnulls</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>col_a</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><name>INCLUSION_UNION</name></expr>]</index></name> <operator>=</operator>
			<call><name>datumCopy</name><argument_list>(<argument><expr><name><name>col_b</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><name>INCLUSION_UNION</name></expr>]</index></name></expr></argument>,
					  <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>attbyval</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>attlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>col_a</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><name>INCLUSION_UNMERGEABLE</name></expr>]</index></name> <operator>=</operator>
			<name><name>col_b</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><name>INCLUSION_UNMERGEABLE</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>col_a</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><name>INCLUSION_CONTAINS_EMPTY</name></expr>]</index></name> <operator>=</operator>
			<name><name>col_b</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><name>INCLUSION_CONTAINS_EMPTY</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* If B includes empty elements, mark A similarly, if needed. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DatumGetBool</name><argument_list>(<argument><expr><name><name>col_a</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><name>INCLUSION_CONTAINS_EMPTY</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		<call><name>DatumGetBool</name><argument_list>(<argument><expr><name><name>col_b</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><name>INCLUSION_CONTAINS_EMPTY</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>col_a</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><name>INCLUSION_CONTAINS_EMPTY</name></expr>]</index></name> <operator>=</operator> <call><name>BoolGetDatum</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Check if A includes elements that are not mergeable. */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>DatumGetBool</name><argument_list>(<argument><expr><name><name>col_a</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><name>INCLUSION_UNMERGEABLE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* If B includes elements that are not mergeable, mark A similarly. */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>DatumGetBool</name><argument_list>(<argument><expr><name><name>col_b</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><name>INCLUSION_UNMERGEABLE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>col_a</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><name>INCLUSION_UNMERGEABLE</name></expr>]</index></name> <operator>=</operator> <call><name>BoolGetDatum</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Check if A and B are mergeable; if not, mark A unmergeable. */</comment>
	<expr_stmt><expr><name>finfo</name> <operator>=</operator> <call><name>inclusion_get_procinfo</name><argument_list>(<argument><expr><name>bdesc</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name>PROCNUM_MERGEABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>finfo</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
		<operator>!</operator><call><name>DatumGetBool</name><argument_list>(<argument><expr><call><name>FunctionCall2Coll</name><argument_list>(<argument><expr><name>finfo</name></expr></argument>, <argument><expr><name>colloid</name></expr></argument>,
										<argument><expr><name><name>col_a</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><name>INCLUSION_UNION</name></expr>]</index></name></expr></argument>,
										<argument><expr><name><name>col_b</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><name>INCLUSION_UNION</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>col_a</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><name>INCLUSION_UNMERGEABLE</name></expr>]</index></name> <operator>=</operator> <call><name>BoolGetDatum</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Finally, merge B to A. */</comment>
	<expr_stmt><expr><name>finfo</name> <operator>=</operator> <call><name>inclusion_get_procinfo</name><argument_list>(<argument><expr><name>bdesc</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name>PROCNUM_MERGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>finfo</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>FunctionCall2Coll</name><argument_list>(<argument><expr><name>finfo</name></expr></argument>, <argument><expr><name>colloid</name></expr></argument>,
							   <argument><expr><name><name>col_a</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><name>INCLUSION_UNION</name></expr>]</index></name></expr></argument>,
							   <argument><expr><name><name>col_b</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><name>INCLUSION_UNION</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>attr</name><operator>-&gt;</operator><name>attbyval</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name><name>col_a</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><name>INCLUSION_UNION</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>col_a</name><operator>-&gt;</operator><name>bv_values</name><index>[<expr><name>INCLUSION_UNION</name></expr>]</index></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Cache and return inclusion opclass support procedure
 *
 * Return the procedure corresponding to the given function support number
 * or null if it is not exists.
 */</comment>
<function><type><specifier>static</specifier> <name>FmgrInfo</name> <modifier>*</modifier></type>
<name>inclusion_get_procinfo</name><parameter_list>(<parameter><decl><type><name>BrinDesc</name> <modifier>*</modifier></type><name>bdesc</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>attno</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>procnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>InclusionOpaque</name> <modifier>*</modifier></type><name>opaque</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint16</name></type>		<name>basenum</name> <init>= <expr><name>procnum</name> <operator>-</operator> <name>PROCNUM_BASE</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * We cache these in the opaque struct, to avoid repetitive syscache
	 * lookups.
	 */</comment>
	<expr_stmt><expr><name>opaque</name> <operator>=</operator> <operator>(</operator><name>InclusionOpaque</name> <operator>*</operator><operator>)</operator> <name><name>bdesc</name><operator>-&gt;</operator><name>bd_info</name><index>[<expr><name>attno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>oi_opaque</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * If we already searched for this proc and didn't find it, don't bother
	 * searching again.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>opaque</name><operator>-&gt;</operator><name>extra_proc_missing</name><index>[<expr><name>basenum</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>opaque</name><operator>-&gt;</operator><name>extra_procinfos</name><index>[<expr><name>basenum</name></expr>]</index></name><operator>.</operator><name>fn_oid</name> <operator>==</operator> <name>InvalidOid</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>RegProcedureIsValid</name><argument_list>(<argument><expr><call><name>index_getprocid</name><argument_list>(<argument><expr><name><name>bdesc</name><operator>-&gt;</operator><name>bd_index</name></name></expr></argument>, <argument><expr><name>attno</name></expr></argument>,
												<argument><expr><name>procnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>fmgr_info_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opaque</name><operator>-&gt;</operator><name>extra_procinfos</name><index>[<expr><name>basenum</name></expr>]</index></name></expr></argument>,
						   <argument><expr><call><name>index_getprocinfo</name><argument_list>(<argument><expr><name><name>bdesc</name><operator>-&gt;</operator><name>bd_index</name></name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name>procnum</name></expr></argument>)</argument_list></call></expr></argument>,
						   <argument><expr><name><name>bdesc</name><operator>-&gt;</operator><name>bd_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name><name>opaque</name><operator>-&gt;</operator><name>extra_proc_missing</name><index>[<expr><name>basenum</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>&amp;</operator><name><name>opaque</name><operator>-&gt;</operator><name>extra_procinfos</name><index>[<expr><name>basenum</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Cache and return the procedure of the given strategy
 *
 * Return the procedure corresponding to the given sub-type and strategy
 * number.  The data type of the index will be used as the left hand side of
 * the operator and the given sub-type will be used as the right hand side.
 * Throws an error if the pg_amop row does not exist, but that should not
 * happen with a properly configured opclass.
 *
 * It always throws an error when the data type of the opclass is different
 * from the data type of the column or the expression.  That happens when the
 * column data type has implicit cast to the opclass data type.  We don't
 * bother casting types, because this situation can easily be avoided by
 * setting storage data type to that of the opclass.  The same problem does not
 * apply to the data type of the right hand side, because the type in the
 * ScanKey always matches the opclass' one.
 *
 * Note: this function mirrors minmax_get_strategy_procinfo; if changes are
 * made here, see that function too.
 */</comment>
<function><type><specifier>static</specifier> <name>FmgrInfo</name> <modifier>*</modifier></type>
<name>inclusion_get_strategy_procinfo</name><parameter_list>(<parameter><decl><type><name>BrinDesc</name> <modifier>*</modifier></type><name>bdesc</name></decl></parameter>, <parameter><decl><type><name>uint16</name></type> <name>attno</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>subtype</name></decl></parameter>,
								<parameter><decl><type><name>uint16</name></type> <name>strategynum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>InclusionOpaque</name> <modifier>*</modifier></type><name>opaque</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>strategynum</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
		   <name>strategynum</name> <operator>&lt;=</operator> <name>RTMaxStrategyNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>opaque</name> <operator>=</operator> <operator>(</operator><name>InclusionOpaque</name> <operator>*</operator><operator>)</operator> <name><name>bdesc</name><operator>-&gt;</operator><name>bd_info</name><index>[<expr><name>attno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>oi_opaque</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * We cache the procedures for the last sub-type in the opaque struct, to
	 * avoid repetitive syscache lookups.  If the sub-type is changed,
	 * invalidate all the cached entries.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>opaque</name><operator>-&gt;</operator><name>cached_subtype</name></name> <operator>!=</operator> <name>subtype</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>uint16</name></type>		<name>i</name></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>RTMaxStrategyNumber</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>opaque</name><operator>-&gt;</operator><name>strategy_procinfos</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fn_oid</name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt></block_content></block></for>
		<expr_stmt><expr><name><name>opaque</name><operator>-&gt;</operator><name>cached_subtype</name></name> <operator>=</operator> <name>subtype</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>opaque</name><operator>-&gt;</operator><name>strategy_procinfos</name><index>[<expr><name>strategynum</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fn_oid</name> <operator>==</operator> <name>InvalidOid</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>attr</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tuple</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Oid</name></type>			<name>opfamily</name></decl>,
					<decl><type ref="prev"/><name>oprid</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>isNull</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>opfamily</name> <operator>=</operator> <name><name>bdesc</name><operator>-&gt;</operator><name>bd_index</name><operator>-&gt;</operator><name>rd_opfamily</name><index>[<expr><name>attno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>TupleDescAttr</name><argument_list>(<argument><expr><name><name>bdesc</name><operator>-&gt;</operator><name>bd_tupdesc</name></name></expr></argument>, <argument><expr><name>attno</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>SearchSysCache4</name><argument_list>(<argument><expr><name>AMOPSTRATEGY</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>opfamily</name></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>atttypid</name></name></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>subtype</name></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><call><name>Int16GetDatum</name><argument_list>(<argument><expr><name>strategynum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"missing operator %d(%u,%u) in opfamily %u"</literal></expr></argument>,
				 <argument><expr><name>strategynum</name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>atttypid</name></name></expr></argument>, <argument><expr><name>subtype</name></expr></argument>, <argument><expr><name>opfamily</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>oprid</name> <operator>=</operator> <call><name>DatumGetObjectId</name><argument_list>(<argument><expr><call><name>SysCacheGetAttr</name><argument_list>(<argument><expr><name>AMOPSTRATEGY</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>,
												 <argument><expr><name>Anum_pg_amop_amopopr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>isNull</name> <operator>&amp;&amp;</operator> <call><name>RegProcedureIsValid</name><argument_list>(<argument><expr><name>oprid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>fmgr_info_cxt</name><argument_list>(<argument><expr><call><name>get_opcode</name><argument_list>(<argument><expr><name>oprid</name></expr></argument>)</argument_list></call></expr></argument>,
					  <argument><expr><operator>&amp;</operator><name><name>opaque</name><operator>-&gt;</operator><name>strategy_procinfos</name><index>[<expr><name>strategynum</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
					  <argument><expr><name><name>bdesc</name><operator>-&gt;</operator><name>bd_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>&amp;</operator><name><name>opaque</name><operator>-&gt;</operator><name>strategy_procinfos</name><index>[<expr><name>strategynum</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
</unit>
