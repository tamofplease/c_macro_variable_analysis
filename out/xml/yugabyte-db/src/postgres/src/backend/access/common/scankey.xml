<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/backend/access/common/scankey.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * scankey.c
 *	  scan key support code
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/access/common/scankey.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/skey.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_collation.h"</cpp:file></cpp:include>


<comment type="block">/*
 * ScanKeyEntryInitialize
 *		Initializes a scan key entry given all the field values.
 *		The target procedure is specified by OID (but can be invalid
 *		if SK_SEARCHNULL or SK_SEARCHNOTNULL is set).
 *
 * Note: GetCurrentMemoryContext() at call should be as long-lived as the ScanKey
 * itself, because that's what will be used for any subsidiary info attached
 * to the ScanKey's FmgrInfo record.
 */</comment>
<function><type><name>void</name></type>
<name>ScanKeyEntryInitialize</name><parameter_list>(<parameter><decl><type><name>ScanKey</name></type> <name>entry</name></decl></parameter>,
					   <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
					   <parameter><decl><type><name>AttrNumber</name></type> <name>attributeNumber</name></decl></parameter>,
					   <parameter><decl><type><name>StrategyNumber</name></type> <name>strategy</name></decl></parameter>,
					   <parameter><decl><type><name>Oid</name></type> <name>subtype</name></decl></parameter>,
					   <parameter><decl><type><name>Oid</name></type> <name>collation</name></decl></parameter>,
					   <parameter><decl><type><name>RegProcedure</name></type> <name>procedure</name></decl></parameter>,
					   <parameter><decl><type><name>Datum</name></type> <name>argument</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>sk_flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>sk_attno</name></name> <operator>=</operator> <name>attributeNumber</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>sk_strategy</name></name> <operator>=</operator> <name>strategy</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>sk_subtype</name></name> <operator>=</operator> <name>subtype</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>sk_collation</name></name> <operator>=</operator> <name>collation</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>sk_argument</name></name> <operator>=</operator> <name>argument</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>RegProcedureIsValid</name><argument_list>(<argument><expr><name>procedure</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fmgr_info</name><argument_list>(<argument><expr><name>procedure</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>sk_func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>SK_SEARCHNULL</name> <operator>|</operator> <name>SK_SEARCHNOTNULL</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>sk_func</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>sk_func</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * ScanKeyInit
 *		Shorthand version of ScanKeyEntryInitialize: flags and subtype
 *		are assumed to be zero (the usual value), and collation is defaulted.
 *
 * This is the recommended version for hardwired lookups in system catalogs.
 * It cannot handle NULL arguments, unary operators, or nondefault operators,
 * but we need none of those features for most hardwired lookups.
 *
 * We set collation to DEFAULT_COLLATION_OID always.  This is appropriate
 * for textual columns in system catalogs, and it will be ignored for
 * non-textual columns, so it's not worth trying to be more finicky.
 *
 * Note: GetCurrentMemoryContext() at call should be as long-lived as the ScanKey
 * itself, because that's what will be used for any subsidiary info attached
 * to the ScanKey's FmgrInfo record.
 */</comment>
<function><type><name>void</name></type>
<name>ScanKeyInit</name><parameter_list>(<parameter><decl><type><name>ScanKey</name></type> <name>entry</name></decl></parameter>,
			<parameter><decl><type><name>AttrNumber</name></type> <name>attributeNumber</name></decl></parameter>,
			<parameter><decl><type><name>StrategyNumber</name></type> <name>strategy</name></decl></parameter>,
			<parameter><decl><type><name>RegProcedure</name></type> <name>procedure</name></decl></parameter>,
			<parameter><decl><type><name>Datum</name></type> <name>argument</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>sk_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>sk_attno</name></name> <operator>=</operator> <name>attributeNumber</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>sk_strategy</name></name> <operator>=</operator> <name>strategy</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>sk_subtype</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>sk_collation</name></name> <operator>=</operator> <name>DEFAULT_COLLATION_OID</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>sk_argument</name></name> <operator>=</operator> <name>argument</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fmgr_info</name><argument_list>(<argument><expr><name>procedure</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>sk_func</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * ScanKeyEntryInitializeWithInfo
 *		Initializes a scan key entry using an already-completed FmgrInfo
 *		function lookup record.
 *
 * Note: GetCurrentMemoryContext() at call should be as long-lived as the ScanKey
 * itself, because that's what will be used for any subsidiary info attached
 * to the ScanKey's FmgrInfo record.
 */</comment>
<function><type><name>void</name></type>
<name>ScanKeyEntryInitializeWithInfo</name><parameter_list>(<parameter><decl><type><name>ScanKey</name></type> <name>entry</name></decl></parameter>,
							   <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
							   <parameter><decl><type><name>AttrNumber</name></type> <name>attributeNumber</name></decl></parameter>,
							   <parameter><decl><type><name>StrategyNumber</name></type> <name>strategy</name></decl></parameter>,
							   <parameter><decl><type><name>Oid</name></type> <name>subtype</name></decl></parameter>,
							   <parameter><decl><type><name>Oid</name></type> <name>collation</name></decl></parameter>,
							   <parameter><decl><type><name>FmgrInfo</name> <modifier>*</modifier></type><name>finfo</name></decl></parameter>,
							   <parameter><decl><type><name>Datum</name></type> <name>argument</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>sk_flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>sk_attno</name></name> <operator>=</operator> <name>attributeNumber</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>sk_strategy</name></name> <operator>=</operator> <name>strategy</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>sk_subtype</name></name> <operator>=</operator> <name>subtype</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>sk_collation</name></name> <operator>=</operator> <name>collation</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>sk_argument</name></name> <operator>=</operator> <name>argument</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fmgr_info_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>sk_func</name></name></expr></argument>, <argument><expr><name>finfo</name></expr></argument>, <argument><expr><call><name>GetCurrentMemoryContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
