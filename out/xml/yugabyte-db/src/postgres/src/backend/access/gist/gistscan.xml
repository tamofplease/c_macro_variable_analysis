<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/backend/access/gist/gistscan.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * gistscan.c
 *	  routines to manage scans on GiST index relations
 *
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *	  src/backend/access/gist/gistscan.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/gist_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/gistscan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/relscan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>


<comment type="block">/*
 * Pairing heap comparison function for the GISTSearchItem queue
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pairingheap_GISTSearchItem_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>pairingheap_node</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>pairingheap_node</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>GISTSearchItem</name> <modifier>*</modifier></type><name>sa</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>GISTSearchItem</name> <operator>*</operator><operator>)</operator> <name>a</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>GISTSearchItem</name> <modifier>*</modifier></type><name>sb</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>GISTSearchItem</name> <operator>*</operator><operator>)</operator> <name>b</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IndexScanDesc</name></type> <name>scan</name> <init>= <expr><operator>(</operator><name>IndexScanDesc</name><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<comment type="block">/* Order according to distance comparison */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>scan</name><operator>-&gt;</operator><name>numberOfOrderBys</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>sa</name><operator>-&gt;</operator><name>distances</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>sb</name><operator>-&gt;</operator><name>distances</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>sa</name><operator>-&gt;</operator><name>distances</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>sb</name><operator>-&gt;</operator><name>distances</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Heap items go before inner pages, to ensure a depth-first search */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>GISTSearchItemIsHeap</name><argument_list>(<argument><expr><operator>*</operator><name>sa</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>GISTSearchItemIsHeap</name><argument_list>(<argument><expr><operator>*</operator><name>sb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GISTSearchItemIsHeap</name><argument_list>(<argument><expr><operator>*</operator><name>sa</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>GISTSearchItemIsHeap</name><argument_list>(<argument><expr><operator>*</operator><name>sb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Index AM API functions for scanning GiST indexes
 */</comment>

<function><type><name>IndexScanDesc</name></type>
<name>gistbeginscan</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nkeys</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>norderbys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>IndexScanDesc</name></type> <name>scan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GISTSTATE</name>  <modifier>*</modifier></type><name>giststate</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GISTScanOpaque</name></type> <name>so</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldCxt</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>RelationGetIndexScan</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>nkeys</name></expr></argument>, <argument><expr><name>norderbys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* First, set up a GISTSTATE with a scan-lifespan memory context */</comment>
	<expr_stmt><expr><name>giststate</name> <operator>=</operator> <call><name>initGISTstate</name><argument_list>(<argument><expr><name><name>scan</name><operator>-&gt;</operator><name>indexRelation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Everything made below is in the scanCxt, or is a child of the scanCxt,
	 * so it'll all go away automatically in gistendscan.
	 */</comment>
	<expr_stmt><expr><name>oldCxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>giststate</name><operator>-&gt;</operator><name>scanCxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* initialize opaque data */</comment>
	<expr_stmt><expr><name>so</name> <operator>=</operator> <operator>(</operator><name>GISTScanOpaque</name><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GISTScanOpaqueData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>so</name><operator>-&gt;</operator><name>giststate</name></name> <operator>=</operator> <name>giststate</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>giststate</name><operator>-&gt;</operator><name>tempCxt</name></name> <operator>=</operator> <call><name>createTempGistContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>so</name><operator>-&gt;</operator><name>queue</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>so</name><operator>-&gt;</operator><name>queueCxt</name></name> <operator>=</operator> <name><name>giststate</name><operator>-&gt;</operator><name>scanCxt</name></name></expr>;</expr_stmt>	<comment type="block">/* see gistrescan */</comment>

	<comment type="block">/* workspaces with size dependent on numberOfOrderBys: */</comment>
	<expr_stmt><expr><name><name>so</name><operator>-&gt;</operator><name>distances</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>scan</name><operator>-&gt;</operator><name>numberOfOrderBys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>so</name><operator>-&gt;</operator><name>qual_ok</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>			<comment type="block">/* in case there are zero keys */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>scan</name><operator>-&gt;</operator><name>numberOfOrderBys</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>xs_orderbyvals</name></name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>scan</name><operator>-&gt;</operator><name>numberOfOrderBys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>xs_orderbynulls</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>scan</name><operator>-&gt;</operator><name>numberOfOrderBys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>scan</name><operator>-&gt;</operator><name>xs_orderbynulls</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>scan</name><operator>-&gt;</operator><name>numberOfOrderBys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>so</name><operator>-&gt;</operator><name>killedItems</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>		<comment type="block">/* until needed */</comment>
	<expr_stmt><expr><name><name>so</name><operator>-&gt;</operator><name>numKilled</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>so</name><operator>-&gt;</operator><name>curBlkno</name></name> <operator>=</operator> <name>InvalidBlockNumber</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>so</name><operator>-&gt;</operator><name>curPageLSN</name></name> <operator>=</operator> <name>InvalidXLogRecPtr</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <name>so</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * All fields required for index-only scans are initialized in gistrescan,
	 * as we don't know yet if we're doing an index-only scan or not.
	 */</comment>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>scan</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gistrescan</name><parameter_list>(<parameter><decl><type><name>IndexScanDesc</name></type> <name>scan</name></decl></parameter>, <parameter><decl><type><name>ScanKey</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nkeys</name></decl></parameter>,
		   <parameter><decl><type><name>ScanKey</name></type> <name>orderbys</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>norderbys</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* nkeys and norderbys arguments are ignored */</comment>
	<decl_stmt><decl><type><name>GISTScanOpaque</name></type> <name>so</name> <init>= <expr><operator>(</operator><name>GISTScanOpaque</name><operator>)</operator> <name><name>scan</name><operator>-&gt;</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>first_time</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldCxt</name></decl>;</decl_stmt>

	<comment type="block">/* rescan an existing indexscan --- reset state */</comment>

	<comment type="block">/*
	 * The first time through, we create the search queue in the scanCxt.
	 * Subsequent times through, we create the queue in a separate queueCxt,
	 * which is created on the second call and reset on later calls.  Thus, in
	 * the common case where a scan is only rescan'd once, we just put the
	 * queue in scanCxt and don't pay the overhead of making a second memory
	 * context.  If we do rescan more than once, the first queue is just left
	 * for dead until end of scan; this small wastage seems worth the savings
	 * in the common case.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>so</name><operator>-&gt;</operator><name>queue</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* first time through */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>so</name><operator>-&gt;</operator><name>queueCxt</name></name> <operator>==</operator> <name><name>so</name><operator>-&gt;</operator><name>giststate</name><operator>-&gt;</operator><name>scanCxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>first_time</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>so</name><operator>-&gt;</operator><name>queueCxt</name></name> <operator>==</operator> <name><name>so</name><operator>-&gt;</operator><name>giststate</name><operator>-&gt;</operator><name>scanCxt</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* second time through */</comment>
		<expr_stmt><expr><name><name>so</name><operator>-&gt;</operator><name>queueCxt</name></name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name><name>so</name><operator>-&gt;</operator><name>giststate</name><operator>-&gt;</operator><name>scanCxt</name></name></expr></argument>,
											 <argument><expr><literal type="string">"GiST queue context"</literal></expr></argument>,
											 <argument><expr><name>ALLOCSET_DEFAULT_SIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>first_time</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* third or later time through */</comment>
		<expr_stmt><expr><call><name>MemoryContextReset</name><argument_list>(<argument><expr><name><name>so</name><operator>-&gt;</operator><name>queueCxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>first_time</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * If we're doing an index-only scan, on the first call, also initialize a
	 * tuple descriptor to represent the returned index tuples and create a
	 * memory context to hold them during the scan.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>scan</name><operator>-&gt;</operator><name>xs_want_itup</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>scan</name><operator>-&gt;</operator><name>xs_hitupdesc</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>natts</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>attno</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * The storage type of the index can be different from the original
		 * datatype being indexed, so we cannot just grab the index's tuple
		 * descriptor. Instead, construct a descriptor with the original data
		 * types.
		 */</comment>
		<expr_stmt><expr><name>natts</name> <operator>=</operator> <call><name>RelationGetNumberOfAttributes</name><argument_list>(<argument><expr><name><name>scan</name><operator>-&gt;</operator><name>indexRelation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>so</name><operator>-&gt;</operator><name>giststate</name><operator>-&gt;</operator><name>fetchTupdesc</name></name> <operator>=</operator> <call><name>CreateTemplateTupleDesc</name><argument_list>(<argument><expr><name>natts</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>attno</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>attno</name> <operator>&lt;=</operator> <name>natts</name></expr>;</condition> <incr><expr><name>attno</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><call><name>TupleDescInitEntry</name><argument_list>(<argument><expr><name><name>so</name><operator>-&gt;</operator><name>giststate</name><operator>-&gt;</operator><name>fetchTupdesc</name></name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
							   <argument><expr><name><name>scan</name><operator>-&gt;</operator><name>indexRelation</name><operator>-&gt;</operator><name>rd_opcintype</name><index>[<expr><name>attno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
							   <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>xs_hitupdesc</name></name> <operator>=</operator> <name><name>so</name><operator>-&gt;</operator><name>giststate</name><operator>-&gt;</operator><name>fetchTupdesc</name></name></expr>;</expr_stmt>

		<comment type="block">/* Also create a memory context that will hold the returned tuples */</comment>
		<expr_stmt><expr><name><name>so</name><operator>-&gt;</operator><name>pageDataCxt</name></name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name><name>so</name><operator>-&gt;</operator><name>giststate</name><operator>-&gt;</operator><name>scanCxt</name></name></expr></argument>,
												<argument><expr><literal type="string">"GiST page data context"</literal></expr></argument>,
												<argument><expr><name>ALLOCSET_DEFAULT_SIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* create new, empty pairing heap for search queue */</comment>
	<expr_stmt><expr><name>oldCxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>so</name><operator>-&gt;</operator><name>queueCxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>so</name><operator>-&gt;</operator><name>queue</name></name> <operator>=</operator> <call><name>pairingheap_allocate</name><argument_list>(<argument><expr><name>pairingheap_GISTSearchItem_cmp</name></expr></argument>, <argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldCxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>so</name><operator>-&gt;</operator><name>firstCall</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* Update scan key, if a new one is given */</comment>
	<if_stmt><if>if <condition>(<expr><name>key</name> <operator>&amp;&amp;</operator> <name><name>scan</name><operator>-&gt;</operator><name>numberOfKeys</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>void</name>	  <modifier>*</modifier><modifier>*</modifier></type><name>fn_extras</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

		<comment type="block">/*
		 * If this isn't the first time through, preserve the fn_extra
		 * pointers, so that if the consistentFns are using them to cache
		 * data, that data is not leaked across a rescan.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first_time</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>fn_extras</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name><name>scan</name><operator>-&gt;</operator><name>numberOfKeys</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>scan</name><operator>-&gt;</operator><name>numberOfKeys</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>fn_extras</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>scan</name><operator>-&gt;</operator><name>keyData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>sk_func</name><operator>.</operator><name>fn_extra</name></name></expr>;</expr_stmt></block_content></block></for>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>scan</name><operator>-&gt;</operator><name>keyData</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>,
				<argument><expr><name><name>scan</name><operator>-&gt;</operator><name>numberOfKeys</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ScanKeyData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Modify the scan key so that the Consistent method is called for all
		 * comparisons. The original operator is passed to the Consistent
		 * function in the form of its strategy number, which is available
		 * from the sk_strategy field, and its subtype from the sk_subtype
		 * field.
		 *
		 * Next, if any of keys is a NULL and that key is not marked with
		 * SK_SEARCHNULL/SK_SEARCHNOTNULL then nothing can be found (ie, we
		 * assume all indexable operators are strict).
		 */</comment>
		<expr_stmt><expr><name><name>so</name><operator>-&gt;</operator><name>qual_ok</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>scan</name><operator>-&gt;</operator><name>numberOfKeys</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>ScanKey</name></type>		<name>skey</name> <init>= <expr><name><name>scan</name><operator>-&gt;</operator><name>keyData</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

			<comment type="block">/*
			 * Copy consistent support function to ScanKey structure instead
			 * of function implementing filtering operator.
			 */</comment>
			<expr_stmt><expr><call><name>fmgr_info_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>skey</name><operator>-&gt;</operator><name>sk_func</name></name><operator>)</operator></expr></argument>,
						   <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>so</name><operator>-&gt;</operator><name>giststate</name><operator>-&gt;</operator><name>consistentFn</name><index>[<expr><name><name>skey</name><operator>-&gt;</operator><name>sk_attno</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>,
						   <argument><expr><name><name>so</name><operator>-&gt;</operator><name>giststate</name><operator>-&gt;</operator><name>scanCxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* Restore prior fn_extra pointers, if not first time */</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first_time</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>skey</name><operator>-&gt;</operator><name>sk_func</name><operator>.</operator><name>fn_extra</name></name> <operator>=</operator> <name><name>fn_extras</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>skey</name><operator>-&gt;</operator><name>sk_flags</name></name> <operator>&amp;</operator> <name>SK_ISNULL</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>skey</name><operator>-&gt;</operator><name>sk_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SK_SEARCHNULL</name> <operator>|</operator> <name>SK_SEARCHNOTNULL</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>so</name><operator>-&gt;</operator><name>qual_ok</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first_time</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>fn_extras</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Update order-by key, if a new one is given */</comment>
	<if_stmt><if>if <condition>(<expr><name>orderbys</name> <operator>&amp;&amp;</operator> <name><name>scan</name><operator>-&gt;</operator><name>numberOfOrderBys</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>void</name>	  <modifier>*</modifier><modifier>*</modifier></type><name>fn_extras</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

		<comment type="block">/* As above, preserve fn_extra if not first time through */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first_time</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>fn_extras</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name><name>scan</name><operator>-&gt;</operator><name>numberOfOrderBys</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>scan</name><operator>-&gt;</operator><name>numberOfOrderBys</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>fn_extras</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>scan</name><operator>-&gt;</operator><name>orderByData</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>sk_func</name><operator>.</operator><name>fn_extra</name></name></expr>;</expr_stmt></block_content></block></for>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>scan</name><operator>-&gt;</operator><name>orderByData</name></name></expr></argument>, <argument><expr><name>orderbys</name></expr></argument>,
				<argument><expr><name><name>scan</name><operator>-&gt;</operator><name>numberOfOrderBys</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ScanKeyData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>so</name><operator>-&gt;</operator><name>orderByTypes</name></name> <operator>=</operator> <operator>(</operator><name>Oid</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name><name>scan</name><operator>-&gt;</operator><name>numberOfOrderBys</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Modify the order-by key so that the Distance method is called for
		 * all comparisons. The original operator is passed to the Distance
		 * function in the form of its strategy number, which is available
		 * from the sk_strategy field, and its subtype from the sk_subtype
		 * field.
		 */</comment>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>scan</name><operator>-&gt;</operator><name>numberOfOrderBys</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>ScanKey</name></type>		<name>skey</name> <init>= <expr><name><name>scan</name><operator>-&gt;</operator><name>orderByData</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>FmgrInfo</name>   <modifier>*</modifier></type><name>finfo</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>so</name><operator>-&gt;</operator><name>giststate</name><operator>-&gt;</operator><name>distanceFn</name><index>[<expr><name><name>skey</name><operator>-&gt;</operator><name>sk_attno</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

			<comment type="block">/* Check we actually have a distance function ... */</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>finfo</name><operator>-&gt;</operator><name>fn_oid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"missing support function %d for attribute %d of index \"%s\""</literal></expr></argument>,
					 <argument><expr><name>GIST_DISTANCE_PROC</name></expr></argument>, <argument><expr><name><name>skey</name><operator>-&gt;</operator><name>sk_attno</name></name></expr></argument>,
					 <argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name><name>scan</name><operator>-&gt;</operator><name>indexRelation</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="block">/*
			 * Look up the datatype returned by the original ordering
			 * operator. GiST always uses a float8 for the distance function,
			 * but the ordering operator could be anything else.
			 *
			 * XXX: The distance function is only allowed to be lossy if the
			 * ordering operator's result type is float4 or float8.  Otherwise
			 * we don't know how to return the distance to the executor.  But
			 * we cannot check that here, as we won't know if the distance
			 * function is lossy until it returns *recheck = true for the
			 * first time.
			 */</comment>
			<expr_stmt><expr><name><name>so</name><operator>-&gt;</operator><name>orderByTypes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_func_rettype</name><argument_list>(<argument><expr><name><name>skey</name><operator>-&gt;</operator><name>sk_func</name><operator>.</operator><name>fn_oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * Copy distance support function to ScanKey structure instead of
			 * function implementing ordering operator.
			 */</comment>
			<expr_stmt><expr><call><name>fmgr_info_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>skey</name><operator>-&gt;</operator><name>sk_func</name></name><operator>)</operator></expr></argument>, <argument><expr><name>finfo</name></expr></argument>, <argument><expr><name><name>so</name><operator>-&gt;</operator><name>giststate</name><operator>-&gt;</operator><name>scanCxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* Restore prior fn_extra pointers, if not first time */</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first_time</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>skey</name><operator>-&gt;</operator><name>sk_func</name><operator>.</operator><name>fn_extra</name></name> <operator>=</operator> <name><name>fn_extras</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></for>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first_time</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>fn_extras</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* any previous xs_hitup will have been pfree'd in context resets above */</comment>
	<expr_stmt><expr><name><name>scan</name><operator>-&gt;</operator><name>xs_hitup</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>gistendscan</name><parameter_list>(<parameter><decl><type><name>IndexScanDesc</name></type> <name>scan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GISTScanOpaque</name></type> <name>so</name> <init>= <expr><operator>(</operator><name>GISTScanOpaque</name><operator>)</operator> <name><name>scan</name><operator>-&gt;</operator><name>opaque</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * freeGISTstate is enough to clean up everything made by gistbeginscan,
	 * as well as the queueCxt if there is a separate context for it.
	 */</comment>
	<expr_stmt><expr><call><name>freeGISTstate</name><argument_list>(<argument><expr><name><name>so</name><operator>-&gt;</operator><name>giststate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
