<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/backend/access/hash/hashvalidate.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * hashvalidate.c
 *	  Opclass validator for hash.
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *	  src/backend/access/hash/hashvalidate.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/amvalidate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_amop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_amproc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_opclass.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_opfamily.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parse_coerce.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/fmgroids.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/regproc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>


<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>check_hash_func_signature</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>funcid</name></decl></parameter>, <parameter><decl><type><name>int16</name></type> <name>amprocnum</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>argtype</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * Validator for a hash opclass.
 *
 * Some of the checks done here cover the whole opfamily, and therefore are
 * redundant when checking each opclass in a family.  But they don't run long
 * enough to be much of a problem, so we accept the duplication rather than
 * complicate the amvalidate API.
 */</comment>
<function><type><name>bool</name></type>
<name>hashvalidate</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>opclassoid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>result</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>classtup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_opclass</name></type> <name>classform</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>opfamilyoid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>opcintype</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>opclassname</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>familytup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_opfamily</name></type> <name>familyform</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>opfamilyname</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CatCList</name>   <modifier>*</modifier></type><name>proclist</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>oprlist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>grouplist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OpFamilyOpFuncGroup</name> <modifier>*</modifier></type><name>opclassgroup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>hashabletypes</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<comment type="block">/* Fetch opclass information */</comment>
	<expr_stmt><expr><name>classtup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>CLAOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>opclassoid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>classtup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for operator class %u"</literal></expr></argument>, <argument><expr><name>opclassoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>classform</name> <operator>=</operator> <operator>(</operator><name>Form_pg_opclass</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>classtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>opfamilyoid</name> <operator>=</operator> <name><name>classform</name><operator>-&gt;</operator><name>opcfamily</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>opcintype</name> <operator>=</operator> <name><name>classform</name><operator>-&gt;</operator><name>opcintype</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>opclassname</name> <operator>=</operator> <call><name>NameStr</name><argument_list>(<argument><expr><name><name>classform</name><operator>-&gt;</operator><name>opcname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Fetch opfamily information */</comment>
	<expr_stmt><expr><name>familytup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>OPFAMILYOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>opfamilyoid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>familytup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for operator family %u"</literal></expr></argument>, <argument><expr><name>opfamilyoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>familyform</name> <operator>=</operator> <operator>(</operator><name>Form_pg_opfamily</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>familytup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>opfamilyname</name> <operator>=</operator> <call><name>NameStr</name><argument_list>(<argument><expr><name><name>familyform</name><operator>-&gt;</operator><name>opfname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Fetch all operators and support functions of the opfamily */</comment>
	<expr_stmt><expr><name>oprlist</name> <operator>=</operator> <call><name>SearchSysCacheList1</name><argument_list>(<argument><expr><name>AMOPSTRATEGY</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>opfamilyoid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>proclist</name> <operator>=</operator> <call><name>SearchSysCacheList1</name><argument_list>(<argument><expr><name>AMPROCNUM</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>opfamilyoid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Check individual support functions */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>proclist</name><operator>-&gt;</operator><name>n_members</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>proctup</name> <init>= <expr><operator>&amp;</operator><name><name>proclist</name><operator>-&gt;</operator><name>members</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>tuple</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Form_pg_amproc</name></type> <name>procform</name> <init>= <expr><operator>(</operator><name>Form_pg_amproc</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>proctup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/*
		 * All hash functions should be registered with matching left/right
		 * types
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>procform</name><operator>-&gt;</operator><name>amproclefttype</name></name> <operator>!=</operator> <name><name>procform</name><operator>-&gt;</operator><name>amprocrighttype</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_OBJECT_DEFINITION</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"operator family \"%s\" of access method %s contains support function %s with different left and right input types"</literal></expr></argument>,
							<argument><expr><name>opfamilyname</name></expr></argument>, <argument><expr><literal type="string">"hash"</literal></expr></argument>,
							<argument><expr><call><name>format_procedure</name><argument_list>(<argument><expr><name><name>procform</name><operator>-&gt;</operator><name>amproc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Check procedure numbers and function signatures */</comment>
		<switch>switch <condition>(<expr><name><name>procform</name><operator>-&gt;</operator><name>amprocnum</name></name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>HASHSTANDARD_PROC</name></expr>:</case>
			<case>case <expr><name>HASHEXTENDED_PROC</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_hash_func_signature</name><argument_list>(<argument><expr><name><name>procform</name><operator>-&gt;</operator><name>amproc</name></name></expr></argument>, <argument><expr><name><name>procform</name><operator>-&gt;</operator><name>amprocnum</name></name></expr></argument>,
											   <argument><expr><name><name>procform</name><operator>-&gt;</operator><name>amproclefttype</name></name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_OBJECT_DEFINITION</name></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"operator family \"%s\" of access method %s contains function %s with wrong signature for support number %d"</literal></expr></argument>,
									<argument><expr><name>opfamilyname</name></expr></argument>, <argument><expr><literal type="string">"hash"</literal></expr></argument>,
									<argument><expr><call><name>format_procedure</name><argument_list>(<argument><expr><name><name>procform</name><operator>-&gt;</operator><name>amproc</name></name></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><name><name>procform</name><operator>-&gt;</operator><name>amprocnum</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<comment type="block">/* Remember which types we can hash */</comment>
					<expr_stmt><expr><name>hashabletypes</name> <operator>=</operator>
						<call><name>list_append_unique_oid</name><argument_list>(<argument><expr><name>hashabletypes</name></expr></argument>,
											   <argument><expr><name><name>procform</name><operator>-&gt;</operator><name>amproclefttype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_OBJECT_DEFINITION</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"operator family \"%s\" of access method %s contains function %s with invalid support number %d"</literal></expr></argument>,
								<argument><expr><name>opfamilyname</name></expr></argument>, <argument><expr><literal type="string">"hash"</literal></expr></argument>,
								<argument><expr><call><name>format_procedure</name><argument_list>(<argument><expr><name><name>procform</name><operator>-&gt;</operator><name>amproc</name></name></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><name><name>procform</name><operator>-&gt;</operator><name>amprocnum</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></for>

	<comment type="block">/* Check individual operators */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>oprlist</name><operator>-&gt;</operator><name>n_members</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>oprtup</name> <init>= <expr><operator>&amp;</operator><name><name>oprlist</name><operator>-&gt;</operator><name>members</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>tuple</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Form_pg_amop</name></type> <name>oprform</name> <init>= <expr><operator>(</operator><name>Form_pg_amop</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>oprtup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/* Check that only allowed strategy numbers exist */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>oprform</name><operator>-&gt;</operator><name>amopstrategy</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator>
			<name><name>oprform</name><operator>-&gt;</operator><name>amopstrategy</name></name> <operator>&gt;</operator> <name>HTMaxStrategyNumber</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_OBJECT_DEFINITION</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"operator family \"%s\" of access method %s contains operator %s with invalid strategy number %d"</literal></expr></argument>,
							<argument><expr><name>opfamilyname</name></expr></argument>, <argument><expr><literal type="string">"hash"</literal></expr></argument>,
							<argument><expr><call><name>format_operator</name><argument_list>(<argument><expr><name><name>oprform</name><operator>-&gt;</operator><name>amopopr</name></name></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><name><name>oprform</name><operator>-&gt;</operator><name>amopstrategy</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* hash doesn't support ORDER BY operators */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>oprform</name><operator>-&gt;</operator><name>amoppurpose</name></name> <operator>!=</operator> <name>AMOP_SEARCH</name> <operator>||</operator>
			<call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>oprform</name><operator>-&gt;</operator><name>amopsortfamily</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_OBJECT_DEFINITION</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"operator family \"%s\" of access method %s contains invalid ORDER BY specification for operator %s"</literal></expr></argument>,
							<argument><expr><name>opfamilyname</name></expr></argument>, <argument><expr><literal type="string">"hash"</literal></expr></argument>,
							<argument><expr><call><name>format_operator</name><argument_list>(<argument><expr><name><name>oprform</name><operator>-&gt;</operator><name>amopopr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Check operator signature --- same for all hash strategies */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_amop_signature</name><argument_list>(<argument><expr><name><name>oprform</name><operator>-&gt;</operator><name>amopopr</name></name></expr></argument>, <argument><expr><name>BOOLOID</name></expr></argument>,
								  <argument><expr><name><name>oprform</name><operator>-&gt;</operator><name>amoplefttype</name></name></expr></argument>,
								  <argument><expr><name><name>oprform</name><operator>-&gt;</operator><name>amoprighttype</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_OBJECT_DEFINITION</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"operator family \"%s\" of access method %s contains operator %s with wrong signature"</literal></expr></argument>,
							<argument><expr><name>opfamilyname</name></expr></argument>, <argument><expr><literal type="string">"hash"</literal></expr></argument>,
							<argument><expr><call><name>format_operator</name><argument_list>(<argument><expr><name><name>oprform</name><operator>-&gt;</operator><name>amopopr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* There should be relevant hash functions for each datatype */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>list_member_oid</name><argument_list>(<argument><expr><name>hashabletypes</name></expr></argument>, <argument><expr><name><name>oprform</name><operator>-&gt;</operator><name>amoplefttype</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
			<operator>!</operator><call><name>list_member_oid</name><argument_list>(<argument><expr><name>hashabletypes</name></expr></argument>, <argument><expr><name><name>oprform</name><operator>-&gt;</operator><name>amoprighttype</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_OBJECT_DEFINITION</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"operator family \"%s\" of access method %s lacks support function for operator %s"</literal></expr></argument>,
							<argument><expr><name>opfamilyname</name></expr></argument>, <argument><expr><literal type="string">"hash"</literal></expr></argument>,
							<argument><expr><call><name>format_operator</name><argument_list>(<argument><expr><name><name>oprform</name><operator>-&gt;</operator><name>amopopr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Now check for inconsistent groups of operators/functions */</comment>
	<expr_stmt><expr><name>grouplist</name> <operator>=</operator> <call><name>identify_opfamily_groups</name><argument_list>(<argument><expr><name>oprlist</name></expr></argument>, <argument><expr><name>proclist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>opclassgroup</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>grouplist</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>OpFamilyOpFuncGroup</name> <modifier>*</modifier></type><name>thisgroup</name> <init>= <expr><operator>(</operator><name>OpFamilyOpFuncGroup</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/* Remember the group exactly matching the test opclass */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>thisgroup</name><operator>-&gt;</operator><name>lefttype</name></name> <operator>==</operator> <name>opcintype</name> <operator>&amp;&amp;</operator>
			<name><name>thisgroup</name><operator>-&gt;</operator><name>righttype</name></name> <operator>==</operator> <name>opcintype</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>opclassgroup</name> <operator>=</operator> <name>thisgroup</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * Complain if there seems to be an incomplete set of operators for
		 * this datatype pair (implying that we have a hash function but no
		 * operator).
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>thisgroup</name><operator>-&gt;</operator><name>operatorset</name></name> <operator>!=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>HTEqualStrategyNumber</name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_OBJECT_DEFINITION</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"operator family \"%s\" of access method %s is missing operator(s) for types %s and %s"</literal></expr></argument>,
							<argument><expr><name>opfamilyname</name></expr></argument>, <argument><expr><literal type="string">"hash"</literal></expr></argument>,
							<argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name><name>thisgroup</name><operator>-&gt;</operator><name>lefttype</name></name></expr></argument>)</argument_list></call></expr></argument>,
							<argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name><name>thisgroup</name><operator>-&gt;</operator><name>righttype</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<comment type="block">/* Check that the originally-named opclass is supported */</comment>
	<comment type="block">/* (if group is there, we already checked it adequately above) */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>opclassgroup</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_OBJECT_DEFINITION</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"operator class \"%s\" of access method %s is missing operator(s)"</literal></expr></argument>,
						<argument><expr><name>opclassname</name></expr></argument>, <argument><expr><literal type="string">"hash"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Complain if the opfamily doesn't have entries for all possible
	 * combinations of its supported datatypes.  While missing cross-type
	 * operators are not fatal, it seems reasonable to insist that all
	 * built-in hash opfamilies be complete.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name>grouplist</name></expr></argument>)</argument_list></call> <operator>!=</operator>
		<call><name>list_length</name><argument_list>(<argument><expr><name>hashabletypes</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>hashabletypes</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_OBJECT_DEFINITION</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"operator family \"%s\" of access method %s is missing cross-type operator(s)"</literal></expr></argument>,
						<argument><expr><name>opfamilyname</name></expr></argument>, <argument><expr><literal type="string">"hash"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ReleaseCatCacheList</name><argument_list>(<argument><expr><name>proclist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ReleaseCatCacheList</name><argument_list>(<argument><expr><name>oprlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>familytup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>classtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * We need a custom version of check_amproc_signature because of assorted
 * hacks in the core hash opclass definitions.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>check_hash_func_signature</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>funcid</name></decl></parameter>, <parameter><decl><type><name>int16</name></type> <name>amprocnum</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>argtype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>result</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>restype</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int16</name></type>		<name>nargs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_proc</name></type> <name>procform</name></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>amprocnum</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>HASHSTANDARD_PROC</name></expr>:</case>
			<expr_stmt><expr><name>restype</name> <operator>=</operator> <name>INT4OID</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>nargs</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>HASHEXTENDED_PROC</name></expr>:</case>
			<expr_stmt><expr><name>restype</name> <operator>=</operator> <name>INT8OID</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>nargs</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<break>break;</break>

		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid amprocnum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<expr_stmt><expr><name>tp</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>PROCOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>funcid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for function %u"</literal></expr></argument>, <argument><expr><name>funcid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>procform</name> <operator>=</operator> <operator>(</operator><name>Form_pg_proc</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>procform</name><operator>-&gt;</operator><name>prorettype</name></name> <operator>!=</operator> <name>restype</name> <operator>||</operator> <name><name>procform</name><operator>-&gt;</operator><name>proretset</name></name> <operator>||</operator>
		<name><name>procform</name><operator>-&gt;</operator><name>pronargs</name></name> <operator>!=</operator> <name>nargs</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsBinaryCoercible</name><argument_list>(<argument><expr><name>argtype</name></expr></argument>, <argument><expr><name><name>procform</name><operator>-&gt;</operator><name>proargtypes</name><operator>.</operator><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Some of the built-in hash opclasses cheat by using hash functions
		 * that are different from but physically compatible with the opclass
		 * datatype.  In some of these cases, even a "binary coercible" check
		 * fails because there's no relevant cast.  For the moment, fix it by
		 * having a whitelist of allowed cases.  Test the specific function
		 * identity, not just its input type, because hashvarlena() takes
		 * INTERNAL and allowing any such function seems too scary.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>funcid</name> <operator>==</operator> <name>F_HASHINT4</name> <operator>||</operator> <name>funcid</name> <operator>==</operator> <name>F_HASHINT4EXTENDED</name><operator>)</operator> <operator>&amp;&amp;</operator>
			<operator>(</operator><name>argtype</name> <operator>==</operator> <name>DATEOID</name> <operator>||</operator>
			 <name>argtype</name> <operator>==</operator> <name>ABSTIMEOID</name> <operator>||</operator> <name>argtype</name> <operator>==</operator> <name>RELTIMEOID</name> <operator>||</operator>
			 <name>argtype</name> <operator>==</operator> <name>XIDOID</name> <operator>||</operator> <name>argtype</name> <operator>==</operator> <name>CIDOID</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			 <comment type="block">/* okay, allowed use of hashint4() */</comment> <empty_stmt>;</empty_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><operator>(</operator><name>funcid</name> <operator>==</operator> <name>F_TIMESTAMP_HASH</name> <operator>||</operator>
				  <name>funcid</name> <operator>==</operator> <name>F_TIMESTAMP_HASH_EXTENDED</name><operator>)</operator> <operator>&amp;&amp;</operator>
				 <name>argtype</name> <operator>==</operator> <name>TIMESTAMPTZOID</name></expr>)</condition><block type="pseudo"><block_content>
			 <comment type="block">/* okay, allowed use of timestamp_hash() */</comment> <empty_stmt>;</empty_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><operator>(</operator><name>funcid</name> <operator>==</operator> <name>F_HASHCHAR</name> <operator>||</operator> <name>funcid</name> <operator>==</operator> <name>F_HASHCHAREXTENDED</name><operator>)</operator> <operator>&amp;&amp;</operator>
				 <name>argtype</name> <operator>==</operator> <name>BOOLOID</name></expr>)</condition><block type="pseudo"><block_content>
			 <comment type="block">/* okay, allowed use of hashchar() */</comment> <empty_stmt>;</empty_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><operator>(</operator><name>funcid</name> <operator>==</operator> <name>F_HASHVARLENA</name> <operator>||</operator> <name>funcid</name> <operator>==</operator> <name>F_HASHVARLENAEXTENDED</name><operator>)</operator> <operator>&amp;&amp;</operator>
				 <name>argtype</name> <operator>==</operator> <name>BYTEAOID</name></expr>)</condition><block type="pseudo"><block_content>
			 <comment type="block">/* okay, allowed use of hashvarlena() */</comment> <empty_stmt>;</empty_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* If function takes a second argument, it must be for a 64-bit salt. */</comment>
	<if_stmt><if>if <condition>(<expr><name>nargs</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>procform</name><operator>-&gt;</operator><name>proargtypes</name><operator>.</operator><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>INT8OID</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
</unit>
