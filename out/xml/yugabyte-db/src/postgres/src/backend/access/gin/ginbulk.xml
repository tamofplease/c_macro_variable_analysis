<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/backend/access/gin/ginbulk.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * ginbulk.c
 *	  routines for fast build of inverted index
 *
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *			src/backend/access/gin/ginbulk.c
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/gin_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/datum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_NENTRY</name></cpp:macro>	<cpp:value>2048</cpp:value></cpp:define>		<comment type="block">/* GinEntryAccumulator allocation quantum */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_NPTR</name></cpp:macro>	<cpp:value>5</cpp:value></cpp:define>			<comment type="block">/* ItemPointer initial allocation quantum */</comment>


<comment type="block">/* Combiner function for rbtree.c */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ginCombineData</name><parameter_list>(<parameter><decl><type><name>RBTNode</name> <modifier>*</modifier></type><name>existing</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RBTNode</name> <modifier>*</modifier></type><name>newdata</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GinEntryAccumulator</name> <modifier>*</modifier></type><name>eo</name> <init>= <expr><operator>(</operator><name>GinEntryAccumulator</name> <operator>*</operator><operator>)</operator> <name>existing</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>GinEntryAccumulator</name> <modifier>*</modifier></type><name>en</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>GinEntryAccumulator</name> <operator>*</operator><operator>)</operator> <name>newdata</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BuildAccumulator</name> <modifier>*</modifier></type><name>accum</name> <init>= <expr><operator>(</operator><name>BuildAccumulator</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Note this code assumes that newdata contains only one itempointer.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>eo</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;=</operator> <name><name>eo</name><operator>-&gt;</operator><name>maxcount</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>eo</name><operator>-&gt;</operator><name>maxcount</name></name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROGRAM_LIMIT_EXCEEDED</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"posting list is too long"</literal></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Reduce maintenance_work_mem."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>accum</name><operator>-&gt;</operator><name>allocatedMemory</name></name> <operator>-=</operator> <call><name>GetMemoryChunkSpace</name><argument_list>(<argument><expr><name><name>eo</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>eo</name><operator>-&gt;</operator><name>maxcount</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>eo</name><operator>-&gt;</operator><name>list</name></name> <operator>=</operator> <operator>(</operator><name>ItemPointerData</name> <operator>*</operator><operator>)</operator>
			<call><name>repalloc_huge</name><argument_list>(<argument><expr><name><name>eo</name><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ItemPointerData</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>eo</name><operator>-&gt;</operator><name>maxcount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>accum</name><operator>-&gt;</operator><name>allocatedMemory</name></name> <operator>+=</operator> <call><name>GetMemoryChunkSpace</name><argument_list>(<argument><expr><name><name>eo</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* If item pointers are not ordered, they will need to be sorted later */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>eo</name><operator>-&gt;</operator><name>shouldSort</name></name> <operator>==</operator> <name>false</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ginCompareItemPointers</name><argument_list>(<argument><expr><name><name>eo</name><operator>-&gt;</operator><name>list</name></name> <operator>+</operator> <name><name>eo</name><operator>-&gt;</operator><name>count</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>en</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>res</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>eo</name><operator>-&gt;</operator><name>shouldSort</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>eo</name><operator>-&gt;</operator><name>list</name><index>[<expr><name><name>eo</name><operator>-&gt;</operator><name>count</name></name></expr>]</index></name> <operator>=</operator> <name><name>en</name><operator>-&gt;</operator><name>list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eo</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Comparator function for rbtree.c */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>cmpEntryAccumulator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>RBTNode</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RBTNode</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>GinEntryAccumulator</name> <modifier>*</modifier></type><name>ea</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>GinEntryAccumulator</name> <operator>*</operator><operator>)</operator> <name>a</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>GinEntryAccumulator</name> <modifier>*</modifier></type><name>eb</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>GinEntryAccumulator</name> <operator>*</operator><operator>)</operator> <name>b</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BuildAccumulator</name> <modifier>*</modifier></type><name>accum</name> <init>= <expr><operator>(</operator><name>BuildAccumulator</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>ginCompareAttEntries</name><argument_list>(<argument><expr><name><name>accum</name><operator>-&gt;</operator><name>ginstate</name></name></expr></argument>,
								<argument><expr><name><name>ea</name><operator>-&gt;</operator><name>attnum</name></name></expr></argument>, <argument><expr><name><name>ea</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>ea</name><operator>-&gt;</operator><name>category</name></name></expr></argument>,
								<argument><expr><name><name>eb</name><operator>-&gt;</operator><name>attnum</name></name></expr></argument>, <argument><expr><name><name>eb</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>eb</name><operator>-&gt;</operator><name>category</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Allocator function for rbtree.c */</comment>
<function><type><specifier>static</specifier> <name>RBTNode</name> <modifier>*</modifier></type>
<name>ginAllocEntryAccumulator</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BuildAccumulator</name> <modifier>*</modifier></type><name>accum</name> <init>= <expr><operator>(</operator><name>BuildAccumulator</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GinEntryAccumulator</name> <modifier>*</modifier></type><name>ea</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Allocate memory by rather big chunks to decrease overhead.  We have no
	 * need to reclaim RBTNodes individually, so this costs nothing.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>accum</name><operator>-&gt;</operator><name>entryallocator</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>accum</name><operator>-&gt;</operator><name>eas_used</name></name> <operator>&gt;=</operator> <name>DEF_NENTRY</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>accum</name><operator>-&gt;</operator><name>entryallocator</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GinEntryAccumulator</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>DEF_NENTRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>accum</name><operator>-&gt;</operator><name>allocatedMemory</name></name> <operator>+=</operator> <call><name>GetMemoryChunkSpace</name><argument_list>(<argument><expr><name><name>accum</name><operator>-&gt;</operator><name>entryallocator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>accum</name><operator>-&gt;</operator><name>eas_used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Allocate new RBTNode from current chunk */</comment>
	<expr_stmt><expr><name>ea</name> <operator>=</operator> <name><name>accum</name><operator>-&gt;</operator><name>entryallocator</name></name> <operator>+</operator> <name><name>accum</name><operator>-&gt;</operator><name>eas_used</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>accum</name><operator>-&gt;</operator><name>eas_used</name></name><operator>++</operator></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>RBTNode</name> <operator>*</operator><operator>)</operator> <name>ea</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ginInitBA</name><parameter_list>(<parameter><decl><type><name>BuildAccumulator</name> <modifier>*</modifier></type><name>accum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* accum-&gt;ginstate is intentionally not set here */</comment>
	<expr_stmt><expr><name><name>accum</name><operator>-&gt;</operator><name>allocatedMemory</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>accum</name><operator>-&gt;</operator><name>entryallocator</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>accum</name><operator>-&gt;</operator><name>eas_used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>accum</name><operator>-&gt;</operator><name>tree</name></name> <operator>=</operator> <call><name>rbt_create</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GinEntryAccumulator</name></expr></argument>)</argument_list></sizeof></expr></argument>,
							 <argument><expr><name>cmpEntryAccumulator</name></expr></argument>,
							 <argument><expr><name>ginCombineData</name></expr></argument>,
							 <argument><expr><name>ginAllocEntryAccumulator</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,	<comment type="block">/* no freefunc needed */</comment>
							 <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>accum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * This is basically the same as datumCopy(), but extended to count
 * palloc'd space in accum-&gt;allocatedMemory.
 */</comment>
<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>getDatumCopy</name><parameter_list>(<parameter><decl><type><name>BuildAccumulator</name> <modifier>*</modifier></type><name>accum</name></decl></parameter>, <parameter><decl><type><name>OffsetNumber</name></type> <name>attnum</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>att</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>res</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>att</name> <operator>=</operator> <call><name>TupleDescAttr</name><argument_list>(<argument><expr><name><name>accum</name><operator>-&gt;</operator><name>ginstate</name><operator>-&gt;</operator><name>origTupdesc</name></name></expr></argument>, <argument><expr><name>attnum</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>att</name><operator>-&gt;</operator><name>attbyval</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>datumCopy</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>att</name><operator>-&gt;</operator><name>attlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>accum</name><operator>-&gt;</operator><name>allocatedMemory</name></name> <operator>+=</operator> <call><name>GetMemoryChunkSpace</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Find/store one entry from indexed value.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ginInsertBAEntry</name><parameter_list>(<parameter><decl><type><name>BuildAccumulator</name> <modifier>*</modifier></type><name>accum</name></decl></parameter>,
				 <parameter><decl><type><name>ItemPointer</name></type> <name>heapptr</name></decl></parameter>, <parameter><decl><type><name>OffsetNumber</name></type> <name>attnum</name></decl></parameter>,
				 <parameter><decl><type><name>Datum</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>GinNullCategory</name></type> <name>category</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GinEntryAccumulator</name></type> <name>eatmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GinEntryAccumulator</name> <modifier>*</modifier></type><name>ea</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>isNew</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * For the moment, fill only the fields of eatmp that will be looked at by
	 * cmpEntryAccumulator or ginCombineData.
	 */</comment>
	<expr_stmt><expr><name><name>eatmp</name><operator>.</operator><name>attnum</name></name> <operator>=</operator> <name>attnum</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eatmp</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>eatmp</name><operator>.</operator><name>category</name></name> <operator>=</operator> <name>category</name></expr>;</expr_stmt>
	<comment type="block">/* temporarily set up single-entry itempointer list */</comment>
	<expr_stmt><expr><name><name>eatmp</name><operator>.</operator><name>list</name></name> <operator>=</operator> <name>heapptr</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>ea</name> <operator>=</operator> <operator>(</operator><name>GinEntryAccumulator</name> <operator>*</operator><operator>)</operator> <call><name>rbt_insert</name><argument_list>(<argument><expr><name><name>accum</name><operator>-&gt;</operator><name>tree</name></name></expr></argument>, <argument><expr><operator>(</operator><name>RBTNode</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>eatmp</name></expr></argument>,
											<argument><expr><operator>&amp;</operator><name>isNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>isNew</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Finish initializing new tree entry, including making permanent
		 * copies of the datum (if it's not null) and itempointer.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>category</name> <operator>==</operator> <name>GIN_CAT_NORM_KEY</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <call><name>getDatumCopy</name><argument_list>(<argument><expr><name>accum</name></expr></argument>, <argument><expr><name>attnum</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>maxcount</name></name> <operator>=</operator> <name>DEF_NPTR</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>shouldSort</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>list</name></name> <operator>=</operator>
			<operator>(</operator><name>ItemPointerData</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ItemPointerData</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>DEF_NPTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ea</name><operator>-&gt;</operator><name>list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>heapptr</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>accum</name><operator>-&gt;</operator><name>allocatedMemory</name></name> <operator>+=</operator> <call><name>GetMemoryChunkSpace</name><argument_list>(<argument><expr><name><name>ea</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * ginCombineData did everything needed.
		 */</comment>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Insert the entries for one heap pointer.
 *
 * Since the entries are being inserted into a balanced binary tree, you
 * might think that the order of insertion wouldn't be critical, but it turns
 * out that inserting the entries in sorted order results in a lot of
 * rebalancing operations and is slow.  To prevent this, we attempt to insert
 * the nodes in an order that will produce a nearly-balanced tree if the input
 * is in fact sorted.
 *
 * We do this as follows.  First, we imagine that we have an array whose size
 * is the smallest power of two greater than or equal to the actual array
 * size.  Second, we insert the middle entry of our virtual array into the
 * tree; then, we insert the middles of each half of our virtual array, then
 * middles of quarters, etc.
 */</comment>
<function><type><name>void</name></type>
<name>ginInsertBAEntries</name><parameter_list>(<parameter><decl><type><name>BuildAccumulator</name> <modifier>*</modifier></type><name>accum</name></decl></parameter>,
				   <parameter><decl><type><name>ItemPointer</name></type> <name>heapptr</name></decl></parameter>, <parameter><decl><type><name>OffsetNumber</name></type> <name>attnum</name></decl></parameter>,
				   <parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>entries</name></decl></parameter>, <parameter><decl><type><name>GinNullCategory</name> <modifier>*</modifier></type><name>categories</name></decl></parameter>,
				   <parameter><decl><type><name>int32</name></type> <name>nentries</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>step</name> <init>= <expr><name>nentries</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>nentries</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>ItemPointerIsValid</name><argument_list>(<argument><expr><name>heapptr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>attnum</name> <operator>&gt;=</operator> <name>FirstOffsetNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * step will contain largest power of 2 and &lt;= nentries
	 */</comment>
	<expr_stmt><expr><name>step</name> <operator>|=</operator> <operator>(</operator><name>step</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>step</name> <operator>|=</operator> <operator>(</operator><name>step</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>step</name> <operator>|=</operator> <operator>(</operator><name>step</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>step</name> <operator>|=</operator> <operator>(</operator><name>step</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>step</name> <operator>|=</operator> <operator>(</operator><name>step</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>step</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>step</name><operator>++</operator></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>step</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>step</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nentries</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>step</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></incr> <comment type="block">/* *2 */</comment> )</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ginInsertBAEntry</name><argument_list>(<argument><expr><name>accum</name></expr></argument>, <argument><expr><name>heapptr</name></expr></argument>, <argument><expr><name>attnum</name></expr></argument>,
							 <argument><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>categories</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

		<expr_stmt><expr><name>step</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>				<comment type="block">/* /2 */</comment>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>qsortCompareItemPointers</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name> <init>= <expr><call><name>ginCompareItemPointers</name><argument_list>(<argument><expr><operator>(</operator><name>ItemPointer</name><operator>)</operator> <name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>ItemPointer</name><operator>)</operator> <name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Assert that there are no equal item pointers being sorted */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>res</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Prepare to read out the rbtree contents using ginGetBAEntry */</comment>
<function><type><name>void</name></type>
<name>ginBeginBAScan</name><parameter_list>(<parameter><decl><type><name>BuildAccumulator</name> <modifier>*</modifier></type><name>accum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>rbt_begin_iterate</name><argument_list>(<argument><expr><name><name>accum</name><operator>-&gt;</operator><name>tree</name></name></expr></argument>, <argument><expr><name>LeftRightWalk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>accum</name><operator>-&gt;</operator><name>tree_walk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Get the next entry in sequence from the BuildAccumulator's rbtree.
 * This consists of a single key datum and a list (array) of one or more
 * heap TIDs in which that key is found.  The list is guaranteed sorted.
 */</comment>
<function><type><name>ItemPointerData</name> <modifier>*</modifier></type>
<name>ginGetBAEntry</name><parameter_list>(<parameter><decl><type><name>BuildAccumulator</name> <modifier>*</modifier></type><name>accum</name></decl></parameter>,
			  <parameter><decl><type><name>OffsetNumber</name> <modifier>*</modifier></type><name>attnum</name></decl></parameter>, <parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>GinNullCategory</name> <modifier>*</modifier></type><name>category</name></decl></parameter>,
			  <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GinEntryAccumulator</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ItemPointerData</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>(</operator><name>GinEntryAccumulator</name> <operator>*</operator><operator>)</operator> <call><name>rbt_iterate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>accum</name><operator>-&gt;</operator><name>tree_walk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>			<comment type="block">/* no more entries */</comment>

	<expr_stmt><expr><operator>*</operator><name>attnum</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>attnum</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>key</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>category</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>category</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>list</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>list</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>n</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>list</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>entry</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>shouldSort</name></name> <operator>&amp;&amp;</operator> <name><name>entry</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ItemPointerData</name></expr></argument>)</argument_list></sizeof></expr></argument>,
			  <argument><expr><name>qsortCompareItemPointers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>
</unit>
