<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/backend/optimizer/geqo/geqo_cx.c"><comment type="block">/*------------------------------------------------------------------------
*
* geqo_cx.c
*
*	 cycle crossover [CX] routines;
*	 CX operator according to Oliver et al
*	 (Proc 2nd Int'l Conf on GA's)
*
* src/backend/optimizer/geqo/geqo_cx.c
*
*-------------------------------------------------------------------------
*/</comment>

<comment type="block">/* contributed by:
   =*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=
   *  Martin Utesch				 * Institute of Automatic Control	   *
   =							 = University of Mining and Technology =
   *  utesch@aut.tu-freiberg.de  * Freiberg, Germany				   *
   =*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=
 */</comment>

<comment type="block">/* the cx algorithm is adopted from Genitor : */</comment>
<comment type="block" format="doxygen">/*************************************************************/</comment>
<comment type="block">/*															 */</comment>
<comment type="block">/*	Copyright (c) 1990										 */</comment>
<comment type="block">/*	Darrell L. Whitley										 */</comment>
<comment type="block">/*	Computer Science Department								 */</comment>
<comment type="block">/*	Colorado State University								 */</comment>
<comment type="block">/*															 */</comment>
<comment type="block">/*	Permission is hereby granted to copy all or any part of  */</comment>
<comment type="block">/*	this program for free distribution.   The author's name  */</comment>
<comment type="block">/*	and this copyright notice must be included in any copy.  */</comment>
<comment type="block">/*															 */</comment>
<comment type="block" format="doxygen">/*************************************************************/</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/geqo_recombination.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/geqo_random.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block">/* cx
 *
 *	 cycle crossover
 */</comment>
<function><type><name>int</name></type>
<name>cx</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>Gene</name> <modifier>*</modifier></type><name>tour1</name></decl></parameter>, <parameter><decl><type><name>Gene</name> <modifier>*</modifier></type><name>tour2</name></decl></parameter>, <parameter><decl><type><name>Gene</name> <modifier>*</modifier></type><name>offspring</name></decl></parameter>,
   <parameter><decl><type><name>int</name></type> <name>num_gene</name></decl></parameter>, <parameter><decl><type><name>City</name> <modifier>*</modifier></type> <name>city_table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>start_pos</name></decl>,
				<decl><type ref="prev"/><name>curr_pos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>num_diffs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* initialize city table */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>num_gene</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>city_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>used</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>city_table</name><index>[<expr><name><name>tour2</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>tour2_position</name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>city_table</name><index>[<expr><name><name>tour1</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>tour1_position</name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* choose random cycle starting position */</comment>
	<expr_stmt><expr><name>start_pos</name> <operator>=</operator> <call><name>geqo_randint</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>num_gene</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* child inherits first city  */</comment>
	<expr_stmt><expr><name><name>offspring</name><index>[<expr><name>start_pos</name></expr>]</index></name> <operator>=</operator> <name><name>tour1</name><index>[<expr><name>start_pos</name></expr>]</index></name></expr>;</expr_stmt>

	<comment type="block">/* begin cycle with tour1 */</comment>
	<expr_stmt><expr><name>curr_pos</name> <operator>=</operator> <name>start_pos</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>city_table</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>tour1</name><index>[<expr><name>start_pos</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>used</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

	<comment type="block">/* cx main part */</comment>


<comment type="block">/* STEP 1 */</comment>

	<while>while <condition>(<expr><name><name>tour2</name><index>[<expr><name>curr_pos</name></expr>]</index></name> <operator>!=</operator> <name><name>tour1</name><index>[<expr><name>start_pos</name></expr>]</index></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>city_table</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>tour2</name><index>[<expr><name>curr_pos</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>used</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>curr_pos</name> <operator>=</operator> <name><name>city_table</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>tour2</name><index>[<expr><name>curr_pos</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>tour1_position</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>offspring</name><index>[<expr><name>curr_pos</name></expr>]</index></name> <operator>=</operator> <name><name>tour1</name><index>[<expr><name>curr_pos</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>


<comment type="block">/* STEP 2 */</comment>

	<comment type="block">/* failed to create a complete tour */</comment>
	<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;</operator> <name>num_gene</name></expr>)</condition>
	<block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>num_gene</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>city_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>used</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>offspring</name><index>[<expr><name><name>city_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tour2_position</name></expr>]</index></name> <operator>=</operator>
					<name><name>tour2</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>city_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tour2_position</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>


<comment type="block">/* STEP 3 */</comment>

	<comment type="block">/* still failed to create a complete tour */</comment>
	<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;</operator> <name>num_gene</name></expr>)</condition>
	<block>{<block_content>

		<comment type="block">/* count the number of differences between mom and offspring */</comment>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_gene</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<if_stmt><if>if <condition>(<expr><name><name>tour1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>offspring</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>num_diffs</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>num_diffs</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* defined(CX) */</comment>
</unit>
