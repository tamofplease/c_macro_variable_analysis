<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/backend/optimizer/util/ybcplan.c"><comment type="block">/*--------------------------------------------------------------------------------------------------
 *
 * ybcplan.c
 *	  Utilities for YugaByte scan.
 *
 * Copyright (c) YugaByte, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.  See the License for the specific language governing permissions and limitations
 * under the License.
 *
 * src/backend/executor/ybcplan.c
 *
 *--------------------------------------------------------------------------------------------------
 */</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/ybcExpr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/makefuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/nodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/plannodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/print.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/relation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/datum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>

<comment type="block">/* YB includes. */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/yb_catalog_version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/ybcplan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"yb/yql/pggate/ybc_pggate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_yb_utils.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Check if statement can be implemented by a single request to the DocDB.
 *
 * An insert, update, or delete command makes one or more write requests to
 * the DocDB to apply the changes, and may also make read requests to find
 * the target row, its id, current values, etc. Complex expressions (e.g.
 * subqueries, stored functions) may also make requests to DocDB.
 *
 * Typically multiple requests require a transaction to maintain consistency.
 * However, if the command is about to make single write request, it is OK to
 * skip the transaction. The ModifyTable plan node makes one write request per
 * row it fetches from its subplans, therefore the key criteria of single row
 * modify is a single Result plan node in the ModifyTable's plans list.
 * Plain Result plan node produces exactly one row without making requests to
 * the DocDB, unless it has a subplan or complex expressions to evaluate.
 *
 * Full list of the conditions we check here:
 *  - there is only one target table;
 *  - there is no ON CONFLICT clause;
 *  - there is no init plan;
 *  - there is only one source plan, which is a simple form of Result;
 *  - all expressions in the Result's target list and in the returning list are
 *    simple, that means they do not need to access the DocDB.
 *
 * Additionally, during execution we will also check:
 *  - not in transaction block;
 *  - is a single-plan execution;
 *  - target table has no triggers to fire;
 *  - target table has no indexes to update.
 * And if all are true we will execute this op as a single-row transaction
 * rather than a distributed transaction.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>ModifyTableIsSingleRowWrite</name><parameter_list>(<parameter><decl><type><name>ModifyTable</name> <modifier>*</modifier></type><name>modifyTable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Support INSERT, UPDATE, and DELETE. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>modifyTable</name><operator>-&gt;</operator><name>operation</name></name> <operator>!=</operator> <name>CMD_INSERT</name> <operator>&amp;&amp;</operator>
		<name><name>modifyTable</name><operator>-&gt;</operator><name>operation</name></name> <operator>!=</operator> <name>CMD_UPDATE</name> <operator>&amp;&amp;</operator>
		<name><name>modifyTable</name><operator>-&gt;</operator><name>operation</name></name> <operator>!=</operator> <name>CMD_DELETE</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Multi-relation implies multi-shard. */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>modifyTable</name><operator>-&gt;</operator><name>resultRelations</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* ON CONFLICT clause may require another write request */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>modifyTable</name><operator>-&gt;</operator><name>onConflictAction</name></name> <operator>!=</operator> <name>ONCONFLICT_NONE</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Init plan execution would require request(s) to DocDB */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>modifyTable</name><operator>-&gt;</operator><name>plan</name><operator>.</operator><name>initPlan</name></name> <operator>!=</operator> <name>NIL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Check the data source is a single plan */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>modifyTable</name><operator>-&gt;</operator><name>plans</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>Plan</name> <modifier>*</modifier></type><name>plan</name> <init>= <expr><operator>(</operator><name>Plan</name> <operator>*</operator><operator>)</operator> <call><name>linitial</name><argument_list>(<argument><expr><name><name>modifyTable</name><operator>-&gt;</operator><name>plans</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Only Result plan without a subplan produces single tuple without making
	 * DocDB requests
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>Result</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>outerPlan</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Complex expressions in the target list may require DocDB requests */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>YbIsTransactionalExpr</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>plan</name><operator>-&gt;</operator><name>targetlist</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Same for the returning expressions */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>YbIsTransactionalExpr</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>modifyTable</name><operator>-&gt;</operator><name>returningLists</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* If all our checks passed return true */</comment>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>YBCIsSingleRowModify</name><parameter_list>(<parameter><decl><type><name>PlannedStmt</name> <modifier>*</modifier></type><name>pstmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>pstmt</name><operator>-&gt;</operator><name>planTree</name></name> <operator>&amp;&amp;</operator> <call><name>IsA</name><argument_list>(<argument><expr><name><name>pstmt</name><operator>-&gt;</operator><name>planTree</name></name></expr></argument>, <argument><expr><name>ModifyTable</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ModifyTable</name> <modifier>*</modifier></type><name>node</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>ModifyTable</name></expr></argument>, <argument><expr><name><name>pstmt</name><operator>-&gt;</operator><name>planTree</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><call><name>ModifyTableIsSingleRowWrite</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Returns true if this ModifyTable can be executed by a single RPC, without
 * an initial table scan fetching a target tuple.
 *
 * Right now, this is true iff:
 *  - it is UPDATE or DELETE command.
 *  - source data is a Result node (meaning we are skipping scan and thus
 *    are single row).
 */</comment>
<function><type><name>bool</name></type> <name>YbCanSkipFetchingTargetTupleForModifyTable</name><parameter_list>(<parameter><decl><type><name>ModifyTable</name> <modifier>*</modifier></type><name>modifyTable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Support UPDATE and DELETE. */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>modifyTable</name><operator>-&gt;</operator><name>operation</name></name> <operator>!=</operator> <name>CMD_UPDATE</name> <operator>&amp;&amp;</operator>
		<name><name>modifyTable</name><operator>-&gt;</operator><name>operation</name></name> <operator>!=</operator> <name>CMD_DELETE</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Should only have one data source. */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>modifyTable</name><operator>-&gt;</operator><name>plans</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Verify the single data source is a Result node and does not have outer plan.
	 * Note that Result node never has inner plan.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><call><name>linitial</name><argument_list>(<argument><expr><name><name>modifyTable</name><operator>-&gt;</operator><name>plans</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Result</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>outerPlan</name><argument_list>(<argument><expr><call><name>linitial</name><argument_list>(<argument><expr><name><name>modifyTable</name><operator>-&gt;</operator><name>plans</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Returns true if provided Bitmapset of attribute numbers
 * matches the primary key attribute numbers of the relation.
 * Expects YBGetFirstLowInvalidAttributeNumber to be subtracted from attribute numbers.
 */</comment>
<function><type><name>bool</name></type> <name>YBCAllPrimaryKeysProvided</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>Bitmapset</name> <modifier>*</modifier></type><name>attrs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>bms_is_empty</name><argument_list>(<argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * If we don't explicitly check for empty attributes it is possible
		 * for this function to improperly return true. This is because in the
		 * case where a table does not have any primary key attributes we will
		 * use a hidden RowId column which is not exposed to the PG side, so
		 * both the YB primary key attributes and the input attributes would
		 * appear empty and would be equal, even though this is incorrect as
		 * the YB table has the hidden RowId primary key column.
		 */</comment>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>Bitmapset</name> <modifier>*</modifier></type><name>primary_key_attrs</name> <init>= <expr><call><name>YBGetTablePrimaryKeyBms</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Verify the sets are the same. */</comment>
	<return>return <expr><call><name>bms_equal</name><argument_list>(<argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>primary_key_attrs</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
