<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/backend/optimizer/geqo/geqo_main.c"><comment type="block">/*------------------------------------------------------------------------
 *
 * geqo_main.c
 *	  solution to the query optimization problem
 *	  by means of a Genetic Algorithm (GA)
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * src/backend/optimizer/geqo/geqo_main.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<comment type="block">/* contributed by:
   =*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=
   *  Martin Utesch				 * Institute of Automatic Control	   *
   =							 = University of Mining and Technology =
   *  utesch@aut.tu-freiberg.de  * Freiberg, Germany				   *
   =*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=
 */</comment>

<comment type="block">/* -- parts of this are adapted from D. Whitley's Genitor algorithm -- */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/geqo_misc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/geqo_mutation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/geqo_pool.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/geqo_random.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/geqo_selection.h"</cpp:file></cpp:include>


<comment type="block">/*
 * Configuration options
 */</comment>
<decl_stmt><decl><type><name>int</name></type>			<name>Geqo_effort</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>Geqo_pool_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>Geqo_generations</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type>		<name>Geqo_selection_bias</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type>		<name>Geqo_seed</name></decl>;</decl_stmt>


<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>gimme_pool_size</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nr_rel</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>gimme_number_generations</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pool_size</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* complain if no recombination mechanism is #define'd */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ERX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> \
	<operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PMX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> \
	<operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>CX</name></expr></argument>)</argument_list></call>  <operator>&amp;&amp;</operator> \
	<operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PX</name></expr></argument>)</argument_list></call>  <operator>&amp;&amp;</operator> \
	<operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OX1</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> \
	<operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>OX2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"must choose one GEQO recombination mechanism in geqo.h"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/*
 * geqo
 *	  solution of the query optimization problem
 *	  similar to a constrained Traveling Salesman Problem (TSP)
 */</comment>

<function><type><name>RelOptInfo</name> <modifier>*</modifier></type>
<name>geqo</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>number_of_rels</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>initial_rels</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GeqoPrivateData</name></type> <name>private</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>generation</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Chromosome</name> <modifier>*</modifier></type><name>momma</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Chromosome</name> <modifier>*</modifier></type><name>daddy</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Chromosome</name> <modifier>*</modifier></type><name>kid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pool</name>	   <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>pool_size</name></decl>,
				<decl><type ref="prev"/><name>number_generations</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GEQO_DEBUG</name></cpp:ifdef>
	<decl_stmt><decl><type><name>int</name></type>			<name>status_interval</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name>Gene</name>	   <modifier>*</modifier></type><name>best_tour</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>best_rel</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ERX</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<decl_stmt><decl><type><name>Edge</name>	   <modifier>*</modifier></type><name>edge_table</name></decl>;</decl_stmt>		<comment type="block">/* list of edges */</comment>
	<function_decl><type><name>int</name>			<name>edge_failures</name></type> <name>pg_attribute_unused</name><parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>OX1</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>OX2</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<decl_stmt><decl><type><name>City</name>	   <modifier>*</modifier></type><name>city_table</name></decl>;</decl_stmt>		<comment type="block">/* list of cities */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CX</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<decl_stmt><decl><type><name>int</name></type>			<name>cycle_diffs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>mutations</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* set up private information */</comment>
	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>join_search_private</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>private</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>private</name><operator>.</operator><name>initial_rels</name></name> <operator>=</operator> <name>initial_rels</name></expr>;</expr_stmt>

<comment type="block">/* initialize private number generator */</comment>
	<expr_stmt><expr><call><name>geqo_set_seed</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>Geqo_seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* set GA parameters */</comment>
	<expr_stmt><expr><name>pool_size</name> <operator>=</operator> <call><name>gimme_pool_size</name><argument_list>(<argument><expr><name>number_of_rels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>number_generations</name> <operator>=</operator> <call><name>gimme_number_generations</name><argument_list>(<argument><expr><name>pool_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GEQO_DEBUG</name></cpp:ifdef>
	<expr_stmt><expr><name>status_interval</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* allocate genetic pool memory */</comment>
	<expr_stmt><expr><name>pool</name> <operator>=</operator> <call><name>alloc_pool</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>pool_size</name></expr></argument>, <argument><expr><name>number_of_rels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* random initialization of the pool */</comment>
	<expr_stmt><expr><call><name>random_init_pool</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* sort the pool according to cheapest path as fitness */</comment>
	<expr_stmt><expr><call><name>sort_pool</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* we have to do it only one time, since all
								 * kids replace the worst individuals in
								 * future (-&gt; geqo_pool.c:spread_chromo ) */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GEQO_DEBUG</name></cpp:ifdef>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"GEQO selected %d pool entries, best %.2f, worst %.2f"</literal></expr></argument>,
		 <argument><expr><name>pool_size</name></expr></argument>,
		 <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>worth</name></expr></argument>,
		 <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>pool_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>worth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* allocate chromosome momma and daddy memory */</comment>
	<expr_stmt><expr><name>momma</name> <operator>=</operator> <call><name>alloc_chromo</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>string_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>daddy</name> <operator>=</operator> <call><name>alloc_chromo</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>string_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>ERX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GEQO_DEBUG</name></cpp:ifdef>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>, <argument><expr><literal type="string">"using edge recombination crossover [ERX]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* allocate edge table memory */</comment>
	<expr_stmt><expr><name>edge_table</name> <operator>=</operator> <call><name>alloc_edge_table</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>string_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PMX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GEQO_DEBUG</name></cpp:ifdef>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>, <argument><expr><literal type="string">"using partially matched crossover [PMX]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* allocate chromosome kid memory */</comment>
	<expr_stmt><expr><name>kid</name> <operator>=</operator> <call><name>alloc_chromo</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>string_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GEQO_DEBUG</name></cpp:ifdef>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>, <argument><expr><literal type="string">"using cycle crossover [CX]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* allocate city table memory */</comment>
	<expr_stmt><expr><name>kid</name> <operator>=</operator> <call><name>alloc_chromo</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>string_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>city_table</name> <operator>=</operator> <call><name>alloc_city_table</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>string_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GEQO_DEBUG</name></cpp:ifdef>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>, <argument><expr><literal type="string">"using position crossover [PX]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* allocate city table memory */</comment>
	<expr_stmt><expr><name>kid</name> <operator>=</operator> <call><name>alloc_chromo</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>string_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>city_table</name> <operator>=</operator> <call><name>alloc_city_table</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>string_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OX1</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GEQO_DEBUG</name></cpp:ifdef>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>, <argument><expr><literal type="string">"using order crossover [OX1]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* allocate city table memory */</comment>
	<expr_stmt><expr><name>kid</name> <operator>=</operator> <call><name>alloc_chromo</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>string_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>city_table</name> <operator>=</operator> <call><name>alloc_city_table</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>string_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OX2</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GEQO_DEBUG</name></cpp:ifdef>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>, <argument><expr><literal type="string">"using order crossover [OX2]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* allocate city table memory */</comment>
	<expr_stmt><expr><name>kid</name> <operator>=</operator> <call><name>alloc_chromo</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>string_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>city_table</name> <operator>=</operator> <call><name>alloc_city_table</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>string_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/* my pain main part: */</comment>
<comment type="block">/* iterative optimization */</comment>

	<for>for <control>(<init><expr><name>generation</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>generation</name> <operator>&lt;</operator> <name>number_generations</name></expr>;</condition> <incr><expr><name>generation</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="block">/* SELECTION: using linear bias function */</comment>
		<expr_stmt><expr><call><name>geqo_selection</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>momma</name></expr></argument>, <argument><expr><name>daddy</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>Geqo_selection_bias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>ERX</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<comment type="block">/* EDGE RECOMBINATION CROSSOVER */</comment>
		<expr_stmt><expr><call><name>gimme_edge_table</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>momma</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>daddy</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>string_length</name></name></expr></argument>, <argument><expr><name>edge_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>kid</name> <operator>=</operator> <name>momma</name></expr>;</expr_stmt>

		<comment type="block">/* are there any edge failures ? */</comment>
		<expr_stmt><expr><name>edge_failures</name> <operator>+=</operator> <call><name>gimme_tour</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>edge_table</name></expr></argument>, <argument><expr><name><name>kid</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>string_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PMX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
		<comment type="block">/* PARTIALLY MATCHED CROSSOVER */</comment>
		<expr_stmt><expr><call><name>pmx</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>momma</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>daddy</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>kid</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>string_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
		<comment type="block">/* CYCLE CROSSOVER */</comment>
		<expr_stmt><expr><name>cycle_diffs</name> <operator>=</operator> <call><name>cx</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>momma</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>daddy</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>kid</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>string_length</name></name></expr></argument>, <argument><expr><name>city_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* mutate the child */</comment>
		<if_stmt><if>if <condition>(<expr><name>cycle_diffs</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>mutations</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>geqo_mutation</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>kid</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>string_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
		<comment type="block">/* POSITION CROSSOVER */</comment>
		<expr_stmt><expr><call><name>px</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>momma</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>daddy</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>kid</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>string_length</name></name></expr></argument>, <argument><expr><name>city_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OX1</name></expr></argument>)</argument_list></call></expr></cpp:elif>
		<comment type="block">/* ORDER CROSSOVER */</comment>
		<expr_stmt><expr><call><name>ox1</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>momma</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>daddy</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>kid</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>string_length</name></name></expr></argument>, <argument><expr><name>city_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OX2</name></expr></argument>)</argument_list></call></expr></cpp:elif>
		<comment type="block">/* ORDER CROSSOVER */</comment>
		<expr_stmt><expr><call><name>ox2</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>momma</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>daddy</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>kid</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>string_length</name></name></expr></argument>, <argument><expr><name>city_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


		<comment type="block">/* EVALUATE FITNESS */</comment>
		<expr_stmt><expr><name><name>kid</name><operator>-&gt;</operator><name>worth</name></name> <operator>=</operator> <call><name>geqo_eval</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>kid</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>string_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* push the kid into the wilderness of life according to its worth */</comment>
		<expr_stmt><expr><call><name>spread_chromo</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GEQO_DEBUG</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><name>status_interval</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>generation</name> <operator>%</operator> <name>status_interval</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>print_gen</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>generation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	</block_content>}</block></for>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ERX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GEQO_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><name>edge_failures</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"[GEQO] failures: %d, average: %d"</literal></expr></argument>,
			 <argument><expr><name>edge_failures</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>number_generations</name> <operator>/</operator> <name>edge_failures</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"[GEQO] no edge failures detected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CX</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>GEQO_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<if_stmt><if>if <condition>(<expr><name>mutations</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"[GEQO] mutations: %d, generations: %d"</literal></expr></argument>,
			 <argument><expr><name>mutations</name></expr></argument>, <argument><expr><name>number_generations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"[GEQO] no mutations processed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GEQO_DEBUG</name></cpp:ifdef>
	<expr_stmt><expr><call><name>print_pool</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pool_size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GEQO_DEBUG</name></cpp:ifdef>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"GEQO best is %.2f after %d generations"</literal></expr></argument>,
		 <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>worth</name></expr></argument>, <argument><expr><name>number_generations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


	<comment type="block">/*
	 * got the cheapest query tree processed by geqo; first element of the
	 * population indicates the best query tree
	 */</comment>
	<expr_stmt><expr><name>best_tour</name> <operator>=</operator> <operator>(</operator><name>Gene</name> <operator>*</operator><operator>)</operator> <name><name>pool</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>string</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>best_rel</name> <operator>=</operator> <call><name>gimme_tree</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>best_tour</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>string_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>best_rel</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"geqo failed to make a valid plan"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* DBG: show the query plan */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NOT_USED</name></cpp:ifdef>
	<expr_stmt><expr><call><name>print_plan</name><argument_list>(<argument><expr><name>best_plan</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* ... free memory stuff */</comment>
	<expr_stmt><expr><call><name>free_chromo</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>momma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free_chromo</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>daddy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>ERX</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<expr_stmt><expr><call><name>free_edge_table</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>edge_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PMX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<expr_stmt><expr><call><name>free_chromo</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<expr_stmt><expr><call><name>free_chromo</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free_city_table</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>city_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PX</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<expr_stmt><expr><call><name>free_chromo</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free_city_table</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>city_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OX1</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<expr_stmt><expr><call><name>free_chromo</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free_city_table</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>city_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OX2</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<expr_stmt><expr><call><name>free_chromo</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>kid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free_city_table</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>city_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>free_pool</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ... clear root pointer to our private storage */</comment>
	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>join_search_private</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<return>return <expr><name>best_rel</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Return either configured pool size or a good default
 *
 * The default is based on query size (no. of relations) = 2^(QS+1),
 * but constrained to a range based on the effort value.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>gimme_pool_size</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nr_rel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>double</name></type>		<name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>minsize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>maxsize</name></decl>;</decl_stmt>

	<comment type="block">/* Legal pool size *must* be at least 2, so ignore attempt to select 1 */</comment>
	<if_stmt><if>if <condition>(<expr><name>Geqo_pool_size</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>Geqo_pool_size</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><name>nr_rel</name> <operator>+</operator> <literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>maxsize</name> <operator>=</operator> <literal type="number">50</literal> <operator>*</operator> <name>Geqo_effort</name></expr>;</expr_stmt> <comment type="block">/* 50 to 500 individuals */</comment>
	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>maxsize</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>maxsize</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>minsize</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>Geqo_effort</name></expr>;</expr_stmt> <comment type="block">/* 10 to 100 individuals */</comment>
	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <name>minsize</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>minsize</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>ceil</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Return either configured number of generations or a good default
 *
 * The default is the same as the pool size, which allows us to be
 * sure that less-fit individuals get pushed out of the breeding
 * population before the run finishes.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>gimme_number_generations</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pool_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>Geqo_generations</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>Geqo_generations</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>pool_size</name></expr>;</return>
</block_content>}</block></function>
</unit>
