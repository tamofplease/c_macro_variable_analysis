<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/backend/ybgate/ybgate_api.c"><comment type="line">//--------------------------------------------------------------------------------------------------</comment>
<comment type="line">// Copyright (c) YugaByte, Inc.</comment>
<comment type="line">//</comment>
<comment type="line">// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except</comment>
<comment type="line">// in compliance with the License.  You may obtain a copy of the License at</comment>
<comment type="line">//</comment>
<comment type="line">// http://www.apache.org/licenses/LICENSE-2.0</comment>
<comment type="line">//</comment>
<comment type="line">// Unless required by applicable law or agreed to in writing, software distributed under the License</comment>
<comment type="line">// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express</comment>
<comment type="line">// or implied.  See the License for the specific language governing permissions and limitations</comment>
<comment type="line">// under the License.</comment>
<comment type="line">//--------------------------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ybgate/ybgate_api.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type_d.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/yb_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/execExpr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mb/pg_wchar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/execnodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/makefuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/nodeFuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/primnodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/numeric.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rowtypes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/sampling.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>

<function><type><name>YbgStatus</name></type> <name>YbgInit</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_SETUP_ERROR_REPORTING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SetDatabaseEncoding</name><argument_list>(<argument><expr><name>PG_UTF8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>PG_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//-----------------------------------------------------------------------------</comment>
<comment type="line">// Memory Context</comment>
<comment type="line">//-----------------------------------------------------------------------------</comment>


<function><type><name>YbgStatus</name></type> <name>YbgGetCurrentMemoryContext</name><parameter_list>(<parameter><decl><type><name>YbgMemoryContext</name> <modifier>*</modifier></type><name>memctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_SETUP_ERROR_REPORTING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>memctx</name> <operator>=</operator> <call><name>GetThreadLocalCurrentMemoryContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>PG_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>YbgStatus</name></type> <name>YbgSetCurrentMemoryContext</name><parameter_list>(<parameter><decl><type><name>YbgMemoryContext</name></type> <name>memctx</name></decl></parameter>,
									 <parameter><decl><type><name>YbgMemoryContext</name> <modifier>*</modifier></type><name>oldctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_SETUP_ERROR_REPORTING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>YbgMemoryContext</name></type> <name>prev</name> <init>= <expr><call><name>SetThreadLocalCurrentMemoryContext</name><argument_list>(<argument><expr><name>memctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>oldctx</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>oldctx</name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>PG_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>YbgStatus</name></type> <name>YbgCreateMemoryContext</name><parameter_list>(<parameter><decl><type><name>YbgMemoryContext</name></type> <name>parent</name></decl></parameter>,
								 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
								 <parameter><decl><type><name>YbgMemoryContext</name> <modifier>*</modifier></type><name>memctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_SETUP_ERROR_REPORTING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>memctx</name> <operator>=</operator> <call><name>CreateThreadLocalCurrentMemoryContext</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>PG_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>YbgStatus</name></type> <name>YbgPrepareMemoryContext</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_SETUP_ERROR_REPORTING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PrepareThreadLocalCurrentMemoryContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>PG_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>YbgStatus</name></type> <name>YbgResetMemoryContext</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_SETUP_ERROR_REPORTING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ResetThreadLocalCurrentMemoryContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>PG_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>YbgStatus</name></type> <name>YbgDeleteMemoryContext</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_SETUP_ERROR_REPORTING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DeleteThreadLocalCurrentMemoryContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>PG_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//-----------------------------------------------------------------------------</comment>
<comment type="line">// Types</comment>
<comment type="line">//-----------------------------------------------------------------------------</comment>

<function><type><name>YbgStatus</name></type> <name>YbgGetTypeTable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>YBCPgTypeEntity</name> <modifier>*</modifier><modifier>*</modifier></type><name>type_table</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_SETUP_ERROR_REPORTING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>YbGetTypeTable</name><argument_list>(<argument><expr><name>type_table</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>PG_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>YbgStatus</name></type>
<name>YbgGetPrimitiveTypeOid</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>type_oid</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>typtype</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>typbasetype</name></decl></parameter>,
					   <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>primitive_type_oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_SETUP_ERROR_REPORTING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>primitive_type_oid</name> <operator>=</operator> <call><name>YbGetPrimitiveTypeOid</name><argument_list>(<argument><expr><name>type_oid</name></expr></argument>, <argument><expr><name>typtype</name></expr></argument>, <argument><expr><name>typbasetype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>PG_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//-----------------------------------------------------------------------------</comment>
<comment type="line">// Expression Evaluation</comment>
<comment type="line">//-----------------------------------------------------------------------------</comment>

<comment type="block">/*
 * Expression context for evaluating a YSQL expression from DocDB.
 * Currently includes the table row values to resolve scan variables.
 * TODO Eventually this should probably also have schema/type information.
 */</comment>
<struct>struct <name>YbgExprContextData</name>
<block>{
	<comment type="line">// Values from table row.</comment>
	<decl_stmt><decl><type><name>int32_t</name></type> <name>min_attno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32_t</name></type> <name>max_attno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name> <modifier>*</modifier></type><name>attr_vals</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Bitmapset</name> <modifier>*</modifier></type><name>attr_nulls</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/*
 * Evaluate an expression against an expression context.
 * Currently assumes the expression has been checked by the planner to only
 * allow immutable functions and the node types handled below.
 * TODO: this should use the general YSQL/PG expression evaluation framework, but
 * that requires syscaches and other dependencies to be fully initialized.
 */</comment>
<function><type><specifier>static</specifier> <name>Datum</name></type> <name>evalExpr</name><parameter_list>(<parameter><decl><type><name>YbgExprContext</name></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>Expr</name><modifier>*</modifier></type> <name>expr</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>is_null</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name><name>expr</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>T_FuncExpr</name></expr>:</case>
		<case>case <expr><name>T_OpExpr</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Oid</name></type>			<name>funcid</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Oid</name></type>			<name>inputcollid</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>args</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

			<comment type="block">/* Get the (underlying) function info. */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>expr</name></expr></argument>, <argument><expr><name>FuncExpr</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>FuncExpr</name> <modifier>*</modifier></type><name>func_expr</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>FuncExpr</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>args</name> <operator>=</operator> <name><name>func_expr</name><operator>-&gt;</operator><name>args</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>funcid</name> <operator>=</operator> <name><name>func_expr</name><operator>-&gt;</operator><name>funcid</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>inputcollid</name> <operator>=</operator> <name><name>func_expr</name><operator>-&gt;</operator><name>inputcollid</name></name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else <comment type="block">/* (IsA(expr, OpExpr)) */</comment>
			<block>{<block_content>
				<decl_stmt><decl><type><name>OpExpr</name> <modifier>*</modifier></type><name>op_expr</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>OpExpr</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>args</name> <operator>=</operator> <name><name>op_expr</name><operator>-&gt;</operator><name>args</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>funcid</name> <operator>=</operator> <name><name>op_expr</name><operator>-&gt;</operator><name>opfuncid</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>inputcollid</name> <operator>=</operator> <name><name>op_expr</name><operator>-&gt;</operator><name>inputcollid</name></name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>

			<decl_stmt><decl><type><name>FmgrInfo</name> <modifier>*</modifier></type><name>flinfo</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FmgrInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>FunctionCallInfoData</name></type> <name>fcinfo</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>fmgr_info</name><argument_list>(<argument><expr><name>funcid</name></expr></argument>, <argument><expr><name>flinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>InitFunctionCallInfoData</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>,
									 <argument><expr><name>flinfo</name></expr></argument>,
									 <argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>,
									 <argument><expr><name>inputcollid</name></expr></argument>,
									 <argument><expr><name>NULL</name></expr></argument>,
									 <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>args</argument>)</argument_list></macro>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Expr</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>fcinfo</name><operator>.</operator><name>arg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>evalExpr</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fcinfo</name><operator>.</operator><name>argnull</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/*
				 * Strict functions are guaranteed to return NULL if any of
				 * their arguments are NULL.
				 */</comment>
				<if_stmt><if>if <condition>(<expr><name><name>flinfo</name><operator>-&gt;</operator><name>fn_strict</name></name> <operator>&amp;&amp;</operator> <name><name>fcinfo</name><operator>.</operator><name>argnull</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><operator>*</operator><name>is_null</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
					<return>return <expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</return>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block>
			<decl_stmt><decl><type><name>Datum</name></type> <name>result</name> <init>= <expr><call><name>FunctionCallInvoke</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fcinfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><operator>*</operator><name>is_null</name> <operator>=</operator> <name><name>fcinfo</name><operator>.</operator><name>isnull</name></name></expr>;</expr_stmt>
			<return>return <expr><name>result</name></expr>;</return>
		</block_content>}</block>
		<case>case <expr><name>T_RelabelType</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>RelabelType</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>RelabelType</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<return>return <expr><call><name>evalExpr</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>rt</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><name>is_null</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block>
		<case>case <expr><name>T_NullTest</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>NullTest</name>   <modifier>*</modifier></type><name>nt</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>NullTest</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type>		<name>arg_is_null</name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>evalExpr</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>nt</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg_is_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>is_null</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><name>Datum</name><operator>)</operator> <operator>(</operator><name><name>nt</name><operator>-&gt;</operator><name>nulltesttype</name></name> <operator>==</operator> <name>IS_NULL</name><operator>)</operator> <operator>==</operator> <name>arg_is_null</name></expr>;</return>
		</block_content>}</block>
		<case>case <expr><name>T_BoolExpr</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>BoolExpr</name>   <modifier>*</modifier></type><name>be</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>BoolExpr</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Expr</name>	   <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Datum</name></type>		<name>arg_value</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type>		<name>arg_is_null</name></decl>;</decl_stmt>
			<switch>switch <condition>(<expr><name><name>be</name><operator>-&gt;</operator><name>boolop</name></name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>AND_EXPR</name></expr>:</case>
					<expr_stmt><expr><operator>*</operator><name>is_null</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
					<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>be-&gt;args</argument>)</argument_list></macro>
					<block>{<block_content>
						<expr_stmt><expr><name>arg</name> <operator>=</operator> <operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>arg_value</name> <operator>=</operator> <call><name>evalExpr</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg_is_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><name>arg_is_null</name></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><operator>*</operator><name>is_null</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
						</block_content>}</block></if>
						<if type="elseif">else if <condition>(<expr><operator>!</operator><name>arg_value</name></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><operator>*</operator><name>is_null</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
							<return>return <expr><operator>(</operator><name>Datum</name><operator>)</operator> <name>false</name></expr>;</return>
						</block_content>}</block></if></if_stmt>
					</block_content>}</block>
					<return>return <expr><ternary><condition><expr><operator>*</operator><name>is_null</name></expr> ?</condition><then> <expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name>Datum</name><operator>)</operator> <name>true</name></expr></else></ternary></expr>;</return>
				<case>case <expr><name>OR_EXPR</name></expr>:</case>
					<expr_stmt><expr><operator>*</operator><name>is_null</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
					<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>be-&gt;args</argument>)</argument_list></macro>
					<block>{<block_content>
						<expr_stmt><expr><name>arg</name> <operator>=</operator> <operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>arg_value</name> <operator>=</operator> <call><name>evalExpr</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg_is_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><name>arg_is_null</name></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><operator>*</operator><name>is_null</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
						</block_content>}</block></if>
						<if type="elseif">else if <condition>(<expr><name>arg_value</name></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><operator>*</operator><name>is_null</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
							<return>return <expr><operator>(</operator><name>Datum</name><operator>)</operator> <name>true</name></expr>;</return>
						</block_content>}</block></if></if_stmt>
					</block_content>}</block>
					<return>return <expr><ternary><condition><expr><operator>*</operator><name>is_null</name></expr> ?</condition><then> <expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name>Datum</name><operator>)</operator> <name>false</name></expr></else></ternary></expr>;</return>
				<case>case <expr><name>NOT_EXPR</name></expr>:</case>
					<expr_stmt><expr><name>arg</name> <operator>=</operator> <operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <call><name>linitial</name><argument_list>(<argument><expr><name><name>be</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>arg_value</name> <operator>=</operator> <call><name>evalExpr</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>is_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><ternary><condition><expr><operator>*</operator><name>is_null</name></expr> ?</condition><then> <expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name>Datum</name><operator>)</operator> <operator>(</operator><operator>!</operator><name>arg_value</name><operator>)</operator></expr></else></ternary></expr>;</return>
				<default>default:</default>
					<comment type="block">/* Planner should ensure we never get here. */</comment>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name>errmsg</name><argument_list>(
						<argument><expr><literal type="string">"Unsupported boolop received by DocDB"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
			</block_content>}</block></switch>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block>
		<case>case <expr><name>T_CaseExpr</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>CaseExpr</name>   <modifier>*</modifier></type><name>ce</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>CaseExpr</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
			<comment type="block">/*
			 * Support for implicit equality comparison would require catalog
			 * lookup to find equality operation for the argument data type.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>ce</name><operator>-&gt;</operator><name>arg</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name>errmsg</name><argument_list>(
					<argument><expr><literal type="string">"Unsupported CASE expression received by DocDB"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<comment type="block">/*
			 * Evaluate WHEN clause expressions one by one, if any evaluation
			 * result is true, evaluate and return respective result expression
			 */</comment>
			<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>ce-&gt;args</argument>)</argument_list></macro>
			<block>{<block_content>
				<decl_stmt><decl><type><name>CaseWhen</name> <modifier>*</modifier></type><name>cw</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>CaseWhen</name></expr></argument>, <argument><expr><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>bool</name></type> <name>arg_is_null</name></decl>;</decl_stmt>
				<if_stmt><if>if <condition>(<expr><call><name>evalExpr</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>cw</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arg_is_null</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><call><name>evalExpr</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>cw</name><operator>-&gt;</operator><name>result</name></name></expr></argument>, <argument><expr><name>is_null</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
			</block_content>}</block>
			<comment type="block">/* None of the exprerssions was true, so evaluate the default. */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>ce</name><operator>-&gt;</operator><name>defresult</name></name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><call><name>evalExpr</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ce</name><operator>-&gt;</operator><name>defresult</name></name></expr></argument>, <argument><expr><name>is_null</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
			<comment type="block">/* If default is not specified, return NULL */</comment>
			<expr_stmt><expr><operator>*</operator><name>is_null</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<return>return <expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</return>
		</block_content>}</block>
		<case>case <expr><name>T_Const</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Const</name><modifier>*</modifier></type> <name>const_expr</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>Const</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><operator>*</operator><name>is_null</name> <operator>=</operator> <name><name>const_expr</name><operator>-&gt;</operator><name>constisnull</name></name></expr>;</expr_stmt>
			<return>return <expr><name><name>const_expr</name><operator>-&gt;</operator><name>constvalue</name></name></expr>;</return>
		</block_content>}</block>
		<case>case <expr><name>T_Var</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Var</name><modifier>*</modifier></type> <name>var_expr</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>Var</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int32_t</name></type> <name>att_idx</name> <init>= <expr><name><name>var_expr</name><operator>-&gt;</operator><name>varattno</name></name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>min_attno</name></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><operator>*</operator><name>is_null</name> <operator>=</operator> <call><name>bms_is_member</name><argument_list>(<argument><expr><name>att_idx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>attr_nulls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>attr_vals</name><index>[<expr><name>att_idx</name></expr>]</index></name></expr>;</return>
		</block_content>}</block>
		<default>default:</default>
			<comment type="block">/* Planner should ensure we never get here. */</comment>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name>errmsg</name><argument_list>(
				<argument><expr><literal type="string">"Unsupported YSQL expression received by DocDB"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
	<expr_stmt><expr><operator>*</operator><name>is_null</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>YbgStatus</name></type> <name>YbgExprContextCreate</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>min_attno</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>max_attno</name></decl></parameter>, <parameter><decl><type><name>YbgExprContext</name> <modifier>*</modifier></type><name>expr_ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_SETUP_ERROR_REPORTING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>YbgExprContext</name></type> <name>ctx</name> <init>= <expr><operator>(</operator><name>YbgExprContext</name><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>YbgExprContextData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>min_attno</name></name> <operator>=</operator> <name>min_attno</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>max_attno</name></name> <operator>=</operator> <name>max_attno</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int32_t</name></type> <name>num_attrs</name> <init>= <expr><name>max_attno</name> <operator>-</operator> <name>min_attno</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>attr_vals</name></name> <operator>=</operator> <operator>(</operator><name>Datum</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>num_attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>attr_nulls</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>expr_ctx</name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
	<return>return <expr><name>PG_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>YbgStatus</name></type> <name>YbgExprContextReset</name><parameter_list>(<parameter><decl><type><name>YbgExprContext</name></type> <name>expr_ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_SETUP_ERROR_REPORTING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int32_t</name></type> <name>num_attrs</name> <init>= <expr><name><name>expr_ctx</name><operator>-&gt;</operator><name>max_attno</name></name> <operator>-</operator> <name><name>expr_ctx</name><operator>-&gt;</operator><name>min_attno</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>expr_ctx</name><operator>-&gt;</operator><name>attr_vals</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>num_attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>expr_ctx</name><operator>-&gt;</operator><name>attr_nulls</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<return>return <expr><name>PG_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>YbgStatus</name></type> <name>YbgExprContextAddColValue</name><parameter_list>(<parameter><decl><type><name>YbgExprContext</name></type> <name>expr_ctx</name></decl></parameter>,
                                    <parameter><decl><type><name>int32_t</name></type> <name>attno</name></decl></parameter>,
                                    <parameter><decl><type><name>uint64_t</name></type> <name>datum</name></decl></parameter>,
                                    <parameter><decl><type><name>bool</name></type> <name>is_null</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_SETUP_ERROR_REPORTING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>is_null</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>expr_ctx</name><operator>-&gt;</operator><name>attr_nulls</name></name> <operator>=</operator> <call><name>bms_add_member</name><argument_list>(<argument><expr><name><name>expr_ctx</name><operator>-&gt;</operator><name>attr_nulls</name></name></expr></argument>, <argument><expr><name>attno</name> <operator>-</operator> <name><name>expr_ctx</name><operator>-&gt;</operator><name>min_attno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>expr_ctx</name><operator>-&gt;</operator><name>attr_vals</name><index>[<expr><name>attno</name> <operator>-</operator> <name><name>expr_ctx</name><operator>-&gt;</operator><name>min_attno</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Datum</name><operator>)</operator> <name>datum</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>PG_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>YbgStatus</name></type> <name>YbgPrepareExpr</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>expr_cstring</name></decl></parameter>, <parameter><decl><type><name>YbgPreparedExpr</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_SETUP_ERROR_REPORTING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>expr</name> <operator>=</operator> <operator>(</operator><name>YbgPreparedExpr</name><operator>)</operator> <call><name>stringToNode</name><argument_list>(<argument><expr><name>expr_cstring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>PG_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>YbgStatus</name></type> <name>YbgExprType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>YbgPreparedExpr</name></type> <name>expr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>typid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_SETUP_ERROR_REPORTING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>typid</name> <operator>=</operator> <call><name>exprType</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>PG_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>YbgStatus</name></type> <name>YbgExprTypmod</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>YbgPreparedExpr</name></type> <name>expr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>typmod</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_SETUP_ERROR_REPORTING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>typmod</name> <operator>=</operator> <call><name>exprTypmod</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>PG_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>YbgStatus</name></type> <name>YbgExprCollation</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>YbgPreparedExpr</name></type> <name>expr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>collid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_SETUP_ERROR_REPORTING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>collid</name> <operator>=</operator> <call><name>exprCollation</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>PG_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>YbgStatus</name></type> <name>YbgEvalExpr</name><parameter_list>(<parameter><decl><type><name>YbgPreparedExpr</name></type> <name>expr</name></decl></parameter>, <parameter><decl><type><name>YbgExprContext</name></type> <name>expr_ctx</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>datum</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>is_null</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_SETUP_ERROR_REPORTING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>datum</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <call><name>evalExpr</name><argument_list>(<argument><expr><name>expr_ctx</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>, <argument><expr><name>is_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>PG_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>YbgStatus</name></type> <name>YbgSplitArrayDatum</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>datum</name></decl></parameter>,
			     <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>type</name></decl></parameter>,
			     <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>result_datum_array</name></decl></parameter>,
			     <parameter><decl><type><name>int</name> <modifier>*</modifier><specifier>const</specifier></type> <name>nelems</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_SETUP_ERROR_REPORTING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ArrayType</name>  <modifier>*</modifier></type><name>arr</name> <init>= <expr><call><name>DatumGetArrayTypeP</name><argument_list>(<argument><expr><operator>(</operator><name>Datum</name><operator>)</operator><name>datum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ARR_NDIM</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <call><name>ARR_HASNULL</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>ARR_ELEMTYPE</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>type</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>PG_STATUS</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Type of given datum array does not match the given type"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<decl_stmt><decl><type><name>int32</name></type> <name>elmlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>elmbyval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>elmalign</name></decl>;</decl_stmt>
	<comment type="block">/*
	 * Ideally this information should come from pg_type or from caller instead of hardcoding
	 * here. However this could be okay as PG also has this harcoded in few places.
	 */</comment>
	<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>TEXTOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XMLOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>LINEOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>CIRCLEOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>CASHOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>BOOLOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>BYTEAOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>CHAROID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>NAMEOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>INT2OID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'s'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>INT2VECTOROID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>INT4OID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>REGPROCOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>OIDOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TIDOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ItemPointerData</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XIDOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TransactionId</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>CIDOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CommandId</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>OIDVECTOROID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>BPCHAROID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>VARCHAROID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>INT8OID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>POINTOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>LSEGOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PATHOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>BOXOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>FLOAT4OID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>FLOAT8OID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>FLOAT8PASSBYVAL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'d'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ABSTIMEOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RELTIMEOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TINTERVALOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACLITEMOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AclItem</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>MACADDROID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>MACADDR8OID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>INETOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>CSTRINGOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'c'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TIMESTAMPOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>DATEOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TIMEOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TIMESTAMPTZOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>INTERVALOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Interval</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'d'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>NUMERICOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TIMETZOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>BITOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>VARBITOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>REGPROCEDUREOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>REGOPEROID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>REGOPERATOROID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>REGCLASSOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>REGTYPEOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>REGROLEOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>REGNAMESPACEOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>UUIDOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>LSNOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TSVECTOROID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>GTSVECTOROID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TSQUERYOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>REGCONFIGOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>REGDICTIONARYOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>JSONBOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TXID_SNAPSHOTOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RECORDOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ANYOID</name></expr>:</case>
			<expr_stmt><expr><name>elmlen</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmbyval</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>elmalign</name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt>
			<break>break;</break>
		<comment type="block">/* TODO: Extend support to other types as well. */</comment>
		<default>default:</default>
			<return>return <expr><call><name>PG_STATUS</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Only Text type supported for split of datum of array types"</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></switch>
	<expr_stmt><expr><call><name>deconstruct_array</name><argument_list>(<argument><expr><name>arr</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>elmlen</name></expr></argument>, <argument><expr><name>elmbyval</name></expr></argument>, <argument><expr><name>elmalign</name></expr></argument>,
			  <argument><expr><operator>(</operator><name>Datum</name><operator>*</operator><operator>*</operator><operator>)</operator><name>result_datum_array</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> <comment type="block">/* nullsp */</comment>, <argument><expr><name>nelems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>PG_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//-----------------------------------------------------------------------------</comment>
<comment type="line">// Relation sampling</comment>
<comment type="line">//-----------------------------------------------------------------------------</comment>

<struct>struct <name>YbgReservoirStateData</name> <block>{
	<decl_stmt><decl><type><name>ReservoirStateData</name></type> <name>rs</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>YbgStatus</name></type> <name>YbgSamplerCreate</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>rstate_w</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>randstate</name></decl></parameter>, <parameter><decl><type><name>YbgReservoirState</name> <modifier>*</modifier></type><name>yb_rs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_SETUP_ERROR_REPORTING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>YbgReservoirState</name></type> <name>rstate</name> <init>= <expr><operator>(</operator><name>YbgReservoirState</name><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>YbgReservoirStateData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>rstate</name><operator>-&gt;</operator><name>rs</name><operator>.</operator><name>W</name></name> <operator>=</operator> <name>rstate_w</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Uint64ToSamplerRandomState</name><argument_list>(<argument><expr><name><name>rstate</name><operator>-&gt;</operator><name>rs</name><operator>.</operator><name>randstate</name></name></expr></argument>, <argument><expr><name>randstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>yb_rs</name> <operator>=</operator> <name>rstate</name></expr>;</expr_stmt>
	<return>return <expr><name>PG_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>YbgStatus</name></type> <name>YbgSamplerGetState</name><parameter_list>(<parameter><decl><type><name>YbgReservoirState</name></type> <name>yb_rs</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>rstate_w</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>randstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_SETUP_ERROR_REPORTING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>rstate_w</name> <operator>=</operator> <name><name>yb_rs</name><operator>-&gt;</operator><name>rs</name><operator>.</operator><name>W</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>randstate</name> <operator>=</operator> <call><name>SamplerRandomStateToUint64</name><argument_list>(<argument><expr><name><name>yb_rs</name><operator>-&gt;</operator><name>rs</name><operator>.</operator><name>randstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>PG_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>YbgStatus</name></type> <name>YbgSamplerRandomFract</name><parameter_list>(<parameter><decl><type><name>YbgReservoirState</name></type> <name>yb_rs</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_SETUP_ERROR_REPORTING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ReservoirState</name></type> <name>rs</name> <init>= <expr><operator>&amp;</operator><name><name>yb_rs</name><operator>-&gt;</operator><name>rs</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <call><name>sampler_random_fract</name><argument_list>(<argument><expr><name><name>rs</name><operator>-&gt;</operator><name>randstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>PG_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>YbgStatus</name></type> <name>YbgReservoirGetNextS</name><parameter_list>(<parameter><decl><type><name>YbgReservoirState</name></type> <name>yb_rs</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_SETUP_ERROR_REPORTING</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <call><name>reservoir_get_next_S</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>yb_rs</name><operator>-&gt;</operator><name>rs</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>PG_STATUS_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>DecodeDatum</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>fn_name</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name>datum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FmgrInfo</name>   <modifier>*</modifier></type><name>finfo</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>finfo</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FmgrInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>id</name> <init>= <expr><call><name>fmgr_internal_function</name><argument_list>(<argument><expr><name>fn_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>fmgr_info</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>finfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><call><name>OutputFunctionCall</name><argument_list>(<argument><expr><name>finfo</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>datum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><name>tmp</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>DecodeTZDatum</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>fn_name</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name>datum</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>timezone</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>from_YB</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FmgrInfo</name>   <modifier>*</modifier></type><name>finfo</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>finfo</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FmgrInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>id</name> <init>= <expr><call><name>fmgr_internal_function</name><argument_list>(<argument><expr><name>fn_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>fmgr_info</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>finfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>DatumDecodeOptions</name></type> <name>decodeOptions</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>decodeOptions</name><operator>.</operator><name>timezone</name></name> <operator>=</operator> <name>timezone</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>decodeOptions</name><operator>.</operator><name>from_YB</name></name> <operator>=</operator> <name>from_YB</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>decodeOptions</name><operator>.</operator><name>range_datum_decode_options</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<return>return <expr><call><name>DatumGetCString</name><argument_list>(<argument><expr><call><name>FunctionCall2</name><argument_list>(<argument><expr><name>finfo</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>datum</name></expr></argument>,
				<argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decodeOptions</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>DecodeArrayDatum</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>arr_fn_name</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name>datum</name></decl></parameter>,
		<parameter><decl><type><name>int16_t</name></type> <name>elem_len</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>elem_by_val</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>elem_align</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>elem_delim</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>from_YB</name></decl></parameter>,
		<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>fn_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>timezone</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>option</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FmgrInfo</name>   <modifier>*</modifier></type><name>arr_finfo</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>arr_finfo</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FmgrInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>arr_id</name> <init>= <expr><call><name>fmgr_internal_function</name><argument_list>(<argument><expr><name>arr_fn_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>fmgr_info</name><argument_list>(<argument><expr><name>arr_id</name></expr></argument>, <argument><expr><name>arr_finfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>FmgrInfo</name>   <modifier>*</modifier></type><name>elem_finfo</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>elem_finfo</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FmgrInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>elem_id</name> <init>= <expr><call><name>fmgr_internal_function</name><argument_list>(<argument><expr><name>fn_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>fmgr_info</name><argument_list>(<argument><expr><name>elem_id</name></expr></argument>, <argument><expr><name>elem_finfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>DatumDecodeOptions</name></type> <name>decodeOptions</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>decodeOptions</name><operator>.</operator><name>is_array</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>decodeOptions</name><operator>.</operator><name>elem_by_val</name></name> <operator>=</operator> <name>elem_by_val</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>decodeOptions</name><operator>.</operator><name>from_YB</name></name> <operator>=</operator> <name>from_YB</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>decodeOptions</name><operator>.</operator><name>elem_align</name></name> <operator>=</operator> <name>elem_align</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>decodeOptions</name><operator>.</operator><name>elem_delim</name></name> <operator>=</operator> <name>elem_delim</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>decodeOptions</name><operator>.</operator><name>option</name></name> <operator>=</operator> <name>option</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>decodeOptions</name><operator>.</operator><name>elem_len</name></name> <operator>=</operator> <name>elem_len</name></expr>;</expr_stmt>
	<comment type="line">//decodeOptions.datum = datum;</comment>
	<expr_stmt><expr><name><name>decodeOptions</name><operator>.</operator><name>elem_finfo</name></name> <operator>=</operator> <name>elem_finfo</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>decodeOptions</name><operator>.</operator><name>timezone</name></name> <operator>=</operator> <name>timezone</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>decodeOptions</name><operator>.</operator><name>range_datum_decode_options</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><call><name>DatumGetCString</name><argument_list>(<argument><expr><call><name>FunctionCall2</name><argument_list>(<argument><expr><name>arr_finfo</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>datum</name></expr></argument>,
				<argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decodeOptions</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><name>tmp</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>DecodeRangeDatum</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>range_fn_name</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name>datum</name></decl></parameter>,
		<parameter><decl><type><name>int16_t</name></type> <name>elem_len</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>elem_by_val</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>elem_align</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>option</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>from_YB</name></decl></parameter>,
		<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>elem_fn_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>range_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>timezone</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FmgrInfo</name>   <modifier>*</modifier></type><name>range_finfo</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>range_finfo</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FmgrInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>range_id</name> <init>= <expr><call><name>fmgr_internal_function</name><argument_list>(<argument><expr><name>range_fn_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>fmgr_info</name><argument_list>(<argument><expr><name>range_id</name></expr></argument>, <argument><expr><name>range_finfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>FmgrInfo</name>   <modifier>*</modifier></type><name>elem_finfo</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>elem_finfo</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FmgrInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>elem_id</name> <init>= <expr><call><name>fmgr_internal_function</name><argument_list>(<argument><expr><name>elem_fn_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>fmgr_info</name><argument_list>(<argument><expr><name>elem_id</name></expr></argument>, <argument><expr><name>elem_finfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>DatumDecodeOptions</name></type> <name>decodeOptions</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>decodeOptions</name><operator>.</operator><name>is_array</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>decodeOptions</name><operator>.</operator><name>elem_by_val</name></name> <operator>=</operator> <name>elem_by_val</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>decodeOptions</name><operator>.</operator><name>from_YB</name></name> <operator>=</operator> <name>from_YB</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>decodeOptions</name><operator>.</operator><name>elem_align</name></name> <operator>=</operator> <name>elem_align</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>decodeOptions</name><operator>.</operator><name>option</name></name> <operator>=</operator> <name>option</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>decodeOptions</name><operator>.</operator><name>elem_len</name></name> <operator>=</operator> <name>elem_len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>decodeOptions</name><operator>.</operator><name>range_type</name></name> <operator>=</operator> <name>range_type</name></expr>;</expr_stmt>
	<comment type="line">//decodeOptions.datum = datum;</comment>
	<expr_stmt><expr><name><name>decodeOptions</name><operator>.</operator><name>elem_finfo</name></name> <operator>=</operator> <name>elem_finfo</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>decodeOptions</name><operator>.</operator><name>timezone</name></name> <operator>=</operator> <name>timezone</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>decodeOptions</name><operator>.</operator><name>range_datum_decode_options</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><call><name>DatumGetCString</name><argument_list>(<argument><expr><call><name>FunctionCall2</name><argument_list>(<argument><expr><name>range_finfo</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>datum</name></expr></argument>,
				<argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decodeOptions</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><name>tmp</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>DecodeRangeArrayDatum</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>arr_fn_name</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name>datum</name></decl></parameter>,
		<parameter><decl><type><name>int16_t</name></type> <name>elem_len</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>range_len</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>elem_by_val</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>range_by_val</name></decl></parameter>,
		<parameter><decl><type><name>char</name></type> <name>elem_align</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>range_align</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>elem_delim</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>option</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>range_option</name></decl></parameter>,
		<parameter><decl><type><name>bool</name></type> <name>from_YB</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>elem_fn_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>range_fn_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>range_type</name></decl></parameter>,
		<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>timezone</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FmgrInfo</name>   <modifier>*</modifier></type><name>arr_finfo</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>arr_finfo</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FmgrInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>arr_id</name> <init>= <expr><call><name>fmgr_internal_function</name><argument_list>(<argument><expr><name>arr_fn_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>fmgr_info</name><argument_list>(<argument><expr><name>arr_id</name></expr></argument>, <argument><expr><name>arr_finfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>FmgrInfo</name>   <modifier>*</modifier></type><name>range_finfo</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>range_finfo</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FmgrInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>range_id</name> <init>= <expr><call><name>fmgr_internal_function</name><argument_list>(<argument><expr><name>range_fn_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>fmgr_info</name><argument_list>(<argument><expr><name>range_id</name></expr></argument>, <argument><expr><name>range_finfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>FmgrInfo</name>   <modifier>*</modifier></type><name>elem_finfo</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>elem_finfo</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FmgrInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>elem_id</name> <init>= <expr><call><name>fmgr_internal_function</name><argument_list>(<argument><expr><name>elem_fn_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>fmgr_info</name><argument_list>(<argument><expr><name>elem_id</name></expr></argument>, <argument><expr><name>elem_finfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>DatumDecodeOptions</name></type> <name>range_decodeOptions</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>range_decodeOptions</name><operator>.</operator><name>is_array</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>range_decodeOptions</name><operator>.</operator><name>elem_by_val</name></name> <operator>=</operator> <name>range_by_val</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>range_decodeOptions</name><operator>.</operator><name>from_YB</name></name> <operator>=</operator> <name>from_YB</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>range_decodeOptions</name><operator>.</operator><name>elem_align</name></name> <operator>=</operator> <name>range_align</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>range_decodeOptions</name><operator>.</operator><name>option</name></name> <operator>=</operator> <name>range_option</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>range_decodeOptions</name><operator>.</operator><name>elem_len</name></name> <operator>=</operator> <name>range_len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>range_decodeOptions</name><operator>.</operator><name>range_type</name></name> <operator>=</operator> <name>range_type</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>range_decodeOptions</name><operator>.</operator><name>elem_finfo</name></name> <operator>=</operator> <name>range_finfo</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>range_decodeOptions</name><operator>.</operator><name>timezone</name></name> <operator>=</operator> <name>timezone</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>range_decodeOptions</name><operator>.</operator><name>range_datum_decode_options</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>DatumDecodeOptions</name></type> <name>arr_decodeOptions</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>arr_decodeOptions</name><operator>.</operator><name>is_array</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>arr_decodeOptions</name><operator>.</operator><name>elem_by_val</name></name> <operator>=</operator> <name>elem_by_val</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>arr_decodeOptions</name><operator>.</operator><name>from_YB</name></name> <operator>=</operator> <name>from_YB</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>arr_decodeOptions</name><operator>.</operator><name>elem_align</name></name> <operator>=</operator> <name>elem_align</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>arr_decodeOptions</name><operator>.</operator><name>elem_delim</name></name> <operator>=</operator> <name>elem_delim</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>arr_decodeOptions</name><operator>.</operator><name>option</name></name> <operator>=</operator> <name>option</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>arr_decodeOptions</name><operator>.</operator><name>elem_len</name></name> <operator>=</operator> <name>elem_len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>arr_decodeOptions</name><operator>.</operator><name>elem_finfo</name></name> <operator>=</operator> <name>elem_finfo</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>arr_decodeOptions</name><operator>.</operator><name>timezone</name></name> <operator>=</operator> <name>timezone</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>arr_decodeOptions</name><operator>.</operator><name>range_datum_decode_options</name></name> <operator>=</operator> <operator>&amp;</operator><name>range_decodeOptions</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><call><name>DatumGetCString</name><argument_list>(<argument><expr><call><name>FunctionCall2</name><argument_list>(<argument><expr><name>arr_finfo</name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>datum</name></expr></argument>,
				<argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arr_decodeOptions</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><name>tmp</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>DecodeRecordDatum</name><parameter_list>(<parameter><decl><type><name>uintptr_t</name></type> <name>datum</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>attrs</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>natts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FmgrInfo</name> <modifier>*</modifier></type><name>finfo</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FmgrInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>HeapTupleHeader</name></type> <name>rec</name> <init>= <expr><call><name>DatumGetHeapTupleHeader</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>				<name>tupType</name> <init>= <expr><call><name>HeapTupleHeaderGetTypeId</name><argument_list>(<argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>			<name>tupTypmod</name> <init>= <expr><call><name>HeapTupleHeaderGetTypMod</name><argument_list>(<argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>		<name>tupdesc</name> <init>= <expr><call><name>CreateTupleDesc</name><argument_list>(<argument><expr><name>natts</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>finfo</name><operator>-&gt;</operator><name>fn_extra</name></name> <operator>=</operator> <call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><call><name>GetCurrentMemoryContext</name><argument_list>()</argument_list></call></expr></argument>,
										 <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>RecordIOData</name></expr></argument>, <argument><expr><name>columns</name></expr></argument>)</argument_list></call> <operator>+</operator>
											 <name>natts</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ColumnIOData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>RecordIOData</name> <modifier>*</modifier></type><name>my_extra</name> <init>= <expr><operator>(</operator><name>RecordIOData</name> <operator>*</operator><operator>)</operator> <name><name>finfo</name><operator>-&gt;</operator><name>fn_extra</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>my_extra</name><operator>-&gt;</operator><name>record_type</name></name> <operator>=</operator> <name>tupType</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>my_extra</name><operator>-&gt;</operator><name>record_typmod</name></name> <operator>=</operator> <name>tupTypmod</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>my_extra</name><operator>-&gt;</operator><name>ncolumns</name></name> <operator>=</operator> <name>natts</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>natts</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ColumnIOData</name>	 <modifier>*</modifier></type><name>column_info</name> <init>= <expr><operator>&amp;</operator><name><name>my_extra</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>att</name> <init>= <expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>column_info</name><operator>-&gt;</operator><name>typiofunc</name></name> <operator>=</operator>
			<call><name>fmgr_internal_function</name><argument_list>(<argument><expr><call><name>GetOutFuncName</name><argument_list>(<argument><expr><name><name>att</name><operator>-&gt;</operator><name>atttypid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fmgr_info</name><argument_list>(<argument><expr><name><name>column_info</name><operator>-&gt;</operator><name>typiofunc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>column_info</name><operator>-&gt;</operator><name>proc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>column_info</name><operator>-&gt;</operator><name>column_type</name></name> <operator>=</operator> <name><name>att</name><operator>-&gt;</operator><name>atttypid</name></name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><call><name>DatumGetCString</name><argument_list>(<argument><expr><call><name>record_out_internal</name><argument_list>(<argument><expr><name>rec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tupdesc</name></expr></argument>, <argument><expr><name>finfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>GetOutFuncName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>pg_data_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>func_name</name></decl>;</decl_stmt>
	<switch>switch <condition>(<expr><name>pg_data_type</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>BOOLOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"boolout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>BYTEAOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"byteaout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>CHAROID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"charout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>NAMEOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"nameout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>INT8OID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"int8out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>INT2OID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"int2out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>INT4OID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"int4out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>REGPROCOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"regprocout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TEXTOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"textout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>OIDOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"oidout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TIDOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"tidout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XIDOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"xidout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>CIDOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"cidout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>JSONOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"json_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XMLOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"xml_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PGNODETREEOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"pg_node_tree_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PGNDISTINCTOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"pg_ndistinct_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PGDEPENDENCIESOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"pg_dependencies_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PGDDLCOMMANDOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"pg_ddl_command_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>SMGROID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"smgrout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>POINTOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"point_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>LSEGOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"lseg_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PATHOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"path_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>BOXOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"box_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>LINEOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"line_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>FLOAT4OID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"float4out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>FLOAT8OID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"float8out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>CIRCLEOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"circle_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>CASHOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"cash_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>MACADDROID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"macaddr_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>INETOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"inet_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>CIDROID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"cidr_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>MACADDR8OID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"macaddr8_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACLITEMOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"aclitemout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>BPCHAROID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"bpcharout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>VARCHAROID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"varcharout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>DATEOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"date_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TIMEOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"time_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TIMESTAMPOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"timestamp_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TIMESTAMPTZOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"timestamptz_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>INTERVALOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"interval_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TIMETZOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"timetz_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>BITOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"bit_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>VARBITOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"varbit_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>NUMERICOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"numeric_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>REGPROCEDUREOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"regprocedureout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>REGOPEROID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"regoperout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>REGOPERATOROID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"regoperatorout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>REGCLASSOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"regclassout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>REGTYPEOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"regtypeout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>REGROLEOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"regroleout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>REGNAMESPACEOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"regnamespaceout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>UUIDOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"uuid_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>LSNOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"pg_lsn_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TSQUERYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"tsqueryout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>REGCONFIGOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"regconfigout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>REGDICTIONARYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"regdictionaryout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>JSONBOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"jsonb_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TXID_SNAPSHOTOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"txid_snapshot_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RECORDOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"record_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>CSTRINGOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"cstring_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ANYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"any_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>VOIDOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"void_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TRIGGEROID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"trigger_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>EVTTRIGGEROID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"event_trigger_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>LANGUAGE_HANDLEROID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"language_handler_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>INTERNALOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"internal_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>OPAQUEOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"opaque_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ANYELEMENTOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"anyelement_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ANYNONARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"anynonarray_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ANYENUMOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"anyenum_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>FDW_HANDLEROID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"fdw_handler_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>INDEX_AM_HANDLEROID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"index_am_handler_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TSM_HANDLEROID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"tsm_handler_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ANYRANGEOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"anyrange_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>INT2VECTOROID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"int2vectorout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>OIDVECTOROID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"oidvectorout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TSVECTOROID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"tsvectorout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>GTSVECTOROID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"gtsvectorout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>POLYGONOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"poly_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>INT4RANGEOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"int4out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>NUMRANGEOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"numeric_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TSRANGEOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"timestamp_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TSTZRANGEOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"timestamptz_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>DATERANGEOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"date_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>INT8RANGEOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"int8out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XMLARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"xml_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>LINEARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"line_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>CIRCLEARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"circle_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>MONEYARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"cash_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>BOOLARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"boolout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>BYTEAARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"byteaout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>CHARARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"charout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>NAMEARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"nameout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>INT2ARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"int2out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>INT2VECTORARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"int2vectorout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>INT4ARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"int4out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>REGPROCARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"regprocout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TEXTARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"textout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>OIDARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"oidout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>CIDRARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"cidr_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TIDARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"tidout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XIDARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"xidout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>CIDARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"cidout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>OIDVECTORARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"oidvectorout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>BPCHARARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"bpcharout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>VARCHARARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"varcharout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>INT8ARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"int8out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>POINTARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"point_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>LSEGARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"lseg_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PATHARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"path_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>BOXARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"box_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>FLOAT4ARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"float4out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>FLOAT8ARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"float8out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ABSTIMEARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"abstimeout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RELTIMEARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"reltimeout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TINTERVALARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"tintervalout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ACLITEMARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"aclitemout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>MACADDRARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"macaddr_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>MACADDR8ARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"macaddr8_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>INETARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"inet_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>CSTRINGARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"cstring_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TIMESTAMPARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"timestamp_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>DATEARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"date_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TIMEARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"time_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TIMESTAMPTZARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"timestamptz_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>INTERVALARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"interval_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>NUMERICARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"numeric_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TIMETZARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"timetz_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>BITARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"bit_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>VARBITARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"varbit_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>REGPROCEDUREARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"regprocedureout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>REGOPERARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"regoperout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>REGOPERATORARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"regoperatorout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>REGCLASSARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"regclassout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>REGTYPEARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"regtypeout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>REGROLEARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"regroleout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>REGNAMESPACEARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"regnamespaceout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>UUIDARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"uuid_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PG_LSNARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"pg_lsn_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TSVECTORARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"tsvectorout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>GTSVECTORARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"gtsvectorout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TSQUERYARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"tsqueryout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>REGCONFIGARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"regconfigout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>REGDICTIONARYARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"regdictionaryout"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>JSONARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"json_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>JSONBARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"jsonb_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TXID_SNAPSHOTARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"txid_snapshot_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>RECORDARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"record_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ANYARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"any_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>POLYGONARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"poly_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>INT4RANGEARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"int4out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>NUMRANGEARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"numeric_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TSRANGEARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"timestamp_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TSTZRANGEARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"timestamptz_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>DATERANGEARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"date_out"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>INT8RANGEARRAYOID</name></expr>:</case>
			<expr_stmt><expr><name>func_name</name> <operator>=</operator> <literal type="string">"int8out"</literal></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
	<return>return <expr><name>func_name</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type>
<name>GetRecordTypeId</name><parameter_list>(<parameter><decl><type><name>uintptr_t</name></type> <name>datum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HeapTupleHeader</name></type> <name>rec</name> <init>= <expr><call><name>DatumGetHeapTupleHeader</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>HeapTupleHeaderGetTypeId</name><argument_list>(<argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>uintptr_t</name></type>
<name>HeapFormTuple</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>attrs</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>natts</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>nulls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TupleDesc</name></type> <name>tupdesc</name> <init>= <expr><call><name>CreateTupleDesc</name><argument_list>(<argument><expr><name>natts</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_HEAPTUPLEHEADER</name><argument_list>(<argument><expr><call><name>heap_form_tuple</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>t_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>HeapDeformTuple</name><parameter_list>(<parameter><decl><type><name>uintptr_t</name></type> <name>datum</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>attrs</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>natts</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name> <modifier>*</modifier></type><name>values</name></decl></parameter>,
				<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>nulls</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HeapTupleHeader</name></type> <name>rec</name> <init>= <expr><call><name>DatumGetHeapTupleHeader</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTupleData</name></type>	<name>tuple</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>tuple</name><operator>.</operator><name>t_len</name></name> <operator>=</operator> <call><name>HeapTupleHeaderGetDatumLength</name><argument_list>(<argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ItemPointerSetInvalid</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>tuple</name><operator>.</operator><name>t_self</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tuple</name><operator>.</operator><name>t_tableOid</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tuple</name><operator>.</operator><name>t_data</name></name> <operator>=</operator> <name>rec</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type> <name>tupdesc</name> <init>= <expr><call><name>CreateTupleDesc</name><argument_list>(<argument><expr><name>natts</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="block">/* Break down the tuple into fields */</comment>
	<expr_stmt><expr><call><name>heap_deform_tuple</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tuple</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
