<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/backend/port/dynloader/hpux.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * dynloader.c
 *	  dynamic loader for HP-UX using the shared library mechanism
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/port/dynloader/hpux.c
 *
 *	NOTES
 *		all functions are defined here -- it's impossible to trace the
 *		shl_* routines from the bundled HP-UX debugger.
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<comment type="block">/* System includes */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;a.out.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dynloader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/dynamic_loader.h"</cpp:file></cpp:include>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>pg_dlopen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Use BIND_IMMEDIATE so that undefined symbols cause a failure return
	 * from shl_load(), rather than an abort() later on when we attempt to
	 * call the library!
	 */</comment>
	<decl_stmt><decl><type><name>shl_t</name></type>		<name>handle</name> <init>= <expr><call><name>shl_load</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,
								  <argument><expr><name>BIND_IMMEDIATE</name> <operator>|</operator> <name>BIND_VERBOSE</name> <operator>|</operator> <name>DYNAMIC_PATH</name></expr></argument>,
								  <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>handle</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>PGFunction</name></type>
<name>pg_dlsym</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>funcname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGFunction</name></type>	<name>f</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>shl_findsym</name><argument_list>(<argument><expr><operator>(</operator><name>shl_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator> <name>handle</name></expr></argument>, <argument><expr><name>funcname</name></expr></argument>, <argument><expr><name>TYPE_PROCEDURE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>(</operator><name>PGFunction</name><operator>)</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>pg_dlclose</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>shl_unload</name><argument_list>(<argument><expr><operator>(</operator><name>shl_t</name><operator>)</operator> <name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>pg_dlerror</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>errmsg</name><index>[]</index></name> <init>= <expr><literal type="string">"shl_load failed"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>errno</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>errmsg</name></expr>;</return>
</block_content>}</block></function>
</unit>
