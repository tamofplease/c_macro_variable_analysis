<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/backend/statistics/extended_stats.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * extended_stats.c
 *	  POSTGRES extended statistics
 *
 * Generic code supporting statistics objects created via CREATE STATISTICS.
 *
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *	  src/backend/statistics/extended_stats.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/genam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/heapam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/indexing.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_collation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_statistic_ext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/relation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/autovacuum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"statistics/extended_stats_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"statistics/statistics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/fmgroids.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>


<comment type="block">/*
 * Used internally to refer to an individual statistics object, i.e.,
 * a pg_statistic_ext entry.
 */</comment>
<typedef>typedef <type><struct>struct <name>StatExtEntry</name>
<block>{
	<decl_stmt><decl><type><name>Oid</name></type>			<name>statOid</name></decl>;</decl_stmt>		<comment type="block">/* OID of pg_statistic_ext entry */</comment>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>schema</name></decl>;</decl_stmt>			<comment type="block">/* statistics object's schema */</comment>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>			<comment type="block">/* statistics object's name */</comment>
	<decl_stmt><decl><type><name>Bitmapset</name>  <modifier>*</modifier></type><name>columns</name></decl>;</decl_stmt>		<comment type="block">/* attribute numbers covered by the object */</comment>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>types</name></decl>;</decl_stmt>			<comment type="block">/* 'char' list of enabled statistic kinds */</comment>
}</block></struct></type> <name>StatExtEntry</name>;</typedef>


<function_decl><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type><name>fetch_statentries_for_relation</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>pg_statext</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>relid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>VacAttrStats</name> <modifier>*</modifier><modifier>*</modifier></type><name>lookup_var_attr_stats</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>Bitmapset</name> <modifier>*</modifier></type><name>attrs</name></decl></parameter>,
					  <parameter><decl><type><name>int</name></type> <name>nvacatts</name></decl></parameter>, <parameter><decl><type><name>VacAttrStats</name> <modifier>*</modifier><modifier>*</modifier></type><name>vacatts</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>statext_store</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>pg_stext</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>relid</name></decl></parameter>,
			  <parameter><decl><type><name>MVNDistinct</name> <modifier>*</modifier></type><name>ndistinct</name></decl></parameter>, <parameter><decl><type><name>MVDependencies</name> <modifier>*</modifier></type><name>dependencies</name></decl></parameter>,
			  <parameter><decl><type><name>VacAttrStats</name> <modifier>*</modifier><modifier>*</modifier></type><name>stats</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * Compute requested extended stats, using the rows sampled for the plain
 * (single-column) stats.
 *
 * This fetches a list of stats types from pg_statistic_ext, computes the
 * requested stats, and serializes them back into the catalog.
 */</comment>
<function><type><name>void</name></type>
<name>BuildRelationExtStatistics</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>onerel</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>totalrows</name></decl></parameter>,
						   <parameter><decl><type><name>int</name></type> <name>numrows</name></decl></parameter>, <parameter><decl><type><name>HeapTuple</name> <modifier>*</modifier></type><name>rows</name></decl></parameter>,
						   <parameter><decl><type><name>int</name></type> <name>natts</name></decl></parameter>, <parameter><decl><type><name>VacAttrStats</name> <modifier>*</modifier><modifier>*</modifier></type><name>vacattrstats</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>pg_stext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>stats</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>cxt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcxt</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cxt</name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><call><name>GetCurrentMemoryContext</name><argument_list>()</argument_list></call></expr></argument>,
								<argument><expr><literal type="string">"BuildRelationExtStatistics"</literal></expr></argument>,
								<argument><expr><name>ALLOCSET_DEFAULT_SIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldcxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>pg_stext</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>StatisticExtRelationId</name></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>stats</name> <operator>=</operator> <call><name>fetch_statentries_for_relation</name><argument_list>(<argument><expr><name>pg_stext</name></expr></argument>, <argument><expr><call><name>RelationGetRelid</name><argument_list>(<argument><expr><name>onerel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>stats</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>StatExtEntry</name> <modifier>*</modifier></type><name>stat</name> <init>= <expr><operator>(</operator><name>StatExtEntry</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>MVNDistinct</name> <modifier>*</modifier></type><name>ndistinct</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>MVDependencies</name> <modifier>*</modifier></type><name>dependencies</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>VacAttrStats</name> <modifier>*</modifier><modifier>*</modifier></type><name>stats</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc2</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * Check if we can build these stats based on the column analyzed. If
		 * not, report this fact (except in autovacuum) and move on.
		 */</comment>
		<expr_stmt><expr><name>stats</name> <operator>=</operator> <call><name>lookup_var_attr_stats</name><argument_list>(<argument><expr><name>onerel</name></expr></argument>, <argument><expr><name><name>stat</name><operator>-&gt;</operator><name>columns</name></name></expr></argument>,
									  <argument><expr><name>natts</name></expr></argument>, <argument><expr><name>vacattrstats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stats</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsAutoVacuumWorkerProcess</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_OBJECT_DEFINITION</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"statistics object \"%s.%s\" could not be computed for relation \"%s.%s\""</literal></expr></argument>,
								<argument><expr><name><name>stat</name><operator>-&gt;</operator><name>schema</name></name></expr></argument>, <argument><expr><name><name>stat</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
								<argument><expr><call><name>get_namespace_name</name><argument_list>(<argument><expr><name><name>onerel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relnamespace</name></name></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>onerel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errtable</name><argument_list>(<argument><expr><name>onerel</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* check allowed number of dimensions */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>bms_num_members</name><argument_list>(<argument><expr><name><name>stat</name><operator>-&gt;</operator><name>columns</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>
			   <call><name>bms_num_members</name><argument_list>(<argument><expr><name><name>stat</name><operator>-&gt;</operator><name>columns</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>STATS_MAX_DIMENSIONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* compute statistic of each requested type */</comment>
		<macro><name>foreach</name><argument_list>(<argument>lc2</argument>, <argument>stat-&gt;types</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name></type>		<name>t</name> <init>= <expr><operator>(</operator><name>char</name><operator>)</operator> <call><name>lfirst_int</name><argument_list>(<argument><expr><name>lc2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>STATS_EXT_NDISTINCT</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>ndistinct</name> <operator>=</operator> <call><name>statext_ndistinct_build</name><argument_list>(<argument><expr><name>totalrows</name></expr></argument>, <argument><expr><name>numrows</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
													<argument><expr><name><name>stat</name><operator>-&gt;</operator><name>columns</name></name></expr></argument>, <argument><expr><name>stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name>t</name> <operator>==</operator> <name>STATS_EXT_DEPENDENCIES</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>dependencies</name> <operator>=</operator> <call><name>statext_dependencies_build</name><argument_list>(<argument><expr><name>numrows</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
														  <argument><expr><name><name>stat</name><operator>-&gt;</operator><name>columns</name></name></expr></argument>, <argument><expr><name>stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block>

		<comment type="block">/* store the statistics in the catalog */</comment>
		<expr_stmt><expr><call><name>statext_store</name><argument_list>(<argument><expr><name>pg_stext</name></expr></argument>, <argument><expr><name><name>stat</name><operator>-&gt;</operator><name>statOid</name></name></expr></argument>, <argument><expr><name>ndistinct</name></expr></argument>, <argument><expr><name>dependencies</name></expr></argument>, <argument><expr><name>stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>pg_stext</name></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextDelete</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * statext_is_kind_built
 *		Is this stat kind built in the given pg_statistic_ext tuple?
 */</comment>
<function><type><name>bool</name></type>
<name>statext_is_kind_built</name><parameter_list>(<parameter><decl><type><name>HeapTuple</name></type> <name>htup</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AttrNumber</name></type>	<name>attnum</name></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>STATS_EXT_NDISTINCT</name></expr>:</case>
			<expr_stmt><expr><name>attnum</name> <operator>=</operator> <name>Anum_pg_statistic_ext_stxndistinct</name></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>STATS_EXT_DEPENDENCIES</name></expr>:</case>
			<expr_stmt><expr><name>attnum</name> <operator>=</operator> <name>Anum_pg_statistic_ext_stxdependencies</name></expr>;</expr_stmt>
			<break>break;</break>

		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unexpected statistics type requested: %d"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<return>return <expr><operator>!</operator><call><name>heap_attisnull</name><argument_list>(<argument><expr><name>htup</name></expr></argument>, <argument><expr><name>attnum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Return a list (of StatExtEntry) of statistics objects for the given relation.
 */</comment>
<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type>
<name>fetch_statentries_for_relation</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>pg_statext</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>relid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SysScanDesc</name></type> <name>scan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScanKeyData</name></type> <name>skey</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>htup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Prepare to scan pg_statistic_ext for entries having stxrelid = this
	 * rel.
	 */</comment>
	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>skey</name></expr></argument>,
				<argument><expr><name>Anum_pg_statistic_ext_stxrelid</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_OIDEQ</name></expr></argument>,
				<argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>relid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>pg_statext</name></expr></argument>, <argument><expr><name>StatisticExtRelidIndexId</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
							  <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>skey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>htup</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>StatExtEntry</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type>		<name>datum</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>isnull</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ArrayType</name>  <modifier>*</modifier></type><name>arr</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>enabled</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Form_pg_statistic_ext</name></type> <name>staForm</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>StatExtEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>statOid</name></name> <operator>=</operator> <call><name>HeapTupleGetOid</name><argument_list>(<argument><expr><name>htup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>staForm</name> <operator>=</operator> <operator>(</operator><name>Form_pg_statistic_ext</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>htup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>schema</name></name> <operator>=</operator> <call><name>get_namespace_name</name><argument_list>(<argument><expr><name><name>staForm</name><operator>-&gt;</operator><name>stxnamespace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>staForm</name><operator>-&gt;</operator><name>stxname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>staForm</name><operator>-&gt;</operator><name>stxkeys</name><operator>.</operator><name>dim1</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>columns</name></name> <operator>=</operator> <call><name>bms_add_member</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>columns</name></name></expr></argument>,
											<argument><expr><name><name>staForm</name><operator>-&gt;</operator><name>stxkeys</name><operator>.</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<comment type="block">/* decode the stxkind char array into a list of chars */</comment>
		<expr_stmt><expr><name>datum</name> <operator>=</operator> <call><name>SysCacheGetAttr</name><argument_list>(<argument><expr><name>STATEXTOID</name></expr></argument>, <argument><expr><name>htup</name></expr></argument>,
								<argument><expr><name>Anum_pg_statistic_ext_stxkind</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>arr</name> <operator>=</operator> <call><name>DatumGetArrayTypeP</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>ARR_NDIM</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator>
			<call><name>ARR_HASNULL</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call> <operator>||</operator>
			<call><name>ARR_ELEMTYPE</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CHAROID</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"stxkind is not a 1-D char array"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>enabled</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARR_DIMS</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><name><name>enabled</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>STATS_EXT_NDISTINCT</name><operator>)</operator> <operator>||</operator>
				   <operator>(</operator><name><name>enabled</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>STATS_EXT_DEPENDENCIES</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>types</name></name> <operator>=</operator> <call><name>lappend_int</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>types</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>enabled</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Using 'vacatts' of size 'nvacatts' as input data, return a newly built
 * VacAttrStats array which includes only the items corresponding to
 * attributes indicated by 'stxkeys'. If we don't have all of the per column
 * stats available to compute the extended stats, then we return NULL to indicate
 * to the caller that the stats should not be built.
 */</comment>
<function><type><specifier>static</specifier> <name>VacAttrStats</name> <modifier>*</modifier><modifier>*</modifier></type>
<name>lookup_var_attr_stats</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>Bitmapset</name> <modifier>*</modifier></type><name>attrs</name></decl></parameter>,
					  <parameter><decl><type><name>int</name></type> <name>nvacatts</name></decl></parameter>, <parameter><decl><type><name>VacAttrStats</name> <modifier>*</modifier><modifier>*</modifier></type><name>vacatts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>x</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>VacAttrStats</name> <modifier>*</modifier><modifier>*</modifier></type><name>stats</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>stats</name> <operator>=</operator> <operator>(</operator><name>VacAttrStats</name> <operator>*</operator><operator>*</operator><operator>)</operator>
		<call><name>palloc</name><argument_list>(<argument><expr><call><name>bms_num_members</name><argument_list>(<argument><expr><name>attrs</name></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VacAttrStats</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* lookup VacAttrStats info for the requested columns (same attnum) */</comment>
	<while>while <condition>(<expr><operator>(</operator><name>x</name> <operator>=</operator> <call><name>bms_next_member</name><argument_list>(<argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>j</name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>stats</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nvacatts</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <name><name>vacatts</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>tupattnum</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>stats</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>vacatts</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>stats</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * Looks like stats were not gathered for one of the columns
			 * required. We'll be unable to build the extended stats without
			 * this column.
			 */</comment>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * Sanity check that the column is not dropped - stats should have
		 * been removed in this case.
		 */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>stats</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>attr</name><operator>-&gt;</operator><name>attisdropped</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>stats</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * statext_store
 *	Serializes the statistics and stores them into the pg_statistic_ext tuple.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>statext_store</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>pg_stext</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>statOid</name></decl></parameter>,
			  <parameter><decl><type><name>MVNDistinct</name> <modifier>*</modifier></type><name>ndistinct</name></decl></parameter>, <parameter><decl><type><name>MVDependencies</name> <modifier>*</modifier></type><name>dependencies</name></decl></parameter>,
			  <parameter><decl><type><name>VacAttrStats</name> <modifier>*</modifier><modifier>*</modifier></type><name>stats</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>stup</name></decl>,
				<decl><type ref="prev"/><name>oldtup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name><name>values</name><index>[<expr><name>Natts_pg_statistic_ext</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name><name>nulls</name><index>[<expr><name>Natts_pg_statistic_ext</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name><name>replaces</name><index>[<expr><name>Natts_pg_statistic_ext</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>nulls</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nulls</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>replaces</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>replaces</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Construct a new pg_statistic_ext tuple, replacing the calculated stats.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>ndistinct</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bytea</name>	   <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>statext_ndistinct_serialize</name><argument_list>(<argument><expr><name>ndistinct</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>nulls</name><index>[<expr><name>Anum_pg_statistic_ext_stxndistinct</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pg_statistic_ext_stxndistinct</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>dependencies</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bytea</name>	   <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>statext_dependencies_serialize</name><argument_list>(<argument><expr><name>dependencies</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>nulls</name><index>[<expr><name>Anum_pg_statistic_ext_stxdependencies</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>data</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pg_statistic_ext_stxdependencies</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* always replace the value (either by bytea or NULL) */</comment>
	<expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_pg_statistic_ext_stxndistinct</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>replaces</name><index>[<expr><name>Anum_pg_statistic_ext_stxdependencies</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* there should already be a pg_statistic_ext tuple */</comment>
	<expr_stmt><expr><name>oldtup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>STATEXTOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>statOid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for statistics object %u"</literal></expr></argument>, <argument><expr><name>statOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* replace it */</comment>
	<expr_stmt><expr><name>stup</name> <operator>=</operator> <call><name>heap_modify_tuple</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>,
							 <argument><expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>pg_stext</name></expr></argument>)</argument_list></call></expr></argument>,
							 <argument><expr><name>values</name></expr></argument>,
							 <argument><expr><name>nulls</name></expr></argument>,
							 <argument><expr><name>replaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>oldtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CatalogTupleUpdate</name><argument_list>(<argument><expr><name>pg_stext</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stup</name><operator>-&gt;</operator><name>t_self</name></name></expr></argument>, <argument><expr><name>stup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>heap_freetuple</name><argument_list>(<argument><expr><name>stup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* initialize multi-dimensional sort */</comment>
<function><type><name>MultiSortSupport</name></type>
<name>multi_sort_init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ndims</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MultiSortSupport</name></type> <name>mss</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>ndims</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>mss</name> <operator>=</operator> <operator>(</operator><name>MultiSortSupport</name><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MultiSortSupportData</name></expr></argument>, <argument><expr><name>ssup</name></expr></argument>)</argument_list></call>
									 <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SortSupportData</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>ndims</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>mss</name><operator>-&gt;</operator><name>ndims</name></name> <operator>=</operator> <name>ndims</name></expr>;</expr_stmt>

	<return>return <expr><name>mss</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Prepare sort support info using the given sort operator
 * at the position 'sortdim'
 */</comment>
<function><type><name>void</name></type>
<name>multi_sort_add_dimension</name><parameter_list>(<parameter><decl><type><name>MultiSortSupport</name></type> <name>mss</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sortdim</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>oper</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>SortSupport</name></type> <name>ssup</name> <init>= <expr><operator>&amp;</operator><name><name>mss</name><operator>-&gt;</operator><name>ssup</name><index>[<expr><name>sortdim</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>ssup</name><operator>-&gt;</operator><name>ssup_cxt</name></name> <operator>=</operator> <call><name>GetCurrentMemoryContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ssup</name><operator>-&gt;</operator><name>ssup_collation</name></name> <operator>=</operator> <name>DEFAULT_COLLATION_OID</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ssup</name><operator>-&gt;</operator><name>ssup_nulls_first</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ssup</name><operator>-&gt;</operator><name>ssup_cxt</name></name> <operator>=</operator> <call><name>GetCurrentMemoryContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PrepareSortSupportFromOrderingOp</name><argument_list>(<argument><expr><name>oper</name></expr></argument>, <argument><expr><name>ssup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* compare all the dimensions in the selected order */</comment>
<function><type><name>int</name></type>
<name>multi_sort_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MultiSortSupport</name></type> <name>mss</name> <init>= <expr><operator>(</operator><name>MultiSortSupport</name><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SortItem</name>   <modifier>*</modifier></type><name>ia</name> <init>= <expr><operator>(</operator><name>SortItem</name> <operator>*</operator><operator>)</operator> <name>a</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SortItem</name>   <modifier>*</modifier></type><name>ib</name> <init>= <expr><operator>(</operator><name>SortItem</name> <operator>*</operator><operator>)</operator> <name>b</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mss</name><operator>-&gt;</operator><name>ndims</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>compare</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>compare</name> <operator>=</operator> <call><name>ApplySortComparator</name><argument_list>(<argument><expr><name><name>ia</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ia</name><operator>-&gt;</operator><name>isnull</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
									  <argument><expr><name><name>ib</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ib</name><operator>-&gt;</operator><name>isnull</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
									  <argument><expr><operator>&amp;</operator><name><name>mss</name><operator>-&gt;</operator><name>ssup</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>compare</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>compare</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* equal by default */</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* compare selected dimension */</comment>
<function><type><name>int</name></type>
<name>multi_sort_compare_dim</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dim</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SortItem</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SortItem</name> <modifier>*</modifier></type><name>b</name></decl></parameter>,
					   <parameter><decl><type><name>MultiSortSupport</name></type> <name>mss</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>ApplySortComparator</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>dim</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>isnull</name><index>[<expr><name>dim</name></expr>]</index></name></expr></argument>,
							   <argument><expr><name><name>b</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>dim</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>isnull</name><index>[<expr><name>dim</name></expr>]</index></name></expr></argument>,
							   <argument><expr><operator>&amp;</operator><name><name>mss</name><operator>-&gt;</operator><name>ssup</name><index>[<expr><name>dim</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>multi_sort_compare_dims</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>,
						<parameter><decl><type><specifier>const</specifier> <name>SortItem</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SortItem</name> <modifier>*</modifier></type><name>b</name></decl></parameter>,
						<parameter><decl><type><name>MultiSortSupport</name></type> <name>mss</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>dim</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>dim</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>dim</name> <operator>&lt;=</operator> <name>end</name></expr>;</condition> <incr><expr><name>dim</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>r</name> <init>= <expr><call><name>ApplySortComparator</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>dim</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>isnull</name><index>[<expr><name>dim</name></expr>]</index></name></expr></argument>,
											<argument><expr><name><name>b</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>dim</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>isnull</name><index>[<expr><name>dim</name></expr>]</index></name></expr></argument>,
											<argument><expr><operator>&amp;</operator><name><name>mss</name><operator>-&gt;</operator><name>ssup</name><index>[<expr><name>dim</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * has_stats_of_kind
 *		Check whether the list contains statistic of a given kind
 */</comment>
<function><type><name>bool</name></type>
<name>has_stats_of_kind</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>stats</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>requiredkind</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

	<macro><name>foreach</name><argument_list>(<argument>l</argument>, <argument>stats</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>StatisticExtInfo</name> <modifier>*</modifier></type><name>stat</name> <init>= <expr><operator>(</operator><name>StatisticExtInfo</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>stat</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>requiredkind</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * choose_best_statistics
 *		Look for and return statistics with the specified 'requiredkind' which
 *		have keys that match at least two of the given attnums.  Return NULL if
 *		there's no match.
 *
 * The current selection criteria is very simple - we choose the statistics
 * object referencing the most of the requested attributes, breaking ties
 * in favor of objects with fewer keys overall.
 *
 * XXX if multiple statistics objects tie on both criteria, then which object
 * is chosen depends on the order that they appear in the stats list. Perhaps
 * further tiebreakers are needed.
 */</comment>
<function><type><name>StatisticExtInfo</name> <modifier>*</modifier></type>
<name>choose_best_statistics</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>stats</name></decl></parameter>, <parameter><decl><type><name>Bitmapset</name> <modifier>*</modifier></type><name>attnums</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>requiredkind</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StatisticExtInfo</name> <modifier>*</modifier></type><name>best_match</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>best_num_matched</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>	<comment type="block">/* goal #1: maximize */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>best_match_keys</name> <init>= <expr><operator>(</operator><name>STATS_MAX_DIMENSIONS</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>	<comment type="block">/* goal #2: minimize */</comment>

	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>stats</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>StatisticExtInfo</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><operator>(</operator><name>StatisticExtInfo</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>num_matched</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>numkeys</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Bitmapset</name>  <modifier>*</modifier></type><name>matched</name></decl>;</decl_stmt>

		<comment type="block">/* skip statistics that are not of the correct type */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>kind</name></name> <operator>!=</operator> <name>requiredkind</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/* determine how many attributes of these stats can be matched to */</comment>
		<expr_stmt><expr><name>matched</name> <operator>=</operator> <call><name>bms_intersect</name><argument_list>(<argument><expr><name>attnums</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>keys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>num_matched</name> <operator>=</operator> <call><name>bms_num_members</name><argument_list>(<argument><expr><name>matched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>bms_free</name><argument_list>(<argument><expr><name>matched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * save the actual number of keys in the stats so that we can choose
		 * the narrowest stats with the most matching keys.
		 */</comment>
		<expr_stmt><expr><name>numkeys</name> <operator>=</operator> <call><name>bms_num_members</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>keys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Use this object when it increases the number of matched clauses or
		 * when it matches the same number of attributes but these stats have
		 * fewer keys than any previous match.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>num_matched</name> <operator>&gt;</operator> <name>best_num_matched</name> <operator>||</operator>
			<operator>(</operator><name>num_matched</name> <operator>==</operator> <name>best_num_matched</name> <operator>&amp;&amp;</operator> <name>numkeys</name> <operator>&lt;</operator> <name>best_match_keys</name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>best_match</name> <operator>=</operator> <name>info</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>best_num_matched</name> <operator>=</operator> <name>num_matched</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>best_match_keys</name> <operator>=</operator> <name>numkeys</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<return>return <expr><name>best_match</name></expr>;</return>
</block_content>}</block></function>
</unit>
