<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/backend/statistics/mvdistinct.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * mvdistinct.c
 *	  POSTGRES multivariate ndistinct coefficients
 *
 * Estimating number of groups in a combination of columns (e.g. for GROUP BY)
 * is tricky, and the estimation error is often significant.

 * The multivariate ndistinct coefficients address this by storing ndistinct
 * estimates for combinations of the user-specified columns.  So for example
 * given a statistics object on three columns (a,b,c), this module estimates
 * and stores n-distinct for (a,b), (a,c), (b,c) and (a,b,c).  The per-column
 * estimates are already available in pg_statistic.
 *
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *	  src/backend/statistics/mvdistinct.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_statistic_ext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/fmgrprotos.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/stringinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/typcache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"statistics/extended_stats_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"statistics/statistics.h"</cpp:file></cpp:include>


<function_decl><type><specifier>static</specifier> <name>double</name></type> <name>ndistinct_for_combination</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>totalrows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numrows</name></decl></parameter>,
						  <parameter><decl><type><name>HeapTuple</name> <modifier>*</modifier></type><name>rows</name></decl></parameter>, <parameter><decl><type><name>VacAttrStats</name> <modifier>*</modifier><modifier>*</modifier></type><name>stats</name></decl></parameter>,
						  <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>combination</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>double</name></type> <name>estimate_ndistinct</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>totalrows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numrows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>f1</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>n_choose_k</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>num_combinations</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Combination generator API */</comment>

<comment type="block">/* internal state for generator of k-combinations of n elements */</comment>
<typedef>typedef <type><struct>struct <name>CombinationGenerator</name>
<block>{
	<decl_stmt><decl><type><name>int</name></type>			<name>k</name></decl>;</decl_stmt>				<comment type="block">/* size of the combination */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>n</name></decl>;</decl_stmt>				<comment type="block">/* total number of elements */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>current</name></decl>;</decl_stmt>		<comment type="block">/* index of the next combination to return */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>ncombinations</name></decl>;</decl_stmt>	<comment type="block">/* number of combinations (size of array) */</comment>
	<decl_stmt><decl><type><name>int</name>		   <modifier>*</modifier></type><name>combinations</name></decl>;</decl_stmt>	<comment type="block">/* array of pre-built combinations */</comment>
}</block></struct></type> <name>CombinationGenerator</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>CombinationGenerator</name> <modifier>*</modifier></type><name>generator_init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>generator_free</name><parameter_list>(<parameter><decl><type><name>CombinationGenerator</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name> <modifier>*</modifier></type><name>generator_next</name><parameter_list>(<parameter><decl><type><name>CombinationGenerator</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>generate_combinations</name><parameter_list>(<parameter><decl><type><name>CombinationGenerator</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * statext_ndistinct_build
 *		Compute ndistinct coefficient for the combination of attributes.
 *
 * This computes the ndistinct estimate using the same estimator used
 * in analyze.c and then computes the coefficient.
 */</comment>
<function><type><name>MVNDistinct</name> <modifier>*</modifier></type>
<name>statext_ndistinct_build</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>totalrows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numrows</name></decl></parameter>, <parameter><decl><type><name>HeapTuple</name> <modifier>*</modifier></type><name>rows</name></decl></parameter>,
						<parameter><decl><type><name>Bitmapset</name> <modifier>*</modifier></type><name>attrs</name></decl></parameter>, <parameter><decl><type><name>VacAttrStats</name> <modifier>*</modifier><modifier>*</modifier></type><name>stats</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MVNDistinct</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>k</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>itemcnt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>numattrs</name> <init>= <expr><call><name>bms_num_members</name><argument_list>(<argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>numcombs</name> <init>= <expr><call><name>num_combinations</name><argument_list>(<argument><expr><name>numattrs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>MVNDistinct</name></expr></argument>, <argument><expr><name>items</name></expr></argument>)</argument_list></call> <operator>+</operator>
					<name>numcombs</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MVNDistinctItem</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>STATS_NDISTINCT_MAGIC</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>STATS_NDISTINCT_TYPE_BASIC</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>nitems</name></name> <operator>=</operator> <name>numcombs</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>itemcnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>numattrs</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name>		   <modifier>*</modifier></type><name>combination</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>CombinationGenerator</name> <modifier>*</modifier></type><name>generator</name></decl>;</decl_stmt>

		<comment type="block">/* generate combinations of K out of N elements */</comment>
		<expr_stmt><expr><name>generator</name> <operator>=</operator> <call><name>generator_init</name><argument_list>(<argument><expr><name>numattrs</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<while>while <condition>(<expr><operator>(</operator><name>combination</name> <operator>=</operator> <call><name>generator_next</name><argument_list>(<argument><expr><name>generator</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>MVNDistinctItem</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><operator>&amp;</operator><name><name>result</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>itemcnt</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>j</name></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>attrs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>attrs</name></name> <operator>=</operator> <call><name>bms_add_member</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>attrs</name></name></expr></argument>,
											 <argument><expr><name><name>stats</name><index>[<expr><name><name>combination</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name><operator>-&gt;</operator><name><name>attr</name><operator>-&gt;</operator><name>attnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
			<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>ndistinct</name></name> <operator>=</operator>
				<call><name>ndistinct_for_combination</name><argument_list>(<argument><expr><name>totalrows</name></expr></argument>, <argument><expr><name>numrows</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>,
										  <argument><expr><name>stats</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>combination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>itemcnt</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>itemcnt</name> <operator>&lt;=</operator> <name><name>result</name><operator>-&gt;</operator><name>nitems</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>

		<expr_stmt><expr><call><name>generator_free</name><argument_list>(<argument><expr><name>generator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* must consume exactly the whole output array */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>itemcnt</name> <operator>==</operator> <name><name>result</name><operator>-&gt;</operator><name>nitems</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * statext_ndistinct_load
 *		Load the ndistinct value for the indicated pg_statistic_ext tuple
 */</comment>
<function><type><name>MVNDistinct</name> <modifier>*</modifier></type>
<name>statext_ndistinct_load</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>mvoid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MVNDistinct</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>isnull</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>ndist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>htup</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>htup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>STATEXTOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>mvoid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>htup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for statistics object %u"</literal></expr></argument>, <argument><expr><name>mvoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ndist</name> <operator>=</operator> <call><name>SysCacheGetAttr</name><argument_list>(<argument><expr><name>STATEXTOID</name></expr></argument>, <argument><expr><name>htup</name></expr></argument>,
							<argument><expr><name>Anum_pg_statistic_ext_stxndistinct</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			 <argument><expr><literal type="string">"requested statistic kind \"%c\" is not yet built for statistics object %u"</literal></expr></argument>,
			 <argument><expr><name>STATS_EXT_NDISTINCT</name></expr></argument>, <argument><expr><name>mvoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>statext_ndistinct_deserialize</name><argument_list>(<argument><expr><call><name>DatumGetByteaPP</name><argument_list>(<argument><expr><name>ndist</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>htup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * statext_ndistinct_serialize
 *		serialize ndistinct to the on-disk bytea format
 */</comment>
<function><type><name>bytea</name> <modifier>*</modifier></type>
<name>statext_ndistinct_serialize</name><parameter_list>(<parameter><decl><type><name>MVNDistinct</name> <modifier>*</modifier></type><name>ndistinct</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bytea</name>	   <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type>		<name>len</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>ndistinct</name><operator>-&gt;</operator><name>magic</name></name> <operator>==</operator> <name>STATS_NDISTINCT_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>ndistinct</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>STATS_NDISTINCT_TYPE_BASIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Base size is size of scalar fields in the struct, plus one base struct
	 * for each item, including number of items for each.
	 */</comment>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <name>VARHDRSZ</name> <operator>+</operator> <name>SizeOfMVNDistinct</name> <operator>+</operator>
		<name><name>ndistinct</name><operator>-&gt;</operator><name>nitems</name></name> <operator>*</operator> <operator>(</operator><call><name>offsetof</name><argument_list>(<argument><expr><name>MVNDistinctItem</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>

	<comment type="block">/* and also include space for the actual attribute numbers */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ndistinct</name><operator>-&gt;</operator><name>nitems</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>nmembers</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>nmembers</name> <operator>=</operator> <call><name>bms_num_members</name><argument_list>(<argument><expr><name><name>ndistinct</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>nmembers</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AttrNumber</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nmembers</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>output</name> <operator>=</operator> <operator>(</operator><name>bytea</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>VARDATA</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Store the base struct values (magic, type, nitems) */</comment>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ndistinct</name><operator>-&gt;</operator><name>magic</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ndistinct</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ndistinct</name><operator>-&gt;</operator><name>nitems</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<comment type="block">/*
	 * store number of attributes and attribute numbers for each ndistinct
	 * entry
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ndistinct</name><operator>-&gt;</operator><name>nitems</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>MVNDistinctItem</name></type> <name>item</name> <init>= <expr><name><name>ndistinct</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>nmembers</name> <init>= <expr><call><name>bms_num_members</name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>attrs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>x</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>item</name><operator>.</operator><name>ndistinct</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nmembers</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

		<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<while>while <condition>(<expr><operator>(</operator><name>x</name> <operator>=</operator> <call><name>bms_next_member</name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>attrs</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>AttrNumber</name></type>	<name>value</name> <init>= <expr><operator>(</operator><name>AttrNumber</name><operator>)</operator> <name>x</name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AttrNumber</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AttrNumber</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		</block_content>}</block></while>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>tmp</name> <operator>&lt;=</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>output</name> <operator>+</operator> <name>len</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>output</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * statext_ndistinct_deserialize
 *		Read an on-disk bytea format MVNDistinct to in-memory format
 */</comment>
<function><type><name>MVNDistinct</name> <modifier>*</modifier></type>
<name>statext_ndistinct_deserialize</name><parameter_list>(<parameter><decl><type><name>bytea</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type>		<name>minimum_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MVNDistinct</name></type> <name>ndist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MVNDistinct</name> <modifier>*</modifier></type><name>ndistinct</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* we expect at least the basic fields of MVNDistinct struct */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>SizeOfMVNDistinct</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid MVNDistinct size %zd (expected at least %zd)"</literal></expr></argument>,
			 <argument><expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SizeOfMVNDistinct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* initialize pointer to the data part (skip the varlena header) */</comment>
	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* read the header fields and perform basic sanity checks */</comment>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ndist</name><operator>.</operator><name>magic</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ndist</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ndist</name><operator>.</operator><name>nitems</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ndist</name><operator>.</operator><name>magic</name></name> <operator>!=</operator> <name>STATS_NDISTINCT_MAGIC</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATA_CORRUPTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid ndistinct magic %08x (expected %08x)"</literal></expr></argument>,
						<argument><expr><name><name>ndist</name><operator>.</operator><name>magic</name></name></expr></argument>, <argument><expr><name>STATS_NDISTINCT_MAGIC</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ndist</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>STATS_NDISTINCT_TYPE_BASIC</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATA_CORRUPTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid ndistinct type %d (expected %d)"</literal></expr></argument>,
						<argument><expr><name><name>ndist</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>STATS_NDISTINCT_TYPE_BASIC</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ndist</name><operator>.</operator><name>nitems</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATA_CORRUPTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid zero-length item array in MVNDistinct"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* what minimum bytea size do we expect for those parameters */</comment>
	<expr_stmt><expr><name>minimum_size</name> <operator>=</operator> <operator>(</operator><name>SizeOfMVNDistinct</name> <operator>+</operator>
					<name><name>ndist</name><operator>.</operator><name>nitems</name></name> <operator>*</operator> <operator>(</operator><name>SizeOfMVNDistinctItem</name> <operator>+</operator>
									<sizeof>sizeof<argument_list>(<argument><expr><name>AttrNumber</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>minimum_size</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATA_CORRUPTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid MVNDistinct size %zd (expected at least %zd)"</literal></expr></argument>,
						<argument><expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>minimum_size</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Allocate space for the ndistinct items (no space for each item's
	 * attnos: those live in bitmapsets allocated separately)
	 */</comment>
	<expr_stmt><expr><name>ndistinct</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><call><name>MAXALIGN</name><argument_list>(<argument><expr><name>SizeOfMVNDistinct</name></expr></argument>)</argument_list></call> <operator>+</operator>
						<operator>(</operator><name><name>ndist</name><operator>.</operator><name>nitems</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MVNDistinctItem</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ndistinct</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name><name>ndist</name><operator>.</operator><name>magic</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ndistinct</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>ndist</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ndistinct</name><operator>-&gt;</operator><name>nitems</name></name> <operator>=</operator> <name><name>ndist</name><operator>.</operator><name>nitems</name></name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ndistinct</name><operator>-&gt;</operator><name>nitems</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>MVNDistinctItem</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><operator>&amp;</operator><name><name>ndistinct</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>nelems</name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>attrs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

		<comment type="block">/* ndistinct value */</comment>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>ndistinct</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

		<comment type="block">/* number of attributes */</comment>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nelems</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><name>nelems</name> <operator>&gt;=</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>nelems</name> <operator>&lt;=</operator> <name>STATS_MAX_DIMENSIONS</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<while>while <condition>(<expr><name>nelems</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>AttrNumber</name></type>	<name>attno</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attno</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AttrNumber</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AttrNumber</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>attrs</name></name> <operator>=</operator> <call><name>bms_add_member</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>attrs</name></name></expr></argument>, <argument><expr><name>attno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>

		<comment type="block">/* still within the bytea */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>tmp</name> <operator>&lt;=</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>data</name> <operator>+</operator> <call><name>VARSIZE_ANY</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/* we should have consumed the whole bytea exactly */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>tmp</name> <operator>==</operator> <operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>data</name> <operator>+</operator> <call><name>VARSIZE_ANY</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ndistinct</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * pg_ndistinct_in
 *		input routine for type pg_ndistinct
 *
 * pg_ndistinct is real enough to be a table column, but it has no
 * operations of its own, and disallows input (jus like pg_node_tree).
 */</comment>
<function><type><name>Datum</name></type>
<name>pg_ndistinct_in</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cannot accept a value of type %s"</literal></expr></argument>, <argument><expr><literal type="string">"pg_ndistinct"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>			<comment type="block">/* keep compiler quiet */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * pg_ndistinct
 *		output routine for type pg_ndistinct
 *
 * Produces a human-readable representation of the value.
 */</comment>
<function><type><name>Datum</name></type>
<name>pg_ndistinct_out</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bytea</name>	   <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>PG_GETARG_BYTEA_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MVNDistinct</name> <modifier>*</modifier></type><name>ndist</name> <init>= <expr><call><name>statext_ndistinct_deserialize</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>str</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="char">'{'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ndist</name><operator>-&gt;</operator><name>nitems</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>MVNDistinctItem</name></type> <name>item</name> <init>= <expr><name><name>ndist</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>x</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>first</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<while>while <condition>(<expr><operator>(</operator><name>x</name> <operator>=</operator> <call><name>bms_next_member</name><argument_list>(<argument><expr><name><name>item</name><operator>.</operator><name>attrs</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"%s%d"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>first</name></expr> ?</condition><then> <expr><literal type="string">"\""</literal></expr> </then><else>: <expr><literal type="string">", "</literal></expr></else></ternary></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>first</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="string">"\": %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>item</name><operator>.</operator><name>ndistinct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_CSTRING</name><argument_list>(<argument><expr><name><name>str</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * pg_ndistinct_recv
 *		binary input routine for type pg_ndistinct
 */</comment>
<function><type><name>Datum</name></type>
<name>pg_ndistinct_recv</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cannot accept a value of type %s"</literal></expr></argument>, <argument><expr><literal type="string">"pg_ndistinct"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>			<comment type="block">/* keep compiler quiet */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * pg_ndistinct_send
 *		binary output routine for type pg_ndistinct
 *
 * n-distinct is serialized into a bytea value, so let's send that.
 */</comment>
<function><type><name>Datum</name></type>
<name>pg_ndistinct_send</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>byteasend</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * ndistinct_for_combination
 *		Estimates number of distinct values in a combination of columns.
 *
 * This uses the same ndistinct estimator as compute_scalar_stats() in
 * ANALYZE, i.e.,
 *		n*d / (n - f1 + f1*n/N)
 *
 * except that instead of values in a single column we are dealing with
 * combination of multiple columns.
 */</comment>
<function><type><specifier>static</specifier> <name>double</name></type>
<name>ndistinct_for_combination</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>totalrows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numrows</name></decl></parameter>, <parameter><decl><type><name>HeapTuple</name> <modifier>*</modifier></type><name>rows</name></decl></parameter>,
						  <parameter><decl><type><name>VacAttrStats</name> <modifier>*</modifier><modifier>*</modifier></type><name>stats</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>combination</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>f1</name></decl>,
				<decl><type ref="prev"/><name>cnt</name></decl>,
				<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name>	   <modifier>*</modifier></type><name>isnull</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name>	   <modifier>*</modifier></type><name>values</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SortItem</name>   <modifier>*</modifier></type><name>items</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MultiSortSupport</name></type> <name>mss</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>mss</name> <operator>=</operator> <call><name>multi_sort_init</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * In order to determine the number of distinct elements, create separate
	 * values[]/isnull[] arrays with all the data we have, then sort them
	 * using the specified column combination as dimensions.  We could try to
	 * sort in place, but it'd probably be more complex and bug-prone.
	 */</comment>
	<expr_stmt><expr><name>items</name> <operator>=</operator> <operator>(</operator><name>SortItem</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>numrows</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SortItem</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>values</name> <operator>=</operator> <operator>(</operator><name>Datum</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>numrows</name> <operator>*</operator> <name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>isnull</name> <operator>=</operator> <operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>numrows</name> <operator>*</operator> <name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numrows</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>values</name> <operator>=</operator> <operator>&amp;</operator><name><name>values</name><index>[<expr><name>i</name> <operator>*</operator> <name>k</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>isnull</name> <operator>=</operator> <operator>&amp;</operator><name><name>isnull</name><index>[<expr><name>i</name> <operator>*</operator> <name>k</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * For each dimension, set up sort-support and fill in the values from the
	 * sample data.
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>VacAttrStats</name> <modifier>*</modifier></type><name>colstat</name> <init>= <expr><name><name>stats</name><index>[<expr><name><name>combination</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>TypeCacheEntry</name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>lookup_type_cache</name><argument_list>(<argument><expr><name><name>colstat</name><operator>-&gt;</operator><name>attrtypid</name></name></expr></argument>, <argument><expr><name>TYPECACHE_LT_OPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>type</name><operator>-&gt;</operator><name>lt_opr</name></name> <operator>==</operator> <name>InvalidOid</name></expr>)</condition><block type="pseudo"><block_content> <comment type="block">/* shouldn't happen */</comment>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for ordering operator for type %u"</literal></expr></argument>,
				 <argument><expr><name><name>colstat</name><operator>-&gt;</operator><name>attrtypid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* prepare the sort function for this dimension */</comment>
		<expr_stmt><expr><call><name>multi_sort_add_dimension</name><argument_list>(<argument><expr><name>mss</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>type</name><operator>-&gt;</operator><name>lt_opr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* accumulate all the data for this dimension into the arrays */</comment>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numrows</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name><name>items</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>
				<call><name>heap_getattr</name><argument_list>(<argument><expr><name><name>rows</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,
							 <argument><expr><name><name>colstat</name><operator>-&gt;</operator><name>attr</name><operator>-&gt;</operator><name>attnum</name></name></expr></argument>,
							 <argument><expr><name><name>colstat</name><operator>-&gt;</operator><name>tupDesc</name></name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name><name>items</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>isnull</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>

	<comment type="block">/* We can sort the array now ... */</comment>
	<expr_stmt><expr><call><name>qsort_arg</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>items</name></expr></argument>, <argument><expr><name>numrows</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SortItem</name></expr></argument>)</argument_list></sizeof></expr></argument>,
			  <argument><expr><name>multi_sort_compare</name></expr></argument>, <argument><expr><name>mss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ... and count the number of distinct combinations */</comment>

	<expr_stmt><expr><name>f1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numrows</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>multi_sort_compare</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>items</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>mss</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>f1</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>d</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>cnt</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>f1</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><call><name>estimate_ndistinct</name><argument_list>(<argument><expr><name>totalrows</name></expr></argument>, <argument><expr><name>numrows</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>f1</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* The Duj1 estimator (already used in analyze.c). */</comment>
<function><type><specifier>static</specifier> <name>double</name></type>
<name>estimate_ndistinct</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>totalrows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numrows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>f1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>double</name></type>		<name>numer</name></decl>,
				<decl><type ref="prev"/><name>denom</name></decl>,
				<decl><type ref="prev"/><name>ndistinct</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>numer</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>numrows</name> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>d</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>denom</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><name>numrows</name> <operator>-</operator> <name>f1</name><operator>)</operator> <operator>+</operator>
		<operator>(</operator><name>double</name><operator>)</operator> <name>f1</name> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>numrows</name> <operator>/</operator> <name>totalrows</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>ndistinct</name> <operator>=</operator> <name>numer</name> <operator>/</operator> <name>denom</name></expr>;</expr_stmt>

	<comment type="block">/* Clamp to sane range in case of roundoff error */</comment>
	<if_stmt><if>if <condition>(<expr><name>ndistinct</name> <operator>&lt;</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>d</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ndistinct</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>d</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>ndistinct</name> <operator>&gt;</operator> <name>totalrows</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ndistinct</name> <operator>=</operator> <name>totalrows</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><call><name>floor</name><argument_list>(<argument><expr><name>ndistinct</name> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * n_choose_k
 *		computes binomial coefficients using an algorithm that is both
 *		efficient and prevents overflows
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>n_choose_k</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>d</name></decl>,
				<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>n</name> <operator>&gt;=</operator> <name>k</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* use symmetry of the binomial coefficients */</comment>
	<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>d</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>d</name> <operator>&lt;=</operator> <name>k</name></expr>;</condition> <incr><expr><operator>++</operator><name>d</name></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>r</name> <operator>*=</operator> <name>n</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>r</name> <operator>/=</operator> <name>d</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * num_combinations
 *		number of combinations, excluding single-value combinations
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>num_combinations</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>k</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>ncombs</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ncombs</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><name>ncombs</name> <operator>-=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

	<return>return <expr><name>ncombs</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * generator_init
 *		initialize the generator of combinations
 *
 * The generator produces combinations of K elements in the interval (0..N).
 * We prebuild all the combinations in this method, which is simpler than
 * generating them on the fly.
 */</comment>
<function><type><specifier>static</specifier> <name>CombinationGenerator</name> <modifier>*</modifier></type>
<name>generator_init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CombinationGenerator</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><name>n</name> <operator>&gt;=</operator> <name>k</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* allocate the generator state as a single chunk of memory */</comment>
	<expr_stmt><expr><name>state</name> <operator>=</operator> <operator>(</operator><name>CombinationGenerator</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CombinationGenerator</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>ncombinations</name></name> <operator>=</operator> <call><name>n_choose_k</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* pre-allocate space for all combinations */</comment>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>combinations</name></name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>k</name> <operator>*</operator> <name><name>state</name><operator>-&gt;</operator><name>ncombinations</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

	<comment type="block">/* now actually pre-generate all the combinations of K elements */</comment>
	<expr_stmt><expr><call><name>generate_combinations</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* make sure we got the expected number of combinations */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>current</name></name> <operator>==</operator> <name><name>state</name><operator>-&gt;</operator><name>ncombinations</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* reset the number, so we start with the first one */</comment>
	<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<return>return <expr><name>state</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * generator_next
 *		returns the next combination from the prebuilt list
 *
 * Returns a combination of K array indexes (0 .. N), as specified to
 * generator_init), or NULL when there are no more combination.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name> <modifier>*</modifier></type>
<name>generator_next</name><parameter_list>(<parameter><decl><type><name>CombinationGenerator</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>current</name></name> <operator>==</operator> <name><name>state</name><operator>-&gt;</operator><name>ncombinations</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>combinations</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>k</name></name> <operator>*</operator> <name><name>state</name><operator>-&gt;</operator><name>current</name></name><operator>++</operator></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * generator_free
 *		free the internal state of the generator
 *
 * Releases the generator internal state (pre-built combinations).
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>generator_free</name><parameter_list>(<parameter><decl><type><name>CombinationGenerator</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>combinations</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * generate_combinations_recurse
 *		given a prefix, generate all possible combinations
 *
 * Given a prefix (first few elements of the combination), generate following
 * elements recursively. We generate the combinations in lexicographic order,
 * which eliminates permutations of the same combination.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>generate_combinations_recurse</name><parameter_list>(<parameter><decl><type><name>CombinationGenerator</name> <modifier>*</modifier></type><name>state</name></decl></parameter>,
							  <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* If we haven't filled all the elements, simply recurse. */</comment>
	<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>k</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * The values have to be in ascending order, so make sure we start
		 * with the value passed by parameter.
		 */</comment>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>start</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>n</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name><name>current</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>generate_combinations_recurse</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>(</operator><name>index</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<return>return;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* we got a valid combination, add it to the array */</comment>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>combinations</name><index>[<expr><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>k</name></name> <operator>*</operator> <name><name>state</name><operator>-&gt;</operator><name>current</name></name><operator>)</operator></expr>]</index></name></expr></argument>,
			   <argument><expr><name>current</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>k</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>current</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * generate_combinations
 *		generate all k-combinations of N elements
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>generate_combinations</name><parameter_list>(<parameter><decl><type><name>CombinationGenerator</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name>		   <modifier>*</modifier></type><name>current</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>state</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>generate_combinations_recurse</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
