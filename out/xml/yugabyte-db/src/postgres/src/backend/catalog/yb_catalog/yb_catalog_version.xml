<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/backend/catalog/yb_catalog/yb_catalog_version.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * yb_catalog_version.c
 *	  utility functions related to the ysql catalog version table.
 *
 * Portions Copyright (c) YugaByte, Inc.
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/sysattr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/catalog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_database.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_namespace_d.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_yb_catalog_version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/schemapg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/yb_catalog_version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/ybcExpr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/ybcModifyTable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/makefuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/catcache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/fmgroids.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"yb/yql/pggate/ybc_pggate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_yb_utils.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>YbCatalogVersionType</name></type> <name>yb_catalog_version_type</name> <init>= <expr><name>CATALOG_VERSION_UNSET</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>FormData_pg_attribute</name></type> <name><name>Desc_pg_yb_catalog_version</name><index>[<expr><name>Natts_pg_yb_catalog_version</name></expr>]</index></name> <init>= <expr><block>{
	<expr><name>Schema_pg_yb_catalog_version</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>YbGetMasterCatalogVersionFromTable</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>db_oid</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>version</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Datum</name></type> <name>YbGetMasterCatalogVersionTableEntryYbctid</name><parameter_list>(
	<parameter><decl><type><name>Relation</name></type> <name>catalog_version_rel</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>db_oid</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Retrieve Catalog Version */</comment>

<function><type><name>uint64_t</name></type> <name>YbGetMasterCatalogVersion</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>version</name> <init>= <expr><name>YB_CATCACHE_VERSION_UNINITIALIZED</name></expr></init></decl>;</decl_stmt>
	<switch>switch <condition>(<expr><call><name>YbGetCatalogVersionType</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>CATALOG_VERSION_CATALOG_TABLE</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><call><name>YbGetMasterCatalogVersionFromTable</name><argument_list>(
			    	<argument><expr><call><name>YbMasterCatalogVersionTableDBOid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>version</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>version</name></expr>;</return></block_content></block></if></if_stmt>
			<comment type="block">/*
			 * In spite of the fact the pg_yb_catalog_version table exists it has no actual
			 * version (this could happen during YSQL upgrade),
			 * fallback to an old protobuf mechanism until the next cache refresh.
			 */</comment>
			<expr_stmt><expr><name>yb_catalog_version_type</name> <operator>=</operator> <name>CATALOG_VERSION_PROTOBUF_ENTRY</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>switch_fallthrough</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<case>case <expr><name>CATALOG_VERSION_PROTOBUF_ENTRY</name></expr>:</case>
			<comment type="block">/* deprecated (kept for compatibility with old clusters). */</comment>
			<expr_stmt><expr><call><name>HandleYBStatus</name><argument_list>(<argument><expr><call><name>YBCPgGetCatalogMasterVersion</name><argument_list>(<argument><expr><operator>&amp;</operator><name>version</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>version</name></expr>;</return>

		<case>case <expr><name>CATALOG_VERSION_UNSET</name></expr>:</case> <comment type="block">/* should not happen. */</comment>
			<break>break;</break>
	</block_content>}</block></switch>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"catalog version type was not set, cannot load system catalog."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>version</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Modify Catalog Version */</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>YbIncrementMasterDBCatalogVersionTableEntryImpl</name><parameter_list>(
	<parameter><decl><type><name>Oid</name></type> <name>db_oid</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_breaking_change</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>YbGetCatalogVersionType</name><argument_list>()</argument_list></call> <operator>==</operator> <name>CATALOG_VERSION_CATALOG_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>YBCPgStatement</name></type> <name>update_stmt</name>    <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>YBCPgTypeAttrs</name></type> <name>type_attrs</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>YBCPgExpr</name></type> <name>yb_expr</name></decl>;</decl_stmt>

	<comment type="block">/* The table pg_yb_catalog_version is in template1. */</comment>
	<expr_stmt><expr><call><name>HandleYBStatus</name><argument_list>(<argument><expr><call><name>YBCPgNewUpdate</name><argument_list>(<argument><expr><name>TemplateDbOid</name></expr></argument>,
								  <argument><expr><name>YBCatalogVersionRelationId</name></expr></argument>,
								  <argument><expr><name>false</name></expr></argument> <comment type="block">/* is_single_row_txn */</comment>,
								  <argument><expr><name>false</name></expr></argument> <comment type="block">/* is_region_local */</comment>,
								  <argument><expr><operator>&amp;</operator><name>update_stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Relation</name></type> <name>rel</name> <init>= <expr><call><name>RelationIdGetRelation</name><argument_list>(<argument><expr><name>YBCatalogVersionRelationId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name>ybctid</name> <init>= <expr><call><name>YbGetMasterCatalogVersionTableEntryYbctid</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>db_oid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Bind ybctid to identify the current row. */</comment>
	<decl_stmt><decl><type><name>YBCPgExpr</name></type> <name>ybctid_expr</name> <init>= <expr><call><name>YBCNewConstant</name><argument_list>(<argument><expr><name>update_stmt</name></expr></argument>, <argument><expr><name>BYTEAOID</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>,
										   <argument><expr><name>ybctid</name></expr></argument>, <argument><expr><name>false</name></expr></argument> <comment type="block">/* is_null */</comment>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>HandleYBStatus</name><argument_list>(<argument><expr><call><name>YBCPgDmlBindColumn</name><argument_list>(<argument><expr><name>update_stmt</name></expr></argument>, <argument><expr><name>YBTupleIdAttributeNumber</name></expr></argument>,
									  <argument><expr><name>ybctid_expr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Set expression c = c + 1 for current version attribute. */</comment>
	<decl_stmt><decl><type><name>AttrNumber</name></type> <name>attnum</name> <init>= <expr><name>Anum_pg_yb_catalog_version_current_version</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Var</name> <modifier>*</modifier></type><name>arg1</name> <init>= <expr><call><name>makeVar</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,
						<argument><expr><name>attnum</name></expr></argument>,
						<argument><expr><name>INT8OID</name></expr></argument>,
						<argument><expr><literal type="number">0</literal></expr></argument>,
						<argument><expr><name>InvalidOid</name></expr></argument>,
						<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Const</name> <modifier>*</modifier></type><name>arg2</name> <init>= <expr><call><name>makeConst</name><argument_list>(<argument><expr><name>INT8OID</name></expr></argument>,
							<argument><expr><literal type="number">0</literal></expr></argument>,
							<argument><expr><name>InvalidOid</name></expr></argument>,
							<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64</name></expr></argument>)</argument_list></sizeof></expr></argument>,
							<argument><expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">1</literal></expr></argument>,
							<argument><expr><name>false</name></expr></argument>,
							<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>args</name> <init>= <expr><call><name>list_make2</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>FuncExpr</name> <modifier>*</modifier></type><name>expr</name> <init>= <expr><call><name>makeFuncExpr</name><argument_list>(<argument><expr><name>F_INT8PL</name></expr></argument>,
								  <argument><expr><name>INT8OID</name></expr></argument>,
								  <argument><expr><name>args</name></expr></argument>,
								  <argument><expr><name>InvalidOid</name></expr></argument>,
								  <argument><expr><name>InvalidOid</name></expr></argument>,
								  <argument><expr><name>COERCE_EXPLICIT_CALL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* INT8 OID. */</comment>
	<decl_stmt><decl><type><name>YBCPgExpr</name></type> <name>ybc_expr</name> <init>= <expr><call><name>YBCNewEvalExprCall</name><argument_list>(<argument><expr><name>update_stmt</name></expr></argument>, <argument><expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <name>expr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>HandleYBStatus</name><argument_list>(<argument><expr><call><name>YBCPgDmlAssignColumn</name><argument_list>(<argument><expr><name>update_stmt</name></expr></argument>, <argument><expr><name>attnum</name></expr></argument>, <argument><expr><name>ybc_expr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>yb_expr</name> <operator>=</operator> <call><name>YBCNewColumnRef</name><argument_list>(<argument><expr><name>update_stmt</name></expr></argument>,
							  <argument><expr><name>attnum</name></expr></argument>,
							  <argument><expr><name>INT8OID</name></expr></argument>,
							  <argument><expr><name>InvalidOid</name></expr></argument>,
							  <argument><expr><operator>&amp;</operator><name>type_attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HandleYBStatus</name><argument_list>(<argument><expr><call><name>YbPgDmlAppendColumnRef</name><argument_list>(<argument><expr><name>update_stmt</name></expr></argument>, <argument><expr><name>yb_expr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* If breaking change set the latest breaking version to the same expression. */</comment>
	<if_stmt><if>if <condition>(<expr><name>is_breaking_change</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>ybc_expr</name> <operator>=</operator> <call><name>YBCNewEvalExprCall</name><argument_list>(<argument><expr><name>update_stmt</name></expr></argument>, <argument><expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>HandleYBStatus</name><argument_list>(<argument><expr><call><name>YBCPgDmlAssignColumn</name><argument_list>(<argument><expr><name>update_stmt</name></expr></argument>, <argument><expr><name>attnum</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ybc_expr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>rows_affected_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><call><name>YBCGetGFlags</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>log_ysql_catalog_versions</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type> <name><name>tmpbuf</name><index>[<expr><literal type="number">30</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>YBIsDBCatalogVersionMode</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">" for database %u"</literal></expr></argument>, <argument><expr><name>db_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"%s: incrementing master catalog version (%sbreaking)%s"</literal></expr></argument>,
						<argument><expr><name>__func__</name></expr></argument>, <argument><expr><ternary><condition><expr><name>is_breaking_change</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"non"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>tmpbuf</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>HandleYBStatus</name><argument_list>(<argument><expr><call><name>YBCPgDmlExecWriteOp</name><argument_list>(<argument><expr><name>update_stmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected_count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>rows_affected_count</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Cleanup. */</comment>
	<expr_stmt><expr><name>update_stmt</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RelationClose</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>YbIncrementMasterCatalogVersionTableEntry</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>is_breaking_change</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>YbGetCatalogVersionType</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>CATALOG_VERSION_CATALOG_TABLE</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	<comment type="block">/*
	 * TemplateDbOid row is for global catalog version when not in per-db mode.
	 */</comment>
	<expr_stmt><expr><call><name>YbIncrementMasterDBCatalogVersionTableEntryImpl</name><argument_list>(
		<argument><expr><ternary><condition><expr><call><name>YBIsDBCatalogVersionMode</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>MyDatabaseId</name></expr> </then><else>: <expr><name>TemplateDbOid</name></expr></else></ternary></expr></argument>,
		<argument><expr><name>is_breaking_change</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>YbMarkStatementIfCatalogVersionIncrement</name><parameter_list>(<parameter><decl><type><name>YBCPgStatement</name></type> <name>ybc_stmt</name></decl></parameter>,
											  <parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>YbGetCatalogVersionType</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>CATALOG_VERSION_PROTOBUF_ENTRY</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Nothing to do -- only need to maintain this for the (old)
		 * protobuf-based way of storing the version.
		 */</comment>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>is_syscatalog_change</name> <init>= <expr><call><name>YbIsSystemCatalogChange</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>modifies_row</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>HandleYBStatus</name><argument_list>(<argument><expr><call><name>YBCPgDmlModifiesRow</name><argument_list>(<argument><expr><name>ybc_stmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>modifies_row</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If this write may invalidate catalog cache tuples (i.e. UPDATE or DELETE),
	 * or this write may insert into a cached list, we must increment the
	 * cache version so other sessions can invalidate their caches.
	 * NOTE: If this relation caches lists, an INSERT could effectively be
	 * UPDATINGing the list object.
	 */</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>is_syscatalog_version_change</name> <init>= <expr><name>is_syscatalog_change</name>
			<operator>&amp;&amp;</operator> <operator>(</operator><name>modifies_row</name> <operator>||</operator> <call><name>RelationHasCachedLists</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Let the master know if this should increment the catalog version. */</comment>
	<if_stmt><if>if <condition>(<expr><name>is_syscatalog_version_change</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>HandleYBStatus</name><argument_list>(<argument><expr><call><name>YBCPgSetIsSysCatalogVersionChange</name><argument_list>(<argument><expr><name>ybc_stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>is_syscatalog_version_change</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>YbCreateMasterDBCatalogVersionTableEntry</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>db_oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>YbGetCatalogVersionType</name><argument_list>()</argument_list></call> <operator>==</operator> <name>CATALOG_VERSION_CATALOG_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>db_oid</name> <operator>!=</operator> <name>MyDatabaseId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * The table pg_yb_catalog_version is a shared relation in template1 and
	 * db_oid is the primary key. There is no separate docdb index table for
	 * primary key and therefore only one insert statement is needed to insert
	 * the row for db_oid.
	 */</comment>
	<decl_stmt><decl><type><name>YBCPgStatement</name></type> <name>insert_stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>HandleYBStatus</name><argument_list>(<argument><expr><call><name>YBCPgNewInsert</name><argument_list>(<argument><expr><name>TemplateDbOid</name></expr></argument>,
								  <argument><expr><name>YBCatalogVersionRelationId</name></expr></argument>,
								  <argument><expr><name>true</name></expr></argument> <comment type="block">/* is_single_row_txn */</comment>,
								  <argument><expr><name>false</name></expr></argument> <comment type="block">/* is_region_local */</comment>,
								  <argument><expr><operator>&amp;</operator><name>insert_stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Relation</name></type> <name>rel</name> <init>= <expr><call><name>RelationIdGetRelation</name><argument_list>(<argument><expr><name>YBCatalogVersionRelationId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name>ybctid</name> <init>= <expr><call><name>YbGetMasterCatalogVersionTableEntryYbctid</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>db_oid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>YBCPgExpr</name></type> <name>ybctid_expr</name> <init>= <expr><call><name>YBCNewConstant</name><argument_list>(<argument><expr><name>insert_stmt</name></expr></argument>, <argument><expr><name>BYTEAOID</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>,
										   <argument><expr><name>ybctid</name></expr></argument>, <argument><expr><name>false</name></expr></argument> <comment type="block">/* is_null */</comment>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>HandleYBStatus</name><argument_list>(<argument><expr><call><name>YBCPgDmlBindColumn</name><argument_list>(<argument><expr><name>insert_stmt</name></expr></argument>, <argument><expr><name>YBTupleIdAttributeNumber</name></expr></argument>,
									  <argument><expr><name>ybctid_expr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>AttrNumber</name></type> <name>attnum</name> <init>= <expr><name>Anum_pg_yb_catalog_version_current_version</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>initial_version</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>YBCPgExpr</name></type> <name>initial_version_expr</name> <init>= <expr><call><name>YBCNewConstant</name><argument_list>(<argument><expr><name>insert_stmt</name></expr></argument>, <argument><expr><name>INT8OID</name></expr></argument>,
													<argument><expr><name>InvalidOid</name></expr></argument>,
													<argument><expr><name>initial_version</name></expr></argument>,
													<argument><expr><name>false</name></expr></argument> <comment type="block">/* is_null */</comment>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>HandleYBStatus</name><argument_list>(<argument><expr><call><name>YBCPgDmlBindColumn</name><argument_list>(<argument><expr><name>insert_stmt</name></expr></argument>, <argument><expr><name>attnum</name></expr></argument>,
									  <argument><expr><name>initial_version_expr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>HandleYBStatus</name><argument_list>(<argument><expr><call><name>YBCPgDmlBindColumn</name><argument_list>(<argument><expr><name>insert_stmt</name></expr></argument>, <argument><expr><name>attnum</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
									  <argument><expr><name>initial_version_expr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>rows_affected_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><call><name>YBCGetGFlags</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>log_ysql_catalog_versions</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"%s: creating master catalog version for database %u"</literal></expr></argument>,
						<argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>db_oid</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>HandleYBStatus</name><argument_list>(<argument><expr><call><name>YBCPgDmlExecWriteOp</name><argument_list>(<argument><expr><name>insert_stmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected_count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Insert a new row does not affect any existing rows. */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>rows_affected_count</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Cleanup. */</comment>
	<expr_stmt><expr><call><name>RelationClose</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>YbDeleteMasterDBCatalogVersionTableEntry</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>db_oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>YbGetCatalogVersionType</name><argument_list>()</argument_list></call> <operator>==</operator> <name>CATALOG_VERSION_CATALOG_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>db_oid</name> <operator>!=</operator> <name>MyDatabaseId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * The table pg_yb_catalog_version is a shared relation in template1 and
	 * db_oid is the primary key. There is no separate docdb index table for
	 * primary key and therefore only one delete statement is needed to delete
	 * the row for db_oid.
	 */</comment>
	<decl_stmt><decl><type><name>YBCPgStatement</name></type> <name>delete_stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>HandleYBStatus</name><argument_list>(<argument><expr><call><name>YBCPgNewDelete</name><argument_list>(<argument><expr><name>TemplateDbOid</name></expr></argument>,
								  <argument><expr><name>YBCatalogVersionRelationId</name></expr></argument>,
								  <argument><expr><name>true</name></expr></argument> <comment type="block">/* is_single_row_txn */</comment>,
								  <argument><expr><name>false</name></expr></argument> <comment type="block">/* is_region_local */</comment>,
								  <argument><expr><operator>&amp;</operator><name>delete_stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Relation</name></type> <name>rel</name> <init>= <expr><call><name>RelationIdGetRelation</name><argument_list>(<argument><expr><name>YBCatalogVersionRelationId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name>ybctid</name> <init>= <expr><call><name>YbGetMasterCatalogVersionTableEntryYbctid</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>db_oid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>YBCPgExpr</name></type> <name>ybctid_expr</name> <init>= <expr><call><name>YBCNewConstant</name><argument_list>(<argument><expr><name>delete_stmt</name></expr></argument>, <argument><expr><name>BYTEAOID</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>,
										   <argument><expr><name>ybctid</name></expr></argument>, <argument><expr><name>false</name></expr></argument> <comment type="block">/* is_null */</comment>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>HandleYBStatus</name><argument_list>(<argument><expr><call><name>YBCPgDmlBindColumn</name><argument_list>(<argument><expr><name>delete_stmt</name></expr></argument>, <argument><expr><name>YBTupleIdAttributeNumber</name></expr></argument>,
									  <argument><expr><name>ybctid_expr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>rows_affected_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><call><name>YBCGetGFlags</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>log_ysql_catalog_versions</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"%s: deleting master catalog version for database %u"</literal></expr></argument>,
						<argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>db_oid</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>HandleYBStatus</name><argument_list>(<argument><expr><call><name>YBCPgDmlExecWriteOp</name><argument_list>(<argument><expr><name>delete_stmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows_affected_count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>rows_affected_count</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RelationClose</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>YbCatalogVersionType</name></type> <name>YbGetCatalogVersionType</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>IsBootstrapProcessingMode</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * We don't have the catalog version table at the start of initdb,
		 * and there's no point in switching later on.
		 */</comment>
		<expr_stmt><expr><name>yb_catalog_version_type</name> <operator>=</operator> <name>CATALOG_VERSION_PROTOBUF_ENTRY</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>yb_catalog_version_type</name> <operator>==</operator> <name>CATALOG_VERSION_UNSET</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type> <name>catalog_version_table_exists</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>HandleYBStatus</name><argument_list>(<argument><expr><call><name>YBCPgTableExists</name><argument_list>(
			<argument><expr><name>TemplateDbOid</name></expr></argument>, <argument><expr><name>YBCatalogVersionRelationId</name></expr></argument>,
			<argument><expr><operator>&amp;</operator><name>catalog_version_table_exists</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>yb_catalog_version_type</name> <operator>=</operator> <ternary><condition><expr><name>catalog_version_table_exists</name></expr>
		    ?</condition><then> <expr><name>CATALOG_VERSION_CATALOG_TABLE</name></expr>
		    </then><else>: <expr><name>CATALOG_VERSION_PROTOBUF_ENTRY</name></expr></else></ternary></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>yb_catalog_version_type</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Check if operation changes a system table, ignore changes during
 * initialization (bootstrap mode).
 */</comment>
<function><type><name>bool</name></type> <name>YbIsSystemCatalogChange</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>IsCatalogRelation</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IsBootstrapProcessingMode</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>bool</name></type> <name>YbGetMasterCatalogVersionFromTable</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>db_oid</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>version</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>version</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* unset; */</comment>

	<decl_stmt><decl><type><name>int</name></type> <name>natts</name> <init>= <expr><name>Natts_pg_yb_catalog_version</name></expr></init></decl>;</decl_stmt>
	<comment type="block">/*
	 * pg_yb_catalog_version is a shared catalog table, so as per DocDB store,
	 * it belongs to the template1 database.
	 */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>oid_attnum</name> <init>= <expr><name>Anum_pg_yb_catalog_version_db_oid</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>current_version_attnum</name> <init>= <expr><name>Anum_pg_yb_catalog_version_current_version</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>oid_attrdesc</name> <init>= <expr><operator>&amp;</operator><name><name>Desc_pg_yb_catalog_version</name><index>[<expr><name>oid_attnum</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>YBCPgStatement</name></type> <name>ybc_stmt</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>HandleYBStatus</name><argument_list>(<argument><expr><call><name>YBCPgNewSelect</name><argument_list>(<argument><expr><name>TemplateDbOid</name></expr></argument>,
	                              <argument><expr><name>YBCatalogVersionRelationId</name></expr></argument>,
	                              <argument><expr><name>NULL</name></expr></argument> <comment type="block">/* prepare_params */</comment>,
	                              <argument><expr><name>false</name></expr></argument> <comment type="block">/* is_region_local */</comment>,
	                              <argument><expr><operator>&amp;</operator><name>ybc_stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Datum</name></type> <name>oid_datum</name> <init>= <expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>db_oid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>YBCPgExpr</name></type> <name>pkey_expr</name> <init>= <expr><call><name>YBCNewConstant</name><argument_list>(<argument><expr><name>ybc_stmt</name></expr></argument>,
	                                     <argument><expr><name><name>oid_attrdesc</name><operator>-&gt;</operator><name>atttypid</name></name></expr></argument>,
	                                     <argument><expr><name><name>oid_attrdesc</name><operator>-&gt;</operator><name>attcollation</name></name></expr></argument>,
	                                     <argument><expr><name>oid_datum</name></expr></argument>,
	                                     <argument><expr><name>false</name></expr></argument> <comment type="block">/* is_null */</comment>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>HandleYBStatus</name><argument_list>(<argument><expr><call><name>YBCPgDmlBindColumn</name><argument_list>(<argument><expr><name>ybc_stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pkey_expr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Add scan targets */</comment>
	<for>for <control>(<init><decl><type><name>AttrNumber</name></type> <name>attnum</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>attnum</name> <operator>&lt;=</operator> <name>natts</name></expr>;</condition> <incr><expr><name>attnum</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>att</name> <init>= <expr><operator>&amp;</operator><name><name>Desc_pg_yb_catalog_version</name><index>[<expr><name>attnum</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>YBCPgTypeAttrs</name></type> <name>type_attrs</name> <init>= <expr><block>{ <expr><name><name>att</name><operator>-&gt;</operator><name>atttypmod</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>YBCPgExpr</name></type>   <name>expr</name> <init>= <expr><call><name>YBCNewColumnRef</name><argument_list>(<argument><expr><name>ybc_stmt</name></expr></argument>, <argument><expr><name>attnum</name></expr></argument>, <argument><expr><name><name>att</name><operator>-&gt;</operator><name>atttypid</name></name></expr></argument>,
										   <argument><expr><name><name>att</name><operator>-&gt;</operator><name>attcollation</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type_attrs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>HandleYBStatus</name><argument_list>(<argument><expr><call><name>YBCPgDmlAppendTarget</name><argument_list>(<argument><expr><name>ybc_stmt</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * Fetching of the YBTupleIdAttributeNumber attribute is required for
	 * the ability to prefetch data from the pb_yb_catalog_version table via
	 * PgSysTablePrefetcher.
	 */</comment>
	<decl_stmt><decl><type><name>YBCPgExpr</name></type> <name>expr</name> <init>= <expr><call><name>YBCNewColumnRef</name><argument_list>(
		<argument><expr><name>ybc_stmt</name></expr></argument>, <argument><expr><name>YBTupleIdAttributeNumber</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument> <comment type="block">/* attr_typid */</comment>,
		<argument><expr><name>InvalidOid</name></expr></argument> <comment type="block">/* attr_collation */</comment>, <argument><expr><name>NULL</name></expr></argument> <comment type="block">/* type_attrs */</comment>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>HandleYBStatus</name><argument_list>(<argument><expr><call><name>YBCPgDmlAppendTarget</name><argument_list>(<argument><expr><name>ybc_stmt</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>HandleYBStatus</name><argument_list>(<argument><expr><call><name>YBCPgExecSelect</name><argument_list>(<argument><expr><name>ybc_stmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> <comment type="block">/* exec_params */</comment>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type>      <name>has_data</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Datum</name>           <modifier>*</modifier></type><name>values</name> <init>= <expr><operator>(</operator><name>Datum</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>natts</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name>            <modifier>*</modifier></type><name>nulls</name>  <init>= <expr><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>natts</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>YBCPgSysColumns</name></type> <name>syscols</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>YBIsDBCatalogVersionMode</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Fetch one row. */</comment>
		<expr_stmt><expr><call><name>HandleYBStatus</name><argument_list>(<argument><expr><call><name>YBCPgDmlFetch</name><argument_list>(<argument><expr><name>ybc_stmt</name></expr></argument>,
									 <argument><expr><name>natts</name></expr></argument>,
									 <argument><expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator> <name>values</name></expr></argument>,
									 <argument><expr><name>nulls</name></expr></argument>,
									 <argument><expr><operator>&amp;</operator><name>syscols</name></expr></argument>,
									 <argument><expr><operator>&amp;</operator><name>has_data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>has_data</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>version</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <call><name>DatumGetInt64</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>current_version_attnum</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * When prefetching is enabled we always load all the rows even though
		 * we bind to the row matching given db_oid. This is a work around to
		 * pick the row that matches db_oid. This work around should be removed
		 * when prefetching is enhanced to support filtering.
		 */</comment>
		<while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
			<comment type="block">/* Fetch one row. */</comment>
			<expr_stmt><expr><call><name>HandleYBStatus</name><argument_list>(<argument><expr><call><name>YBCPgDmlFetch</name><argument_list>(<argument><expr><name>ybc_stmt</name></expr></argument>,
										 <argument><expr><name>natts</name></expr></argument>,
										 <argument><expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator> <name>values</name></expr></argument>,
										 <argument><expr><name>nulls</name></expr></argument>,
										 <argument><expr><operator>&amp;</operator><name>syscols</name></expr></argument>,
										 <argument><expr><operator>&amp;</operator><name>has_data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>has_data</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATABASE_DROPPED</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"catalog version for database %u was not found."</literal></expr></argument>, <argument><expr><name>db_oid</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Database might have been dropped by another user"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<decl_stmt><decl><type><name>uint32_t</name></type> <name>oid</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>oid_attnum</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>oid</name> <operator>==</operator> <name>db_oid</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>version</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <call><name>DatumGetInt64</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>current_version_attnum</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
 		</block_content>}</block></while>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type> <name>YbGetMasterCatalogVersionTableEntryYbctid</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>catalog_version_rel</name></decl></parameter>,
												<parameter><decl><type><name>Oid</name></type> <name>db_oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Construct HeapTuple (db_oid, null, null) for computing ybctid using
	 * YBCGetYBTupleIdFromTuple which requires a tuple. Note that db_oid
	 * is the primary key so we can use null for other columns for simplicity.
	 */</comment>
	<decl_stmt><decl><type><name>Datum</name></type>		<name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name><name>nulls</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>db_oid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>tuple</name> <init>= <expr><call><name>heap_form_tuple</name><argument_list>(<argument><expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>catalog_version_rel</name></expr></argument>)</argument_list></call></expr></argument>,
									  <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>YBCGetYBTupleIdFromTuple</name><argument_list>(<argument><expr><name>catalog_version_rel</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>,
									<argument><expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>catalog_version_rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>Oid</name></type> <name>YbMasterCatalogVersionTableDBOid</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * MyDatabaseId is 0 during connection setup time before
	 * MyDatabaseId is resolved. In per-db mode, we use TemplateDbOid
	 * during this period to find the catalog version in order to load
	 * initial catalog cache (needed for resolving MyDatabaseId, auth
	 * check etc.). Once MyDatabaseId is resolved from then on we'll
	 * use its catalog version.
	 */</comment>

	<return>return <expr><ternary><condition><expr><call><name>YBIsDBCatalogVersionMode</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>OidIsValid</name><argument_list>(<argument><expr><name>MyDatabaseId</name></expr></argument>)</argument_list></call></expr>
		?</condition><then> <expr><name>MyDatabaseId</name></expr> </then><else>: <expr><name>TemplateDbOid</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
