<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/backend/catalog/yb_catalog/yb_type.c"><comment type="block">/*--------------------------------------------------------------------------------------------------
 *
 * yb_type.c
 *        Commands for creating and altering table structures and settings
 *
 * Copyright (c) YugaByte, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.  See the License for the specific language governing permissions and limitations
 * under the License.
 *
 * IDENTIFICATION
 *        src/backend/catalog/yb_catalog/yb_type.c
 *
 * TODO(all) At the mininum we must support the following datatype efficiently as they are used
 * for system tables.
 *   bool
 *   char
 *   text
 *   int2
 *   int4
 *   int8
 *   float4
 *   float8
 *   timestamptz
 *   bytea
 *   oid
 *   xid
 *   cid
 *   tid
 *   name (same as text?)
 *   aclitem
 *   pg_node_tree
 *   pg_lsn
 *   pg_ndistinct
 *   pg_dependencies
 *
 *   OID aliases:
 *
 *   regproc
 *   regprocedure
 *   regoper
 *   regoperator
 *   regclass
 *   regtype
 *   regconfig
 *   regdictionary
 *
 *   Vectors/arrays:
 *
 *   int2vector (list of 16-bit integers)
 *   oidvector (list of 32-bit unsigned integers)
 *   anyarray (list of 32-bit integers - signed or unsigned)
 *--------------------------------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/sysattr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_enum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/yb_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mb/pg_wchar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parse_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/cash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/date.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/geo_decls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/inet.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/numeric.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/timestamp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/uuid.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"yb/yql/pggate/ybc_pggate.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_yb_utils.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YBCPgTypeEntity</name></type> <name>YBCFixedLenByValTypeEntity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YBCPgTypeEntity</name></type> <name>YBCNullTermByRefTypeEntity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YBCPgTypeEntity</name></type> <name>YBCVarLenByRefTypeEntity</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>Datum</name></type> <name>YbDocdbToDatum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>YBCPgTypeAttrs</name> <modifier>*</modifier></type><name>type_attrs</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>YbDatumToDocdb</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>datum</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/***************************************************************************************************
 * Find YugaByte storage type for each PostgreSQL datatype.
 * NOTE: Because YugaByte network buffer can be deleted after it is processed, Postgres layer must
 *       allocate a buffer to keep the data in its slot.
 **************************************************************************************************/</comment>
<function><type><specifier>const</specifier> <name>YBCPgTypeEntity</name> <modifier>*</modifier></type>
<name>YbDataTypeFromOidMod</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>attnum</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>type_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Find type for system column */</comment>
	<if_stmt><if>if <condition>(<expr><name>attnum</name> <operator>&lt;</operator> <name>InvalidAttrNumber</name></expr>)</condition> <block>{<block_content>
		<switch>switch <condition>(<expr><name>attnum</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><name>SelfItemPointerAttributeNumber</name></expr>:</case> <comment type="block">/* ctid */</comment>
				<expr_stmt><expr><name>type_id</name> <operator>=</operator> <name>TIDOID</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ObjectIdAttributeNumber</name></expr>:</case> <comment type="block">/* oid */</comment>
			<case>case <expr><name>TableOidAttributeNumber</name></expr>:</case> <comment type="block">/* tableoid */</comment>
				<expr_stmt><expr><name>type_id</name> <operator>=</operator> <name>OIDOID</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>MinCommandIdAttributeNumber</name></expr>:</case> <comment type="block">/* cmin */</comment>
			<case>case <expr><name>MaxCommandIdAttributeNumber</name></expr>:</case> <comment type="block">/* cmax */</comment>
				<expr_stmt><expr><name>type_id</name> <operator>=</operator> <name>CIDOID</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>MinTransactionIdAttributeNumber</name></expr>:</case> <comment type="block">/* xmin */</comment>
			<case>case <expr><name>MaxTransactionIdAttributeNumber</name></expr>:</case> <comment type="block">/* xmax */</comment>
				<expr_stmt><expr><name>type_id</name> <operator>=</operator> <name>XIDOID</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>YBTupleIdAttributeNumber</name></expr>:</case>            <comment type="block">/* ybctid */</comment>
			<case>case <expr><name>YBIdxBaseTupleIdAttributeNumber</name></expr>:</case>     <comment type="block">/* ybidxbasectid */</comment>
			<case>case <expr><name>YBUniqueIdxKeySuffixAttributeNumber</name></expr>:</case> <comment type="block">/* ybuniqueidxkeysuffix */</comment>
				<expr_stmt><expr><name>type_id</name> <operator>=</operator> <name>BYTEAOID</name></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"System column not yet supported in YugaByte: %d"</literal></expr></argument>, <argument><expr><name>attnum</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Find the type mapping entry */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>YBCPgTypeEntity</name> <modifier>*</modifier></type><name>type_entity</name> <init>= <expr><call><name>YBCPgFindTypeEntity</name><argument_list>(<argument><expr><name>type_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>YBCPgDataType</name></type> <name>yb_type</name> <init>= <expr><call><name>YBCPgGetType</name><argument_list>(<argument><expr><name>type_entity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* For non-primitive types, we need to look up the definition */</comment>
	<if_stmt><if>if <condition>(<expr><name>yb_type</name> <operator>==</operator> <name>YB_YQL_DATA_TYPE_UNKNOWN_DATA</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>HeapTuple</name></type> <name>type</name> <init>= <expr><call><name>typeidType</name><argument_list>(<argument><expr><name>type_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Form_pg_type</name></type> <name>tp</name> <init>= <expr><operator>(</operator><name>Form_pg_type</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>typtype</name></name> <operator>==</operator> <name>TYPTYPE_BASE</name></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>typbyval</name></name></expr>)</condition> <block>{<block_content>
				<comment type="block">/* fixed-length, pass-by-value base type */</comment>
				<return>return <expr><operator>&amp;</operator><name>YBCFixedLenByValTypeEntity</name></expr>;</return>
			</block_content>}</block></if> <else>else <block>{<block_content>
				<switch>switch <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>typlen</name></name></expr>)</condition> <block>{<block_content>
					<case>case <expr><operator>-</operator><literal type="number">2</literal></expr>:</case>
						<comment type="block">/* null-terminated, pass-by-reference base type */</comment>
						<return>return <expr><operator>&amp;</operator><name>YBCNullTermByRefTypeEntity</name></expr>;</return>
						<break>break;</break>
					<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
						<comment type="block">/* variable-length, pass-by-reference base type */</comment>
						<return>return <expr><operator>&amp;</operator><name>YBCVarLenByRefTypeEntity</name></expr>;</return>
						<break>break;</break>
					<default>default:</default><empty_stmt>;</empty_stmt>
						<comment type="block">/* fixed-length, pass-by-reference base type */</comment>
						<decl_stmt><decl><type><name>YBCPgTypeEntity</name> <modifier>*</modifier></type><name>fixed_ref_type_entity</name> <init>= <expr><operator>(</operator><name>YBCPgTypeEntity</name> <operator>*</operator><operator>)</operator><call><name>palloc</name><argument_list>(
								<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>YBCPgTypeEntity</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><name><name>fixed_ref_type_entity</name><operator>-&gt;</operator><name>type_oid</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>fixed_ref_type_entity</name><operator>-&gt;</operator><name>yb_type</name></name> <operator>=</operator> <name>YB_YQL_DATA_TYPE_BINARY</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>fixed_ref_type_entity</name><operator>-&gt;</operator><name>allow_for_primary_key</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>fixed_ref_type_entity</name><operator>-&gt;</operator><name>datum_fixed_size</name></name> <operator>=</operator> <name><name>tp</name><operator>-&gt;</operator><name>typlen</name></name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>fixed_ref_type_entity</name><operator>-&gt;</operator><name>datum_to_yb</name></name> <operator>=</operator> <operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToDocdb</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>fixed_ref_type_entity</name><operator>-&gt;</operator><name>yb_to_datum</name></name> <operator>=</operator>
							<operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbDocdbToDatum</name></expr>;</expr_stmt>
						<return>return <expr><name>fixed_ref_type_entity</name></expr>;</return>
						<break>break;</break>
				</block_content>}</block></switch>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<decl_stmt><decl><type><name>Oid</name></type> <name>primitive_type_oid</name> <init>=
				<expr><call><name>YbGetPrimitiveTypeOid</name><argument_list>(<argument><expr><name>type_id</name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>typtype</name></name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>typbasetype</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<return>return <expr><call><name>YbDataTypeFromOidMod</name><argument_list>(<argument><expr><name>InvalidAttrNumber</name></expr></argument>, <argument><expr><name>primitive_type_oid</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Report error if type is not supported */</comment>
	<if_stmt><if>if <condition>(<expr><name>yb_type</name> <operator>==</operator> <name>YB_YQL_DATA_TYPE_NOT_SUPPORTED</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>YB_REPORT_TYPE_NOT_SUPPORTED</name><argument_list>(<argument><expr><name>type_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Return the type-mapping entry */</comment>
	<return>return <expr><name>type_entity</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>Oid</name></type> <name>YbGetPrimitiveTypeOid</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>type_id</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>typtype</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>typbasetype</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type> <name>primitive_type_oid</name></decl>;</decl_stmt>
	<switch>switch <condition>(<expr><name>typtype</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>TYPTYPE_BASE</name></expr>:</case>
			<expr_stmt><expr><name>primitive_type_oid</name> <operator>=</operator> <name>type_id</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TYPTYPE_COMPOSITE</name></expr>:</case>
			<expr_stmt><expr><name>primitive_type_oid</name> <operator>=</operator> <name>RECORDOID</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TYPTYPE_DOMAIN</name></expr>:</case>
			<expr_stmt><expr><name>primitive_type_oid</name> <operator>=</operator> <name>typbasetype</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TYPTYPE_ENUM</name></expr>:</case>
			<expr_stmt><expr><name>primitive_type_oid</name> <operator>=</operator> <name>ANYENUMOID</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TYPTYPE_RANGE</name></expr>:</case>
			<expr_stmt><expr><name>primitive_type_oid</name> <operator>=</operator> <name>ANYRANGEOID</name></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>YB_REPORT_TYPE_NOT_SUPPORTED</name><argument_list>(<argument><expr><name>type_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
	<return>return <expr><name>primitive_type_oid</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>YbDataTypeIsValidForKey</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>type_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>YBCPgTypeEntity</name> <modifier>*</modifier></type><name>type_entity</name> <init>= <expr><call><name>YbDataTypeFromOidMod</name><argument_list>(<argument><expr><name>InvalidAttrNumber</name></expr></argument>, <argument><expr><name>type_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>YBCPgAllowForPrimaryKey</name><argument_list>(<argument><expr><name>type_entity</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>YBCPgTypeEntity</name> <modifier>*</modifier></type>
<name>YbDataTypeFromName</name><parameter_list>(<parameter><decl><type><name>TypeName</name> <modifier>*</modifier></type><name>typeName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type>   <name>type_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type> <name>typmod</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>typenameTypeIdAndMod</name><argument_list>(<argument><expr><name>NULL</name></expr></argument> <comment type="block">/* parseState */</comment> , <argument><expr><name>typeName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>typmod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>YbDataTypeFromOidMod</name><argument_list>(<argument><expr><name>InvalidAttrNumber</name></expr></argument>, <argument><expr><name>type_id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***************************************************************************************************
 * Conversion Functions.
 **************************************************************************************************/</comment>
<comment type="block">/*
 * BOOL conversion.
 * Fixed size: Ignore the "bytes" data size.
 */</comment>
<function><type><name>void</name></type> <name>YbDatumToBool</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>datum</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <call><name>DatumGetBool</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type> <name>YbBoolToDatum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bool</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>YBCPgTypeAttrs</name> <modifier>*</modifier></type><name>type_attrs</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>BoolGetDatum</name><argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * BINARY conversion.
 */</comment>
<function><type><name>void</name></type> <name>YbDatumToBinary</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>datum</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>bytes</name> <operator>=</operator> <call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type> <name>YbBinaryToDatum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>YBCPgTypeAttrs</name> <modifier>*</modifier></type><name>type_attrs</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* PostgreSQL can represent text strings up to 1 GB minus a four-byte header. */</comment>
	<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&gt;</operator> <name>kYBCMaxPostgresTextSizeBytes</name> <operator>||</operator> <name>bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_STRING_DATA_RIGHT_TRUNCATION</name></expr></argument>)</argument_list></call><operator>,</operator>
						<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Invalid data size"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>cstring_to_text_with_len</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * TEXT type conversion.
 */</comment>
<function><type><name>void</name></type> <name>YbDatumToText</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>datum</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>bytes</name> <operator>=</operator> <call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type> <name>YbTextToDatum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>YBCPgTypeAttrs</name> <modifier>*</modifier></type><name>type_attrs</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* While reading back TEXT from storage, we don't need to check for data length. */</comment>
	<return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>cstring_to_text_with_len</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * CHAR type conversion.
 */</comment>
<function><type><name>void</name></type> <name>YbDatumToChar</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>datum</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <call><name>DatumGetChar</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type> <name>YbCharToDatum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>YBCPgTypeAttrs</name> <modifier>*</modifier></type><name>type_attrs</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>CharGetDatum</name><argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * CHAR-based type conversion.
 */</comment>
<function><type><name>void</name></type> <name>YbDatumToBPChar</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>datum</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <call><name>TextDatumGetCString</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Right trim all spaces on the right. For CHAR(n) - BPCHAR - datatype, Postgres treats space
	 * characters at tail-end the same as '\0' characters.
	 *   "abc  " == "abc"
	 * Left spaces don't have this special behaviors.
	 *   "  abc" != "abc"
	 */</comment>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>data</name><operator>)</operator><index>[<expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>size</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><operator>*</operator><name>bytes</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type> <name>YbBPCharToDatum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>YBCPgTypeAttrs</name> <modifier>*</modifier></type><name>type_attrs</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* PostgreSQL can represent text strings up to 1 GB minus a four-byte header. */</comment>
	<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&gt;</operator> <name>kYBCMaxPostgresTextSizeBytes</name> <operator>||</operator> <name>bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_STRING_DATA_RIGHT_TRUNCATION</name></expr></argument>)</argument_list></call><operator>,</operator>
						<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Invalid data size"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Convert YugaByte cstring to Postgres internal representation */</comment>
	<decl_stmt><decl><type><name>FunctionCallInfoData</name></type> <name>fargs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FunctionCallInfo</name></type> <name>fcinfo</name> <init>= <expr><operator>&amp;</operator><name>fargs</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>type_attrs</name><operator>-&gt;</operator><name>typmod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>bpcharin</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>YbDatumToVarchar</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>datum</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <call><name>TextDatumGetCString</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>bytes</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type> <name>YbVarcharToDatum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>YBCPgTypeAttrs</name> <modifier>*</modifier></type><name>type_attrs</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* PostgreSQL can represent text strings up to 1 GB minus a four-byte header. */</comment>
	<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&gt;</operator> <name>kYBCMaxPostgresTextSizeBytes</name> <operator>||</operator> <name>bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_STRING_DATA_RIGHT_TRUNCATION</name></expr></argument>)</argument_list></call><operator>,</operator>
						<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Invalid data size"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Convert YugaByte cstring to Postgres internal representation */</comment>
	<decl_stmt><decl><type><name>FunctionCallInfoData</name></type> <name>fargs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FunctionCallInfo</name></type> <name>fcinfo</name> <init>= <expr><operator>&amp;</operator><name>fargs</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>type_attrs</name><operator>-&gt;</operator><name>typmod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>varcharin</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * NAME conversion.
 */</comment>
<function><type><name>void</name></type> <name>YbDatumToName</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>datum</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <call><name>DatumGetCString</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>bytes</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type> <name>YbNameToDatum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>YBCPgTypeAttrs</name> <modifier>*</modifier></type><name>type_attrs</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* PostgreSQL can represent text strings up to 1 GB minus a four-byte header. */</comment>
	<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&gt;</operator> <name>kYBCMaxPostgresTextSizeBytes</name> <operator>||</operator> <name>bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_STRING_DATA_RIGHT_TRUNCATION</name></expr></argument>)</argument_list></call><operator>,</operator>
						<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Invalid data size"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Truncate oversize input */</comment>
	<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&gt;=</operator> <name>NAMEDATALEN</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>pg_mbcliplen</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>NAMEDATALEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* We use palloc0 here to ensure result is zero-padded */</comment>
	<decl_stmt><decl><type><name>Name</name></type> <name>result</name> <init>= <expr><operator>(</operator><name>Name</name><operator>)</operator><call><name>palloc0</name><argument_list>(<argument><expr><name>NAMEDATALEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><operator>*</operator><name>result</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>NameGetDatum</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * PSEUDO-type cstring conversion.
 * Not a type that is used by users.
 */</comment>
<function><type><name>void</name></type> <name>YbDatumToCStr</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>datum</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <call><name>DatumGetCString</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>bytes</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type> <name>YbCStrToDatum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>YBCPgTypeAttrs</name> <modifier>*</modifier></type><name>type_attrs</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="block">/* PostgreSQL can represent text strings up to 1 GB minus a four-byte header. */</comment>
	<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&gt;</operator> <name>kYBCMaxPostgresTextSizeBytes</name> <operator>||</operator> <name>bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_STRING_DATA_RIGHT_TRUNCATION</name></expr></argument>)</argument_list></call><operator>,</operator>
						<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Invalid data size"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * data may or may not contain tailing \0.
	 * The result will be null-terminated string in both cases.
	 */</comment>
	<return>return <expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><call><name>pnstrdup</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * INTEGERs conversion.
 * Fixed size: Ignore the "bytes" data size.
 */</comment>
<function><type><name>void</name></type> <name>YbDatumToInt16</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>datum</name></decl></parameter>, <parameter><decl><type><name>int16</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <call><name>DatumGetInt16</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type> <name>YbInt16ToDatum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>YBCPgTypeAttrs</name> <modifier>*</modifier></type><name>type_attrs</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>Int16GetDatum</name><argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>YbDatumToInt32</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>datum</name></decl></parameter>, <parameter><decl><type><name>int32</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type> <name>YbInt32ToDatum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int32</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>YBCPgTypeAttrs</name> <modifier>*</modifier></type><name>type_attrs</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>YbDatumToInt64</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>datum</name></decl></parameter>, <parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <call><name>DatumGetInt64</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type> <name>YbInt64ToDatum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int64</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>YBCPgTypeAttrs</name> <modifier>*</modifier></type><name>type_attrs</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>Int64GetDatum</name><argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>YbDatumToUInt64</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>datum</name></decl></parameter>, <parameter><decl><type><name>uint64</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint64</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <call><name>DatumGetUInt64</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type> <name>YbUInt64ToDatum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint64</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>YBCPgTypeAttrs</name> <modifier>*</modifier></type><name>type_attrs</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <return>return <expr><call><name>UInt64GetDatum</name><argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Given datum representing a 4-byte enum oid, lookup its sort order which is
 * a 4-byte float, then treat the sort order as a 4-byte integer. Combine
 * the sort order with the enum oid to make an int64 by putting the sort order
 * at the high 4-byte and the enum oid at the low 4-byte.
 */</comment>
<function><type><name>void</name></type> <name>YbDatumToEnum</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>datum</name></decl></parameter>, <parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bytes</name></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>HeapTuple</name></type> <name>tup</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Form_pg_enum</name></type> <name>en</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint32_t</name></type> <name>sort_order</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * We expect datum to only contain a enum oid and does not already contain a sort order.
		 * For OID &gt;= 2147483648, Postgres sign-extends datum with 0xffffffff, which is -NaN and
		 * does not reprensent a valid sort order.
		 */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>datum</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>datum</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xffffffff</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Clear the high 4-byte in case it is not zero. */</comment>
		<expr_stmt><expr><name>datum</name> <operator>&amp;=</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>

		<comment type="block">/*
		 * Find the sort order of this enum oid.
		 */</comment>
		<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>ENUMOID</name></expr></argument>, <argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>en</name> <operator>=</operator> <operator>(</operator><name>Form_pg_enum</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>sort_order</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name><name>en</name><operator>-&gt;</operator><name>enumsortorder</name></name><operator>)</operator></expr>;</expr_stmt>

		<comment type="block">/*
		 * Place the sort order at the high 4-byte of datum.
		 */</comment>
		<expr_stmt><expr><name>datum</name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>int64</name><operator>)</operator> <name>sort_order</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<comment type="block">/*
		 * If the caller passes a non-null address to bytes then it means it requests
		 * us to not add sort order to datum for testing purpose.
		 */</comment>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <call><name>DatumGetInt64</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type> <name>YbEnumToDatum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int64</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>YBCPgTypeAttrs</name> <modifier>*</modifier></type><name>type_attrs</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// Clear the sort order from the higher 4-bytes.</comment>
	<return>return <expr><call><name>Int64GetDatum</name><argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xffffffffLL</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>YbDatumToOid</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>datum</name></decl></parameter>, <parameter><decl><type><name>Oid</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <call><name>DatumGetObjectId</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type> <name>YbOidToDatum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Oid</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>YBCPgTypeAttrs</name> <modifier>*</modifier></type><name>type_attrs</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>YbDatumToCommandId</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>datum</name></decl></parameter>, <parameter><decl><type><name>CommandId</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <call><name>DatumGetCommandId</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type> <name>YbCommandIdToDatum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>CommandId</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>YBCPgTypeAttrs</name> <modifier>*</modifier></type><name>type_attrs</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>CommandIdGetDatum</name><argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>YbDatumToTransactionId</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>datum</name></decl></parameter>, <parameter><decl><type><name>TransactionId</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <call><name>DatumGetTransactionId</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type> <name>YbTransactionIdToDatum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TransactionId</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>bytes</name></decl></parameter>,
							  <parameter><decl><type><specifier>const</specifier> <name>YBCPgTypeAttrs</name> <modifier>*</modifier></type><name>type_attrs</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>TransactionIdGetDatum</name><argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * FLOATs conversion.
 * Fixed size: Ignore the "bytes" data size.
 */</comment>
<function><type><name>void</name></type> <name>YbDatumToFloat4</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>datum</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <call><name>DatumGetFloat4</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type> <name>YbFloat4ToDatum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>YBCPgTypeAttrs</name> <modifier>*</modifier></type><name>type_attrs</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>Float4GetDatum</name><argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>YbDatumToFloat8</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>datum</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <call><name>DatumGetFloat8</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type> <name>YbFloat8ToDatum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>YBCPgTypeAttrs</name> <modifier>*</modifier></type><name>type_attrs</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>Float8GetDatum</name><argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * DECIMAL / NUMERIC conversion.
 * We're using plaintext c-string as an intermediate step between PG and YB numerics.
 */</comment>
<function><type><name>void</name></type> <name>YbDatumToDecimalText</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>datum</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>plaintext</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>Numeric</name></type> <name>num</name> <init>= <expr><call><name>DatumGetNumeric</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>*</operator><name>plaintext</name> <operator>=</operator> <call><name>numeric_normalize</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// NaN support will be added in ENG-4645</comment>
	<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><operator>*</operator><name>plaintext</name></expr></argument>, <argument><expr><literal type="string">"NaN"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
						<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"DECIMAL does not support NaN yet"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type> <name>YbDecimalTextToDatum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>plaintext</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>YBCPgTypeAttrs</name> <modifier>*</modifier></type><name>type_attrs</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>FunctionCallInfoData</name></type> <name>fargs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FunctionCallInfo</name></type> <name>fcinfo</name> <init>= <expr><operator>&amp;</operator><name>fargs</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>plaintext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name><name>type_attrs</name><operator>-&gt;</operator><name>typmod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>numeric_in</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * MONEY conversion.
 * We're using int64 as a representation, just like Postgres does.
 */</comment>
<function><type><name>void</name></type> <name>YbDatumToMoneyInt64</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>datum</name></decl></parameter>, <parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <call><name>DatumGetCash</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type> <name>YbMoneyInt64ToDatum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int64</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>YBCPgTypeAttrs</name> <modifier>*</modifier></type><name>type_attrs</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>CashGetDatum</name><argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * UUID Datatype.
 */</comment>
<function><type><name>void</name></type> <name>YbDatumToUuid</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>datum</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// Postgres store uuid as hex string.</comment>
	<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <operator>(</operator><call><name>DatumGetUUIDP</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>bytes</name> <operator>=</operator> <name>UUID_LEN</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type> <name>YbUuidToDatum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>YBCPgTypeAttrs</name> <modifier>*</modifier></type><name>type_attrs</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// We have to make a copy for data because the "data" pointer belongs to YugaByte cache memory</comment>
	<comment type="line">// which can be cleared at any time.</comment>
	<decl_stmt><decl><type><name>pg_uuid_t</name> <modifier>*</modifier></type><name>uuid</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>!=</operator> <name>UUID_LEN</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATA_CORRUPTED</name></expr></argument>)</argument_list></call><operator>,</operator>
						<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Unexpected size for UUID (%ld)"</literal></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>uuid</name> <operator>=</operator> <operator>(</operator><name>pg_uuid_t</name> <operator>*</operator><operator>)</operator><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pg_uuid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>uuid</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>UUID_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>UUIDPGetDatum</name><argument_list>(<argument><expr><name>uuid</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * DATE conversions.
 * PG represents DATE as signed int32 number of days since 2000-01-01, we store it as-is
 */</comment>

<function><type><name>void</name></type> <name>YbDatumToDate</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>datum</name></decl></parameter>, <parameter><decl><type><name>int32</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <call><name>DatumGetDateADT</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type> <name>YbDateToDatum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int32</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>YBCPgTypeAttrs</name><modifier>*</modifier></type> <name>type_attrs</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>DateADTGetDatum</name><argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * TIME conversions.
 * PG represents TIME as microseconds in int64, we store it as-is
 */</comment>

<function><type><name>void</name></type> <name>YbDatumToTime</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>datum</name></decl></parameter>, <parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <call><name>DatumGetTimeADT</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type> <name>YbTimeToDatum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int64</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>YBCPgTypeAttrs</name> <modifier>*</modifier></type><name>type_attrs</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<return>return <expr><call><name>TimeADTGetDatum</name><argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * INTERVAL conversions.
 * PG represents INTERVAL as 128 bit structure, store it as binary
 */</comment>
<function><type><name>void</name></type> <name>YbDatumToInterval</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>datum</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <call><name>DatumGetIntervalP</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>bytes</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Interval</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type> <name>YbIntervalToDatum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>YBCPgTypeAttrs</name> <modifier>*</modifier></type><name>type_attrs</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>sz</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Interval</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>!=</operator> <name>sz</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATA_CORRUPTED</name></expr></argument>)</argument_list></call><operator>,</operator>
						<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Unexpected size for Interval (%ld)"</literal></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<decl_stmt><decl><type><name>Interval</name><modifier>*</modifier></type> <name>result</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>IntervalPGetDatum</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>YbDatumToGinNull</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>datum</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <call><name>DatumGetUInt8</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type> <name>YbGinNullToDatum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
					   <parameter><decl><type><name>int64</name></type> <name>bytes</name></decl></parameter>,
					   <parameter><decl><type><specifier>const</specifier> <name>YBCPgTypeAttrs</name> <modifier>*</modifier></type><name>type_attrs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>UInt8GetDatum</name><argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Workaround: These conversion functions can be used as a quick workaround to support a type.
 * - Used for Datum that contains address or pointer of actual data structure.
 *     Datum = pointer to { 1 or 4 bytes for data-size | data }
 * - Save Datum exactly as-is in YugaByte storage when writing.
 * - Read YugaByte storage and copy as-is to Postgres's in-memory datum when reading.
 *
 * IMPORTANT NOTE: This doesn't work for data values that are cached in-place instead of in a
 * separate space to which the datum is pointing to. For example, it doesn't work for numeric
 * values such as int64_t.
 *   int64_value = (int64)(datum)
 *   Datum = (cached_in_place_datatype)(data)
 */</comment>

<function><type><name>void</name></type> <name>YbDatumToDocdb</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>datum</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name> <modifier>*</modifier></type><name>bytes</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>bytes</name> <operator>=</operator> <call><name>VARSIZE_ANY</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <operator>(</operator><name>uint8</name> <operator>*</operator><operator>)</operator><name>datum</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type> <name>YbDocdbToDatum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>YBCPgTypeAttrs</name> <modifier>*</modifier></type><name>type_attrs</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>uint8</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Other conversions.
 */</comment>

<comment type="block" format="doxygen">/***************************************************************************************************
 * Conversion Table
 * Contain function pointers for conversion between PostgreSQL Datum to YugaByte data.
 *
 * TODO(Alex)
 * - Change NOT_SUPPORTED to proper datatype.
 * - Turn ON or OFF certain type for KEY (true or false) when testing its support.
 **************************************************************************************************/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YBCPgTypeEntity</name></type> <name><name>YbTypeEntityTable</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr><name>BOOLOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BOOL</name></expr>, <expr><name>true</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBool</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBoolToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>BYTEAOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>true</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>CHAROID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_INT8</name></expr>, <expr><name>true</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToChar</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbCharToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>NAMEOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_STRING</name></expr>, <expr><name>true</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToName</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbNameToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>INT8OID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_INT64</name></expr>, <expr><name>true</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToInt64</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbInt64ToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>INT2OID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_INT16</name></expr>, <expr><name>true</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToInt16</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbInt16ToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>INT2VECTOROID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>true</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>INT4OID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_INT32</name></expr>, <expr><name>true</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToInt32</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbInt32ToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>REGPROCOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_UINT32</name></expr>, <expr><name>true</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToOid</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbOidToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>TEXTOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_STRING</name></expr>, <expr><name>true</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToText</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbTextToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>OIDOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_UINT32</name></expr>, <expr><name>true</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToOid</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbOidToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>TIDOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>ItemPointerData</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToDocdb</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbDocdbToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>XIDOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_UINT32</name></expr>, <expr><name>true</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>TransactionId</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToTransactionId</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbTransactionIdToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>CIDOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_UINT32</name></expr>, <expr><name>false</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>CommandId</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToCommandId</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbCommandIdToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>OIDVECTOROID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>true</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>JSONOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToDocdb</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbDocdbToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>JSONARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToDocdb</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbDocdbToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>XMLOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToDocdb</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbDocdbToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>XMLARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToDocdb</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbDocdbToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>PGNODETREEOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>PGNDISTINCTOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>PGDEPENDENCIESOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>PGDDLCOMMANDOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_INT64</name></expr>, <expr><name>true</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToInt64</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbInt64ToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>SMGROID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_INT16</name></expr>, <expr><name>true</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int16</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToInt16</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbInt16ToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>POINTOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Point</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToDocdb</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbDocdbToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>LSEGOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>LSEG</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToDocdb</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbDocdbToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>PATHOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToDocdb</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbDocdbToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>BOXOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>BOX</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToDocdb</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbDocdbToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>POLYGONOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToDocdb</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbDocdbToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>LINEOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>LINE</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToDocdb</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbDocdbToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>LINEARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToDocdb</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbDocdbToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>FLOAT4OID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_FLOAT</name></expr>, <expr><name>true</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToFloat4</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbFloat4ToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>FLOAT8OID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_DOUBLE</name></expr>, <expr><name>true</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToFloat8</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbFloat8ToDatum</name></expr> }</block></expr>,

	<comment type="block">/* Deprecated datatype in postgres since 6.3 release */</comment>
	<expr><block>{ <expr><name>ABSTIMEOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_NOT_SUPPORTED</name></expr>, <expr><name>true</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToInt32</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbInt32ToDatum</name></expr> }</block></expr>,

	<comment type="block">/* Deprecated datatype in postgres since 6.3 release */</comment>
	<expr><block>{ <expr><name>RELTIMEOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_NOT_SUPPORTED</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToDocdb</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbDocdbToDatum</name></expr> }</block></expr>,

	<comment type="block">/* Deprecated datatype in postgres since 6.3 release */</comment>
	<expr><block>{ <expr><name>TINTERVALOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_NOT_SUPPORTED</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToDocdb</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbDocdbToDatum</name></expr> }</block></expr>,

	<comment type="block">/* Deprecated datatype in postgres since 6.3 release */</comment>
	<expr><block>{ <expr><name>UNKNOWNOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_NOT_SUPPORTED</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToDocdb</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbDocdbToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>CIRCLEOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>CIRCLE</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToDocdb</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbDocdbToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>CIRCLEARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToDocdb</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbDocdbToDatum</name></expr> }</block></expr>,

	<comment type="block">/* We're using int64 to represent monetary type, just like Postgres does. */</comment>
	<expr><block>{ <expr><name>CASHOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_INT64</name></expr>, <expr><name>true</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToMoneyInt64</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbMoneyInt64ToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>MONEYARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToDocdb</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbDocdbToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>MACADDROID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>macaddr</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToDocdb</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbDocdbToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>INETOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToDocdb</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbDocdbToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>CIDROID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToDocdb</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbDocdbToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>CIDRARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToDocdb</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbDocdbToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>MACADDR8OID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>macaddr8</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToDocdb</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbDocdbToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>BOOLARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToDocdb</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbDocdbToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>BYTEAARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToDocdb</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbDocdbToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>CHARARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>NAMEARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>INT2ARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>INT2VECTORARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>INT4ARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>REGPROCARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>TEXTARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>OIDARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>TIDARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>XIDARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>CIDARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>OIDVECTORARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>BPCHARARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>VARCHARARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>INT8ARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>POINTARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>LSEGARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>PATHARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>BOXARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>FLOAT4ARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>FLOAT8ARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>ABSTIMEARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>RELTIMEARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>TINTERVALARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>POLYGONARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>ACLITEMOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>AclItem</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToDocdb</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbDocdbToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>ACLITEMARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>MACADDRARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>MACADDR8ARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>INETARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>CIDARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>CSTRINGARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>BPCHAROID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_STRING</name></expr>, <expr><name>true</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBPChar</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBPCharToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>VARCHAROID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_STRING</name></expr>, <expr><name>true</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToVarchar</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbVarcharToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>DATEOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_INT32</name></expr>, <expr><name>true</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToDate</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbDateToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>TIMEOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_INT64</name></expr>, <expr><name>true</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToTime</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbTimeToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>TIMESTAMPOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_INT64</name></expr>, <expr><name>true</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToInt64</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbInt64ToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>TIMESTAMPARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>DATEARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>TIMEARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>TIMESTAMPTZOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_INT64</name></expr>, <expr><name>true</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToInt64</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbInt64ToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>TIMESTAMPTZARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>INTERVALOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Interval</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToInterval</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbIntervalToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>INTERVALARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>NUMERICARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>TIMETZOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>TimeTzADT</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToDocdb</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbDocdbToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>TIMETZARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>BITOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToDocdb</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbDocdbToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>BITARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>VARBITOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToDocdb</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbDocdbToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>VARBITARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>NUMERICOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_DECIMAL</name></expr>, <expr><name>true</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToDecimalText</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbDecimalTextToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>REFCURSOROID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToDocdb</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbDocdbToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>REGPROCEDUREOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_UINT32</name></expr>, <expr><name>true</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToOid</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbOidToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>REGOPEROID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_UINT32</name></expr>, <expr><name>true</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToOid</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbOidToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>REGOPERATOROID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_UINT32</name></expr>, <expr><name>true</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToOid</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbOidToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>REGCLASSOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_UINT32</name></expr>, <expr><name>true</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToOid</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbOidToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>REGTYPEOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_UINT32</name></expr>, <expr><name>true</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToOid</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbOidToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>REGROLEOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_UINT32</name></expr>, <expr><name>true</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToOid</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbOidToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>REGNAMESPACEOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_UINT32</name></expr>, <expr><name>true</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToOid</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbOidToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>REGPROCEDUREARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>REGOPERARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>REGOPERATORARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>REGCLASSARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>REGTYPEARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>REGROLEARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>REGNAMESPACEARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>UUIDOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>true</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToUuid</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbUuidToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>UUIDARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>LSNOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_UINT64</name></expr>, <expr><name>true</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToUInt64</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbUInt64ToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>PG_LSNARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>TSVECTOROID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToDocdb</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbDocdbToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>GTSVECTOROID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToDocdb</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbDocdbToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>TSQUERYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToDocdb</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbDocdbToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>REGCONFIGOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_UINT32</name></expr>, <expr><name>true</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToOid</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbOidToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>REGDICTIONARYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_UINT32</name></expr>, <expr><name>true</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToOid</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbOidToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>TSVECTORARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>GTSVECTORARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>TSQUERYARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>REGCONFIGARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>REGDICTIONARYARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>JSONBOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>JSONBARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>TXID_SNAPSHOTOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>TXID_SNAPSHOTARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>INT4RANGEOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>INT4RANGEARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>NUMRANGEOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>NUMRANGEARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>TSRANGEOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>TSRANGEARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>TSTZRANGEOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>TSTZRANGEARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>DATERANGEOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>DATERANGEARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>INT8RANGEOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>INT8RANGEARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>RECORDOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToDocdb</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbDocdbToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>RECORDARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToDocdb</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbDocdbToDatum</name></expr> }</block></expr>,

	<comment type="block">/* Length(cstring) == -2 to be consistent with Postgres's 'typlen' attribute */</comment>
	<expr><block>{ <expr><name>CSTRINGOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_STRING</name></expr>, <expr><name>true</name></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToCStr</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbCStrToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>ANYARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>VOIDOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_INT64</name></expr>, <expr><name>true</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToInt64</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbInt64ToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>TRIGGEROID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_UINT32</name></expr>, <expr><name>true</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToOid</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbOidToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>EVTTRIGGEROID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_UINT32</name></expr>, <expr><name>true</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToOid</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbOidToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>LANGUAGE_HANDLEROID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_UINT32</name></expr>, <expr><name>true</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToOid</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbOidToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>INTERNALOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_INT64</name></expr>, <expr><name>true</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToInt64</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbInt64ToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>OPAQUEOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_INT32</name></expr>, <expr><name>true</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToInt32</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbInt32ToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>ANYELEMENTOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_INT32</name></expr>, <expr><name>true</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToInt32</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbInt32ToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>ANYNONARRAYOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_INT32</name></expr>, <expr><name>true</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToInt32</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbInt32ToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>ANYENUMOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_INT64</name></expr>, <expr><name>true</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToEnum</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbEnumToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>FDW_HANDLEROID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_UINT32</name></expr>, <expr><name>true</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToOid</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbOidToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>INDEX_AM_HANDLEROID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_UINT32</name></expr>, <expr><name>true</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToOid</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbOidToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>TSM_HANDLEROID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_UINT32</name></expr>, <expr><name>true</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToOid</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbOidToDatum</name></expr> }</block></expr>,

	<expr><block>{ <expr><name>ANYRANGEOID</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToDocdb</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbDocdbToDatum</name></expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Special type entity used for fixed-length, pass-by-value user-defined types.
 * TODO(jason): When user-defined types as primary keys are supported, change
 * the below `false` to `true`.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YBCPgTypeEntity</name></type> <name>YBCFixedLenByValTypeEntity</name> <init>=
	<expr><block>{ <expr><name>InvalidOid</name></expr>, <expr><name>YB_YQL_DATA_TYPE_INT64</name></expr>, <expr><name>false</name></expr>, <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64</name></expr></argument>)</argument_list></sizeof></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToInt64</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbInt64ToDatum</name></expr> }</block></expr></init></decl>;</decl_stmt>
<comment type="block">/*
 * Special type entity used for null-terminated, pass-by-reference user-defined
 * types.
 * TODO(jason): When user-defined types as primary keys are supported, change
 * the below `false` to `true`.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YBCPgTypeEntity</name></type> <name>YBCNullTermByRefTypeEntity</name> <init>=
	<expr><block>{ <expr><name>InvalidOid</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToCStr</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbCStrToDatum</name></expr> }</block></expr></init></decl>;</decl_stmt>
<comment type="block">/*
 * Special type entity used for variable-length, pass-by-reference user-defined
 * types.
 * TODO(jason): When user-defined types as primary keys are supported, change
 * the below `false` to `true`.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>YBCPgTypeEntity</name></type> <name>YBCVarLenByRefTypeEntity</name> <init>=
	<expr><block>{ <expr><name>InvalidOid</name></expr>, <expr><name>YB_YQL_DATA_TYPE_BINARY</name></expr>, <expr><name>false</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToBinary</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbBinaryToDatum</name></expr> }</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Special type entity used for ybgin null categories.
 */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>YBCPgTypeEntity</name></type> <name>YBCGinNullTypeEntity</name> <init>=
	<expr><block>{ <expr><name>InvalidOid</name></expr>, <expr><name>YB_YQL_DATA_TYPE_GIN_NULL</name></expr>, <expr><name>true</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
		<expr><operator>(</operator><name>YBCPgDatumToData</name><operator>)</operator><name>YbDatumToGinNull</name></expr>,
		<expr><operator>(</operator><name>YBCPgDatumFromData</name><operator>)</operator><name>YbGinNullToDatum</name></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>YbGetTypeTable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>YBCPgTypeEntity</name> <modifier>*</modifier><modifier>*</modifier></type><name>type_table</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>type_table</name> <operator>=</operator> <name>YbTypeEntityTable</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>count</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>YbTypeEntityTable</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>YBCPgTypeEntity</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
