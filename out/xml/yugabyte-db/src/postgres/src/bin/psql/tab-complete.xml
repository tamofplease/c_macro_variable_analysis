<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/bin/psql/tab-complete.c"><comment type="block">/*
 * psql - the PostgreSQL interactive terminal
 *
 * Copyright (c) 2000-2018, PostgreSQL Global Development Group
 *
 * src/bin/psql/tab-complete.c
 */</comment>

<comment type="block">/*----------------------------------------------------------------------
 * This file implements a somewhat more sophisticated readline "TAB
 * completion" in psql. It is not intended to be AI, to replace
 * learning SQL, or to relieve you from thinking about what you're
 * doing. Also it does not always give you all the syntactically legal
 * completions, only those that are the most common or the ones that
 * the programmer felt most like implementing.
 *
 * CAVEAT: Tab completion causes queries to be sent to the backend.
 * The number of tuples returned gets limited, in most default
 * installations to 1000, but if you still don't like this prospect,
 * you can turn off tab completion in your ~/.inputrc (or else
 * ${INPUTRC}) file so:
 *
 *	 $if psql
 *	 set disable-completion on
 *	 $endif
 *
 * See `man 3 readline' or `info readline' for the full details.
 *
 * BUGS:
 * - Quotes, parentheses, and other funny characters are not handled
 *	 all that gracefully.
 *----------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tab-complete.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"input.h"</cpp:file></cpp:include>

<comment type="block">/* If we don't have this, we might as well forget about the whole thing: */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_READLINE</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_class_d.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq-fe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pqexpbuffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"settings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stringutils.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_RL_FILENAME_COMPLETION_FUNCTION</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>filename_completion_function</name></cpp:macro> <cpp:value>rl_filename_completion_function</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<comment type="block">/* missing in some header files */</comment>
<function_decl><type><specifier>extern</specifier> <name>char</name> <modifier>*</modifier></type><name>filename_completion_function</name><parameter_list>()</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_RL_COMPLETION_MATCHES</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>completion_matches</name></cpp:macro> <cpp:value>rl_completion_matches</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PQmblenBounded</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>strnlen(s, PQmblen(s, e))</cpp:value></cpp:define>

<comment type="block">/* word break characters */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WORD_BREAKS</name></cpp:macro>		<cpp:value>"\t\n@$&gt;&lt;=;|&amp;{() "</cpp:value></cpp:define>

<comment type="block">/*
 * Since readline doesn't let us pass any state through to the tab completion
 * callback, we have to use this global variable to let get_previous_words()
 * get at the previous lines of the current command.  Ick.
 */</comment>
<decl_stmt><decl><type><name>PQExpBuffer</name></type> <name>tab_completion_query_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * In some situations, the query to find out what names are available to
 * complete with must vary depending on server version.  We handle this by
 * storing a list of queries, each tagged with the minimum server version
 * it will work for.  Each list must be stored in descending server version
 * order, so that the first satisfactory query is the one to use.
 *
 * When the query string is otherwise constant, an array of VersionedQuery
 * suffices.  Terminate the array with an entry having min_server_version = 0.
 * That entry's query string can be a query that works in all supported older
 * server versions, or NULL to give up and do no completion.
 */</comment>
<typedef>typedef <type><struct>struct <name>VersionedQuery</name>
<block>{
	<decl_stmt><decl><type><name>int</name></type>			<name>min_server_version</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl>;</decl_stmt>
}</block></struct></type> <name>VersionedQuery</name>;</typedef>

<comment type="block">/*
 * This struct is used to define "schema queries", which are custom-built
 * to obtain possibly-schema-qualified names of database objects.  There is
 * enough similarity in the structure that we don't want to repeat it each
 * time.  So we put the components of each query into this struct and
 * assemble them with the common boilerplate in _complete_from_query().
 *
 * As with VersionedQuery, we can use an array of these if the query details
 * must vary across versions.
 */</comment>
<typedef>typedef <type><struct>struct <name>SchemaQuery</name>
<block>{
	<comment type="block">/*
	 * If not zero, minimum server version this struct applies to.  If not
	 * zero, there should be a following struct with a smaller minimum server
	 * version; use catname == NULL in the last entry if we should do nothing.
	 */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>min_server_version</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Name of catalog or catalogs to be queried, with alias, eg.
	 * "pg_catalog.pg_class c".  Note that "pg_namespace n" will be added.
	 */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>catname</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Selection condition --- only rows meeting this condition are candidates
	 * to display.  If catname mentions multiple tables, include the necessary
	 * join condition here.  For example, this might look like "c.relkind = "
	 * CppAsString2(RELKIND_RELATION).  Write NULL (not an empty string) if
	 * not needed.
	 */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>selcondition</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Visibility condition --- which rows are visible without schema
	 * qualification?  For example, "pg_catalog.pg_table_is_visible(c.oid)".
	 */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>viscondition</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Namespace --- name of field to join to pg_namespace.oid. For example,
	 * "c.relnamespace".
	 */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>namespace</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Result --- the appropriately-quoted name to return, in the case of an
	 * unqualified name.  For example, "pg_catalog.quote_ident(c.relname)".
	 */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * In some cases a different result must be used for qualified names.
	 * Enter that here, or write NULL if result can be used.
	 */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>qualresult</name></decl>;</decl_stmt>
}</block></struct></type> <name>SchemaQuery</name>;</typedef>


<comment type="block">/* Store maximum number of records we want from database queries
 * (implemented via SELECT ... LIMIT xx).
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>completion_max_records</name></decl>;</decl_stmt>

<comment type="block">/*
 * Communication variables set by COMPLETE_WITH_FOO macros and then used by
 * the completion callback functions.  Ugly but there is no better way.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>completion_charp</name></decl>;</decl_stmt>	<comment type="block">/* to pass a string */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>completion_charpp</name></decl>;</decl_stmt>	<comment type="block">/* to pass a list of strings */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>completion_info_charp</name></decl>;</decl_stmt>	<comment type="block">/* to pass a second string */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>completion_info_charp2</name></decl>;</decl_stmt>	<comment type="block">/* to pass a third string */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>VersionedQuery</name> <modifier>*</modifier></type><name>completion_vquery</name></decl>;</decl_stmt> <comment type="block">/* to pass a VersionedQuery */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SchemaQuery</name> <modifier>*</modifier></type><name>completion_squery</name></decl>;</decl_stmt>	<comment type="block">/* to pass a SchemaQuery */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>completion_case_sensitive</name></decl>;</decl_stmt>	<comment type="block">/* completion is case sensitive */</comment>

<comment type="block">/*
 * A few macros to ease typing. You can use these to complete the given
 * string with
 * 1) The results from a query you pass it. (Perhaps one of those below?)
 *	  We support both simple and versioned queries.
 * 2) The results from a schema query you pass it.
 *	  We support both simple and versioned schema queries.
 * 3) The items from a null-pointer-terminated list (with or without
 *	  case-sensitive comparison; see also COMPLETE_WITH_LISTn, below).
 * 4) A string constant.
 * 5) The list of attributes of the given table (possibly schema-qualified).
 * 6/ The list of arguments to the given function (possibly schema-qualified).
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPLETE_WITH_QUERY</name><parameter_list>(<parameter><type><name>query</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>do { \
	completion_charp = query; \
	matches = completion_matches(text, complete_from_query); \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPLETE_WITH_VERSIONED_QUERY</name><parameter_list>(<parameter><type><name>query</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>do { \
	completion_vquery = query; \
	matches = completion_matches(text, complete_from_versioned_query); \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPLETE_WITH_SCHEMA_QUERY</name><parameter_list>(<parameter><type><name>query</name></type></parameter>, <parameter><type><name>addon</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>do { \
	completion_squery = &amp;(query); \
	completion_charp = addon; \
	matches = completion_matches(text, complete_from_schema_query); \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPLETE_WITH_VERSIONED_SCHEMA_QUERY</name><parameter_list>(<parameter><type><name>query</name></type></parameter>, <parameter><type><name>addon</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>do { \
	completion_squery = query; \
	completion_vquery = addon; \
	matches = completion_matches(text, complete_from_versioned_schema_query); \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPLETE_WITH_LIST_CS</name><parameter_list>(<parameter><type><name>list</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>do { \
	completion_charpp = list; \
	completion_case_sensitive = true; \
	matches = completion_matches(text, complete_from_list); \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPLETE_WITH_LIST</name><parameter_list>(<parameter><type><name>list</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>do { \
	completion_charpp = list; \
	completion_case_sensitive = false; \
	matches = completion_matches(text, complete_from_list); \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPLETE_WITH_CONST</name><parameter_list>(<parameter><type><name>string</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>do { \
	completion_charp = string; \
	completion_case_sensitive = false; \
	matches = completion_matches(text, complete_from_const); \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPLETE_WITH_ATTR</name><parameter_list>(<parameter><type><name>relation</name></type></parameter>, <parameter><type><name>addon</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>do { \
	char   *_completion_schema; \
	char   *_completion_table; \
\
	_completion_schema = strtokx(relation, " \t\n\r", ".", "\"", 0, \
								 false, false, pset.encoding); \
	(void) strtokx(NULL, " \t\n\r", ".", "\"", 0, \
				   false, false, pset.encoding); \
	_completion_table = strtokx(NULL, " \t\n\r", ".", "\"", 0, \
								false, false, pset.encoding); \
	if (_completion_table == NULL) \
	{ \
		completion_charp = Query_for_list_of_attributes  addon; \
		completion_info_charp = relation; \
	} \
	else \
	{ \
		completion_charp = Query_for_list_of_attributes_with_schema  addon; \
		completion_info_charp = _completion_table; \
		completion_info_charp2 = _completion_schema; \
	} \
	matches = completion_matches(text, complete_from_query); \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPLETE_WITH_ENUM_VALUE</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>do { \
	char   *_completion_schema; \
	char   *_completion_type; \
\
	_completion_schema = strtokx(type, " \t\n\r", ".", "\"", 0, \
								 false, false, pset.encoding); \
	(void) strtokx(NULL, " \t\n\r", ".", "\"", 0, \
				   false, false, pset.encoding); \
	_completion_type = strtokx(NULL, " \t\n\r", ".", "\"", 0, \
							   false, false, pset.encoding);  \
	if (_completion_type == NULL)\
	{ \
		completion_charp = Query_for_list_of_enum_values; \
		completion_info_charp = type; \
	} \
	else \
	{ \
		completion_charp = Query_for_list_of_enum_values_with_schema; \
		completion_info_charp = _completion_type; \
		completion_info_charp2 = _completion_schema; \
	} \
	matches = completion_matches(text, complete_from_query); \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPLETE_WITH_FUNCTION_ARG</name><parameter_list>(<parameter><type><name>function</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>do { \
	char   *_completion_schema; \
	char   *_completion_function; \
\
	_completion_schema = strtokx(function, " \t\n\r", ".", "\"", 0, \
								 false, false, pset.encoding); \
	(void) strtokx(NULL, " \t\n\r", ".", "\"", 0, \
				   false, false, pset.encoding); \
	_completion_function = strtokx(NULL, " \t\n\r", ".", "\"", 0, \
								   false, false, pset.encoding); \
	if (_completion_function == NULL) \
	{ \
		completion_charp = Query_for_list_of_arguments; \
		completion_info_charp = function; \
	} \
	else \
	{ \
		completion_charp = Query_for_list_of_arguments_with_schema; \
		completion_info_charp = _completion_function; \
		completion_info_charp2 = _completion_schema; \
	} \
	matches = completion_matches(text, complete_from_query); \
} while (0)</cpp:value></cpp:define>

<comment type="block">/*
 * These macros simplify use of COMPLETE_WITH_LIST for short, fixed lists.
 * There is no COMPLETE_WITH_LIST1; use COMPLETE_WITH_CONST for that case.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPLETE_WITH_LIST2</name><parameter_list>(<parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>do { \
	static const char *const list[] = { s1, s2, NULL }; \
	COMPLETE_WITH_LIST(list); \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPLETE_WITH_LIST3</name><parameter_list>(<parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>, <parameter><type><name>s3</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>do { \
	static const char *const list[] = { s1, s2, s3, NULL }; \
	COMPLETE_WITH_LIST(list); \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPLETE_WITH_LIST4</name><parameter_list>(<parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>, <parameter><type><name>s3</name></type></parameter>, <parameter><type><name>s4</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>do { \
	static const char *const list[] = { s1, s2, s3, s4, NULL }; \
	COMPLETE_WITH_LIST(list); \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPLETE_WITH_LIST5</name><parameter_list>(<parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>, <parameter><type><name>s3</name></type></parameter>, <parameter><type><name>s4</name></type></parameter>, <parameter><type><name>s5</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>do { \
	static const char *const list[] = { s1, s2, s3, s4, s5, NULL }; \
	COMPLETE_WITH_LIST(list); \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPLETE_WITH_LIST6</name><parameter_list>(<parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>, <parameter><type><name>s3</name></type></parameter>, <parameter><type><name>s4</name></type></parameter>, <parameter><type><name>s5</name></type></parameter>, <parameter><type><name>s6</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>do { \
	static const char *const list[] = { s1, s2, s3, s4, s5, s6, NULL }; \
	COMPLETE_WITH_LIST(list); \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPLETE_WITH_LIST7</name><parameter_list>(<parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>, <parameter><type><name>s3</name></type></parameter>, <parameter><type><name>s4</name></type></parameter>, <parameter><type><name>s5</name></type></parameter>, <parameter><type><name>s6</name></type></parameter>, <parameter><type><name>s7</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>do { \
	static const char *const list[] = { s1, s2, s3, s4, s5, s6, s7, NULL }; \
	COMPLETE_WITH_LIST(list); \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPLETE_WITH_LIST8</name><parameter_list>(<parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>, <parameter><type><name>s3</name></type></parameter>, <parameter><type><name>s4</name></type></parameter>, <parameter><type><name>s5</name></type></parameter>, <parameter><type><name>s6</name></type></parameter>, <parameter><type><name>s7</name></type></parameter>, <parameter><type><name>s8</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>do { \
	static const char *const list[] = { s1, s2, s3, s4, s5, s6, s7, s8, NULL }; \
	COMPLETE_WITH_LIST(list); \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPLETE_WITH_LIST9</name><parameter_list>(<parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>, <parameter><type><name>s3</name></type></parameter>, <parameter><type><name>s4</name></type></parameter>, <parameter><type><name>s5</name></type></parameter>, <parameter><type><name>s6</name></type></parameter>, <parameter><type><name>s7</name></type></parameter>, <parameter><type><name>s8</name></type></parameter>, <parameter><type><name>s9</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>do { \
	static const char *const list[] = { s1, s2, s3, s4, s5, s6, s7, s8, s9, NULL }; \
	COMPLETE_WITH_LIST(list); \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPLETE_WITH_LIST10</name><parameter_list>(<parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>, <parameter><type><name>s3</name></type></parameter>, <parameter><type><name>s4</name></type></parameter>, <parameter><type><name>s5</name></type></parameter>, <parameter><type><name>s6</name></type></parameter>, <parameter><type><name>s7</name></type></parameter>, <parameter><type><name>s8</name></type></parameter>, <parameter><type><name>s9</name></type></parameter>, <parameter><type><name>s10</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>do { \
	static const char *const list[] = { s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, NULL }; \
	COMPLETE_WITH_LIST(list); \
} while (0)</cpp:value></cpp:define>

<comment type="block">/*
 * Likewise for COMPLETE_WITH_LIST_CS.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPLETE_WITH_LIST_CS2</name><parameter_list>(<parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>do { \
	static const char *const list[] = { s1, s2, NULL }; \
	COMPLETE_WITH_LIST_CS(list); \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPLETE_WITH_LIST_CS3</name><parameter_list>(<parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>, <parameter><type><name>s3</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>do { \
	static const char *const list[] = { s1, s2, s3, NULL }; \
	COMPLETE_WITH_LIST_CS(list); \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPLETE_WITH_LIST_CS4</name><parameter_list>(<parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>, <parameter><type><name>s3</name></type></parameter>, <parameter><type><name>s4</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>do { \
	static const char *const list[] = { s1, s2, s3, s4, NULL }; \
	COMPLETE_WITH_LIST_CS(list); \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPLETE_WITH_LIST_CS5</name><parameter_list>(<parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>, <parameter><type><name>s3</name></type></parameter>, <parameter><type><name>s4</name></type></parameter>, <parameter><type><name>s5</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>do { \
	static const char *const list[] = { s1, s2, s3, s4, s5, NULL }; \
	COMPLETE_WITH_LIST_CS(list); \
} while (0)</cpp:value></cpp:define>

<comment type="block">/*
 * Assembly instructions for schema queries
 */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SchemaQuery</name></type> <name><name>Query_for_list_of_aggregates</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{
		<comment type="block">/* min_server_version */</comment>
		<expr><literal type="number">110000</literal></expr>,
		<comment type="block">/* catname */</comment>
		<expr><literal type="string">"pg_catalog.pg_proc p"</literal></expr>,
		<comment type="block">/* selcondition */</comment>
		<expr><literal type="string">"p.prokind = 'a'"</literal></expr>,
		<comment type="block">/* viscondition */</comment>
		<expr><literal type="string">"pg_catalog.pg_function_is_visible(p.oid)"</literal></expr>,
		<comment type="block">/* namespace */</comment>
		<expr><literal type="string">"p.pronamespace"</literal></expr>,
		<comment type="block">/* result */</comment>
		<expr><literal type="string">"pg_catalog.quote_ident(p.proname)"</literal></expr>,
		<comment type="block">/* qualresult */</comment>
		<expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<comment type="block">/* min_server_version */</comment>
		<expr><literal type="number">0</literal></expr>,
		<comment type="block">/* catname */</comment>
		<expr><literal type="string">"pg_catalog.pg_proc p"</literal></expr>,
		<comment type="block">/* selcondition */</comment>
		<expr><literal type="string">"p.proisagg"</literal></expr>,
		<comment type="block">/* viscondition */</comment>
		<expr><literal type="string">"pg_catalog.pg_function_is_visible(p.oid)"</literal></expr>,
		<comment type="block">/* namespace */</comment>
		<expr><literal type="string">"p.pronamespace"</literal></expr>,
		<comment type="block">/* result */</comment>
		<expr><literal type="string">"pg_catalog.quote_ident(p.proname)"</literal></expr>,
		<comment type="block">/* qualresult */</comment>
		<expr><name>NULL</name></expr>
	}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SchemaQuery</name></type> <name>Query_for_list_of_datatypes</name> <init>= <expr><block>{
	<comment type="block">/* min_server_version */</comment>
	<expr><literal type="number">0</literal></expr>,
	<comment type="block">/* catname */</comment>
	<expr><literal type="string">"pg_catalog.pg_type t"</literal></expr>,
	<comment type="block">/* selcondition --- ignore table rowtypes and array types */</comment>
	<expr><literal type="string">"(t.typrelid = 0 "</literal>
	<literal type="string">" OR (SELECT c.relkind = "</literal> <call><name>CppAsString2</name><argument_list>(<argument><expr><name>RELKIND_COMPOSITE_TYPE</name></expr></argument>)</argument_list></call>
	<literal type="string">"     FROM pg_catalog.pg_class c WHERE c.oid = t.typrelid)) "</literal>
	<literal type="string">"AND t.typname !~ '^_'"</literal></expr>,
	<comment type="block">/* viscondition */</comment>
	<expr><literal type="string">"pg_catalog.pg_type_is_visible(t.oid)"</literal></expr>,
	<comment type="block">/* namespace */</comment>
	<expr><literal type="string">"t.typnamespace"</literal></expr>,
	<comment type="block">/* result */</comment>
	<expr><literal type="string">"pg_catalog.format_type(t.oid, NULL)"</literal></expr>,
	<comment type="block">/* qualresult */</comment>
	<expr><literal type="string">"pg_catalog.quote_ident(t.typname)"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SchemaQuery</name></type> <name>Query_for_list_of_domains</name> <init>= <expr><block>{
	<comment type="block">/* min_server_version */</comment>
	<expr><literal type="number">0</literal></expr>,
	<comment type="block">/* catname */</comment>
	<expr><literal type="string">"pg_catalog.pg_type t"</literal></expr>,
	<comment type="block">/* selcondition */</comment>
	<expr><literal type="string">"t.typtype = 'd'"</literal></expr>,
	<comment type="block">/* viscondition */</comment>
	<expr><literal type="string">"pg_catalog.pg_type_is_visible(t.oid)"</literal></expr>,
	<comment type="block">/* namespace */</comment>
	<expr><literal type="string">"t.typnamespace"</literal></expr>,
	<comment type="block">/* result */</comment>
	<expr><literal type="string">"pg_catalog.quote_ident(t.typname)"</literal></expr>,
	<comment type="block">/* qualresult */</comment>
	<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Note: this intentionally accepts aggregates as well as plain functions */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SchemaQuery</name></type> <name><name>Query_for_list_of_functions</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{
		<comment type="block">/* min_server_version */</comment>
		<expr><literal type="number">110000</literal></expr>,
		<comment type="block">/* catname */</comment>
		<expr><literal type="string">"pg_catalog.pg_proc p"</literal></expr>,
		<comment type="block">/* selcondition */</comment>
		<expr><literal type="string">"p.prokind != 'p'"</literal></expr>,
		<comment type="block">/* viscondition */</comment>
		<expr><literal type="string">"pg_catalog.pg_function_is_visible(p.oid)"</literal></expr>,
		<comment type="block">/* namespace */</comment>
		<expr><literal type="string">"p.pronamespace"</literal></expr>,
		<comment type="block">/* result */</comment>
		<expr><literal type="string">"pg_catalog.quote_ident(p.proname)"</literal></expr>,
		<comment type="block">/* qualresult */</comment>
		<expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<comment type="block">/* min_server_version */</comment>
		<expr><literal type="number">0</literal></expr>,
		<comment type="block">/* catname */</comment>
		<expr><literal type="string">"pg_catalog.pg_proc p"</literal></expr>,
		<comment type="block">/* selcondition */</comment>
		<expr><name>NULL</name></expr>,
		<comment type="block">/* viscondition */</comment>
		<expr><literal type="string">"pg_catalog.pg_function_is_visible(p.oid)"</literal></expr>,
		<comment type="block">/* namespace */</comment>
		<expr><literal type="string">"p.pronamespace"</literal></expr>,
		<comment type="block">/* result */</comment>
		<expr><literal type="string">"pg_catalog.quote_ident(p.proname)"</literal></expr>,
		<comment type="block">/* qualresult */</comment>
		<expr><name>NULL</name></expr>
	}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SchemaQuery</name></type> <name>Query_for_list_of_indexes</name> <init>= <expr><block>{
	<comment type="block">/* min_server_version */</comment>
	<expr><literal type="number">0</literal></expr>,
	<comment type="block">/* catname */</comment>
	<expr><literal type="string">"pg_catalog.pg_class c"</literal></expr>,
	<comment type="block">/* selcondition */</comment>
	<expr><literal type="string">"c.relkind IN ("</literal> <call><name>CppAsString2</name><argument_list>(<argument><expr><name>RELKIND_INDEX</name></expr></argument>)</argument_list></call> <literal type="string">", "</literal>
	<call><name>CppAsString2</name><argument_list>(<argument><expr><name>RELKIND_PARTITIONED_INDEX</name></expr></argument>)</argument_list></call> <literal type="string">")"</literal></expr>,
	<comment type="block">/* viscondition */</comment>
	<expr><literal type="string">"pg_catalog.pg_table_is_visible(c.oid)"</literal></expr>,
	<comment type="block">/* namespace */</comment>
	<expr><literal type="string">"c.relnamespace"</literal></expr>,
	<comment type="block">/* result */</comment>
	<expr><literal type="string">"pg_catalog.quote_ident(c.relname)"</literal></expr>,
	<comment type="block">/* qualresult */</comment>
	<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SchemaQuery</name></type> <name><name>Query_for_list_of_procedures</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{
		<comment type="block">/* min_server_version */</comment>
		<expr><literal type="number">110000</literal></expr>,
		<comment type="block">/* catname */</comment>
		<expr><literal type="string">"pg_catalog.pg_proc p"</literal></expr>,
		<comment type="block">/* selcondition */</comment>
		<expr><literal type="string">"p.prokind = 'p'"</literal></expr>,
		<comment type="block">/* viscondition */</comment>
		<expr><literal type="string">"pg_catalog.pg_function_is_visible(p.oid)"</literal></expr>,
		<comment type="block">/* namespace */</comment>
		<expr><literal type="string">"p.pronamespace"</literal></expr>,
		<comment type="block">/* result */</comment>
		<expr><literal type="string">"pg_catalog.quote_ident(p.proname)"</literal></expr>,
		<comment type="block">/* qualresult */</comment>
		<expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SchemaQuery</name></type> <name>Query_for_list_of_routines</name> <init>= <expr><block>{
	<comment type="block">/* min_server_version */</comment>
	<expr><literal type="number">0</literal></expr>,
	<comment type="block">/* catname */</comment>
	<expr><literal type="string">"pg_catalog.pg_proc p"</literal></expr>,
	<comment type="block">/* selcondition */</comment>
	<expr><name>NULL</name></expr>,
	<comment type="block">/* viscondition */</comment>
	<expr><literal type="string">"pg_catalog.pg_function_is_visible(p.oid)"</literal></expr>,
	<comment type="block">/* namespace */</comment>
	<expr><literal type="string">"p.pronamespace"</literal></expr>,
	<comment type="block">/* result */</comment>
	<expr><literal type="string">"pg_catalog.quote_ident(p.proname)"</literal></expr>,
	<comment type="block">/* qualresult */</comment>
	<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SchemaQuery</name></type> <name>Query_for_list_of_sequences</name> <init>= <expr><block>{
	<comment type="block">/* min_server_version */</comment>
	<expr><literal type="number">0</literal></expr>,
	<comment type="block">/* catname */</comment>
	<expr><literal type="string">"pg_catalog.pg_class c"</literal></expr>,
	<comment type="block">/* selcondition */</comment>
	<expr><literal type="string">"c.relkind IN ("</literal> <call><name>CppAsString2</name><argument_list>(<argument><expr><name>RELKIND_SEQUENCE</name></expr></argument>)</argument_list></call> <literal type="string">")"</literal></expr>,
	<comment type="block">/* viscondition */</comment>
	<expr><literal type="string">"pg_catalog.pg_table_is_visible(c.oid)"</literal></expr>,
	<comment type="block">/* namespace */</comment>
	<expr><literal type="string">"c.relnamespace"</literal></expr>,
	<comment type="block">/* result */</comment>
	<expr><literal type="string">"pg_catalog.quote_ident(c.relname)"</literal></expr>,
	<comment type="block">/* qualresult */</comment>
	<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SchemaQuery</name></type> <name>Query_for_list_of_foreign_tables</name> <init>= <expr><block>{
	<comment type="block">/* min_server_version */</comment>
	<expr><literal type="number">0</literal></expr>,
	<comment type="block">/* catname */</comment>
	<expr><literal type="string">"pg_catalog.pg_class c"</literal></expr>,
	<comment type="block">/* selcondition */</comment>
	<expr><literal type="string">"c.relkind IN ("</literal> <call><name>CppAsString2</name><argument_list>(<argument><expr><name>RELKIND_FOREIGN_TABLE</name></expr></argument>)</argument_list></call> <literal type="string">")"</literal></expr>,
	<comment type="block">/* viscondition */</comment>
	<expr><literal type="string">"pg_catalog.pg_table_is_visible(c.oid)"</literal></expr>,
	<comment type="block">/* namespace */</comment>
	<expr><literal type="string">"c.relnamespace"</literal></expr>,
	<comment type="block">/* result */</comment>
	<expr><literal type="string">"pg_catalog.quote_ident(c.relname)"</literal></expr>,
	<comment type="block">/* qualresult */</comment>
	<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SchemaQuery</name></type> <name>Query_for_list_of_tables</name> <init>= <expr><block>{
	<comment type="block">/* min_server_version */</comment>
	<expr><literal type="number">0</literal></expr>,
	<comment type="block">/* catname */</comment>
	<expr><literal type="string">"pg_catalog.pg_class c"</literal></expr>,
	<comment type="block">/* selcondition */</comment>
	<expr><literal type="string">"c.relkind IN ("</literal> <call><name>CppAsString2</name><argument_list>(<argument><expr><name>RELKIND_RELATION</name></expr></argument>)</argument_list></call> <literal type="string">", "</literal>
	<call><name>CppAsString2</name><argument_list>(<argument><expr><name>RELKIND_PARTITIONED_TABLE</name></expr></argument>)</argument_list></call> <literal type="string">")"</literal></expr>,
	<comment type="block">/* viscondition */</comment>
	<expr><literal type="string">"pg_catalog.pg_table_is_visible(c.oid)"</literal></expr>,
	<comment type="block">/* namespace */</comment>
	<expr><literal type="string">"c.relnamespace"</literal></expr>,
	<comment type="block">/* result */</comment>
	<expr><literal type="string">"pg_catalog.quote_ident(c.relname)"</literal></expr>,
	<comment type="block">/* qualresult */</comment>
	<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SchemaQuery</name></type> <name>Query_for_list_of_partitioned_tables</name> <init>= <expr><block>{
	<comment type="block">/* min_server_version */</comment>
	<expr><literal type="number">0</literal></expr>,
	<comment type="block">/* catname */</comment>
	<expr><literal type="string">"pg_catalog.pg_class c"</literal></expr>,
	<comment type="block">/* selcondition */</comment>
	<expr><literal type="string">"c.relkind IN ("</literal> <call><name>CppAsString2</name><argument_list>(<argument><expr><name>RELKIND_PARTITIONED_TABLE</name></expr></argument>)</argument_list></call> <literal type="string">")"</literal></expr>,
	<comment type="block">/* viscondition */</comment>
	<expr><literal type="string">"pg_catalog.pg_table_is_visible(c.oid)"</literal></expr>,
	<comment type="block">/* namespace */</comment>
	<expr><literal type="string">"c.relnamespace"</literal></expr>,
	<comment type="block">/* result */</comment>
	<expr><literal type="string">"pg_catalog.quote_ident(c.relname)"</literal></expr>,
	<comment type="block">/* qualresult */</comment>
	<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SchemaQuery</name></type> <name>Query_for_list_of_constraints_with_schema</name> <init>= <expr><block>{
	<comment type="block">/* min_server_version */</comment>
	<expr><literal type="number">0</literal></expr>,
	<comment type="block">/* catname */</comment>
	<expr><literal type="string">"pg_catalog.pg_constraint c"</literal></expr>,
	<comment type="block">/* selcondition */</comment>
	<expr><literal type="string">"c.conrelid &lt;&gt; 0"</literal></expr>,
	<comment type="block">/* viscondition */</comment>
	<expr><literal type="string">"true"</literal></expr>,						<comment type="block">/* there is no pg_constraint_is_visible */</comment>
	<comment type="block">/* namespace */</comment>
	<expr><literal type="string">"c.connamespace"</literal></expr>,
	<comment type="block">/* result */</comment>
	<expr><literal type="string">"pg_catalog.quote_ident(c.conname)"</literal></expr>,
	<comment type="block">/* qualresult */</comment>
	<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Relations supporting INSERT, UPDATE or DELETE */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SchemaQuery</name></type> <name>Query_for_list_of_updatables</name> <init>= <expr><block>{
	<comment type="block">/* min_server_version */</comment>
	<expr><literal type="number">0</literal></expr>,
	<comment type="block">/* catname */</comment>
	<expr><literal type="string">"pg_catalog.pg_class c"</literal></expr>,
	<comment type="block">/* selcondition */</comment>
	<expr><literal type="string">"c.relkind IN ("</literal> <call><name>CppAsString2</name><argument_list>(<argument><expr><name>RELKIND_RELATION</name></expr></argument>)</argument_list></call> <literal type="string">", "</literal>
	<call><name>CppAsString2</name><argument_list>(<argument><expr><name>RELKIND_FOREIGN_TABLE</name></expr></argument>)</argument_list></call> <literal type="string">", "</literal>
	<call><name>CppAsString2</name><argument_list>(<argument><expr><name>RELKIND_VIEW</name></expr></argument>)</argument_list></call> <literal type="string">", "</literal>
	<call><name>CppAsString2</name><argument_list>(<argument><expr><name>RELKIND_PARTITIONED_TABLE</name></expr></argument>)</argument_list></call> <literal type="string">")"</literal></expr>,
	<comment type="block">/* viscondition */</comment>
	<expr><literal type="string">"pg_catalog.pg_table_is_visible(c.oid)"</literal></expr>,
	<comment type="block">/* namespace */</comment>
	<expr><literal type="string">"c.relnamespace"</literal></expr>,
	<comment type="block">/* result */</comment>
	<expr><literal type="string">"pg_catalog.quote_ident(c.relname)"</literal></expr>,
	<comment type="block">/* qualresult */</comment>
	<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SchemaQuery</name></type> <name>Query_for_list_of_relations</name> <init>= <expr><block>{
	<comment type="block">/* min_server_version */</comment>
	<expr><literal type="number">0</literal></expr>,
	<comment type="block">/* catname */</comment>
	<expr><literal type="string">"pg_catalog.pg_class c"</literal></expr>,
	<comment type="block">/* selcondition */</comment>
	<expr><name>NULL</name></expr>,
	<comment type="block">/* viscondition */</comment>
	<expr><literal type="string">"pg_catalog.pg_table_is_visible(c.oid)"</literal></expr>,
	<comment type="block">/* namespace */</comment>
	<expr><literal type="string">"c.relnamespace"</literal></expr>,
	<comment type="block">/* result */</comment>
	<expr><literal type="string">"pg_catalog.quote_ident(c.relname)"</literal></expr>,
	<comment type="block">/* qualresult */</comment>
	<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SchemaQuery</name></type> <name>Query_for_list_of_tsvmf</name> <init>= <expr><block>{
	<comment type="block">/* min_server_version */</comment>
	<expr><literal type="number">0</literal></expr>,
	<comment type="block">/* catname */</comment>
	<expr><literal type="string">"pg_catalog.pg_class c"</literal></expr>,
	<comment type="block">/* selcondition */</comment>
	<expr><literal type="string">"c.relkind IN ("</literal> <call><name>CppAsString2</name><argument_list>(<argument><expr><name>RELKIND_RELATION</name></expr></argument>)</argument_list></call> <literal type="string">", "</literal>
	<call><name>CppAsString2</name><argument_list>(<argument><expr><name>RELKIND_SEQUENCE</name></expr></argument>)</argument_list></call> <literal type="string">", "</literal>
	<call><name>CppAsString2</name><argument_list>(<argument><expr><name>RELKIND_VIEW</name></expr></argument>)</argument_list></call> <literal type="string">", "</literal>
	<call><name>CppAsString2</name><argument_list>(<argument><expr><name>RELKIND_MATVIEW</name></expr></argument>)</argument_list></call> <literal type="string">", "</literal>
	<call><name>CppAsString2</name><argument_list>(<argument><expr><name>RELKIND_FOREIGN_TABLE</name></expr></argument>)</argument_list></call> <literal type="string">", "</literal>
	<call><name>CppAsString2</name><argument_list>(<argument><expr><name>RELKIND_PARTITIONED_TABLE</name></expr></argument>)</argument_list></call> <literal type="string">")"</literal></expr>,
	<comment type="block">/* viscondition */</comment>
	<expr><literal type="string">"pg_catalog.pg_table_is_visible(c.oid)"</literal></expr>,
	<comment type="block">/* namespace */</comment>
	<expr><literal type="string">"c.relnamespace"</literal></expr>,
	<comment type="block">/* result */</comment>
	<expr><literal type="string">"pg_catalog.quote_ident(c.relname)"</literal></expr>,
	<comment type="block">/* qualresult */</comment>
	<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SchemaQuery</name></type> <name>Query_for_list_of_tmf</name> <init>= <expr><block>{
	<comment type="block">/* min_server_version */</comment>
	<expr><literal type="number">0</literal></expr>,
	<comment type="block">/* catname */</comment>
	<expr><literal type="string">"pg_catalog.pg_class c"</literal></expr>,
	<comment type="block">/* selcondition */</comment>
	<expr><literal type="string">"c.relkind IN ("</literal> <call><name>CppAsString2</name><argument_list>(<argument><expr><name>RELKIND_RELATION</name></expr></argument>)</argument_list></call> <literal type="string">", "</literal>
	<call><name>CppAsString2</name><argument_list>(<argument><expr><name>RELKIND_PARTITIONED_TABLE</name></expr></argument>)</argument_list></call> <literal type="string">", "</literal>
	<call><name>CppAsString2</name><argument_list>(<argument><expr><name>RELKIND_MATVIEW</name></expr></argument>)</argument_list></call> <literal type="string">", "</literal>
	<call><name>CppAsString2</name><argument_list>(<argument><expr><name>RELKIND_FOREIGN_TABLE</name></expr></argument>)</argument_list></call> <literal type="string">")"</literal></expr>,
	<comment type="block">/* viscondition */</comment>
	<expr><literal type="string">"pg_catalog.pg_table_is_visible(c.oid)"</literal></expr>,
	<comment type="block">/* namespace */</comment>
	<expr><literal type="string">"c.relnamespace"</literal></expr>,
	<comment type="block">/* result */</comment>
	<expr><literal type="string">"pg_catalog.quote_ident(c.relname)"</literal></expr>,
	<comment type="block">/* qualresult */</comment>
	<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SchemaQuery</name></type> <name>Query_for_list_of_tpm</name> <init>= <expr><block>{
	<comment type="block">/* min_server_version */</comment>
	<expr><literal type="number">0</literal></expr>,
	<comment type="block">/* catname */</comment>
	<expr><literal type="string">"pg_catalog.pg_class c"</literal></expr>,
	<comment type="block">/* selcondition */</comment>
	<expr><literal type="string">"c.relkind IN ("</literal> <call><name>CppAsString2</name><argument_list>(<argument><expr><name>RELKIND_RELATION</name></expr></argument>)</argument_list></call> <literal type="string">", "</literal>
	<call><name>CppAsString2</name><argument_list>(<argument><expr><name>RELKIND_PARTITIONED_TABLE</name></expr></argument>)</argument_list></call> <literal type="string">", "</literal>
	<call><name>CppAsString2</name><argument_list>(<argument><expr><name>RELKIND_MATVIEW</name></expr></argument>)</argument_list></call> <literal type="string">")"</literal></expr>,
	<comment type="block">/* viscondition */</comment>
	<expr><literal type="string">"pg_catalog.pg_table_is_visible(c.oid)"</literal></expr>,
	<comment type="block">/* namespace */</comment>
	<expr><literal type="string">"c.relnamespace"</literal></expr>,
	<comment type="block">/* result */</comment>
	<expr><literal type="string">"pg_catalog.quote_ident(c.relname)"</literal></expr>,
	<comment type="block">/* qualresult */</comment>
	<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SchemaQuery</name></type> <name>Query_for_list_of_tm</name> <init>= <expr><block>{
	<comment type="block">/* min_server_version */</comment>
	<expr><literal type="number">0</literal></expr>,
	<comment type="block">/* catname */</comment>
	<expr><literal type="string">"pg_catalog.pg_class c"</literal></expr>,
	<comment type="block">/* selcondition */</comment>
	<expr><literal type="string">"c.relkind IN ("</literal> <call><name>CppAsString2</name><argument_list>(<argument><expr><name>RELKIND_RELATION</name></expr></argument>)</argument_list></call> <literal type="string">", "</literal>
	<call><name>CppAsString2</name><argument_list>(<argument><expr><name>RELKIND_MATVIEW</name></expr></argument>)</argument_list></call> <literal type="string">")"</literal></expr>,
	<comment type="block">/* viscondition */</comment>
	<expr><literal type="string">"pg_catalog.pg_table_is_visible(c.oid)"</literal></expr>,
	<comment type="block">/* namespace */</comment>
	<expr><literal type="string">"c.relnamespace"</literal></expr>,
	<comment type="block">/* result */</comment>
	<expr><literal type="string">"pg_catalog.quote_ident(c.relname)"</literal></expr>,
	<comment type="block">/* qualresult */</comment>
	<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SchemaQuery</name></type> <name>Query_for_list_of_views</name> <init>= <expr><block>{
	<comment type="block">/* min_server_version */</comment>
	<expr><literal type="number">0</literal></expr>,
	<comment type="block">/* catname */</comment>
	<expr><literal type="string">"pg_catalog.pg_class c"</literal></expr>,
	<comment type="block">/* selcondition */</comment>
	<expr><literal type="string">"c.relkind IN ("</literal> <call><name>CppAsString2</name><argument_list>(<argument><expr><name>RELKIND_VIEW</name></expr></argument>)</argument_list></call> <literal type="string">")"</literal></expr>,
	<comment type="block">/* viscondition */</comment>
	<expr><literal type="string">"pg_catalog.pg_table_is_visible(c.oid)"</literal></expr>,
	<comment type="block">/* namespace */</comment>
	<expr><literal type="string">"c.relnamespace"</literal></expr>,
	<comment type="block">/* result */</comment>
	<expr><literal type="string">"pg_catalog.quote_ident(c.relname)"</literal></expr>,
	<comment type="block">/* qualresult */</comment>
	<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SchemaQuery</name></type> <name>Query_for_list_of_matviews</name> <init>= <expr><block>{
	<comment type="block">/* min_server_version */</comment>
	<expr><literal type="number">0</literal></expr>,
	<comment type="block">/* catname */</comment>
	<expr><literal type="string">"pg_catalog.pg_class c"</literal></expr>,
	<comment type="block">/* selcondition */</comment>
	<expr><literal type="string">"c.relkind IN ("</literal> <call><name>CppAsString2</name><argument_list>(<argument><expr><name>RELKIND_MATVIEW</name></expr></argument>)</argument_list></call> <literal type="string">")"</literal></expr>,
	<comment type="block">/* viscondition */</comment>
	<expr><literal type="string">"pg_catalog.pg_table_is_visible(c.oid)"</literal></expr>,
	<comment type="block">/* namespace */</comment>
	<expr><literal type="string">"c.relnamespace"</literal></expr>,
	<comment type="block">/* result */</comment>
	<expr><literal type="string">"pg_catalog.quote_ident(c.relname)"</literal></expr>,
	<comment type="block">/* qualresult */</comment>
	<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SchemaQuery</name></type> <name>Query_for_list_of_statistics</name> <init>= <expr><block>{
	<comment type="block">/* min_server_version */</comment>
	<expr><literal type="number">0</literal></expr>,
	<comment type="block">/* catname */</comment>
	<expr><literal type="string">"pg_catalog.pg_statistic_ext s"</literal></expr>,
	<comment type="block">/* selcondition */</comment>
	<expr><name>NULL</name></expr>,
	<comment type="block">/* viscondition */</comment>
	<expr><literal type="string">"pg_catalog.pg_statistics_obj_is_visible(s.oid)"</literal></expr>,
	<comment type="block">/* namespace */</comment>
	<expr><literal type="string">"s.stxnamespace"</literal></expr>,
	<comment type="block">/* result */</comment>
	<expr><literal type="string">"pg_catalog.quote_ident(s.stxname)"</literal></expr>,
	<comment type="block">/* qualresult */</comment>
	<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<comment type="block">/*
 * Queries to get lists of names of various kinds of things, possibly
 * restricted to names matching a partially entered name.  In these queries,
 * the first %s will be replaced by the text entered so far (suitably escaped
 * to become a SQL literal string).  %d will be replaced by the length of the
 * string (in unescaped form).  A second and third %s, if present, will be
 * replaced by a suitably-escaped version of the string provided in
 * completion_info_charp.  A fourth and fifth %s are similarly replaced by
 * completion_info_charp2.
 *
 * Beware that the allowed sequences of %s and %d are determined by
 * _complete_from_query().
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_list_of_attributes</name></cpp:macro> \
<cpp:value>"SELECT pg_catalog.quote_ident(attname) "\
"  FROM pg_catalog.pg_attribute a, pg_catalog.pg_class c "\
" WHERE c.oid = a.attrelid "\
"   AND a.attnum &gt; 0 "\
"   AND NOT a.attisdropped "\
"   AND substring(pg_catalog.quote_ident(attname),1,%d)='%s' "\
"   AND (pg_catalog.quote_ident(relname)='%s' "\
"        OR '\"' || relname || '\"'='%s') "\
"   AND pg_catalog.pg_table_is_visible(c.oid)"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_list_of_attributes_with_schema</name></cpp:macro> \
<cpp:value>"SELECT pg_catalog.quote_ident(attname) "\
"  FROM pg_catalog.pg_attribute a, pg_catalog.pg_class c, pg_catalog.pg_namespace n "\
" WHERE c.oid = a.attrelid "\
"   AND n.oid = c.relnamespace "\
"   AND a.attnum &gt; 0 "\
"   AND NOT a.attisdropped "\
"   AND substring(pg_catalog.quote_ident(attname),1,%d)='%s' "\
"   AND (pg_catalog.quote_ident(relname)='%s' "\
"        OR '\"' || relname || '\"' ='%s') "\
"   AND (pg_catalog.quote_ident(nspname)='%s' "\
"        OR '\"' || nspname || '\"' ='%s') "</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_list_of_enum_values</name></cpp:macro> \
<cpp:value>"SELECT pg_catalog.quote_literal(enumlabel) "\
"  FROM pg_catalog.pg_enum e, pg_catalog.pg_type t "\
" WHERE t.oid = e.enumtypid "\
"   AND substring(pg_catalog.quote_literal(enumlabel),1,%d)='%s' "\
"   AND (pg_catalog.quote_ident(typname)='%s' "\
"        OR '\"' || typname || '\"'='%s') "\
"   AND pg_catalog.pg_type_is_visible(t.oid)"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_list_of_enum_values_with_schema</name></cpp:macro> \
<cpp:value>"SELECT pg_catalog.quote_literal(enumlabel) "\
"  FROM pg_catalog.pg_enum e, pg_catalog.pg_type t, pg_catalog.pg_namespace n "\
" WHERE t.oid = e.enumtypid "\
"   AND n.oid = t.typnamespace "\
"   AND substring(pg_catalog.quote_literal(enumlabel),1,%d)='%s' "\
"   AND (pg_catalog.quote_ident(typname)='%s' "\
"        OR '\"' || typname || '\"'='%s') "\
"   AND (pg_catalog.quote_ident(nspname)='%s' "\
"        OR '\"' || nspname || '\"' ='%s') "</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_list_of_template_databases</name></cpp:macro> \
<cpp:value>"SELECT pg_catalog.quote_ident(d.datname) "\
"  FROM pg_catalog.pg_database d "\
" WHERE substring(pg_catalog.quote_ident(d.datname),1,%d)='%s' "\
"   AND (d.datistemplate OR pg_catalog.pg_has_role(d.datdba, 'USAGE'))"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_list_of_databases</name></cpp:macro> \
<cpp:value>"SELECT pg_catalog.quote_ident(datname) FROM pg_catalog.pg_database "\
" WHERE substring(pg_catalog.quote_ident(datname),1,%d)='%s'"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_list_of_tablespaces</name></cpp:macro> \
<cpp:value>"SELECT pg_catalog.quote_ident(spcname) FROM pg_catalog.pg_tablespace "\
" WHERE substring(pg_catalog.quote_ident(spcname),1,%d)='%s'"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_list_of_tablegroups</name></cpp:macro> \
<cpp:value>"SELECT pg_catalog.quote_ident(grpname) FROM pg_catalog.pg_yb_tablegroup "\
" WHERE substring(pg_catalog.quote_ident(grpname),1,%d)='%s'"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_list_of_encodings</name></cpp:macro> \
<cpp:value>" SELECT DISTINCT pg_catalog.pg_encoding_to_char(conforencoding) "\
"   FROM pg_catalog.pg_conversion "\
"  WHERE substring(pg_catalog.pg_encoding_to_char(conforencoding),1,%d)=UPPER('%s')"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_list_of_languages</name></cpp:macro> \
<cpp:value>"SELECT pg_catalog.quote_ident(lanname) "\
"  FROM pg_catalog.pg_language "\
" WHERE lanname != 'internal' "\
"   AND substring(pg_catalog.quote_ident(lanname),1,%d)='%s'"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_list_of_schemas</name></cpp:macro> \
<cpp:value>"SELECT pg_catalog.quote_ident(nspname) FROM pg_catalog.pg_namespace "\
" WHERE substring(pg_catalog.quote_ident(nspname),1,%d)='%s'"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_list_of_alter_system_set_vars</name></cpp:macro> \
<cpp:value>"SELECT name FROM "\
" (SELECT pg_catalog.lower(name) AS name FROM pg_catalog.pg_settings "\
"  WHERE context != 'internal' "\
"  UNION ALL SELECT 'all') ss "\
" WHERE substring(name,1,%d)='%s'"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_list_of_set_vars</name></cpp:macro> \
<cpp:value>"SELECT name FROM "\
" (SELECT pg_catalog.lower(name) AS name FROM pg_catalog.pg_settings "\
"  WHERE context IN ('user', 'superuser') "\
"  UNION ALL SELECT 'constraints' "\
"  UNION ALL SELECT 'transaction' "\
"  UNION ALL SELECT 'session' "\
"  UNION ALL SELECT 'role' "\
"  UNION ALL SELECT 'tablespace' "\
"  UNION ALL SELECT 'all') ss "\
" WHERE substring(name,1,%d)='%s'"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_list_of_show_vars</name></cpp:macro> \
<cpp:value>"SELECT name FROM "\
" (SELECT pg_catalog.lower(name) AS name FROM pg_catalog.pg_settings "\
"  UNION ALL SELECT 'session authorization' "\
"  UNION ALL SELECT 'all') ss "\
" WHERE substring(name,1,%d)='%s'"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_list_of_roles</name></cpp:macro> \
<cpp:value>" SELECT pg_catalog.quote_ident(rolname) "\
"   FROM pg_catalog.pg_roles "\
"  WHERE substring(pg_catalog.quote_ident(rolname),1,%d)='%s'"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_list_of_grant_roles</name></cpp:macro> \
<cpp:value>" SELECT pg_catalog.quote_ident(rolname) "\
"   FROM pg_catalog.pg_roles "\
"  WHERE substring(pg_catalog.quote_ident(rolname),1,%d)='%s'"\
" UNION ALL SELECT 'PUBLIC'"\
" UNION ALL SELECT 'CURRENT_USER'"\
" UNION ALL SELECT 'SESSION_USER'"</cpp:value></cpp:define>

<comment type="block">/* the silly-looking length condition is just to eat up the current word */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_table_owning_index</name></cpp:macro> \
<cpp:value>"SELECT pg_catalog.quote_ident(c1.relname) "\
"  FROM pg_catalog.pg_class c1, pg_catalog.pg_class c2, pg_catalog.pg_index i"\
" WHERE c1.oid=i.indrelid and i.indexrelid=c2.oid"\
"       and (%d = pg_catalog.length('%s'))"\
"       and pg_catalog.quote_ident(c2.relname)='%s'"\
"       and pg_catalog.pg_table_is_visible(c2.oid)"</cpp:value></cpp:define>

<comment type="block">/* the silly-looking length condition is just to eat up the current word */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_index_of_table</name></cpp:macro> \
<cpp:value>"SELECT pg_catalog.quote_ident(c2.relname) "\
"  FROM pg_catalog.pg_class c1, pg_catalog.pg_class c2, pg_catalog.pg_index i"\
" WHERE c1.oid=i.indrelid and i.indexrelid=c2.oid"\
"       and (%d = pg_catalog.length('%s'))"\
"       and pg_catalog.quote_ident(c1.relname)='%s'"\
"       and pg_catalog.pg_table_is_visible(c2.oid)"</cpp:value></cpp:define>

<comment type="block">/* the silly-looking length condition is just to eat up the current word */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_constraint_of_table</name></cpp:macro> \
<cpp:value>"SELECT pg_catalog.quote_ident(conname) "\
"  FROM pg_catalog.pg_class c1, pg_catalog.pg_constraint con "\
" WHERE c1.oid=conrelid and (%d = pg_catalog.length('%s'))"\
"       and pg_catalog.quote_ident(c1.relname)='%s'"\
"       and pg_catalog.pg_table_is_visible(c1.oid)"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_all_table_constraints</name></cpp:macro> \
<cpp:value>"SELECT pg_catalog.quote_ident(conname) "\
"  FROM pg_catalog.pg_constraint c "\
" WHERE c.conrelid &lt;&gt; 0 "</cpp:value></cpp:define>

<comment type="block">/* the silly-looking length condition is just to eat up the current word */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_constraint_of_type</name></cpp:macro> \
<cpp:value>"SELECT pg_catalog.quote_ident(conname) "\
"  FROM pg_catalog.pg_type t, pg_catalog.pg_constraint con "\
" WHERE t.oid=contypid and (%d = pg_catalog.length('%s'))"\
"       and pg_catalog.quote_ident(t.typname)='%s'"\
"       and pg_catalog.pg_type_is_visible(t.oid)"</cpp:value></cpp:define>

<comment type="block">/* the silly-looking length condition is just to eat up the current word */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_list_of_tables_for_constraint</name></cpp:macro> \
<cpp:value>"SELECT pg_catalog.quote_ident(relname) "\
"  FROM pg_catalog.pg_class"\
" WHERE (%d = pg_catalog.length('%s'))"\
"   AND oid IN "\
"       (SELECT conrelid FROM pg_catalog.pg_constraint "\
"         WHERE pg_catalog.quote_ident(conname)='%s')"</cpp:value></cpp:define>

<comment type="block">/* the silly-looking length condition is just to eat up the current word */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_rule_of_table</name></cpp:macro> \
<cpp:value>"SELECT pg_catalog.quote_ident(rulename) "\
"  FROM pg_catalog.pg_class c1, pg_catalog.pg_rewrite "\
" WHERE c1.oid=ev_class and (%d = pg_catalog.length('%s'))"\
"       and pg_catalog.quote_ident(c1.relname)='%s'"\
"       and pg_catalog.pg_table_is_visible(c1.oid)"</cpp:value></cpp:define>

<comment type="block">/* the silly-looking length condition is just to eat up the current word */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_list_of_tables_for_rule</name></cpp:macro> \
<cpp:value>"SELECT pg_catalog.quote_ident(relname) "\
"  FROM pg_catalog.pg_class"\
" WHERE (%d = pg_catalog.length('%s'))"\
"   AND oid IN "\
"       (SELECT ev_class FROM pg_catalog.pg_rewrite "\
"         WHERE pg_catalog.quote_ident(rulename)='%s')"</cpp:value></cpp:define>

<comment type="block">/* the silly-looking length condition is just to eat up the current word */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_trigger_of_table</name></cpp:macro> \
<cpp:value>"SELECT pg_catalog.quote_ident(tgname) "\
"  FROM pg_catalog.pg_class c1, pg_catalog.pg_trigger "\
" WHERE c1.oid=tgrelid and (%d = pg_catalog.length('%s'))"\
"       and pg_catalog.quote_ident(c1.relname)='%s'"\
"       and pg_catalog.pg_table_is_visible(c1.oid)"\
"       and not tgisinternal"</cpp:value></cpp:define>

<comment type="block">/* the silly-looking length condition is just to eat up the current word */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_list_of_tables_for_trigger</name></cpp:macro> \
<cpp:value>"SELECT pg_catalog.quote_ident(relname) "\
"  FROM pg_catalog.pg_class"\
" WHERE (%d = pg_catalog.length('%s'))"\
"   AND oid IN "\
"       (SELECT tgrelid FROM pg_catalog.pg_trigger "\
"         WHERE pg_catalog.quote_ident(tgname)='%s')"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_list_of_ts_configurations</name></cpp:macro> \
<cpp:value>"SELECT pg_catalog.quote_ident(cfgname) FROM pg_catalog.pg_ts_config "\
" WHERE substring(pg_catalog.quote_ident(cfgname),1,%d)='%s'"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_list_of_ts_dictionaries</name></cpp:macro> \
<cpp:value>"SELECT pg_catalog.quote_ident(dictname) FROM pg_catalog.pg_ts_dict "\
" WHERE substring(pg_catalog.quote_ident(dictname),1,%d)='%s'"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_list_of_ts_parsers</name></cpp:macro> \
<cpp:value>"SELECT pg_catalog.quote_ident(prsname) FROM pg_catalog.pg_ts_parser "\
" WHERE substring(pg_catalog.quote_ident(prsname),1,%d)='%s'"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_list_of_ts_templates</name></cpp:macro> \
<cpp:value>"SELECT pg_catalog.quote_ident(tmplname) FROM pg_catalog.pg_ts_template "\
" WHERE substring(pg_catalog.quote_ident(tmplname),1,%d)='%s'"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_list_of_fdws</name></cpp:macro> \
<cpp:value>" SELECT pg_catalog.quote_ident(fdwname) "\
"   FROM pg_catalog.pg_foreign_data_wrapper "\
"  WHERE substring(pg_catalog.quote_ident(fdwname),1,%d)='%s'"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_list_of_servers</name></cpp:macro> \
<cpp:value>" SELECT pg_catalog.quote_ident(srvname) "\
"   FROM pg_catalog.pg_foreign_server "\
"  WHERE substring(pg_catalog.quote_ident(srvname),1,%d)='%s'"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_list_of_user_mappings</name></cpp:macro> \
<cpp:value>" SELECT pg_catalog.quote_ident(usename) "\
"   FROM pg_catalog.pg_user_mappings "\
"  WHERE substring(pg_catalog.quote_ident(usename),1,%d)='%s'"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_list_of_access_methods</name></cpp:macro> \
<cpp:value>" SELECT pg_catalog.quote_ident(amname) "\
"   FROM pg_catalog.pg_am "\
"  WHERE substring(pg_catalog.quote_ident(amname),1,%d)='%s'"</cpp:value></cpp:define>

<comment type="block">/* the silly-looking length condition is just to eat up the current word */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_list_of_arguments</name></cpp:macro> \
<cpp:value>"SELECT pg_catalog.oidvectortypes(proargtypes)||')' "\
"  FROM pg_catalog.pg_proc "\
" WHERE (%d = pg_catalog.length('%s'))"\
"   AND (pg_catalog.quote_ident(proname)='%s'"\
"        OR '\"' || proname || '\"'='%s') "\
"   AND (pg_catalog.pg_function_is_visible(pg_proc.oid))"</cpp:value></cpp:define>

<comment type="block">/* the silly-looking length condition is just to eat up the current word */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_list_of_arguments_with_schema</name></cpp:macro> \
<cpp:value>"SELECT pg_catalog.oidvectortypes(proargtypes)||')' "\
"  FROM pg_catalog.pg_proc p, pg_catalog.pg_namespace n "\
" WHERE (%d = pg_catalog.length('%s'))"\
"   AND n.oid = p.pronamespace "\
"   AND (pg_catalog.quote_ident(proname)='%s' "\
"        OR '\"' || proname || '\"' ='%s') "\
"   AND (pg_catalog.quote_ident(nspname)='%s' "\
"        OR '\"' || nspname || '\"' ='%s') "</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_list_of_extensions</name></cpp:macro> \
<cpp:value>" SELECT pg_catalog.quote_ident(extname) "\
"   FROM pg_catalog.pg_extension "\
"  WHERE substring(pg_catalog.quote_ident(extname),1,%d)='%s'"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_list_of_available_extensions</name></cpp:macro> \
<cpp:value>" SELECT pg_catalog.quote_ident(name) "\
"   FROM pg_catalog.pg_available_extensions "\
"  WHERE substring(pg_catalog.quote_ident(name),1,%d)='%s' AND installed_version IS NULL"</cpp:value></cpp:define>

<comment type="block">/* the silly-looking length condition is just to eat up the current word */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_list_of_available_extension_versions</name></cpp:macro> \
<cpp:value>" SELECT pg_catalog.quote_ident(version) "\
"   FROM pg_catalog.pg_available_extension_versions "\
"  WHERE (%d = pg_catalog.length('%s'))"\
"    AND pg_catalog.quote_ident(name)='%s'"</cpp:value></cpp:define>

<comment type="block">/* the silly-looking length condition is just to eat up the current word */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_list_of_available_extension_versions_with_TO</name></cpp:macro> \
<cpp:value>" SELECT 'TO ' || pg_catalog.quote_ident(version) "\
"   FROM pg_catalog.pg_available_extension_versions "\
"  WHERE (%d = pg_catalog.length('%s'))"\
"    AND pg_catalog.quote_ident(name)='%s'"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_list_of_prepared_statements</name></cpp:macro> \
<cpp:value>" SELECT pg_catalog.quote_ident(name) "\
"   FROM pg_catalog.pg_prepared_statements "\
"  WHERE substring(pg_catalog.quote_ident(name),1,%d)='%s'"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_list_of_event_triggers</name></cpp:macro> \
<cpp:value>" SELECT pg_catalog.quote_ident(evtname) "\
"   FROM pg_catalog.pg_event_trigger "\
"  WHERE substring(pg_catalog.quote_ident(evtname),1,%d)='%s'"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_list_of_tablesample_methods</name></cpp:macro> \
<cpp:value>" SELECT pg_catalog.quote_ident(proname) "\
"   FROM pg_catalog.pg_proc "\
"  WHERE prorettype = 'pg_catalog.tsm_handler'::pg_catalog.regtype AND "\
"        proargtypes[0] = 'pg_catalog.internal'::pg_catalog.regtype AND "\
"        substring(pg_catalog.quote_ident(proname),1,%d)='%s'"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_list_of_policies</name></cpp:macro> \
<cpp:value>" SELECT pg_catalog.quote_ident(polname) "\
"   FROM pg_catalog.pg_policy "\
"  WHERE substring(pg_catalog.quote_ident(polname),1,%d)='%s'"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_list_of_tables_for_policy</name></cpp:macro> \
<cpp:value>"SELECT pg_catalog.quote_ident(relname) "\
"  FROM pg_catalog.pg_class"\
" WHERE (%d = pg_catalog.length('%s'))"\
"   AND oid IN "\
"       (SELECT polrelid FROM pg_catalog.pg_policy "\
"         WHERE pg_catalog.quote_ident(polname)='%s')"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_enum</name></cpp:macro> \
<cpp:value>" SELECT name FROM ( "\
"   SELECT pg_catalog.quote_ident(pg_catalog.unnest(enumvals)) AS name "\
"     FROM pg_catalog.pg_settings "\
"    WHERE pg_catalog.lower(name)=pg_catalog.lower('%s') "\
"    UNION ALL " \
"   SELECT 'DEFAULT' ) ss "\
"  WHERE pg_catalog.substring(name,1,%%d)='%%s'"</cpp:value></cpp:define>

<comment type="block">/* the silly-looking length condition is just to eat up the current word */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Query_for_partition_of_table</name></cpp:macro> \
<cpp:value>"SELECT pg_catalog.quote_ident(c2.relname) "\
"  FROM pg_catalog.pg_class c1, pg_catalog.pg_class c2, pg_catalog.pg_inherits i"\
" WHERE c1.oid=i.inhparent and i.inhrelid=c2.oid"\
"       and (%d = pg_catalog.length('%s'))"\
"       and pg_catalog.quote_ident(c1.relname)='%s'"\
"       and pg_catalog.pg_table_is_visible(c2.oid)"\
"       and c2.relispartition = 'true'"</cpp:value></cpp:define>

<comment type="block">/*
 * These object types were introduced later than our support cutoff of
 * server version 7.4.  We use the VersionedQuery infrastructure so that
 * we don't send certain-to-fail queries to older servers.
 */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>VersionedQuery</name></type> <name><name>Query_for_list_of_publications</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="number">100000</literal></expr>,
		<expr><literal type="string">" SELECT pg_catalog.quote_ident(pubname) "</literal>
		<literal type="string">"   FROM pg_catalog.pg_publication "</literal>
		<literal type="string">"  WHERE substring(pg_catalog.quote_ident(pubname),1,%d)='%s'"</literal></expr>
	}</block></expr>,
	<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>VersionedQuery</name></type> <name><name>Query_for_list_of_subscriptions</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="number">100000</literal></expr>,
		<expr><literal type="string">" SELECT pg_catalog.quote_ident(s.subname) "</literal>
		<literal type="string">"   FROM pg_catalog.pg_subscription s, pg_catalog.pg_database d "</literal>
		<literal type="string">"  WHERE substring(pg_catalog.quote_ident(s.subname),1,%d)='%s' "</literal>
		<literal type="string">"    AND d.datname = pg_catalog.current_database() "</literal>
		<literal type="string">"    AND s.subdbid = d.oid"</literal></expr>
	}</block></expr>,
	<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * This is a list of all "things" in Pgsql, which can show up after CREATE or
 * DROP; and there is also a query to get a list of them.
 */</comment>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl>;</decl_stmt>			<comment type="block">/* simple query, or NULL */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>VersionedQuery</name> <modifier>*</modifier></type><name>vquery</name></decl>;</decl_stmt>	<comment type="block">/* versioned query, or NULL */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>SchemaQuery</name> <modifier>*</modifier></type><name>squery</name></decl>;</decl_stmt>	<comment type="block">/* schema query, or NULL */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>bits32</name></type> <name>flags</name></decl>;</decl_stmt>			<comment type="block">/* visibility flags, see below */</comment>
}</block></struct></type> <name>pgsql_thing_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THING_NO_CREATE</name></cpp:macro>		<cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>	<comment type="block">/* should not show up after CREATE */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THING_NO_DROP</name></cpp:macro>		<cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>	<comment type="block">/* should not show up after DROP */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THING_NO_ALTER</name></cpp:macro>		<cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>	<comment type="block">/* should not show up after ALTER */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THING_NO_SHOW</name></cpp:macro>		<cpp:value>(THING_NO_CREATE | THING_NO_DROP | THING_NO_ALTER)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>pgsql_thing_t</name></type> <name><name>words_after_create</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="string">"ACCESS METHOD"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>THING_NO_ALTER</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"AGGREGATE"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>Query_for_list_of_aggregates</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"CAST"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>, <comment type="block">/* Casts have complex structures for names, so
								 * skip it */</comment>
	<expr><block>{<expr><literal type="string">"COLLATION"</literal></expr>, <expr><literal type="string">"SELECT pg_catalog.quote_ident(collname) FROM pg_catalog.pg_collation WHERE collencoding IN (-1, pg_catalog.pg_char_to_encoding(pg_catalog.getdatabaseencoding())) AND substring(pg_catalog.quote_ident(collname),1,%d)='%s'"</literal></expr>}</block></expr>,

	<comment type="block">/*
	 * CREATE CONSTRAINT TRIGGER is not supported here because it is designed
	 * to be used only by pg_dump.
	 */</comment>
	<expr><block>{<expr><literal type="string">"CONFIGURATION"</literal></expr>, <expr><name>Query_for_list_of_ts_configurations</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>THING_NO_SHOW</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"CONVERSION"</literal></expr>, <expr><literal type="string">"SELECT pg_catalog.quote_ident(conname) FROM pg_catalog.pg_conversion WHERE substring(pg_catalog.quote_ident(conname),1,%d)='%s'"</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"DATABASE"</literal></expr>, <expr><name>Query_for_list_of_databases</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"DEFAULT PRIVILEGES"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>THING_NO_CREATE</name> <operator>|</operator> <name>THING_NO_DROP</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"DICTIONARY"</literal></expr>, <expr><name>Query_for_list_of_ts_dictionaries</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>THING_NO_SHOW</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"DOMAIN"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>&amp;</operator><name>Query_for_list_of_domains</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"EVENT TRIGGER"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"EXTENSION"</literal></expr>, <expr><name>Query_for_list_of_extensions</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"FOREIGN DATA WRAPPER"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"FOREIGN TABLE"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"FUNCTION"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>Query_for_list_of_functions</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"GROUP"</literal></expr>, <expr><name>Query_for_list_of_roles</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"INDEX"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>&amp;</operator><name>Query_for_list_of_indexes</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"LANGUAGE"</literal></expr>, <expr><name>Query_for_list_of_languages</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"LARGE OBJECT"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>THING_NO_CREATE</name> <operator>|</operator> <name>THING_NO_DROP</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"MATERIALIZED VIEW"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>&amp;</operator><name>Query_for_list_of_matviews</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"OPERATOR"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>, <comment type="block">/* Querying for this is probably not such
									 * a good idea. */</comment>
	<expr><block>{<expr><literal type="string">"OWNED"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>THING_NO_CREATE</name> <operator>|</operator> <name>THING_NO_ALTER</name></expr>}</block></expr>,	<comment type="block">/* for DROP OWNED BY ... */</comment>
	<expr><block>{<expr><literal type="string">"PARSER"</literal></expr>, <expr><name>Query_for_list_of_ts_parsers</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>THING_NO_SHOW</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"POLICY"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"PROCEDURE"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>Query_for_list_of_procedures</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"PUBLICATION"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>Query_for_list_of_publications</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"ROLE"</literal></expr>, <expr><name>Query_for_list_of_roles</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"ROUTINE"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>&amp;</operator><name>Query_for_list_of_routines</name></expr>, <expr><name>THING_NO_CREATE</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"RULE"</literal></expr>, <expr><literal type="string">"SELECT pg_catalog.quote_ident(rulename) FROM pg_catalog.pg_rules WHERE substring(pg_catalog.quote_ident(rulename),1,%d)='%s'"</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"SCHEMA"</literal></expr>, <expr><name>Query_for_list_of_schemas</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"SEQUENCE"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>&amp;</operator><name>Query_for_list_of_sequences</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"SERVER"</literal></expr>, <expr><name>Query_for_list_of_servers</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"STATISTICS"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>&amp;</operator><name>Query_for_list_of_statistics</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"SUBSCRIPTION"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>Query_for_list_of_subscriptions</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"SYSTEM"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>THING_NO_CREATE</name> <operator>|</operator> <name>THING_NO_DROP</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"TABLE"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>&amp;</operator><name>Query_for_list_of_tables</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"TABLESPACE"</literal></expr>, <expr><name>Query_for_list_of_tablespaces</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"TABLEGROUP"</literal></expr>, <expr><name>Query_for_list_of_tablegroups</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"TEMP"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>THING_NO_DROP</name> <operator>|</operator> <name>THING_NO_ALTER</name></expr>}</block></expr>, <comment type="block">/* for CREATE TEMP TABLE
																 * ... */</comment>
	<expr><block>{<expr><literal type="string">"TEMPLATE"</literal></expr>, <expr><name>Query_for_list_of_ts_templates</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>THING_NO_SHOW</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"TEMPORARY"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>THING_NO_DROP</name> <operator>|</operator> <name>THING_NO_ALTER</name></expr>}</block></expr>,	<comment type="block">/* for CREATE TEMPORARY
																		 * TABLE ... */</comment>
	<expr><block>{<expr><literal type="string">"TEXT SEARCH"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"TRANSFORM"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"TRIGGER"</literal></expr>, <expr><literal type="string">"SELECT pg_catalog.quote_ident(tgname) FROM pg_catalog.pg_trigger WHERE substring(pg_catalog.quote_ident(tgname),1,%d)='%s' AND NOT tgisinternal"</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"TYPE"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>&amp;</operator><name>Query_for_list_of_datatypes</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"UNIQUE"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>THING_NO_DROP</name> <operator>|</operator> <name>THING_NO_ALTER</name></expr>}</block></expr>,	<comment type="block">/* for CREATE UNIQUE
																	 * INDEX ... */</comment>
	<expr><block>{<expr><literal type="string">"UNLOGGED"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>THING_NO_DROP</name> <operator>|</operator> <name>THING_NO_ALTER</name></expr>}</block></expr>, <comment type="block">/* for CREATE UNLOGGED
																	 * TABLE ... */</comment>
	<expr><block>{<expr><literal type="string">"USER"</literal></expr>, <expr><name>Query_for_list_of_roles</name> <literal type="string">" UNION SELECT 'MAPPING FOR'"</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"USER MAPPING FOR"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"VIEW"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><operator>&amp;</operator><name>Query_for_list_of_views</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>}</block></expr>						<comment type="block">/* end of list */</comment>
}</block></expr></init></decl>;</decl_stmt>


<comment type="block">/* Forward declaration of functions */</comment>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>psql_completion</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>create_command_generator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>drop_command_generator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>alter_command_generator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>complete_from_query</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>complete_from_versioned_query</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>complete_from_schema_query</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>complete_from_versioned_schema_query</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>_complete_from_query</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>simple_query</name></decl></parameter>,
					 <parameter><decl><type><specifier>const</specifier> <name>SchemaQuery</name> <modifier>*</modifier></type><name>schema_query</name></decl></parameter>,
					 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>complete_from_list</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>complete_from_const</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>append_variable_names</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>varnames</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nvars</name></decl></parameter>,
					  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>maxvars</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>varname</name></decl></parameter>,
					  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suffix</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>complete_from_variables</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>,
						<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suffix</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>need_value</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>complete_from_files</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>pg_strdup_keyword_case</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>escape_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PGresult</name> <modifier>*</modifier></type><name>exec_query</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>get_previous_words</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>point</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nwords</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_guctype</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>varname</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NOT_USED</name></cpp:ifdef>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>quote_file_name</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>match_type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>quote_pointer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>dequote_file_name</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>quote_char</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/*
 * Initialize the readline library for our purposes.
 */</comment>
<function><type><name>void</name></type>
<name>initialize_readline</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>rl_readline_name</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>pset</name><operator>.</operator><name>progname</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>rl_attempted_completion_function</name> <operator>=</operator> <name>psql_completion</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>rl_basic_word_break_characters</name> <operator>=</operator> <name>WORD_BREAKS</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>completion_max_records</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * There is a variable rl_completion_query_items for this but apparently
	 * it's not defined everywhere.
	 */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * Check if 'word' matches any of the '|'-separated strings in 'pattern',
 * using case-insensitive or case-sensitive comparisons.
 *
 * If pattern is NULL, it's a wild card that matches any word.
 * If pattern begins with '!', the result is negated, ie we check that 'word'
 * does *not* match any alternative appearing in the rest of 'pattern'.
 * Any alternative can end with '*' which is a wild card, i.e., it means
 * match any word that matches the characters so far.  (We do not currently
 * support '*' elsewhere than the end of an alternative.)
 *
 * For readability, callers should use the macros MatchAny and MatchAnyExcept
 * to invoke those two special cases for 'pattern'.  (But '|' and '*' must
 * just be written directly in patterns.)
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MatchAny</name></cpp:macro>  <cpp:value>NULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MatchAnyExcept</name><parameter_list>(<parameter><type><name>pattern</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>("!" pattern)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>word_matches_internal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>,
					  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>word</name></decl></parameter>,
					  <parameter><decl><type><name>bool</name></type> <name>case_sensitive</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>wordlen</name></decl>,
				<decl><type ref="prev"/><name>patternlen</name></decl>;</decl_stmt>

	<comment type="block">/* NULL pattern matches anything. */</comment>
	<if_stmt><if>if <condition>(<expr><name>pattern</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Handle negated patterns from the MatchAnyExcept macro. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pattern</name> <operator>==</operator> <literal type="char">'!'</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>!</operator><call><name>word_matches_internal</name><argument_list>(<argument><expr><name>pattern</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>word</name></expr></argument>, <argument><expr><name>case_sensitive</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Else consider each alternative in the pattern. */</comment>
	<expr_stmt><expr><name>wordlen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

		<comment type="block">/* Find end of current alternative. */</comment>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <name>pattern</name></expr>;</expr_stmt>
		<while>while <condition>(<expr><operator>*</operator><name>c</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>c</name> <operator>!=</operator> <literal type="char">'|'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
		<comment type="block">/* Was there a wild card?  (Assumes first alternative is not empty) */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>c</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Yes, wildcard match? */</comment>
			<expr_stmt><expr><name>patternlen</name> <operator>=</operator> <name>c</name> <operator>-</operator> <name>pattern</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>wordlen</name> <operator>&gt;=</operator> <name>patternlen</name> <operator>&amp;&amp;</operator>
				<operator>(</operator><ternary><condition><expr><name>case_sensitive</name></expr> ?</condition><then>
				 <expr><call><name>strncmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>patternlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> </then><else>:
				 <expr><call><name>pg_strncasecmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>patternlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* No, plain match? */</comment>
			<expr_stmt><expr><name>patternlen</name> <operator>=</operator> <name>c</name> <operator>-</operator> <name>pattern</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>wordlen</name> <operator>==</operator> <name>patternlen</name> <operator>&amp;&amp;</operator>
				<operator>(</operator><ternary><condition><expr><name>case_sensitive</name></expr> ?</condition><then>
				 <expr><call><name>strncmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>wordlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> </then><else>:
				 <expr><call><name>pg_strncasecmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>wordlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
		<comment type="block">/* Out of alternatives? */</comment>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>c</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<comment type="block">/* Nope, try next alternative. */</comment>
		<expr_stmt><expr><name>pattern</name> <operator>=</operator> <name>c</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * There are enough matching calls below that it seems worth having these two
 * interface routines rather than including a third parameter in every call.
 *
 * word_matches --- match case-insensitively.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>word_matches</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>word</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>word_matches_internal</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>word</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * word_matches_cs --- match case-sensitively.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>word_matches_cs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pattern</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>word</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>word_matches_internal</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>word</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Check if the final character of 's' is 'c'.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ends_with</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>length</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><operator>(</operator><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>length</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>c</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * The completion function.
 *
 * According to readline spec this gets passed the text entered so far and its
 * start and end positions in the readline buffer. The return value is some
 * partially obscure list format that can be generated by readline's
 * completion_matches() function, so we don't have to worry about it.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type>
<name>psql_completion</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* This is the variable we'll return. */</comment>
	<decl_stmt><decl><type><name>char</name>	  <modifier>*</modifier><modifier>*</modifier></type><name>matches</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Workspace for parsed words. */</comment>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>words_buffer</name></decl>;</decl_stmt>

	<comment type="block">/* This array will contain pointers to parsed words. */</comment>
	<decl_stmt><decl><type><name>char</name>	  <modifier>*</modifier><modifier>*</modifier></type><name>previous_words</name></decl>;</decl_stmt>

	<comment type="block">/* The number of words found on the input line. */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>previous_words_count</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * For compactness, we use these macros to reference previous_words[].
	 * Caution: do not access a previous_words[] entry without having checked
	 * previous_words_count to be sure it's valid.  In most cases below, that
	 * check is implicit in a TailMatches() or similar macro, but in some
	 * places we have to check it explicitly.
	 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>prev_wd</name></cpp:macro>   <cpp:value>(previous_words[0])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>prev2_wd</name></cpp:macro>  <cpp:value>(previous_words[1])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>prev3_wd</name></cpp:macro>  <cpp:value>(previous_words[2])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>prev4_wd</name></cpp:macro>  <cpp:value>(previous_words[3])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>prev5_wd</name></cpp:macro>  <cpp:value>(previous_words[4])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>prev6_wd</name></cpp:macro>  <cpp:value>(previous_words[5])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>prev7_wd</name></cpp:macro>  <cpp:value>(previous_words[6])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>prev8_wd</name></cpp:macro>  <cpp:value>(previous_words[7])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>prev9_wd</name></cpp:macro>  <cpp:value>(previous_words[8])</cpp:value></cpp:define>

	<comment type="block">/* Macros for matching the last N words before point, case-insensitively. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TailMatches1</name><parameter_list>(<parameter><type><name>p1</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(previous_words_count &gt;= 1 &amp;&amp; \
	 word_matches(p1, prev_wd))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TailMatches2</name><parameter_list>(<parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(previous_words_count &gt;= 2 &amp;&amp; \
	 word_matches(p1, prev_wd) &amp;&amp; \
	 word_matches(p2, prev2_wd))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TailMatches3</name><parameter_list>(<parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(previous_words_count &gt;= 3 &amp;&amp; \
	 word_matches(p1, prev_wd) &amp;&amp; \
	 word_matches(p2, prev2_wd) &amp;&amp; \
	 word_matches(p3, prev3_wd))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TailMatches4</name><parameter_list>(<parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(previous_words_count &gt;= 4 &amp;&amp; \
	 word_matches(p1, prev_wd) &amp;&amp; \
	 word_matches(p2, prev2_wd) &amp;&amp; \
	 word_matches(p3, prev3_wd) &amp;&amp; \
	 word_matches(p4, prev4_wd))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TailMatches5</name><parameter_list>(<parameter><type><name>p5</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(previous_words_count &gt;= 5 &amp;&amp; \
	 word_matches(p1, prev_wd) &amp;&amp; \
	 word_matches(p2, prev2_wd) &amp;&amp; \
	 word_matches(p3, prev3_wd) &amp;&amp; \
	 word_matches(p4, prev4_wd) &amp;&amp; \
	 word_matches(p5, prev5_wd))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TailMatches6</name><parameter_list>(<parameter><type><name>p6</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(previous_words_count &gt;= 6 &amp;&amp; \
	 word_matches(p1, prev_wd) &amp;&amp; \
	 word_matches(p2, prev2_wd) &amp;&amp; \
	 word_matches(p3, prev3_wd) &amp;&amp; \
	 word_matches(p4, prev4_wd) &amp;&amp; \
	 word_matches(p5, prev5_wd) &amp;&amp; \
	 word_matches(p6, prev6_wd))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TailMatches7</name><parameter_list>(<parameter><type><name>p7</name></type></parameter>, <parameter><type><name>p6</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(previous_words_count &gt;= 7 &amp;&amp; \
	 word_matches(p1, prev_wd) &amp;&amp; \
	 word_matches(p2, prev2_wd) &amp;&amp; \
	 word_matches(p3, prev3_wd) &amp;&amp; \
	 word_matches(p4, prev4_wd) &amp;&amp; \
	 word_matches(p5, prev5_wd) &amp;&amp; \
	 word_matches(p6, prev6_wd) &amp;&amp; \
	 word_matches(p7, prev7_wd))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TailMatches8</name><parameter_list>(<parameter><type><name>p8</name></type></parameter>, <parameter><type><name>p7</name></type></parameter>, <parameter><type><name>p6</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(previous_words_count &gt;= 8 &amp;&amp; \
	 word_matches(p1, prev_wd) &amp;&amp; \
	 word_matches(p2, prev2_wd) &amp;&amp; \
	 word_matches(p3, prev3_wd) &amp;&amp; \
	 word_matches(p4, prev4_wd) &amp;&amp; \
	 word_matches(p5, prev5_wd) &amp;&amp; \
	 word_matches(p6, prev6_wd) &amp;&amp; \
	 word_matches(p7, prev7_wd) &amp;&amp; \
	 word_matches(p8, prev8_wd))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TailMatches9</name><parameter_list>(<parameter><type><name>p9</name></type></parameter>, <parameter><type><name>p8</name></type></parameter>, <parameter><type><name>p7</name></type></parameter>, <parameter><type><name>p6</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(previous_words_count &gt;= 9 &amp;&amp; \
	 word_matches(p1, prev_wd) &amp;&amp; \
	 word_matches(p2, prev2_wd) &amp;&amp; \
	 word_matches(p3, prev3_wd) &amp;&amp; \
	 word_matches(p4, prev4_wd) &amp;&amp; \
	 word_matches(p5, prev5_wd) &amp;&amp; \
	 word_matches(p6, prev6_wd) &amp;&amp; \
	 word_matches(p7, prev7_wd) &amp;&amp; \
	 word_matches(p8, prev8_wd) &amp;&amp; \
	 word_matches(p9, prev9_wd))</cpp:value></cpp:define>

	<comment type="block">/* Macros for matching the last N words before point, case-sensitively. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TailMatchesCS1</name><parameter_list>(<parameter><type><name>p1</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(previous_words_count &gt;= 1 &amp;&amp; \
	 word_matches_cs(p1, prev_wd))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TailMatchesCS2</name><parameter_list>(<parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(previous_words_count &gt;= 2 &amp;&amp; \
	 word_matches_cs(p1, prev_wd) &amp;&amp; \
	 word_matches_cs(p2, prev2_wd))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TailMatchesCS3</name><parameter_list>(<parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(previous_words_count &gt;= 3 &amp;&amp; \
	 word_matches_cs(p1, prev_wd) &amp;&amp; \
	 word_matches_cs(p2, prev2_wd) &amp;&amp; \
	 word_matches_cs(p3, prev3_wd))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TailMatchesCS4</name><parameter_list>(<parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p1</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(previous_words_count &gt;= 4 &amp;&amp; \
	 word_matches_cs(p1, prev_wd) &amp;&amp; \
	 word_matches_cs(p2, prev2_wd) &amp;&amp; \
	 word_matches_cs(p3, prev3_wd) &amp;&amp; \
	 word_matches_cs(p4, prev4_wd))</cpp:value></cpp:define>

	<comment type="block">/*
	 * Macros for matching N words beginning at the start of the line,
	 * case-insensitively.
	 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Matches1</name><parameter_list>(<parameter><type><name>p1</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(previous_words_count == 1 &amp;&amp; \
	 TailMatches1(p1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Matches2</name><parameter_list>(<parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(previous_words_count == 2 &amp;&amp; \
	 TailMatches2(p1, p2))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Matches3</name><parameter_list>(<parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(previous_words_count == 3 &amp;&amp; \
	 TailMatches3(p1, p2, p3))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Matches4</name><parameter_list>(<parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(previous_words_count == 4 &amp;&amp; \
	 TailMatches4(p1, p2, p3, p4))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Matches5</name><parameter_list>(<parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(previous_words_count == 5 &amp;&amp; \
	 TailMatches5(p1, p2, p3, p4, p5))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Matches6</name><parameter_list>(<parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>, <parameter><type><name>p6</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(previous_words_count == 6 &amp;&amp; \
	 TailMatches6(p1, p2, p3, p4, p5, p6))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Matches7</name><parameter_list>(<parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>, <parameter><type><name>p6</name></type></parameter>, <parameter><type><name>p7</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(previous_words_count == 7 &amp;&amp; \
	 TailMatches7(p1, p2, p3, p4, p5, p6, p7))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Matches8</name><parameter_list>(<parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>, <parameter><type><name>p6</name></type></parameter>, <parameter><type><name>p7</name></type></parameter>, <parameter><type><name>p8</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(previous_words_count == 8 &amp;&amp; \
	 TailMatches8(p1, p2, p3, p4, p5, p6, p7, p8))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Matches9</name><parameter_list>(<parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>, <parameter><type><name>p6</name></type></parameter>, <parameter><type><name>p7</name></type></parameter>, <parameter><type><name>p8</name></type></parameter>, <parameter><type><name>p9</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(previous_words_count == 9 &amp;&amp; \
	 TailMatches9(p1, p2, p3, p4, p5, p6, p7, p8, p9))</cpp:value></cpp:define>

	<comment type="block">/*
	 * Macros for matching N words at the start of the line, regardless of
	 * what is after them, case-insensitively.
	 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HeadMatches1</name><parameter_list>(<parameter><type><name>p1</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(previous_words_count &gt;= 1 &amp;&amp; \
	 word_matches(p1, previous_words[previous_words_count - 1]))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HeadMatches2</name><parameter_list>(<parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(previous_words_count &gt;= 2 &amp;&amp; \
	 word_matches(p1, previous_words[previous_words_count - 1]) &amp;&amp; \
	 word_matches(p2, previous_words[previous_words_count - 2]))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HeadMatches3</name><parameter_list>(<parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(previous_words_count &gt;= 3 &amp;&amp; \
	 word_matches(p1, previous_words[previous_words_count - 1]) &amp;&amp; \
	 word_matches(p2, previous_words[previous_words_count - 2]) &amp;&amp; \
	 word_matches(p3, previous_words[previous_words_count - 3]))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HeadMatches4</name><parameter_list>(<parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(previous_words_count &gt;= 4 &amp;&amp; \
	 word_matches(p1, previous_words[previous_words_count - 1]) &amp;&amp; \
	 word_matches(p2, previous_words[previous_words_count - 2]) &amp;&amp; \
	 word_matches(p3, previous_words[previous_words_count - 3]) &amp;&amp; \
	 word_matches(p4, previous_words[previous_words_count - 4]))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HeadMatches5</name><parameter_list>(<parameter><type><name>p1</name></type></parameter>, <parameter><type><name>p2</name></type></parameter>, <parameter><type><name>p3</name></type></parameter>, <parameter><type><name>p4</name></type></parameter>, <parameter><type><name>p5</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(previous_words_count &gt;= 5 &amp;&amp; \
	 word_matches(p1, previous_words[previous_words_count - 1]) &amp;&amp; \
	 word_matches(p2, previous_words[previous_words_count - 2]) &amp;&amp; \
	 word_matches(p3, previous_words[previous_words_count - 3]) &amp;&amp; \
	 word_matches(p4, previous_words[previous_words_count - 4]) &amp;&amp; \
	 word_matches(p5, previous_words[previous_words_count - 5]))</cpp:value></cpp:define>

	<comment type="block">/* Known command-starting keywords. */</comment>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>sql_commands</name><index>[]</index></name> <init>= <expr><block>{
		<expr><literal type="string">"ABORT"</literal></expr>, <expr><literal type="string">"ALTER"</literal></expr>, <expr><literal type="string">"ANALYZE"</literal></expr>, <expr><literal type="string">"BEGIN"</literal></expr>, <expr><literal type="string">"CALL"</literal></expr>, <expr><literal type="string">"CHECKPOINT"</literal></expr>, <expr><literal type="string">"CLOSE"</literal></expr>, <expr><literal type="string">"CLUSTER"</literal></expr>,
		<expr><literal type="string">"COMMENT"</literal></expr>, <expr><literal type="string">"COMMIT"</literal></expr>, <expr><literal type="string">"COPY"</literal></expr>, <expr><literal type="string">"CREATE"</literal></expr>, <expr><literal type="string">"DEALLOCATE"</literal></expr>, <expr><literal type="string">"DECLARE"</literal></expr>,
		<expr><literal type="string">"DELETE FROM"</literal></expr>, <expr><literal type="string">"DISCARD"</literal></expr>, <expr><literal type="string">"DO"</literal></expr>, <expr><literal type="string">"DROP"</literal></expr>, <expr><literal type="string">"END"</literal></expr>, <expr><literal type="string">"EXECUTE"</literal></expr>, <expr><literal type="string">"EXPLAIN"</literal></expr>,
		<expr><literal type="string">"FETCH"</literal></expr>, <expr><literal type="string">"GRANT"</literal></expr>, <expr><literal type="string">"IMPORT"</literal></expr>, <expr><literal type="string">"INSERT"</literal></expr>, <expr><literal type="string">"LISTEN"</literal></expr>, <expr><literal type="string">"LOAD"</literal></expr>, <expr><literal type="string">"LOCK"</literal></expr>,
		<expr><literal type="string">"MOVE"</literal></expr>, <expr><literal type="string">"NOTIFY"</literal></expr>, <expr><literal type="string">"PREPARE"</literal></expr>,
		<expr><literal type="string">"REASSIGN"</literal></expr>, <expr><literal type="string">"REFRESH MATERIALIZED VIEW"</literal></expr>, <expr><literal type="string">"REINDEX"</literal></expr>, <expr><literal type="string">"RELEASE"</literal></expr>,
		<expr><literal type="string">"RESET"</literal></expr>, <expr><literal type="string">"REVOKE"</literal></expr>, <expr><literal type="string">"ROLLBACK"</literal></expr>,
		<expr><literal type="string">"SAVEPOINT"</literal></expr>, <expr><literal type="string">"SECURITY LABEL"</literal></expr>, <expr><literal type="string">"SELECT"</literal></expr>, <expr><literal type="string">"SET"</literal></expr>, <expr><literal type="string">"SHOW"</literal></expr>, <expr><literal type="string">"START"</literal></expr>,
		<expr><literal type="string">"TABLE"</literal></expr>, <expr><literal type="string">"TRUNCATE"</literal></expr>, <expr><literal type="string">"UNLISTEN"</literal></expr>, <expr><literal type="string">"UPDATE"</literal></expr>, <expr><literal type="string">"VACUUM"</literal></expr>, <expr><literal type="string">"VALUES"</literal></expr>, <expr><literal type="string">"WITH"</literal></expr>,
		<expr><name>NULL</name></expr>
	}</block></expr></init></decl>;</decl_stmt>

	<comment type="block">/* psql's backslash commands. */</comment>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>backslash_commands</name><index>[]</index></name> <init>= <expr><block>{
		<expr><literal type="string">"\\a"</literal></expr>,
		<expr><literal type="string">"\\connect"</literal></expr>, <expr><literal type="string">"\\conninfo"</literal></expr>, <expr><literal type="string">"\\C"</literal></expr>, <expr><literal type="string">"\\cd"</literal></expr>, <expr><literal type="string">"\\copy"</literal></expr>,
		<expr><literal type="string">"\\copyright"</literal></expr>, <expr><literal type="string">"\\crosstabview"</literal></expr>,
		<expr><literal type="string">"\\d"</literal></expr>, <expr><literal type="string">"\\da"</literal></expr>, <expr><literal type="string">"\\dA"</literal></expr>, <expr><literal type="string">"\\db"</literal></expr>, <expr><literal type="string">"\\dc"</literal></expr>, <expr><literal type="string">"\\dC"</literal></expr>, <expr><literal type="string">"\\dd"</literal></expr>, <expr><literal type="string">"\\ddp"</literal></expr>, <expr><literal type="string">"\\dD"</literal></expr>,
		<expr><literal type="string">"\\des"</literal></expr>, <expr><literal type="string">"\\det"</literal></expr>, <expr><literal type="string">"\\deu"</literal></expr>, <expr><literal type="string">"\\dew"</literal></expr>, <expr><literal type="string">"\\dE"</literal></expr>, <expr><literal type="string">"\\df"</literal></expr>,
		<expr><literal type="string">"\\dF"</literal></expr>, <expr><literal type="string">"\\dFd"</literal></expr>, <expr><literal type="string">"\\dFp"</literal></expr>, <expr><literal type="string">"\\dFt"</literal></expr>, <expr><literal type="string">"\\dg"</literal></expr>, <expr><literal type="string">"\\di"</literal></expr>, <expr><literal type="string">"\\dl"</literal></expr>, <expr><literal type="string">"\\dL"</literal></expr>,
		<expr><literal type="string">"\\dm"</literal></expr>, <expr><literal type="string">"\\dn"</literal></expr>, <expr><literal type="string">"\\do"</literal></expr>, <expr><literal type="string">"\\dO"</literal></expr>, <expr><literal type="string">"\\dp"</literal></expr>,
		<expr><literal type="string">"\\drds"</literal></expr>, <expr><literal type="string">"\\dRs"</literal></expr>, <expr><literal type="string">"\\dRp"</literal></expr>, <expr><literal type="string">"\\ds"</literal></expr>, <expr><literal type="string">"\\dS"</literal></expr>,
		<expr><literal type="string">"\\dt"</literal></expr>, <expr><literal type="string">"\\dT"</literal></expr>, <expr><literal type="string">"\\dv"</literal></expr>, <expr><literal type="string">"\\du"</literal></expr>, <expr><literal type="string">"\\dx"</literal></expr>, <expr><literal type="string">"\\dy"</literal></expr>,
		<expr><literal type="string">"\\e"</literal></expr>, <expr><literal type="string">"\\echo"</literal></expr>, <expr><literal type="string">"\\ef"</literal></expr>, <expr><literal type="string">"\\elif"</literal></expr>, <expr><literal type="string">"\\else"</literal></expr>, <expr><literal type="string">"\\encoding"</literal></expr>,
		<expr><literal type="string">"\\endif"</literal></expr>, <expr><literal type="string">"\\errverbose"</literal></expr>, <expr><literal type="string">"\\ev"</literal></expr>,
		<expr><literal type="string">"\\f"</literal></expr>,
		<expr><literal type="string">"\\g"</literal></expr>, <expr><literal type="string">"\\gdesc"</literal></expr>, <expr><literal type="string">"\\gexec"</literal></expr>, <expr><literal type="string">"\\gset"</literal></expr>, <expr><literal type="string">"\\gx"</literal></expr>,
		<expr><literal type="string">"\\h"</literal></expr>, <expr><literal type="string">"\\help"</literal></expr>, <expr><literal type="string">"\\H"</literal></expr>,
		<expr><literal type="string">"\\i"</literal></expr>, <expr><literal type="string">"\\if"</literal></expr>, <expr><literal type="string">"\\ir"</literal></expr>,
		<expr><literal type="string">"\\l"</literal></expr>, <expr><literal type="string">"\\lo_import"</literal></expr>, <expr><literal type="string">"\\lo_export"</literal></expr>, <expr><literal type="string">"\\lo_list"</literal></expr>, <expr><literal type="string">"\\lo_unlink"</literal></expr>,
		<expr><literal type="string">"\\o"</literal></expr>,
		<expr><literal type="string">"\\p"</literal></expr>, <expr><literal type="string">"\\password"</literal></expr>, <expr><literal type="string">"\\prompt"</literal></expr>, <expr><literal type="string">"\\pset"</literal></expr>,
		<expr><literal type="string">"\\q"</literal></expr>, <expr><literal type="string">"\\qecho"</literal></expr>,
		<expr><literal type="string">"\\r"</literal></expr>,
		<expr><literal type="string">"\\s"</literal></expr>, <expr><literal type="string">"\\set"</literal></expr>, <expr><literal type="string">"\\setenv"</literal></expr>, <expr><literal type="string">"\\sf"</literal></expr>, <expr><literal type="string">"\\sv"</literal></expr>,
		<expr><literal type="string">"\\t"</literal></expr>, <expr><literal type="string">"\\T"</literal></expr>, <expr><literal type="string">"\\timing"</literal></expr>,
		<expr><literal type="string">"\\unset"</literal></expr>,
		<expr><literal type="string">"\\x"</literal></expr>,
		<expr><literal type="string">"\\w"</literal></expr>, <expr><literal type="string">"\\watch"</literal></expr>,
		<expr><literal type="string">"\\z"</literal></expr>,
		<expr><literal type="string">"\\!"</literal></expr>, <expr><literal type="string">"\\?"</literal></expr>,
		<expr><name>NULL</name></expr>
	}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>end</name></expr>;</expr_stmt>					<comment type="block">/* "end" is not used */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_RL_COMPLETION_APPEND_CHARACTER</name></cpp:ifdef>
	<expr_stmt><expr><name>rl_completion_append_character</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* Clear a few things. */</comment>
	<expr_stmt><expr><name>completion_charp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>completion_charpp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>completion_info_charp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>completion_info_charp2</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Scan the input line to extract the words before our current position.
	 * According to those we'll make some smart decisions on what the user is
	 * probably intending to type.
	 */</comment>
	<expr_stmt><expr><name>previous_words</name> <operator>=</operator> <call><name>get_previous_words</name><argument_list>(<argument><expr><name>start</name></expr></argument>,
										<argument><expr><operator>&amp;</operator><name>words_buffer</name></expr></argument>,
										<argument><expr><operator>&amp;</operator><name>previous_words_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* If current word is a backslash command, offer completions for that */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>text</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST_CS</name><argument_list>(<argument><expr><name>backslash_commands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* If current word is a variable interpolation, handle that case */</comment>
	<if type="elseif">else if <condition>(<expr><name><name>text</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal> <operator>&amp;&amp;</operator> <name><name>text</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>text</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>matches</name> <operator>=</operator> <call><name>complete_from_variables</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="string">":'"</literal></expr></argument>, <argument><expr><literal type="string">"'"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name><name>text</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>matches</name> <operator>=</operator> <call><name>complete_from_variables</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="string">":\""</literal></expr></argument>, <argument><expr><literal type="string">"\""</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>matches</name> <operator>=</operator> <call><name>complete_from_variables</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>

	<comment type="block">/* If no previous word, suggest one of the basic sql commands */</comment>
	<if type="elseif">else if <condition>(<expr><name>previous_words_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST</name><argument_list>(<argument><expr><name>sql_commands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* CREATE */</comment>
	<comment type="block">/* complete with something you can create */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches1</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>matches</name> <operator>=</operator> <call><name>completion_matches</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>create_command_generator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* DROP, but not DROP embedded in other commands */</comment>
	<comment type="block">/* complete with something you can drop */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches1</name><argument_list>(<argument><expr><literal type="string">"DROP"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>matches</name> <operator>=</operator> <call><name>completion_matches</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>drop_command_generator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* ALTER */</comment>

	<comment type="block">/* ALTER TABLE */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tables</name></expr></argument>,
								   <argument><expr><literal type="string">"UNION SELECT 'ALL IN TABLESPACE'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* ALTER something */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches1</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>matches</name> <operator>=</operator> <call><name>completion_matches</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>alter_command_generator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER TABLE,INDEX,MATERIALIZED VIEW ALL IN TABLESPACE xxx */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches4</name><argument_list>(<argument><expr><literal type="string">"ALL"</literal></expr></argument>, <argument><expr><literal type="string">"IN"</literal></expr></argument>, <argument><expr><literal type="string">"TABLESPACE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"SET TABLESPACE"</literal></expr></argument>, <argument><expr><literal type="string">"OWNED BY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER TABLE,INDEX,MATERIALIZED VIEW ALL IN TABLESPACE xxx OWNED BY */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches6</name><argument_list>(<argument><expr><literal type="string">"ALL"</literal></expr></argument>, <argument><expr><literal type="string">"IN"</literal></expr></argument>, <argument><expr><literal type="string">"TABLESPACE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"OWNED"</literal></expr></argument>, <argument><expr><literal type="string">"BY"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_roles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER TABLE,INDEX,MATERIALIZED VIEW ALL IN TABLESPACE xxx OWNED BY xxx */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches7</name><argument_list>(<argument><expr><literal type="string">"ALL"</literal></expr></argument>, <argument><expr><literal type="string">"IN"</literal></expr></argument>, <argument><expr><literal type="string">"TABLESPACE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"OWNED"</literal></expr></argument>, <argument><expr><literal type="string">"BY"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"SET TABLESPACE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER AGGREGATE,FUNCTION,PROCEDURE,ROUTINE &lt;name&gt; */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"AGGREGATE|FUNCTION|PROCEDURE|ROUTINE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER AGGREGATE,FUNCTION,PROCEDURE,ROUTINE &lt;name&gt; (...) */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"AGGREGATE|FUNCTION|PROCEDURE|ROUTINE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>ends_with</name><argument_list>(<argument><expr><name>prev_wd</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_LIST3</name><argument_list>(<argument><expr><literal type="string">"OWNER TO"</literal></expr></argument>, <argument><expr><literal type="string">"RENAME TO"</literal></expr></argument>, <argument><expr><literal type="string">"SET SCHEMA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_FUNCTION_ARG</name><argument_list>(<argument><expr><name>prev2_wd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<comment type="block">/* ALTER PUBLICATION &lt;name&gt; */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"PUBLICATION"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST5</name><argument_list>(<argument><expr><literal type="string">"ADD TABLE"</literal></expr></argument>, <argument><expr><literal type="string">"DROP TABLE"</literal></expr></argument>, <argument><expr><literal type="string">"OWNER TO"</literal></expr></argument>, <argument><expr><literal type="string">"RENAME TO"</literal></expr></argument>, <argument><expr><literal type="string">"SET"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER PUBLICATION &lt;name&gt; SET */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"PUBLICATION"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"SET"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER PUBLICATION &lt;name&gt; SET ( */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>HeadMatches3</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"PUBLICATION"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>TailMatches2</name><argument_list>(<argument><expr><literal type="string">"SET"</literal></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"publish"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER SUBSCRIPTION &lt;name&gt; */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"SUBSCRIPTION"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST7</name><argument_list>(<argument><expr><literal type="string">"CONNECTION"</literal></expr></argument>, <argument><expr><literal type="string">"ENABLE"</literal></expr></argument>, <argument><expr><literal type="string">"DISABLE"</literal></expr></argument>, <argument><expr><literal type="string">"OWNER TO"</literal></expr></argument>,
							<argument><expr><literal type="string">"RENAME TO"</literal></expr></argument>, <argument><expr><literal type="string">"REFRESH PUBLICATION"</literal></expr></argument>, <argument><expr><literal type="string">"SET"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER SUBSCRIPTION &lt;name&gt; REFRESH PUBLICATION */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>HeadMatches3</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"SUBSCRIPTION"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			 <call><name>TailMatches2</name><argument_list>(<argument><expr><literal type="string">"REFRESH"</literal></expr></argument>, <argument><expr><literal type="string">"PUBLICATION"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"WITH ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER SUBSCRIPTION &lt;name&gt; REFRESH PUBLICATION WITH ( */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>HeadMatches3</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"SUBSCRIPTION"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			 <call><name>TailMatches4</name><argument_list>(<argument><expr><literal type="string">"REFRESH"</literal></expr></argument>, <argument><expr><literal type="string">"PUBLICATION"</literal></expr></argument>, <argument><expr><literal type="string">"WITH"</literal></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"copy_data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER SUBSCRIPTION &lt;name&gt; SET */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"SUBSCRIPTION"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"SET"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>, <argument><expr><literal type="string">"PUBLICATION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER SUBSCRIPTION &lt;name&gt; SET ( */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>HeadMatches3</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"SUBSCRIPTION"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>TailMatches2</name><argument_list>(<argument><expr><literal type="string">"SET"</literal></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"slot_name"</literal></expr></argument>, <argument><expr><literal type="string">"synchronous_commit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER SUBSCRIPTION &lt;name&gt; SET PUBLICATION */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>HeadMatches3</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"SUBSCRIPTION"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>TailMatches2</name><argument_list>(<argument><expr><literal type="string">"SET"</literal></expr></argument>, <argument><expr><literal type="string">"PUBLICATION"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* complete with nothing here as this refers to remote publications */</comment>
	</block_content>}</block></if>
	<comment type="block">/* ALTER SUBSCRIPTION &lt;name&gt; SET PUBLICATION &lt;name&gt; */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>HeadMatches3</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"SUBSCRIPTION"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			 <call><name>TailMatches3</name><argument_list>(<argument><expr><literal type="string">"SET"</literal></expr></argument>, <argument><expr><literal type="string">"PUBLICATION"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"WITH ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER SUBSCRIPTION &lt;name&gt; SET PUBLICATION &lt;name&gt; WITH ( */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>HeadMatches3</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"SUBSCRIPTION"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			 <call><name>TailMatches5</name><argument_list>(<argument><expr><literal type="string">"SET"</literal></expr></argument>, <argument><expr><literal type="string">"PUBLICATION"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"WITH"</literal></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"copy_data"</literal></expr></argument>, <argument><expr><literal type="string">"refresh"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER SCHEMA &lt;name&gt; */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"SCHEMA"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"OWNER TO"</literal></expr></argument>, <argument><expr><literal type="string">"RENAME TO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* ALTER COLLATION &lt;name&gt; */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"COLLATION"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST3</name><argument_list>(<argument><expr><literal type="string">"OWNER TO"</literal></expr></argument>, <argument><expr><literal type="string">"RENAME TO"</literal></expr></argument>, <argument><expr><literal type="string">"SET SCHEMA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* ALTER CONVERSION &lt;name&gt; */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"CONVERSION"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST3</name><argument_list>(<argument><expr><literal type="string">"OWNER TO"</literal></expr></argument>, <argument><expr><literal type="string">"RENAME TO"</literal></expr></argument>, <argument><expr><literal type="string">"SET SCHEMA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* ALTER DATABASE &lt;name&gt; */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"DATABASE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST7</name><argument_list>(<argument><expr><literal type="string">"RESET"</literal></expr></argument>, <argument><expr><literal type="string">"SET"</literal></expr></argument>, <argument><expr><literal type="string">"OWNER TO"</literal></expr></argument>, <argument><expr><literal type="string">"RENAME TO"</literal></expr></argument>,
							<argument><expr><literal type="string">"IS_TEMPLATE"</literal></expr></argument>, <argument><expr><literal type="string">"ALLOW_CONNECTIONS"</literal></expr></argument>,
							<argument><expr><literal type="string">"CONNECTION LIMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* ALTER EVENT TRIGGER */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"EVENT"</literal></expr></argument>, <argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_event_triggers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* ALTER EVENT TRIGGER &lt;name&gt; */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"EVENT"</literal></expr></argument>, <argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST4</name><argument_list>(<argument><expr><literal type="string">"DISABLE"</literal></expr></argument>, <argument><expr><literal type="string">"ENABLE"</literal></expr></argument>, <argument><expr><literal type="string">"OWNER TO"</literal></expr></argument>, <argument><expr><literal type="string">"RENAME TO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* ALTER EVENT TRIGGER &lt;name&gt; ENABLE */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"EVENT"</literal></expr></argument>, <argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ENABLE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"REPLICA"</literal></expr></argument>, <argument><expr><literal type="string">"ALWAYS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* ALTER EXTENSION &lt;name&gt; */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"EXTENSION"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST4</name><argument_list>(<argument><expr><literal type="string">"ADD"</literal></expr></argument>, <argument><expr><literal type="string">"DROP"</literal></expr></argument>, <argument><expr><literal type="string">"UPDATE"</literal></expr></argument>, <argument><expr><literal type="string">"SET SCHEMA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* ALTER EXTENSION &lt;name&gt; UPDATE */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"EXTENSION"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"UPDATE"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>completion_info_charp</name> <operator>=</operator> <name>prev2_wd</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_available_extension_versions_with_TO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>

	<comment type="block">/* ALTER EXTENSION &lt;name&gt; UPDATE TO */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"EXTENSION"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"UPDATE"</literal></expr></argument>, <argument><expr><literal type="string">"TO"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>completion_info_charp</name> <operator>=</operator> <name>prev3_wd</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_available_extension_versions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>

	<comment type="block">/* ALTER FOREIGN */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"FOREIGN"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"DATA WRAPPER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* ALTER FOREIGN DATA WRAPPER &lt;name&gt; */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"FOREIGN"</literal></expr></argument>, <argument><expr><literal type="string">"DATA"</literal></expr></argument>, <argument><expr><literal type="string">"WRAPPER"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST5</name><argument_list>(<argument><expr><literal type="string">"HANDLER"</literal></expr></argument>, <argument><expr><literal type="string">"VALIDATOR"</literal></expr></argument>, <argument><expr><literal type="string">"OPTIONS"</literal></expr></argument>, <argument><expr><literal type="string">"OWNER TO"</literal></expr></argument>, <argument><expr><literal type="string">"RENAME TO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* ALTER FOREIGN TABLE &lt;name&gt; */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"FOREIGN"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>list_ALTER_FOREIGN_TABLE</name><index>[]</index></name> <init>=
		<expr><block>{<expr><literal type="string">"ADD"</literal></expr>, <expr><literal type="string">"ALTER"</literal></expr>, <expr><literal type="string">"DISABLE TRIGGER"</literal></expr>, <expr><literal type="string">"DROP"</literal></expr>, <expr><literal type="string">"ENABLE"</literal></expr>, <expr><literal type="string">"INHERIT"</literal></expr>,
			<expr><literal type="string">"NO INHERIT"</literal></expr>, <expr><literal type="string">"OPTIONS"</literal></expr>, <expr><literal type="string">"OWNER TO"</literal></expr>, <expr><literal type="string">"RENAME"</literal></expr>, <expr><literal type="string">"SET"</literal></expr>,
		<expr><literal type="string">"VALIDATE CONSTRAINT"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST</name><argument_list>(<argument><expr><name>list_ALTER_FOREIGN_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>

	<comment type="block">/* ALTER INDEX */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"INDEX"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_indexes</name></expr></argument>,
								   <argument><expr><literal type="string">"UNION SELECT 'ALL IN TABLESPACE'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER INDEX &lt;name&gt; */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"INDEX"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST6</name><argument_list>(<argument><expr><literal type="string">"ALTER COLUMN"</literal></expr></argument>, <argument><expr><literal type="string">"OWNER TO"</literal></expr></argument>, <argument><expr><literal type="string">"RENAME TO"</literal></expr></argument>, <argument><expr><literal type="string">"SET"</literal></expr></argument>,
							<argument><expr><literal type="string">"RESET"</literal></expr></argument>, <argument><expr><literal type="string">"ATTACH PARTITION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"INDEX"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ATTACH"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"PARTITION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"INDEX"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ATTACH"</literal></expr></argument>, <argument><expr><literal type="string">"PARTITION"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_indexes</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER INDEX &lt;name&gt; ALTER COLUMN &lt;colnum&gt; */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches6</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"INDEX"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"COLUMN"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"SET STATISTICS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER INDEX &lt;name&gt; SET */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"INDEX"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"SET"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>, <argument><expr><literal type="string">"TABLESPACE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER INDEX &lt;name&gt; RESET */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"INDEX"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"RESET"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER INDEX &lt;foo&gt; SET|RESET ( */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"INDEX"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"RESET"</literal></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST8</name><argument_list>(<argument><expr><literal type="string">"fillfactor"</literal></expr></argument>, <argument><expr><literal type="string">"recheck_on_update"</literal></expr></argument>,
							<argument><expr><literal type="string">"vacuum_cleanup_index_scale_factor"</literal></expr></argument>,	<comment type="block">/* BTREE */</comment>
							<argument><expr><literal type="string">"fastupdate"</literal></expr></argument>, <argument><expr><literal type="string">"gin_pending_list_limit"</literal></expr></argument>, <comment type="block">/* GIN */</comment>
							<argument><expr><literal type="string">"buffering"</literal></expr></argument>,	<comment type="block">/* GiST */</comment>
							<argument><expr><literal type="string">"pages_per_range"</literal></expr></argument>, <argument><expr><literal type="string">"autosummarize"</literal></expr></argument>	<comment type="block">/* BRIN */</comment>
			)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"INDEX"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"SET"</literal></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST8</name><argument_list>(<argument><expr><literal type="string">"fillfactor ="</literal></expr></argument>, <argument><expr><literal type="string">"recheck_on_update ="</literal></expr></argument>,
							<argument><expr><literal type="string">"vacuum_cleanup_index_scale_factor ="</literal></expr></argument>,	<comment type="block">/* BTREE */</comment>
							<argument><expr><literal type="string">"fastupdate ="</literal></expr></argument>, <argument><expr><literal type="string">"gin_pending_list_limit ="</literal></expr></argument>, <comment type="block">/* GIN */</comment>
							<argument><expr><literal type="string">"buffering ="</literal></expr></argument>,	<comment type="block">/* GiST */</comment>
							<argument><expr><literal type="string">"pages_per_range ="</literal></expr></argument>, <argument><expr><literal type="string">"autosummarize ="</literal></expr></argument>	<comment type="block">/* BRIN */</comment>
			)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* ALTER LANGUAGE &lt;name&gt; */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"LANGUAGE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"OWNER_TO"</literal></expr></argument>, <argument><expr><literal type="string">"RENAME TO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* ALTER LARGE OBJECT &lt;oid&gt; */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"LARGE"</literal></expr></argument>, <argument><expr><literal type="string">"OBJECT"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"OWNER TO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* ALTER MATERIALIZED VIEW */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"MATERIALIZED"</literal></expr></argument>, <argument><expr><literal type="string">"VIEW"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_matviews</name></expr></argument>,
								   <argument><expr><literal type="string">"UNION SELECT 'ALL IN TABLESPACE'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* ALTER USER,ROLE &lt;name&gt; */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"USER|ROLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			 <operator>!</operator><call><name>TailMatches2</name><argument_list>(<argument><expr><literal type="string">"USER"</literal></expr></argument>, <argument><expr><literal type="string">"MAPPING"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>list_ALTERUSER</name><index>[]</index></name> <init>=
		<expr><block>{<expr><literal type="string">"BYPASSRLS"</literal></expr>, <expr><literal type="string">"CONNECTION LIMIT"</literal></expr>, <expr><literal type="string">"CREATEDB"</literal></expr>, <expr><literal type="string">"CREATEROLE"</literal></expr>,
			<expr><literal type="string">"ENCRYPTED PASSWORD"</literal></expr>, <expr><literal type="string">"INHERIT"</literal></expr>, <expr><literal type="string">"LOGIN"</literal></expr>, <expr><literal type="string">"NOBYPASSRLS"</literal></expr>,
			<expr><literal type="string">"NOCREATEDB"</literal></expr>, <expr><literal type="string">"NOCREATEROLE"</literal></expr>, <expr><literal type="string">"NOINHERIT"</literal></expr>,
			<expr><literal type="string">"NOLOGIN"</literal></expr>, <expr><literal type="string">"NOREPLICATION"</literal></expr>, <expr><literal type="string">"NOSUPERUSER"</literal></expr>, <expr><literal type="string">"PASSWORD"</literal></expr>, <expr><literal type="string">"RENAME TO"</literal></expr>,
			<expr><literal type="string">"REPLICATION"</literal></expr>, <expr><literal type="string">"RESET"</literal></expr>, <expr><literal type="string">"SET"</literal></expr>, <expr><literal type="string">"SUPERUSER"</literal></expr>,
		<expr><literal type="string">"VALID UNTIL"</literal></expr>, <expr><literal type="string">"WITH"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST</name><argument_list>(<argument><expr><name>list_ALTERUSER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>

	<comment type="block">/* ALTER USER,ROLE &lt;name&gt; WITH */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"USER|ROLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"WITH"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Similar to the above, but don't complete "WITH" again. */</comment>
		<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>list_ALTERUSER_WITH</name><index>[]</index></name> <init>=
		<expr><block>{<expr><literal type="string">"BYPASSRLS"</literal></expr>, <expr><literal type="string">"CONNECTION LIMIT"</literal></expr>, <expr><literal type="string">"CREATEDB"</literal></expr>, <expr><literal type="string">"CREATEROLE"</literal></expr>,
			<expr><literal type="string">"ENCRYPTED PASSWORD"</literal></expr>, <expr><literal type="string">"INHERIT"</literal></expr>, <expr><literal type="string">"LOGIN"</literal></expr>, <expr><literal type="string">"NOBYPASSRLS"</literal></expr>,
			<expr><literal type="string">"NOCREATEDB"</literal></expr>, <expr><literal type="string">"NOCREATEROLE"</literal></expr>, <expr><literal type="string">"NOINHERIT"</literal></expr>,
			<expr><literal type="string">"NOLOGIN"</literal></expr>, <expr><literal type="string">"NOREPLICATION"</literal></expr>, <expr><literal type="string">"NOSUPERUSER"</literal></expr>, <expr><literal type="string">"PASSWORD"</literal></expr>, <expr><literal type="string">"RENAME TO"</literal></expr>,
			<expr><literal type="string">"REPLICATION"</literal></expr>, <expr><literal type="string">"RESET"</literal></expr>, <expr><literal type="string">"SET"</literal></expr>, <expr><literal type="string">"SUPERUSER"</literal></expr>,
		<expr><literal type="string">"VALID UNTIL"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST</name><argument_list>(<argument><expr><name>list_ALTERUSER_WITH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>

	<comment type="block">/* ALTER DEFAULT PRIVILEGES */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"DEFAULT"</literal></expr></argument>, <argument><expr><literal type="string">"PRIVILEGES"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"FOR ROLE"</literal></expr></argument>, <argument><expr><literal type="string">"IN SCHEMA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER DEFAULT PRIVILEGES FOR */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"DEFAULT"</literal></expr></argument>, <argument><expr><literal type="string">"PRIVILEGES"</literal></expr></argument>, <argument><expr><literal type="string">"FOR"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"ROLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER DEFAULT PRIVILEGES IN */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"DEFAULT"</literal></expr></argument>, <argument><expr><literal type="string">"PRIVILEGES"</literal></expr></argument>, <argument><expr><literal type="string">"IN"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"SCHEMA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER DEFAULT PRIVILEGES FOR ROLE|USER ... */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches6</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"DEFAULT"</literal></expr></argument>, <argument><expr><literal type="string">"PRIVILEGES"</literal></expr></argument>, <argument><expr><literal type="string">"FOR"</literal></expr></argument>, <argument><expr><literal type="string">"ROLE|USER"</literal></expr></argument>,
					  <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST3</name><argument_list>(<argument><expr><literal type="string">"GRANT"</literal></expr></argument>, <argument><expr><literal type="string">"REVOKE"</literal></expr></argument>, <argument><expr><literal type="string">"IN SCHEMA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER DEFAULT PRIVILEGES IN SCHEMA ... */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches6</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"DEFAULT"</literal></expr></argument>, <argument><expr><literal type="string">"PRIVILEGES"</literal></expr></argument>, <argument><expr><literal type="string">"IN"</literal></expr></argument>, <argument><expr><literal type="string">"SCHEMA"</literal></expr></argument>,
					  <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST3</name><argument_list>(<argument><expr><literal type="string">"GRANT"</literal></expr></argument>, <argument><expr><literal type="string">"REVOKE"</literal></expr></argument>, <argument><expr><literal type="string">"FOR ROLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER DEFAULT PRIVILEGES IN SCHEMA ... FOR */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches7</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"DEFAULT"</literal></expr></argument>, <argument><expr><literal type="string">"PRIVILEGES"</literal></expr></argument>, <argument><expr><literal type="string">"IN"</literal></expr></argument>, <argument><expr><literal type="string">"SCHEMA"</literal></expr></argument>,
					  <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"FOR"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"ROLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER DEFAULT PRIVILEGES FOR ROLE|USER ... IN SCHEMA ... */</comment>
	<comment type="block">/* ALTER DEFAULT PRIVILEGES IN SCHEMA ... FOR ROLE|USER ... */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches9</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"DEFAULT"</literal></expr></argument>, <argument><expr><literal type="string">"PRIVILEGES"</literal></expr></argument>, <argument><expr><literal type="string">"FOR"</literal></expr></argument>, <argument><expr><literal type="string">"ROLE|USER"</literal></expr></argument>,
					  <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"IN"</literal></expr></argument>, <argument><expr><literal type="string">"SCHEMA"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>Matches9</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"DEFAULT"</literal></expr></argument>, <argument><expr><literal type="string">"PRIVILEGES"</literal></expr></argument>, <argument><expr><literal type="string">"IN"</literal></expr></argument>, <argument><expr><literal type="string">"SCHEMA"</literal></expr></argument>,
					  <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"FOR"</literal></expr></argument>, <argument><expr><literal type="string">"ROLE|USER"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"GRANT"</literal></expr></argument>, <argument><expr><literal type="string">"REVOKE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER DOMAIN &lt;name&gt; */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"DOMAIN"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST6</name><argument_list>(<argument><expr><literal type="string">"ADD"</literal></expr></argument>, <argument><expr><literal type="string">"DROP"</literal></expr></argument>, <argument><expr><literal type="string">"OWNER TO"</literal></expr></argument>, <argument><expr><literal type="string">"RENAME"</literal></expr></argument>, <argument><expr><literal type="string">"SET"</literal></expr></argument>,
							<argument><expr><literal type="string">"VALIDATE CONSTRAINT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER DOMAIN &lt;sth&gt; DROP */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"DOMAIN"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"DROP"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST3</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT"</literal></expr></argument>, <argument><expr><literal type="string">"DEFAULT"</literal></expr></argument>, <argument><expr><literal type="string">"NOT NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER DOMAIN &lt;sth&gt; DROP|RENAME|VALIDATE CONSTRAINT */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"DOMAIN"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"DROP|RENAME|VALIDATE"</literal></expr></argument>, <argument><expr><literal type="string">"CONSTRAINT"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>completion_info_charp</name> <operator>=</operator> <name>prev3_wd</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_constraint_of_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<comment type="block">/* ALTER DOMAIN &lt;sth&gt; RENAME */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"DOMAIN"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"RENAME"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT"</literal></expr></argument>, <argument><expr><literal type="string">"TO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER DOMAIN &lt;sth&gt; RENAME CONSTRAINT &lt;sth&gt; */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches6</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"DOMAIN"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"RENAME"</literal></expr></argument>, <argument><expr><literal type="string">"CONSTRAINT"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"TO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* ALTER DOMAIN &lt;sth&gt; SET */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"DOMAIN"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"SET"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST3</name><argument_list>(<argument><expr><literal type="string">"DEFAULT"</literal></expr></argument>, <argument><expr><literal type="string">"NOT NULL"</literal></expr></argument>, <argument><expr><literal type="string">"SCHEMA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER SEQUENCE &lt;name&gt; */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"SEQUENCE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>list_ALTERSEQUENCE</name><index>[]</index></name> <init>=
		<expr><block>{<expr><literal type="string">"INCREMENT"</literal></expr>, <expr><literal type="string">"MINVALUE"</literal></expr>, <expr><literal type="string">"MAXVALUE"</literal></expr>, <expr><literal type="string">"RESTART"</literal></expr>, <expr><literal type="string">"NO"</literal></expr>, <expr><literal type="string">"CACHE"</literal></expr>, <expr><literal type="string">"CYCLE"</literal></expr>,
		<expr><literal type="string">"SET SCHEMA"</literal></expr>, <expr><literal type="string">"OWNED BY"</literal></expr>, <expr><literal type="string">"OWNER TO"</literal></expr>, <expr><literal type="string">"RENAME TO"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST</name><argument_list>(<argument><expr><name>list_ALTERSEQUENCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<comment type="block">/* ALTER SEQUENCE &lt;name&gt; NO */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"SEQUENCE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"NO"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST3</name><argument_list>(<argument><expr><literal type="string">"MINVALUE"</literal></expr></argument>, <argument><expr><literal type="string">"MAXVALUE"</literal></expr></argument>, <argument><expr><literal type="string">"CYCLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER SERVER &lt;name&gt; */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"SERVER"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST4</name><argument_list>(<argument><expr><literal type="string">"VERSION"</literal></expr></argument>, <argument><expr><literal type="string">"OPTIONS"</literal></expr></argument>, <argument><expr><literal type="string">"OWNER TO"</literal></expr></argument>, <argument><expr><literal type="string">"RENAME TO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER SERVER &lt;name&gt; VERSION &lt;version&gt; */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"SERVER"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"VERSION"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"OPTIONS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER SYSTEM SET, RESET, RESET ALL */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"SYSTEM"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"SET"</literal></expr></argument>, <argument><expr><literal type="string">"RESET"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"SYSTEM"</literal></expr></argument>, <argument><expr><literal type="string">"SET|RESET"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_alter_system_set_vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"SYSTEM"</literal></expr></argument>, <argument><expr><literal type="string">"SET"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"TO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER VIEW &lt;name&gt; */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"VIEW"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST4</name><argument_list>(<argument><expr><literal type="string">"ALTER COLUMN"</literal></expr></argument>, <argument><expr><literal type="string">"OWNER TO"</literal></expr></argument>, <argument><expr><literal type="string">"RENAME TO"</literal></expr></argument>,
							<argument><expr><literal type="string">"SET SCHEMA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER MATERIALIZED VIEW &lt;name&gt; */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"MATERIALIZED"</literal></expr></argument>, <argument><expr><literal type="string">"VIEW"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST4</name><argument_list>(<argument><expr><literal type="string">"ALTER COLUMN"</literal></expr></argument>, <argument><expr><literal type="string">"OWNER TO"</literal></expr></argument>, <argument><expr><literal type="string">"RENAME TO"</literal></expr></argument>,
							<argument><expr><literal type="string">"SET SCHEMA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* ALTER POLICY &lt;name&gt; */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"POLICY"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_policies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER POLICY &lt;name&gt; ON */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"POLICY"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"ON"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER POLICY &lt;name&gt; ON &lt;table&gt; */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"POLICY"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>completion_info_charp</name> <operator>=</operator> <name>prev2_wd</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tables_for_policy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<comment type="block">/* ALTER POLICY &lt;name&gt; ON &lt;table&gt; - show options */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"POLICY"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST4</name><argument_list>(<argument><expr><literal type="string">"RENAME TO"</literal></expr></argument>, <argument><expr><literal type="string">"TO"</literal></expr></argument>, <argument><expr><literal type="string">"USING ("</literal></expr></argument>, <argument><expr><literal type="string">"WITH CHECK ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER POLICY &lt;name&gt; ON &lt;table&gt; TO &lt;role&gt; */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches6</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"POLICY"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"TO"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_grant_roles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER POLICY &lt;name&gt; ON &lt;table&gt; USING ( */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches6</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"POLICY"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"USING"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER POLICY &lt;name&gt; ON &lt;table&gt; WITH CHECK ( */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches7</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"POLICY"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"WITH"</literal></expr></argument>, <argument><expr><literal type="string">"CHECK"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* ALTER RULE &lt;name&gt;, add ON */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"RULE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"ON"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* If we have ALTER RULE &lt;name&gt; ON, then add the correct tablename */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"RULE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>completion_info_charp</name> <operator>=</operator> <name>prev2_wd</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tables_for_rule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>

	<comment type="block">/* ALTER RULE &lt;name&gt; ON &lt;name&gt; */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"RULE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"RENAME TO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* ALTER STATISTICS &lt;name&gt; */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"STATISTICS"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST3</name><argument_list>(<argument><expr><literal type="string">"OWNER TO"</literal></expr></argument>, <argument><expr><literal type="string">"RENAME TO"</literal></expr></argument>, <argument><expr><literal type="string">"SET SCHEMA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* ALTER TRIGGER &lt;name&gt;, add ON */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"ON"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>completion_info_charp</name> <operator>=</operator> <name>prev2_wd</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tables_for_trigger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>

	<comment type="block">/*
	 * If we have ALTER TRIGGER &lt;sth&gt; ON, then add the correct tablename
	 */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tables</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* ALTER TRIGGER &lt;name&gt; ON &lt;name&gt; */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"RENAME TO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/*
	 * If we detect ALTER TABLE &lt;name&gt;, suggest sub commands
	 */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>list_ALTER2</name><index>[]</index></name> <init>=
		<expr><block>{<expr><literal type="string">"ADD"</literal></expr>, <expr><literal type="string">"ALTER"</literal></expr>, <expr><literal type="string">"CLUSTER ON"</literal></expr>, <expr><literal type="string">"DISABLE"</literal></expr>, <expr><literal type="string">"DROP"</literal></expr>, <expr><literal type="string">"ENABLE"</literal></expr>, <expr><literal type="string">"INHERIT"</literal></expr>,
			<expr><literal type="string">"NO INHERIT"</literal></expr>, <expr><literal type="string">"RENAME"</literal></expr>, <expr><literal type="string">"RESET"</literal></expr>, <expr><literal type="string">"OWNER TO"</literal></expr>, <expr><literal type="string">"SET"</literal></expr>,
			<expr><literal type="string">"VALIDATE CONSTRAINT"</literal></expr>, <expr><literal type="string">"REPLICA IDENTITY"</literal></expr>, <expr><literal type="string">"ATTACH PARTITION"</literal></expr>,
		<expr><literal type="string">"DETACH PARTITION"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST</name><argument_list>(<argument><expr><name>list_ALTER2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<comment type="block">/* ALTER TABLE xxx ENABLE */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ENABLE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST5</name><argument_list>(<argument><expr><literal type="string">"ALWAYS"</literal></expr></argument>, <argument><expr><literal type="string">"REPLICA"</literal></expr></argument>, <argument><expr><literal type="string">"ROW LEVEL SECURITY"</literal></expr></argument>, <argument><expr><literal type="string">"RULE"</literal></expr></argument>,
							<argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ENABLE"</literal></expr></argument>, <argument><expr><literal type="string">"REPLICA|ALWAYS"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"RULE"</literal></expr></argument>, <argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ENABLE"</literal></expr></argument>, <argument><expr><literal type="string">"RULE"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>completion_info_charp</name> <operator>=</operator> <name>prev3_wd</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_rule_of_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches6</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ENABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"RULE"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>completion_info_charp</name> <operator>=</operator> <name>prev4_wd</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_rule_of_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ENABLE"</literal></expr></argument>, <argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>completion_info_charp</name> <operator>=</operator> <name>prev3_wd</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_trigger_of_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches6</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ENABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>completion_info_charp</name> <operator>=</operator> <name>prev4_wd</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_trigger_of_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<comment type="block">/* ALTER TABLE xxx INHERIT */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"INHERIT"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tables</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER TABLE xxx NO INHERIT */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"NO"</literal></expr></argument>, <argument><expr><literal type="string">"INHERIT"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tables</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER TABLE xxx DISABLE */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"DISABLE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST3</name><argument_list>(<argument><expr><literal type="string">"ROW LEVEL SECURITY"</literal></expr></argument>, <argument><expr><literal type="string">"RULE"</literal></expr></argument>, <argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"DISABLE"</literal></expr></argument>, <argument><expr><literal type="string">"RULE"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>completion_info_charp</name> <operator>=</operator> <name>prev3_wd</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_rule_of_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"DISABLE"</literal></expr></argument>, <argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>completion_info_charp</name> <operator>=</operator> <name>prev3_wd</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_trigger_of_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>

	<comment type="block">/* ALTER TABLE xxx ALTER */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ALTER"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_ATTR</name><argument_list>(<argument><expr><name>prev2_wd</name></expr></argument>, <argument><expr><literal type="string">" UNION SELECT 'COLUMN' UNION SELECT 'CONSTRAINT'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* ALTER TABLE xxx RENAME */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"RENAME"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_ATTR</name><argument_list>(<argument><expr><name>prev2_wd</name></expr></argument>, <argument><expr><literal type="string">" UNION SELECT 'COLUMN' UNION SELECT 'CONSTRAINT' UNION SELECT 'TO'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ALTER|RENAME"</literal></expr></argument>, <argument><expr><literal type="string">"COLUMN"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_ATTR</name><argument_list>(<argument><expr><name>prev3_wd</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* ALTER TABLE xxx RENAME yyy */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"RENAME"</literal></expr></argument>, <argument><expr><call><name>MatchAnyExcept</name><argument_list>(<argument><expr><literal type="string">"CONSTRAINT|TO"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"TO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* ALTER TABLE xxx RENAME COLUMN/CONSTRAINT yyy */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches6</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"RENAME"</literal></expr></argument>, <argument><expr><literal type="string">"COLUMN|CONSTRAINT"</literal></expr></argument>, <argument><expr><call><name>MatchAnyExcept</name><argument_list>(<argument><expr><literal type="string">"TO"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"TO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* If we have ALTER TABLE &lt;sth&gt; DROP, provide COLUMN or CONSTRAINT */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"DROP"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"COLUMN"</literal></expr></argument>, <argument><expr><literal type="string">"CONSTRAINT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* If we have ALTER TABLE &lt;sth&gt; DROP COLUMN, provide list of columns */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"DROP"</literal></expr></argument>, <argument><expr><literal type="string">"COLUMN"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_ATTR</name><argument_list>(<argument><expr><name>prev3_wd</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/*
	 * If we have ALTER TABLE &lt;sth&gt; ALTER|DROP|RENAME|VALIDATE CONSTRAINT,
	 * provide list of constraints
	 */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ALTER|DROP|RENAME|VALIDATE"</literal></expr></argument>, <argument><expr><literal type="string">"CONSTRAINT"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>completion_info_charp</name> <operator>=</operator> <name>prev3_wd</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_constraint_of_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<comment type="block">/* ALTER TABLE ALTER [COLUMN] &lt;foo&gt; */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches6</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"COLUMN"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST6</name><argument_list>(<argument><expr><literal type="string">"TYPE"</literal></expr></argument>, <argument><expr><literal type="string">"SET"</literal></expr></argument>, <argument><expr><literal type="string">"RESET"</literal></expr></argument>, <argument><expr><literal type="string">"RESTART"</literal></expr></argument>, <argument><expr><literal type="string">"ADD"</literal></expr></argument>, <argument><expr><literal type="string">"DROP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER TABLE ALTER [COLUMN] &lt;foo&gt; SET */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches7</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"COLUMN"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"SET"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>Matches6</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"SET"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST5</name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>, <argument><expr><literal type="string">"DEFAULT"</literal></expr></argument>, <argument><expr><literal type="string">"NOT NULL"</literal></expr></argument>, <argument><expr><literal type="string">"STATISTICS"</literal></expr></argument>, <argument><expr><literal type="string">"STORAGE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER TABLE ALTER [COLUMN] &lt;foo&gt; SET ( */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches8</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"COLUMN"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"SET"</literal></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>Matches7</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"SET"</literal></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"n_distinct"</literal></expr></argument>, <argument><expr><literal type="string">"n_distinct_inherited"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER TABLE ALTER [COLUMN] &lt;foo&gt; SET STORAGE */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches8</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"COLUMN"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"SET"</literal></expr></argument>, <argument><expr><literal type="string">"STORAGE"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>Matches7</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"SET"</literal></expr></argument>, <argument><expr><literal type="string">"STORAGE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST4</name><argument_list>(<argument><expr><literal type="string">"PLAIN"</literal></expr></argument>, <argument><expr><literal type="string">"EXTERNAL"</literal></expr></argument>, <argument><expr><literal type="string">"EXTENDED"</literal></expr></argument>, <argument><expr><literal type="string">"MAIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER TABLE ALTER [COLUMN] &lt;foo&gt; DROP */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches7</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"COLUMN"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"DROP"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>Matches6</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"DROP"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST3</name><argument_list>(<argument><expr><literal type="string">"DEFAULT"</literal></expr></argument>, <argument><expr><literal type="string">"IDENTITY"</literal></expr></argument>, <argument><expr><literal type="string">"NOT NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"CLUSTER"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"ON"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"CLUSTER"</literal></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>completion_info_charp</name> <operator>=</operator> <name>prev3_wd</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_index_of_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<comment type="block">/* If we have ALTER TABLE &lt;sth&gt; SET, provide list of attributes and '(' */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"SET"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST7</name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>, <argument><expr><literal type="string">"LOGGED"</literal></expr></argument>, <argument><expr><literal type="string">"SCHEMA"</literal></expr></argument>, <argument><expr><literal type="string">"TABLESPACE"</literal></expr></argument>, <argument><expr><literal type="string">"UNLOGGED"</literal></expr></argument>,
							<argument><expr><literal type="string">"WITH"</literal></expr></argument>, <argument><expr><literal type="string">"WITHOUT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/*
	 * If we have ALTER TABLE &lt;sth&gt; SET TABLESPACE provide a list of
	 * tablespaces
	 */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"SET"</literal></expr></argument>, <argument><expr><literal type="string">"TABLESPACE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tablespaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* If we have ALTER TABLE &lt;sth&gt; SET WITH provide OIDS */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"SET"</literal></expr></argument>, <argument><expr><literal type="string">"WITH"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"OIDS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* If we have ALTER TABLE &lt;sth&gt; SET WITHOUT provide CLUSTER or OIDS */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"SET"</literal></expr></argument>, <argument><expr><literal type="string">"WITHOUT"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"CLUSTER"</literal></expr></argument>, <argument><expr><literal type="string">"OIDS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER TABLE &lt;foo&gt; RESET */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"RESET"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER TABLE &lt;foo&gt; SET|RESET ( */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"SET|RESET"</literal></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>list_TABLEOPTIONS</name><index>[]</index></name> <init>=
		<expr><block>{
			<expr><literal type="string">"autovacuum_analyze_scale_factor"</literal></expr>,
			<expr><literal type="string">"autovacuum_analyze_threshold"</literal></expr>,
			<expr><literal type="string">"autovacuum_enabled"</literal></expr>,
			<expr><literal type="string">"autovacuum_freeze_max_age"</literal></expr>,
			<expr><literal type="string">"autovacuum_freeze_min_age"</literal></expr>,
			<expr><literal type="string">"autovacuum_freeze_table_age"</literal></expr>,
			<expr><literal type="string">"autovacuum_multixact_freeze_max_age"</literal></expr>,
			<expr><literal type="string">"autovacuum_multixact_freeze_min_age"</literal></expr>,
			<expr><literal type="string">"autovacuum_multixact_freeze_table_age"</literal></expr>,
			<expr><literal type="string">"autovacuum_vacuum_cost_delay"</literal></expr>,
			<expr><literal type="string">"autovacuum_vacuum_cost_limit"</literal></expr>,
			<expr><literal type="string">"autovacuum_vacuum_scale_factor"</literal></expr>,
			<expr><literal type="string">"autovacuum_vacuum_threshold"</literal></expr>,
			<expr><literal type="string">"fillfactor"</literal></expr>,
			<expr><literal type="string">"parallel_workers"</literal></expr>,
			<expr><literal type="string">"log_autovacuum_min_duration"</literal></expr>,
			<expr><literal type="string">"toast_tuple_target"</literal></expr>,
			<expr><literal type="string">"toast.autovacuum_enabled"</literal></expr>,
			<expr><literal type="string">"toast.autovacuum_freeze_max_age"</literal></expr>,
			<expr><literal type="string">"toast.autovacuum_freeze_min_age"</literal></expr>,
			<expr><literal type="string">"toast.autovacuum_freeze_table_age"</literal></expr>,
			<expr><literal type="string">"toast.autovacuum_multixact_freeze_max_age"</literal></expr>,
			<expr><literal type="string">"toast.autovacuum_multixact_freeze_min_age"</literal></expr>,
			<expr><literal type="string">"toast.autovacuum_multixact_freeze_table_age"</literal></expr>,
			<expr><literal type="string">"toast.autovacuum_vacuum_cost_delay"</literal></expr>,
			<expr><literal type="string">"toast.autovacuum_vacuum_cost_limit"</literal></expr>,
			<expr><literal type="string">"toast.autovacuum_vacuum_scale_factor"</literal></expr>,
			<expr><literal type="string">"toast.autovacuum_vacuum_threshold"</literal></expr>,
			<expr><literal type="string">"toast.log_autovacuum_min_duration"</literal></expr>,
			<expr><literal type="string">"user_catalog_table"</literal></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST</name><argument_list>(<argument><expr><name>list_TABLEOPTIONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches7</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"REPLICA"</literal></expr></argument>, <argument><expr><literal type="string">"IDENTITY"</literal></expr></argument>, <argument><expr><literal type="string">"USING"</literal></expr></argument>, <argument><expr><literal type="string">"INDEX"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>completion_info_charp</name> <operator>=</operator> <name>prev5_wd</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_index_of_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches6</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"REPLICA"</literal></expr></argument>, <argument><expr><literal type="string">"IDENTITY"</literal></expr></argument>, <argument><expr><literal type="string">"USING"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"INDEX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"REPLICA"</literal></expr></argument>, <argument><expr><literal type="string">"IDENTITY"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST4</name><argument_list>(<argument><expr><literal type="string">"FULL"</literal></expr></argument>, <argument><expr><literal type="string">"NOTHING"</literal></expr></argument>, <argument><expr><literal type="string">"DEFAULT"</literal></expr></argument>, <argument><expr><literal type="string">"USING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"REPLICA"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"IDENTITY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/*
	 * If we have ALTER TABLE &lt;foo&gt; ATTACH PARTITION, provide a list of
	 * tables.
	 */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ATTACH"</literal></expr></argument>, <argument><expr><literal type="string">"PARTITION"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tables</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Limited completion support for partition bound specification */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches3</name><argument_list>(<argument><expr><literal type="string">"ATTACH"</literal></expr></argument>, <argument><expr><literal type="string">"PARTITION"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"FOR VALUES"</literal></expr></argument>, <argument><expr><literal type="string">"DEFAULT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches2</name><argument_list>(<argument><expr><literal type="string">"FOR"</literal></expr></argument>, <argument><expr><literal type="string">"VALUES"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST3</name><argument_list>(<argument><expr><literal type="string">"FROM ("</literal></expr></argument>, <argument><expr><literal type="string">"IN ("</literal></expr></argument>, <argument><expr><literal type="string">"WITH ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/*
	 * If we have ALTER TABLE &lt;foo&gt; DETACH PARTITION, provide a list of
	 * partitions of &lt;foo&gt;.
	 */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"DETACH"</literal></expr></argument>, <argument><expr><literal type="string">"PARTITION"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>completion_info_charp</name> <operator>=</operator> <name>prev3_wd</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_partition_of_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>

	<comment type="block">/* ALTER TABLESPACE &lt;foo&gt; with RENAME TO, OWNER TO, SET, RESET */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLESPACE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST4</name><argument_list>(<argument><expr><literal type="string">"RENAME TO"</literal></expr></argument>, <argument><expr><literal type="string">"OWNER TO"</literal></expr></argument>, <argument><expr><literal type="string">"SET"</literal></expr></argument>, <argument><expr><literal type="string">"RESET"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER TABLESPACE &lt;foo&gt; SET|RESET */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLESPACE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"SET|RESET"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER TABLESPACE &lt;foo&gt; SET|RESET ( */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLESPACE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"SET|RESET"</literal></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST3</name><argument_list>(<argument><expr><literal type="string">"seq_page_cost"</literal></expr></argument>, <argument><expr><literal type="string">"random_page_cost"</literal></expr></argument>,
							<argument><expr><literal type="string">"effective_io_concurrency"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER TABLEGROUP &lt;foo&gt; with RENAME TO, OWNER TO */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLEGROUP"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"RENAME TO"</literal></expr></argument>, <argument><expr><literal type="string">"OWNER TO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* ALTER TEXT SEARCH */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TEXT"</literal></expr></argument>, <argument><expr><literal type="string">"SEARCH"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST4</name><argument_list>(<argument><expr><literal type="string">"CONFIGURATION"</literal></expr></argument>, <argument><expr><literal type="string">"DICTIONARY"</literal></expr></argument>, <argument><expr><literal type="string">"PARSER"</literal></expr></argument>, <argument><expr><literal type="string">"TEMPLATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TEXT"</literal></expr></argument>, <argument><expr><literal type="string">"SEARCH"</literal></expr></argument>, <argument><expr><literal type="string">"TEMPLATE|PARSER"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"RENAME TO"</literal></expr></argument>, <argument><expr><literal type="string">"SET SCHEMA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TEXT"</literal></expr></argument>, <argument><expr><literal type="string">"SEARCH"</literal></expr></argument>, <argument><expr><literal type="string">"DICTIONARY"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST3</name><argument_list>(<argument><expr><literal type="string">"OWNER TO"</literal></expr></argument>, <argument><expr><literal type="string">"RENAME TO"</literal></expr></argument>, <argument><expr><literal type="string">"SET SCHEMA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TEXT"</literal></expr></argument>, <argument><expr><literal type="string">"SEARCH"</literal></expr></argument>, <argument><expr><literal type="string">"CONFIGURATION"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST6</name><argument_list>(<argument><expr><literal type="string">"ADD MAPPING FOR"</literal></expr></argument>, <argument><expr><literal type="string">"ALTER MAPPING"</literal></expr></argument>,
							<argument><expr><literal type="string">"DROP MAPPING FOR"</literal></expr></argument>,
							<argument><expr><literal type="string">"OWNER TO"</literal></expr></argument>, <argument><expr><literal type="string">"RENAME TO"</literal></expr></argument>, <argument><expr><literal type="string">"SET SCHEMA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* complete ALTER TYPE &lt;foo&gt; with actions */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TYPE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST7</name><argument_list>(<argument><expr><literal type="string">"ADD ATTRIBUTE"</literal></expr></argument>, <argument><expr><literal type="string">"ADD VALUE"</literal></expr></argument>, <argument><expr><literal type="string">"ALTER ATTRIBUTE"</literal></expr></argument>,
							<argument><expr><literal type="string">"DROP ATTRIBUTE"</literal></expr></argument>,
							<argument><expr><literal type="string">"OWNER TO"</literal></expr></argument>, <argument><expr><literal type="string">"RENAME"</literal></expr></argument>, <argument><expr><literal type="string">"SET SCHEMA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* complete ALTER TYPE &lt;foo&gt; ADD with actions */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TYPE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ADD"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"ATTRIBUTE"</literal></expr></argument>, <argument><expr><literal type="string">"VALUE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER TYPE &lt;foo&gt; RENAME	*/</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TYPE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"RENAME"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST3</name><argument_list>(<argument><expr><literal type="string">"ATTRIBUTE"</literal></expr></argument>, <argument><expr><literal type="string">"TO"</literal></expr></argument>, <argument><expr><literal type="string">"VALUE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER TYPE xxx RENAME (ATTRIBUTE|VALUE) yyy */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches6</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TYPE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"RENAME"</literal></expr></argument>, <argument><expr><literal type="string">"ATTRIBUTE|VALUE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"TO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/*
	 * If we have ALTER TYPE &lt;sth&gt; ALTER/DROP/RENAME ATTRIBUTE, provide list
	 * of attributes
	 */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TYPE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ALTER|DROP|RENAME"</literal></expr></argument>, <argument><expr><literal type="string">"ATTRIBUTE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_ATTR</name><argument_list>(<argument><expr><name>prev3_wd</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* ALTER TYPE ALTER ATTRIBUTE &lt;foo&gt; */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches6</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TYPE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"ATTRIBUTE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"TYPE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* complete ALTER GROUP &lt;foo&gt; */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"GROUP"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST3</name><argument_list>(<argument><expr><literal type="string">"ADD USER"</literal></expr></argument>, <argument><expr><literal type="string">"DROP USER"</literal></expr></argument>, <argument><expr><literal type="string">"RENAME TO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* complete ALTER GROUP &lt;foo&gt; ADD|DROP with USER */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"GROUP"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ADD|DROP"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"USER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* complete ALTER GROUP &lt;foo&gt; ADD|DROP USER with a user name */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"GROUP"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ADD|DROP"</literal></expr></argument>, <argument><expr><literal type="string">"USER"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_roles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/*
	 * If we have ALTER TYPE &lt;sth&gt; RENAME VALUE, provide list of enum values
	 */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"TYPE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"RENAME"</literal></expr></argument>, <argument><expr><literal type="string">"VALUE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_ENUM_VALUE</name><argument_list>(<argument><expr><name>prev3_wd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* BEGIN */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches1</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST6</name><argument_list>(<argument><expr><literal type="string">"WORK"</literal></expr></argument>, <argument><expr><literal type="string">"TRANSACTION"</literal></expr></argument>, <argument><expr><literal type="string">"ISOLATION LEVEL"</literal></expr></argument>, <argument><expr><literal type="string">"READ"</literal></expr></argument>, <argument><expr><literal type="string">"DEFERRABLE"</literal></expr></argument>, <argument><expr><literal type="string">"NOT DEFERRABLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<comment type="block">/* END, ABORT */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches1</name><argument_list>(<argument><expr><literal type="string">"END|ABORT"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"WORK"</literal></expr></argument>, <argument><expr><literal type="string">"TRANSACTION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<comment type="block">/* COMMIT */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches1</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST3</name><argument_list>(<argument><expr><literal type="string">"WORK"</literal></expr></argument>, <argument><expr><literal type="string">"TRANSACTION"</literal></expr></argument>, <argument><expr><literal type="string">"PREPARED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<comment type="block">/* RELEASE SAVEPOINT */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches1</name><argument_list>(<argument><expr><literal type="string">"RELEASE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"SAVEPOINT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<comment type="block">/* ROLLBACK */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches1</name><argument_list>(<argument><expr><literal type="string">"ROLLBACK"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST4</name><argument_list>(<argument><expr><literal type="string">"WORK"</literal></expr></argument>, <argument><expr><literal type="string">"TRANSACTION"</literal></expr></argument>, <argument><expr><literal type="string">"TO SAVEPOINT"</literal></expr></argument>, <argument><expr><literal type="string">"PREPARED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<comment type="block">/* CALL */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches1</name><argument_list>(<argument><expr><literal type="string">"CALL"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_VERSIONED_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_procedures</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"CALL"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
<comment type="block">/* CLUSTER */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches1</name><argument_list>(<argument><expr><literal type="string">"CLUSTER"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tm</name></expr></argument>, <argument><expr><literal type="string">"UNION SELECT 'VERBOSE'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"CLUSTER"</literal></expr></argument>, <argument><expr><literal type="string">"VERBOSE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tm</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* If we have CLUSTER &lt;sth&gt;, then add "USING" */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"CLUSTER"</literal></expr></argument>, <argument><expr><call><name>MatchAnyExcept</name><argument_list>(<argument><expr><literal type="string">"VERBOSE|ON"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"USING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* If we have CLUSTER VERBOSE &lt;sth&gt;, then add "USING" */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"CLUSTER"</literal></expr></argument>, <argument><expr><literal type="string">"VERBOSE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"USING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* If we have CLUSTER &lt;sth&gt; USING, then add the index as well */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"CLUSTER"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"USING"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"CLUSTER"</literal></expr></argument>, <argument><expr><literal type="string">"VERBOSE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"USING"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>completion_info_charp</name> <operator>=</operator> <name>prev2_wd</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_index_of_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>

<comment type="block">/* COMMENT */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches1</name><argument_list>(<argument><expr><literal type="string">"COMMENT"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"ON"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"COMMENT"</literal></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>list_COMMENT</name><index>[]</index></name> <init>=
		<expr><block>{<expr><literal type="string">"ACCESS METHOD"</literal></expr>, <expr><literal type="string">"CAST"</literal></expr>, <expr><literal type="string">"COLLATION"</literal></expr>, <expr><literal type="string">"CONVERSION"</literal></expr>, <expr><literal type="string">"DATABASE"</literal></expr>,
			<expr><literal type="string">"EVENT TRIGGER"</literal></expr>, <expr><literal type="string">"EXTENSION"</literal></expr>,
			<expr><literal type="string">"FOREIGN DATA WRAPPER"</literal></expr>, <expr><literal type="string">"FOREIGN TABLE"</literal></expr>,
			<expr><literal type="string">"SERVER"</literal></expr>, <expr><literal type="string">"INDEX"</literal></expr>, <expr><literal type="string">"LANGUAGE"</literal></expr>, <expr><literal type="string">"POLICY"</literal></expr>, <expr><literal type="string">"PUBLICATION"</literal></expr>, <expr><literal type="string">"RULE"</literal></expr>,
			<expr><literal type="string">"SCHEMA"</literal></expr>, <expr><literal type="string">"SEQUENCE"</literal></expr>, <expr><literal type="string">"STATISTICS"</literal></expr>, <expr><literal type="string">"SUBSCRIPTION"</literal></expr>,
			<expr><literal type="string">"TABLE"</literal></expr>, <expr><literal type="string">"TYPE"</literal></expr>, <expr><literal type="string">"VIEW"</literal></expr>, <expr><literal type="string">"MATERIALIZED VIEW"</literal></expr>, <expr><literal type="string">"COLUMN"</literal></expr>, <expr><literal type="string">"AGGREGATE"</literal></expr>, <expr><literal type="string">"FUNCTION"</literal></expr>,
			<expr><literal type="string">"PROCEDURE"</literal></expr>, <expr><literal type="string">"ROUTINE"</literal></expr>,
			<expr><literal type="string">"OPERATOR"</literal></expr>, <expr><literal type="string">"TRIGGER"</literal></expr>, <expr><literal type="string">"CONSTRAINT"</literal></expr>, <expr><literal type="string">"DOMAIN"</literal></expr>, <expr><literal type="string">"LARGE OBJECT"</literal></expr>, <expr><literal type="string">"TABLEGROUP"</literal></expr>,
		<expr><literal type="string">"TABLESPACE"</literal></expr>, <expr><literal type="string">"TEXT SEARCH"</literal></expr>, <expr><literal type="string">"ROLE"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST</name><argument_list>(<argument><expr><name>list_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"COMMENT"</literal></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><literal type="string">"ACCESS"</literal></expr></argument>, <argument><expr><literal type="string">"METHOD"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_access_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"COMMENT"</literal></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><literal type="string">"FOREIGN"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"DATA WRAPPER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"COMMENT"</literal></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><literal type="string">"TEXT"</literal></expr></argument>, <argument><expr><literal type="string">"SEARCH"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST4</name><argument_list>(<argument><expr><literal type="string">"CONFIGURATION"</literal></expr></argument>, <argument><expr><literal type="string">"DICTIONARY"</literal></expr></argument>, <argument><expr><literal type="string">"PARSER"</literal></expr></argument>, <argument><expr><literal type="string">"TEMPLATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"COMMENT"</literal></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><literal type="string">"CONSTRAINT"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_all_table_constraints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"COMMENT"</literal></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><literal type="string">"CONSTRAINT"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"ON"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"COMMENT"</literal></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><literal type="string">"CONSTRAINT"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>completion_info_charp</name> <operator>=</operator> <name>prev2_wd</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tables_for_constraint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"COMMENT"</literal></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><literal type="string">"MATERIALIZED"</literal></expr></argument>, <argument><expr><literal type="string">"VIEW"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_matviews</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"COMMENT"</literal></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><literal type="string">"EVENT"</literal></expr></argument>, <argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_event_triggers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"COMMENT"</literal></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><call><name>MatchAnyExcept</name><argument_list>(<argument><expr><literal type="string">"IS"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"COMMENT"</literal></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><call><name>MatchAnyExcept</name><argument_list>(<argument><expr><literal type="string">"IS"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>Matches6</name><argument_list>(<argument><expr><literal type="string">"COMMENT"</literal></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><call><name>MatchAnyExcept</name><argument_list>(<argument><expr><literal type="string">"IS"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"IS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* COPY */</comment>

	<comment type="block">/*
	 * If we have COPY, offer list of tables or "(" (Also cover the analogous
	 * backslash command).
	 */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches1</name><argument_list>(<argument><expr><literal type="string">"COPY|\\copy"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tables</name></expr></argument>,
								   <argument><expr><literal type="string">" UNION ALL SELECT '('"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* If we have COPY BINARY, complete with list of tables */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"COPY"</literal></expr></argument>, <argument><expr><literal type="string">"BINARY"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tables</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* If we have COPY (, complete it with legal commands */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"COPY|\\copy"</literal></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST7</name><argument_list>(<argument><expr><literal type="string">"SELECT"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><literal type="string">"VALUES"</literal></expr></argument>, <argument><expr><literal type="string">"INSERT"</literal></expr></argument>, <argument><expr><literal type="string">"UPDATE"</literal></expr></argument>, <argument><expr><literal type="string">"DELETE"</literal></expr></argument>, <argument><expr><literal type="string">"WITH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* If we have COPY [BINARY] &lt;sth&gt;, complete it with "TO" or "FROM" */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"COPY|\\copy"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"COPY"</literal></expr></argument>, <argument><expr><literal type="string">"BINARY"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"FROM"</literal></expr></argument>, <argument><expr><literal type="string">"TO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* If we have COPY [BINARY] &lt;sth&gt; FROM|TO, complete with filename */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"COPY|\\copy"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"FROM|TO"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"COPY"</literal></expr></argument>, <argument><expr><literal type="string">"BINARY"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"FROM|TO"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>completion_charp</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>matches</name> <operator>=</operator> <call><name>completion_matches</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>complete_from_files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>

	<comment type="block">/* Handle COPY [BINARY] &lt;sth&gt; FROM|TO filename */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"COPY|\\copy"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"FROM|TO"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"COPY"</literal></expr></argument>, <argument><expr><literal type="string">"BINARY"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"FROM|TO"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST6</name><argument_list>(<argument><expr><literal type="string">"BINARY"</literal></expr></argument>, <argument><expr><literal type="string">"OIDS"</literal></expr></argument>, <argument><expr><literal type="string">"DELIMITER"</literal></expr></argument>, <argument><expr><literal type="string">"NULL"</literal></expr></argument>, <argument><expr><literal type="string">"CSV"</literal></expr></argument>,
							<argument><expr><literal type="string">"ENCODING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* Handle COPY [BINARY] &lt;sth&gt; FROM|TO filename CSV */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"COPY|\\copy"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"FROM|TO"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"CSV"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>Matches6</name><argument_list>(<argument><expr><literal type="string">"COPY"</literal></expr></argument>, <argument><expr><literal type="string">"BINARY"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"FROM|TO"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"CSV"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST5</name><argument_list>(<argument><expr><literal type="string">"HEADER"</literal></expr></argument>, <argument><expr><literal type="string">"QUOTE"</literal></expr></argument>, <argument><expr><literal type="string">"ESCAPE"</literal></expr></argument>, <argument><expr><literal type="string">"FORCE QUOTE"</literal></expr></argument>,
							<argument><expr><literal type="string">"FORCE NOT NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* CREATE ACCESS METHOD */</comment>
	<comment type="block">/* Complete "CREATE ACCESS METHOD &lt;name&gt;" */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"ACCESS"</literal></expr></argument>, <argument><expr><literal type="string">"METHOD"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"TYPE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Complete "CREATE ACCESS METHOD &lt;name&gt; TYPE" */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"ACCESS"</literal></expr></argument>, <argument><expr><literal type="string">"METHOD"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"TYPE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"INDEX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Complete "CREATE ACCESS METHOD &lt;name&gt; TYPE &lt;type&gt;" */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches6</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"ACCESS"</literal></expr></argument>, <argument><expr><literal type="string">"METHOD"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"TYPE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"HANDLER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* CREATE DATABASE */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"DATABASE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST9</name><argument_list>(<argument><expr><literal type="string">"OWNER"</literal></expr></argument>, <argument><expr><literal type="string">"TEMPLATE"</literal></expr></argument>, <argument><expr><literal type="string">"ENCODING"</literal></expr></argument>, <argument><expr><literal type="string">"TABLESPACE"</literal></expr></argument>,
							<argument><expr><literal type="string">"IS_TEMPLATE"</literal></expr></argument>,
							<argument><expr><literal type="string">"ALLOW_CONNECTIONS"</literal></expr></argument>, <argument><expr><literal type="string">"CONNECTION LIMIT"</literal></expr></argument>,
							<argument><expr><literal type="string">"LC_COLLATE"</literal></expr></argument>, <argument><expr><literal type="string">"LC_CTYPE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"DATABASE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"TEMPLATE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_template_databases</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* CREATE EXTENSION */</comment>
	<comment type="block">/* Complete with available extensions rather than installed ones. */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"EXTENSION"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_available_extensions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* CREATE EXTENSION &lt;name&gt; */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"EXTENSION"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST3</name><argument_list>(<argument><expr><literal type="string">"WITH SCHEMA"</literal></expr></argument>, <argument><expr><literal type="string">"CASCADE"</literal></expr></argument>, <argument><expr><literal type="string">"VERSION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* CREATE EXTENSION &lt;name&gt; VERSION */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"EXTENSION"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"VERSION"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>completion_info_charp</name> <operator>=</operator> <name>prev2_wd</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_available_extension_versions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>

	<comment type="block">/* CREATE FOREIGN */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"FOREIGN"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"DATA WRAPPER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* CREATE FOREIGN DATA WRAPPER */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"FOREIGN"</literal></expr></argument>, <argument><expr><literal type="string">"DATA"</literal></expr></argument>, <argument><expr><literal type="string">"WRAPPER"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST3</name><argument_list>(<argument><expr><literal type="string">"HANDLER"</literal></expr></argument>, <argument><expr><literal type="string">"VALIDATOR"</literal></expr></argument>, <argument><expr><literal type="string">"OPTIONS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* CREATE INDEX --- is allowed inside CREATE SCHEMA, so use TailMatches */</comment>
	<comment type="block">/* First off we complete CREATE UNIQUE with "INDEX" */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches2</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"UNIQUE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"INDEX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/*
	 * If we have CREATE|UNIQUE INDEX, then add "ON", "CONCURRENTLY", and
	 * existing indexes
	 */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches2</name><argument_list>(<argument><expr><literal type="string">"CREATE|UNIQUE"</literal></expr></argument>, <argument><expr><literal type="string">"INDEX"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_indexes</name></expr></argument>,
								   <argument><expr><literal type="string">" UNION SELECT 'ON'"</literal>
								   <literal type="string">" UNION SELECT 'CONCURRENTLY'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/*
	 * Complete ... INDEX|CONCURRENTLY [&lt;name&gt;] ON with a list of relations
	 * that can indexes can be created on
	 */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches3</name><argument_list>(<argument><expr><literal type="string">"INDEX|CONCURRENTLY"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>TailMatches2</name><argument_list>(<argument><expr><literal type="string">"INDEX|CONCURRENTLY"</literal></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tpm</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/*
	 * Complete CREATE|UNIQUE INDEX CONCURRENTLY with "ON" and existing
	 * indexes
	 */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches3</name><argument_list>(<argument><expr><literal type="string">"CREATE|UNIQUE"</literal></expr></argument>, <argument><expr><literal type="string">"INDEX"</literal></expr></argument>, <argument><expr><literal type="string">"CONCURRENTLY"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_indexes</name></expr></argument>,
								   <argument><expr><literal type="string">" UNION SELECT 'ON'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Complete CREATE|UNIQUE INDEX [CONCURRENTLY] &lt;sth&gt; with "ON" */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches3</name><argument_list>(<argument><expr><literal type="string">"CREATE|UNIQUE"</literal></expr></argument>, <argument><expr><literal type="string">"INDEX"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>TailMatches4</name><argument_list>(<argument><expr><literal type="string">"CREATE|UNIQUE"</literal></expr></argument>, <argument><expr><literal type="string">"INDEX"</literal></expr></argument>, <argument><expr><literal type="string">"CONCURRENTLY"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"ON"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/*
	 * Complete INDEX &lt;name&gt; ON &lt;table&gt; with a list of table columns (which
	 * should really be in parens)
	 */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches4</name><argument_list>(<argument><expr><literal type="string">"INDEX"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>TailMatches3</name><argument_list>(<argument><expr><literal type="string">"INDEX|CONCURRENTLY"</literal></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>, <argument><expr><literal type="string">"USING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches5</name><argument_list>(<argument><expr><literal type="string">"INDEX"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>TailMatches4</name><argument_list>(<argument><expr><literal type="string">"INDEX|CONCURRENTLY"</literal></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_ATTR</name><argument_list>(<argument><expr><name>prev2_wd</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* same if you put in USING */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches5</name><argument_list>(<argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"USING"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_ATTR</name><argument_list>(<argument><expr><name>prev4_wd</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Complete USING with an index method */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches6</name><argument_list>(<argument><expr><literal type="string">"INDEX"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"USING"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>TailMatches5</name><argument_list>(<argument><expr><literal type="string">"INDEX"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"USING"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>TailMatches4</name><argument_list>(<argument><expr><literal type="string">"INDEX"</literal></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"USING"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_access_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches4</name><argument_list>(<argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"USING"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			 <operator>!</operator><call><name>TailMatches6</name><argument_list>(<argument><expr><literal type="string">"POLICY"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			 <operator>!</operator><call><name>TailMatches4</name><argument_list>(<argument><expr><literal type="string">"FOR"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* CREATE POLICY */</comment>
	<comment type="block">/* Complete "CREATE POLICY &lt;name&gt; ON" */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"POLICY"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"ON"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Complete "CREATE POLICY &lt;name&gt; ON &lt;table&gt;" */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"POLICY"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tables</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Complete "CREATE POLICY &lt;name&gt; ON &lt;table&gt; AS|FOR|TO|USING|WITH CHECK" */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"POLICY"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST5</name><argument_list>(<argument><expr><literal type="string">"AS"</literal></expr></argument>, <argument><expr><literal type="string">"FOR"</literal></expr></argument>, <argument><expr><literal type="string">"TO"</literal></expr></argument>, <argument><expr><literal type="string">"USING ("</literal></expr></argument>, <argument><expr><literal type="string">"WITH CHECK ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* CREATE POLICY &lt;name&gt; ON &lt;table&gt; AS PERMISSIVE|RESTRICTIVE */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches6</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"POLICY"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"AS"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"PERMISSIVE"</literal></expr></argument>, <argument><expr><literal type="string">"RESTRICTIVE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/*
	 * CREATE POLICY &lt;name&gt; ON &lt;table&gt; AS PERMISSIVE|RESTRICTIVE
	 * FOR|TO|USING|WITH CHECK
	 */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches7</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"POLICY"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"AS"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST4</name><argument_list>(<argument><expr><literal type="string">"FOR"</literal></expr></argument>, <argument><expr><literal type="string">"TO"</literal></expr></argument>, <argument><expr><literal type="string">"USING"</literal></expr></argument>, <argument><expr><literal type="string">"WITH CHECK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* CREATE POLICY &lt;name&gt; ON &lt;table&gt; FOR ALL|SELECT|INSERT|UPDATE|DELETE */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches6</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"POLICY"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"FOR"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST5</name><argument_list>(<argument><expr><literal type="string">"ALL"</literal></expr></argument>, <argument><expr><literal type="string">"SELECT"</literal></expr></argument>, <argument><expr><literal type="string">"INSERT"</literal></expr></argument>, <argument><expr><literal type="string">"UPDATE"</literal></expr></argument>, <argument><expr><literal type="string">"DELETE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Complete "CREATE POLICY &lt;name&gt; ON &lt;table&gt; FOR INSERT TO|WITH CHECK" */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches7</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"POLICY"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"FOR"</literal></expr></argument>, <argument><expr><literal type="string">"INSERT"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"TO"</literal></expr></argument>, <argument><expr><literal type="string">"WITH CHECK ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Complete "CREATE POLICY &lt;name&gt; ON &lt;table&gt; FOR SELECT|DELETE TO|USING" */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches7</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"POLICY"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"FOR"</literal></expr></argument>, <argument><expr><literal type="string">"SELECT|DELETE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"TO"</literal></expr></argument>, <argument><expr><literal type="string">"USING ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* CREATE POLICY &lt;name&gt; ON &lt;table&gt; FOR ALL|UPDATE TO|USING|WITH CHECK */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches7</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"POLICY"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"FOR"</literal></expr></argument>, <argument><expr><literal type="string">"ALL|UPDATE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST3</name><argument_list>(<argument><expr><literal type="string">"TO"</literal></expr></argument>, <argument><expr><literal type="string">"USING ("</literal></expr></argument>, <argument><expr><literal type="string">"WITH CHECK ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Complete "CREATE POLICY &lt;name&gt; ON &lt;table&gt; TO &lt;role&gt;" */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches6</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"POLICY"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"TO"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_grant_roles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Complete "CREATE POLICY &lt;name&gt; ON &lt;table&gt; USING (" */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches6</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"POLICY"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"USING"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/*
	 * CREATE POLICY &lt;name&gt; ON &lt;table&gt; AS PERMISSIVE|RESTRICTIVE FOR
	 * ALL|SELECT|INSERT|UPDATE|DELETE
	 */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches8</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"POLICY"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"AS"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"FOR"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST5</name><argument_list>(<argument><expr><literal type="string">"ALL"</literal></expr></argument>, <argument><expr><literal type="string">"SELECT"</literal></expr></argument>, <argument><expr><literal type="string">"INSERT"</literal></expr></argument>, <argument><expr><literal type="string">"UPDATE"</literal></expr></argument>, <argument><expr><literal type="string">"DELETE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/*
	 * Complete "CREATE POLICY &lt;name&gt; ON &lt;table&gt; AS PERMISSIVE|RESTRICTIVE FOR
	 * INSERT TO|WITH CHECK"
	 */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches9</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"POLICY"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"AS"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"FOR"</literal></expr></argument>, <argument><expr><literal type="string">"INSERT"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"TO"</literal></expr></argument>, <argument><expr><literal type="string">"WITH CHECK ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/*
	 * Complete "CREATE POLICY &lt;name&gt; ON &lt;table&gt; AS PERMISSIVE|RESTRICTIVE FOR
	 * SELECT|DELETE TO|USING"
	 */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches9</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"POLICY"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"AS"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"FOR"</literal></expr></argument>, <argument><expr><literal type="string">"SELECT|DELETE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"TO"</literal></expr></argument>, <argument><expr><literal type="string">"USING ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/*
	 * CREATE POLICY &lt;name&gt; ON &lt;table&gt; AS PERMISSIVE|RESTRICTIVE FOR
	 * ALL|UPDATE TO|USING|WITH CHECK
	 */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches9</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"POLICY"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"AS"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"FOR"</literal></expr></argument>, <argument><expr><literal type="string">"ALL|UPDATE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST3</name><argument_list>(<argument><expr><literal type="string">"TO"</literal></expr></argument>, <argument><expr><literal type="string">"USING ("</literal></expr></argument>, <argument><expr><literal type="string">"WITH CHECK ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/*
	 * Complete "CREATE POLICY &lt;name&gt; ON &lt;table&gt; AS PERMISSIVE|RESTRICTIVE TO
	 * &lt;role&gt;"
	 */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches8</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"POLICY"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"AS"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"TO"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_grant_roles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/*
	 * Complete "CREATE POLICY &lt;name&gt; ON &lt;table&gt; AS PERMISSIVE|RESTRICTIVE
	 * USING ("
	 */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches8</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"POLICY"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"AS"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"USING"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>


<comment type="block">/* CREATE PUBLICATION */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"PUBLICATION"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST3</name><argument_list>(<argument><expr><literal type="string">"FOR TABLE"</literal></expr></argument>, <argument><expr><literal type="string">"FOR ALL TABLES"</literal></expr></argument>, <argument><expr><literal type="string">"WITH ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"PUBLICATION"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"FOR"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><literal type="string">"ALL TABLES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Complete "CREATE PUBLICATION &lt;name&gt; FOR TABLE &lt;table&gt;, ..." */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>HeadMatches5</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"PUBLICATION"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"FOR"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tables</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Complete "CREATE PUBLICATION &lt;name&gt; [...] WITH" */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>HeadMatches2</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"PUBLICATION"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>TailMatches2</name><argument_list>(<argument><expr><literal type="string">"WITH"</literal></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"publish"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* CREATE RULE */</comment>
	<comment type="block">/* Complete "CREATE RULE &lt;sth&gt;" with "AS ON" */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"RULE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"AS ON"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Complete "CREATE RULE &lt;sth&gt; AS" with "ON" */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"RULE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"AS"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"ON"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Complete "CREATE RULE &lt;sth&gt; AS ON" with SELECT|UPDATE|INSERT|DELETE */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"RULE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"AS"</literal></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST4</name><argument_list>(<argument><expr><literal type="string">"SELECT"</literal></expr></argument>, <argument><expr><literal type="string">"UPDATE"</literal></expr></argument>, <argument><expr><literal type="string">"INSERT"</literal></expr></argument>, <argument><expr><literal type="string">"DELETE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Complete "AS ON SELECT|UPDATE|INSERT|DELETE" with a "TO" */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches3</name><argument_list>(<argument><expr><literal type="string">"AS"</literal></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><literal type="string">"SELECT|UPDATE|INSERT|DELETE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"TO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Complete "AS ON &lt;sth&gt; TO" with a table name */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches4</name><argument_list>(<argument><expr><literal type="string">"AS"</literal></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><literal type="string">"SELECT|UPDATE|INSERT|DELETE"</literal></expr></argument>, <argument><expr><literal type="string">"TO"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tables</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* CREATE SEQUENCE --- is allowed inside CREATE SCHEMA, so use TailMatches */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches3</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"SEQUENCE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>TailMatches4</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"TEMP|TEMPORARY"</literal></expr></argument>, <argument><expr><literal type="string">"SEQUENCE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST8</name><argument_list>(<argument><expr><literal type="string">"INCREMENT BY"</literal></expr></argument>, <argument><expr><literal type="string">"MINVALUE"</literal></expr></argument>, <argument><expr><literal type="string">"MAXVALUE"</literal></expr></argument>, <argument><expr><literal type="string">"NO"</literal></expr></argument>, <argument><expr><literal type="string">"CACHE"</literal></expr></argument>,
							<argument><expr><literal type="string">"CYCLE"</literal></expr></argument>, <argument><expr><literal type="string">"OWNED BY"</literal></expr></argument>, <argument><expr><literal type="string">"START WITH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches4</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"SEQUENCE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"NO"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>TailMatches5</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"TEMP|TEMPORARY"</literal></expr></argument>, <argument><expr><literal type="string">"SEQUENCE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"NO"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST3</name><argument_list>(<argument><expr><literal type="string">"MINVALUE"</literal></expr></argument>, <argument><expr><literal type="string">"MAXVALUE"</literal></expr></argument>, <argument><expr><literal type="string">"CYCLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* CREATE SERVER &lt;name&gt; */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"SERVER"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST3</name><argument_list>(<argument><expr><literal type="string">"TYPE"</literal></expr></argument>, <argument><expr><literal type="string">"VERSION"</literal></expr></argument>, <argument><expr><literal type="string">"FOREIGN DATA WRAPPER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* CREATE STATISTICS &lt;name&gt; */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"STATISTICS"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"STATISTICS"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"ndistinct"</literal></expr></argument>, <argument><expr><literal type="string">"dependencies"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>HeadMatches3</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"STATISTICS"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			 <name><name>previous_words</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal> <operator>&amp;&amp;</operator>
			 <name><name>previous_words</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>previous_words</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"ON"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>HeadMatches3</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"STATISTICS"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			 <call><name>TailMatches1</name><argument_list>(<argument><expr><literal type="string">"FROM"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tables</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* CREATE TABLE --- is allowed inside CREATE SCHEMA, so use TailMatches */</comment>
	<comment type="block">/* Complete "CREATE TEMP/TEMPORARY" with the possible temp objects */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches2</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"TEMP|TEMPORARY"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST3</name><argument_list>(<argument><expr><literal type="string">"SEQUENCE"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><literal type="string">"VIEW"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Complete "CREATE UNLOGGED" with TABLE or MATVIEW */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches2</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"UNLOGGED"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><literal type="string">"MATERIALIZED VIEW"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Complete PARTITION BY with RANGE ( or LIST ( or ... */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches2</name><argument_list>(<argument><expr><literal type="string">"PARTITION"</literal></expr></argument>, <argument><expr><literal type="string">"BY"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST3</name><argument_list>(<argument><expr><literal type="string">"RANGE ("</literal></expr></argument>, <argument><expr><literal type="string">"LIST ("</literal></expr></argument>, <argument><expr><literal type="string">"HASH ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* If we have xxx PARTITION OF, provide a list of partitioned tables */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches2</name><argument_list>(<argument><expr><literal type="string">"PARTITION"</literal></expr></argument>, <argument><expr><literal type="string">"OF"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_partitioned_tables</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Limited completion support for partition bound specification */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches3</name><argument_list>(<argument><expr><literal type="string">"PARTITION"</literal></expr></argument>, <argument><expr><literal type="string">"OF"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"FOR VALUES"</literal></expr></argument>, <argument><expr><literal type="string">"DEFAULT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* CREATE TABLEGROUP */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"TABLEGROUP"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"OWNER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLESPACE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Complete CREATE TABLEGROUP name OWNER name with "TABLESPACE" */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"TABLEGROUP"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"OWNER"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"TABLESPACE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* CREATE TABLESPACE */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"TABLESPACE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"OWNER"</literal></expr></argument>, <argument><expr><literal type="string">"WITH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Complete CREATE TABLESPACE name OWNER name with "WITH (" */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"TABLESPACE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"OWNER"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"WITH ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* CREATE TEXT SEARCH */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"TEXT"</literal></expr></argument>, <argument><expr><literal type="string">"SEARCH"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST4</name><argument_list>(<argument><expr><literal type="string">"CONFIGURATION"</literal></expr></argument>, <argument><expr><literal type="string">"DICTIONARY"</literal></expr></argument>, <argument><expr><literal type="string">"PARSER"</literal></expr></argument>, <argument><expr><literal type="string">"TEMPLATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"TEXT"</literal></expr></argument>, <argument><expr><literal type="string">"SEARCH"</literal></expr></argument>, <argument><expr><literal type="string">"CONFIGURATION"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* CREATE SUBSCRIPTION */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"SUBSCRIPTION"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"CONNECTION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"SUBSCRIPTION"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"CONNECTION"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"PUBLICATION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches6</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"SUBSCRIPTION"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"CONNECTION"</literal></expr></argument>,
					  <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"PUBLICATION"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* complete with nothing here as this refers to remote publications */</comment>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>HeadMatches2</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"SUBSCRIPTION"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>TailMatches2</name><argument_list>(<argument><expr><literal type="string">"PUBLICATION"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"WITH ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Complete "CREATE SUBSCRIPTION &lt;name&gt; ...  WITH ( &lt;opt&gt;" */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>HeadMatches2</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"SUBSCRIPTION"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>TailMatches2</name><argument_list>(<argument><expr><literal type="string">"WITH"</literal></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST6</name><argument_list>(<argument><expr><literal type="string">"copy_data"</literal></expr></argument>, <argument><expr><literal type="string">"connect"</literal></expr></argument>, <argument><expr><literal type="string">"create_slot"</literal></expr></argument>, <argument><expr><literal type="string">"enabled"</literal></expr></argument>,
							<argument><expr><literal type="string">"slot_name"</literal></expr></argument>, <argument><expr><literal type="string">"synchronous_commit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* CREATE TRIGGER --- is allowed inside CREATE SCHEMA, so use TailMatches */</comment>
	<comment type="block">/* complete CREATE TRIGGER &lt;name&gt; with BEFORE,AFTER,INSTEAD OF */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches3</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST3</name><argument_list>(<argument><expr><literal type="string">"BEFORE"</literal></expr></argument>, <argument><expr><literal type="string">"AFTER"</literal></expr></argument>, <argument><expr><literal type="string">"INSTEAD OF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* complete CREATE TRIGGER &lt;name&gt; BEFORE,AFTER with an event */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches4</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"BEFORE|AFTER"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST4</name><argument_list>(<argument><expr><literal type="string">"INSERT"</literal></expr></argument>, <argument><expr><literal type="string">"DELETE"</literal></expr></argument>, <argument><expr><literal type="string">"UPDATE"</literal></expr></argument>, <argument><expr><literal type="string">"TRUNCATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* complete CREATE TRIGGER &lt;name&gt; INSTEAD OF with an event */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches5</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"INSTEAD"</literal></expr></argument>, <argument><expr><literal type="string">"OF"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST3</name><argument_list>(<argument><expr><literal type="string">"INSERT"</literal></expr></argument>, <argument><expr><literal type="string">"DELETE"</literal></expr></argument>, <argument><expr><literal type="string">"UPDATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* complete CREATE TRIGGER &lt;name&gt; BEFORE,AFTER sth with OR,ON */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches5</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"BEFORE|AFTER"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>TailMatches6</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"INSTEAD"</literal></expr></argument>, <argument><expr><literal type="string">"OF"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><literal type="string">"OR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/*
	 * complete CREATE TRIGGER &lt;name&gt; BEFORE,AFTER event ON with a list of
	 * tables.  EXECUTE FUNCTION is the recommended grammar instead of EXECUTE
	 * PROCEDURE in version 11 and upwards.
	 */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches6</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"BEFORE|AFTER"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tables</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* complete CREATE TRIGGER ... INSTEAD OF event ON with a list of views */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches7</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"INSTEAD"</literal></expr></argument>, <argument><expr><literal type="string">"OF"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_views</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>HeadMatches2</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>TailMatches2</name><argument_list>(<argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>sversion</name></name> <operator>&gt;=</operator> <literal type="number">110000</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_LIST7</name><argument_list>(<argument><expr><literal type="string">"NOT DEFERRABLE"</literal></expr></argument>, <argument><expr><literal type="string">"DEFERRABLE"</literal></expr></argument>, <argument><expr><literal type="string">"INITIALLY"</literal></expr></argument>,
								<argument><expr><literal type="string">"REFERENCING"</literal></expr></argument>, <argument><expr><literal type="string">"FOR"</literal></expr></argument>, <argument><expr><literal type="string">"WHEN ("</literal></expr></argument>,
								<argument><expr><literal type="string">"EXECUTE FUNCTION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_LIST7</name><argument_list>(<argument><expr><literal type="string">"NOT DEFERRABLE"</literal></expr></argument>, <argument><expr><literal type="string">"DEFERRABLE"</literal></expr></argument>, <argument><expr><literal type="string">"INITIALLY"</literal></expr></argument>,
								<argument><expr><literal type="string">"REFERENCING"</literal></expr></argument>, <argument><expr><literal type="string">"FOR"</literal></expr></argument>, <argument><expr><literal type="string">"WHEN ("</literal></expr></argument>,
								<argument><expr><literal type="string">"EXECUTE PROCEDURE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>HeadMatches2</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			 <operator>(</operator><call><name>TailMatches1</name><argument_list>(<argument><expr><literal type="string">"DEFERRABLE"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>TailMatches2</name><argument_list>(<argument><expr><literal type="string">"INITIALLY"</literal></expr></argument>, <argument><expr><literal type="string">"IMMEDIATE|DEFERRED"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>sversion</name></name> <operator>&gt;=</operator> <literal type="number">110000</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_LIST4</name><argument_list>(<argument><expr><literal type="string">"REFERENCING"</literal></expr></argument>, <argument><expr><literal type="string">"FOR"</literal></expr></argument>, <argument><expr><literal type="string">"WHEN ("</literal></expr></argument>,
								<argument><expr><literal type="string">"EXECUTE FUNCTION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_LIST4</name><argument_list>(<argument><expr><literal type="string">"REFERENCING"</literal></expr></argument>, <argument><expr><literal type="string">"FOR"</literal></expr></argument>, <argument><expr><literal type="string">"WHEN ("</literal></expr></argument>,
								<argument><expr><literal type="string">"EXECUTE PROCEDURE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>HeadMatches2</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>TailMatches1</name><argument_list>(<argument><expr><literal type="string">"REFERENCING"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"OLD TABLE"</literal></expr></argument>, <argument><expr><literal type="string">"NEW TABLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>HeadMatches2</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>TailMatches2</name><argument_list>(<argument><expr><literal type="string">"OLD|NEW"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"AS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>HeadMatches2</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			 <operator>(</operator><call><name>TailMatches5</name><argument_list>(<argument><expr><literal type="string">"REFERENCING"</literal></expr></argument>, <argument><expr><literal type="string">"OLD"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><literal type="string">"AS"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call> <operator>||</operator>
			  <call><name>TailMatches4</name><argument_list>(<argument><expr><literal type="string">"REFERENCING"</literal></expr></argument>, <argument><expr><literal type="string">"OLD"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>sversion</name></name> <operator>&gt;=</operator> <literal type="number">110000</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_LIST4</name><argument_list>(<argument><expr><literal type="string">"NEW TABLE"</literal></expr></argument>, <argument><expr><literal type="string">"FOR"</literal></expr></argument>, <argument><expr><literal type="string">"WHEN ("</literal></expr></argument>,
								<argument><expr><literal type="string">"EXECUTE FUNCTION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_LIST4</name><argument_list>(<argument><expr><literal type="string">"NEW TABLE"</literal></expr></argument>, <argument><expr><literal type="string">"FOR"</literal></expr></argument>, <argument><expr><literal type="string">"WHEN ("</literal></expr></argument>,
								<argument><expr><literal type="string">"EXECUTE PROCEDURE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>HeadMatches2</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			 <operator>(</operator><call><name>TailMatches5</name><argument_list>(<argument><expr><literal type="string">"REFERENCING"</literal></expr></argument>, <argument><expr><literal type="string">"NEW"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><literal type="string">"AS"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call> <operator>||</operator>
			  <call><name>TailMatches4</name><argument_list>(<argument><expr><literal type="string">"REFERENCING"</literal></expr></argument>, <argument><expr><literal type="string">"NEW"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>sversion</name></name> <operator>&gt;=</operator> <literal type="number">110000</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_LIST4</name><argument_list>(<argument><expr><literal type="string">"OLD TABLE"</literal></expr></argument>, <argument><expr><literal type="string">"FOR"</literal></expr></argument>, <argument><expr><literal type="string">"WHEN ("</literal></expr></argument>,
								<argument><expr><literal type="string">"EXECUTE FUNCTION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_LIST4</name><argument_list>(<argument><expr><literal type="string">"OLD TABLE"</literal></expr></argument>, <argument><expr><literal type="string">"FOR"</literal></expr></argument>, <argument><expr><literal type="string">"WHEN ("</literal></expr></argument>,
								<argument><expr><literal type="string">"EXECUTE PROCEDURE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>HeadMatches2</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			 <operator>(</operator><call><name>TailMatches9</name><argument_list>(<argument><expr><literal type="string">"REFERENCING"</literal></expr></argument>, <argument><expr><literal type="string">"OLD|NEW"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><literal type="string">"AS"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"OLD|NEW"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><literal type="string">"AS"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call> <operator>||</operator>
			  <call><name>TailMatches8</name><argument_list>(<argument><expr><literal type="string">"REFERENCING"</literal></expr></argument>, <argument><expr><literal type="string">"OLD|NEW"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"OLD|NEW"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><literal type="string">"AS"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call> <operator>||</operator>
			  <call><name>TailMatches8</name><argument_list>(<argument><expr><literal type="string">"REFERENCING"</literal></expr></argument>, <argument><expr><literal type="string">"OLD|NEW"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><literal type="string">"AS"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"OLD|NEW"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call> <operator>||</operator>
			  <call><name>TailMatches7</name><argument_list>(<argument><expr><literal type="string">"REFERENCING"</literal></expr></argument>, <argument><expr><literal type="string">"OLD|NEW"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"OLD|NEW"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>sversion</name></name> <operator>&gt;=</operator> <literal type="number">110000</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_LIST3</name><argument_list>(<argument><expr><literal type="string">"FOR"</literal></expr></argument>, <argument><expr><literal type="string">"WHEN ("</literal></expr></argument>, <argument><expr><literal type="string">"EXECUTE FUNCTION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_LIST3</name><argument_list>(<argument><expr><literal type="string">"FOR"</literal></expr></argument>, <argument><expr><literal type="string">"WHEN ("</literal></expr></argument>, <argument><expr><literal type="string">"EXECUTE PROCEDURE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>HeadMatches2</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>TailMatches1</name><argument_list>(<argument><expr><literal type="string">"FOR"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST3</name><argument_list>(<argument><expr><literal type="string">"EACH"</literal></expr></argument>, <argument><expr><literal type="string">"ROW"</literal></expr></argument>, <argument><expr><literal type="string">"STATEMENT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>HeadMatches2</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>TailMatches2</name><argument_list>(<argument><expr><literal type="string">"FOR"</literal></expr></argument>, <argument><expr><literal type="string">"EACH"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"ROW"</literal></expr></argument>, <argument><expr><literal type="string">"STATEMENT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>HeadMatches2</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			 <operator>(</operator><call><name>TailMatches3</name><argument_list>(<argument><expr><literal type="string">"FOR"</literal></expr></argument>, <argument><expr><literal type="string">"EACH"</literal></expr></argument>, <argument><expr><literal type="string">"ROW|STATEMENT"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
			  <call><name>TailMatches2</name><argument_list>(<argument><expr><literal type="string">"FOR"</literal></expr></argument>, <argument><expr><literal type="string">"ROW|STATEMENT"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>sversion</name></name> <operator>&gt;=</operator> <literal type="number">110000</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"WHEN ("</literal></expr></argument>, <argument><expr><literal type="string">"EXECUTE FUNCTION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"WHEN ("</literal></expr></argument>, <argument><expr><literal type="string">"EXECUTE PROCEDURE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<comment type="block">/* complete CREATE TRIGGER ... EXECUTE with PROCEDURE */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>HeadMatches2</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>TailMatches1</name><argument_list>(<argument><expr><literal type="string">"EXECUTE"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>sversion</name></name> <operator>&gt;=</operator> <literal type="number">110000</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"FUNCTION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"PROCEDURE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>HeadMatches2</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			 <call><name>TailMatches2</name><argument_list>(<argument><expr><literal type="string">"EXECUTE"</literal></expr></argument>, <argument><expr><literal type="string">"FUNCTION|PROCEDURE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_VERSIONED_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_functions</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* CREATE ROLE,USER,GROUP &lt;name&gt; */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"ROLE|GROUP|USER"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			 <operator>!</operator><call><name>TailMatches2</name><argument_list>(<argument><expr><literal type="string">"USER"</literal></expr></argument>, <argument><expr><literal type="string">"MAPPING"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>list_CREATEROLE</name><index>[]</index></name> <init>=
		<expr><block>{<expr><literal type="string">"ADMIN"</literal></expr>, <expr><literal type="string">"BYPASSRLS"</literal></expr>, <expr><literal type="string">"CONNECTION LIMIT"</literal></expr>, <expr><literal type="string">"CREATEDB"</literal></expr>, <expr><literal type="string">"CREATEROLE"</literal></expr>,
			<expr><literal type="string">"ENCRYPTED PASSWORD"</literal></expr>, <expr><literal type="string">"IN"</literal></expr>, <expr><literal type="string">"INHERIT"</literal></expr>, <expr><literal type="string">"LOGIN"</literal></expr>, <expr><literal type="string">"NOBYPASSRLS"</literal></expr>,
			<expr><literal type="string">"NOCREATEDB"</literal></expr>, <expr><literal type="string">"NOCREATEROLE"</literal></expr>, <expr><literal type="string">"NOINHERIT"</literal></expr>,
			<expr><literal type="string">"NOLOGIN"</literal></expr>, <expr><literal type="string">"NOREPLICATION"</literal></expr>, <expr><literal type="string">"NOSUPERUSER"</literal></expr>, <expr><literal type="string">"PASSWORD"</literal></expr>,
			<expr><literal type="string">"REPLICATION"</literal></expr>, <expr><literal type="string">"ROLE"</literal></expr>, <expr><literal type="string">"SUPERUSER"</literal></expr>, <expr><literal type="string">"SYSID"</literal></expr>,
		<expr><literal type="string">"VALID UNTIL"</literal></expr>, <expr><literal type="string">"WITH"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST</name><argument_list>(<argument><expr><name>list_CREATEROLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>

<comment type="block">/* CREATE ROLE,USER,GROUP &lt;name&gt; WITH */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"ROLE|GROUP|USER"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"WITH"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Similar to the above, but don't complete "WITH" again. */</comment>
		<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>list_CREATEROLE_WITH</name><index>[]</index></name> <init>=
		<expr><block>{<expr><literal type="string">"ADMIN"</literal></expr>, <expr><literal type="string">"BYPASSRLS"</literal></expr>, <expr><literal type="string">"CONNECTION LIMIT"</literal></expr>, <expr><literal type="string">"CREATEDB"</literal></expr>, <expr><literal type="string">"CREATEROLE"</literal></expr>,
			<expr><literal type="string">"ENCRYPTED PASSWORD"</literal></expr>, <expr><literal type="string">"IN"</literal></expr>, <expr><literal type="string">"INHERIT"</literal></expr>, <expr><literal type="string">"LOGIN"</literal></expr>, <expr><literal type="string">"NOBYPASSRLS"</literal></expr>,
			<expr><literal type="string">"NOCREATEDB"</literal></expr>, <expr><literal type="string">"NOCREATEROLE"</literal></expr>, <expr><literal type="string">"NOINHERIT"</literal></expr>,
			<expr><literal type="string">"NOLOGIN"</literal></expr>, <expr><literal type="string">"NOREPLICATION"</literal></expr>, <expr><literal type="string">"NOSUPERUSER"</literal></expr>, <expr><literal type="string">"PASSWORD"</literal></expr>,
			<expr><literal type="string">"REPLICATION"</literal></expr>, <expr><literal type="string">"ROLE"</literal></expr>, <expr><literal type="string">"SUPERUSER"</literal></expr>, <expr><literal type="string">"SYSID"</literal></expr>,
		<expr><literal type="string">"VALID UNTIL"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST</name><argument_list>(<argument><expr><name>list_CREATEROLE_WITH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>

	<comment type="block">/* complete CREATE ROLE,USER,GROUP &lt;name&gt; IN with ROLE,GROUP */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"ROLE|USER|GROUP"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"IN"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"GROUP"</literal></expr></argument>, <argument><expr><literal type="string">"ROLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* CREATE VIEW --- is allowed inside CREATE SCHEMA, so use TailMatches */</comment>
	<comment type="block">/* Complete CREATE VIEW &lt;name&gt; with AS */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches3</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"VIEW"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"AS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Complete "CREATE VIEW &lt;sth&gt; AS with "SELECT" */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches4</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"VIEW"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"AS"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"SELECT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* CREATE MATERIALIZED VIEW */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"MATERIALIZED"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"VIEW"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Complete CREATE MATERIALIZED VIEW &lt;name&gt; with AS */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"MATERIALIZED"</literal></expr></argument>, <argument><expr><literal type="string">"VIEW"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"AS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Complete "CREATE MATERIALIZED VIEW &lt;sth&gt; AS with "SELECT" */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"MATERIALIZED"</literal></expr></argument>, <argument><expr><literal type="string">"VIEW"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"AS"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"SELECT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* CREATE EVENT TRIGGER */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"EVENT"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Complete CREATE EVENT TRIGGER &lt;name&gt; with ON */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"EVENT"</literal></expr></argument>, <argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"ON"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Complete CREATE EVENT TRIGGER &lt;name&gt; ON with event_type */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"EVENT"</literal></expr></argument>, <argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST3</name><argument_list>(<argument><expr><literal type="string">"ddl_command_start"</literal></expr></argument>, <argument><expr><literal type="string">"ddl_command_end"</literal></expr></argument>, <argument><expr><literal type="string">"sql_drop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* DEALLOCATE */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches1</name><argument_list>(<argument><expr><literal type="string">"DEALLOCATE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_prepared_statements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* DECLARE */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"DECLARE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST5</name><argument_list>(<argument><expr><literal type="string">"BINARY"</literal></expr></argument>, <argument><expr><literal type="string">"INSENSITIVE"</literal></expr></argument>, <argument><expr><literal type="string">"SCROLL"</literal></expr></argument>, <argument><expr><literal type="string">"NO SCROLL"</literal></expr></argument>,
							<argument><expr><literal type="string">"CURSOR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>HeadMatches1</name><argument_list>(<argument><expr><literal type="string">"DECLARE"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>TailMatches1</name><argument_list>(<argument><expr><literal type="string">"CURSOR"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST3</name><argument_list>(<argument><expr><literal type="string">"WITH HOLD"</literal></expr></argument>, <argument><expr><literal type="string">"WITHOUT HOLD"</literal></expr></argument>, <argument><expr><literal type="string">"FOR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* DELETE --- can be inside EXPLAIN, RULE, etc */</comment>
	<comment type="block">/* ... despite which, only complete DELETE with FROM at start of line */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches1</name><argument_list>(<argument><expr><literal type="string">"DELETE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"FROM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Complete DELETE FROM with a list of tables */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches2</name><argument_list>(<argument><expr><literal type="string">"DELETE"</literal></expr></argument>, <argument><expr><literal type="string">"FROM"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_updatables</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Complete DELETE FROM &lt;table&gt; */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches3</name><argument_list>(<argument><expr><literal type="string">"DELETE"</literal></expr></argument>, <argument><expr><literal type="string">"FROM"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"USING"</literal></expr></argument>, <argument><expr><literal type="string">"WHERE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* XXX: implement tab completion for DELETE ... USING */</comment>

<comment type="block">/* DISCARD */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches1</name><argument_list>(<argument><expr><literal type="string">"DISCARD"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST4</name><argument_list>(<argument><expr><literal type="string">"ALL"</literal></expr></argument>, <argument><expr><literal type="string">"PLANS"</literal></expr></argument>, <argument><expr><literal type="string">"SEQUENCES"</literal></expr></argument>, <argument><expr><literal type="string">"TEMP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* DO */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches1</name><argument_list>(<argument><expr><literal type="string">"DO"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"LANGUAGE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* DROP */</comment>
	<comment type="block">/* Complete DROP object with CASCADE / RESTRICT */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"DROP"</literal></expr></argument>,
					  <argument><expr><literal type="string">"COLLATION|CONVERSION|DOMAIN|EXTENSION|LANGUAGE|PUBLICATION|SCHEMA|SEQUENCE|SERVER|SUBSCRIPTION|STATISTICS|TABLE|TABLEGROUP|TYPE|VIEW"</literal></expr></argument>,
					  <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"DROP"</literal></expr></argument>, <argument><expr><literal type="string">"ACCESS"</literal></expr></argument>, <argument><expr><literal type="string">"METHOD"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call> <operator>||</operator>
			 <operator>(</operator><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"DROP"</literal></expr></argument>, <argument><expr><literal type="string">"AGGREGATE|FUNCTION|PROCEDURE|ROUTINE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			  <call><name>ends_with</name><argument_list>(<argument><expr><name>prev_wd</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
			 <call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"DROP"</literal></expr></argument>, <argument><expr><literal type="string">"EVENT"</literal></expr></argument>, <argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"DROP"</literal></expr></argument>, <argument><expr><literal type="string">"FOREIGN"</literal></expr></argument>, <argument><expr><literal type="string">"DATA"</literal></expr></argument>, <argument><expr><literal type="string">"WRAPPER"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"DROP"</literal></expr></argument>, <argument><expr><literal type="string">"FOREIGN"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"DROP"</literal></expr></argument>, <argument><expr><literal type="string">"TEXT"</literal></expr></argument>, <argument><expr><literal type="string">"SEARCH"</literal></expr></argument>, <argument><expr><literal type="string">"CONFIGURATION|DICTIONARY|PARSER|TEMPLATE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"CASCADE"</literal></expr></argument>, <argument><expr><literal type="string">"RESTRICT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* help completing some of the variants */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"DROP"</literal></expr></argument>, <argument><expr><literal type="string">"AGGREGATE|FUNCTION|PROCEDURE|ROUTINE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"DROP"</literal></expr></argument>, <argument><expr><literal type="string">"AGGREGATE|FUNCTION|PROCEDURE|ROUTINE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_FUNCTION_ARG</name><argument_list>(<argument><expr><name>prev2_wd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"DROP"</literal></expr></argument>, <argument><expr><literal type="string">"FOREIGN"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"DATA WRAPPER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"DROP"</literal></expr></argument>, <argument><expr><literal type="string">"DATABASE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"WITH ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>HeadMatches2</name><argument_list>(<argument><expr><literal type="string">"DROP"</literal></expr></argument>, <argument><expr><literal type="string">"DATABASE"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>ends_with</name><argument_list>(<argument><expr><name>prev_wd</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"FORCE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* DROP INDEX */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"DROP"</literal></expr></argument>, <argument><expr><literal type="string">"INDEX"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_indexes</name></expr></argument>,
								   <argument><expr><literal type="string">" UNION SELECT 'CONCURRENTLY'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"DROP"</literal></expr></argument>, <argument><expr><literal type="string">"INDEX"</literal></expr></argument>, <argument><expr><literal type="string">"CONCURRENTLY"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_indexes</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"DROP"</literal></expr></argument>, <argument><expr><literal type="string">"INDEX"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"CASCADE"</literal></expr></argument>, <argument><expr><literal type="string">"RESTRICT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"DROP"</literal></expr></argument>, <argument><expr><literal type="string">"INDEX"</literal></expr></argument>, <argument><expr><literal type="string">"CONCURRENTLY"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"CASCADE"</literal></expr></argument>, <argument><expr><literal type="string">"RESTRICT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* DROP MATERIALIZED VIEW */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"DROP"</literal></expr></argument>, <argument><expr><literal type="string">"MATERIALIZED"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"VIEW"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"DROP"</literal></expr></argument>, <argument><expr><literal type="string">"MATERIALIZED"</literal></expr></argument>, <argument><expr><literal type="string">"VIEW"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_matviews</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* DROP OWNED BY */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"DROP"</literal></expr></argument>, <argument><expr><literal type="string">"OWNED"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"BY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"DROP"</literal></expr></argument>, <argument><expr><literal type="string">"OWNED"</literal></expr></argument>, <argument><expr><literal type="string">"BY"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_roles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* DROP TEXT SEARCH */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"DROP"</literal></expr></argument>, <argument><expr><literal type="string">"TEXT"</literal></expr></argument>, <argument><expr><literal type="string">"SEARCH"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST4</name><argument_list>(<argument><expr><literal type="string">"CONFIGURATION"</literal></expr></argument>, <argument><expr><literal type="string">"DICTIONARY"</literal></expr></argument>, <argument><expr><literal type="string">"PARSER"</literal></expr></argument>, <argument><expr><literal type="string">"TEMPLATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* DROP TRIGGER */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"DROP"</literal></expr></argument>, <argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"ON"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"DROP"</literal></expr></argument>, <argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>completion_info_charp</name> <operator>=</operator> <name>prev2_wd</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tables_for_trigger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"DROP"</literal></expr></argument>, <argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"CASCADE"</literal></expr></argument>, <argument><expr><literal type="string">"RESTRICT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* DROP ACCESS METHOD */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"DROP"</literal></expr></argument>, <argument><expr><literal type="string">"ACCESS"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"METHOD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"DROP"</literal></expr></argument>, <argument><expr><literal type="string">"ACCESS"</literal></expr></argument>, <argument><expr><literal type="string">"METHOD"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_access_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* DROP EVENT TRIGGER */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"DROP"</literal></expr></argument>, <argument><expr><literal type="string">"EVENT"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"DROP"</literal></expr></argument>, <argument><expr><literal type="string">"EVENT"</literal></expr></argument>, <argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_event_triggers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* DROP POLICY &lt;name&gt;  */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"DROP"</literal></expr></argument>, <argument><expr><literal type="string">"POLICY"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_policies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* DROP POLICY &lt;name&gt; ON */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"DROP"</literal></expr></argument>, <argument><expr><literal type="string">"POLICY"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"ON"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* DROP POLICY &lt;name&gt; ON &lt;table&gt; */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"DROP"</literal></expr></argument>, <argument><expr><literal type="string">"POLICY"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>completion_info_charp</name> <operator>=</operator> <name>prev2_wd</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tables_for_policy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>

	<comment type="block">/* DROP RULE */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"DROP"</literal></expr></argument>, <argument><expr><literal type="string">"RULE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"ON"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"DROP"</literal></expr></argument>, <argument><expr><literal type="string">"RULE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>completion_info_charp</name> <operator>=</operator> <name>prev2_wd</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tables_for_rule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"DROP"</literal></expr></argument>, <argument><expr><literal type="string">"RULE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"CASCADE"</literal></expr></argument>, <argument><expr><literal type="string">"RESTRICT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* EXECUTE */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches1</name><argument_list>(<argument><expr><literal type="string">"EXECUTE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_prepared_statements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* EXPLAIN */</comment>

	<comment type="block">/*
	 * Complete EXPLAIN [ANALYZE] [VERBOSE] with list of EXPLAIN-able commands
	 */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches1</name><argument_list>(<argument><expr><literal type="string">"EXPLAIN"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST7</name><argument_list>(<argument><expr><literal type="string">"SELECT"</literal></expr></argument>, <argument><expr><literal type="string">"INSERT"</literal></expr></argument>, <argument><expr><literal type="string">"DELETE"</literal></expr></argument>, <argument><expr><literal type="string">"UPDATE"</literal></expr></argument>, <argument><expr><literal type="string">"DECLARE"</literal></expr></argument>,
							<argument><expr><literal type="string">"ANALYZE"</literal></expr></argument>, <argument><expr><literal type="string">"VERBOSE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"EXPLAIN"</literal></expr></argument>, <argument><expr><literal type="string">"ANALYZE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST6</name><argument_list>(<argument><expr><literal type="string">"SELECT"</literal></expr></argument>, <argument><expr><literal type="string">"INSERT"</literal></expr></argument>, <argument><expr><literal type="string">"DELETE"</literal></expr></argument>, <argument><expr><literal type="string">"UPDATE"</literal></expr></argument>, <argument><expr><literal type="string">"DECLARE"</literal></expr></argument>,
							<argument><expr><literal type="string">"VERBOSE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"EXPLAIN"</literal></expr></argument>, <argument><expr><literal type="string">"VERBOSE"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"EXPLAIN"</literal></expr></argument>, <argument><expr><literal type="string">"ANALYZE"</literal></expr></argument>, <argument><expr><literal type="string">"VERBOSE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST5</name><argument_list>(<argument><expr><literal type="string">"SELECT"</literal></expr></argument>, <argument><expr><literal type="string">"INSERT"</literal></expr></argument>, <argument><expr><literal type="string">"DELETE"</literal></expr></argument>, <argument><expr><literal type="string">"UPDATE"</literal></expr></argument>, <argument><expr><literal type="string">"DECLARE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* FETCH &amp;&amp; MOVE */</comment>
	<comment type="block">/* Complete FETCH with one of FORWARD, BACKWARD, RELATIVE */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches1</name><argument_list>(<argument><expr><literal type="string">"FETCH|MOVE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST4</name><argument_list>(<argument><expr><literal type="string">"ABSOLUTE"</literal></expr></argument>, <argument><expr><literal type="string">"BACKWARD"</literal></expr></argument>, <argument><expr><literal type="string">"FORWARD"</literal></expr></argument>, <argument><expr><literal type="string">"RELATIVE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Complete FETCH &lt;sth&gt; with one of ALL, NEXT, PRIOR */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"FETCH|MOVE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST3</name><argument_list>(<argument><expr><literal type="string">"ALL"</literal></expr></argument>, <argument><expr><literal type="string">"NEXT"</literal></expr></argument>, <argument><expr><literal type="string">"PRIOR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/*
	 * Complete FETCH &lt;sth1&gt; &lt;sth2&gt; with "FROM" or "IN". These are equivalent,
	 * but we may as well tab-complete both: perhaps some users prefer one
	 * variant or the other.
	 */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"FETCH|MOVE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"FROM"</literal></expr></argument>, <argument><expr><literal type="string">"IN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* FOREIGN DATA WRAPPER */</comment>
	<comment type="block">/* applies in ALTER/DROP FDW and in CREATE SERVER */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches3</name><argument_list>(<argument><expr><literal type="string">"FOREIGN"</literal></expr></argument>, <argument><expr><literal type="string">"DATA"</literal></expr></argument>, <argument><expr><literal type="string">"WRAPPER"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			 <operator>!</operator><call><name>TailMatches4</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_fdws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* applies in CREATE SERVER */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches4</name><argument_list>(<argument><expr><literal type="string">"FOREIGN"</literal></expr></argument>, <argument><expr><literal type="string">"DATA"</literal></expr></argument>, <argument><expr><literal type="string">"WRAPPER"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			 <call><name>HeadMatches2</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"SERVER"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"OPTIONS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* FOREIGN TABLE */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches2</name><argument_list>(<argument><expr><literal type="string">"FOREIGN"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			 <operator>!</operator><call><name>TailMatches3</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_foreign_tables</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* FOREIGN SERVER */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches2</name><argument_list>(<argument><expr><literal type="string">"FOREIGN"</literal></expr></argument>, <argument><expr><literal type="string">"SERVER"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_servers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/*
 * GRANT and REVOKE are allowed inside CREATE SCHEMA and
 * ALTER DEFAULT PRIVILEGES, so use TailMatches
 */</comment>
	<comment type="block">/* Complete GRANT/REVOKE with a list of roles and privileges */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches1</name><argument_list>(<argument><expr><literal type="string">"GRANT|REVOKE"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * With ALTER DEFAULT PRIVILEGES, restrict completion to grantable
		 * privileges (can't grant roles)
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>HeadMatches3</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"DEFAULT"</literal></expr></argument>, <argument><expr><literal type="string">"PRIVILEGES"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_LIST10</name><argument_list>(<argument><expr><literal type="string">"SELECT"</literal></expr></argument>, <argument><expr><literal type="string">"INSERT"</literal></expr></argument>, <argument><expr><literal type="string">"UPDATE"</literal></expr></argument>,
								 <argument><expr><literal type="string">"DELETE"</literal></expr></argument>, <argument><expr><literal type="string">"TRUNCATE"</literal></expr></argument>, <argument><expr><literal type="string">"REFERENCES"</literal></expr></argument>, <argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>,
								 <argument><expr><literal type="string">"EXECUTE"</literal></expr></argument>, <argument><expr><literal type="string">"USAGE"</literal></expr></argument>, <argument><expr><literal type="string">"ALL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_roles</name>
								<literal type="string">" UNION SELECT 'SELECT'"</literal>
								<literal type="string">" UNION SELECT 'INSERT'"</literal>
								<literal type="string">" UNION SELECT 'UPDATE'"</literal>
								<literal type="string">" UNION SELECT 'DELETE'"</literal>
								<literal type="string">" UNION SELECT 'TRUNCATE'"</literal>
								<literal type="string">" UNION SELECT 'REFERENCES'"</literal>
								<literal type="string">" UNION SELECT 'TRIGGER'"</literal>
								<literal type="string">" UNION SELECT 'CREATE'"</literal>
								<literal type="string">" UNION SELECT 'CONNECT'"</literal>
								<literal type="string">" UNION SELECT 'TEMPORARY'"</literal>
								<literal type="string">" UNION SELECT 'EXECUTE'"</literal>
								<literal type="string">" UNION SELECT 'USAGE'"</literal>
								<literal type="string">" UNION SELECT 'ALL'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>

	<comment type="block">/*
	 * Complete GRANT/REVOKE &lt;privilege&gt; with "ON", GRANT/REVOKE &lt;role&gt; with
	 * TO/FROM
	 */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches2</name><argument_list>(<argument><expr><literal type="string">"GRANT|REVOKE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>TailMatches1</name><argument_list>(<argument><expr><literal type="string">"SELECT|INSERT|UPDATE|DELETE|TRUNCATE|REFERENCES|TRIGGER|CREATE|CONNECT|TEMPORARY|TEMP|EXECUTE|USAGE|ALL"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"ON"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>TailMatches2</name><argument_list>(<argument><expr><literal type="string">"GRANT"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"TO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"FROM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>

	<comment type="block">/*
	 * Complete GRANT/REVOKE &lt;sth&gt; ON with a list of tables, views, and
	 * sequences.
	 *
	 * Keywords like DATABASE, FUNCTION, LANGUAGE and SCHEMA added to query
	 * result via UNION; seems to work intuitively.
	 *
	 * Note: GRANT/REVOKE can get quite complex; tab-completion as implemented
	 * here will only work if the privilege list contains exactly one
	 * privilege.
	 */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches3</name><argument_list>(<argument><expr><literal type="string">"GRANT|REVOKE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * With ALTER DEFAULT PRIVILEGES, restrict completion to the kinds of
		 * objects supported.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>HeadMatches3</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"DEFAULT"</literal></expr></argument>, <argument><expr><literal type="string">"PRIVILEGES"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_LIST7</name><argument_list>(<argument><expr><literal type="string">"TABLES"</literal></expr></argument>, <argument><expr><literal type="string">"SEQUENCES"</literal></expr></argument>, <argument><expr><literal type="string">"FUNCTIONS"</literal></expr></argument>, <argument><expr><literal type="string">"PROCEDURES"</literal></expr></argument>, <argument><expr><literal type="string">"ROUTINES"</literal></expr></argument>, <argument><expr><literal type="string">"TYPES"</literal></expr></argument>, <argument><expr><literal type="string">"SCHEMAS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tsvmf</name></expr></argument>,
									   <argument><expr><literal type="string">" UNION SELECT 'ALL FUNCTIONS IN SCHEMA'"</literal>
									   <literal type="string">" UNION SELECT 'ALL PROCEDURES IN SCHEMA'"</literal>
									   <literal type="string">" UNION SELECT 'ALL ROUTINES IN SCHEMA'"</literal>
									   <literal type="string">" UNION SELECT 'ALL SEQUENCES IN SCHEMA'"</literal>
									   <literal type="string">" UNION SELECT 'ALL TABLES IN SCHEMA'"</literal>
									   <literal type="string">" UNION SELECT 'DATABASE'"</literal>
									   <literal type="string">" UNION SELECT 'DOMAIN'"</literal>
									   <literal type="string">" UNION SELECT 'FOREIGN DATA WRAPPER'"</literal>
									   <literal type="string">" UNION SELECT 'FOREIGN SERVER'"</literal>
									   <literal type="string">" UNION SELECT 'FUNCTION'"</literal>
									   <literal type="string">" UNION SELECT 'LANGUAGE'"</literal>
									   <literal type="string">" UNION SELECT 'LARGE OBJECT'"</literal>
									   <literal type="string">" UNION SELECT 'PROCEDURE'"</literal>
									   <literal type="string">" UNION SELECT 'ROUTINE'"</literal>
									   <literal type="string">" UNION SELECT 'SCHEMA'"</literal>
									   <literal type="string">" UNION SELECT 'SEQUENCE'"</literal>
									   <literal type="string">" UNION SELECT 'TABLE'"</literal>
									   <literal type="string">" UNION SELECT 'TABLESPACE'"</literal>
									   <literal type="string">" UNION SELECT 'TYPE'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches4</name><argument_list>(<argument><expr><literal type="string">"GRANT|REVOKE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><literal type="string">"ALL"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST5</name><argument_list>(<argument><expr><literal type="string">"FUNCTIONS IN SCHEMA"</literal></expr></argument>,
							<argument><expr><literal type="string">"PROCEDURES IN SCHEMA"</literal></expr></argument>,
							<argument><expr><literal type="string">"ROUTINES IN SCHEMA"</literal></expr></argument>,
							<argument><expr><literal type="string">"SEQUENCES IN SCHEMA"</literal></expr></argument>,
							<argument><expr><literal type="string">"TABLES IN SCHEMA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches4</name><argument_list>(<argument><expr><literal type="string">"GRANT|REVOKE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><literal type="string">"FOREIGN"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"DATA WRAPPER"</literal></expr></argument>, <argument><expr><literal type="string">"SERVER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/*
	 * Complete "GRANT/REVOKE * ON DATABASE/DOMAIN/..." with a list of
	 * appropriate objects.
	 *
	 * Complete "GRANT/REVOKE * ON *" with "TO/FROM".
	 */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches4</name><argument_list>(<argument><expr><literal type="string">"GRANT|REVOKE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>TailMatches1</name><argument_list>(<argument><expr><literal type="string">"DATABASE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_databases</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>TailMatches1</name><argument_list>(<argument><expr><literal type="string">"DOMAIN"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_domains</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>TailMatches1</name><argument_list>(<argument><expr><literal type="string">"FUNCTION"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_VERSIONED_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_functions</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>TailMatches1</name><argument_list>(<argument><expr><literal type="string">"LANGUAGE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_languages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>TailMatches1</name><argument_list>(<argument><expr><literal type="string">"PROCEDURE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_VERSIONED_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_procedures</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>TailMatches1</name><argument_list>(<argument><expr><literal type="string">"ROUTINE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_routines</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>TailMatches1</name><argument_list>(<argument><expr><literal type="string">"SCHEMA"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_schemas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>TailMatches1</name><argument_list>(<argument><expr><literal type="string">"SEQUENCE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_sequences</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>TailMatches1</name><argument_list>(<argument><expr><literal type="string">"TABLE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tsvmf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>TailMatches1</name><argument_list>(<argument><expr><literal type="string">"TABLEGROUP"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tablegroups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>TailMatches1</name><argument_list>(<argument><expr><literal type="string">"TABLESPACE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tablespaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>TailMatches1</name><argument_list>(<argument><expr><literal type="string">"TYPE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_datatypes</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>TailMatches4</name><argument_list>(<argument><expr><literal type="string">"GRANT"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"TO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"FROM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>

	<comment type="block">/*
	 * Complete "GRANT/REVOKE ... TO/FROM" with username, PUBLIC,
	 * CURRENT_USER, or SESSION_USER.
	 */</comment>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>HeadMatches1</name><argument_list>(<argument><expr><literal type="string">"GRANT"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>TailMatches1</name><argument_list>(<argument><expr><literal type="string">"TO"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
			 <operator>(</operator><call><name>HeadMatches1</name><argument_list>(<argument><expr><literal type="string">"REVOKE"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>TailMatches1</name><argument_list>(<argument><expr><literal type="string">"FROM"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_grant_roles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Complete "ALTER DEFAULT PRIVILEGES ... GRANT/REVOKE ... TO/FROM */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>HeadMatches3</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"DEFAULT"</literal></expr></argument>, <argument><expr><literal type="string">"PRIVILEGES"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>TailMatches1</name><argument_list>(<argument><expr><literal type="string">"TO|FROM"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_grant_roles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Complete "GRANT/REVOKE ... ON * *" with TO/FROM */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>HeadMatches1</name><argument_list>(<argument><expr><literal type="string">"GRANT"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>TailMatches3</name><argument_list>(<argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"TO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>HeadMatches1</name><argument_list>(<argument><expr><literal type="string">"REVOKE"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>TailMatches3</name><argument_list>(<argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"FROM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* Complete "GRANT/REVOKE * ON ALL * IN SCHEMA *" with TO/FROM */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches8</name><argument_list>(<argument><expr><literal type="string">"GRANT|REVOKE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><literal type="string">"ALL"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"IN"</literal></expr></argument>, <argument><expr><literal type="string">"SCHEMA"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>TailMatches8</name><argument_list>(<argument><expr><literal type="string">"GRANT"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"TO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"FROM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>

	<comment type="block">/* Complete "GRANT/REVOKE * ON FOREIGN DATA WRAPPER *" with TO/FROM */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches7</name><argument_list>(<argument><expr><literal type="string">"GRANT|REVOKE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><literal type="string">"FOREIGN"</literal></expr></argument>, <argument><expr><literal type="string">"DATA"</literal></expr></argument>, <argument><expr><literal type="string">"WRAPPER"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>TailMatches7</name><argument_list>(<argument><expr><literal type="string">"GRANT"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"TO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"FROM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>

	<comment type="block">/* Complete "GRANT/REVOKE * ON FOREIGN SERVER *" with TO/FROM */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches6</name><argument_list>(<argument><expr><literal type="string">"GRANT|REVOKE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><literal type="string">"FOREIGN"</literal></expr></argument>, <argument><expr><literal type="string">"SERVER"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>TailMatches6</name><argument_list>(<argument><expr><literal type="string">"GRANT"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"TO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"FROM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>

<comment type="block">/* GROUP BY */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches3</name><argument_list>(<argument><expr><literal type="string">"FROM"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"GROUP"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"BY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* IMPORT FOREIGN SCHEMA */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches1</name><argument_list>(<argument><expr><literal type="string">"IMPORT"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"FOREIGN SCHEMA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"IMPORT"</literal></expr></argument>, <argument><expr><literal type="string">"FOREIGN"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"SCHEMA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* INSERT --- can be inside EXPLAIN, RULE, etc */</comment>
	<comment type="block">/* Complete INSERT with "INTO" */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches1</name><argument_list>(<argument><expr><literal type="string">"INSERT"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"INTO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Complete INSERT INTO with table names */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches2</name><argument_list>(<argument><expr><literal type="string">"INSERT"</literal></expr></argument>, <argument><expr><literal type="string">"INTO"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_updatables</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Complete "INSERT INTO &lt;table&gt; (" with attribute names */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches4</name><argument_list>(<argument><expr><literal type="string">"INSERT"</literal></expr></argument>, <argument><expr><literal type="string">"INTO"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_ATTR</name><argument_list>(<argument><expr><name>prev2_wd</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/*
	 * Complete INSERT INTO &lt;table&gt; with "(" or "VALUES" or "SELECT" or
	 * "TABLE" or "DEFAULT VALUES" or "OVERRIDING"
	 */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches3</name><argument_list>(<argument><expr><literal type="string">"INSERT"</literal></expr></argument>, <argument><expr><literal type="string">"INTO"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST6</name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>, <argument><expr><literal type="string">"DEFAULT VALUES"</literal></expr></argument>, <argument><expr><literal type="string">"SELECT"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><literal type="string">"VALUES"</literal></expr></argument>, <argument><expr><literal type="string">"OVERRIDING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/*
	 * Complete INSERT INTO &lt;table&gt; (attribs) with "VALUES" or "SELECT" or
	 * "TABLE" or "OVERRIDING"
	 */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches4</name><argument_list>(<argument><expr><literal type="string">"INSERT"</literal></expr></argument>, <argument><expr><literal type="string">"INTO"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			 <call><name>ends_with</name><argument_list>(<argument><expr><name>prev_wd</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST4</name><argument_list>(<argument><expr><literal type="string">"SELECT"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><literal type="string">"VALUES"</literal></expr></argument>, <argument><expr><literal type="string">"OVERRIDING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* Complete OVERRIDING */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches1</name><argument_list>(<argument><expr><literal type="string">"OVERRIDING"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"SYSTEM VALUE"</literal></expr></argument>, <argument><expr><literal type="string">"USER VALUE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* Complete after OVERRIDING clause */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches3</name><argument_list>(<argument><expr><literal type="string">"OVERRIDING"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"VALUE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST3</name><argument_list>(<argument><expr><literal type="string">"SELECT"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><literal type="string">"VALUES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* Insert an open parenthesis after "VALUES" */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches1</name><argument_list>(<argument><expr><literal type="string">"VALUES"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>TailMatches2</name><argument_list>(<argument><expr><literal type="string">"DEFAULT"</literal></expr></argument>, <argument><expr><literal type="string">"VALUES"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* LOCK */</comment>
	<comment type="block">/* Complete LOCK [TABLE] with a list of tables */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches1</name><argument_list>(<argument><expr><literal type="string">"LOCK"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tables</name></expr></argument>,
								   <argument><expr><literal type="string">" UNION SELECT 'TABLE'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"LOCK"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tables</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* For the following, handle the case of a single table only for now */</comment>

	<comment type="block">/* Complete LOCK [TABLE] &lt;table&gt; with "IN" */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"LOCK"</literal></expr></argument>, <argument><expr><call><name>MatchAnyExcept</name><argument_list>(<argument><expr><literal type="string">"TABLE"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"LOCK"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"IN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* Complete LOCK [TABLE] &lt;table&gt; IN with a lock mode */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"LOCK"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"IN"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"LOCK"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"IN"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST8</name><argument_list>(<argument><expr><literal type="string">"ACCESS SHARE MODE"</literal></expr></argument>,
							<argument><expr><literal type="string">"ROW SHARE MODE"</literal></expr></argument>, <argument><expr><literal type="string">"ROW EXCLUSIVE MODE"</literal></expr></argument>,
							<argument><expr><literal type="string">"SHARE UPDATE EXCLUSIVE MODE"</literal></expr></argument>, <argument><expr><literal type="string">"SHARE MODE"</literal></expr></argument>,
							<argument><expr><literal type="string">"SHARE ROW EXCLUSIVE MODE"</literal></expr></argument>,
							<argument><expr><literal type="string">"EXCLUSIVE MODE"</literal></expr></argument>, <argument><expr><literal type="string">"ACCESS EXCLUSIVE MODE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* Complete LOCK [TABLE] &lt;table&gt; IN ACCESS|ROW with rest of lock mode */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"LOCK"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"IN"</literal></expr></argument>, <argument><expr><literal type="string">"ACCESS|ROW"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"LOCK"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"IN"</literal></expr></argument>, <argument><expr><literal type="string">"ACCESS|ROW"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"EXCLUSIVE MODE"</literal></expr></argument>, <argument><expr><literal type="string">"SHARE MODE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* Complete LOCK [TABLE] &lt;table&gt; IN SHARE with rest of lock mode */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"LOCK"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"IN"</literal></expr></argument>, <argument><expr><literal type="string">"SHARE"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"LOCK"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"IN"</literal></expr></argument>, <argument><expr><literal type="string">"SHARE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST3</name><argument_list>(<argument><expr><literal type="string">"MODE"</literal></expr></argument>, <argument><expr><literal type="string">"ROW EXCLUSIVE MODE"</literal></expr></argument>,
							<argument><expr><literal type="string">"UPDATE EXCLUSIVE MODE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* NOTIFY --- can be inside EXPLAIN, RULE, etc */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches1</name><argument_list>(<argument><expr><literal type="string">"NOTIFY"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><literal type="string">"SELECT pg_catalog.quote_ident(channel) FROM pg_catalog.pg_listening_channels() AS channel WHERE substring(pg_catalog.quote_ident(channel),1,%d)='%s'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* OPTIONS */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches1</name><argument_list>(<argument><expr><literal type="string">"OPTIONS"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* OWNER TO  - complete with available roles */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches2</name><argument_list>(<argument><expr><literal type="string">"OWNER"</literal></expr></argument>, <argument><expr><literal type="string">"TO"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_roles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* OWNER  - complete with available roles */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches1</name><argument_list>(<argument><expr><literal type="string">"OWNER"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_roles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* ORDER BY */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches3</name><argument_list>(<argument><expr><literal type="string">"FROM"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ORDER"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"BY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches4</name><argument_list>(<argument><expr><literal type="string">"FROM"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ORDER"</literal></expr></argument>, <argument><expr><literal type="string">"BY"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_ATTR</name><argument_list>(<argument><expr><name>prev3_wd</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* PREPARE xx AS */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"PREPARE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"AS"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST4</name><argument_list>(<argument><expr><literal type="string">"SELECT"</literal></expr></argument>, <argument><expr><literal type="string">"UPDATE"</literal></expr></argument>, <argument><expr><literal type="string">"INSERT"</literal></expr></argument>, <argument><expr><literal type="string">"DELETE FROM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/*
 * PREPARE TRANSACTION is missing on purpose. It's intended for transaction
 * managers, not for manual use in interactive sessions.
 */</comment>

<comment type="block">/* REASSIGN OWNED BY xxx TO yyy */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches1</name><argument_list>(<argument><expr><literal type="string">"REASSIGN"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"OWNED BY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"REASSIGN"</literal></expr></argument>, <argument><expr><literal type="string">"OWNED"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"BY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"REASSIGN"</literal></expr></argument>, <argument><expr><literal type="string">"OWNED"</literal></expr></argument>, <argument><expr><literal type="string">"BY"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_roles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"REASSIGN"</literal></expr></argument>, <argument><expr><literal type="string">"OWNED"</literal></expr></argument>, <argument><expr><literal type="string">"BY"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"TO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"REASSIGN"</literal></expr></argument>, <argument><expr><literal type="string">"OWNED"</literal></expr></argument>, <argument><expr><literal type="string">"BY"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"TO"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_roles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* REFRESH MATERIALIZED VIEW */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches1</name><argument_list>(<argument><expr><literal type="string">"REFRESH"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"MATERIALIZED VIEW"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"REFRESH"</literal></expr></argument>, <argument><expr><literal type="string">"MATERIALIZED"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"VIEW"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"REFRESH"</literal></expr></argument>, <argument><expr><literal type="string">"MATERIALIZED"</literal></expr></argument>, <argument><expr><literal type="string">"VIEW"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_matviews</name></expr></argument>,
								   <argument><expr><literal type="string">" UNION SELECT 'CONCURRENTLY'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"REFRESH"</literal></expr></argument>, <argument><expr><literal type="string">"MATERIALIZED"</literal></expr></argument>, <argument><expr><literal type="string">"VIEW"</literal></expr></argument>, <argument><expr><literal type="string">"CONCURRENTLY"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_matviews</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"REFRESH"</literal></expr></argument>, <argument><expr><literal type="string">"MATERIALIZED"</literal></expr></argument>, <argument><expr><literal type="string">"VIEW"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"WITH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"REFRESH"</literal></expr></argument>, <argument><expr><literal type="string">"MATERIALIZED"</literal></expr></argument>, <argument><expr><literal type="string">"VIEW"</literal></expr></argument>, <argument><expr><literal type="string">"CONCURRENTLY"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"WITH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"REFRESH"</literal></expr></argument>, <argument><expr><literal type="string">"MATERIALIZED"</literal></expr></argument>, <argument><expr><literal type="string">"VIEW"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"WITH"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"NO DATA"</literal></expr></argument>, <argument><expr><literal type="string">"DATA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches6</name><argument_list>(<argument><expr><literal type="string">"REFRESH"</literal></expr></argument>, <argument><expr><literal type="string">"MATERIALIZED"</literal></expr></argument>, <argument><expr><literal type="string">"VIEW"</literal></expr></argument>, <argument><expr><literal type="string">"CONCURRENTLY"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"WITH"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"NO DATA"</literal></expr></argument>, <argument><expr><literal type="string">"DATA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches6</name><argument_list>(<argument><expr><literal type="string">"REFRESH"</literal></expr></argument>, <argument><expr><literal type="string">"MATERIALIZED"</literal></expr></argument>, <argument><expr><literal type="string">"VIEW"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"WITH"</literal></expr></argument>, <argument><expr><literal type="string">"NO"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"DATA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches7</name><argument_list>(<argument><expr><literal type="string">"REFRESH"</literal></expr></argument>, <argument><expr><literal type="string">"MATERIALIZED"</literal></expr></argument>, <argument><expr><literal type="string">"VIEW"</literal></expr></argument>, <argument><expr><literal type="string">"CONCURRENTLY"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"WITH"</literal></expr></argument>, <argument><expr><literal type="string">"NO"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"DATA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* REINDEX */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches1</name><argument_list>(<argument><expr><literal type="string">"REINDEX"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST5</name><argument_list>(<argument><expr><literal type="string">"TABLE"</literal></expr></argument>, <argument><expr><literal type="string">"INDEX"</literal></expr></argument>, <argument><expr><literal type="string">"SYSTEM"</literal></expr></argument>, <argument><expr><literal type="string">"SCHEMA"</literal></expr></argument>, <argument><expr><literal type="string">"DATABASE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"REINDEX"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tm</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"REINDEX"</literal></expr></argument>, <argument><expr><literal type="string">"INDEX"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_indexes</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"REINDEX"</literal></expr></argument>, <argument><expr><literal type="string">"SCHEMA"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_schemas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"REINDEX"</literal></expr></argument>, <argument><expr><literal type="string">"SYSTEM|DATABASE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_databases</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* SECURITY LABEL */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches1</name><argument_list>(<argument><expr><literal type="string">"SECURITY"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"LABEL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"SECURITY"</literal></expr></argument>, <argument><expr><literal type="string">"LABEL"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><literal type="string">"FOR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"SECURITY"</literal></expr></argument>, <argument><expr><literal type="string">"LABEL"</literal></expr></argument>, <argument><expr><literal type="string">"FOR"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"ON"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"SECURITY"</literal></expr></argument>, <argument><expr><literal type="string">"LABEL"</literal></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"SECURITY"</literal></expr></argument>, <argument><expr><literal type="string">"LABEL"</literal></expr></argument>, <argument><expr><literal type="string">"FOR"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>list_SECURITY_LABEL</name><index>[]</index></name> <init>=
		<expr><block>{<expr><literal type="string">"TABLE"</literal></expr>, <expr><literal type="string">"COLUMN"</literal></expr>, <expr><literal type="string">"AGGREGATE"</literal></expr>, <expr><literal type="string">"DATABASE"</literal></expr>, <expr><literal type="string">"DOMAIN"</literal></expr>,
			<expr><literal type="string">"EVENT TRIGGER"</literal></expr>, <expr><literal type="string">"FOREIGN TABLE"</literal></expr>, <expr><literal type="string">"FUNCTION"</literal></expr>, <expr><literal type="string">"LARGE OBJECT"</literal></expr>,
			<expr><literal type="string">"MATERIALIZED VIEW"</literal></expr>, <expr><literal type="string">"LANGUAGE"</literal></expr>, <expr><literal type="string">"PUBLICATION"</literal></expr>, <expr><literal type="string">"PROCEDURE"</literal></expr>, <expr><literal type="string">"ROLE"</literal></expr>, <expr><literal type="string">"ROUTINE"</literal></expr>, <expr><literal type="string">"SCHEMA"</literal></expr>,
		<expr><literal type="string">"SEQUENCE"</literal></expr>, <expr><literal type="string">"SUBSCRIPTION"</literal></expr>, <expr><literal type="string">"TABLESPACE"</literal></expr>, <expr><literal type="string">"TYPE"</literal></expr>, <expr><literal type="string">"VIEW"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST</name><argument_list>(<argument><expr><name>list_SECURITY_LABEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"SECURITY"</literal></expr></argument>, <argument><expr><literal type="string">"LABEL"</literal></expr></argument>, <argument><expr><literal type="string">"ON"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"IS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* SELECT */</comment>
	<comment type="block">/* naah . . . */</comment>

<comment type="block">/* SET, RESET, SHOW */</comment>
	<comment type="block">/* Complete with a variable name */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches1</name><argument_list>(<argument><expr><literal type="string">"SET|RESET"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>TailMatches3</name><argument_list>(<argument><expr><literal type="string">"UPDATE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"SET"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_set_vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches1</name><argument_list>(<argument><expr><literal type="string">"SHOW"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_show_vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Complete "SET TRANSACTION" */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"SET"</literal></expr></argument>, <argument><expr><literal type="string">"TRANSACTION"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST5</name><argument_list>(<argument><expr><literal type="string">"SNAPSHOT"</literal></expr></argument>, <argument><expr><literal type="string">"ISOLATION LEVEL"</literal></expr></argument>, <argument><expr><literal type="string">"READ"</literal></expr></argument>, <argument><expr><literal type="string">"DEFERRABLE"</literal></expr></argument>, <argument><expr><literal type="string">"NOT DEFERRABLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"BEGIN|START"</literal></expr></argument>, <argument><expr><literal type="string">"TRANSACTION"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>, <argument><expr><literal type="string">"WORK"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>Matches1</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"SET"</literal></expr></argument>, <argument><expr><literal type="string">"SESSION"</literal></expr></argument>, <argument><expr><literal type="string">"CHARACTERISTICS"</literal></expr></argument>, <argument><expr><literal type="string">"AS"</literal></expr></argument>, <argument><expr><literal type="string">"TRANSACTION"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST4</name><argument_list>(<argument><expr><literal type="string">"ISOLATION LEVEL"</literal></expr></argument>, <argument><expr><literal type="string">"READ"</literal></expr></argument>, <argument><expr><literal type="string">"DEFERRABLE"</literal></expr></argument>, <argument><expr><literal type="string">"NOT DEFERRABLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"SET|BEGIN|START"</literal></expr></argument>, <argument><expr><literal type="string">"TRANSACTION|WORK"</literal></expr></argument>, <argument><expr><literal type="string">"NOT"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>, <argument><expr><literal type="string">"NOT"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>Matches6</name><argument_list>(<argument><expr><literal type="string">"SET"</literal></expr></argument>, <argument><expr><literal type="string">"SESSION"</literal></expr></argument>, <argument><expr><literal type="string">"CHARACTERISTICS"</literal></expr></argument>, <argument><expr><literal type="string">"AS"</literal></expr></argument>, <argument><expr><literal type="string">"TRANSACTION"</literal></expr></argument>, <argument><expr><literal type="string">"NOT"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"DEFERRABLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"SET|BEGIN|START"</literal></expr></argument>, <argument><expr><literal type="string">"TRANSACTION|WORK"</literal></expr></argument>, <argument><expr><literal type="string">"ISOLATION"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>, <argument><expr><literal type="string">"ISOLATION"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>Matches6</name><argument_list>(<argument><expr><literal type="string">"SET"</literal></expr></argument>, <argument><expr><literal type="string">"SESSION"</literal></expr></argument>, <argument><expr><literal type="string">"CHARACTERISTICS"</literal></expr></argument>, <argument><expr><literal type="string">"AS"</literal></expr></argument>, <argument><expr><literal type="string">"TRANSACTION"</literal></expr></argument>, <argument><expr><literal type="string">"ISOLATION"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"LEVEL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"SET|BEGIN|START"</literal></expr></argument>, <argument><expr><literal type="string">"TRANSACTION|WORK"</literal></expr></argument>, <argument><expr><literal type="string">"ISOLATION"</literal></expr></argument>, <argument><expr><literal type="string">"LEVEL"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>, <argument><expr><literal type="string">"ISOLATION"</literal></expr></argument>, <argument><expr><literal type="string">"LEVEL"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>Matches7</name><argument_list>(<argument><expr><literal type="string">"SET"</literal></expr></argument>, <argument><expr><literal type="string">"SESSION"</literal></expr></argument>, <argument><expr><literal type="string">"CHARACTERISTICS"</literal></expr></argument>, <argument><expr><literal type="string">"AS"</literal></expr></argument>, <argument><expr><literal type="string">"TRANSACTION"</literal></expr></argument>, <argument><expr><literal type="string">"ISOLATION"</literal></expr></argument>, <argument><expr><literal type="string">"LEVEL"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST3</name><argument_list>(<argument><expr><literal type="string">"READ"</literal></expr></argument>, <argument><expr><literal type="string">"REPEATABLE READ"</literal></expr></argument>, <argument><expr><literal type="string">"SERIALIZABLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"SET|BEGIN|START"</literal></expr></argument>, <argument><expr><literal type="string">"TRANSACTION|WORK"</literal></expr></argument>, <argument><expr><literal type="string">"ISOLATION"</literal></expr></argument>, <argument><expr><literal type="string">"LEVEL"</literal></expr></argument>, <argument><expr><literal type="string">"READ"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>, <argument><expr><literal type="string">"ISOLATION"</literal></expr></argument>, <argument><expr><literal type="string">"LEVEL"</literal></expr></argument>, <argument><expr><literal type="string">"READ"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>Matches8</name><argument_list>(<argument><expr><literal type="string">"SET"</literal></expr></argument>, <argument><expr><literal type="string">"SESSION"</literal></expr></argument>, <argument><expr><literal type="string">"CHARACTERISTICS"</literal></expr></argument>, <argument><expr><literal type="string">"AS"</literal></expr></argument>, <argument><expr><literal type="string">"TRANSACTION"</literal></expr></argument>, <argument><expr><literal type="string">"ISOLATION"</literal></expr></argument>, <argument><expr><literal type="string">"LEVEL"</literal></expr></argument>, <argument><expr><literal type="string">"READ"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"UNCOMMITTED"</literal></expr></argument>, <argument><expr><literal type="string">"COMMITTED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"SET|BEGIN|START"</literal></expr></argument>, <argument><expr><literal type="string">"TRANSACTION|WORK"</literal></expr></argument>, <argument><expr><literal type="string">"ISOLATION"</literal></expr></argument>, <argument><expr><literal type="string">"LEVEL"</literal></expr></argument>, <argument><expr><literal type="string">"REPEATABLE"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>, <argument><expr><literal type="string">"ISOLATION"</literal></expr></argument>, <argument><expr><literal type="string">"LEVEL"</literal></expr></argument>, <argument><expr><literal type="string">"REPEATABLE"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>Matches8</name><argument_list>(<argument><expr><literal type="string">"SET"</literal></expr></argument>, <argument><expr><literal type="string">"SESSION"</literal></expr></argument>, <argument><expr><literal type="string">"CHARACTERISTICS"</literal></expr></argument>, <argument><expr><literal type="string">"AS"</literal></expr></argument>, <argument><expr><literal type="string">"TRANSACTION"</literal></expr></argument>, <argument><expr><literal type="string">"ISOLATION"</literal></expr></argument>, <argument><expr><literal type="string">"LEVEL"</literal></expr></argument>, <argument><expr><literal type="string">"REPEATABLE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"READ"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"SET|BEGIN|START"</literal></expr></argument>, <argument><expr><literal type="string">"TRANSACTION|WORK"</literal></expr></argument>, <argument><expr><literal type="string">"READ"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>, <argument><expr><literal type="string">"READ"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
			 <call><name>Matches6</name><argument_list>(<argument><expr><literal type="string">"SET"</literal></expr></argument>, <argument><expr><literal type="string">"SESSION"</literal></expr></argument>, <argument><expr><literal type="string">"CHARACTERISTICS"</literal></expr></argument>, <argument><expr><literal type="string">"AS"</literal></expr></argument>, <argument><expr><literal type="string">"TRANSACTION"</literal></expr></argument>, <argument><expr><literal type="string">"READ"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"ONLY"</literal></expr></argument>, <argument><expr><literal type="string">"WRITE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* SET CONSTRAINTS */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"SET"</literal></expr></argument>, <argument><expr><literal type="string">"CONSTRAINTS"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_constraints_with_schema</name></expr></argument>, <argument><expr><literal type="string">"UNION SELECT 'ALL'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Complete SET CONSTRAINTS &lt;foo&gt; with DEFERRED|IMMEDIATE */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"SET"</literal></expr></argument>, <argument><expr><literal type="string">"CONSTRAINTS"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"DEFERRED"</literal></expr></argument>, <argument><expr><literal type="string">"IMMEDIATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Complete SET ROLE */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"SET"</literal></expr></argument>, <argument><expr><literal type="string">"ROLE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_roles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Complete SET SESSION with AUTHORIZATION or CHARACTERISTICS... */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"SET"</literal></expr></argument>, <argument><expr><literal type="string">"SESSION"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"AUTHORIZATION"</literal></expr></argument>, <argument><expr><literal type="string">"CHARACTERISTICS AS TRANSACTION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Complete SET SESSION AUTHORIZATION with username */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"SET"</literal></expr></argument>, <argument><expr><literal type="string">"SESSION"</literal></expr></argument>, <argument><expr><literal type="string">"AUTHORIZATION"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_roles</name> <literal type="string">" UNION SELECT 'DEFAULT'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Complete RESET SESSION with AUTHORIZATION */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"RESET"</literal></expr></argument>, <argument><expr><literal type="string">"SESSION"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"AUTHORIZATION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Complete SET &lt;var&gt; with "TO" */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"SET"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"TO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/*
	 * Complete ALTER DATABASE|FUNCTION||PROCEDURE|ROLE|ROUTINE|USER ... SET
	 * &lt;name&gt;
	 */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>HeadMatches2</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"DATABASE|FUNCTION|PROCEDURE|ROLE|ROUTINE|USER"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			 <call><name>TailMatches2</name><argument_list>(<argument><expr><literal type="string">"SET"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"FROM CURRENT"</literal></expr></argument>, <argument><expr><literal type="string">"TO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Suggest possible variable values */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches3</name><argument_list>(<argument><expr><literal type="string">"SET"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"TO|="</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* special cased code for individual GUCs */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>TailMatches2</name><argument_list>(<argument><expr><literal type="string">"DateStyle"</literal></expr></argument>, <argument><expr><literal type="string">"TO|="</literal></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>my_list</name><index>[]</index></name> <init>=
			<expr><block>{<expr><literal type="string">"ISO"</literal></expr>, <expr><literal type="string">"SQL"</literal></expr>, <expr><literal type="string">"Postgres"</literal></expr>, <expr><literal type="string">"German"</literal></expr>,
				<expr><literal type="string">"YMD"</literal></expr>, <expr><literal type="string">"DMY"</literal></expr>, <expr><literal type="string">"MDY"</literal></expr>,
				<expr><literal type="string">"US"</literal></expr>, <expr><literal type="string">"European"</literal></expr>, <expr><literal type="string">"NonEuropean"</literal></expr>,
			<expr><literal type="string">"DEFAULT"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>COMPLETE_WITH_LIST</name><argument_list>(<argument><expr><name>my_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><call><name>TailMatches2</name><argument_list>(<argument><expr><literal type="string">"search_path"</literal></expr></argument>, <argument><expr><literal type="string">"TO|="</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_schemas</name>
								<literal type="string">" AND nspname not like 'pg\\_toast%%' "</literal>
								<literal type="string">" AND nspname not like 'pg\\_temp%%' "</literal>
								<literal type="string">" UNION SELECT 'DEFAULT' "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* generic, type based, GUC support */</comment>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>guctype</name> <init>= <expr><call><name>get_guctype</name><argument_list>(<argument><expr><name>prev2_wd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>guctype</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>guctype</name></expr></argument>, <argument><expr><literal type="string">"enum"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>char</name></type>		<name><name>querybuf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>querybuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>querybuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>Query_for_enum</name></expr></argument>, <argument><expr><name>prev2_wd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>querybuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>guctype</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>guctype</name></expr></argument>, <argument><expr><literal type="string">"bool"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>COMPLETE_WITH_LIST9</name><argument_list>(<argument><expr><literal type="string">"on"</literal></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"yes"</literal></expr></argument>, <argument><expr><literal type="string">"no"</literal></expr></argument>,
									<argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>, <argument><expr><literal type="string">"DEFAULT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"DEFAULT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>guctype</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>guctype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>

<comment type="block">/* START TRANSACTION */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches1</name><argument_list>(<argument><expr><literal type="string">"START"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"TRANSACTION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* TABLE, but not TABLE embedded in other commands */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches1</name><argument_list>(<argument><expr><literal type="string">"TABLE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_relations</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* TABLESAMPLE */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches1</name><argument_list>(<argument><expr><literal type="string">"TABLESAMPLE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tablesample_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches2</name><argument_list>(<argument><expr><literal type="string">"TABLESAMPLE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* TRUNCATE */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches1</name><argument_list>(<argument><expr><literal type="string">"TRUNCATE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tables</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* UNLISTEN */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches1</name><argument_list>(<argument><expr><literal type="string">"UNLISTEN"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><literal type="string">"SELECT pg_catalog.quote_ident(channel) FROM pg_catalog.pg_listening_channels() AS channel WHERE substring(pg_catalog.quote_ident(channel),1,%d)='%s' UNION SELECT '*'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* UPDATE --- can be inside EXPLAIN, RULE, etc */</comment>
	<comment type="block">/* If prev. word is UPDATE suggest a list of tables */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches1</name><argument_list>(<argument><expr><literal type="string">"UPDATE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_updatables</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Complete UPDATE &lt;table&gt; with "SET" */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches2</name><argument_list>(<argument><expr><literal type="string">"UPDATE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"SET"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* Complete UPDATE &lt;table&gt; SET with list of attributes */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches3</name><argument_list>(<argument><expr><literal type="string">"UPDATE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"SET"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_ATTR</name><argument_list>(<argument><expr><name>prev2_wd</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* UPDATE &lt;table&gt; SET &lt;attr&gt; = */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches4</name><argument_list>(<argument><expr><literal type="string">"UPDATE"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"SET"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* USER MAPPING */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"ALTER|CREATE|DROP"</literal></expr></argument>, <argument><expr><literal type="string">"USER"</literal></expr></argument>, <argument><expr><literal type="string">"MAPPING"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"FOR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"CREATE"</literal></expr></argument>, <argument><expr><literal type="string">"USER"</literal></expr></argument>, <argument><expr><literal type="string">"MAPPING"</literal></expr></argument>, <argument><expr><literal type="string">"FOR"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_roles</name>
							<literal type="string">" UNION SELECT 'CURRENT_USER'"</literal>
							<literal type="string">" UNION SELECT 'PUBLIC'"</literal>
							<literal type="string">" UNION SELECT 'USER'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches4</name><argument_list>(<argument><expr><literal type="string">"ALTER|DROP"</literal></expr></argument>, <argument><expr><literal type="string">"USER"</literal></expr></argument>, <argument><expr><literal type="string">"MAPPING"</literal></expr></argument>, <argument><expr><literal type="string">"FOR"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_user_mappings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches5</name><argument_list>(<argument><expr><literal type="string">"CREATE|ALTER|DROP"</literal></expr></argument>, <argument><expr><literal type="string">"USER"</literal></expr></argument>, <argument><expr><literal type="string">"MAPPING"</literal></expr></argument>, <argument><expr><literal type="string">"FOR"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"SERVER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches7</name><argument_list>(<argument><expr><literal type="string">"CREATE|ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"USER"</literal></expr></argument>, <argument><expr><literal type="string">"MAPPING"</literal></expr></argument>, <argument><expr><literal type="string">"FOR"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"SERVER"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"OPTIONS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/*
 * VACUUM [ FULL | FREEZE ] [ VERBOSE ] [ table ]
 * VACUUM [ FULL | FREEZE ] [ VERBOSE ] ANALYZE [ table [ (column [, ...] ) ] ]
 */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches1</name><argument_list>(<argument><expr><literal type="string">"VACUUM"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tm</name></expr></argument>,
								   <argument><expr><literal type="string">" UNION SELECT 'FULL'"</literal>
								   <literal type="string">" UNION SELECT 'FREEZE'"</literal>
								   <literal type="string">" UNION SELECT 'ANALYZE'"</literal>
								   <literal type="string">" UNION SELECT 'VERBOSE'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"VACUUM"</literal></expr></argument>, <argument><expr><literal type="string">"FULL|FREEZE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tm</name></expr></argument>,
								   <argument><expr><literal type="string">" UNION SELECT 'ANALYZE'"</literal>
								   <literal type="string">" UNION SELECT 'VERBOSE'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"VACUUM"</literal></expr></argument>, <argument><expr><literal type="string">"FULL|FREEZE"</literal></expr></argument>, <argument><expr><literal type="string">"ANALYZE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tm</name></expr></argument>,
								   <argument><expr><literal type="string">" UNION SELECT 'VERBOSE'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"VACUUM"</literal></expr></argument>, <argument><expr><literal type="string">"FULL|FREEZE"</literal></expr></argument>, <argument><expr><literal type="string">"VERBOSE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tm</name></expr></argument>,
								   <argument><expr><literal type="string">" UNION SELECT 'ANALYZE'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"VACUUM"</literal></expr></argument>, <argument><expr><literal type="string">"VERBOSE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tm</name></expr></argument>,
								   <argument><expr><literal type="string">" UNION SELECT 'ANALYZE'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>Matches2</name><argument_list>(<argument><expr><literal type="string">"VACUUM"</literal></expr></argument>, <argument><expr><literal type="string">"ANALYZE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tm</name></expr></argument>,
								   <argument><expr><literal type="string">" UNION SELECT 'VERBOSE'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>HeadMatches1</name><argument_list>(<argument><expr><literal type="string">"VACUUM"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tm</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* WITH [RECURSIVE] */</comment>

	<comment type="block">/*
	 * Only match when WITH is the first word, as WITH may appear in many
	 * other contexts.
	 */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches1</name><argument_list>(<argument><expr><literal type="string">"WITH"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"RECURSIVE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* ANALYZE */</comment>
	<comment type="block">/* Complete with list of tables */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>Matches1</name><argument_list>(<argument><expr><literal type="string">"ANALYZE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tmf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* WHERE */</comment>
	<comment type="block">/* Simple case of the word before the where being the table name */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches2</name><argument_list>(<argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"WHERE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_ATTR</name><argument_list>(<argument><expr><name>prev2_wd</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* ... FROM ... */</comment>
<comment type="block">/* TODO: also include SRF ? */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches1</name><argument_list>(<argument><expr><literal type="string">"FROM"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>Matches3</name><argument_list>(<argument><expr><literal type="string">"COPY|\\copy"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><literal type="string">"FROM"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tsvmf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* ... JOIN ... */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatches1</name><argument_list>(<argument><expr><literal type="string">"JOIN"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tsvmf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<comment type="block">/* Backslash commands */</comment>
<comment type="block">/* TODO:  \dc \dd \dl */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"\\?"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST_CS3</name><argument_list>(<argument><expr><literal type="string">"commands"</literal></expr></argument>, <argument><expr><literal type="string">"options"</literal></expr></argument>, <argument><expr><literal type="string">"variables"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"\\connect|\\c"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>recognized_connection_string</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_databases</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS2</name><argument_list>(<argument><expr><literal type="string">"\\connect|\\c"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>recognized_connection_string</name><argument_list>(<argument><expr><name>prev_wd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_roles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"\\da*"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_VERSIONED_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_aggregates</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"\\dA*"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_access_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"\\db*"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tablespaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"\\dD*"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_domains</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"\\des*"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_servers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"\\deu*"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_user_mappings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"\\dew*"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_fdws</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"\\df*"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_VERSIONED_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_functions</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"\\dFd*"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_ts_dictionaries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"\\dFp*"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_ts_parsers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"\\dFt*"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_ts_templates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<comment type="block">/* must be at end of \dF alternatives: */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"\\dF*"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_ts_configurations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"\\dgr*"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tablegroups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"\\di*"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_indexes</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"\\dL*"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_languages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"\\dn*"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_schemas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"\\dp"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"\\z"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tsvmf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"\\ds*"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_sequences</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"\\dt*"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_tables</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"\\dT*"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_datatypes</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"\\du*"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"\\dg*"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_roles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"\\dv*"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_views</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"\\dx*"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_extensions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"\\dm*"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_matviews</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"\\dE*"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_foreign_tables</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"\\dy*"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_event_triggers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* must be at end of \d alternatives: */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"\\d*"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_relations</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"\\ef"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_routines</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"\\ev"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_views</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"\\encoding"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_encodings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"\\h|\\help"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST</name><argument_list>(<argument><expr><name>sql_commands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS2</name><argument_list>(<argument><expr><literal type="string">"\\h|\\help"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>TailMatches1</name><argument_list>(<argument><expr><literal type="string">"DROP"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>matches</name> <operator>=</operator> <call><name>completion_matches</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>drop_command_generator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>TailMatches1</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>matches</name> <operator>=</operator> <call><name>completion_matches</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>alter_command_generator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * CREATE is recognized by tail match elsewhere, so doesn't need to be
		 * repeated here
		 */</comment>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS3</name><argument_list>(<argument><expr><literal type="string">"\\h|\\help"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>TailMatches2</name><argument_list>(<argument><expr><literal type="string">"CREATE|DROP"</literal></expr></argument>, <argument><expr><literal type="string">"ACCESS"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"METHOD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>TailMatches2</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"DEFAULT"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"PRIVILEGES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>TailMatches2</name><argument_list>(<argument><expr><literal type="string">"CREATE|ALTER|DROP"</literal></expr></argument>, <argument><expr><literal type="string">"EVENT"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"TRIGGER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>TailMatches2</name><argument_list>(<argument><expr><literal type="string">"CREATE|ALTER|DROP"</literal></expr></argument>, <argument><expr><literal type="string">"FOREIGN"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_LIST2</name><argument_list>(<argument><expr><literal type="string">"DATA WRAPPER"</literal></expr></argument>, <argument><expr><literal type="string">"TABLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>TailMatches2</name><argument_list>(<argument><expr><literal type="string">"ALTER"</literal></expr></argument>, <argument><expr><literal type="string">"LARGE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"OBJECT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>TailMatches2</name><argument_list>(<argument><expr><literal type="string">"CREATE|ALTER|DROP"</literal></expr></argument>, <argument><expr><literal type="string">"MATERIALIZED"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"VIEW"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>TailMatches2</name><argument_list>(<argument><expr><literal type="string">"CREATE|ALTER|DROP"</literal></expr></argument>, <argument><expr><literal type="string">"TEXT"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"SEARCH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>TailMatches2</name><argument_list>(<argument><expr><literal type="string">"CREATE|ALTER|DROP"</literal></expr></argument>, <argument><expr><literal type="string">"USER"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"MAPPING FOR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS4</name><argument_list>(<argument><expr><literal type="string">"\\h|\\help"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>TailMatches3</name><argument_list>(<argument><expr><literal type="string">"CREATE|ALTER|DROP"</literal></expr></argument>, <argument><expr><literal type="string">"FOREIGN"</literal></expr></argument>, <argument><expr><literal type="string">"DATA"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"WRAPPER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>TailMatches3</name><argument_list>(<argument><expr><literal type="string">"CREATE|ALTER|DROP"</literal></expr></argument>, <argument><expr><literal type="string">"TEXT"</literal></expr></argument>, <argument><expr><literal type="string">"SEARCH"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_LIST4</name><argument_list>(<argument><expr><literal type="string">"CONFIGURATION"</literal></expr></argument>, <argument><expr><literal type="string">"DICTIONARY"</literal></expr></argument>, <argument><expr><literal type="string">"PARSER"</literal></expr></argument>, <argument><expr><literal type="string">"TEMPLATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>TailMatches3</name><argument_list>(<argument><expr><literal type="string">"CREATE|ALTER|DROP"</literal></expr></argument>, <argument><expr><literal type="string">"USER"</literal></expr></argument>, <argument><expr><literal type="string">"MAPPING"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">"FOR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"\\l*"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"\\lo*"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_databases</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"\\password"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_roles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"\\pset"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>my_list</name><index>[]</index></name> <init>=
		<expr><block>{<expr><literal type="string">"border"</literal></expr>, <expr><literal type="string">"columns"</literal></expr>, <expr><literal type="string">"expanded"</literal></expr>, <expr><literal type="string">"fieldsep"</literal></expr>, <expr><literal type="string">"fieldsep_zero"</literal></expr>,
			<expr><literal type="string">"footer"</literal></expr>, <expr><literal type="string">"format"</literal></expr>, <expr><literal type="string">"linestyle"</literal></expr>, <expr><literal type="string">"null"</literal></expr>, <expr><literal type="string">"numericlocale"</literal></expr>,
			<expr><literal type="string">"pager"</literal></expr>, <expr><literal type="string">"pager_min_lines"</literal></expr>, <expr><literal type="string">"recordsep"</literal></expr>, <expr><literal type="string">"recordsep_zero"</literal></expr>,
			<expr><literal type="string">"tableattr"</literal></expr>, <expr><literal type="string">"title"</literal></expr>, <expr><literal type="string">"tuples_only"</literal></expr>, <expr><literal type="string">"unicode_border_linestyle"</literal></expr>,
		<expr><literal type="string">"unicode_column_linestyle"</literal></expr>, <expr><literal type="string">"unicode_header_linestyle"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>COMPLETE_WITH_LIST_CS</name><argument_list>(<argument><expr><name>my_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS2</name><argument_list>(<argument><expr><literal type="string">"\\pset"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"format"</literal></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>my_list</name><index>[]</index></name> <init>=
			<expr><block>{<expr><literal type="string">"unaligned"</literal></expr>, <expr><literal type="string">"aligned"</literal></expr>, <expr><literal type="string">"wrapped"</literal></expr>, <expr><literal type="string">"html"</literal></expr>, <expr><literal type="string">"asciidoc"</literal></expr>,
			<expr><literal type="string">"latex"</literal></expr>, <expr><literal type="string">"latex-longtable"</literal></expr>, <expr><literal type="string">"troff-ms"</literal></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>COMPLETE_WITH_LIST_CS</name><argument_list>(<argument><expr><name>my_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"linestyle"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_LIST_CS3</name><argument_list>(<argument><expr><literal type="string">"ascii"</literal></expr></argument>, <argument><expr><literal type="string">"old-ascii"</literal></expr></argument>, <argument><expr><literal type="string">"unicode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"pager"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_LIST_CS3</name><argument_list>(<argument><expr><literal type="string">"on"</literal></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>, <argument><expr><literal type="string">"always"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"unicode_border_linestyle|"</literal>
								<literal type="string">"unicode_column_linestyle|"</literal>
								<literal type="string">"unicode_header_linestyle"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_LIST_CS2</name><argument_list>(<argument><expr><literal type="string">"single"</literal></expr></argument>, <argument><expr><literal type="string">"double"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"\\unset"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>matches</name> <operator>=</operator> <call><name>complete_from_variables</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"\\set"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>matches</name> <operator>=</operator> <call><name>complete_from_variables</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS2</name><argument_list>(<argument><expr><literal type="string">"\\set"</literal></expr></argument>, <argument><expr><name>MatchAny</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"AUTOCOMMIT|ON_ERROR_STOP|QUIET|"</literal>
						   <literal type="string">"SINGLELINE|SINGLESTEP"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_LIST_CS2</name><argument_list>(<argument><expr><literal type="string">"on"</literal></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"COMP_KEYWORD_CASE"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_LIST_CS4</name><argument_list>(<argument><expr><literal type="string">"lower"</literal></expr></argument>, <argument><expr><literal type="string">"upper"</literal></expr></argument>,
								   <argument><expr><literal type="string">"preserve-lower"</literal></expr></argument>, <argument><expr><literal type="string">"preserve-upper"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"ECHO"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_LIST_CS4</name><argument_list>(<argument><expr><literal type="string">"errors"</literal></expr></argument>, <argument><expr><literal type="string">"queries"</literal></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"ECHO_HIDDEN"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_LIST_CS3</name><argument_list>(<argument><expr><literal type="string">"noexec"</literal></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>, <argument><expr><literal type="string">"on"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"HISTCONTROL"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_LIST_CS4</name><argument_list>(<argument><expr><literal type="string">"ignorespace"</literal></expr></argument>, <argument><expr><literal type="string">"ignoredups"</literal></expr></argument>,
								   <argument><expr><literal type="string">"ignoreboth"</literal></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"ON_ERROR_ROLLBACK"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_LIST_CS3</name><argument_list>(<argument><expr><literal type="string">"on"</literal></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>, <argument><expr><literal type="string">"interactive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"SHOW_CONTEXT"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_LIST_CS3</name><argument_list>(<argument><expr><literal type="string">"never"</literal></expr></argument>, <argument><expr><literal type="string">"errors"</literal></expr></argument>, <argument><expr><literal type="string">"always"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"VERBOSITY"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>COMPLETE_WITH_LIST_CS3</name><argument_list>(<argument><expr><literal type="string">"default"</literal></expr></argument>, <argument><expr><literal type="string">"verbose"</literal></expr></argument>, <argument><expr><literal type="string">"terse"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"\\sf*"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_routines</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"\\sv*"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_SCHEMA_QUERY</name><argument_list>(<argument><expr><name>Query_for_list_of_views</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TailMatchesCS1</name><argument_list>(<argument><expr><literal type="string">"\\cd|\\e|\\edit|\\g|\\i|\\include|"</literal>
							<literal type="string">"\\ir|\\include_relative|\\o|\\out|"</literal>
							<literal type="string">"\\s|\\w|\\write|\\lo_import"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>completion_charp</name> <operator>=</operator> <literal type="string">"\\"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>matches</name> <operator>=</operator> <call><name>completion_matches</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>complete_from_files</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>

	<comment type="block">/*
	 * Finally, we look through the list of "things", such as TABLE, INDEX and
	 * check if that was the previous word. If so, execute the query to get a
	 * list of them.
	 */</comment>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>words_after_create</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>prev_wd</name></expr></argument>, <argument><expr><name><name>words_after_create</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>words_after_create</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>query</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>COMPLETE_WITH_QUERY</name><argument_list>(<argument><expr><name><name>words_after_create</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><name><name>words_after_create</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vquery</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>COMPLETE_WITH_VERSIONED_QUERY</name><argument_list>(<argument><expr><name><name>words_after_create</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vquery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><name><name>words_after_create</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>squery</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>COMPLETE_WITH_VERSIONED_SCHEMA_QUERY</name><argument_list>(<argument><expr><name><name>words_after_create</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>squery</name></expr></argument>,
														 <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * If we still don't have anything to match we have to fabricate some sort
	 * of default list. If we were to just return NULL, readline automatically
	 * attempts filename completion, and that's usually no good.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>matches</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>COMPLETE_WITH_CONST</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_RL_COMPLETION_APPEND_CHARACTER</name></cpp:ifdef>
		<expr_stmt><expr><name>rl_completion_append_character</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* free storage */</comment>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>previous_words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>words_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Return our Grand List O' Matches */</comment>
	<return>return <expr><name>matches</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * GENERATOR FUNCTIONS
 *
 * These functions do all the actual work of completing the input. They get
 * passed the text so far and the count how many times they have been called
 * so far with the same text.
 * If you read the above carefully, you'll see that these don't get called
 * directly but through the readline interface.
 * The return value is expected to be the full completion of the text, going
 * through a list each time, or NULL if there are no more matches. The string
 * will be free()'d by readline, so you must run it through strdup() or
 * something of that sort.
 */</comment>

<comment type="block">/*
 * Common routine for create_command_generator and drop_command_generator.
 * Entries that have 'excluded' flags are not returned.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>create_or_drop_command_generator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>bits32</name></type> <name>excluded</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>list_index</name></decl>,
				<decl><type ref="prev"/><name>string_length</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

	<comment type="block">/* If this is the first time for this completion, init some values */</comment>
	<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>list_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>string_length</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* find something that matches */</comment>
	<while>while <condition>(<expr><operator>(</operator><name>name</name> <operator>=</operator> <name><name>words_after_create</name><index>[<expr><name>list_index</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>name</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>pg_strncasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>string_length</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
			<operator>!</operator><operator>(</operator><name><name>words_after_create</name><index>[<expr><name>list_index</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name>excluded</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>pg_strdup_keyword_case</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></while>
	<comment type="block">/* if nothing matches, return NULL */</comment>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * This one gives you one from a list of things you can put after CREATE
 * as defined above.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>create_command_generator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>create_or_drop_command_generator</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>THING_NO_CREATE</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * This function gives you a list of things you can put after a DROP command.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>drop_command_generator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>create_or_drop_command_generator</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>THING_NO_DROP</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * This function gives you a list of things you can put after an ALTER command.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>alter_command_generator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>create_or_drop_command_generator</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>THING_NO_ALTER</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * These functions generate lists using server queries.
 * They are all wrappers for _complete_from_query.
 */</comment>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>complete_from_query</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* query is assumed to work for any server version */</comment>
	<return>return <expr><call><name>_complete_from_query</name><argument_list>(<argument><expr><name>completion_charp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>complete_from_versioned_query</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>VersionedQuery</name> <modifier>*</modifier></type><name>vquery</name> <init>= <expr><name>completion_vquery</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Find appropriate array element */</comment>
	<while>while <condition>(<expr><name><name>pset</name><operator>.</operator><name>sversion</name></name> <operator>&lt;</operator> <name><name>vquery</name><operator>-&gt;</operator><name>min_server_version</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>vquery</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
	<comment type="block">/* Fail completion if server is too old */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>vquery</name><operator>-&gt;</operator><name>query</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>_complete_from_query</name><argument_list>(<argument><expr><name><name>vquery</name><operator>-&gt;</operator><name>query</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>complete_from_schema_query</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* query is assumed to work for any server version */</comment>
	<return>return <expr><call><name>_complete_from_query</name><argument_list>(<argument><expr><name>completion_charp</name></expr></argument>, <argument><expr><name>completion_squery</name></expr></argument>,
								<argument><expr><name>text</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>complete_from_versioned_schema_query</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>SchemaQuery</name> <modifier>*</modifier></type><name>squery</name> <init>= <expr><name>completion_squery</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>VersionedQuery</name> <modifier>*</modifier></type><name>vquery</name> <init>= <expr><name>completion_vquery</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Find appropriate array element */</comment>
	<while>while <condition>(<expr><name><name>pset</name><operator>.</operator><name>sversion</name></name> <operator>&lt;</operator> <name><name>squery</name><operator>-&gt;</operator><name>min_server_version</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>squery</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
	<comment type="block">/* Fail completion if server is too old */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>squery</name><operator>-&gt;</operator><name>catname</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Likewise for the add-on text, if any */</comment>
	<if_stmt><if>if <condition>(<expr><name>vquery</name></expr>)</condition>
	<block>{<block_content>
		<while>while <condition>(<expr><name><name>pset</name><operator>.</operator><name>sversion</name></name> <operator>&lt;</operator> <name><name>vquery</name><operator>-&gt;</operator><name>min_server_version</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>vquery</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
		<if_stmt><if>if <condition>(<expr><name><name>vquery</name><operator>-&gt;</operator><name>query</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>_complete_from_query</name><argument_list>(<argument><expr><ternary><condition><expr><name>vquery</name></expr> ?</condition><then> <expr><name><name>vquery</name><operator>-&gt;</operator><name>query</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,
								<argument><expr><name>squery</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * This creates a list of matching things, according to a query described by
 * the initial arguments.  The caller has already done any work needed to
 * select the appropriate query for the server's version.
 *
 * The query can be one of two kinds:
 *
 * 1. A simple query which must contain a %d and a %s, which will be replaced
 * by the string length of the text and the text itself. The query may also
 * have up to four more %s in it; the first two such will be replaced by the
 * value of completion_info_charp, the next two by the value of
 * completion_info_charp2.
 *
 * 2. A schema query used for completion of both schema and relation names.
 * These are more complex and must contain in the following order:
 * %d %s %d %s %d %s %s %d %s
 * where %d is the string length of the text and %s the text itself.
 *
 * If both simple_query and schema_query are non-NULL, then we construct
 * a schema query and append the (uninterpreted) string simple_query to it.
 *
 * It is assumed that strings should be escaped to become SQL literals
 * (that is, what is in the query is actually ... '%s' ...)
 *
 * See top of file for examples of both kinds of query.
 *
 * "text" and "state" are supplied by readline.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>_complete_from_query</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>simple_query</name></decl></parameter>,
					 <parameter><decl><type><specifier>const</specifier> <name>SchemaQuery</name> <modifier>*</modifier></type><name>schema_query</name></decl></parameter>,
					 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>list_index</name></decl>,
				<decl><type ref="prev"/><name>byte_length</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>PGresult</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * If this is the first time for this completion, we fetch a list of our
	 * "things" from the backend.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PQExpBufferData</name></type> <name>query_buffer</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>e_text</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>e_info_charp</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>e_info_charp2</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pstr</name> <init>= <expr><name>text</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>char_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>list_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>byte_length</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Count length as number of characters (not bytes), for passing to
		 * substring
		 */</comment>
		<while>while <condition>(<expr><operator>*</operator><name>pstr</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>char_length</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>pstr</name> <operator>+=</operator> <call><name>PQmblenBounded</name><argument_list>(<argument><expr><name>pstr</name></expr></argument>, <argument><expr><name><name>pset</name><operator>.</operator><name>encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>

		<comment type="block">/* Free any prior result */</comment>
		<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

		<comment type="block">/* Set up suitably-escaped copies of textual inputs */</comment>
		<expr_stmt><expr><name>e_text</name> <operator>=</operator> <call><name>escape_string</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>completion_info_charp</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>e_info_charp</name> <operator>=</operator> <call><name>escape_string</name><argument_list>(<argument><expr><name>completion_info_charp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>e_info_charp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>completion_info_charp2</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>e_info_charp2</name> <operator>=</operator> <call><name>escape_string</name><argument_list>(<argument><expr><name>completion_info_charp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>e_info_charp2</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><call><name>initPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>query_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>schema_query</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* schema_query gives us the pieces to assemble */</comment>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>qualresult</name> <init>= <expr><name><name>schema_query</name><operator>-&gt;</operator><name>qualresult</name></name></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>qualresult</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>qualresult</name> <operator>=</operator> <name><name>schema_query</name><operator>-&gt;</operator><name>result</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="block">/* Get unqualified names matching the input-so-far */</comment>
			<expr_stmt><expr><call><name>appendPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>query_buffer</name></expr></argument>, <argument><expr><literal type="string">"SELECT %s FROM %s WHERE "</literal></expr></argument>,
							  <argument><expr><name><name>schema_query</name><operator>-&gt;</operator><name>result</name></name></expr></argument>,
							  <argument><expr><name><name>schema_query</name><operator>-&gt;</operator><name>catname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>schema_query</name><operator>-&gt;</operator><name>selcondition</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>appendPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>query_buffer</name></expr></argument>, <argument><expr><literal type="string">"%s AND "</literal></expr></argument>,
								  <argument><expr><name><name>schema_query</name><operator>-&gt;</operator><name>selcondition</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>appendPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>query_buffer</name></expr></argument>, <argument><expr><literal type="string">"substring(%s,1,%d)='%s'"</literal></expr></argument>,
							  <argument><expr><name><name>schema_query</name><operator>-&gt;</operator><name>result</name></name></expr></argument>,
							  <argument><expr><name>char_length</name></expr></argument>, <argument><expr><name>e_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>appendPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>query_buffer</name></expr></argument>, <argument><expr><literal type="string">" AND %s"</literal></expr></argument>,
							  <argument><expr><name><name>schema_query</name><operator>-&gt;</operator><name>viscondition</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * When fetching relation names, suppress system catalogs unless
			 * the input-so-far begins with "pg_".  This is a compromise
			 * between not offering system catalogs for completion at all, and
			 * having them swamp the result when the input is just "p".
			 */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>schema_query</name><operator>-&gt;</operator><name>catname</name></name></expr></argument>,
					   <argument><expr><literal type="string">"pg_catalog.pg_class c"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
				<call><name>strncmp</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="string">"pg_"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>!=</operator><literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>appendPQExpBufferStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>query_buffer</name></expr></argument>,
									 <argument><expr><literal type="string">" AND c.relnamespace &lt;&gt; (SELECT oid FROM"</literal>
									 <literal type="string">" pg_catalog.pg_namespace WHERE nspname = 'pg_catalog')"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/*
			 * Add in matching schema names, but only if there is more than
			 * one potential match among schema names.
			 */</comment>
			<expr_stmt><expr><call><name>appendPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>query_buffer</name></expr></argument>, <argument><expr><literal type="string">"\nUNION\n"</literal>
							  <literal type="string">"SELECT pg_catalog.quote_ident(n.nspname) || '.' "</literal>
							  <literal type="string">"FROM pg_catalog.pg_namespace n "</literal>
							  <literal type="string">"WHERE substring(pg_catalog.quote_ident(n.nspname) || '.',1,%d)='%s'"</literal></expr></argument>,
							  <argument><expr><name>char_length</name></expr></argument>, <argument><expr><name>e_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>appendPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>query_buffer</name></expr></argument>,
							  <argument><expr><literal type="string">" AND (SELECT pg_catalog.count(*)"</literal>
							  <literal type="string">" FROM pg_catalog.pg_namespace"</literal>
							  <literal type="string">" WHERE substring(pg_catalog.quote_ident(nspname) || '.',1,%d) ="</literal>
							  <literal type="string">" substring('%s',1,pg_catalog.length(pg_catalog.quote_ident(nspname))+1)) &gt; 1"</literal></expr></argument>,
							  <argument><expr><name>char_length</name></expr></argument>, <argument><expr><name>e_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * Add in matching qualified names, but only if there is exactly
			 * one schema matching the input-so-far.
			 */</comment>
			<expr_stmt><expr><call><name>appendPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>query_buffer</name></expr></argument>, <argument><expr><literal type="string">"\nUNION\n"</literal>
							  <literal type="string">"SELECT pg_catalog.quote_ident(n.nspname) || '.' || %s "</literal>
							  <literal type="string">"FROM %s, pg_catalog.pg_namespace n "</literal>
							  <literal type="string">"WHERE %s = n.oid AND "</literal></expr></argument>,
							  <argument><expr><name>qualresult</name></expr></argument>,
							  <argument><expr><name><name>schema_query</name><operator>-&gt;</operator><name>catname</name></name></expr></argument>,
							  <argument><expr><name><name>schema_query</name><operator>-&gt;</operator><name>namespace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>schema_query</name><operator>-&gt;</operator><name>selcondition</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>appendPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>query_buffer</name></expr></argument>, <argument><expr><literal type="string">"%s AND "</literal></expr></argument>,
								  <argument><expr><name><name>schema_query</name><operator>-&gt;</operator><name>selcondition</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>appendPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>query_buffer</name></expr></argument>, <argument><expr><literal type="string">"substring(pg_catalog.quote_ident(n.nspname) || '.' || %s,1,%d)='%s'"</literal></expr></argument>,
							  <argument><expr><name>qualresult</name></expr></argument>,
							  <argument><expr><name>char_length</name></expr></argument>, <argument><expr><name>e_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * This condition exploits the single-matching-schema rule to
			 * speed up the query
			 */</comment>
			<expr_stmt><expr><call><name>appendPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>query_buffer</name></expr></argument>,
							  <argument><expr><literal type="string">" AND substring(pg_catalog.quote_ident(n.nspname) || '.',1,%d) ="</literal>
							  <literal type="string">" substring('%s',1,pg_catalog.length(pg_catalog.quote_ident(n.nspname))+1)"</literal></expr></argument>,
							  <argument><expr><name>char_length</name></expr></argument>, <argument><expr><name>e_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>appendPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>query_buffer</name></expr></argument>,
							  <argument><expr><literal type="string">" AND (SELECT pg_catalog.count(*)"</literal>
							  <literal type="string">" FROM pg_catalog.pg_namespace"</literal>
							  <literal type="string">" WHERE substring(pg_catalog.quote_ident(nspname) || '.',1,%d) ="</literal>
							  <literal type="string">" substring('%s',1,pg_catalog.length(pg_catalog.quote_ident(nspname))+1)) = 1"</literal></expr></argument>,
							  <argument><expr><name>char_length</name></expr></argument>, <argument><expr><name>e_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* If an addon query was provided, use it */</comment>
			<if_stmt><if>if <condition>(<expr><name>simple_query</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>appendPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>query_buffer</name></expr></argument>, <argument><expr><literal type="string">"\n%s"</literal></expr></argument>, <argument><expr><name>simple_query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>simple_query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* simple_query is an sprintf-style format string */</comment>
			<expr_stmt><expr><call><name>appendPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>query_buffer</name></expr></argument>, <argument><expr><name>simple_query</name></expr></argument>,
							  <argument><expr><name>char_length</name></expr></argument>, <argument><expr><name>e_text</name></expr></argument>,
							  <argument><expr><name>e_info_charp</name></expr></argument>, <argument><expr><name>e_info_charp</name></expr></argument>,
							  <argument><expr><name>e_info_charp2</name></expr></argument>, <argument><expr><name>e_info_charp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="block">/* Limit the number of records in the result */</comment>
		<expr_stmt><expr><call><name>appendPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>query_buffer</name></expr></argument>, <argument><expr><literal type="string">"\nLIMIT %d"</literal></expr></argument>,
						  <argument><expr><name>completion_max_records</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>exec_query</name><argument_list>(<argument><expr><name><name>query_buffer</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>termPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>query_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>e_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>e_info_charp</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>e_info_charp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>e_info_charp2</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>e_info_charp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Find something that matches */</comment>
	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&amp;&amp;</operator> <call><name>PQresultStatus</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PGRES_TUPLES_OK</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

		<while>while <condition>(<expr><name>list_index</name> <operator>&lt;</operator> <call><name>PQntuples</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			   <operator>(</operator><name>item</name> <operator>=</operator> <call><name>PQgetvalue</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>list_index</name><operator>++</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<if_stmt><if>if <condition>(<expr><call><name>pg_strncasecmp</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>byte_length</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><call><name>pg_strdup</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* If nothing matches, free the db structure and return null */</comment>
	<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * This function returns in order one of a fixed, NULL pointer terminated list
 * of strings (if matching). This can be used if there are only a fixed number
 * SQL words that can appear at certain spot.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>complete_from_list</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>string_length</name></decl>,
				<decl><type ref="prev"/><name>list_index</name></decl>,
				<decl><type ref="prev"/><name>matches</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>casesensitive</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

	<comment type="block">/* need to have a list */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>completion_charpp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Initialization */</comment>
	<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>list_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>string_length</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>casesensitive</name> <operator>=</operator> <name>completion_case_sensitive</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>matches</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>item</name> <operator>=</operator> <name><name>completion_charpp</name><index>[<expr><name>list_index</name><operator>++</operator></expr>]</index></name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* First pass is case sensitive */</comment>
		<if_stmt><if>if <condition>(<expr><name>casesensitive</name> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>string_length</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>matches</name><operator>++</operator></expr>;</expr_stmt>
			<return>return <expr><call><name>pg_strdup</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Second pass is case insensitive, don't bother counting matches */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>casesensitive</name> <operator>&amp;&amp;</operator> <call><name>pg_strncasecmp</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>string_length</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>completion_case_sensitive</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><call><name>pg_strdup</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
			<else>else<block type="pseudo"><block_content>

				<comment type="block">/*
				 * If case insensitive matching was requested initially,
				 * adjust the case according to setting.
				 */</comment>
				<return>return <expr><call><name>pg_strdup_keyword_case</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<comment type="block">/*
	 * No matches found. If we're not case insensitive already, lets switch to
	 * being case insensitive and try again
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>casesensitive</name> <operator>&amp;&amp;</operator> <name>matches</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>casesensitive</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>list_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>state</name><operator>++</operator></expr>;</expr_stmt>
		<return>return <expr><call><name>complete_from_list</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* If no more matches, return null. */</comment>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * This function returns one fixed string the first time even if it doesn't
 * match what's there, and nothing the second time. This should be used if
 * there is only one possibility that can appear at a certain spot, so
 * misspellings will be overwritten.  The string to be passed must be in
 * completion_charp.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>complete_from_const</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>completion_charp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>completion_case_sensitive</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>pg_strdup</name><argument_list>(<argument><expr><name>completion_charp</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
		<else>else<block type="pseudo"><block_content>

			<comment type="block">/*
			 * If case insensitive matching was requested initially, adjust
			 * the case according to setting.
			 */</comment>
			<return>return <expr><call><name>pg_strdup_keyword_case</name><argument_list>(<argument><expr><name>completion_charp</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * This function appends the variable name with prefix and suffix to
 * the variable names array.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>append_variable_names</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>varnames</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nvars</name></decl></parameter>,
					  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>maxvars</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>varname</name></decl></parameter>,
					  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suffix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>nvars</name> <operator>&gt;=</operator> <operator>*</operator><name>maxvars</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>maxvars</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>varnames</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>pg_realloc</name><argument_list>(<argument><expr><operator>*</operator><name>varnames</name></expr></argument>,
										 <argument><expr><operator>(</operator><operator>(</operator><operator>*</operator><name>maxvars</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><operator>(</operator><operator>*</operator><name>varnames</name><operator>)</operator><index>[<expr><operator>(</operator><operator>*</operator><name>nvars</name><operator>)</operator><operator>++</operator></expr>]</index> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>varname</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * This function supports completion with the name of a psql variable.
 * The variable names can be prefixed and suffixed with additional text
 * to support quoting usages. If need_value is true, only variables
 * that are currently set are included; otherwise, special variables
 * (those that have hooks) are included even if currently unset.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type>
<name>complete_from_variables</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suffix</name></decl></parameter>,
						<parameter><decl><type><name>bool</name></type> <name>need_value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	  <modifier>*</modifier><modifier>*</modifier></type><name>matches</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	  <modifier>*</modifier><modifier>*</modifier></type><name>varnames</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nvars</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>maxvars</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>_variable</name></name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>varnames</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>pg_malloc</name><argument_list>(<argument><expr><operator>(</operator><name>maxvars</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>ptr</name> <operator>=</operator> <name><name>pset</name><operator>.</operator><name>vars</name><operator>-&gt;</operator><name>next</name></name></expr>;</init> <condition><expr><name>ptr</name></expr>;</condition> <incr><expr><name>ptr</name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>need_value</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>ptr</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>append_variable_names</name><argument_list>(<argument><expr><operator>&amp;</operator><name>varnames</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvars</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxvars</name></expr></argument>, <argument><expr><name><name>ptr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
							  <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name><name>varnames</name><index>[<expr><name>nvars</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COMPLETE_WITH_LIST_CS</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator><operator>)</operator> <name>varnames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nvars</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>varnames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>varnames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>matches</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * This function wraps rl_filename_completion_function() to strip quotes from
 * the input before searching for matches and to quote any matches for which
 * the consuming command will require it.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>complete_from_files</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>unquoted_text</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>unquoted_match</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Initialization: stash the unquoted input. */</comment>
		<expr_stmt><expr><name>unquoted_text</name> <operator>=</operator> <call><name>strtokx</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"'"</literal></expr></argument>, <argument><expr><operator>*</operator><name>completion_charp</name></expr></argument>,
								<argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name><name>pset</name><operator>.</operator><name>encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* expect a NULL return for the empty string only */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>unquoted_text</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>*</operator><name>text</name> <operator>==</operator> <literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>unquoted_text</name> <operator>=</operator> <name>text</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>unquoted_match</name> <operator>=</operator> <call><name>filename_completion_function</name><argument_list>(<argument><expr><name>unquoted_text</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>unquoted_match</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Caller sets completion_charp to a zero- or one-character string
		 * containing the escape character.  This is necessary since \copy has
		 * no escape character, but every other backslash command recognizes
		 * "\" as an escape character.  Since we have only two callers, don't
		 * bother providing a macro to simplify this.
		 */</comment>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>quote_if_needed</name><argument_list>(<argument><expr><name>unquoted_match</name></expr></argument>, <argument><expr><literal type="string">" \t\r\n\"`"</literal></expr></argument>,
							  <argument><expr><literal type="char">'\''</literal></expr></argument>, <argument><expr><operator>*</operator><name>completion_charp</name></expr></argument>, <argument><expr><name><name>pset</name><operator>.</operator><name>encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>unquoted_match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>unquoted_match</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* HELPER FUNCTIONS */</comment>


<comment type="block">/*
 * Make a pg_strdup copy of s and convert the case according to
 * COMP_KEYWORD_CASE setting, using ref as the text that was already entered.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>pg_strdup_keyword_case</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>ret</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>first</name> <init>= <expr><name><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>comp_case</name></name> <operator>==</operator> <name>PSQL_COMP_CASE_LOWER</name> <operator>||</operator>
		<operator>(</operator><operator>(</operator><name><name>pset</name><operator>.</operator><name>comp_case</name></name> <operator>==</operator> <name>PSQL_COMP_CASE_PRESERVE_LOWER</name> <operator>||</operator>
		  <name><name>pset</name><operator>.</operator><name>comp_case</name></name> <operator>==</operator> <name>PSQL_COMP_CASE_PRESERVE_UPPER</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>islower</name><argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
		<operator>(</operator><name><name>pset</name><operator>.</operator><name>comp_case</name></name> <operator>==</operator> <name>PSQL_COMP_CASE_PRESERVE_LOWER</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isalpha</name><argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>ret</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>pg_tolower</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>ret</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>pg_toupper</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * escape_string - Escape argument for use as string literal.
 *
 * The returned value has to be freed.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>escape_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>text_length</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>text_length</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pg_malloc</name><argument_list>(<argument><expr><name>text_length</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PQescapeStringConn</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>text_length</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Execute a query and report any errors. This should be the preferred way of
 * talking to the database in this file.
 */</comment>
<function><type><specifier>static</specifier> <name>PGresult</name> <modifier>*</modifier></type>
<name>exec_query</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGresult</name>   <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>query</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><name><name>pset</name><operator>.</operator><name>db</name></name> <operator>||</operator> <call><name>PQstatus</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CONNECTION_OK</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>PQexec</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PQresultStatus</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PGRES_TUPLES_OK</name></expr>)</condition>
	<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NOT_USED</name></cpp:ifdef>
		<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"tab completion query failed: %s\nQuery was:\n%s\n"</literal></expr></argument>,
				   <argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Parse all the word(s) before point.
 *
 * Returns a malloc'd array of character pointers that point into the malloc'd
 * data array returned to *buffer; caller must free() both of these when done.
 * *nwords receives the number of words found, ie, the valid length of the
 * return array.
 *
 * Words are returned right to left, that is, previous_words[0] gets the last
 * word before point, previous_words[1] the next-to-last, etc.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type>
<name>get_previous_words</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>point</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nwords</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	  <modifier>*</modifier><modifier>*</modifier></type><name>previous_words</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>outptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>words_found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * If we have anything in tab_completion_query_buf, paste it together with
	 * rl_line_buffer to construct the full query.  Otherwise we can just use
	 * rl_line_buffer as the input string.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>tab_completion_query_buf</name> <operator>&amp;&amp;</operator> <name><name>tab_completion_query_buf</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>tab_completion_query_buf</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>pg_malloc</name><argument_list>(<argument><expr><name>point</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>tab_completion_query_buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>rl_line_buffer</name></expr></argument>, <argument><expr><name>point</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>point</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		<comment type="block">/* Readjust point to reference appropriate offset in buf */</comment>
		<expr_stmt><expr><name>point</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>rl_line_buffer</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/*
	 * Allocate an array of string pointers and a buffer to hold the strings
	 * themselves.  The worst case is that the line contains only
	 * non-whitespace WORD_BREAKS characters, making each one a separate word.
	 * This is usually much more space than we need, but it's cheaper than
	 * doing a separate malloc() for each word.
	 */</comment>
	<expr_stmt><expr><name>previous_words</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>pg_malloc</name><argument_list>(<argument><expr><name>point</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>buffer</name> <operator>=</operator> <name>outptr</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>pg_malloc</name><argument_list>(<argument><expr><name>point</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * First we look for a non-word char before the current point.  (This is
	 * probably useless, if readline is on the same page as we are about what
	 * is a word, but if so it's cheap.)
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>point</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>WORD_BREAKS</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name>point</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Now parse words, working backwards, until we hit start of line.  The
	 * backwards scan has some interesting but intentional properties
	 * concerning parenthesis handling.
	 */</comment>
	<while>while <condition>(<expr><name>point</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>start</name></decl>,
					<decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>inquotes</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>parentheses</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

		<comment type="block">/* now find the first non-space which then constitutes the end */</comment>
		<expr_stmt><expr><name>end</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>point</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>end</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<comment type="block">/* if no end found, we're done */</comment>
		<if_stmt><if>if <condition>(<expr><name>end</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * Otherwise we now look for the start.  The start is either the last
		 * character before any word-break character going backwards from the
		 * end, or it's simply character 0.  We also handle open quotes and
		 * parentheses.
		 */</comment>
		<for>for <control>(<init><expr><name>start</name> <operator>=</operator> <name>end</name></expr>;</init> <condition><expr><name>start</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>start</name><operator>--</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>start</name></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>inquotes</name> <operator>=</operator> <operator>!</operator><name>inquotes</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>inquotes</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>start</name></expr>]</index></name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>parentheses</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><name><name>buf</name><index>[<expr><name>start</name></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><operator>--</operator><name>parentheses</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<break>break;</break></block_content></block></if></if_stmt>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><name>parentheses</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
						 <call><name>strchr</name><argument_list>(<argument><expr><name>WORD_BREAKS</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><name>start</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<break>break;</break></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<comment type="block">/* Return the word located at start to end inclusive */</comment>
		<expr_stmt><expr><name><name>previous_words</name><index>[<expr><name>words_found</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>outptr</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>=</operator> <name>end</name> <operator>-</operator> <name>start</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>outptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>start</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>outptr</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>outptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

		<comment type="block">/* Continue searching */</comment>
		<expr_stmt><expr><name>point</name> <operator>=</operator> <name>start</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/* Release parsing input workspace, if we made one above */</comment>
	<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>!=</operator> <name>rl_line_buffer</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>nwords</name> <operator>=</operator> <name>words_found</name></expr>;</expr_stmt>
	<return>return <expr><name>previous_words</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Look up the type for the GUC variable with the passed name.
 *
 * Returns NULL if the variable is unknown. Otherwise the returned string,
 * containing the type, has to be freed.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>get_guctype</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>varname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PQExpBufferData</name></type> <name>query_buffer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>e_varname</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGresult</name>   <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>guctype</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>e_varname</name> <operator>=</operator> <call><name>escape_string</name><argument_list>(<argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>initPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>query_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>appendPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>query_buffer</name></expr></argument>,
					  <argument><expr><literal type="string">"SELECT vartype FROM pg_catalog.pg_settings "</literal>
					  <literal type="string">"WHERE pg_catalog.lower(name) = pg_catalog.lower('%s')"</literal></expr></argument>,
					  <argument><expr><name>e_varname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>exec_query</name><argument_list>(<argument><expr><name><name>query_buffer</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>termPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>query_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>e_varname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PQresultStatus</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PGRES_TUPLES_OK</name> <operator>&amp;&amp;</operator> <call><name>PQntuples</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>guctype</name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>guctype</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NOT_USED</name></cpp:ifdef>

<comment type="block">/*
 * Surround a string with single quotes. This works for both SQL and
 * psql internal. Currently disabled because it is reported not to
 * cooperate with certain versions of readline.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>quote_file_name</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>match_type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>quote_pointer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>length</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>quote_pointer</name></expr>;</expr_stmt>		<comment type="block">/* not used */</comment>

	<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>+</operator><operator>(</operator><ternary><condition><expr><name>match_type</name> <operator>==</operator> <name>SINGLE_MATCH</name></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>pg_malloc</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\''</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>match_type</name> <operator>==</operator> <name>SINGLE_MATCH</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>s</name><index>[<expr><name>length</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\''</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>s</name><index>[<expr><name>length</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>dequote_file_name</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>quote_char</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>length</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>quote_char</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>pg_strdup</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>pg_malloc</name><argument_list>(<argument><expr><name>length</name> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>text</name> <operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>length</name> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* NOT_USED */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* USE_READLINE */</comment>
</unit>
