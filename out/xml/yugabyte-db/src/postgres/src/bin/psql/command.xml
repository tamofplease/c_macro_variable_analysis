<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/bin/psql/command.c"><comment type="block">/*
 * psql - the PostgreSQL interactive terminal
 *
 * Copyright (c) 2000-2018, PostgreSQL Global Development Group
 *
 * src/bin/psql/command.c
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pwd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utime.h&gt;</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>			<comment type="block">/* for stat() */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>				<comment type="block">/* open() flags */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>				<comment type="block">/* for geteuid(), getpid(), stat() */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;win32.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;direct.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>			<comment type="block">/* for stat() */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_class_d.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"portability/instr_time.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq-fe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pqexpbuffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fe_utils/string_utils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"copy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"crosstabview.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"describe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"help.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"input.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"large_obj.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mainloop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fe_utils/print.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psqlscanslash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"settings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"variables.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Editable database object types.
 */</comment>
<typedef>typedef <type><enum>enum <name>EditableObjectType</name>
<block>{
	<decl><name>EditableFunction</name></decl>,
	<decl><name>EditableView</name></decl>
}</block></enum></type> <name>EditableObjectType</name>;</typedef>

<comment type="block">/* local function declarations */</comment>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,
			 <parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>,
			 <parameter><decl><type><name>ConditionalStack</name></type> <name>cstack</name></decl></parameter>,
			 <parameter><decl><type><name>PQExpBuffer</name></type> <name>query_buf</name></decl></parameter>,
			 <parameter><decl><type><name>PQExpBuffer</name></type> <name>previous_buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_a</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_C</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_connect</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_cd</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>,
				<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_conninfo</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_copy</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_copyright</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_crosstabview</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_d</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>,
			   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_edit</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>,
				  <parameter><decl><type><name>PQExpBuffer</name></type> <name>query_buf</name></decl></parameter>, <parameter><decl><type><name>PQExpBuffer</name></type> <name>previous_buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_ef_ev</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>,
				   <parameter><decl><type><name>PQExpBuffer</name></type> <name>query_buf</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_func</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_echo</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>,
				  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_elif</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>ConditionalStack</name></type> <name>cstack</name></decl></parameter>,
				  <parameter><decl><type><name>PQExpBuffer</name></type> <name>query_buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_else</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>ConditionalStack</name></type> <name>cstack</name></decl></parameter>,
				  <parameter><decl><type><name>PQExpBuffer</name></type> <name>query_buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_endif</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>ConditionalStack</name></type> <name>cstack</name></decl></parameter>,
				   <parameter><decl><type><name>PQExpBuffer</name></type> <name>query_buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_encoding</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_errverbose</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_f</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_g</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>,
			   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_gdesc</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_gexec</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_gset</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_help</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_html</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_include</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>,
					 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_if</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>ConditionalStack</name></type> <name>cstack</name></decl></parameter>,
				<parameter><decl><type><name>PQExpBuffer</name></type> <name>query_buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_list</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>,
				  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_lo</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>,
				<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_out</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_print</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>,
				   <parameter><decl><type><name>PQExpBuffer</name></type> <name>query_buf</name></decl></parameter>, <parameter><decl><type><name>PQExpBuffer</name></type> <name>previous_buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_password</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_prompt</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>,
					<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_pset</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_quit</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_reset</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>,
				   <parameter><decl><type><name>PQExpBuffer</name></type> <name>query_buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_s</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_set</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_setenv</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>,
					<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_sf_sv</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>,
				   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_func</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_t</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_T</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_timing</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_unset</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>,
				   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_write</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>,
				   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,
				   <parameter><decl><type><name>PQExpBuffer</name></type> <name>query_buf</name></decl></parameter>, <parameter><decl><type><name>PQExpBuffer</name></type> <name>previous_buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_watch</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>,
				   <parameter><decl><type><name>PQExpBuffer</name></type> <name>query_buf</name></decl></parameter>, <parameter><decl><type><name>PQExpBuffer</name></type> <name>previous_buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_x</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_z</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_shell_escape</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>backslashResult</name></type> <name>exec_command_slash_command_help</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>read_connect_arg</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PQExpBuffer</name></type> <name>gather_boolean_expression</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>is_true_boolean_expression</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ignore_boolean_expression</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ignore_slash_options</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ignore_slash_filepipe</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ignore_slash_whole_line</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>is_branching_command</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>save_query_text_state</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>ConditionalStack</name></type> <name>cstack</name></decl></parameter>,
					  <parameter><decl><type><name>PQExpBuffer</name></type> <name>query_buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>discard_query_text</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>ConditionalStack</name></type> <name>cstack</name></decl></parameter>,
				   <parameter><decl><type><name>PQExpBuffer</name></type> <name>query_buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>copy_previous_query</name><parameter_list>(<parameter><decl><type><name>PQExpBuffer</name></type> <name>query_buf</name></decl></parameter>, <parameter><decl><type><name>PQExpBuffer</name></type> <name>previous_buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>do_connect</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>trivalue</name></name></type> <name>reuse_previous_specification</name></decl></parameter>,
		   <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dbname</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>port</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>do_edit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename_arg</name></decl></parameter>, <parameter><decl><type><name>PQExpBuffer</name></type> <name>query_buf</name></decl></parameter>,
		<parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>edited</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>do_shell</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>command</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>do_watch</name><parameter_list>(<parameter><decl><type><name>PQExpBuffer</name></type> <name>query_buf</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sleep</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>lookup_object_oid</name><parameter_list>(<parameter><decl><type><name>EditableObjectType</name></type> <name>obj_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>,
				  <parameter><decl><type><name>Oid</name> <modifier>*</modifier></type><name>obj_oid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>get_create_object_cmd</name><parameter_list>(<parameter><decl><type><name>EditableObjectType</name></type> <name>obj_type</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>oid</name></decl></parameter>,
					  <parameter><decl><type><name>PQExpBuffer</name></type> <name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>strip_lineno_from_objdesc</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>count_lines_in_buf</name><parameter_list>(<parameter><decl><type><name>PQExpBuffer</name></type> <name>buf</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>print_with_linenumbers</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>lines</name></decl></parameter>,
					   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>header_keyword</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>minimal_error_message</name><parameter_list>(<parameter><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>printSSLInfo</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>printPsetInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>printQueryOpt</name></name> <modifier>*</modifier></type><name>popt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>pset_value_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>printQueryOpt</name></name> <modifier>*</modifier></type><name>popt</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>checkWin32Codepage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<comment type="block">/*----------
 * HandleSlashCmds:
 *
 * Handles all the different commands that start with '\'.
 * Ordinarily called by MainLoop().
 *
 * scan_state is a lexer working state that is set to continue scanning
 * just after the '\'.  The lexer is advanced past the command and all
 * arguments on return.
 *
 * cstack is the current \if stack state.  This will be examined, and
 * possibly modified by conditional commands.
 *
 * query_buf contains the query-so-far, which may be modified by
 * execution of the backslash command (for example, \r clears it).
 *
 * previous_buf contains the query most recently sent to the server
 * (empty if none yet).  This should not be modified here, but some
 * commands copy its content into query_buf.
 *
 * query_buf and previous_buf will be NULL when executing a "-c"
 * command-line option.
 *
 * Returns a status code indicating what action is desired, see command.h.
 *----------
 */</comment>

<function><type><name>backslashResult</name></type>
<name>HandleSlashCmds</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>,
				<parameter><decl><type><name>ConditionalStack</name></type> <name>cstack</name></decl></parameter>,
				<parameter><decl><type><name>PQExpBuffer</name></type> <name>query_buf</name></decl></parameter>,
				<parameter><decl><type><name>PQExpBuffer</name></type> <name>previous_buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>backslashResult</name></type> <name>status</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>cmd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>scan_state</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>cstack</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Parse off the command name */</comment>
	<expr_stmt><expr><name>cmd</name> <operator>=</operator> <call><name>psql_scan_slash_command</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* And try to execute it */</comment>
	<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>cstack</name></expr></argument>, <argument><expr><name>query_buf</name></expr></argument>, <argument><expr><name>previous_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>PSQL_CMD_UNKNOWN</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>cur_cmd_interactive</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"Invalid command \\%s. Try \\? for help.\n"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"invalid command \\%s\n"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <name>PSQL_CMD_ERROR</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>PSQL_CMD_ERROR</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Eat any remaining arguments after a valid command.  We want to
		 * suppress evaluation of backticks in this situation, so transiently
		 * push an inactive conditional-stack entry.
		 */</comment>
		<decl_stmt><decl><type><name>bool</name></type>		<name>active_branch</name> <init>= <expr><call><name>conditional_active</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>conditional_stack_push</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>, <argument><expr><name>IFSTATE_IGNORED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<while>while <condition>(<expr><operator>(</operator><name>arg</name> <operator>=</operator> <call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
											 <argument><expr><name>OT_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"\\%s: extra argument \"%s\" ignored\n"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><call><name>conditional_stack_pop</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* silently throw away rest of line after an erroneous command */</comment>
		<while>while <condition>(<expr><operator>(</operator><name>arg</name> <operator>=</operator> <call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
											 <argument><expr><name>OT_WHOLE_LINE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* if there is a trailing \\, swallow it */</comment>
	<expr_stmt><expr><call><name>psql_scan_slash_command_end</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* some commands write to queryFout, so make sure output is sent */</comment>
	<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>queryFout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Subroutine to actually try to execute a backslash command.
 *
 * The typical "success" result code is PSQL_CMD_SKIP_LINE, although some
 * commands return something else.  Failure results are PSQL_CMD_ERROR,
 * unless PSQL_CMD_UNKNOWN is more appropriate.
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,
			 <parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>,
			 <parameter><decl><type><name>ConditionalStack</name></type> <name>cstack</name></decl></parameter>,
			 <parameter><decl><type><name>PQExpBuffer</name></type> <name>query_buf</name></decl></parameter>,
			 <parameter><decl><type><name>PQExpBuffer</name></type> <name>previous_buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>backslashResult</name></type> <name>status</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>active_branch</name> <init>= <expr><call><name>conditional_active</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * In interactive mode, warn when we're ignoring a command within a false
	 * \if-branch.  But we continue on, so as to parse and discard the right
	 * amount of parameter text.  Each individual backslash command subroutine
	 * is responsible for doing nothing after discarding appropriate
	 * arguments, if !active_branch.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>cur_cmd_interactive</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>active_branch</name> <operator>&amp;&amp;</operator>
		<operator>!</operator><call><name>is_branching_command</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"\\%s command ignored; use \\endif or Ctrl-C to exit current \\if block\n"</literal></expr></argument>,
				   <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_a</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_C</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"connect"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_connect</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"cd"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_cd</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"conninfo"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_conninfo</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"copy"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_copy</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"copyright"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_copyright</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"crosstabview"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_crosstabview</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>cmd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'d'</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_d</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"e"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"edit"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_edit</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>,
								   <argument><expr><name>query_buf</name></expr></argument>, <argument><expr><name>previous_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"ef"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_ef_ev</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>, <argument><expr><name>query_buf</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"ev"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_ef_ev</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>, <argument><expr><name>query_buf</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"echo"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"qecho"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_echo</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"elif"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_elif</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>cstack</name></expr></argument>, <argument><expr><name>query_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"else"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_else</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>cstack</name></expr></argument>, <argument><expr><name>query_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"endif"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_endif</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>cstack</name></expr></argument>, <argument><expr><name>query_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"encoding"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_encoding</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"errverbose"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_errverbose</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"f"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_f</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"g"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"gx"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_g</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"gdesc"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_gdesc</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"gexec"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_gexec</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"gset"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_gset</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"h"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_help</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"H"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"html"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_html</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"i"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"include"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
			 <call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"ir"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"include_relative"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_include</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"if"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_if</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>cstack</name></expr></argument>, <argument><expr><name>query_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"l"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"list"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
			 <call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"l+"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"list+"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_list</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"lo_"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_lo</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"o"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"out"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_out</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"p"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"print"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_print</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>,
									<argument><expr><name>query_buf</name></expr></argument>, <argument><expr><name>previous_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"password"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_password</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"prompt"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_prompt</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"pset"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_pset</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"q"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"quit"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_quit</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"reset"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_reset</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>, <argument><expr><name>query_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_s</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"set"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_set</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"setenv"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_setenv</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"sf"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"sf+"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_sf_sv</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"sv"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"sv+"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_sf_sv</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"t"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_t</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"T"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_T</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"timing"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_timing</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"unset"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_unset</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"write"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_write</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>,
									<argument><expr><name>query_buf</name></expr></argument>, <argument><expr><name>previous_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"watch"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_watch</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>,
									<argument><expr><name>query_buf</name></expr></argument>, <argument><expr><name>previous_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_x</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"z"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_z</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"!"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_shell_escape</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>exec_command_slash_command_help</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>active_branch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <name>PSQL_CMD_UNKNOWN</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/*
	 * All the commands that return PSQL_CMD_SEND want to execute previous_buf
	 * if query_buf is empty.  For convenience we implement that here, not in
	 * the individual command subroutines.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>PSQL_CMD_SEND</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>copy_previous_query</name><argument_list>(<argument><expr><name>query_buf</name></expr></argument>, <argument><expr><name>previous_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * \a -- toggle field alignment
 *
 * This makes little sense but we keep it around.
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_a</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>popt</name><operator>.</operator><name>topt</name><operator>.</operator><name>format</name></name> <operator>!=</operator> <name>PRINT_ALIGNED</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>do_pset</name><argument_list>(<argument><expr><literal type="string">"format"</literal></expr></argument>, <argument><expr><literal type="string">"aligned"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pset</name><operator>.</operator><name>popt</name></name></expr></argument>, <argument><expr><name><name>pset</name><operator>.</operator><name>quiet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>do_pset</name><argument_list>(<argument><expr><literal type="string">"format"</literal></expr></argument>, <argument><expr><literal type="string">"unaligned"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pset</name><operator>.</operator><name>popt</name></name></expr></argument>, <argument><expr><name><name>pset</name><operator>.</operator><name>quiet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><ternary><condition><expr><name>success</name></expr> ?</condition><then> <expr><name>PSQL_CMD_SKIP_LINE</name></expr> </then><else>: <expr><name>PSQL_CMD_ERROR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \C -- override table title (formerly change HTML caption)
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_C</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>opt</name> <init>= <expr><call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
												 <argument><expr><name>OT_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>do_pset</name><argument_list>(<argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pset</name><operator>.</operator><name>popt</name></name></expr></argument>, <argument><expr><name><name>pset</name><operator>.</operator><name>quiet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ignore_slash_options</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><ternary><condition><expr><name>success</name></expr> ?</condition><then> <expr><name>PSQL_CMD_SKIP_LINE</name></expr> </then><else>: <expr><name>PSQL_CMD_ERROR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \c or \connect -- connect to database using the specified parameters.
 *
 * \c [-reuse-previous=BOOL] dbname user host port
 *
 * Specifying a parameter as '-' is equivalent to omitting it.  Examples:
 *
 * \c - - hst		Connect to current database on current port of
 *					host "hst" as current user.
 * \c - usr - prt	Connect to current database on port "prt" of current host
 *					as user "usr".
 * \c dbs			Connect to database "dbs" on current port of current host
 *					as current user.
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_connect</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>prefix</name><index>[]</index></name> <init>= <expr><literal type="string">"-reuse-previous="</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>opt1</name></decl>,
				   <decl><type ref="prev"><modifier>*</modifier></type><name>opt2</name></decl>,
				   <decl><type ref="prev"><modifier>*</modifier></type><name>opt3</name></decl>,
				   <decl><type ref="prev"><modifier>*</modifier></type><name>opt4</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>enum</name> <name>trivalue</name></name></type> <name>reuse_previous</name> <init>= <expr><name>TRI_DEFAULT</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>opt1</name> <operator>=</operator> <call><name>read_connect_arg</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>opt1</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>opt1</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>bool</name></type>		<name>on_off</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>ParseVariableBool</name><argument_list>(<argument><expr><name>opt1</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
										<argument><expr><literal type="string">"-reuse-previous"</literal></expr></argument>,
										<argument><expr><operator>&amp;</operator><name>on_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>reuse_previous</name> <operator>=</operator> <ternary><condition><expr><name>on_off</name></expr> ?</condition><then> <expr><name>TRI_YES</name></expr> </then><else>: <expr><name>TRI_NO</name></expr></else></ternary></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>opt1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>opt1</name> <operator>=</operator> <call><name>read_connect_arg</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition>			<comment type="block">/* give up if reuse_previous was invalid */</comment>
		<block>{<block_content>
			<expr_stmt><expr><name>opt2</name> <operator>=</operator> <call><name>read_connect_arg</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>opt3</name> <operator>=</operator> <call><name>read_connect_arg</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>opt4</name> <operator>=</operator> <call><name>read_connect_arg</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>do_connect</name><argument_list>(<argument><expr><name>reuse_previous</name></expr></argument>, <argument><expr><name>opt1</name></expr></argument>, <argument><expr><name>opt2</name></expr></argument>, <argument><expr><name>opt3</name></expr></argument>, <argument><expr><name>opt4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>opt2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>opt3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>opt4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>opt1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ignore_slash_options</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><ternary><condition><expr><name>success</name></expr> ?</condition><then> <expr><name>PSQL_CMD_SKIP_LINE</name></expr> </then><else>: <expr><name>PSQL_CMD_ERROR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \cd -- change directory
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_cd</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>opt</name> <init>= <expr><call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
												 <argument><expr><name>OT_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>dir</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>opt</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>dir</name> <operator>=</operator> <name>opt</name></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
			<decl_stmt><decl><type><name><name>struct</name> <name>passwd</name></name> <modifier>*</modifier></type><name>pw</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>uid_t</name></type>		<name>user_id</name> <init>= <expr><call><name>geteuid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>			<comment type="block">/* clear errno before call */</comment>
			<expr_stmt><expr><name>pw</name> <operator>=</operator> <call><name>getpwuid</name><argument_list>(<argument><expr><name>user_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pw</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"could not get home directory for user ID %ld: %s\n"</literal></expr></argument>,
						   <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>user_id</name></expr></argument>,
						   <argument><expr><ternary><condition><expr><name>errno</name></expr> ?</condition><then> <expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"user does not exist"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>dir</name> <operator>=</operator> <name><name>pw</name><operator>-&gt;</operator><name>pw_dir</name></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>							<comment type="block">/* WIN32 */</comment>

			<comment type="block">/*
			 * On Windows, 'cd' without arguments prints the current
			 * directory, so if someone wants to code this here instead...
			 */</comment>
			<expr_stmt><expr><name>dir</name> <operator>=</operator> <literal type="string">"/"</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* WIN32 */</comment>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>chdir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"\\%s: could not change directory to \"%s\": %s\n"</literal></expr></argument>,
					   <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>opt</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ignore_slash_options</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><ternary><condition><expr><name>success</name></expr> ?</condition><then> <expr><name>PSQL_CMD_SKIP_LINE</name></expr> </then><else>: <expr><name>PSQL_CMD_ERROR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \conninfo -- display information about the current connection
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_conninfo</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>db</name> <init>= <expr><call><name>PQdb</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>db</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"You are currently not connected to a database.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>host</name> <init>= <expr><call><name>PQhost</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<comment type="block">/* If the host is an absolute path, the connection is via socket */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>is_absolute_path</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"You are connected to database \"%s\" as user \"%s\" via socket in \"%s\" at port \"%s\".\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
					   <argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>PQuser</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>PQport</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"You are connected to database \"%s\" as user \"%s\" on host \"%s\" at port \"%s\".\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
					   <argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>PQuser</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>PQport</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<expr_stmt><expr><call><name>printSSLInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>PSQL_CMD_SKIP_LINE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \copy -- run a COPY command
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_copy</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>opt</name> <init>= <expr><call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
												 <argument><expr><name>OT_WHOLE_LINE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>do_copy</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ignore_slash_whole_line</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><ternary><condition><expr><name>success</name></expr> ?</condition><then> <expr><name>PSQL_CMD_SKIP_LINE</name></expr> </then><else>: <expr><name>PSQL_CMD_ERROR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \copyright -- print copyright notice
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_copyright</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>print_copyright</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>PSQL_CMD_SKIP_LINE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \crosstabview -- execute a query and display results in crosstab
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_crosstabview</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>backslashResult</name></type> <name>status</name> <init>= <expr><name>PSQL_CMD_SKIP_LINE</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>lengthof</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>ctv_args</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>pset</name><operator>.</operator><name>ctv_args</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
													  <argument><expr><name>OT_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
		<expr_stmt><expr><name><name>pset</name><operator>.</operator><name>crosstab_flag</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <name>PSQL_CMD_SEND</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ignore_slash_options</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \d* commands
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_d</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>backslashResult</name></type> <name>status</name> <init>= <expr><name>PSQL_CMD_SKIP_LINE</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>pattern</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>show_verbose</name></decl>,
					<decl><type ref="prev"/><name>show_system</name></decl>;</decl_stmt>

		<comment type="block">/* We don't do SQLID reduction on the pattern yet */</comment>
		<expr_stmt><expr><name>pattern</name> <operator>=</operator> <call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
										 <argument><expr><name>OT_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>show_verbose</name> <operator>=</operator> <ternary><condition><expr><call><name>strchr</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name>show_system</name> <operator>=</operator> <ternary><condition><expr><call><name>strchr</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt>

		<switch>switch <condition>(<expr><name><name>cmd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><literal type="char">'\0'</literal></expr>:</case>
			<case>case <expr><literal type="char">'+'</literal></expr>:</case>
			<case>case <expr><literal type="char">'S'</literal></expr>:</case>
				<if_stmt><if>if <condition>(<expr><name>pattern</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>describeTableDetails</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>show_verbose</name></expr></argument>, <argument><expr><name>show_system</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<comment type="block">/* standard listing of interesting things */</comment>
					<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>listTables</name><argument_list>(<argument><expr><literal type="string">"tvmsE"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>show_verbose</name></expr></argument>, <argument><expr><name>show_system</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'A'</literal></expr>:</case>
				<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>describeAccessMethods</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>show_verbose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'a'</literal></expr>:</case>
				<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>describeAggregates</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>show_verbose</name></expr></argument>, <argument><expr><name>show_system</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'b'</literal></expr>:</case>
				<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>describeTablespaces</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>show_verbose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'c'</literal></expr>:</case>
				<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>listConversions</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>show_verbose</name></expr></argument>, <argument><expr><name>show_system</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'C'</literal></expr>:</case>
				<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>listCasts</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>show_verbose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'d'</literal></expr>:</case>
				<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"ddp"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>listDefaultACLs</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>objectDescription</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>show_system</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'D'</literal></expr>:</case>
				<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>listDomains</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>show_verbose</name></expr></argument>, <argument><expr><name>show_system</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'f'</literal></expr>:</case>			<comment type="block">/* function subsystem */</comment>
				<switch>switch <condition>(<expr><name><name>cmd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition>
				<block>{<block_content>
					<case>case <expr><literal type="char">'\0'</literal></expr>:</case>
					<case>case <expr><literal type="char">'+'</literal></expr>:</case>
					<case>case <expr><literal type="char">'S'</literal></expr>:</case>
					<case>case <expr><literal type="char">'a'</literal></expr>:</case>
					<case>case <expr><literal type="char">'n'</literal></expr>:</case>
					<case>case <expr><literal type="char">'p'</literal></expr>:</case>
					<case>case <expr><literal type="char">'t'</literal></expr>:</case>
					<case>case <expr><literal type="char">'w'</literal></expr>:</case>
						<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>describeFunctions</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>show_verbose</name></expr></argument>, <argument><expr><name>show_system</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<default>default:</default>
						<expr_stmt><expr><name>status</name> <operator>=</operator> <name>PSQL_CMD_UNKNOWN</name></expr>;</expr_stmt>
						<break>break;</break>
				</block_content>}</block></switch>
				<break>break;</break>
			<case>case <expr><literal type="char">'g'</literal></expr>:</case>
				<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"dgrt"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>listTablegroups</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>show_verbose</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"dgr"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>listTablegroups</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>show_verbose</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<comment type="block">/* no longer distinct from \du */</comment>
					<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>describeRoles</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>show_verbose</name></expr></argument>, <argument><expr><name>show_system</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'l'</literal></expr>:</case>
				<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>do_lo_list</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'L'</literal></expr>:</case>
				<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>listLanguages</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>show_verbose</name></expr></argument>, <argument><expr><name>show_system</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'n'</literal></expr>:</case>
				<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>listSchemas</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>show_verbose</name></expr></argument>, <argument><expr><name>show_system</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'o'</literal></expr>:</case>
				<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>describeOperators</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>show_verbose</name></expr></argument>, <argument><expr><name>show_system</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'O'</literal></expr>:</case>
				<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>listCollations</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>show_verbose</name></expr></argument>, <argument><expr><name>show_system</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'p'</literal></expr>:</case>
				<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>permissionsList</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'T'</literal></expr>:</case>
				<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>describeTypes</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>show_verbose</name></expr></argument>, <argument><expr><name>show_system</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'t'</literal></expr>:</case>
			<case>case <expr><literal type="char">'v'</literal></expr>:</case>
			<case>case <expr><literal type="char">'m'</literal></expr>:</case>
			<case>case <expr><literal type="char">'i'</literal></expr>:</case>
			<case>case <expr><literal type="char">'s'</literal></expr>:</case>
			<case>case <expr><literal type="char">'E'</literal></expr>:</case>
				<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>listTables</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cmd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>show_verbose</name></expr></argument>, <argument><expr><name>show_system</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'r'</literal></expr>:</case>
				<if_stmt><if>if <condition>(<expr><name><name>cmd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'d'</literal> <operator>&amp;&amp;</operator> <name><name>cmd</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'s'</literal></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>pattern2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

					<if_stmt><if>if <condition>(<expr><name>pattern</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>pattern2</name> <operator>=</operator> <call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
														  <argument><expr><name>OT_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>listDbRoleSettings</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>pattern2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<if_stmt><if>if <condition>(<expr><name>pattern2</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pattern2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>status</name> <operator>=</operator> <name>PSQL_CMD_UNKNOWN</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'R'</literal></expr>:</case>
				<switch>switch <condition>(<expr><name><name>cmd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition>
				<block>{<block_content>
					<case>case <expr><literal type="char">'p'</literal></expr>:</case>
						<if_stmt><if>if <condition>(<expr><name>show_verbose</name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>describePublications</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
						<else>else<block type="pseudo"><block_content>
							<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>listPublications</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
						<break>break;</break>
					<case>case <expr><literal type="char">'s'</literal></expr>:</case>
						<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>describeSubscriptions</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>show_verbose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<default>default:</default>
						<expr_stmt><expr><name>status</name> <operator>=</operator> <name>PSQL_CMD_UNKNOWN</name></expr>;</expr_stmt>
				</block_content>}</block></switch>
				<break>break;</break>
			<case>case <expr><literal type="char">'u'</literal></expr>:</case>
				<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>describeRoles</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>show_verbose</name></expr></argument>, <argument><expr><name>show_system</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'F'</literal></expr>:</case>			<comment type="block">/* text search subsystem */</comment>
				<switch>switch <condition>(<expr><name><name>cmd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition>
				<block>{<block_content>
					<case>case <expr><literal type="char">'\0'</literal></expr>:</case>
					<case>case <expr><literal type="char">'+'</literal></expr>:</case>
						<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>listTSConfigs</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>show_verbose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><literal type="char">'p'</literal></expr>:</case>
						<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>listTSParsers</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>show_verbose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><literal type="char">'d'</literal></expr>:</case>
						<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>listTSDictionaries</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>show_verbose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><literal type="char">'t'</literal></expr>:</case>
						<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>listTSTemplates</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>show_verbose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<default>default:</default>
						<expr_stmt><expr><name>status</name> <operator>=</operator> <name>PSQL_CMD_UNKNOWN</name></expr>;</expr_stmt>
						<break>break;</break>
				</block_content>}</block></switch>
				<break>break;</break>
			<case>case <expr><literal type="char">'e'</literal></expr>:</case>			<comment type="block">/* SQL/MED subsystem */</comment>
				<switch>switch <condition>(<expr><name><name>cmd</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition>
				<block>{<block_content>
					<case>case <expr><literal type="char">'s'</literal></expr>:</case>
						<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>listForeignServers</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>show_verbose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><literal type="char">'u'</literal></expr>:</case>
						<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>listUserMappings</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>show_verbose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><literal type="char">'w'</literal></expr>:</case>
						<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>listForeignDataWrappers</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>show_verbose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><literal type="char">'t'</literal></expr>:</case>
						<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>listForeignTables</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>show_verbose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<default>default:</default>
						<expr_stmt><expr><name>status</name> <operator>=</operator> <name>PSQL_CMD_UNKNOWN</name></expr>;</expr_stmt>
						<break>break;</break>
				</block_content>}</block></switch>
				<break>break;</break>
			<case>case <expr><literal type="char">'x'</literal></expr>:</case>			<comment type="block">/* Extensions */</comment>
				<if_stmt><if>if <condition>(<expr><name>show_verbose</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>listExtensionContents</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>listExtensions</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'y'</literal></expr>:</case>			<comment type="block">/* Event Triggers */</comment>
				<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>listEventTriggers</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>show_verbose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><name>status</name> <operator>=</operator> <name>PSQL_CMD_UNKNOWN</name></expr>;</expr_stmt>
		</block_content>}</block></switch>

		<if_stmt><if>if <condition>(<expr><name>pattern</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ignore_slash_options</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <name>PSQL_CMD_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \e or \edit -- edit the current query buffer, or edit a file and
 * make it the query buffer
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_edit</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>,
				  <parameter><decl><type><name>PQExpBuffer</name></type> <name>query_buf</name></decl></parameter>, <parameter><decl><type><name>PQExpBuffer</name></type> <name>previous_buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>backslashResult</name></type> <name>status</name> <init>= <expr><name>PSQL_CMD_SKIP_LINE</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>query_buf</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"no query buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>status</name> <operator>=</operator> <name>PSQL_CMD_ERROR</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>ln</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>lineno</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
										   <argument><expr><name>OT_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>fname</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* try to get separate lineno arg */</comment>
				<expr_stmt><expr><name>ln</name> <operator>=</operator> <call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
											<argument><expr><name>OT_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>ln</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* only one arg; maybe it is lineno not fname */</comment>
					<if_stmt><if>if <condition>(<expr><name><name>fname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator>
						<call><name>strspn</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"0123456789"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<comment type="block">/* all digits, so assume it is lineno */</comment>
						<expr_stmt><expr><name>ln</name> <operator>=</operator> <name>fname</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>fname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>ln</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>lineno</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>lineno</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"invalid line number: %s\n"</literal></expr></argument>, <argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>status</name> <operator>=</operator> <name>PSQL_CMD_ERROR</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>PSQL_CMD_ERROR</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>expand_tilde</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>fname</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>canonicalize_path</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<comment type="block">/* If query_buf is empty, recall previous query for editing */</comment>
				<expr_stmt><expr><call><name>copy_previous_query</name><argument_list>(<argument><expr><name>query_buf</name></expr></argument>, <argument><expr><name>previous_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>do_edit</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>query_buf</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>status</name> <operator>=</operator> <name>PSQL_CMD_NEWEDIT</name></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>status</name> <operator>=</operator> <name>PSQL_CMD_ERROR</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>fname</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>ln</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ln</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ignore_slash_options</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \ef/\ev -- edit the named function/view, or
 * present a blank CREATE FUNCTION/VIEW template if no argument is given
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_ef_ev</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>,
				   <parameter><decl><type><name>PQExpBuffer</name></type> <name>query_buf</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>backslashResult</name></type> <name>status</name> <init>= <expr><name>PSQL_CMD_SKIP_LINE</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>obj_desc</name> <init>= <expr><call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
													  <argument><expr><name>OT_WHOLE_LINE</name></expr></argument>,
													  <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>lineno</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>sversion</name></name> <operator>&lt;</operator> <operator>(</operator><ternary><condition><expr><name>is_func</name></expr> ?</condition><then> <expr><literal type="number">80400</literal></expr> </then><else>: <expr><literal type="number">70400</literal></expr></else></ternary><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name></type>		<name><name>sverbuf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>formatPGVersionNumber</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>sversion</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
								  <argument><expr><name>sverbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sverbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>is_func</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"The server (version %s) does not support editing function source.\n"</literal></expr></argument>,
						   <argument><expr><name>sverbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"The server (version %s) does not support editing view definitions.\n"</literal></expr></argument>,
						   <argument><expr><name>sverbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<expr_stmt><expr><name>status</name> <operator>=</operator> <name>PSQL_CMD_ERROR</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><operator>!</operator><name>query_buf</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"no query buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>status</name> <operator>=</operator> <name>PSQL_CMD_ERROR</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>Oid</name></type>			<name>obj_oid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>EditableObjectType</name></type> <name>eot</name> <init>= <expr><ternary><condition><expr><name>is_func</name></expr> ?</condition><then> <expr><name>EditableFunction</name></expr> </then><else>: <expr><name>EditableView</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name>lineno</name> <operator>=</operator> <call><name>strip_lineno_from_objdesc</name><argument_list>(<argument><expr><name>obj_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>lineno</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* error already reported */</comment>
				<expr_stmt><expr><name>status</name> <operator>=</operator> <name>PSQL_CMD_ERROR</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><operator>!</operator><name>obj_desc</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* set up an empty command to fill in */</comment>
				<expr_stmt><expr><call><name>resetPQExpBuffer</name><argument_list>(<argument><expr><name>query_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>is_func</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>appendPQExpBufferStr</name><argument_list>(<argument><expr><name>query_buf</name></expr></argument>,
										 <argument><expr><literal type="string">"CREATE FUNCTION ( )\n"</literal>
										 <literal type="string">" RETURNS \n"</literal>
										 <literal type="string">" LANGUAGE \n"</literal>
										 <literal type="string">" -- common options:  IMMUTABLE  STABLE  STRICT  SECURITY DEFINER\n"</literal>
										 <literal type="string">"AS $function$\n"</literal>
										 <literal type="string">"\n$function$\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>appendPQExpBufferStr</name><argument_list>(<argument><expr><name>query_buf</name></expr></argument>,
										 <argument><expr><literal type="string">"CREATE VIEW  AS\n"</literal>
										 <literal type="string">" SELECT \n"</literal>
										 <literal type="string">"  -- something...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>lookup_object_oid</name><argument_list>(<argument><expr><name>eot</name></expr></argument>, <argument><expr><name>obj_desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>obj_oid</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* error already reported */</comment>
				<expr_stmt><expr><name>status</name> <operator>=</operator> <name>PSQL_CMD_ERROR</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>get_create_object_cmd</name><argument_list>(<argument><expr><name>eot</name></expr></argument>, <argument><expr><name>obj_oid</name></expr></argument>, <argument><expr><name>query_buf</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* error already reported */</comment>
				<expr_stmt><expr><name>status</name> <operator>=</operator> <name>PSQL_CMD_ERROR</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>is_func</name> <operator>&amp;&amp;</operator> <name>lineno</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * lineno "1" should correspond to the first line of the
				 * function body.  We expect that pg_get_functiondef() will
				 * emit that on a line beginning with "AS ", and that there
				 * can be no such line before the real start of the function
				 * body.  Increment lineno by the number of lines before that
				 * line, so that it becomes relative to the first line of the
				 * function definition.
				 */</comment>
				<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lines</name> <init>= <expr><name><name>query_buf</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

				<while>while <condition>(<expr><operator>*</operator><name>lines</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>lines</name></expr></argument>, <argument><expr><literal type="string">"AS "</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<break>break;</break></block_content></block></if></if_stmt>
					<expr_stmt><expr><name>lineno</name><operator>++</operator></expr>;</expr_stmt>
					<comment type="block">/* find start of next line */</comment>
					<expr_stmt><expr><name>lines</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>lines</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lines</name></expr>)</condition><block type="pseudo"><block_content>
						<break>break;</break></block_content></block></if></if_stmt>
					<expr_stmt><expr><name>lines</name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></while>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>PSQL_CMD_ERROR</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>bool</name></type>		<name>edited</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>do_edit</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>query_buf</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>edited</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>status</name> <operator>=</operator> <name>PSQL_CMD_ERROR</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><operator>!</operator><name>edited</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"No changes"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>status</name> <operator>=</operator> <name>PSQL_CMD_NEWEDIT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>obj_desc</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>obj_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ignore_slash_whole_line</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \echo and \qecho -- echo arguments to stdout or query output
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_echo</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type>		<name>quoted</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>no_newline</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>first</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>FILE</name>	   <modifier>*</modifier></type><name>fout</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"qecho"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>fout</name> <operator>=</operator> <name><name>pset</name><operator>.</operator><name>queryFout</name></name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>fout</name> <operator>=</operator> <name>stdout</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<while>while <condition>(<expr><operator>(</operator><name>value</name> <operator>=</operator> <call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
											   <argument><expr><name>OT_NORMAL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>quoted</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>quoted</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"-n"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>no_newline</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
			<else>else
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>first</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>fout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>fout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>no_newline</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>fout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ignore_slash_options</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><name>PSQL_CMD_SKIP_LINE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \encoding -- set/show client side encoding
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_encoding</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>encoding</name> <init>= <expr><call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
													  <argument><expr><name>OT_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>encoding</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* show encoding */</comment>
			<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><call><name>pg_encoding_to_char</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>encoding</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* set encoding */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>PQsetClientEncoding</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"%s: invalid encoding name or conversion procedure not found\n"</literal></expr></argument>, <argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/* save encoding info into psql internal data */</comment>
				<expr_stmt><expr><name><name>pset</name><operator>.</operator><name>encoding</name></name> <operator>=</operator> <call><name>PQclientEncoding</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>pset</name><operator>.</operator><name>popt</name><operator>.</operator><name>topt</name><operator>.</operator><name>encoding</name></name> <operator>=</operator> <name><name>pset</name><operator>.</operator><name>encoding</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>SetVariable</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>vars</name></name></expr></argument>, <argument><expr><literal type="string">"ENCODING"</literal></expr></argument>,
							<argument><expr><call><name>pg_encoding_to_char</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>encoding</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ignore_slash_options</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><name>PSQL_CMD_SKIP_LINE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \errverbose -- display verbose message from last failed query
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_errverbose</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>last_error_result</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>PQresultVerboseErrorMessage</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>last_error_result</name></name></expr></argument>,
											  <argument><expr><name>PQERRORS_VERBOSE</name></expr></argument>,
											  <argument><expr><name>PQSHOW_CONTEXT_ALWAYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>PQfreemem</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"There is no previous error."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>PSQL_CMD_SKIP_LINE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \f -- change field separator
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_f</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>fname</name> <init>= <expr><call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
												   <argument><expr><name>OT_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>do_pset</name><argument_list>(<argument><expr><literal type="string">"fieldsep"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pset</name><operator>.</operator><name>popt</name></name></expr></argument>, <argument><expr><name><name>pset</name><operator>.</operator><name>quiet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ignore_slash_options</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><ternary><condition><expr><name>success</name></expr> ?</condition><then> <expr><name>PSQL_CMD_SKIP_LINE</name></expr> </then><else>: <expr><name>PSQL_CMD_ERROR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \g [filename] -- send query, optionally with output to file/pipe
 * \gx [filename] -- same as \g, with expanded mode forced
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_g</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>backslashResult</name></type> <name>status</name> <init>= <expr><name>PSQL_CMD_SKIP_LINE</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>fname</name> <init>= <expr><call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
												   <argument><expr><name>OT_FILEPIPE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fname</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>pset</name><operator>.</operator><name>gfname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>expand_tilde</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>pset</name><operator>.</operator><name>gfname</name></name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"gx"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>pset</name><operator>.</operator><name>g_expanded</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <name>PSQL_CMD_SEND</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ignore_slash_filepipe</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \gdesc -- describe query result
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_gdesc</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>backslashResult</name></type> <name>status</name> <init>= <expr><name>PSQL_CMD_SKIP_LINE</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>pset</name><operator>.</operator><name>gdesc_flag</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <name>PSQL_CMD_SEND</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \gexec -- send query and execute each field of result
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_gexec</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>backslashResult</name></type> <name>status</name> <init>= <expr><name>PSQL_CMD_SKIP_LINE</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>pset</name><operator>.</operator><name>gexec_flag</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <name>PSQL_CMD_SEND</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \gset [prefix] -- send query and store result into variables
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_gset</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>backslashResult</name></type> <name>status</name> <init>= <expr><name>PSQL_CMD_SKIP_LINE</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>prefix</name> <init>= <expr><call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
													<argument><expr><name>OT_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>prefix</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>pset</name><operator>.</operator><name>gset_prefix</name></name> <operator>=</operator> <name>prefix</name></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* we must set a non-NULL prefix to trigger storing */</comment>
			<expr_stmt><expr><name><name>pset</name><operator>.</operator><name>gset_prefix</name></name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<comment type="block">/* gset_prefix is freed later */</comment>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <name>PSQL_CMD_SEND</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ignore_slash_options</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \help [topic] -- print help about SQL commands
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_help</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>opt</name> <init>= <expr><call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
												 <argument><expr><name>OT_WHOLE_LINE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>size_t</name></type>		<name>len</name></decl>;</decl_stmt>

		<comment type="block">/* strip any trailing spaces and semicolons */</comment>
		<if_stmt><if>if <condition>(<expr><name>opt</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
				   <operator>(</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>opt</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>
					<operator>||</operator> <name><name>opt</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">';'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>opt</name><index>[<expr><operator>--</operator><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></while>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>helpSQL</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name><name>pset</name><operator>.</operator><name>popt</name><operator>.</operator><name>topt</name><operator>.</operator><name>pager</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ignore_slash_whole_line</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><name>PSQL_CMD_SKIP_LINE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \H and \html -- toggle HTML formatting
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_html</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>popt</name><operator>.</operator><name>topt</name><operator>.</operator><name>format</name></name> <operator>!=</operator> <name>PRINT_HTML</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>do_pset</name><argument_list>(<argument><expr><literal type="string">"format"</literal></expr></argument>, <argument><expr><literal type="string">"html"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pset</name><operator>.</operator><name>popt</name></name></expr></argument>, <argument><expr><name><name>pset</name><operator>.</operator><name>quiet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>do_pset</name><argument_list>(<argument><expr><literal type="string">"format"</literal></expr></argument>, <argument><expr><literal type="string">"aligned"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pset</name><operator>.</operator><name>popt</name></name></expr></argument>, <argument><expr><name><name>pset</name><operator>.</operator><name>quiet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><ternary><condition><expr><name>success</name></expr> ?</condition><then> <expr><name>PSQL_CMD_SKIP_LINE</name></expr> </then><else>: <expr><name>PSQL_CMD_ERROR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \i and \ir -- include a file
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_include</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>fname</name> <init>= <expr><call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
												   <argument><expr><name>OT_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fname</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"\\%s: missing required argument\n"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>bool</name></type>		<name>include_relative</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>include_relative</name> <operator>=</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"ir"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>
								<operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"include_relative"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>expand_tilde</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <operator>(</operator><call><name>process_file</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>include_relative</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>EXIT_SUCCESS</name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ignore_slash_options</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><ternary><condition><expr><name>success</name></expr> ?</condition><then> <expr><name>PSQL_CMD_SKIP_LINE</name></expr> </then><else>: <expr><name>PSQL_CMD_ERROR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \if &lt;expr&gt; -- beginning of an \if..\endif block
 *
 * &lt;expr&gt; is parsed as a boolean expression.  Invalid expressions will emit a
 * warning and be treated as false.  Statements that follow a false expression
 * will be parsed but ignored.  Note that in the case where an \if statement
 * is itself within an inactive section of a block, then the entire inner
 * \if..\endif block will be parsed but ignored.
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_if</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>ConditionalStack</name></type> <name>cstack</name></decl></parameter>,
				<parameter><decl><type><name>PQExpBuffer</name></type> <name>query_buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>conditional_active</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * First, push a new active stack entry; this ensures that the lexer
		 * will perform variable substitution and backtick evaluation while
		 * scanning the expression.  (That should happen anyway, since we know
		 * we're in an active outer branch, but let's be sure.)
		 */</comment>
		<expr_stmt><expr><call><name>conditional_stack_push</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>, <argument><expr><name>IFSTATE_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Remember current query state in case we need to restore later */</comment>
		<expr_stmt><expr><call><name>save_query_text_state</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>cstack</name></expr></argument>, <argument><expr><name>query_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Evaluate the expression; if it's false, change to inactive state.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_true_boolean_expression</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><literal type="string">"\\if expression"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>conditional_stack_poke</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>, <argument><expr><name>IFSTATE_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * We're within an inactive outer branch, so this entire \if block
		 * will be ignored.  We don't want to evaluate the expression, so push
		 * the "ignored" stack state before scanning it.
		 */</comment>
		<expr_stmt><expr><call><name>conditional_stack_push</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>, <argument><expr><name>IFSTATE_IGNORED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Remember current query state in case we need to restore later */</comment>
		<expr_stmt><expr><call><name>save_query_text_state</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>cstack</name></expr></argument>, <argument><expr><name>query_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ignore_boolean_expression</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>PSQL_CMD_SKIP_LINE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \elif &lt;expr&gt; -- alternative branch in an \if..\endif block
 *
 * &lt;expr&gt; is evaluated the same as in \if &lt;expr&gt;.
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_elif</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>ConditionalStack</name></type> <name>cstack</name></decl></parameter>,
				  <parameter><decl><type><name>PQExpBuffer</name></type> <name>query_buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><call><name>conditional_stack_peek</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>IFSTATE_TRUE</name></expr>:</case>

			<comment type="block">/*
			 * Just finished active branch of this \if block.  Update saved
			 * state so we will keep whatever data was put in query_buf by the
			 * active branch.
			 */</comment>
			<expr_stmt><expr><call><name>save_query_text_state</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>cstack</name></expr></argument>, <argument><expr><name>query_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * Discard \elif expression and ignore the rest until \endif.
			 * Switch state before reading expression to ensure proper lexer
			 * behavior.
			 */</comment>
			<expr_stmt><expr><call><name>conditional_stack_poke</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>, <argument><expr><name>IFSTATE_IGNORED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ignore_boolean_expression</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>IFSTATE_FALSE</name></expr>:</case>

			<comment type="block">/*
			 * Discard any query text added by the just-skipped branch.
			 */</comment>
			<expr_stmt><expr><call><name>discard_query_text</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>cstack</name></expr></argument>, <argument><expr><name>query_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * Have not yet found a true expression in this \if block, so this
			 * might be the first.  We have to change state before examining
			 * the expression, or the lexer won't do the right thing.
			 */</comment>
			<expr_stmt><expr><call><name>conditional_stack_poke</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>, <argument><expr><name>IFSTATE_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_true_boolean_expression</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><literal type="string">"\\elif expression"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>conditional_stack_poke</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>, <argument><expr><name>IFSTATE_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>IFSTATE_IGNORED</name></expr>:</case>

			<comment type="block">/*
			 * Discard any query text added by the just-skipped branch.
			 */</comment>
			<expr_stmt><expr><call><name>discard_query_text</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>cstack</name></expr></argument>, <argument><expr><name>query_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * Skip expression and move on.  Either the \if block already had
			 * an active section, or whole block is being skipped.
			 */</comment>
			<expr_stmt><expr><call><name>ignore_boolean_expression</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>IFSTATE_ELSE_TRUE</name></expr>:</case>
		<case>case <expr><name>IFSTATE_ELSE_FALSE</name></expr>:</case>
			<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"\\elif: cannot occur after \\else\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>IFSTATE_NONE</name></expr>:</case>
			<comment type="block">/* no \if to elif from */</comment>
			<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"\\elif: no matching \\if\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<return>return <expr><ternary><condition><expr><name>success</name></expr> ?</condition><then> <expr><name>PSQL_CMD_SKIP_LINE</name></expr> </then><else>: <expr><name>PSQL_CMD_ERROR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \else -- final alternative in an \if..\endif block
 *
 * Statements within an \else branch will only be executed if
 * all previous \if and \elif expressions evaluated to false
 * and the block was not itself being ignored.
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_else</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>ConditionalStack</name></type> <name>cstack</name></decl></parameter>,
				  <parameter><decl><type><name>PQExpBuffer</name></type> <name>query_buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><call><name>conditional_stack_peek</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>IFSTATE_TRUE</name></expr>:</case>

			<comment type="block">/*
			 * Just finished active branch of this \if block.  Update saved
			 * state so we will keep whatever data was put in query_buf by the
			 * active branch.
			 */</comment>
			<expr_stmt><expr><call><name>save_query_text_state</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>cstack</name></expr></argument>, <argument><expr><name>query_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* Now skip the \else branch */</comment>
			<expr_stmt><expr><call><name>conditional_stack_poke</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>, <argument><expr><name>IFSTATE_ELSE_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>IFSTATE_FALSE</name></expr>:</case>

			<comment type="block">/*
			 * Discard any query text added by the just-skipped branch.
			 */</comment>
			<expr_stmt><expr><call><name>discard_query_text</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>cstack</name></expr></argument>, <argument><expr><name>query_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * We've not found any true \if or \elif expression, so execute
			 * the \else branch.
			 */</comment>
			<expr_stmt><expr><call><name>conditional_stack_poke</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>, <argument><expr><name>IFSTATE_ELSE_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>IFSTATE_IGNORED</name></expr>:</case>

			<comment type="block">/*
			 * Discard any query text added by the just-skipped branch.
			 */</comment>
			<expr_stmt><expr><call><name>discard_query_text</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>cstack</name></expr></argument>, <argument><expr><name>query_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * Either we previously processed the active branch of this \if,
			 * or the whole \if block is being skipped.  Either way, skip the
			 * \else branch.
			 */</comment>
			<expr_stmt><expr><call><name>conditional_stack_poke</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>, <argument><expr><name>IFSTATE_ELSE_FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>IFSTATE_ELSE_TRUE</name></expr>:</case>
		<case>case <expr><name>IFSTATE_ELSE_FALSE</name></expr>:</case>
			<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"\\else: cannot occur after \\else\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>IFSTATE_NONE</name></expr>:</case>
			<comment type="block">/* no \if to else from */</comment>
			<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"\\else: no matching \\if\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<return>return <expr><ternary><condition><expr><name>success</name></expr> ?</condition><then> <expr><name>PSQL_CMD_SKIP_LINE</name></expr> </then><else>: <expr><name>PSQL_CMD_ERROR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \endif -- ends an \if...\endif block
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_endif</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>ConditionalStack</name></type> <name>cstack</name></decl></parameter>,
				   <parameter><decl><type><name>PQExpBuffer</name></type> <name>query_buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><call><name>conditional_stack_peek</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>IFSTATE_TRUE</name></expr>:</case>
		<case>case <expr><name>IFSTATE_ELSE_TRUE</name></expr>:</case>
			<comment type="block">/* Close the \if block, keeping the query text */</comment>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>conditional_stack_pop</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>IFSTATE_FALSE</name></expr>:</case>
		<case>case <expr><name>IFSTATE_IGNORED</name></expr>:</case>
		<case>case <expr><name>IFSTATE_ELSE_FALSE</name></expr>:</case>

			<comment type="block">/*
			 * Discard any query text added by the just-skipped branch.
			 */</comment>
			<expr_stmt><expr><call><name>discard_query_text</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>cstack</name></expr></argument>, <argument><expr><name>query_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* Close the \if block */</comment>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>conditional_stack_pop</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>IFSTATE_NONE</name></expr>:</case>
			<comment type="block">/* no \if to end */</comment>
			<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"\\endif: no matching \\if\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<return>return <expr><ternary><condition><expr><name>success</name></expr> ?</condition><then> <expr><name>PSQL_CMD_SKIP_LINE</name></expr> </then><else>: <expr><name>PSQL_CMD_ERROR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \l -- list databases
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_list</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>pattern</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>show_verbose</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>pattern</name> <operator>=</operator> <call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
										 <argument><expr><name>OT_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>show_verbose</name> <operator>=</operator> <ternary><condition><expr><call><name>strchr</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt>

		<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>listAllDbs</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name>show_verbose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>pattern</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ignore_slash_options</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><ternary><condition><expr><name>success</name></expr> ?</condition><then> <expr><name>PSQL_CMD_SKIP_LINE</name></expr> </then><else>: <expr><name>PSQL_CMD_ERROR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \lo_* -- large object operations
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_lo</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>backslashResult</name></type> <name>status</name> <init>= <expr><name>PSQL_CMD_SKIP_LINE</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>opt1</name></decl>,
				   <decl><type ref="prev"><modifier>*</modifier></type><name>opt2</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>opt1</name> <operator>=</operator> <call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
									  <argument><expr><name>OT_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>opt2</name> <operator>=</operator> <call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
									  <argument><expr><name>OT_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"export"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>opt2</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"\\%s: missing required argument\n"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>expand_tilde</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>do_lo_export</name><argument_list>(<argument><expr><name>opt1</name></expr></argument>, <argument><expr><name>opt2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>

		<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"import"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>opt1</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"\\%s: missing required argument\n"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>expand_tilde</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opt1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>do_lo_import</name><argument_list>(<argument><expr><name>opt1</name></expr></argument>, <argument><expr><name>opt2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>

		<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"list"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>do_lo_list</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

		<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"unlink"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>opt1</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"\\%s: missing required argument\n"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>do_lo_unlink</name><argument_list>(<argument><expr><name>opt1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if>

		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>status</name> <operator>=</operator> <name>PSQL_CMD_UNKNOWN</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>opt1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>opt2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ignore_slash_options</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <name>PSQL_CMD_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \o -- set query output
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_out</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>fname</name> <init>= <expr><call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
												   <argument><expr><name>OT_FILEPIPE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>expand_tilde</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>setQFout</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ignore_slash_filepipe</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><ternary><condition><expr><name>success</name></expr> ?</condition><then> <expr><name>PSQL_CMD_SKIP_LINE</name></expr> </then><else>: <expr><name>PSQL_CMD_ERROR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \p -- print the current query buffer
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_print</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>,
				   <parameter><decl><type><name>PQExpBuffer</name></type> <name>query_buf</name></decl></parameter>, <parameter><decl><type><name>PQExpBuffer</name></type> <name>previous_buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * We want to print the same thing \g would execute, but not to change
		 * the query buffer state; so we can't use copy_previous_query().
		 * Also, beware of possibility that buffer pointers are NULL.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>query_buf</name> <operator>&amp;&amp;</operator> <name><name>query_buf</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><name><name>query_buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>previous_buf</name> <operator>&amp;&amp;</operator> <name><name>previous_buf</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><name><name>previous_buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>pset</name><operator>.</operator><name>quiet</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Query buffer is empty."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>PSQL_CMD_SKIP_LINE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \password -- set user password
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_password</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>opt0</name> <init>= <expr><call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
												  <argument><expr><name>OT_SQLID</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>pw1</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>pw2</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>simple_prompt</name><argument_list>(<argument><expr><literal type="string">"Enter new password: "</literal></expr></argument>, <argument><expr><name>pw1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pw1</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>simple_prompt</name><argument_list>(<argument><expr><literal type="string">"Enter it again: "</literal></expr></argument>, <argument><expr><name>pw2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pw2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>pw1</name></expr></argument>, <argument><expr><name>pw2</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"Passwords didn't match.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>user</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>encrypted_password</name></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>opt0</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>user</name> <operator>=</operator> <name>opt0</name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>user</name> <operator>=</operator> <call><name>PQuser</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<expr_stmt><expr><name>encrypted_password</name> <operator>=</operator> <call><name>PQencryptPasswordConn</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>pw1</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>encrypted_password</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<decl_stmt><decl><type><name>PQExpBufferData</name></type> <name>buf</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>PGresult</name>   <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>initPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>printfPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="string">"ALTER USER %s PASSWORD "</literal></expr></argument>,
								  <argument><expr><call><name>fmtId</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>appendStringLiteralConn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>encrypted_password</name></expr></argument>, <argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PSQLexec</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>termPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<expr_stmt><expr><call><name>PQfreemem</name><argument_list>(<argument><expr><name>encrypted_password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>opt0</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>opt0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ignore_slash_options</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><ternary><condition><expr><name>success</name></expr> ?</condition><then> <expr><name>PSQL_CMD_SKIP_LINE</name></expr> </then><else>: <expr><name>PSQL_CMD_ERROR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \prompt -- prompt and set variable
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_prompt</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>,
					<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>opt</name></decl>,
				   <decl><type ref="prev"><modifier>*</modifier></type><name>prompt_text</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>arg1</name></decl>,
				   <decl><type ref="prev"><modifier>*</modifier></type><name>arg2</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>arg1</name> <operator>=</operator> <call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>OT_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>arg2</name> <operator>=</operator> <call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>OT_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>arg1</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"\\%s: missing required argument\n"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>arg2</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>prompt_text</name> <operator>=</operator> <name>arg1</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>opt</name> <operator>=</operator> <name>arg2</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>opt</name> <operator>=</operator> <name>arg1</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pset</name><operator>.</operator><name>inputfile</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>pg_malloc</name><argument_list>(<argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>simple_prompt</name><argument_list>(<argument><expr><name>prompt_text</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>prompt_text</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>prompt_text</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>gets_fromFile</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"\\%s: could not read value for variable\n"</literal></expr></argument>,
							   <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></else></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&amp;&amp;</operator>
				<operator>!</operator><call><name>SetVariable</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>vars</name></name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>prompt_text</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>prompt_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ignore_slash_options</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><ternary><condition><expr><name>success</name></expr> ?</condition><then> <expr><name>PSQL_CMD_SKIP_LINE</name></expr> </then><else>: <expr><name>PSQL_CMD_ERROR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \pset -- set printing parameters
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_pset</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>opt0</name> <init>= <expr><call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
												  <argument><expr><name>OT_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>opt1</name> <init>= <expr><call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
												  <argument><expr><name>OT_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>opt0</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* list all variables */</comment>

			<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>my_list</name><index>[]</index></name> <init>= <expr><block>{
				<expr><literal type="string">"border"</literal></expr>, <expr><literal type="string">"columns"</literal></expr>, <expr><literal type="string">"expanded"</literal></expr>, <expr><literal type="string">"fieldsep"</literal></expr>, <expr><literal type="string">"fieldsep_zero"</literal></expr>,
				<expr><literal type="string">"footer"</literal></expr>, <expr><literal type="string">"format"</literal></expr>, <expr><literal type="string">"linestyle"</literal></expr>, <expr><literal type="string">"null"</literal></expr>,
				<expr><literal type="string">"numericlocale"</literal></expr>, <expr><literal type="string">"pager"</literal></expr>, <expr><literal type="string">"pager_min_lines"</literal></expr>,
				<expr><literal type="string">"recordsep"</literal></expr>, <expr><literal type="string">"recordsep_zero"</literal></expr>,
				<expr><literal type="string">"tableattr"</literal></expr>, <expr><literal type="string">"title"</literal></expr>, <expr><literal type="string">"tuples_only"</literal></expr>,
				<expr><literal type="string">"unicode_border_linestyle"</literal></expr>,
				<expr><literal type="string">"unicode_column_linestyle"</literal></expr>,
				<expr><literal type="string">"unicode_header_linestyle"</literal></expr>,
				<expr><name>NULL</name></expr>
			}</block></expr></init></decl>;</decl_stmt>

			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>my_list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>pset_value_string</name><argument_list>(<argument><expr><name><name>my_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pset</name><operator>.</operator><name>popt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-24s %s\n"</literal></expr></argument>, <argument><expr><name><name>my_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>

			<expr_stmt><expr><name>success</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>do_pset</name><argument_list>(<argument><expr><name>opt0</name></expr></argument>, <argument><expr><name>opt1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pset</name><operator>.</operator><name>popt</name></name></expr></argument>, <argument><expr><name><name>pset</name><operator>.</operator><name>quiet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>opt0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>opt1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ignore_slash_options</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><ternary><condition><expr><name>success</name></expr> ?</condition><then> <expr><name>PSQL_CMD_SKIP_LINE</name></expr> </then><else>: <expr><name>PSQL_CMD_ERROR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \q or \quit -- exit psql
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_quit</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>backslashResult</name></type> <name>status</name> <init>= <expr><name>PSQL_CMD_SKIP_LINE</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <name>PSQL_CMD_TERMINATE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \r -- reset (clear) the query buffer
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_reset</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>,
				   <parameter><decl><type><name>PQExpBuffer</name></type> <name>query_buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>resetPQExpBuffer</name><argument_list>(<argument><expr><name>query_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>psql_scan_reset</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pset</name><operator>.</operator><name>quiet</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Query buffer reset (cleared)."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>PSQL_CMD_SKIP_LINE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \s -- save history in a file or show it on the screen
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_s</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>fname</name> <init>= <expr><call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
												   <argument><expr><name>OT_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>expand_tilde</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>printHistory</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name><name>pset</name><operator>.</operator><name>popt</name><operator>.</operator><name>topt</name><operator>.</operator><name>pager</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>success</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pset</name><operator>.</operator><name>quiet</name></name> <operator>&amp;&amp;</operator> <name>fname</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Wrote history to file \"%s\".\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fname</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ignore_slash_options</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><ternary><condition><expr><name>success</name></expr> ?</condition><then> <expr><name>PSQL_CMD_SKIP_LINE</name></expr> </then><else>: <expr><name>PSQL_CMD_ERROR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \set -- set variable
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_set</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>opt0</name> <init>= <expr><call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
												  <argument><expr><name>OT_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>opt0</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* list all variables */</comment>
			<expr_stmt><expr><call><name>PrintVariables</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>vars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/*
			 * Set variable to the concatenation of the arguments.
			 */</comment>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>newval</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>opt</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>opt</name> <operator>=</operator> <call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
										 <argument><expr><name>OT_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>newval</name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><ternary><condition><expr><name>opt</name></expr> ?</condition><then> <expr><name>opt</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<while>while <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
												 <argument><expr><name>OT_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>newval</name> <operator>=</operator> <call><name>pg_realloc</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>newval</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></while>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetVariable</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>vars</name></name></expr></argument>, <argument><expr><name>opt0</name></expr></argument>, <argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>opt0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ignore_slash_options</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><ternary><condition><expr><name>success</name></expr> ?</condition><then> <expr><name>PSQL_CMD_SKIP_LINE</name></expr> </then><else>: <expr><name>PSQL_CMD_ERROR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \setenv -- set environment variable
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_setenv</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>,
					<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>envvar</name> <init>= <expr><call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
													<argument><expr><name>OT_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>envval</name> <init>= <expr><call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
													<argument><expr><name>OT_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>envvar</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"\\%s: missing required argument\n"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>envvar</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"\\%s: environment variable name must not contain \"=\"\n"</literal></expr></argument>,
					   <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><operator>!</operator><name>envval</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* No argument - unset the environment variable */</comment>
			<expr_stmt><expr><call><name>unsetenv</name><argument_list>(<argument><expr><name>envvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* Set variable to the value of the next argument */</comment>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>newval</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>newval</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"%s=%s"</literal></expr></argument>, <argument><expr><name>envvar</name></expr></argument>, <argument><expr><name>envval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>putenv</name><argument_list>(<argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

			<comment type="block">/*
			 * Do not free newval here, it will screw up the environment if
			 * you do. See putenv man page for details. That means we leak a
			 * bit of memory here, but not enough to worry about.
			 */</comment>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>envvar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>envval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ignore_slash_options</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><ternary><condition><expr><name>success</name></expr> ?</condition><then> <expr><name>PSQL_CMD_SKIP_LINE</name></expr> </then><else>: <expr><name>PSQL_CMD_ERROR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \sf/\sv -- show a function/view's source code
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_sf_sv</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>,
				   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>backslashResult</name></type> <name>status</name> <init>= <expr><name>PSQL_CMD_SKIP_LINE</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type>		<name>show_linenumbers</name> <init>= <expr><operator>(</operator><call><name>strchr</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="char">'+'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PQExpBuffer</name></type> <name>buf</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>obj_desc</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Oid</name></type>			<name>obj_oid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>EditableObjectType</name></type> <name>eot</name> <init>= <expr><ternary><condition><expr><name>is_func</name></expr> ?</condition><then> <expr><name>EditableFunction</name></expr> </then><else>: <expr><name>EditableView</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>createPQExpBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>obj_desc</name> <operator>=</operator> <call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
										  <argument><expr><name>OT_WHOLE_LINE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>sversion</name></name> <operator>&lt;</operator> <operator>(</operator><ternary><condition><expr><name>is_func</name></expr> ?</condition><then> <expr><literal type="number">80400</literal></expr> </then><else>: <expr><literal type="number">70400</literal></expr></else></ternary><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name></type>		<name><name>sverbuf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>formatPGVersionNumber</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>sversion</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
								  <argument><expr><name>sverbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sverbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>is_func</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"The server (version %s) does not support showing function source.\n"</literal></expr></argument>,
						   <argument><expr><name>sverbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"The server (version %s) does not support showing view definitions.\n"</literal></expr></argument>,
						   <argument><expr><name>sverbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<expr_stmt><expr><name>status</name> <operator>=</operator> <name>PSQL_CMD_ERROR</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><operator>!</operator><name>obj_desc</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>is_func</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"function name is required\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"view name is required\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<expr_stmt><expr><name>status</name> <operator>=</operator> <name>PSQL_CMD_ERROR</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>lookup_object_oid</name><argument_list>(<argument><expr><name>eot</name></expr></argument>, <argument><expr><name>obj_desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>obj_oid</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* error already reported */</comment>
			<expr_stmt><expr><name>status</name> <operator>=</operator> <name>PSQL_CMD_ERROR</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>get_create_object_cmd</name><argument_list>(<argument><expr><name>eot</name></expr></argument>, <argument><expr><name>obj_oid</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* error already reported */</comment>
			<expr_stmt><expr><name>status</name> <operator>=</operator> <name>PSQL_CMD_ERROR</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>FILE</name>	   <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type>		<name>is_pager</name></decl>;</decl_stmt>

			<comment type="block">/* Select output stream: stdout, pager, or file */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>queryFout</name></name> <operator>==</operator> <name>stdout</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* count lines in function to see if pager is needed */</comment>
				<decl_stmt><decl><type><name>int</name></type>			<name>lineno</name> <init>= <expr><call><name>count_lines_in_buf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>PageOutput</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pset</name><operator>.</operator><name>popt</name><operator>.</operator><name>topt</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>is_pager</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/* use previously set output file, without pager */</comment>
				<expr_stmt><expr><name>output</name> <operator>=</operator> <name><name>pset</name><operator>.</operator><name>queryFout</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>is_pager</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>show_linenumbers</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * For functions, lineno "1" should correspond to the first
				 * line of the function body.  We expect that
				 * pg_get_functiondef() will emit that on a line beginning
				 * with "AS ", and that there can be no such line before the
				 * real start of the function body.
				 */</comment>
				<expr_stmt><expr><call><name>print_with_linenumbers</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
									   <argument><expr><ternary><condition><expr><name>is_func</name></expr> ?</condition><then> <expr><literal type="string">"AS "</literal></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/* just send the definition to output */</comment>
				<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>is_pager</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ClosePager</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>obj_desc</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>obj_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>destroyPQExpBuffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ignore_slash_whole_line</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \t -- turn off table headers and row count
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_t</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>opt</name> <init>= <expr><call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
												 <argument><expr><name>OT_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>do_pset</name><argument_list>(<argument><expr><literal type="string">"tuples_only"</literal></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pset</name><operator>.</operator><name>popt</name></name></expr></argument>, <argument><expr><name><name>pset</name><operator>.</operator><name>quiet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ignore_slash_options</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><ternary><condition><expr><name>success</name></expr> ?</condition><then> <expr><name>PSQL_CMD_SKIP_LINE</name></expr> </then><else>: <expr><name>PSQL_CMD_ERROR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \T -- define html &lt;table ...&gt; attributes
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_T</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
												   <argument><expr><name>OT_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>do_pset</name><argument_list>(<argument><expr><literal type="string">"tableattr"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pset</name><operator>.</operator><name>popt</name></name></expr></argument>, <argument><expr><name><name>pset</name><operator>.</operator><name>quiet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ignore_slash_options</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><ternary><condition><expr><name>success</name></expr> ?</condition><then> <expr><name>PSQL_CMD_SKIP_LINE</name></expr> </then><else>: <expr><name>PSQL_CMD_ERROR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \timing -- enable/disable timing of queries
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_timing</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>opt</name> <init>= <expr><call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
												 <argument><expr><name>OT_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>opt</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>ParseVariableBool</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"\\timing"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pset</name><operator>.</operator><name>timing</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>pset</name><operator>.</operator><name>timing</name></name> <operator>=</operator> <operator>!</operator><name><name>pset</name><operator>.</operator><name>timing</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pset</name><operator>.</operator><name>quiet</name></name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>timing</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Timing is on."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Timing is off."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ignore_slash_options</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><ternary><condition><expr><name>success</name></expr> ?</condition><then> <expr><name>PSQL_CMD_SKIP_LINE</name></expr> </then><else>: <expr><name>PSQL_CMD_ERROR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \unset -- unset variable
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_unset</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>,
				   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>opt</name> <init>= <expr><call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
												 <argument><expr><name>OT_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>opt</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"\\%s: missing required argument\n"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>SetVariable</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>vars</name></name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ignore_slash_options</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><ternary><condition><expr><name>success</name></expr> ?</condition><then> <expr><name>PSQL_CMD_SKIP_LINE</name></expr> </then><else>: <expr><name>PSQL_CMD_ERROR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \w -- write query buffer to file
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_write</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>,
				   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>,
				   <parameter><decl><type><name>PQExpBuffer</name></type> <name>query_buf</name></decl></parameter>, <parameter><decl><type><name>PQExpBuffer</name></type> <name>previous_buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>backslashResult</name></type> <name>status</name> <init>= <expr><name>PSQL_CMD_SKIP_LINE</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>fname</name> <init>= <expr><call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
												   <argument><expr><name>OT_FILEPIPE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>FILE</name>	   <modifier>*</modifier></type><name>fd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>is_pipe</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>query_buf</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"no query buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>status</name> <operator>=</operator> <name>PSQL_CMD_ERROR</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fname</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"\\%s: missing required argument\n"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>status</name> <operator>=</operator> <name>PSQL_CMD_ERROR</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>expand_tilde</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>fname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'|'</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>is_pipe</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>disable_sigpipe_trap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>popen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fname</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><call><name>canonicalize_path</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fd</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"%s: %s\n"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>status</name> <operator>=</operator> <name>PSQL_CMD_ERROR</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>fd</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>result</name></decl>;</decl_stmt>

			<comment type="block">/*
			 * We want to print the same thing \g would execute, but not to
			 * change the query buffer state; so we can't use
			 * copy_previous_query().  Also, beware of possibility that buffer
			 * pointers are NULL.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>query_buf</name> <operator>&amp;&amp;</operator> <name><name>query_buf</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>query_buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name>previous_buf</name> <operator>&amp;&amp;</operator> <name><name>previous_buf</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>previous_buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>is_pipe</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pclose</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>fclose</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>EOF</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"%s: %s\n"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>status</name> <operator>=</operator> <name>PSQL_CMD_ERROR</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>is_pipe</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>restore_sigpipe_trap</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ignore_slash_filepipe</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \watch -- execute a query every N seconds
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_watch</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>,
				   <parameter><decl><type><name>PQExpBuffer</name></type> <name>query_buf</name></decl></parameter>, <parameter><decl><type><name>PQExpBuffer</name></type> <name>previous_buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>opt</name> <init>= <expr><call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
												 <argument><expr><name>OT_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>double</name></type>		<name>sleep</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

		<comment type="block">/* Convert optional sleep-length argument */</comment>
		<if_stmt><if>if <condition>(<expr><name>opt</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>sleep</name> <operator>=</operator> <call><name>strtod</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>sleep</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>sleep</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* If query_buf is empty, recall and execute previous query */</comment>
		<expr_stmt><expr><call><name>copy_previous_query</name><argument_list>(<argument><expr><name>query_buf</name></expr></argument>, <argument><expr><name>previous_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>do_watch</name><argument_list>(<argument><expr><name>query_buf</name></expr></argument>, <argument><expr><name>sleep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Reset the query buffer as though for \r */</comment>
		<expr_stmt><expr><call><name>resetPQExpBuffer</name><argument_list>(<argument><expr><name>query_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>psql_scan_reset</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ignore_slash_options</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><ternary><condition><expr><name>success</name></expr> ?</condition><then> <expr><name>PSQL_CMD_SKIP_LINE</name></expr> </then><else>: <expr><name>PSQL_CMD_ERROR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \x -- set or toggle expanded table representation
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_x</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>opt</name> <init>= <expr><call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
												 <argument><expr><name>OT_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>do_pset</name><argument_list>(<argument><expr><literal type="string">"expanded"</literal></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pset</name><operator>.</operator><name>popt</name></name></expr></argument>, <argument><expr><name><name>pset</name><operator>.</operator><name>quiet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ignore_slash_options</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><ternary><condition><expr><name>success</name></expr> ?</condition><then> <expr><name>PSQL_CMD_SKIP_LINE</name></expr> </then><else>: <expr><name>PSQL_CMD_ERROR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \z -- list table privileges (equivalent to \dp)
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_z</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>pattern</name> <init>= <expr><call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
													 <argument><expr><name>OT_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>permissionsList</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>pattern</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ignore_slash_options</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><ternary><condition><expr><name>success</name></expr> ?</condition><then> <expr><name>PSQL_CMD_SKIP_LINE</name></expr> </then><else>: <expr><name>PSQL_CMD_ERROR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \! -- execute shell command
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_shell_escape</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>opt</name> <init>= <expr><call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
												 <argument><expr><name>OT_WHOLE_LINE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>success</name> <operator>=</operator> <call><name>do_shell</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ignore_slash_whole_line</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><ternary><condition><expr><name>success</name></expr> ?</condition><then> <expr><name>PSQL_CMD_SKIP_LINE</name></expr> </then><else>: <expr><name>PSQL_CMD_ERROR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * \? -- print help about backslash commands
 */</comment>
<function><type><specifier>static</specifier> <name>backslashResult</name></type>
<name>exec_command_slash_command_help</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active_branch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>active_branch</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>opt0</name> <init>= <expr><call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
												  <argument><expr><name>OT_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>opt0</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>opt0</name></expr></argument>, <argument><expr><literal type="string">"commands"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>slashUsage</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>popt</name><operator>.</operator><name>topt</name><operator>.</operator><name>pager</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>opt0</name></expr></argument>, <argument><expr><literal type="string">"options"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>popt</name><operator>.</operator><name>topt</name><operator>.</operator><name>pager</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>opt0</name></expr></argument>, <argument><expr><literal type="string">"variables"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>helpVariables</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>popt</name><operator>.</operator><name>topt</name><operator>.</operator><name>pager</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>slashUsage</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>popt</name><operator>.</operator><name>topt</name><operator>.</operator><name>pager</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>opt0</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>opt0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ignore_slash_options</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><name>PSQL_CMD_SKIP_LINE</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Read and interpret an argument to the \connect slash command.
 *
 * Returns a malloc'd string, or NULL if no/empty argument.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>read_connect_arg</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name>quote</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Ideally we should treat the arguments as SQL identifiers.  But for
	 * backwards compatibility with 7.2 and older pg_dump files, we have to
	 * take unquoted arguments verbatim (don't downcase them). For now,
	 * double-quoted arguments may be stripped of double quotes (as if SQL
	 * identifiers).  By 7.4 or so, pg_dump files can be expected to
	 * double-quote all mixed-case \connect arguments, and then we can get rid
	 * of OT_SQLIDHACK.
	 */</comment>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>, <argument><expr><name>OT_SQLIDHACK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>quote</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>quote</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>result</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Read a boolean expression, return it as a PQExpBuffer string.
 *
 * Note: anything more or less than one token will certainly fail to be
 * parsed by ParseVariableBool, so we don't worry about complaining here.
 * This routine's return data structure will need to be rethought anyway
 * to support likely future extensions such as "\if defined VARNAME".
 */</comment>
<function><type><specifier>static</specifier> <name>PQExpBuffer</name></type>
<name>gather_boolean_expression</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PQExpBuffer</name></type> <name>exp_buf</name> <init>= <expr><call><name>createPQExpBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>num_options</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

	<comment type="block">/* collect all arguments for the conditional command into exp_buf */</comment>
	<while>while <condition>(<expr><operator>(</operator><name>value</name> <operator>=</operator> <call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
										   <argument><expr><name>OT_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* add spaces between tokens */</comment>
		<if_stmt><if>if <condition>(<expr><name>num_options</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendPQExpBufferChar</name><argument_list>(<argument><expr><name>exp_buf</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>appendPQExpBufferStr</name><argument_list>(<argument><expr><name>exp_buf</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>num_options</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>exp_buf</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Read a boolean expression, return true if the expression
 * was a valid boolean expression that evaluated to true.
 * Otherwise return false.
 *
 * Note: conditional stack's top state must be active, else lexer will
 * fail to expand variables and backticks.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>is_true_boolean_expression</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PQExpBuffer</name></type> <name>buf</name> <init>= <expr><call><name>gather_boolean_expression</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>value</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>success</name> <init>= <expr><call><name>ParseVariableBool</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>destroyPQExpBuffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>success</name> <operator>&amp;&amp;</operator> <name>value</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Read a boolean expression, but do nothing with it.
 *
 * Note: conditional stack's top state must be INACTIVE, else lexer will
 * expand variables and backticks, which we do not want here.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ignore_boolean_expression</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PQExpBuffer</name></type> <name>buf</name> <init>= <expr><call><name>gather_boolean_expression</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>destroyPQExpBuffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Read and discard "normal" slash command options.
 *
 * This should be used for inactive-branch processing of any slash command
 * that eats one or more OT_NORMAL, OT_SQLID, or OT_SQLIDHACK parameters.
 * We don't need to worry about exactly how many it would eat, since the
 * cleanup logic in HandleSlashCmds would silently discard any extras anyway.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ignore_slash_options</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>arg</name> <operator>=</operator> <call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
										 <argument><expr><name>OT_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<comment type="block">/*
 * Read and discard FILEPIPE slash command argument.
 *
 * This *MUST* be used for inactive-branch processing of any slash command
 * that takes an OT_FILEPIPE option.  Otherwise we might consume a different
 * amount of option text in active and inactive cases.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ignore_slash_filepipe</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>arg</name> <init>= <expr><call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
											 <argument><expr><name>OT_FILEPIPE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>arg</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Read and discard whole-line slash command argument.
 *
 * This *MUST* be used for inactive-branch processing of any slash command
 * that takes an OT_WHOLE_LINE option.  Otherwise we might consume a different
 * amount of option text in active and inactive cases.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ignore_slash_whole_line</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>arg</name> <init>= <expr><call><name>psql_scan_slash_option</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
											 <argument><expr><name>OT_WHOLE_LINE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>arg</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Return true if the command given is a branching command.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>is_branching_command</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"if"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
			<call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"elif"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
			<call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"else"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
			<call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"endif"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Prepare to possibly restore query buffer to its current state
 * (cf. discard_query_text).
 *
 * We need to remember the length of the query buffer, and the lexer's
 * notion of the parenthesis nesting depth.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>save_query_text_state</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>ConditionalStack</name></type> <name>cstack</name></decl></parameter>,
					  <parameter><decl><type><name>PQExpBuffer</name></type> <name>query_buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>query_buf</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>conditional_stack_set_query_len</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>, <argument><expr><name><name>query_buf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>conditional_stack_set_paren_depth</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>,
									  <argument><expr><call><name>psql_scan_get_paren_depth</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Discard any query text absorbed during an inactive conditional branch.
 *
 * We must discard data that was appended to query_buf during an inactive
 * \if branch.  We don't have to do anything there if there's no query_buf.
 *
 * Also, reset the lexer state to the same paren depth there was before.
 * (The rest of its state doesn't need attention, since we could not be
 * inside a comment or literal or partial token.)
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>discard_query_text</name><parameter_list>(<parameter><decl><type><name>PsqlScanState</name></type> <name>scan_state</name></decl></parameter>, <parameter><decl><type><name>ConditionalStack</name></type> <name>cstack</name></decl></parameter>,
				   <parameter><decl><type><name>PQExpBuffer</name></type> <name>query_buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>query_buf</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>new_len</name> <init>= <expr><call><name>conditional_stack_get_query_len</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>new_len</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>new_len</name> <operator>&lt;=</operator> <name><name>query_buf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>query_buf</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>new_len</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>query_buf</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>new_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>psql_scan_set_paren_depth</name><argument_list>(<argument><expr><name>scan_state</name></expr></argument>,
							  <argument><expr><call><name>conditional_stack_get_paren_depth</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * If query_buf is empty, copy previous_buf into it.
 *
 * This is used by various slash commands for which re-execution of a
 * previous query is a common usage.  For convenience, we allow the
 * case of query_buf == NULL (and do nothing).
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>copy_previous_query</name><parameter_list>(<parameter><decl><type><name>PQExpBuffer</name></type> <name>query_buf</name></decl></parameter>, <parameter><decl><type><name>PQExpBuffer</name></type> <name>previous_buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>query_buf</name> <operator>&amp;&amp;</operator> <name><name>query_buf</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendPQExpBufferStr</name><argument_list>(<argument><expr><name>query_buf</name></expr></argument>, <argument><expr><name><name>previous_buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Ask the user for a password; 'username' is the username the
 * password is for, if one has been explicitly specified. Returns a
 * malloc'd string.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>prompt_for_password</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>username</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>buf</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>username</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>username</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>simple_prompt</name><argument_list>(<argument><expr><literal type="string">"Password: "</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>prompt_text</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>prompt_text</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Password for user %s: "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>simple_prompt</name><argument_list>(<argument><expr><name>prompt_text</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>prompt_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><call><name>pg_strdup</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>param_is_newly_set</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>old_val</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>new_val</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>old_val</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>old_val</name></expr></argument>, <argument><expr><name>new_val</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * do_connect -- handler for \connect
 *
 * Connects to a database with given parameters. Absent an established
 * connection, all parameters are required. Given -reuse-previous=off or a
 * connection string without -reuse-previous=on, NULL values will pass through
 * to PQconnectdbParams(), so the libpq defaults will be used. Otherwise, NULL
 * values will be replaced with the ones in the current connection.
 *
 * In interactive mode, if connection fails with the given parameters,
 * the old connection will be kept.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>do_connect</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>trivalue</name></name></type> <name>reuse_previous_specification</name></decl></parameter>,
		   <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dbname</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGconn</name>	   <modifier>*</modifier></type><name>o_conn</name> <init>= <expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></init></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>n_conn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PQconninfoOption</name> <modifier>*</modifier></type><name>cinfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nconnopts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>same_host</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>password</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>client_encoding</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>keep_password</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>has_connection_string</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>reuse_previous</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>o_conn</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>dbname</name> <operator>||</operator> <operator>!</operator><name>user</name> <operator>||</operator> <operator>!</operator><name>host</name> <operator>||</operator> <operator>!</operator><name>port</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * We don't know the supplied connection parameters and don't want to
		 * connect to the wrong database by using defaults, so require all
		 * parameters to be specified.
		 */</comment>
		<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"All connection parameters must be supplied because no "</literal>
				   <literal type="string">"database connection exists\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>has_connection_string</name> <operator>=</operator> <ternary><condition><expr><name>dbname</name></expr> ?</condition><then>
		<expr><call><name>recognized_connection_string</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name>reuse_previous_specification</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>TRI_YES</name></expr>:</case>
			<expr_stmt><expr><name>reuse_previous</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>TRI_NO</name></expr>:</case>
			<expr_stmt><expr><name>reuse_previous</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><name>reuse_previous</name> <operator>=</operator> <operator>!</operator><name>has_connection_string</name></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<comment type="block">/* If the old connection does not exist, there is nothing to reuse. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>o_conn</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>reuse_previous</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Silently ignore arguments subsequent to a connection string. */</comment>
	<if_stmt><if>if <condition>(<expr><name>has_connection_string</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>user</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>host</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>port</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * If we intend to re-use connection parameters, collect them out of the
	 * old connection, then replace individual values as necessary. Otherwise,
	 * obtain a PQconninfoOption array containing libpq's defaults, and modify
	 * that.  Note this function assumes that PQconninfo, PQconndefaults, and
	 * PQconninfoParse will all produce arrays containing the same options in
	 * the same order.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>reuse_previous</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>cinfo</name> <operator>=</operator> <call><name>PQconninfo</name><argument_list>(<argument><expr><name>o_conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>cinfo</name> <operator>=</operator> <call><name>PQconndefaults</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>cinfo</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>has_connection_string</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Parse the connstring and insert values into cinfo */</comment>
			<decl_stmt><decl><type><name>PQconninfoOption</name> <modifier>*</modifier></type><name>replcinfo</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>errmsg</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>replcinfo</name> <operator>=</operator> <call><name>PQconninfoParse</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>replcinfo</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>PQconninfoOption</name> <modifier>*</modifier></type><name>ci</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>PQconninfoOption</name> <modifier>*</modifier></type><name>replci</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>bool</name></type>		<name>have_password</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

				<for>for <control>(<init><expr><name>ci</name> <operator>=</operator> <name>cinfo</name></expr><operator>,</operator> <expr><name>replci</name> <operator>=</operator> <name>replcinfo</name></expr>;</init>
					 <condition><expr><name><name>ci</name><operator>-&gt;</operator><name>keyword</name></name> <operator>&amp;&amp;</operator> <name><name>replci</name><operator>-&gt;</operator><name>keyword</name></name></expr>;</condition>
					 <incr><expr><name>ci</name><operator>++</operator></expr><operator>,</operator> <expr><name>replci</name><operator>++</operator></expr></incr>)</control>
				<block>{<block_content>
					<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>keyword</name></name></expr></argument>, <argument><expr><name><name>replci</name><operator>-&gt;</operator><name>keyword</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="block">/* Insert value from connstring if one was provided */</comment>
					<if_stmt><if>if <condition>(<expr><name><name>replci</name><operator>-&gt;</operator><name>val</name></name></expr>)</condition>
					<block>{<block_content>
						<comment type="block">/*
						 * We know that both val strings were allocated by
						 * libpq, so the least messy way to avoid memory leaks
						 * is to swap them.
						 */</comment>
						<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>swap</name> <init>= <expr><name><name>replci</name><operator>-&gt;</operator><name>val</name></name></expr></init></decl>;</decl_stmt>

						<expr_stmt><expr><name><name>replci</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name><name>ci</name><operator>-&gt;</operator><name>val</name></name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>swap</name></expr>;</expr_stmt>

						<comment type="block">/*
						 * Check whether connstring provides options affecting
						 * password re-use.  While any change in user, host,
						 * hostaddr, or port causes us to ignore the old
						 * connection's password, we don't force that for
						 * dbname, since passwords aren't database-specific.
						 */</comment>
						<if_stmt><if>if <condition>(<expr><name><name>replci</name><operator>-&gt;</operator><name>val</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
							<call><name>strcmp</name><argument_list>(<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><name><name>replci</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
						<block>{<block_content>
							<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>replci</name><operator>-&gt;</operator><name>keyword</name></name></expr></argument>, <argument><expr><literal type="string">"user"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
								<call><name>strcmp</name><argument_list>(<argument><expr><name><name>replci</name><operator>-&gt;</operator><name>keyword</name></name></expr></argument>, <argument><expr><literal type="string">"host"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
								<call><name>strcmp</name><argument_list>(<argument><expr><name><name>replci</name><operator>-&gt;</operator><name>keyword</name></name></expr></argument>, <argument><expr><literal type="string">"hostaddr"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
								<call><name>strcmp</name><argument_list>(<argument><expr><name><name>replci</name><operator>-&gt;</operator><name>keyword</name></name></expr></argument>, <argument><expr><literal type="string">"port"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
								<expr_stmt><expr><name>keep_password</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
						</block_content>}</block></if></if_stmt>
						<comment type="block">/* Also note whether connstring contains a password. */</comment>
						<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>replci</name><operator>-&gt;</operator><name>keyword</name></name></expr></argument>, <argument><expr><literal type="string">"password"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name>have_password</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
					</block_content>}</block></if>
					<if type="elseif">else if <condition>(<expr><operator>!</operator><name>reuse_previous</name></expr>)</condition>
					<block>{<block_content>
						<comment type="block">/*
						 * When we have a connstring and are not re-using
						 * parameters, swap *all* entries, even those not set
						 * by the connstring.  This avoids absorbing
						 * environment-dependent defaults from the result of
						 * PQconndefaults().  We don't want to do that because
						 * they'd override service-file entries if the
						 * connstring specifies a service parameter, whereas
						 * the priority should be the other way around.  libpq
						 * can certainly recompute any defaults we don't pass
						 * here.  (In this situation, it's a bit wasteful to
						 * have called PQconndefaults() at all, but not doing
						 * so would require yet another major code path here.)
						 */</comment>
						<expr_stmt><expr><name><name>replci</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name><name>ci</name><operator>-&gt;</operator><name>val</name></name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>ci</name><operator>-&gt;</operator><name>val</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></for>
				<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>keyword</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>replci</name><operator>-&gt;</operator><name>keyword</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* While here, determine how many option slots there are */</comment>
				<expr_stmt><expr><name>nconnopts</name> <operator>=</operator> <name>ci</name> <operator>-</operator> <name>cinfo</name></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>PQconninfoFree</name><argument_list>(<argument><expr><name>replcinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/*
				 * If the connstring contains a password, tell the loop below
				 * that we may use it, regardless of other settings (i.e.,
				 * cinfo's password is no longer an "old" password).
				 */</comment>
				<if_stmt><if>if <condition>(<expr><name>have_password</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>keep_password</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<comment type="block">/* Don't let code below try to inject dbname into params. */</comment>
				<expr_stmt><expr><name>dbname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/* PQconninfoParse failed */</comment>
				<if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>PQfreemem</name><argument_list>(<argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"out of memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/*
			 * If dbname isn't a connection string, then we'll inject it and
			 * the other parameters into the keyword array below.  (We can't
			 * easily insert them into the cinfo array because of memory
			 * management issues: PQconninfoFree would misbehave on Windows.)
			 * However, to avoid dependencies on the order in which parameters
			 * appear in the array, make a preliminary scan to set
			 * keep_password and same_host correctly.
			 *
			 * While any change in user, host, or port causes us to ignore the
			 * old connection's password, we don't force that for dbname,
			 * since passwords aren't database-specific.
			 */</comment>
			<decl_stmt><decl><type><name>PQconninfoOption</name> <modifier>*</modifier></type><name>ci</name></decl>;</decl_stmt>

			<for>for <control>(<init><expr><name>ci</name> <operator>=</operator> <name>cinfo</name></expr>;</init> <condition><expr><name><name>ci</name><operator>-&gt;</operator><name>keyword</name></name></expr>;</condition> <incr><expr><name>ci</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>user</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>keyword</name></name></expr></argument>, <argument><expr><literal type="string">"user"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ci</name><operator>-&gt;</operator><name>val</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><name><name>ci</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>keep_password</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><name>host</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>keyword</name></name></expr></argument>, <argument><expr><literal type="string">"host"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name><name>ci</name><operator>-&gt;</operator><name>val</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name><name>ci</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>same_host</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><name>keep_password</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><name>port</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>keyword</name></name></expr></argument>, <argument><expr><literal type="string">"port"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ci</name><operator>-&gt;</operator><name>val</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>ci</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>keep_password</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>

			<comment type="block">/* While here, determine how many option slots there are */</comment>
			<expr_stmt><expr><name>nconnopts</name> <operator>=</operator> <name>ci</name> <operator>-</operator> <name>cinfo</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* We failed to create the cinfo structure */</comment>
		<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"out of memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * If the user asked to be prompted for a password, ask for one now. If
	 * not, use the password from the old connection, provided the username
	 * etc have not changed. Otherwise, try to connect without a password
	 * first, and then ask for a password if needed.
	 *
	 * XXX: this behavior leads to spurious connection attempts recorded in
	 * the postmaster's log.  But libpq offers no API that would let us obtain
	 * a password and then continue with the first connection attempt.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>getPassword</name></name> <operator>==</operator> <name>TRI_YES</name> <operator>&amp;&amp;</operator> <name>success</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * If a connstring or URI is provided, we don't know which username
		 * will be used, since we haven't dug that out of the connstring.
		 * Don't risk issuing a misleading prompt.  As in startup.c, it does
		 * not seem worth working harder, since this getPassword setting is
		 * normally only used in noninteractive cases.
		 */</comment>
		<expr_stmt><expr><name>password</name> <operator>=</operator> <call><name>prompt_for_password</name><argument_list>(<argument><expr><ternary><condition><expr><name>has_connection_string</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>user</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Consider whether to force client_encoding to "auto" (overriding
	 * anything in the connection string).  We do so if we have a terminal
	 * connection and there is no PGCLIENTENCODING environment setting.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>notty</name></name> <operator>||</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"PGCLIENTENCODING"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>client_encoding</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>client_encoding</name> <operator>=</operator> <literal type="string">"auto"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/* Loop till we have a connection or fail, which we might've already */</comment>
	<while>while <condition>(<expr><name>success</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>keywords</name> <init>= <expr><call><name>pg_malloc</name><argument_list>(<argument><expr><operator>(</operator><name>nconnopts</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>keywords</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>values</name> <init>= <expr><call><name>pg_malloc</name><argument_list>(<argument><expr><operator>(</operator><name>nconnopts</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>values</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>paramnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PQconninfoOption</name> <modifier>*</modifier></type><name>ci</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * Copy non-default settings into the PQconnectdbParams parameter
		 * arrays; but inject any values specified old-style, as well as any
		 * interactively-obtained password, and a couple of fields we want to
		 * set forcibly.
		 *
		 * If you change this code, see also the initial-connection code in
		 * main().
		 */</comment>
		<for>for <control>(<init><expr><name>ci</name> <operator>=</operator> <name>cinfo</name></expr>;</init> <condition><expr><name><name>ci</name><operator>-&gt;</operator><name>keyword</name></name></expr>;</condition> <incr><expr><name>ci</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name><name>keywords</name><index>[<expr><name>paramnum</name></expr>]</index></name> <operator>=</operator> <name><name>ci</name><operator>-&gt;</operator><name>keyword</name></name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>dbname</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>keyword</name></name></expr></argument>, <argument><expr><literal type="string">"dbname"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>paramnum</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>dbname</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name>user</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>keyword</name></name></expr></argument>, <argument><expr><literal type="string">"user"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>paramnum</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>user</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name>host</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>keyword</name></name></expr></argument>, <argument><expr><literal type="string">"host"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>paramnum</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>host</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name>host</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>same_host</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>keyword</name></name></expr></argument>, <argument><expr><literal type="string">"hostaddr"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* If we're changing the host value, drop any old hostaddr */</comment>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>paramnum</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>port</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>keyword</name></name></expr></argument>, <argument><expr><literal type="string">"port"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>paramnum</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt></block_content></block></if>
			<comment type="block">/* If !keep_password, we unconditionally drop old password */</comment>
			<if type="elseif">else if <condition>(<expr><operator>(</operator><name>password</name> <operator>||</operator> <operator>!</operator><name>keep_password</name><operator>)</operator> <operator>&amp;&amp;</operator>
					 <call><name>strcmp</name><argument_list>(<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>keyword</name></name></expr></argument>, <argument><expr><literal type="string">"password"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>paramnum</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>password</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>keyword</name></name></expr></argument>, <argument><expr><literal type="string">"fallback_application_name"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>paramnum</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>pset</name><operator>.</operator><name>progname</name></name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name>client_encoding</name> <operator>&amp;&amp;</operator>
					 <call><name>strcmp</name><argument_list>(<argument><expr><name><name>ci</name><operator>-&gt;</operator><name>keyword</name></name></expr></argument>, <argument><expr><literal type="string">"client_encoding"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>paramnum</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>client_encoding</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name><name>ci</name><operator>-&gt;</operator><name>val</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>paramnum</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>ci</name><operator>-&gt;</operator><name>val</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<comment type="block">/* else, don't bother making libpq parse this keyword */</comment>
		</block_content>}</block></for>
		<comment type="block">/* add array terminator */</comment>
		<expr_stmt><expr><name><name>keywords</name><index>[<expr><name>paramnum</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>paramnum</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

		<comment type="block">/* Note we do not want libpq to re-expand the dbname parameter */</comment>
		<expr_stmt><expr><name>n_conn</name> <operator>=</operator> <call><name>PQconnectdbParams</name><argument_list>(<argument><expr><name>keywords</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name>keywords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>PQstatus</name><argument_list>(<argument><expr><name>n_conn</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CONNECTION_OK</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * Connection attempt failed; either retry the connection attempt with
		 * a new password, or give up.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>password</name> <operator>&amp;&amp;</operator> <call><name>PQconnectionNeedsPassword</name><argument_list>(<argument><expr><name>n_conn</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>pset</name><operator>.</operator><name>getPassword</name></name> <operator>!=</operator> <name>TRI_NO</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * Prompt for password using the username we actually connected
			 * with --- it might've come out of "dbname" rather than "user".
			 */</comment>
			<expr_stmt><expr><name>password</name> <operator>=</operator> <call><name>prompt_for_password</name><argument_list>(<argument><expr><call><name>PQuser</name><argument_list>(<argument><expr><name>n_conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>n_conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>n_conn</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * We'll report the error below ... unless n_conn is NULL, indicating
		 * that libpq didn't have enough memory to make a PGconn.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>n_conn</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"out of memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></while>							<comment type="block">/* end retry loop */</comment>

	<comment type="block">/* Release locally allocated data, whether we succeeded or not */</comment>
	<if_stmt><if>if <condition>(<expr><name>password</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>cinfo</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PQconninfoFree</name><argument_list>(<argument><expr><name>cinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Failed to connect to the database. In interactive mode, keep the
		 * previous connection to the DB; in scripting mode, close our
		 * previous connection as well.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>cur_cmd_interactive</name></name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>n_conn</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name>n_conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>n_conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* pset.db is left unmodified */</comment>
			<if_stmt><if>if <condition>(<expr><name>o_conn</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"Previous connection kept\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>n_conn</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"\\connect: %s"</literal></expr></argument>, <argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name>n_conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>n_conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>o_conn</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>o_conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>pset</name><operator>.</operator><name>db</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>

		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Replace the old connection with the new one, and update
	 * connection-dependent variables.
	 */</comment>
	<expr_stmt><expr><call><name>PQsetNoticeProcessor</name><argument_list>(<argument><expr><name>n_conn</name></expr></argument>, <argument><expr><name>NoticeProcessor</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pset</name><operator>.</operator><name>db</name></name> <operator>=</operator> <name>n_conn</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SyncVariables</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>connection_warnings</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Must be after SyncVariables */</comment>

	<comment type="block">/* Tell the user about the new connection */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pset</name><operator>.</operator><name>quiet</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>o_conn</name> <operator>||</operator>
			<call><name>param_is_newly_set</name><argument_list>(<argument><expr><call><name>PQhost</name><argument_list>(<argument><expr><name>o_conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>PQhost</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>
			<call><name>param_is_newly_set</name><argument_list>(<argument><expr><call><name>PQport</name><argument_list>(<argument><expr><name>o_conn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>PQport</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>host</name> <init>= <expr><call><name>PQhost</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<comment type="block">/* If the host is an absolute path, the connection is via socket */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>is_absolute_path</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"You are now connected to database \"%s\" as user \"%s\" via socket in \"%s\" at port \"%s\".\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
					   <argument><expr><call><name>PQdb</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>PQuser</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>PQport</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"You are now connected to database \"%s\" as user \"%s\" on host \"%s\" at port \"%s\".\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
					   <argument><expr><call><name>PQdb</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>PQuser</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>PQport</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"You are now connected to database \"%s\" as user \"%s\".\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
				   <argument><expr><call><name>PQdb</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>PQuser</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>o_conn</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>o_conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>connection_warnings</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>in_startup</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pset</name><operator>.</operator><name>quiet</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pset</name><operator>.</operator><name>notty</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>client_ver</name> <init>= <expr><name>PG_VERSION_NUM</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>cverbuf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>sverbuf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>sversion</name></name> <operator>!=</operator> <name>client_ver</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>server_version</name></decl>;</decl_stmt>

			<comment type="block">/* Try to get full text form, might include "devel" etc */</comment>
			<expr_stmt><expr><name>server_version</name> <operator>=</operator> <call><name>PQparameterStatus</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="string">"server_version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Otherwise fall back on pset.sversion */</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>server_version</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>formatPGVersionNumber</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>sversion</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
									  <argument><expr><name>sverbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sverbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>server_version</name> <operator>=</operator> <name>sverbuf</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s (%s, server %s)\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
				   <argument><expr><name><name>pset</name><operator>.</operator><name>progname</name></name></expr></argument>, <argument><expr><name>PG_VERSION</name></expr></argument>, <argument><expr><name>server_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<comment type="block">/* For version match, only print psql banner on startup. */</comment>
		<if type="elseif">else if <condition>(<expr><name>in_startup</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s (%s)\n"</literal></expr></argument>, <argument><expr><name><name>pset</name><operator>.</operator><name>progname</name></name></expr></argument>, <argument><expr><name>PG_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>sversion</name></name> <operator>/</operator> <literal type="number">100</literal> <operator>&gt;</operator> <name>client_ver</name> <operator>/</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"WARNING: %s major version %s, server major version %s.\n"</literal>
					 <literal type="string">"         Some psql features might not work.\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
				   <argument><expr><name><name>pset</name><operator>.</operator><name>progname</name></name></expr></argument>,
				   <argument><expr><call><name>formatPGVersionNumber</name><argument_list>(<argument><expr><name>client_ver</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
										 <argument><expr><name>cverbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cverbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
				   <argument><expr><call><name>formatPGVersionNumber</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>sversion</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
										 <argument><expr><name>sverbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sverbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
		<expr_stmt><expr><call><name>checkWin32Codepage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>printSSLInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * printSSLInfo
 *
 * Prints information about the current SSL connection, if SSL is in use
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>printSSLInfo</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>protocol</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cipher</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>bits</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>compression</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PQsslInUse</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>					<comment type="block">/* no SSL */</comment>

	<expr_stmt><expr><name>protocol</name> <operator>=</operator> <call><name>PQsslAttribute</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="string">"protocol"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cipher</name> <operator>=</operator> <call><name>PQsslAttribute</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="string">"cipher"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>PQsslAttribute</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="string">"key_bits"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>compression</name> <operator>=</operator> <call><name>PQsslAttribute</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="string">"compression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"SSL connection (protocol: %s, cipher: %s, bits: %s, compression: %s)\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><ternary><condition><expr><name>protocol</name></expr> ?</condition><then> <expr><name>protocol</name></expr> </then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
		   <argument><expr><ternary><condition><expr><name>cipher</name></expr> ?</condition><then> <expr><name>cipher</name></expr> </then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
		   <argument><expr><ternary><condition><expr><name>bits</name></expr> ?</condition><then> <expr><name>bits</name></expr> </then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
		   <argument><expr><ternary><condition><expr><operator>(</operator><name>compression</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>compression</name></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"on"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"off"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * checkWin32Codepage
 *
 * Prints a warning when win32 console codepage differs from Windows codepage
 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>checkWin32Codepage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>wincp</name></decl>,
				<decl><type ref="prev"/><name>concp</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>wincp</name> <operator>=</operator> <call><name>GetACP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>concp</name> <operator>=</operator> <call><name>GetConsoleCP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>wincp</name> <operator>!=</operator> <name>concp</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"WARNING: Console code page (%u) differs from Windows code page (%u)\n"</literal>
				 <literal type="string">"         8-bit characters might not work correctly. See psql reference\n"</literal>
				 <literal type="string">"         page \"Notes for Windows users\" for details.\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
			   <argument><expr><name>concp</name></expr></argument>, <argument><expr><name>wincp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/*
 * SyncVariables
 *
 * Make psql's internal variables agree with connection state upon
 * establishing a new connection.
 */</comment>
<function><type><name>void</name></type>
<name>SyncVariables</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>vbuf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>server_version</name></decl>;</decl_stmt>

	<comment type="block">/* get stuff from connection */</comment>
	<expr_stmt><expr><name><name>pset</name><operator>.</operator><name>encoding</name></name> <operator>=</operator> <call><name>PQclientEncoding</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pset</name><operator>.</operator><name>popt</name><operator>.</operator><name>topt</name><operator>.</operator><name>encoding</name></name> <operator>=</operator> <name><name>pset</name><operator>.</operator><name>encoding</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pset</name><operator>.</operator><name>sversion</name></name> <operator>=</operator> <call><name>PQserverVersion</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SetVariable</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>vars</name></name></expr></argument>, <argument><expr><literal type="string">"DBNAME"</literal></expr></argument>, <argument><expr><call><name>PQdb</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SetVariable</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>vars</name></name></expr></argument>, <argument><expr><literal type="string">"USER"</literal></expr></argument>, <argument><expr><call><name>PQuser</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SetVariable</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>vars</name></name></expr></argument>, <argument><expr><literal type="string">"HOST"</literal></expr></argument>, <argument><expr><call><name>PQhost</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SetVariable</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>vars</name></name></expr></argument>, <argument><expr><literal type="string">"PORT"</literal></expr></argument>, <argument><expr><call><name>PQport</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SetVariable</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>vars</name></name></expr></argument>, <argument><expr><literal type="string">"ENCODING"</literal></expr></argument>, <argument><expr><call><name>pg_encoding_to_char</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>encoding</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* this bit should match connection_warnings(): */</comment>
	<comment type="block">/* Try to get full text form of version, might include "devel" etc */</comment>
	<expr_stmt><expr><name>server_version</name> <operator>=</operator> <call><name>PQparameterStatus</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="string">"server_version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Otherwise fall back on pset.sversion */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>server_version</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>formatPGVersionNumber</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>sversion</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>vbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>server_version</name> <operator>=</operator> <name>vbuf</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>SetVariable</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>vars</name></name></expr></argument>, <argument><expr><literal type="string">"SERVER_VERSION_NAME"</literal></expr></argument>, <argument><expr><name>server_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>vbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>pset</name><operator>.</operator><name>sversion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SetVariable</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>vars</name></name></expr></argument>, <argument><expr><literal type="string">"SERVER_VERSION_NUM"</literal></expr></argument>, <argument><expr><name>vbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* send stuff to it, too */</comment>
	<expr_stmt><expr><call><name>PQsetErrorVerbosity</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>pset</name><operator>.</operator><name>verbosity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PQsetErrorContextVisibility</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>pset</name><operator>.</operator><name>show_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * UnsyncVariables
 *
 * Clear variables that should be not be set when there is no connection.
 */</comment>
<function><type><name>void</name></type>
<name>UnsyncVariables</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SetVariable</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>vars</name></name></expr></argument>, <argument><expr><literal type="string">"DBNAME"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SetVariable</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>vars</name></name></expr></argument>, <argument><expr><literal type="string">"USER"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SetVariable</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>vars</name></name></expr></argument>, <argument><expr><literal type="string">"HOST"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SetVariable</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>vars</name></name></expr></argument>, <argument><expr><literal type="string">"PORT"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SetVariable</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>vars</name></name></expr></argument>, <argument><expr><literal type="string">"ENCODING"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SetVariable</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>vars</name></name></expr></argument>, <argument><expr><literal type="string">"SERVER_VERSION_NAME"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SetVariable</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>vars</name></name></expr></argument>, <argument><expr><literal type="string">"SERVER_VERSION_NUM"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * do_edit -- handler for \e
 *
 * If you do not specify a filename, the current query buffer will be copied
 * into a temporary one.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>editFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>editorName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>editor_lineno_arg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>sys</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>fname</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Find an editor to use */</comment>
	<expr_stmt><expr><name>editorName</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"PSQL_EDITOR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>editorName</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>editorName</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"EDITOR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>editorName</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>editorName</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"VISUAL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>editorName</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>editorName</name> <operator>=</operator> <name>DEFAULT_EDITOR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Get line number argument, if we need it. */</comment>
	<if_stmt><if>if <condition>(<expr><name>lineno</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>editor_lineno_arg</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"PSQL_EDITOR_LINENUMBER_ARG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEFAULT_EDITOR_LINENUMBER_ARG</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>editor_lineno_arg</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>editor_lineno_arg</name> <operator>=</operator> <name>DEFAULT_EDITOR_LINENUMBER_ARG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>editor_lineno_arg</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"environment variable PSQL_EDITOR_LINENUMBER_ARG must be set to specify a line number\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * On Unix the EDITOR value should *not* be quoted, since it might include
	 * switches, eg, EDITOR="pico -t"; it's up to the user to put quotes in it
	 * if necessary.  But this policy is not very workable on Windows, due to
	 * severe brain damage in their command shell plus the fact that standard
	 * program paths include spaces.
	 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
	<if_stmt><if>if <condition>(<expr><name>lineno</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>sys</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"exec %s %s%d '%s'"</literal></expr></argument>,
					   <argument><expr><name>editorName</name></expr></argument>, <argument><expr><name>editor_lineno_arg</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>sys</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"exec %s '%s'"</literal></expr></argument>,
					   <argument><expr><name>editorName</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<if_stmt><if>if <condition>(<expr><name>lineno</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>sys</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"\"%s\" %s%d \"%s\""</literal></expr></argument>,
					   <argument><expr><name>editorName</name></expr></argument>, <argument><expr><name>editor_lineno_arg</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>sys</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"\"%s\" \"%s\""</literal></expr></argument>,
					   <argument><expr><name>editorName</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>system</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"could not start editor \"%s\"\n"</literal></expr></argument>, <argument><expr><name>editorName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">127</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"could not start /bin/sh\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* call this one */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>do_edit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename_arg</name></decl></parameter>, <parameter><decl><type><name>PQExpBuffer</name></type> <name>query_buf</name></decl></parameter>,
		<parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>edited</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>fnametmp</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE</name>	   <modifier>*</modifier></type><name>stream</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>error</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>before</name></decl>,
				<decl><type ref="prev"/><name>after</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>filename_arg</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>fname</name> <operator>=</operator> <name>filename_arg</name></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* make a temp file to edit */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tmpdir</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"TMPDIR"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmpdir</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>tmpdir</name> <operator>=</operator> <literal type="string">"/tmp"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>tmpdir</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>ret</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>GetTempPath</name><argument_list>(<argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><name>tmpdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>ret</name> <operator>&gt;</operator> <name>MAXPGPATH</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"could not locate temporary directory: %s\n"</literal></expr></argument>,
					   <argument><expr><ternary><condition><expr><operator>!</operator><name>ret</name></expr> ?</condition><then> <expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<comment type="block">/*
		 * No canonicalize_path() here. EDIT.EXE run from CMD.EXE prepends the
		 * current directory to the supplied path unless we use only
		 * backslashes, so we do that.
		 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fnametmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fnametmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%spsql.edit.%d.sql"</literal></expr></argument>, <argument><expr><name>tmpdir</name></expr></argument>,
				 <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fnametmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fnametmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%spsql.edit.%d.sql"</literal></expr></argument>, <argument><expr><name>tmpdir</name></expr></argument>,
				 <argument><expr><literal type="string">""</literal></expr></argument> <comment type="block">/* trailing separator already present */</comment> , <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<expr_stmt><expr><name>fname</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>fnametmp</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_EXCL</name></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>fdopen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>!</operator><name>stream</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"could not open temporary file \"%s\": %s\n"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>ql</name> <init>= <expr><name><name>query_buf</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>ql</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>query_buf</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ql</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>appendPQExpBufferChar</name><argument_list>(<argument><expr><name>query_buf</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>ql</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><name><name>query_buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ql</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ql</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"%s: %s\n"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>fclose</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"%s: %s\n"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>remove</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"%s: %s\n"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><name>error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><call><name>fclose</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"%s: %s\n"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><call><name>remove</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"%s: %s\n"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<decl_stmt><decl><type><name><name>struct</name> <name>utimbuf</name></name></type> <name>ut</name></decl>;</decl_stmt>

				<comment type="block">/*
				 * Try to set the file modification time of the temporary file
				 * a few seconds in the past.  Otherwise, the low granularity
				 * (one second, or even worse on some filesystems) that we can
				 * portably measure with stat(2) could lead us to not
				 * recognize a modification, if the user typed very quickly.
				 *
				 * This is a rather unlikely race condition, so don't error
				 * out if the utime(2) call fails --- that would make the cure
				 * worse than the disease.
				 */</comment>
				<expr_stmt><expr><name><name>ut</name><operator>.</operator><name>modtime</name></name> <operator>=</operator> <name><name>ut</name><operator>.</operator><name>actime</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
				<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>utime</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>error</name> <operator>&amp;&amp;</operator> <call><name>stat</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>before</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"%s: %s\n"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* call editor */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>error</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>error</name> <operator>=</operator> <operator>!</operator><call><name>editFile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>error</name> <operator>&amp;&amp;</operator> <call><name>stat</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>after</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"%s: %s\n"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* file was edited if the size or modification time has changed */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>error</name> <operator>&amp;&amp;</operator>
		<operator>(</operator><name><name>before</name><operator>.</operator><name>st_size</name></name> <operator>!=</operator> <name><name>after</name><operator>.</operator><name>st_size</name></name> <operator>||</operator>
		 <name><name>before</name><operator>.</operator><name>st_mtime</name></name> <operator>!=</operator> <name><name>after</name><operator>.</operator><name>st_mtime</name></name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>stream</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>PG_BINARY_R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stream</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"%s: %s\n"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* read file back into query_buf */</comment>
			<decl_stmt><decl><type><name>char</name></type>		<name><name>line</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>resetPQExpBuffer</name><argument_list>(<argument><expr><name>query_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<while>while <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>appendPQExpBufferStr</name><argument_list>(<argument><expr><name>query_buf</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

			<if_stmt><if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"%s: %s\n"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>edited</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>edited</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* remove temp file */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filename_arg</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>remove</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"%s: %s\n"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><operator>!</operator><name>error</name></expr>;</return>
</block_content>}</block></function>



<comment type="block">/*
 * process_file
 *
 * Reads commands from filename and passes them to the main processing loop.
 * Handler for \i and \ir, but can be used for other things as well.  Returns
 * MainLoop() error code.
 *
 * If use_relative_path is true and filename is not an absolute path, then open
 * the file from where the currently processed file (if any) is located.
 */</comment>
<function><type><name>int</name></type>
<name>process_file</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>use_relative_path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE</name>	   <modifier>*</modifier></type><name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>oldfilename</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>relpath</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>filename</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>fd</name> <operator>=</operator> <name>stdin</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>filename</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>canonicalize_path</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * If we were asked to resolve the pathname relative to the location
		 * of the currently executing script, and there is one, and this is a
		 * relative pathname, then prepend all but the last pathname component
		 * of the current script to this pathname.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>use_relative_path</name> <operator>&amp;&amp;</operator> <name><name>pset</name><operator>.</operator><name>inputfile</name></name> <operator>&amp;&amp;</operator>
			<operator>!</operator><call><name>is_absolute_path</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>has_drive_prefix</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>relpath</name></expr></argument>, <argument><expr><name><name>pset</name><operator>.</operator><name>inputfile</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>relpath</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>get_parent_directory</name><argument_list>(<argument><expr><name>relpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>join_path_components</name><argument_list>(<argument><expr><name>relpath</name></expr></argument>, <argument><expr><name>relpath</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>canonicalize_path</name><argument_list>(<argument><expr><name>relpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>filename</name> <operator>=</operator> <name>relpath</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>PG_BINARY_R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fd</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"%s: %s\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>fd</name> <operator>=</operator> <name>stdin</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>filename</name> <operator>=</operator> <literal type="string">"&lt;stdin&gt;"</literal></expr>;</expr_stmt>	<comment type="block">/* for future error messages */</comment>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>oldfilename</name> <operator>=</operator> <name><name>pset</name><operator>.</operator><name>inputfile</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pset</name><operator>.</operator><name>inputfile</name></name> <operator>=</operator> <name>filename</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>MainLoop</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <name>stdin</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>pset</name><operator>.</operator><name>inputfile</name></name> <operator>=</operator> <name>oldfilename</name></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>_align2string</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>printFormat</name></name></type> <name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>in</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>PRINT_NOTHING</name></expr>:</case>
			<return>return <expr><literal type="string">"nothing"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>PRINT_UNALIGNED</name></expr>:</case>
			<return>return <expr><literal type="string">"unaligned"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>PRINT_ALIGNED</name></expr>:</case>
			<return>return <expr><literal type="string">"aligned"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>PRINT_WRAPPED</name></expr>:</case>
			<return>return <expr><literal type="string">"wrapped"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>PRINT_HTML</name></expr>:</case>
			<return>return <expr><literal type="string">"html"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>PRINT_ASCIIDOC</name></expr>:</case>
			<return>return <expr><literal type="string">"asciidoc"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>PRINT_LATEX</name></expr>:</case>
			<return>return <expr><literal type="string">"latex"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>PRINT_LATEX_LONGTABLE</name></expr>:</case>
			<return>return <expr><literal type="string">"latex-longtable"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>PRINT_TROFF_MS</name></expr>:</case>
			<return>return <expr><literal type="string">"troff-ms"</literal></expr>;</return>
			<break>break;</break>
	</block_content>}</block></switch>
	<return>return <expr><literal type="string">"unknown"</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Parse entered Unicode linestyle.  If ok, update *linestyle and return
 * true, else return false.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>set_unicode_line_style</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>vallen</name></decl></parameter>,
					   <parameter><decl><type><name>unicode_linestyle</name> <modifier>*</modifier></type><name>linestyle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>pg_strncasecmp</name><argument_list>(<argument><expr><literal type="string">"single"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vallen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>linestyle</name> <operator>=</operator> <name>UNICODE_LINESTYLE_SINGLE</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>pg_strncasecmp</name><argument_list>(<argument><expr><literal type="string">"double"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vallen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>linestyle</name> <operator>=</operator> <name>UNICODE_LINESTYLE_DOUBLE</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>_unicode_linestyle2string</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>linestyle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>linestyle</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>UNICODE_LINESTYLE_SINGLE</name></expr>:</case>
			<return>return <expr><literal type="string">"single"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>UNICODE_LINESTYLE_DOUBLE</name></expr>:</case>
			<return>return <expr><literal type="string">"double"</literal></expr>;</return>
			<break>break;</break>
	</block_content>}</block></switch>
	<return>return <expr><literal type="string">"unknown"</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * do_pset
 *
 */</comment>
<function><type><name>bool</name></type>
<name>do_pset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>printQueryOpt</name> <modifier>*</modifier></type><name>popt</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>quiet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>vallen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>param</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>vallen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* set format */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"format"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
			<empty_stmt>;</empty_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>pg_strncasecmp</name><argument_list>(<argument><expr><literal type="string">"unaligned"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vallen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>PRINT_UNALIGNED</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>pg_strncasecmp</name><argument_list>(<argument><expr><literal type="string">"aligned"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vallen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>PRINT_ALIGNED</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>pg_strncasecmp</name><argument_list>(<argument><expr><literal type="string">"wrapped"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vallen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>PRINT_WRAPPED</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>pg_strncasecmp</name><argument_list>(<argument><expr><literal type="string">"html"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vallen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>PRINT_HTML</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>pg_strncasecmp</name><argument_list>(<argument><expr><literal type="string">"asciidoc"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vallen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>PRINT_ASCIIDOC</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>pg_strncasecmp</name><argument_list>(<argument><expr><literal type="string">"latex"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vallen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>PRINT_LATEX</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>pg_strncasecmp</name><argument_list>(<argument><expr><literal type="string">"latex-longtable"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vallen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>PRINT_LATEX_LONGTABLE</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>pg_strncasecmp</name><argument_list>(<argument><expr><literal type="string">"troff-ms"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vallen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>PRINT_TROFF_MS</name></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"\\pset: allowed formats are unaligned, aligned, wrapped, html, asciidoc, latex, latex-longtable, troff-ms\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>

	<comment type="block">/* set table line style */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"linestyle"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
			<empty_stmt>;</empty_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>pg_strncasecmp</name><argument_list>(<argument><expr><literal type="string">"ascii"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vallen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>line_style</name></name> <operator>=</operator> <operator>&amp;</operator><name>pg_asciiformat</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>pg_strncasecmp</name><argument_list>(<argument><expr><literal type="string">"old-ascii"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vallen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>line_style</name></name> <operator>=</operator> <operator>&amp;</operator><name>pg_asciiformat_old</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>pg_strncasecmp</name><argument_list>(<argument><expr><literal type="string">"unicode"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>vallen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>line_style</name></name> <operator>=</operator> <operator>&amp;</operator><name>pg_utf8format</name></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"\\pset: allowed line styles are ascii, old-ascii, unicode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>

	<comment type="block">/* set unicode border line style */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"unicode_border_linestyle"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
			<empty_stmt>;</empty_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>set_unicode_line_style</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>vallen</name></expr></argument>,
										<argument><expr><operator>&amp;</operator><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>unicode_border_linestyle</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>refresh_utf8format</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>popt</name><operator>-&gt;</operator><name>topt</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"\\pset: allowed Unicode border line styles are single, double\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>

	<comment type="block">/* set unicode column line style */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"unicode_column_linestyle"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
			<empty_stmt>;</empty_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>set_unicode_line_style</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>vallen</name></expr></argument>,
										<argument><expr><operator>&amp;</operator><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>unicode_column_linestyle</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>refresh_utf8format</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>popt</name><operator>-&gt;</operator><name>topt</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"\\pset: allowed Unicode column line styles are single, double\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>

	<comment type="block">/* set unicode header line style */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"unicode_header_linestyle"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
			<empty_stmt>;</empty_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>set_unicode_line_style</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>vallen</name></expr></argument>,
										<argument><expr><operator>&amp;</operator><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>unicode_header_linestyle</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>refresh_utf8format</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>popt</name><operator>-&gt;</operator><name>topt</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"\\pset: allowed Unicode header line styles are single, double\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>

	<comment type="block">/* set border style/width */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"border"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>border</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>

	<comment type="block">/* set expanded/vertical mode */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
			 <call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"expanded"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
			 <call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"vertical"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&amp;&amp;</operator> <call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"auto"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>expanded</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>value</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>bool</name></type>		<name>on_off</name></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>ParseVariableBool</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>on_off</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>expanded</name></name> <operator>=</operator> <ternary><condition><expr><name>on_off</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>PsqlVarEnumError</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"on, off, auto"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>false</name></expr>;</return>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>expanded</name></name> <operator>=</operator> <operator>!</operator><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>expanded</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>

	<comment type="block">/* locale-aware numeric output */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"numericlocale"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>ParseVariableBool</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>numericLocale</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>numericLocale</name></name> <operator>=</operator> <operator>!</operator><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>numericLocale</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>

	<comment type="block">/* null display */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>popt</name><operator>-&gt;</operator><name>nullPrint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>popt</name><operator>-&gt;</operator><name>nullPrint</name></name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>

	<comment type="block">/* field separator for unaligned text */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"fieldsep"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>fieldSep</name><operator>.</operator><name>separator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>fieldSep</name><operator>.</operator><name>separator</name></name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>fieldSep</name><operator>.</operator><name>separator_zero</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>

	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"fieldsep_zero"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>fieldSep</name><operator>.</operator><name>separator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>fieldSep</name><operator>.</operator><name>separator</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>fieldSep</name><operator>.</operator><name>separator_zero</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if>

	<comment type="block">/* record separator for unaligned text */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"recordsep"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>recordSep</name><operator>.</operator><name>separator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>recordSep</name><operator>.</operator><name>separator</name></name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>recordSep</name><operator>.</operator><name>separator_zero</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>

	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"recordsep_zero"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>recordSep</name><operator>.</operator><name>separator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>recordSep</name><operator>.</operator><name>separator</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>recordSep</name><operator>.</operator><name>separator_zero</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if>

	<comment type="block">/* toggle between full and tuples-only format */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"t"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"tuples_only"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>ParseVariableBool</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>tuples_only</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>tuples_only</name></name> <operator>=</operator> <operator>!</operator><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>tuples_only</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>

	<comment type="block">/* set title override */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>popt</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>popt</name><operator>-&gt;</operator><name>title</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>popt</name><operator>-&gt;</operator><name>title</name></name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>

	<comment type="block">/* set HTML table tag options */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"T"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"tableattr"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>tableAttr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>tableAttr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>tableAttr</name></name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>

	<comment type="block">/* toggle use of pager */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"pager"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&amp;&amp;</operator> <call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"always"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>pager</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>value</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>bool</name></type>		<name>on_off</name></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ParseVariableBool</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>on_off</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>PsqlVarEnumError</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"on, off, always"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>false</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>pager</name></name> <operator>=</operator> <ternary><condition><expr><name>on_off</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>pager</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>pager</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>pager</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>

	<comment type="block">/* set minimum lines for pager use */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"pager_min_lines"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>pager_min_lines</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>

	<comment type="block">/* disable "(x rows)" footer */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"footer"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>ParseVariableBool</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>default_footer</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>default_footer</name></name> <operator>=</operator> <operator>!</operator><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>default_footer</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>

	<comment type="block">/* set border style/width */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"columns"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>value</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>columns</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"\\pset: unknown option: %s\n"</literal></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>quiet</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printPsetInfo</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pset</name><operator>.</operator><name>popt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type>
<name>printPsetInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>printQueryOpt</name></name> <modifier>*</modifier></type><name>popt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>param</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* show border style/width */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"border"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Border style is %d.\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>border</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/* show the target width for the wrapped format */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"columns"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>columns</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Target width is unset.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Target width is %d.\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>columns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>

	<comment type="block">/* show expanded/vertical mode */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"expanded"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"vertical"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>expanded</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Expanded display is on.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>expanded</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Expanded display is used automatically.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Expanded display is off.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>

	<comment type="block">/* show field separator for unaligned text */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"fieldsep"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>fieldSep</name><operator>.</operator><name>separator_zero</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Field separator is zero byte.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Field separator is \"%s\".\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
				   <argument><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>fieldSep</name><operator>.</operator><name>separator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>

	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"fieldsep_zero"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Field separator is zero byte.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>

	<comment type="block">/* show disable "(x rows)" footer */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"footer"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>default_footer</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Default footer is on.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Default footer is off.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>

	<comment type="block">/* show format */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"format"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Output format is %s.\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_align2string</name><argument_list>(<argument><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>

	<comment type="block">/* show table line style */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"linestyle"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Line style is %s.\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
			   <argument><expr><call><name>get_line_style</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>popt</name><operator>-&gt;</operator><name>topt</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>

	<comment type="block">/* show null display */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Null display is \"%s\".\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
			   <argument><expr><ternary><condition><expr><name><name>popt</name><operator>-&gt;</operator><name>nullPrint</name></name></expr> ?</condition><then> <expr><name><name>popt</name><operator>-&gt;</operator><name>nullPrint</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>

	<comment type="block">/* show locale-aware numeric output */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"numericlocale"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>numericLocale</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Locale-adjusted numeric output is on.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Locale-adjusted numeric output is off.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>

	<comment type="block">/* show toggle use of pager */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"pager"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>pager</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Pager is used for long output.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>pager</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Pager is always used.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Pager usage is off.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>

	<comment type="block">/* show minimum lines for pager use */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"pager_min_lines"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>ngettext</name><argument_list>(<argument><expr><literal type="string">"Pager won't be used for less than %d line.\n"</literal></expr></argument>,
						<argument><expr><literal type="string">"Pager won't be used for less than %d lines.\n"</literal></expr></argument>,
						<argument><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>pager_min_lines</name></name></expr></argument>)</argument_list></call></expr></argument>,
			   <argument><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>pager_min_lines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>

	<comment type="block">/* show record separator for unaligned text */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"recordsep"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>recordSep</name><operator>.</operator><name>separator_zero</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Record separator is zero byte.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>recordSep</name><operator>.</operator><name>separator</name></name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Record separator is &lt;newline&gt;.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Record separator is \"%s\".\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
				   <argument><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>recordSep</name><operator>.</operator><name>separator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>

	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"recordsep_zero"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Record separator is zero byte.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>

	<comment type="block">/* show HTML table tag options */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"T"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"tableattr"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>tableAttr</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Table attributes are \"%s\".\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
				   <argument><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>tableAttr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Table attributes unset.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>

	<comment type="block">/* show title override */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>popt</name><operator>-&gt;</operator><name>title</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Title is \"%s\".\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>popt</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Title is unset.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>

	<comment type="block">/* show toggle between full and tuples-only format */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"t"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"tuples_only"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>tuples_only</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Tuples only is on.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Tuples only is off.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>

	<comment type="block">/* Unicode style formatting */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"unicode_border_linestyle"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Unicode border line style is \"%s\".\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
			   <argument><expr><call><name>_unicode_linestyle2string</name><argument_list>(<argument><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>unicode_border_linestyle</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>

	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"unicode_column_linestyle"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Unicode column line style is \"%s\".\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
			   <argument><expr><call><name>_unicode_linestyle2string</name><argument_list>(<argument><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>unicode_column_linestyle</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>

	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"unicode_header_linestyle"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Unicode header line style is \"%s\".\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
			   <argument><expr><call><name>_unicode_linestyle2string</name><argument_list>(<argument><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>unicode_header_linestyle</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>

	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"\\pset: unknown option: %s\n"</literal></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>pset_bool_string</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><ternary><condition><expr><name>val</name></expr> ?</condition><then> <expr><literal type="string">"on"</literal></expr> </then><else>: <expr><literal type="string">"off"</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>pset_quoted_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>pg_malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>r</name> <init>= <expr><name>ret</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>r</name><operator>++</operator> <operator>=</operator> <literal type="char">'\''</literal></expr>;</expr_stmt>

	<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>str</name></expr>;</condition> <incr><expr><name>str</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>r</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>r</name><operator>++</operator> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>r</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>r</name><operator>++</operator> <operator>=</operator> <literal type="char">'\''</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>r</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>str</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><operator>*</operator><name>r</name><operator>++</operator> <operator>=</operator> <literal type="char">'\''</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Return a malloc'ed string for the \pset value.
 *
 * Note that for some string parameters, print.c distinguishes between unset
 * and empty string, but for others it doesn't.  This function should produce
 * output that produces the correct setting when fed back into \pset.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>pset_value_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>printQueryOpt</name></name> <modifier>*</modifier></type><name>popt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>param</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"border"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>border</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"columns"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>columns</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"expanded"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>pstrdup</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>expanded</name></name> <operator>==</operator> <literal type="number">2</literal></expr>
					   ?</condition><then> <expr><literal type="string">"auto"</literal></expr>
					   </then><else>: <expr><call><name>pset_bool_string</name><argument_list>(<argument><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>expanded</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"fieldsep"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>pset_quoted_string</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>fieldSep</name><operator>.</operator><name>separator</name></name></expr>
								  ?</condition><then> <expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>fieldSep</name><operator>.</operator><name>separator</name></name></expr>
								  </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"fieldsep_zero"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>pstrdup</name><argument_list>(<argument><expr><call><name>pset_bool_string</name><argument_list>(<argument><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>fieldSep</name><operator>.</operator><name>separator_zero</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"footer"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>pstrdup</name><argument_list>(<argument><expr><call><name>pset_bool_string</name><argument_list>(<argument><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>default_footer</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"format"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>_align2string</name><argument_list>(<argument><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"linestyle"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>get_line_style</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>popt</name><operator>-&gt;</operator><name>topt</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>pset_quoted_string</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>popt</name><operator>-&gt;</operator><name>nullPrint</name></name></expr>
								  ?</condition><then> <expr><name><name>popt</name><operator>-&gt;</operator><name>nullPrint</name></name></expr>
								  </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"numericlocale"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>pstrdup</name><argument_list>(<argument><expr><call><name>pset_bool_string</name><argument_list>(<argument><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>numericLocale</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"pager"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>pager</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"pager_min_lines"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>pager_min_lines</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"recordsep"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>pset_quoted_string</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>recordSep</name><operator>.</operator><name>separator</name></name></expr>
								  ?</condition><then> <expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>recordSep</name><operator>.</operator><name>separator</name></name></expr>
								  </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"recordsep_zero"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>pstrdup</name><argument_list>(<argument><expr><call><name>pset_bool_string</name><argument_list>(<argument><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>recordSep</name><operator>.</operator><name>separator_zero</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"tableattr"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><ternary><condition><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>tableAttr</name></name></expr> ?</condition><then> <expr><call><name>pset_quoted_string</name><argument_list>(<argument><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>tableAttr</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>pstrdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><ternary><condition><expr><name><name>popt</name><operator>-&gt;</operator><name>title</name></name></expr> ?</condition><then> <expr><call><name>pset_quoted_string</name><argument_list>(<argument><expr><name><name>popt</name><operator>-&gt;</operator><name>title</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>pstrdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"tuples_only"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>pstrdup</name><argument_list>(<argument><expr><call><name>pset_bool_string</name><argument_list>(<argument><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>tuples_only</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"unicode_border_linestyle"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>pstrdup</name><argument_list>(<argument><expr><call><name>_unicode_linestyle2string</name><argument_list>(<argument><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>unicode_border_linestyle</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"unicode_column_linestyle"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>pstrdup</name><argument_list>(<argument><expr><call><name>_unicode_linestyle2string</name><argument_list>(<argument><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>unicode_column_linestyle</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><literal type="string">"unicode_header_linestyle"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>pstrdup</name><argument_list>(<argument><expr><call><name>_unicode_linestyle2string</name><argument_list>(<argument><expr><name><name>popt</name><operator>-&gt;</operator><name>topt</name><operator>.</operator><name>unicode_header_linestyle</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><call><name>pstrdup</name><argument_list>(<argument><expr><literal type="string">"ERROR"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>



<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_SHELL</name></cpp:macro> <cpp:value>"/bin/sh"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<comment type="block">/*
 *	CMD.EXE is in different places in different Win32 releases so we
 *	have to rely on the path to find it.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_SHELL</name></cpp:macro> <cpp:value>"cmd.exe"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>do_shell</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>command</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>result</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>command</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>sys</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shellName</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>shellName</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"SHELL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><name>shellName</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>shellName</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"COMSPEC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<if_stmt><if>if <condition>(<expr><name>shellName</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>shellName</name> <operator>=</operator> <name>DEFAULT_SHELL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* See EDITOR handling comment for an explanation */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
		<expr_stmt><expr><name>sys</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"exec %s"</literal></expr></argument>, <argument><expr><name>shellName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><name>sys</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"\"%s\""</literal></expr></argument>, <argument><expr><name>shellName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>system</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>system</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">127</literal> <operator>||</operator> <name>result</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"\\!: failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * do_watch -- handler for \watch
 *
 * We break this out of exec_command to avoid having to plaster "volatile"
 * onto a bunch of exec_command's variables to silence stupider compilers.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>do_watch</name><parameter_list>(<parameter><decl><type><name>PQExpBuffer</name></type> <name>query_buf</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>sleep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>long</name></type>		<name>sleep_ms</name> <init>= <expr><operator>(</operator><name>long</name><operator>)</operator> <operator>(</operator><name>sleep</name> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>printQueryOpt</name></type> <name>myopt</name> <init>= <expr><name><name>pset</name><operator>.</operator><name>popt</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>strftime_fmt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user_title</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>title</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>title_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>query_buf</name> <operator>||</operator> <name><name>query_buf</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\\watch cannot be used with an empty query\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Choose format for timestamps.  We might eventually make this a \pset
	 * option.  In the meantime, using a variable for the format suppresses
	 * overly-anal-retentive gcc warnings about %c being Y2K sensitive.
	 */</comment>
	<expr_stmt><expr><name>strftime_fmt</name> <operator>=</operator> <literal type="string">"%c"</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * Set up rendering options, in particular, disable the pager, because
	 * nobody wants to be prompted while watching the output of 'watch'.
	 */</comment>
	<expr_stmt><expr><name><name>myopt</name><operator>.</operator><name>topt</name><operator>.</operator><name>pager</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * If there's a title in the user configuration, make sure we have room
	 * for it in the title buffer.  Allow 128 bytes for the timestamp plus 128
	 * bytes for the rest.
	 */</comment>
	<expr_stmt><expr><name>user_title</name> <operator>=</operator> <name><name>myopt</name><operator>.</operator><name>title</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>title_len</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>user_title</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>user_title</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">256</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>title</name> <operator>=</operator> <call><name>pg_malloc</name><argument_list>(<argument><expr><name>title_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>time_t</name></type>		<name>timer</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>timebuf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>long</name></type>		<name>i</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * Prepare title for output.  Note that we intentionally include a
		 * newline at the end of the title; this is somewhat historical but it
		 * makes for reasonably nicely formatted output in simple cases.
		 */</comment>
		<expr_stmt><expr><name>timer</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>strftime</name><argument_list>(<argument><expr><name>timebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>timebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>strftime_fmt</name></expr></argument>, <argument><expr><call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>user_title</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>title_len</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s\t%s (every %gs)\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
					 <argument><expr><name>user_title</name></expr></argument>, <argument><expr><name>timebuf</name></expr></argument>, <argument><expr><name>sleep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>title_len</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s (every %gs)\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
					 <argument><expr><name>timebuf</name></expr></argument>, <argument><expr><name>sleep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><name><name>myopt</name><operator>.</operator><name>title</name></name> <operator>=</operator> <name>title</name></expr>;</expr_stmt>

		<comment type="block">/* Run the query and print out the results */</comment>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PSQLexecWatch</name><argument_list>(<argument><expr><name><name>query_buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>myopt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * PSQLexecWatch handles the case where we can no longer repeat the
		 * query, and returns 0 or -1.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * Set up cancellation of 'watch' via SIGINT.  We redo this each time
		 * through the loop since it's conceivable something inside
		 * PSQLexecWatch could change sigint_interrupt_jmp.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>sigsetjmp</name><argument_list>(<argument><expr><name>sigint_interrupt_jmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * Enable 'watch' cancellations and wait a while before running the
		 * query again.  Break the sleep into short intervals (at most 1s)
		 * since pg_usleep isn't interruptible on some platforms.
		 */</comment>
		<expr_stmt><expr><name>sigint_interrupt_enabled</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>=</operator> <name>sleep_ms</name></expr>;</expr_stmt>
		<while>while <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>long</name></type>		<name>s</name> <init>= <expr><call><name>Min</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1000L</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>pg_usleep</name><argument_list>(<argument><expr><name>s</name> <operator>*</operator> <literal type="number">1000L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>cancel_pressed</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>i</name> <operator>-=</operator> <name>s</name></expr>;</expr_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><name>sigint_interrupt_enabled</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>res</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * a little code borrowed from PSQLexec() to manage ECHO_HIDDEN output.
 * returns true unless we have ECHO_HIDDEN_NOEXEC.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>echo_hidden_command</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>echo_hidden</name></name> <operator>!=</operator> <name>PSQL_ECHO_HIDDEN_OFF</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"********* QUERY **********\n"</literal>
				 <literal type="string">"%s\n"</literal>
				 <literal type="string">"**************************\n\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>logfile</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>logfile</name></name></expr></argument>,
					<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"********* QUERY **********\n"</literal>
					  <literal type="string">"%s\n"</literal>
					  <literal type="string">"**************************\n\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>logfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>echo_hidden</name></name> <operator>==</operator> <name>PSQL_ECHO_HIDDEN_NOEXEC</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Look up the object identified by obj_type and desc.  If successful,
 * store its OID in *obj_oid and return true, else return false.
 *
 * Note that we'll fail if the object doesn't exist OR if there are multiple
 * matching candidates OR if there's something syntactically wrong with the
 * object description; unfortunately it can be hard to tell the difference.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>lookup_object_oid</name><parameter_list>(<parameter><decl><type><name>EditableObjectType</name></type> <name>obj_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>,
				  <parameter><decl><type><name>Oid</name> <modifier>*</modifier></type><name>obj_oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>result</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PQExpBuffer</name></type> <name>query</name> <init>= <expr><call><name>createPQExpBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGresult</name>   <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>obj_type</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>EditableFunction</name></expr>:</case>

			<comment type="block">/*
			 * We have a function description, e.g. "x" or "x(int)".  Issue a
			 * query to retrieve the function's OID using a cast to regproc or
			 * regprocedure (as appropriate).
			 */</comment>
			<expr_stmt><expr><call><name>appendPQExpBufferStr</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="string">"SELECT "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>appendStringLiteralConn</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>appendPQExpBuffer</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="string">"::pg_catalog.%s::pg_catalog.oid"</literal></expr></argument>,
							  <argument><expr><ternary><condition><expr><call><name>strchr</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"regprocedure"</literal></expr> </then><else>: <expr><literal type="string">"regproc"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>EditableView</name></expr>:</case>

			<comment type="block">/*
			 * Convert view name (possibly schema-qualified) to OID.  Note:
			 * this code doesn't check if the relation is actually a view.
			 * We'll detect that in get_create_object_cmd().
			 */</comment>
			<expr_stmt><expr><call><name>appendPQExpBufferStr</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="string">"SELECT "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>appendStringLiteralConn</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>appendPQExpBuffer</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="string">"::pg_catalog.regclass::pg_catalog.oid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>echo_hidden_command</name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>destroyPQExpBuffer</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PQexec</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>PQresultStatus</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PGRES_TUPLES_OK</name> <operator>&amp;&amp;</operator> <call><name>PQntuples</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>obj_oid</name> <operator>=</operator> <call><name>atooid</name><argument_list>(<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>minimal_error_message</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>destroyPQExpBuffer</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Construct a "CREATE OR REPLACE ..." command that describes the specified
 * database object.  If successful, the result is stored in buf.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>get_create_object_cmd</name><parameter_list>(<parameter><decl><type><name>EditableObjectType</name></type> <name>obj_type</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>oid</name></decl></parameter>,
					  <parameter><decl><type><name>PQExpBuffer</name></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>result</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PQExpBuffer</name></type> <name>query</name> <init>= <expr><call><name>createPQExpBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGresult</name>   <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>obj_type</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>EditableFunction</name></expr>:</case>
			<expr_stmt><expr><call><name>printfPQExpBuffer</name><argument_list>(<argument><expr><name>query</name></expr></argument>,
							  <argument><expr><literal type="string">"SELECT pg_catalog.pg_get_functiondef(%u)"</literal></expr></argument>,
							  <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>EditableView</name></expr>:</case>

			<comment type="block">/*
			 * pg_get_viewdef() just prints the query, so we must prepend
			 * CREATE for ourselves.  We must fully qualify the view name to
			 * ensure the right view gets replaced.  Also, check relation kind
			 * to be sure it's a view.
			 *
			 * Starting with 9.2, views may have reloptions (security_barrier)
			 * and from 9.4 onwards they may also have WITH [LOCAL|CASCADED]
			 * CHECK OPTION.  These are not part of the view definition
			 * returned by pg_get_viewdef() and so need to be retrieved
			 * separately.  Materialized views (introduced in 9.3) may have
			 * arbitrary storage parameter reloptions.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>pset</name><operator>.</operator><name>sversion</name></name> <operator>&gt;=</operator> <literal type="number">90400</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>printfPQExpBuffer</name><argument_list>(<argument><expr><name>query</name></expr></argument>,
								  <argument><expr><literal type="string">"SELECT nspname, relname, relkind, "</literal>
								  <literal type="string">"pg_catalog.pg_get_viewdef(c.oid, true), "</literal>
								  <literal type="string">"array_remove(array_remove(c.reloptions,'check_option=local'),'check_option=cascaded') AS reloptions, "</literal>
								  <literal type="string">"CASE WHEN 'check_option=local' = ANY (c.reloptions) THEN 'LOCAL'::text "</literal>
								  <literal type="string">"WHEN 'check_option=cascaded' = ANY (c.reloptions) THEN 'CASCADED'::text ELSE NULL END AS checkoption "</literal>
								  <literal type="string">"FROM pg_catalog.pg_class c "</literal>
								  <literal type="string">"LEFT JOIN pg_catalog.pg_namespace n "</literal>
								  <literal type="string">"ON c.relnamespace = n.oid WHERE c.oid = %u"</literal></expr></argument>,
								  <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name><name>pset</name><operator>.</operator><name>sversion</name></name> <operator>&gt;=</operator> <literal type="number">90200</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>printfPQExpBuffer</name><argument_list>(<argument><expr><name>query</name></expr></argument>,
								  <argument><expr><literal type="string">"SELECT nspname, relname, relkind, "</literal>
								  <literal type="string">"pg_catalog.pg_get_viewdef(c.oid, true), "</literal>
								  <literal type="string">"c.reloptions AS reloptions, "</literal>
								  <literal type="string">"NULL AS checkoption "</literal>
								  <literal type="string">"FROM pg_catalog.pg_class c "</literal>
								  <literal type="string">"LEFT JOIN pg_catalog.pg_namespace n "</literal>
								  <literal type="string">"ON c.relnamespace = n.oid WHERE c.oid = %u"</literal></expr></argument>,
								  <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>printfPQExpBuffer</name><argument_list>(<argument><expr><name>query</name></expr></argument>,
								  <argument><expr><literal type="string">"SELECT nspname, relname, relkind, "</literal>
								  <literal type="string">"pg_catalog.pg_get_viewdef(c.oid, true), "</literal>
								  <literal type="string">"NULL AS reloptions, "</literal>
								  <literal type="string">"NULL AS checkoption "</literal>
								  <literal type="string">"FROM pg_catalog.pg_class c "</literal>
								  <literal type="string">"LEFT JOIN pg_catalog.pg_namespace n "</literal>
								  <literal type="string">"ON c.relnamespace = n.oid WHERE c.oid = %u"</literal></expr></argument>,
								  <argument><expr><name>oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>echo_hidden_command</name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>destroyPQExpBuffer</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PQexec</name><argument_list>(<argument><expr><name><name>pset</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>PQresultStatus</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PGRES_TUPLES_OK</name> <operator>&amp;&amp;</operator> <call><name>PQntuples</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>resetPQExpBuffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<switch>switch <condition>(<expr><name>obj_type</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>EditableFunction</name></expr>:</case>
				<expr_stmt><expr><call><name>appendPQExpBufferStr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>EditableView</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>nspname</name> <init>= <expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>relname</name> <init>= <expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>relkind</name> <init>= <expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>viewdef</name> <init>= <expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>reloptions</name> <init>= <expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>checkoption</name> <init>= <expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<comment type="block">/*
					 * If the backend ever supports CREATE OR REPLACE
					 * MATERIALIZED VIEW, allow that here; but as of today it
					 * does not, so editing a matview definition in this way
					 * is impossible.
					 */</comment>
					<switch>switch <condition>(<expr><name><name>relkind</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>
					<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NOT_USED</name></cpp:ifdef>
						<case>case <expr><name>RELKIND_MATVIEW</name></expr>:</case>
							<expr_stmt><expr><call><name>appendPQExpBufferStr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"CREATE OR REPLACE MATERIALIZED VIEW "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
						<case>case <expr><name>RELKIND_VIEW</name></expr>:</case>
							<expr_stmt><expr><call><name>appendPQExpBufferStr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"CREATE OR REPLACE VIEW "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<break>break;</break>
						<default>default:</default>
							<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"\"%s.%s\" is not a view\n"</literal></expr></argument>,
									   <argument><expr><name>nspname</name></expr></argument>, <argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
							<break>break;</break>
					</block_content>}</block></switch>
					<expr_stmt><expr><call><name>appendPQExpBuffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s."</literal></expr></argument>, <argument><expr><call><name>fmtId</name><argument_list>(<argument><expr><name>nspname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>appendPQExpBufferStr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>fmtId</name><argument_list>(<argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* reloptions, if not an empty array "{}" */</comment>
					<if_stmt><if>if <condition>(<expr><name>reloptions</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>reloptions</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>appendPQExpBufferStr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\n WITH ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>appendReloptionsArray</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>reloptions</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>,
												   <argument><expr><name><name>pset</name><operator>.</operator><name>encoding</name></name></expr></argument>,
												   <argument><expr><call><name>standard_strings</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"could not parse reloptions array\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
						</block_content>}</block></if></if_stmt>
						<expr_stmt><expr><call><name>appendPQExpBufferChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>

					<comment type="block">/* View definition from pg_get_viewdef (a SELECT query) */</comment>
					<expr_stmt><expr><call><name>appendPQExpBuffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" AS\n%s"</literal></expr></argument>, <argument><expr><name>viewdef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="block">/* Get rid of the semicolon that pg_get_viewdef appends */</comment>
					<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>--</operator><operator>(</operator><name><name>buf</name><operator>-&gt;</operator><name>len</name></name><operator>)</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

					<comment type="block">/* WITH [LOCAL|CASCADED] CHECK OPTION */</comment>
					<if_stmt><if>if <condition>(<expr><name>checkoption</name> <operator>&amp;&amp;</operator> <name><name>checkoption</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>appendPQExpBuffer</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"\n WITH %s CHECK OPTION"</literal></expr></argument>,
										  <argument><expr><name>checkoption</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block>
				<break>break;</break>
		</block_content>}</block></switch>
		<comment type="block">/* Make sure result ends with a newline */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>buf</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendPQExpBufferChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>minimal_error_message</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>destroyPQExpBuffer</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * If the given argument of \ef or \ev ends with a line number, delete the line
 * number from the argument string and return it as an integer.  (We need
 * this kluge because we're too lazy to parse \ef's function or \ev's view
 * argument carefully --- we just slop it up in OT_WHOLE_LINE mode.)
 *
 * Returns -1 if no line number is present, 0 on error, or a positive value
 * on success.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>strip_lineno_from_objdesc</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>lineno</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name> <operator>||</operator> <name><name>obj</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>c</name> <operator>=</operator> <name>obj</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * This business of parsing backwards is dangerous as can be in a
	 * multibyte environment: there is no reason to believe that we are
	 * looking at the first byte of a character, nor are we necessarily
	 * working in a "safe" encoding.  Fortunately the bitpatterns we are
	 * looking for are unlikely to occur as non-first bytes, but beware of
	 * trying to expand the set of cases that can be recognized.  We must
	 * guard the &lt;ctype.h&gt; macros by using isascii() first, too.
	 */</comment>

	<comment type="block">/* skip trailing whitespace */</comment>
	<while>while <condition>(<expr><name>c</name> <operator>&gt;</operator> <name>obj</name> <operator>&amp;&amp;</operator> <call><name>isascii</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

	<comment type="block">/* must have a digit as last non-space char */</comment>
	<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>obj</name> <operator>||</operator> <operator>!</operator><call><name>isascii</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* find start of digit string */</comment>
	<while>while <condition>(<expr><name>c</name> <operator>&gt;</operator> <name>obj</name> <operator>&amp;&amp;</operator> <call><name>isascii</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

	<comment type="block">/* digits must be separated from object name by space or closing paren */</comment>
	<comment type="block">/* notice also that we are not allowing an empty object name ... */</comment>
	<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>obj</name> <operator>||</operator> <operator>!</operator><call><name>isascii</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator>
		<operator>!</operator><operator>(</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>c</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>*</operator><name>c</name> <operator>==</operator> <literal type="char">')'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* parse digit string */</comment>
	<expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>lineno</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>lineno</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"invalid line number: %s\n"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* strip digit string from object name */</comment>
	<expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	<return>return <expr><name>lineno</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Count number of lines in the buffer.
 * This is used to test if pager is needed or not.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>count_lines_in_buf</name><parameter_list>(<parameter><decl><type><name>PQExpBuffer</name></type> <name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>lineno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lines</name> <init>= <expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>*</operator><name>lines</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>lineno</name><operator>++</operator></expr>;</expr_stmt>
		<comment type="block">/* find start of next line */</comment>
		<expr_stmt><expr><name>lines</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>lines</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lines</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>lines</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>lineno</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Write text at *lines to output with line numbers.
 *
 * If header_keyword isn't NULL, then line 1 should be the first line beginning
 * with header_keyword; lines before that are unnumbered.
 *
 * Caution: this scribbles on *lines.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_with_linenumbers</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>lines</name></decl></parameter>,
					   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>header_keyword</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>in_header</name> <init>= <expr><operator>(</operator><name>header_keyword</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>header_sz</name> <init>= <expr><ternary><condition><expr><name>in_header</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>header_keyword</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>lineno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>*</operator><name>lines</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>eol</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>in_header</name> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>lines</name></expr></argument>, <argument><expr><name>header_keyword</name></expr></argument>, <argument><expr><name>header_sz</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>in_header</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* increment lineno only for body's lines */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in_header</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>lineno</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* find and mark end of current line */</comment>
		<expr_stmt><expr><name>eol</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>lines</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>eol</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>eol</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* show current line as appropriate */</comment>
		<if_stmt><if>if <condition>(<expr><name>in_header</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"        %s\n"</literal></expr></argument>, <argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"%-7d %s\n"</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<comment type="block">/* advance to next line, if any */</comment>
		<if_stmt><if>if <condition>(<expr><name>eol</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>lines</name> <operator>=</operator> <operator>++</operator><name>eol</name></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/*
 * Report just the primary error; this is to avoid cluttering the output
 * with, for instance, a redisplay of the internally generated query
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>minimal_error_message</name><parameter_list>(<parameter><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PQExpBuffer</name></type> <name>msg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fld</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>msg</name> <operator>=</operator> <call><name>createPQExpBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>fld</name> <operator>=</operator> <call><name>PQresultErrorField</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>PG_DIAG_SEVERITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fld</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printfPQExpBuffer</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"%s:  "</literal></expr></argument>, <argument><expr><name>fld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printfPQExpBuffer</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"ERROR:  "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><name>fld</name> <operator>=</operator> <call><name>PQresultErrorField</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>PG_DIAG_MESSAGE_PRIMARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fld</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendPQExpBufferStr</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>fld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendPQExpBufferStr</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"(not available)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><call><name>appendPQExpBufferChar</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>psql_error</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>destroyPQExpBuffer</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
