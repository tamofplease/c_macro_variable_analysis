<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/bin/pg_controldata/pg_controldata.c"><comment type="block">/*
 * pg_controldata
 *
 * reads the data from $PGDATA/global/pg_control
 *
 * copyright (c) Oliver Elphick &lt;olly@lfix.co.uk&gt;, 2001;
 * licence: BSD
 *
 * src/bin/pg_controldata/pg_controldata.c
 */</comment>

<comment type="block">/*
 * We have to use postgres.h not postgres_fe.h here, because there's so much
 * backend-only stuff in the XLOG include files we need.  But we need a
 * frontend-ish environment otherwise.  Hence this ugly hack.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRONTEND</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlog_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_control.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/controldata_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_getopt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"getopt_long.h"</cpp:file></cpp:include>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>usage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>progname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s displays control information of a PostgreSQL database cluster.\n\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Usage:\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"  %s [OPTION] [DATADIR]\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nOptions:\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" [-D, --pgdata=]DATADIR  data directory\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"  -V, --version          output version information, then exit\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"  -?, --help             show this help, then exit\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"\nIf no data directory (DATADIR) is specified, "</literal>
			 <literal type="string">"the environment variable PGDATA\nis used.\n\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Report bugs to &lt;pgsql-bugs@postgresql.org&gt;.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>dbState</name><parameter_list>(<parameter><decl><type><name>DBState</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>state</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>DB_STARTUP</name></expr>:</case>
			<return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"starting up"</literal></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>DB_SHUTDOWNED</name></expr>:</case>
			<return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"shut down"</literal></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>DB_SHUTDOWNED_IN_RECOVERY</name></expr>:</case>
			<return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"shut down in recovery"</literal></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>DB_SHUTDOWNING</name></expr>:</case>
			<return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"shutting down"</literal></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>DB_IN_CRASH_RECOVERY</name></expr>:</case>
			<return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"in crash recovery"</literal></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>DB_IN_ARCHIVE_RECOVERY</name></expr>:</case>
			<return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"in archive recovery"</literal></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>DB_IN_PRODUCTION</name></expr>:</case>
			<return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"in production"</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></switch>
	<return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unrecognized status code"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>wal_level_str</name><parameter_list>(<parameter><decl><type><name>WalLevel</name></type> <name>wal_level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>wal_level</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>WAL_LEVEL_MINIMAL</name></expr>:</case>
			<return>return <expr><literal type="string">"minimal"</literal></expr>;</return>
		<case>case <expr><name>WAL_LEVEL_REPLICA</name></expr>:</case>
			<return>return <expr><literal type="string">"replica"</literal></expr>;</return>
		<case>case <expr><name>WAL_LEVEL_LOGICAL</name></expr>:</case>
			<return>return <expr><literal type="string">"logical"</literal></expr>;</return>
	</block_content>}</block></switch>
	<return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unrecognized wal_level"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>option</name></name></type> <name><name>long_options</name><index>[]</index></name> <init>= <expr><block>{
		<expr><block>{<expr><literal type="string">"pgdata"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'D'</literal></expr>}</block></expr>,
		<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
	}</block></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>ControlFileData</name> <modifier>*</modifier></type><name>ControlFile</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>crc_ok</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>DataDir</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type>		<name>time_tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>pgctime_str</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>ckpttime_str</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>sysident_str</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>mock_auth_nonce_str</name><index>[<expr><name>MOCK_AUTH_NONCE_LEN</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>strftime_fmt</name> <init>= <expr><literal type="string">"%c"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>progname</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>xlogfilename</name><index>[<expr><name>MAXFNAMELEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>c</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>WalSegSz</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>set_pglocale_pgservice</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>PG_TEXTDOMAIN</name><argument_list>(<argument><expr><literal type="string">"pg_controldata"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>progname</name> <operator>=</operator> <call><name>get_progname</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--help"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-?"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--version"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-V"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"pg_controldata (PostgreSQL) "</literal> <name>PG_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>getopt_long</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"D:"</literal></expr></argument>, <argument><expr><name>long_options</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<switch>switch <condition>(<expr><name>c</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><literal type="char">'D'</literal></expr>:</case>
				<expr_stmt><expr><name>DataDir</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
				<break>break;</break>

			<default>default:</default>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Try \"%s --help\" for more information.\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>DataDir</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>optind</name> <operator>&lt;</operator> <name>argc</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>DataDir</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>optind</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>DataDir</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"PGDATA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Complain if any arguments remain */</comment>
	<if_stmt><if>if <condition>(<expr><name>optind</name> <operator>&lt;</operator> <name>argc</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s: too many command-line arguments (first is \"%s\")\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><name>progname</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Try \"%s --help\" for more information.\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
				<argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>DataDir</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%s: no data directory specified\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Try \"%s --help\" for more information.\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>progname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* get a copy of the control file */</comment>
	<expr_stmt><expr><name>ControlFile</name> <operator>=</operator> <call><name>get_controlfile</name><argument_list>(<argument><expr><name>DataDir</name></expr></argument>, <argument><expr><name>progname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>crc_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>crc_ok</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"WARNING: Calculated CRC checksum does not match value stored in file.\n"</literal>
				 <literal type="string">"Either the file is corrupt, or it has a different layout than this program\n"</literal>
				 <literal type="string">"is expecting.  The results below are untrustworthy.\n\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* set wal segment size */</comment>
	<expr_stmt><expr><name>WalSegSz</name> <operator>=</operator> <name><name>ControlFile</name><operator>-&gt;</operator><name>xlog_seg_size</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsValidWalSegSize</name><argument_list>(<argument><expr><name>WalSegSz</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"WARNING: invalid WAL segment size\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>ngettext</name><argument_list>(<argument><expr><literal type="string">"The WAL segment size stored in the file, %d byte, is not a power of two\n"</literal>
						<literal type="string">"between 1 MB and 1 GB.  The file is corrupt and the results below are\n"</literal>
						<literal type="string">"untrustworthy.\n\n"</literal></expr></argument>,
						<argument><expr><literal type="string">"The WAL segment size stored in the file, %d bytes, is not a power of two\n"</literal>
						<literal type="string">"between 1 MB and 1 GB.  The file is corrupt and the results below are\n"</literal>
						<literal type="string">"untrustworthy.\n\n"</literal></expr></argument>,
						<argument><expr><name>WalSegSz</name></expr></argument>)</argument_list></call></expr></argument>,
			   <argument><expr><name>WalSegSz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * This slightly-chintzy coding will work as long as the control file
	 * timestamps are within the range of time_t; that should be the case in
	 * all foreseeable circumstances, so we don't bother importing the
	 * backend's timezone library into pg_controldata.
	 *
	 * Use variable for format to suppress overly-anal-retentive gcc warning
	 * about %c
	 */</comment>
	<expr_stmt><expr><name>time_tmp</name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator> <name><name>ControlFile</name><operator>-&gt;</operator><name>time</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strftime</name><argument_list>(<argument><expr><name>pgctime_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pgctime_str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>strftime_fmt</name></expr></argument>,
			 <argument><expr><call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>time_tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>time_tmp</name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator> <name><name>ControlFile</name><operator>-&gt;</operator><name>checkPointCopy</name><operator>.</operator><name>time</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strftime</name><argument_list>(<argument><expr><name>ckpttime_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ckpttime_str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>strftime_fmt</name></expr></argument>,
			 <argument><expr><call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>time_tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Calculate name of the WAL file containing the latest checkpoint's REDO
	 * start point.
	 *
	 * A corrupted control file could report a WAL segment size of 0, and to
	 * guard against division by zero, we need to treat that specially.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>WalSegSz</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>XLogSegNo</name></type>	<name>segno</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>XLByteToSeg</name><argument_list>(<argument><expr><name><name>ControlFile</name><operator>-&gt;</operator><name>checkPointCopy</name><operator>.</operator><name>redo</name></name></expr></argument>, <argument><expr><name>segno</name></expr></argument>, <argument><expr><name>WalSegSz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>XLogFileName</name><argument_list>(<argument><expr><name>xlogfilename</name></expr></argument>, <argument><expr><name><name>ControlFile</name><operator>-&gt;</operator><name>checkPointCopy</name><operator>.</operator><name>ThisTimeLineID</name></name></expr></argument>,
					 <argument><expr><name>segno</name></expr></argument>, <argument><expr><name>WalSegSz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>xlogfilename</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"???"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/*
	 * Format system_identifier and mock_authentication_nonce separately to
	 * keep platform-dependent format code out of the translatable message
	 * string.
	 */</comment>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sysident_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sysident_str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>UINT64_FORMAT</name></expr></argument>,
			 <argument><expr><name><name>ControlFile</name><operator>-&gt;</operator><name>system_identifier</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MOCK_AUTH_NONCE_LEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mock_auth_nonce_str</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"%02x"</literal></expr></argument>,
				 <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>ControlFile</name><operator>-&gt;</operator><name>mock_authentication_nonce</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"pg_control version number:            %u\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><name><name>ControlFile</name><operator>-&gt;</operator><name>pg_control_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Catalog version number:               %u\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><name><name>ControlFile</name><operator>-&gt;</operator><name>catalog_version_no</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Database system identifier:           %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><name>sysident_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Database cluster state:               %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><call><name>dbState</name><argument_list>(<argument><expr><name><name>ControlFile</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"pg_control last modified:             %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><name>pgctime_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Latest checkpoint location:           %X/%X\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name><name>ControlFile</name><operator>-&gt;</operator><name>checkPoint</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>,
		   <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>ControlFile</name><operator>-&gt;</operator><name>checkPoint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Latest checkpoint's REDO location:    %X/%X\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name><name>ControlFile</name><operator>-&gt;</operator><name>checkPointCopy</name><operator>.</operator><name>redo</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>,
		   <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>ControlFile</name><operator>-&gt;</operator><name>checkPointCopy</name><operator>.</operator><name>redo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Latest checkpoint's REDO WAL file:    %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><name>xlogfilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Latest checkpoint's TimeLineID:       %u\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><name><name>ControlFile</name><operator>-&gt;</operator><name>checkPointCopy</name><operator>.</operator><name>ThisTimeLineID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Latest checkpoint's PrevTimeLineID:   %u\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><name><name>ControlFile</name><operator>-&gt;</operator><name>checkPointCopy</name><operator>.</operator><name>PrevTimeLineID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Latest checkpoint's full_page_writes: %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><ternary><condition><expr><name><name>ControlFile</name><operator>-&gt;</operator><name>checkPointCopy</name><operator>.</operator><name>fullPageWrites</name></name></expr> ?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"on"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"off"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Latest checkpoint's NextXID:          %u:%u\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><name><name>ControlFile</name><operator>-&gt;</operator><name>checkPointCopy</name><operator>.</operator><name>nextXidEpoch</name></name></expr></argument>,
		   <argument><expr><name><name>ControlFile</name><operator>-&gt;</operator><name>checkPointCopy</name><operator>.</operator><name>nextXid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Latest checkpoint's NextOID:          %u\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><name><name>ControlFile</name><operator>-&gt;</operator><name>checkPointCopy</name><operator>.</operator><name>nextOid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Latest checkpoint's NextMultiXactId:  %u\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><name><name>ControlFile</name><operator>-&gt;</operator><name>checkPointCopy</name><operator>.</operator><name>nextMulti</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Latest checkpoint's NextMultiOffset:  %u\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><name><name>ControlFile</name><operator>-&gt;</operator><name>checkPointCopy</name><operator>.</operator><name>nextMultiOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Latest checkpoint's oldestXID:        %u\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><name><name>ControlFile</name><operator>-&gt;</operator><name>checkPointCopy</name><operator>.</operator><name>oldestXid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Latest checkpoint's oldestXID's DB:   %u\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><name><name>ControlFile</name><operator>-&gt;</operator><name>checkPointCopy</name><operator>.</operator><name>oldestXidDB</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Latest checkpoint's oldestActiveXID:  %u\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><name><name>ControlFile</name><operator>-&gt;</operator><name>checkPointCopy</name><operator>.</operator><name>oldestActiveXid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Latest checkpoint's oldestMultiXid:   %u\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><name><name>ControlFile</name><operator>-&gt;</operator><name>checkPointCopy</name><operator>.</operator><name>oldestMulti</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Latest checkpoint's oldestMulti's DB: %u\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><name><name>ControlFile</name><operator>-&gt;</operator><name>checkPointCopy</name><operator>.</operator><name>oldestMultiDB</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Latest checkpoint's oldestCommitTsXid:%u\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><name><name>ControlFile</name><operator>-&gt;</operator><name>checkPointCopy</name><operator>.</operator><name>oldestCommitTsXid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Latest checkpoint's newestCommitTsXid:%u\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><name><name>ControlFile</name><operator>-&gt;</operator><name>checkPointCopy</name><operator>.</operator><name>newestCommitTsXid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Time of latest checkpoint:            %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><name>ckpttime_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Fake LSN counter for unlogged rels:   %X/%X\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name><name>ControlFile</name><operator>-&gt;</operator><name>unloggedLSN</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>,
		   <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>ControlFile</name><operator>-&gt;</operator><name>unloggedLSN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Minimum recovery ending location:     %X/%X\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name><name>ControlFile</name><operator>-&gt;</operator><name>minRecoveryPoint</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>,
		   <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>ControlFile</name><operator>-&gt;</operator><name>minRecoveryPoint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Min recovery ending loc's timeline:   %u\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><name><name>ControlFile</name><operator>-&gt;</operator><name>minRecoveryPointTLI</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Backup start location:                %X/%X\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name><name>ControlFile</name><operator>-&gt;</operator><name>backupStartPoint</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>,
		   <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>ControlFile</name><operator>-&gt;</operator><name>backupStartPoint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Backup end location:                  %X/%X\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name><name>ControlFile</name><operator>-&gt;</operator><name>backupEndPoint</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>,
		   <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>ControlFile</name><operator>-&gt;</operator><name>backupEndPoint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"End-of-backup record required:        %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><ternary><condition><expr><name><name>ControlFile</name><operator>-&gt;</operator><name>backupEndRequired</name></name></expr> ?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"yes"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"no"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"wal_level setting:                    %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><call><name>wal_level_str</name><argument_list>(<argument><expr><name><name>ControlFile</name><operator>-&gt;</operator><name>wal_level</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"wal_log_hints setting:                %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><ternary><condition><expr><name><name>ControlFile</name><operator>-&gt;</operator><name>wal_log_hints</name></name></expr> ?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"on"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"off"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"max_connections setting:              %d\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><name><name>ControlFile</name><operator>-&gt;</operator><name>MaxConnections</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"max_worker_processes setting:         %d\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><name><name>ControlFile</name><operator>-&gt;</operator><name>max_worker_processes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"max_prepared_xacts setting:           %d\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><name><name>ControlFile</name><operator>-&gt;</operator><name>max_prepared_xacts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"max_locks_per_xact setting:           %d\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><name><name>ControlFile</name><operator>-&gt;</operator><name>max_locks_per_xact</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"track_commit_timestamp setting:       %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><ternary><condition><expr><name><name>ControlFile</name><operator>-&gt;</operator><name>track_commit_timestamp</name></name></expr> ?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"on"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"off"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Maximum data alignment:               %u\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><name><name>ControlFile</name><operator>-&gt;</operator><name>maxAlign</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* we don't print floatFormat since can't say much useful about it */</comment>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Database block size:                  %u\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><name><name>ControlFile</name><operator>-&gt;</operator><name>blcksz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Blocks per segment of large relation: %u\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><name><name>ControlFile</name><operator>-&gt;</operator><name>relseg_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"WAL block size:                       %u\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><name><name>ControlFile</name><operator>-&gt;</operator><name>xlog_blcksz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Bytes per WAL segment:                %u\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><name><name>ControlFile</name><operator>-&gt;</operator><name>xlog_seg_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Maximum length of identifiers:        %u\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><name><name>ControlFile</name><operator>-&gt;</operator><name>nameDataLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Maximum columns in an index:          %u\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><name><name>ControlFile</name><operator>-&gt;</operator><name>indexMaxKeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Maximum size of a TOAST chunk:        %u\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><name><name>ControlFile</name><operator>-&gt;</operator><name>toast_max_chunk_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Size of a large-object chunk:         %u\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><name><name>ControlFile</name><operator>-&gt;</operator><name>loblksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* This is no longer configurable, but users may still expect to see it: */</comment>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Date/time type storage:               %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"64-bit integers"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Float4 argument passing:              %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><operator>(</operator><ternary><condition><expr><name><name>ControlFile</name><operator>-&gt;</operator><name>float4ByVal</name></name></expr> ?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"by value"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"by reference"</literal></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Float8 argument passing:              %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><operator>(</operator><ternary><condition><expr><name><name>ControlFile</name><operator>-&gt;</operator><name>float8ByVal</name></name></expr> ?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"by value"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"by reference"</literal></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Data page checksum version:           %u\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><name><name>ControlFile</name><operator>-&gt;</operator><name>data_checksum_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Mock authentication nonce:            %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>,
		   <argument><expr><name>mock_auth_nonce_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
