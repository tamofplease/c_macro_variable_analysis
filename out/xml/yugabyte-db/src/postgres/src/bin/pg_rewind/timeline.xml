<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/bin/pg_rewind/timeline.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * timeline.c
 *	  timeline-related functions.
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_rewind.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/timeline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlog_internal.h"</cpp:file></cpp:include>

<comment type="block">/*
 * This is copy-pasted from the backend readTimeLineHistory, modified to
 * return a malloc'd array and to work without backend functions.
 */</comment>
<comment type="block">/*
 * Try to read a timeline's history file.
 *
 * If successful, return the list of component TLIs (the given TLI followed by
 * its ancestor TLIs).  If we can't find the history file, assume that the
 * timeline has no parents, and return a list of just the specified timeline
 * ID.
 */</comment>
<function><type><name>TimeLineHistoryEntry</name> <modifier>*</modifier></type>
<name>rewind_parseTimeLineHistory</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>TimeLineID</name></type> <name>targetTLI</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nentries</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>fline</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TimeLineHistoryEntry</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TimeLineHistoryEntry</name> <modifier>*</modifier></type><name>entries</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nlines</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TimeLineID</name></type>	<name>lasttli</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>prevend</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>bufptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>lastline</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Parse the file...
	 */</comment>
	<expr_stmt><expr><name>prevend</name> <operator>=</operator> <name>InvalidXLogRecPtr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>bufptr</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>!</operator><name>lastline</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>TimeLineID</name></type>	<name>tli</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint32</name></type>		<name>switchpoint_hi</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint32</name></type>		<name>switchpoint_lo</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>nfields</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>fline</name> <operator>=</operator> <name>bufptr</name></expr>;</expr_stmt>
		<while>while <condition>(<expr><operator>*</operator><name>bufptr</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>bufptr</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>bufptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>bufptr</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>lastline</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>bufptr</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<comment type="block">/* skip leading whitespace and check for # comment */</comment>
		<for>for <control>(<init><expr><name>ptr</name> <operator>=</operator> <name>fline</name></expr>;</init> <condition><expr><operator>*</operator><name>ptr</name></expr>;</condition> <incr><expr><name>ptr</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
		</block_content>}</block></for>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <operator>*</operator><name>ptr</name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>nfields</name> <operator>=</operator> <call><name>sscanf</name><argument_list>(<argument><expr><name>fline</name></expr></argument>, <argument><expr><literal type="string">"%u\t%X/%X"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tli</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>switchpoint_hi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>switchpoint_lo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>nfields</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* expect a numeric timeline ID as first field of line */</comment>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"syntax error in history file: %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Expected a numeric timeline ID.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>nfields</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"syntax error in history file: %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Expected a write-ahead log switchpoint location.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>entries</name> <operator>&amp;&amp;</operator> <name>tli</name> <operator>&lt;=</operator> <name>lasttli</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid data in history file: %s\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Timeline IDs must be in increasing sequence.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>lasttli</name> <operator>=</operator> <name>tli</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>nlines</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>entries</name> <operator>=</operator> <call><name>pg_realloc</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>nlines</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TimeLineHistoryEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>&amp;</operator><name><name>entries</name><index>[<expr><name>nlines</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>tli</name></name> <operator>=</operator> <name>tli</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>begin</name></name> <operator>=</operator> <name>prevend</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64</name><operator>)</operator> <operator>(</operator><name>switchpoint_hi</name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal> <operator>|</operator> <operator>(</operator><name>uint64</name><operator>)</operator> <name>switchpoint_lo</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>prevend</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>end</name></name></expr>;</expr_stmt>

		<comment type="block">/* we ignore the remainder of each line */</comment>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>entries</name> <operator>&amp;&amp;</operator> <name>targetTLI</name> <operator>&lt;=</operator> <name>lasttli</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"invalid data in history file\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Timeline IDs must be less than child timeline's ID.\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Create one more entry for the "tip" of the timeline, which has no entry
	 * in the history file.
	 */</comment>
	<expr_stmt><expr><name>nlines</name><operator>++</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>entries</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>entries</name> <operator>=</operator> <call><name>pg_realloc</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>nlines</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TimeLineHistoryEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>entries</name> <operator>=</operator> <call><name>pg_malloc</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TimeLineHistoryEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>&amp;</operator><name><name>entries</name><index>[<expr><name>nlines</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>tli</name></name> <operator>=</operator> <name>targetTLI</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>begin</name></name> <operator>=</operator> <name>prevend</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>InvalidXLogRecPtr</name></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>nentries</name> <operator>=</operator> <name>nlines</name></expr>;</expr_stmt>
	<return>return <expr><name>entries</name></expr>;</return>
</block_content>}</block></function>
</unit>
