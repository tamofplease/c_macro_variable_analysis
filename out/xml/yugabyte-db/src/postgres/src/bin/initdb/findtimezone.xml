<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/bin/initdb/findtimezone.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * findtimezone.c
 *	  Functions for determining the default timezone to use.
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *	  src/bin/initdb/findtimezone.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgtz.h"</cpp:file></cpp:include>

<comment type="block">/* Ideally this would be in a .h file, but it hardly seems worth the trouble */</comment>
<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>select_default_timezone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>share_path</name></decl></parameter>)</parameter_list>;</function_decl>


<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SYSTEMTZDIR</name></cpp:ifndef>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>tzdirpath</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/*
 * Return full pathname of timezone data directory
 *
 * In this file, tzdirpath is assumed to be set up by select_default_timezone.
 */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>pg_TZDIR</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SYSTEMTZDIR</name></cpp:ifndef>
	<comment type="block">/* normal case: timezone stuff is under our share dir */</comment>
	<return>return <expr><name>tzdirpath</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<comment type="block">/* we're configured to use system's timezone database */</comment>
	<return>return <expr><name>SYSTEMTZDIR</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<comment type="block">/*
 * Given a timezone name, open() the timezone data file.  Return the
 * file descriptor if successful, -1 if not.
 *
 * This is simpler than the backend function of the same name because
 * we assume that the input string has the correct case already, so there
 * is no need for case-folding.  (This is obviously true if we got the file
 * name from the filesystem to start with.  The only other place it can come
 * from is the environment variable TZ, and there seems no need to allow
 * case variation in that; other programs aren't likely to.)
 *
 * If "canonname" is not NULL, then on success the canonical spelling of the
 * given name is stored there (the buffer must be &gt; TZ_STRLEN_MAX bytes!).
 * This is redundant but kept for compatibility with the backend code.
 */</comment>
<function><type><name>int</name></type>
<name>pg_open_tzfile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>canonname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>fullname</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>canonname</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>canonname</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>TZ_STRLEN_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>, <argument><expr><call><name>pg_TZDIR</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fullname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>MAXPGPATH</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>				<comment type="block">/* not gonna fit */</comment>
	<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>open</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>PG_BINARY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<comment type="block">/*
 * Load a timezone definition.
 * Does not verify that the timezone is acceptable!
 *
 * This corresponds to the backend's pg_tzset(), except that we only support
 * one loaded timezone at a time.
 */</comment>
<function><type><specifier>static</specifier> <name>pg_tz</name> <modifier>*</modifier></type>
<name>pg_load_tz</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>pg_tz</name></type> <name>tz</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>TZ_STRLEN_MAX</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>			<comment type="block">/* not going to fit */</comment>

	<comment type="block">/*
	 * "GMT" is always sent to tzparse(); see comments for pg_tzset().
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"GMT"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>tzparse</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tz</name><operator>.</operator><name>state</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* This really, really should not happen ... */</comment>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>tzload</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tz</name><operator>.</operator><name>state</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal> <operator>||</operator> <operator>!</operator><call><name>tzparse</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tz</name><operator>.</operator><name>state</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<return>return <expr><name>NULL</name></expr>;</return>		<comment type="block">/* unknown timezone */</comment>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>tz</name><operator>.</operator><name>TZname</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>&amp;</operator><name>tz</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * The following block of code attempts to determine which timezone in our
 * timezone database is the best match for the active system timezone.
 *
 * On most systems, we rely on trying to match the observable behavior of
 * the C library's localtime() function.  The database zone that matches
 * furthest into the past is the one to use.  Often there will be several
 * zones with identical rankings (since the Olson database assigns multiple
 * names to many zones).  We break ties arbitrarily by preferring shorter,
 * then alphabetically earlier zone names.
 *
 * Win32's native knowledge about timezones appears to be too incomplete
 * and too different from the Olson database for the above matching strategy
 * to be of any use. But there is just a limited number of timezones
 * available, so we can rely on a handmade mapping table instead.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_DAY</name></cpp:macro>	<cpp:value>((time_t) (60*60*24))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_WEEK</name></cpp:macro>	<cpp:value>((time_t) (60*60*24*7))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T_MONTH</name></cpp:macro> <cpp:value>((time_t) (60*60*24*31))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_TEST_TIMES</name></cpp:macro> <cpp:value>(52*100)</cpp:value></cpp:define> <comment type="block">/* 100 years */</comment>

<struct>struct <name>tztry</name>
<block>{
	<decl_stmt><decl><type><name>int</name></type>			<name>n_test_times</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type>		<name><name>test_times</name><index>[<expr><name>MAX_TEST_TIMES</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>scan_available_timezones</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tzdir</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tzdirsub</name></decl></parameter>,
						 <parameter><decl><type><name><name>struct</name> <name>tztry</name></name> <modifier>*</modifier></type><name>tt</name></decl></parameter>,
						 <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bestscore</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>bestzonename</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * Get GMT offset from a system struct tm
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_timezone_offset</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRUCT_TM_TM_ZONE</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<return>return <expr><name><name>tm</name><operator>-&gt;</operator><name>tm_gmtoff</name></name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_INT_TIMEZONE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<return>return <expr><operator>-</operator><name>TIMEZONE_GLOBAL</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> No way to determine TZ? Can this happen?</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/*
 * Convenience subroutine to convert y/m/d to time_t (NOT pg_time_t)
 */</comment>
<function><type><specifier>static</specifier> <name>time_t</name></type>
<name>build_time_t</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>year</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>month</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>day</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type>	<name>tm</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mday</name></name> <operator>=</operator> <name>day</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>=</operator> <name>month</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>=</operator> <name>year</name> <operator>-</operator> <literal type="number">1900</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_isdst</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<return>return <expr><call><name>mktime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Does a system tm value match one we computed ourselves?
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>compare_tm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pg_tm</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>!=</operator> <name><name>p</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>||</operator>
		<name><name>s</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>!=</operator> <name><name>p</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>||</operator>
		<name><name>s</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>!=</operator> <name><name>p</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>||</operator>
		<name><name>s</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>!=</operator> <name><name>p</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>||</operator>
		<name><name>s</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>!=</operator> <name><name>p</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>||</operator>
		<name><name>s</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>!=</operator> <name><name>p</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>||</operator>
		<name><name>s</name><operator>-&gt;</operator><name>tm_wday</name></name> <operator>!=</operator> <name><name>p</name><operator>-&gt;</operator><name>tm_wday</name></name> <operator>||</operator>
		<name><name>s</name><operator>-&gt;</operator><name>tm_yday</name></name> <operator>!=</operator> <name><name>p</name><operator>-&gt;</operator><name>tm_yday</name></name> <operator>||</operator>
		<name><name>s</name><operator>-&gt;</operator><name>tm_isdst</name></name> <operator>!=</operator> <name><name>p</name><operator>-&gt;</operator><name>tm_isdst</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * See how well a specific timezone setting matches the system behavior
 *
 * We score a timezone setting according to the number of test times it
 * matches.  (The test times are ordered later-to-earlier, but this routine
 * doesn't actually know that; it just scans until the first non-match.)
 *
 * We return -1 for a completely unusable setting; this is worse than the
 * score of zero for a setting that works but matches not even the first
 * test time.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>score_timezone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tzname</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tztry</name></name> <modifier>*</modifier></type><name>tt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pg_time_t</name></type>	<name>pgtt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name>  <modifier>*</modifier></type><name>systm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>pg_tm</name></name> <modifier>*</modifier></type><name>pgtm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>cbuf</name><index>[<expr><name>TZ_STRLEN_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pg_tz</name>	   <modifier>*</modifier></type><name>tz</name></decl>;</decl_stmt>

	<comment type="block">/* Load timezone definition */</comment>
	<expr_stmt><expr><name>tz</name> <operator>=</operator> <call><name>pg_load_tz</name><argument_list>(<argument><expr><name>tzname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tz</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>				<comment type="block">/* unrecognized zone name */</comment>

	<comment type="block">/* Reject if leap seconds involved */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_tz_acceptable</name><argument_list>(<argument><expr><name>tz</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_IDENTIFY_TIMEZONE</name></cpp:ifdef>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Reject TZ \"%s\": uses leap seconds\n"</literal></expr></argument>, <argument><expr><name>tzname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Check for match at all the test times */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tt</name><operator>-&gt;</operator><name>n_test_times</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>pgtt</name> <operator>=</operator> <operator>(</operator><name>pg_time_t</name><operator>)</operator> <operator>(</operator><name><name>tt</name><operator>-&gt;</operator><name>test_times</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>pgtm</name> <operator>=</operator> <call><name>pg_localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pgtt</name></expr></argument>, <argument><expr><name>tz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pgtm</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>			<comment type="block">/* probably shouldn't happen */</comment>
		<expr_stmt><expr><name>systm</name> <operator>=</operator> <call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>tt</name><operator>-&gt;</operator><name>test_times</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>systm</name></expr>)</condition>
		<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_IDENTIFY_TIMEZONE</name></cpp:ifdef>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"TZ \"%s\" scores %d: at %ld %04d-%02d-%02d %02d:%02d:%02d %s, system had no data\n"</literal></expr></argument>,
					<argument><expr><name>tzname</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>pgtt</name></expr></argument>,
					<argument><expr><name><name>pgtm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr></argument>, <argument><expr><name><name>pgtm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pgtm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>,
					<argument><expr><name><name>pgtm</name><operator>-&gt;</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>pgtm</name><operator>-&gt;</operator><name>tm_min</name></name></expr></argument>, <argument><expr><name><name>pgtm</name><operator>-&gt;</operator><name>tm_sec</name></name></expr></argument>,
					<argument><expr><ternary><condition><expr><name><name>pgtm</name><operator>-&gt;</operator><name>tm_isdst</name></name></expr> ?</condition><then> <expr><literal type="string">"dst"</literal></expr> </then><else>: <expr><literal type="string">"std"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<return>return <expr><name>i</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>compare_tm</name><argument_list>(<argument><expr><name>systm</name></expr></argument>, <argument><expr><name>pgtm</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_IDENTIFY_TIMEZONE</name></cpp:ifdef>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"TZ \"%s\" scores %d: at %ld %04d-%02d-%02d %02d:%02d:%02d %s versus %04d-%02d-%02d %02d:%02d:%02d %s\n"</literal></expr></argument>,
					<argument><expr><name>tzname</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>pgtt</name></expr></argument>,
					<argument><expr><name><name>pgtm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr></argument>, <argument><expr><name><name>pgtm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pgtm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>,
					<argument><expr><name><name>pgtm</name><operator>-&gt;</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>pgtm</name><operator>-&gt;</operator><name>tm_min</name></name></expr></argument>, <argument><expr><name><name>pgtm</name><operator>-&gt;</operator><name>tm_sec</name></name></expr></argument>,
					<argument><expr><ternary><condition><expr><name><name>pgtm</name><operator>-&gt;</operator><name>tm_isdst</name></name></expr> ?</condition><then> <expr><literal type="string">"dst"</literal></expr> </then><else>: <expr><literal type="string">"std"</literal></expr></else></ternary></expr></argument>,
					<argument><expr><name><name>systm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr></argument>, <argument><expr><name><name>systm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>systm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>,
					<argument><expr><name><name>systm</name><operator>-&gt;</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>systm</name><operator>-&gt;</operator><name>tm_min</name></name></expr></argument>, <argument><expr><name><name>systm</name><operator>-&gt;</operator><name>tm_sec</name></name></expr></argument>,
					<argument><expr><ternary><condition><expr><name><name>systm</name><operator>-&gt;</operator><name>tm_isdst</name></name></expr> ?</condition><then> <expr><literal type="string">"dst"</literal></expr> </then><else>: <expr><literal type="string">"std"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<return>return <expr><name>i</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>systm</name><operator>-&gt;</operator><name>tm_isdst</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Check match of zone names, too */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>pgtm</name><operator>-&gt;</operator><name>tm_zone</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>		<comment type="block">/* probably shouldn't happen */</comment>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>cbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>strftime</name><argument_list>(<argument><expr><name>cbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cbuf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%Z"</literal></expr></argument>, <argument><expr><name>systm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* zone abbr */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cbuf</name></expr></argument>, <argument><expr><name><name>pgtm</name><operator>-&gt;</operator><name>tm_zone</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_IDENTIFY_TIMEZONE</name></cpp:ifdef>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"TZ \"%s\" scores %d: at %ld \"%s\" versus \"%s\"\n"</literal></expr></argument>,
						<argument><expr><name>tzname</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>long</name><operator>)</operator> <name>pgtt</name></expr></argument>,
						<argument><expr><name><name>pgtm</name><operator>-&gt;</operator><name>tm_zone</name></name></expr></argument>, <argument><expr><name>cbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
				<return>return <expr><name>i</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_IDENTIFY_TIMEZONE</name></cpp:ifdef>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"TZ \"%s\" gets max score %d\n"</literal></expr></argument>, <argument><expr><name>tzname</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Try to identify a timezone name (in our terminology) that best matches the
 * observed behavior of the system timezone library.  We cannot assume that
 * the system TZ environment setting (if indeed there is one) matches our
 * terminology, so we ignore it and just look at what localtime() returns.
 */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>identify_system_timezone</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>resultbuf</name><index>[<expr><name>TZ_STRLEN_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type>		<name>tnow</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type>		<name>t</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>tztry</name></name></type> <name>tt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name>  <modifier>*</modifier></type><name>tm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>thisyear</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>bestscore</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>tmptzdir</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>std_ofs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>std_zone_name</name><index>[<expr><name>TZ_STRLEN_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>,
				<decl><type ref="prev"/><name><name>dst_zone_name</name><index>[<expr><name>TZ_STRLEN_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>cbuf</name><index>[<expr><name>TZ_STRLEN_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

	<comment type="block">/* Initialize OS timezone library */</comment>
	<expr_stmt><expr><call><name>tzset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Set up the list of dates to be probed to see how well our timezone
	 * matches the system zone.  We first probe January and July of the
	 * current year; this serves to quickly eliminate the vast majority of the
	 * TZ database entries.  If those dates match, we probe every week for 100
	 * years backwards from the current July.  (Weekly resolution is good
	 * enough to identify DST transition rules, since everybody switches on
	 * Sundays.)  This is sufficient to cover most of the Unix time_t range,
	 * and we don't want to look further than that since many systems won't
	 * have sane TZ behavior further back anyway.  The further back the zone
	 * matches, the better we score it.  This may seem like a rather random
	 * way of doing things, but experience has shown that system-supplied
	 * timezone definitions are likely to have DST behavior that is right for
	 * the recent past and not so accurate further back. Scoring in this way
	 * allows us to recognize zones that have some commonality with the Olson
	 * database, without insisting on exact match. (Note: we probe Thursdays,
	 * not Sundays, to avoid triggering DST-transition bugs in localtime
	 * itself.)
	 */</comment>
	<expr_stmt><expr><name>tnow</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tnow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tm</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>			<comment type="block">/* give up if localtime is broken... */</comment>
	<expr_stmt><expr><name>thisyear</name> <operator>=</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>build_time_t</name><argument_list>(<argument><expr><name>thisyear</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Round back to GMT midnight Thursday.  This depends on the knowledge
	 * that the time_t origin is Thu Jan 01 1970.  (With a different origin
	 * we'd be probing some other day of the week, but it wouldn't matter
	 * anyway unless localtime() had DST-transition bugs.)
	 */</comment>
	<expr_stmt><expr><name>t</name> <operator>-=</operator> <operator>(</operator><name>t</name> <operator>%</operator> <name>T_WEEK</name><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>tt</name><operator>.</operator><name>n_test_times</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tt</name><operator>.</operator><name>test_times</name><index>[<expr><name><name>tt</name><operator>.</operator><name>n_test_times</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>build_time_t</name><argument_list>(<argument><expr><name>thisyear</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>t</name> <operator>-=</operator> <operator>(</operator><name>t</name> <operator>%</operator> <name>T_WEEK</name><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>tt</name><operator>.</operator><name>test_times</name><index>[<expr><name><name>tt</name><operator>.</operator><name>n_test_times</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

	<while>while <condition>(<expr><name><name>tt</name><operator>.</operator><name>n_test_times</name></name> <operator>&lt;</operator> <name>MAX_TEST_TIMES</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>t</name> <operator>-=</operator> <name>T_WEEK</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tt</name><operator>.</operator><name>test_times</name><index>[<expr><name><name>tt</name><operator>.</operator><name>n_test_times</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/* Search for the best-matching timezone file */</comment>
	<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>tmptzdir</name></expr></argument>, <argument><expr><call><name>pg_TZDIR</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmptzdir</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>bestscore</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>resultbuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>scan_available_timezones</name><argument_list>(<argument><expr><name>tmptzdir</name></expr></argument>, <argument><expr><name>tmptzdir</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>tmptzdir</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name>tt</name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name>bestscore</name></expr></argument>, <argument><expr><name>resultbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>bestscore</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Ignore Olson's rather silly "Factory" zone; use GMT instead */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>resultbuf</name></expr></argument>, <argument><expr><literal type="string">"Factory"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><name>resultbuf</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Couldn't find a match in the database, so next we try constructed zone
	 * names (like "PST8PDT").
	 *
	 * First we need to determine the names of the local standard and daylight
	 * zones.  The idea here is to scan forward from today until we have seen
	 * both zones, if both are in use.
	 */</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>std_zone_name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>std_zone_name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst_zone_name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dst_zone_name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>std_ofs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>tnow</name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Round back to a GMT midnight so results don't depend on local time of
	 * day
	 */</comment>
	<expr_stmt><expr><name>tnow</name> <operator>-=</operator> <operator>(</operator><name>tnow</name> <operator>%</operator> <name>T_DAY</name><operator>)</operator></expr>;</expr_stmt>

	<comment type="block">/*
	 * We have to look a little further ahead than one year, in case today is
	 * just past a DST boundary that falls earlier in the year than the next
	 * similar boundary.  Arbitrarily scan up to 14 months.
	 */</comment>
	<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <name>tnow</name></expr>;</init> <condition><expr><name>t</name> <operator>&lt;=</operator> <name>tnow</name> <operator>+</operator> <name>T_MONTH</name> <operator>*</operator> <literal type="number">14</literal></expr>;</condition> <incr><expr><name>t</name> <operator>+=</operator> <name>T_MONTH</name></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>tm</name> <operator>=</operator> <call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tm</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_isdst</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_isdst</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>std_zone_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* found STD zone */</comment>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>cbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>strftime</name><argument_list>(<argument><expr><name>cbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cbuf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%Z"</literal></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* zone abbr */</comment>
			<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>std_zone_name</name></expr></argument>, <argument><expr><name>cbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>std_ofs</name> <operator>=</operator> <call><name>get_timezone_offset</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_isdst</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>dst_zone_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* found DST zone */</comment>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>cbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>strftime</name><argument_list>(<argument><expr><name>cbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cbuf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%Z"</literal></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* zone abbr */</comment>
			<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>dst_zone_name</name></expr></argument>, <argument><expr><name>cbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<comment type="block">/* Done if found both */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>std_zone_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>dst_zone_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* We should have found a STD zone name by now... */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>std_zone_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
	<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_IDENTIFY_TIMEZONE</name></cpp:ifdef>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"could not determine system time zone\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<return>return <expr><name>NULL</name></expr>;</return>			<comment type="block">/* go to GMT */</comment>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* If we found DST then try STD&lt;ofs&gt;DST */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>dst_zone_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>resultbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>resultbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%d%s"</literal></expr></argument>,
				 <argument><expr><name>std_zone_name</name></expr></argument>, <argument><expr><operator>-</operator><name>std_ofs</name> <operator>/</operator> <literal type="number">3600</literal></expr></argument>, <argument><expr><name>dst_zone_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>score_timezone</name><argument_list>(<argument><expr><name>resultbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tt</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>resultbuf</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Try just the STD timezone (works for GMT at least) */</comment>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>resultbuf</name></expr></argument>, <argument><expr><name>std_zone_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>score_timezone</name><argument_list>(<argument><expr><name>resultbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tt</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>resultbuf</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Try STD&lt;ofs&gt; */</comment>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>resultbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>resultbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%d"</literal></expr></argument>,
			 <argument><expr><name>std_zone_name</name></expr></argument>, <argument><expr><operator>-</operator><name>std_ofs</name> <operator>/</operator> <literal type="number">3600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>score_timezone</name><argument_list>(<argument><expr><name>resultbuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tt</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>resultbuf</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Did not find the timezone.  Fallback to use a GMT zone.  Note that the
	 * Olson timezone database names the GMT-offset zones in POSIX style: plus
	 * is west of Greenwich.  It's unfortunate that this is opposite of SQL
	 * conventions.  Should we therefore change the names? Probably not...
	 */</comment>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>resultbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>resultbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"Etc/GMT%s%d"</literal></expr></argument>,
			 <argument><expr><ternary><condition><expr><operator>(</operator><operator>-</operator><name>std_ofs</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"+"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>-</operator><name>std_ofs</name> <operator>/</operator> <literal type="number">3600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_IDENTIFY_TIMEZONE</name></cpp:ifdef>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"could not recognize system time zone, using \"%s\"\n"</literal></expr></argument>,
			<argument><expr><name>resultbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>resultbuf</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Recursively scan the timezone database looking for the best match to
 * the system timezone behavior.
 *
 * tzdir points to a buffer of size MAXPGPATH.  On entry, it holds the
 * pathname of a directory containing TZ files.  We internally modify it
 * to hold pathnames of sub-directories and files, but must restore it
 * to its original contents before exit.
 *
 * tzdirsub points to the part of tzdir that represents the subfile name
 * (ie, tzdir + the original directory name length, plus one for the
 * first added '/').
 *
 * tt tells about the system timezone behavior we need to match.
 *
 * *bestscore and *bestzonename on entry hold the best score found so far
 * and the name of the best zone.  We overwrite them if we find a better
 * score.  bestzonename must be a buffer of length TZ_STRLEN_MAX + 1.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>scan_available_timezones</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tzdir</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tzdirsub</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tztry</name></name> <modifier>*</modifier></type><name>tt</name></decl></parameter>,
						 <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bestscore</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>bestzonename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>tzdir_orig_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>tzdir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	  <modifier>*</modifier><modifier>*</modifier></type><name>names</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	  <modifier>*</modifier><modifier>*</modifier></type><name>namep</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>names</name> <operator>=</operator> <call><name>pgfnames</name><argument_list>(<argument><expr><name>tzdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>names</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>namep</name> <operator>=</operator> <name>names</name></expr>;</init> <condition><expr><operator>*</operator><name>namep</name></expr>;</condition> <incr><expr><name>namep</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>name</name> <init>= <expr><operator>*</operator><name>namep</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>statbuf</name></decl>;</decl_stmt>

		<comment type="block">/* Ignore . and .., plus any other "hidden" files */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tzdir</name> <operator>+</operator> <name>tzdir_orig_len</name></expr></argument>, <argument><expr><name>MAXPGPATH</name> <operator>-</operator> <name>tzdir_orig_len</name></expr></argument>,
				 <argument><expr><literal type="string">"/%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>tzdir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statbuf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_IDENTIFY_TIMEZONE</name></cpp:ifdef>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"could not stat \"%s\": %s\n"</literal></expr></argument>,
					<argument><expr><name>tzdir</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<expr_stmt><expr><name><name>tzdir</name><index>[<expr><name>tzdir_orig_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>statbuf</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Recurse into subdirectory */</comment>
			<expr_stmt><expr><call><name>scan_available_timezones</name><argument_list>(<argument><expr><name>tzdir</name></expr></argument>, <argument><expr><name>tzdirsub</name></expr></argument>, <argument><expr><name>tt</name></expr></argument>,
									 <argument><expr><name>bestscore</name></expr></argument>, <argument><expr><name>bestzonename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* Load and test this file */</comment>
			<decl_stmt><decl><type><name>int</name></type>			<name>score</name> <init>= <expr><call><name>score_timezone</name><argument_list>(<argument><expr><name>tzdirsub</name></expr></argument>, <argument><expr><name>tt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>score</name> <operator>&gt;</operator> <operator>*</operator><name>bestscore</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>bestscore</name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>bestzonename</name></expr></argument>, <argument><expr><name>tzdirsub</name></expr></argument>, <argument><expr><name>TZ_STRLEN_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>score</name> <operator>==</operator> <operator>*</operator><name>bestscore</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* Consider how to break a tie */</comment>
				<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>tzdirsub</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>bestzonename</name></expr></argument>)</argument_list></call> <operator>||</operator>
					<operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name>tzdirsub</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>bestzonename</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
					 <call><name>strcmp</name><argument_list>(<argument><expr><name>tzdirsub</name></expr></argument>, <argument><expr><name>bestzonename</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>bestzonename</name></expr></argument>, <argument><expr><name>tzdirsub</name></expr></argument>, <argument><expr><name>TZ_STRLEN_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="block">/* Restore tzdir */</comment>
		<expr_stmt><expr><name><name>tzdir</name><index>[<expr><name>tzdir_orig_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>pgfnames_cleanup</name><argument_list>(<argument><expr><name>names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>							<comment type="block">/* WIN32 */</comment>

<struct><specifier>static</specifier> <specifier>const</specifier> struct
<block>{
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stdname</name></decl>;</decl_stmt>		<comment type="block">/* Windows name of standard timezone */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dstname</name></decl>;</decl_stmt>		<comment type="block">/* Windows name of daylight timezone */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pgtzname</name></decl>;</decl_stmt>		<comment type="block">/* Name of pgsql timezone to map to */</comment>
}</block>			<decl><name><name>win32_tzmap</name><index>[]</index></name> <init>=

<expr><block>{
	<comment type="block">/*
	 * This list was built from the contents of the registry at
	 * HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time
	 * Zones on Windows 10 and Windows 7.
	 *
	 * The zones have been matched to Olson timezones by looking at the cities
	 * listed in the win32 display name (in the comment here) in most cases.
	 */</comment>
	<expr><block>{
		<expr><literal type="string">"Afghanistan Standard Time"</literal></expr>, <expr><literal type="string">"Afghanistan Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Kabul"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+04:30) Kabul */</comment>
	<expr><block>{
		<expr><literal type="string">"Alaskan Standard Time"</literal></expr>, <expr><literal type="string">"Alaskan Daylight Time"</literal></expr>,
		<expr><literal type="string">"US/Alaska"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-09:00) Alaska */</comment>
	<expr><block>{
		<expr><literal type="string">"Aleutian Standard Time"</literal></expr>, <expr><literal type="string">"Aleutian Daylight Time"</literal></expr>,
		<expr><literal type="string">"US/Aleutan"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-10:00) Aleutian Islands */</comment>
	<expr><block>{
		<expr><literal type="string">"Altai Standard Time"</literal></expr>, <expr><literal type="string">"Altai Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Barnaul"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+07:00) Barnaul, Gorno-Altaysk */</comment>
	<expr><block>{
		<expr><literal type="string">"Arab Standard Time"</literal></expr>, <expr><literal type="string">"Arab Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Kuwait"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+03:00) Kuwait, Riyadh */</comment>
	<expr><block>{
		<expr><literal type="string">"Arabian Standard Time"</literal></expr>, <expr><literal type="string">"Arabian Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Muscat"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+04:00) Abu Dhabi, Muscat */</comment>
	<expr><block>{
		<expr><literal type="string">"Arabic Standard Time"</literal></expr>, <expr><literal type="string">"Arabic Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Baghdad"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+03:00) Baghdad */</comment>
	<expr><block>{
		<expr><literal type="string">"Argentina Standard Time"</literal></expr>, <expr><literal type="string">"Argentina Daylight Time"</literal></expr>,
		<expr><literal type="string">"America/Buenos_Aires"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-03:00) City of Buenos Aires */</comment>
	<expr><block>{
		<expr><literal type="string">"Armenian Standard Time"</literal></expr>, <expr><literal type="string">"Armenian Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Yerevan"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+04:00) Baku, Tbilisi, Yerevan */</comment>
	<expr><block>{
		<expr><literal type="string">"Astrakhan Standard Time"</literal></expr>, <expr><literal type="string">"Astrakhan Daylight Time"</literal></expr>,
		<expr><literal type="string">"Europe/Astrakhan"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+04:00) Astrakhan, Ulyanovsk */</comment>
	<expr><block>{
		<expr><literal type="string">"Atlantic Standard Time"</literal></expr>, <expr><literal type="string">"Atlantic Daylight Time"</literal></expr>,
		<expr><literal type="string">"Canada/Atlantic"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-04:00) Atlantic Time (Canada) */</comment>
	<expr><block>{
		<expr><literal type="string">"AUS Central Standard Time"</literal></expr>, <expr><literal type="string">"AUS Central Daylight Time"</literal></expr>,
		<expr><literal type="string">"Australia/Darwin"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+09:30) Darwin */</comment>
	<expr><block>{
		<expr><literal type="string">"Aus Central W. Standard Time"</literal></expr>, <expr><literal type="string">"Aus Central W. Daylight Time"</literal></expr>,
		<expr><literal type="string">"Australia/Eucla"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+08:45) Eucla */</comment>
	<expr><block>{
		<expr><literal type="string">"AUS Eastern Standard Time"</literal></expr>, <expr><literal type="string">"AUS Eastern Daylight Time"</literal></expr>,
		<expr><literal type="string">"Australia/Canberra"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+10:00) Canberra, Melbourne, Sydney */</comment>
	<expr><block>{
		<expr><literal type="string">"Azerbaijan Standard Time"</literal></expr>, <expr><literal type="string">"Azerbaijan Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Baku"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+04:00) Baku */</comment>
	<expr><block>{
		<expr><literal type="string">"Azores Standard Time"</literal></expr>, <expr><literal type="string">"Azores Daylight Time"</literal></expr>,
		<expr><literal type="string">"Atlantic/Azores"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-01:00) Azores */</comment>
	<expr><block>{
		<expr><literal type="string">"Bahia Standard Time"</literal></expr>, <expr><literal type="string">"Bahia Daylight Time"</literal></expr>,
		<expr><literal type="string">"America/Salvador"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-03:00) Salvador */</comment>
	<expr><block>{
		<expr><literal type="string">"Bangladesh Standard Time"</literal></expr>, <expr><literal type="string">"Bangladesh Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Dhaka"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+06:00) Dhaka */</comment>
	<expr><block>{
		<expr><literal type="string">"Bougainville Standard Time"</literal></expr>, <expr><literal type="string">"Bougainville Daylight Time"</literal></expr>,
		<expr><literal type="string">"Pacific/Bougainville"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+11:00) Bougainville Island */</comment>
	<expr><block>{
		<expr><literal type="string">"Belarus Standard Time"</literal></expr>, <expr><literal type="string">"Belarus Daylight Time"</literal></expr>,
		<expr><literal type="string">"Europe/Minsk"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+03:00) Minsk */</comment>
	<expr><block>{
		<expr><literal type="string">"Cabo Verde Standard Time"</literal></expr>, <expr><literal type="string">"Cabo Verde Daylight Time"</literal></expr>,
		<expr><literal type="string">"Atlantic/Cape_Verde"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-01:00) Cabo Verde Is. */</comment>
	<expr><block>{
		<expr><literal type="string">"Chatham Islands Standard Time"</literal></expr>, <expr><literal type="string">"Chatham Islands Daylight Time"</literal></expr>,
		<expr><literal type="string">"Pacific/Chatham"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+12:45) Chatham Islands */</comment>
	<expr><block>{
		<expr><literal type="string">"Canada Central Standard Time"</literal></expr>, <expr><literal type="string">"Canada Central Daylight Time"</literal></expr>,
		<expr><literal type="string">"Canada/Saskatchewan"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-06:00) Saskatchewan */</comment>
	<expr><block>{
		<expr><literal type="string">"Cape Verde Standard Time"</literal></expr>, <expr><literal type="string">"Cape Verde Daylight Time"</literal></expr>,
		<expr><literal type="string">"Atlantic/Cape_Verde"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-01:00) Cape Verde Is. */</comment>
	<expr><block>{
		<expr><literal type="string">"Caucasus Standard Time"</literal></expr>, <expr><literal type="string">"Caucasus Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Baku"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+04:00) Yerevan */</comment>
	<expr><block>{
		<expr><literal type="string">"Cen. Australia Standard Time"</literal></expr>, <expr><literal type="string">"Cen. Australia Daylight Time"</literal></expr>,
		<expr><literal type="string">"Australia/Adelaide"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+09:30) Adelaide */</comment>
	<comment type="block">/* Central America (other than Mexico) generally does not observe DST */</comment>
	<expr><block>{
		<expr><literal type="string">"Central America Standard Time"</literal></expr>, <expr><literal type="string">"Central America Daylight Time"</literal></expr>,
		<expr><literal type="string">"CST6"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-06:00) Central America */</comment>
	<expr><block>{
		<expr><literal type="string">"Central Asia Standard Time"</literal></expr>, <expr><literal type="string">"Central Asia Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Dhaka"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+06:00) Astana */</comment>
	<expr><block>{
		<expr><literal type="string">"Central Brazilian Standard Time"</literal></expr>, <expr><literal type="string">"Central Brazilian Daylight Time"</literal></expr>,
		<expr><literal type="string">"America/Cuiaba"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-04:00) Cuiaba */</comment>
	<expr><block>{
		<expr><literal type="string">"Central Europe Standard Time"</literal></expr>, <expr><literal type="string">"Central Europe Daylight Time"</literal></expr>,
		<expr><literal type="string">"Europe/Belgrade"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+01:00) Belgrade, Bratislava, Budapest,
								 * Ljubljana, Prague */</comment>
	<expr><block>{
		<expr><literal type="string">"Central European Standard Time"</literal></expr>, <expr><literal type="string">"Central European Daylight Time"</literal></expr>,
		<expr><literal type="string">"Europe/Sarajevo"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+01:00) Sarajevo, Skopje, Warsaw,
								 * Zagreb */</comment>
	<expr><block>{
		<expr><literal type="string">"Central Pacific Standard Time"</literal></expr>, <expr><literal type="string">"Central Pacific Daylight Time"</literal></expr>,
		<expr><literal type="string">"Pacific/Noumea"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+11:00) Solomon Is., New Caledonia */</comment>
	<expr><block>{
		<expr><literal type="string">"Central Standard Time"</literal></expr>, <expr><literal type="string">"Central Daylight Time"</literal></expr>,
		<expr><literal type="string">"US/Central"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-06:00) Central Time (US &amp; Canada) */</comment>
	<expr><block>{
		<expr><literal type="string">"Central Standard Time (Mexico)"</literal></expr>, <expr><literal type="string">"Central Daylight Time (Mexico)"</literal></expr>,
		<expr><literal type="string">"America/Mexico_City"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-06:00) Guadalajara, Mexico City,
								 * Monterrey */</comment>
	<expr><block>{
		<expr><literal type="string">"China Standard Time"</literal></expr>, <expr><literal type="string">"China Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Hong_Kong"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+08:00) Beijing, Chongqing, Hong Kong,
								 * Urumqi */</comment>
	<expr><block>{
		<expr><literal type="string">"Cuba Standard Time"</literal></expr>, <expr><literal type="string">"Cuba Daylight Time"</literal></expr>,
		<expr><literal type="string">"America/Havana"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-05:00) Havana */</comment>
	<expr><block>{
		<expr><literal type="string">"Dateline Standard Time"</literal></expr>, <expr><literal type="string">"Dateline Daylight Time"</literal></expr>,
		<expr><literal type="string">"Etc/UTC+12"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-12:00) International Date Line West */</comment>
	<expr><block>{
		<expr><literal type="string">"E. Africa Standard Time"</literal></expr>, <expr><literal type="string">"E. Africa Daylight Time"</literal></expr>,
		<expr><literal type="string">"Africa/Nairobi"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+03:00) Nairobi */</comment>
	<expr><block>{
		<expr><literal type="string">"E. Australia Standard Time"</literal></expr>, <expr><literal type="string">"E. Australia Daylight Time"</literal></expr>,
		<expr><literal type="string">"Australia/Brisbane"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+10:00) Brisbane */</comment>
	<expr><block>{
		<expr><literal type="string">"E. Europe Standard Time"</literal></expr>, <expr><literal type="string">"E. Europe Daylight Time"</literal></expr>,
		<expr><literal type="string">"Europe/Bucharest"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+02:00) E. Europe */</comment>
	<expr><block>{
		<expr><literal type="string">"E. South America Standard Time"</literal></expr>, <expr><literal type="string">"E. South America Daylight Time"</literal></expr>,
		<expr><literal type="string">"America/Araguaina"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-03:00) Brasilia */</comment>
	<expr><block>{
		<expr><literal type="string">"Eastern Standard Time"</literal></expr>, <expr><literal type="string">"Eastern Daylight Time"</literal></expr>,
		<expr><literal type="string">"US/Eastern"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-05:00) Eastern Time (US &amp; Canada) */</comment>
	<expr><block>{
		<expr><literal type="string">"Eastern Standard Time (Mexico)"</literal></expr>, <expr><literal type="string">"Eastern Daylight Time (Mexico)"</literal></expr>,
		<expr><literal type="string">"America/Mexico_City"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-05:00) Chetumal */</comment>
	<expr><block>{
		<expr><literal type="string">"Easter Island Standard Time"</literal></expr>, <expr><literal type="string">"Easter Island Daylight Time"</literal></expr>,
		<expr><literal type="string">"Pacific/Easter"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-06:00) Easter Island */</comment>
	<expr><block>{
		<expr><literal type="string">"Egypt Standard Time"</literal></expr>, <expr><literal type="string">"Egypt Daylight Time"</literal></expr>,
		<expr><literal type="string">"Africa/Cairo"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+02:00) Cairo */</comment>
	<expr><block>{
		<expr><literal type="string">"Ekaterinburg Standard Time (RTZ 4)"</literal></expr>, <expr><literal type="string">"Ekaterinburg Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Yekaterinburg"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+05:00) Ekaterinburg */</comment>
	<expr><block>{
		<expr><literal type="string">"Fiji Standard Time"</literal></expr>, <expr><literal type="string">"Fiji Daylight Time"</literal></expr>,
		<expr><literal type="string">"Pacific/Fiji"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+12:00) Fiji */</comment>
	<expr><block>{
		<expr><literal type="string">"FLE Standard Time"</literal></expr>, <expr><literal type="string">"FLE Daylight Time"</literal></expr>,
		<expr><literal type="string">"Europe/Helsinki"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+02:00) Helsinki, Kyiv, Riga, Sofia,
								 * Tallinn, Vilnius */</comment>
	<expr><block>{
		<expr><literal type="string">"Georgian Standard Time"</literal></expr>, <expr><literal type="string">"Georgian Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Tbilisi"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+04:00) Tbilisi */</comment>
	<expr><block>{
		<expr><literal type="string">"GMT Standard Time"</literal></expr>, <expr><literal type="string">"GMT Daylight Time"</literal></expr>,
		<expr><literal type="string">"Europe/London"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC) Dublin, Edinburgh, Lisbon, London */</comment>
	<expr><block>{
		<expr><literal type="string">"Greenland Standard Time"</literal></expr>, <expr><literal type="string">"Greenland Daylight Time"</literal></expr>,
		<expr><literal type="string">"America/Godthab"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-03:00) Greenland */</comment>
	<expr><block>{
		<expr><literal type="string">"Greenwich Standard Time"</literal></expr>, <expr><literal type="string">"Greenwich Daylight Time"</literal></expr>,
		<expr><literal type="string">"Africa/Casablanca"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC) Monrovia, Reykjavik */</comment>
	<expr><block>{
		<expr><literal type="string">"GTB Standard Time"</literal></expr>, <expr><literal type="string">"GTB Daylight Time"</literal></expr>,
		<expr><literal type="string">"Europe/Athens"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+02:00) Athens, Bucharest */</comment>
	<expr><block>{
		<expr><literal type="string">"Haiti Standard Time"</literal></expr>, <expr><literal type="string">"Haiti Daylight Time"</literal></expr>,
		<expr><literal type="string">"US/Eastern"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-05:00) Haiti */</comment>
	<expr><block>{
		<expr><literal type="string">"Hawaiian Standard Time"</literal></expr>, <expr><literal type="string">"Hawaiian Daylight Time"</literal></expr>,
		<expr><literal type="string">"US/Hawaii"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-10:00) Hawaii */</comment>
	<expr><block>{
		<expr><literal type="string">"India Standard Time"</literal></expr>, <expr><literal type="string">"India Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Calcutta"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+05:30) Chennai, Kolkata, Mumbai, New
								 * Delhi */</comment>
	<expr><block>{
		<expr><literal type="string">"Iran Standard Time"</literal></expr>, <expr><literal type="string">"Iran Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Tehran"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+03:30) Tehran */</comment>
	<expr><block>{
		<expr><literal type="string">"Jerusalem Standard Time"</literal></expr>, <expr><literal type="string">"Jerusalem Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Jerusalem"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+02:00) Jerusalem */</comment>
	<expr><block>{
		<expr><literal type="string">"Jordan Standard Time"</literal></expr>, <expr><literal type="string">"Jordan Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Amman"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+02:00) Amman */</comment>
	<expr><block>{
		<expr><literal type="string">"Kamchatka Standard Time"</literal></expr>, <expr><literal type="string">"Kamchatka Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Kamchatka"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+12:00) Petropavlovsk-Kamchatsky - Old */</comment>
	<expr><block>{
		<expr><literal type="string">"Korea Standard Time"</literal></expr>, <expr><literal type="string">"Korea Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Seoul"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+09:00) Seoul */</comment>
	<expr><block>{
		<expr><literal type="string">"Libya Standard Time"</literal></expr>, <expr><literal type="string">"Libya Daylight Time"</literal></expr>,
		<expr><literal type="string">"Africa/Tripoli"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+02:00) Tripoli */</comment>
	<expr><block>{
		<expr><literal type="string">"Line Islands Standard Time"</literal></expr>, <expr><literal type="string">"Line Islands Daylight Time"</literal></expr>,
		<expr><literal type="string">"Pacific/Kiritimati"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+14:00) Kiritimati Island */</comment>
	<expr><block>{
		<expr><literal type="string">"Lord Howe Standard Time"</literal></expr>, <expr><literal type="string">"Lord Howe Daylight Time"</literal></expr>,
		<expr><literal type="string">"Australia/Lord_Howe"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+10:30) Lord Howe Island */</comment>
	<expr><block>{
		<expr><literal type="string">"Magadan Standard Time"</literal></expr>, <expr><literal type="string">"Magadan Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Magadan"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+10:00) Magadan */</comment>
	<expr><block>{
		<expr><literal type="string">"Marquesas Standard Time"</literal></expr>, <expr><literal type="string">"Marquesas Daylight Time"</literal></expr>,
		<expr><literal type="string">"Pacific/Marquesas"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-09:30) Marquesas Islands */</comment>
	<expr><block>{
		<expr><literal type="string">"Mauritius Standard Time"</literal></expr>, <expr><literal type="string">"Mauritius Daylight Time"</literal></expr>,
		<expr><literal type="string">"Indian/Mauritius"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+04:00) Port Louis */</comment>
	<expr><block>{
		<expr><literal type="string">"Mexico Standard Time"</literal></expr>, <expr><literal type="string">"Mexico Daylight Time"</literal></expr>,
		<expr><literal type="string">"America/Mexico_City"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-06:00) Guadalajara, Mexico City,
								 * Monterrey */</comment>
	<expr><block>{
		<expr><literal type="string">"Mexico Standard Time 2"</literal></expr>, <expr><literal type="string">"Mexico Daylight Time 2"</literal></expr>,
		<expr><literal type="string">"America/Chihuahua"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-07:00) Chihuahua, La Paz, Mazatlan */</comment>
	<expr><block>{
		<expr><literal type="string">"Mid-Atlantic Standard Time"</literal></expr>, <expr><literal type="string">"Mid-Atlantic Daylight Time"</literal></expr>,
		<expr><literal type="string">"Atlantic/South_Georgia"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-02:00) Mid-Atlantic - Old */</comment>
	<expr><block>{
		<expr><literal type="string">"Middle East Standard Time"</literal></expr>, <expr><literal type="string">"Middle East Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Beirut"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+02:00) Beirut */</comment>
	<expr><block>{
		<expr><literal type="string">"Montevideo Standard Time"</literal></expr>, <expr><literal type="string">"Montevideo Daylight Time"</literal></expr>,
		<expr><literal type="string">"America/Montevideo"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-03:00) Montevideo */</comment>
	<expr><block>{
		<expr><literal type="string">"Morocco Standard Time"</literal></expr>, <expr><literal type="string">"Morocco Daylight Time"</literal></expr>,
		<expr><literal type="string">"Africa/Casablanca"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC) Casablanca */</comment>
	<expr><block>{
		<expr><literal type="string">"Mountain Standard Time"</literal></expr>, <expr><literal type="string">"Mountain Daylight Time"</literal></expr>,
		<expr><literal type="string">"US/Mountain"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-07:00) Mountain Time (US &amp; Canada) */</comment>
	<expr><block>{
		<expr><literal type="string">"Mountain Standard Time (Mexico)"</literal></expr>, <expr><literal type="string">"Mountain Daylight Time (Mexico)"</literal></expr>,
		<expr><literal type="string">"America/Chihuahua"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-07:00) Chihuahua, La Paz, Mazatlan */</comment>
	<expr><block>{
		<expr><literal type="string">"Myanmar Standard Time"</literal></expr>, <expr><literal type="string">"Myanmar Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Rangoon"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+06:30) Yangon (Rangoon) */</comment>
	<expr><block>{
		<expr><literal type="string">"N. Central Asia Standard Time"</literal></expr>, <expr><literal type="string">"N. Central Asia Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Novosibirsk"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+06:00) Novosibirsk (RTZ 5) */</comment>
	<expr><block>{
		<expr><literal type="string">"Namibia Standard Time"</literal></expr>, <expr><literal type="string">"Namibia Daylight Time"</literal></expr>,
		<expr><literal type="string">"Africa/Windhoek"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+01:00) Windhoek */</comment>
	<expr><block>{
		<expr><literal type="string">"Nepal Standard Time"</literal></expr>, <expr><literal type="string">"Nepal Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Katmandu"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+05:45) Kathmandu */</comment>
	<expr><block>{
		<expr><literal type="string">"New Zealand Standard Time"</literal></expr>, <expr><literal type="string">"New Zealand Daylight Time"</literal></expr>,
		<expr><literal type="string">"Pacific/Auckland"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+12:00) Auckland, Wellington */</comment>
	<expr><block>{
		<expr><literal type="string">"Newfoundland Standard Time"</literal></expr>, <expr><literal type="string">"Newfoundland Daylight Time"</literal></expr>,
		<expr><literal type="string">"Canada/Newfoundland"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-03:30) Newfoundland */</comment>
	<expr><block>{
		<expr><literal type="string">"Norfolk Standard Time"</literal></expr>, <expr><literal type="string">"Norfolk Daylight Time"</literal></expr>,
		<expr><literal type="string">"Pacific/Norfolk"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+11:00) Norfolk Island */</comment>
	<expr><block>{
		<expr><literal type="string">"North Asia East Standard Time"</literal></expr>, <expr><literal type="string">"North Asia East Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Irkutsk"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+08:00) Irkutsk, Ulaan Bataar */</comment>
	<expr><block>{
		<expr><literal type="string">"North Asia Standard Time"</literal></expr>, <expr><literal type="string">"North Asia Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Krasnoyarsk"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+07:00) Krasnoyarsk */</comment>
	<expr><block>{
		<expr><literal type="string">"North Korea Standard Time"</literal></expr>, <expr><literal type="string">"North Korea Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Pyongyang"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+08:30) Pyongyang */</comment>
	<expr><block>{
		<expr><literal type="string">"Pacific SA Standard Time"</literal></expr>, <expr><literal type="string">"Pacific SA Daylight Time"</literal></expr>,
		<expr><literal type="string">"America/Santiago"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-03:00) Santiago */</comment>
	<expr><block>{
		<expr><literal type="string">"Pacific Standard Time"</literal></expr>, <expr><literal type="string">"Pacific Daylight Time"</literal></expr>,
		<expr><literal type="string">"US/Pacific"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-08:00) Pacific Time (US &amp; Canada) */</comment>
	<expr><block>{
		<expr><literal type="string">"Pacific Standard Time (Mexico)"</literal></expr>, <expr><literal type="string">"Pacific Daylight Time (Mexico)"</literal></expr>,
		<expr><literal type="string">"America/Tijuana"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-08:00) Baja California */</comment>
	<expr><block>{
		<expr><literal type="string">"Pakistan Standard Time"</literal></expr>, <expr><literal type="string">"Pakistan Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Karachi"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+05:00) Islamabad, Karachi */</comment>
	<expr><block>{
		<expr><literal type="string">"Paraguay Standard Time"</literal></expr>, <expr><literal type="string">"Paraguay Daylight Time"</literal></expr>,
		<expr><literal type="string">"America/Asuncion"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-04:00) Asuncion */</comment>
	<expr><block>{
		<expr><literal type="string">"Romance Standard Time"</literal></expr>, <expr><literal type="string">"Romance Daylight Time"</literal></expr>,
		<expr><literal type="string">"Europe/Brussels"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+01:00) Brussels, Copenhagen, Madrid,
								 * Paris */</comment>
	<expr><block>{
		<expr><literal type="string">"Russia TZ 1 Standard Time"</literal></expr>, <expr><literal type="string">"Russia TZ 1 Daylight Time"</literal></expr>,
		<expr><literal type="string">"Europe/Kaliningrad"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+02:00) Kaliningrad (RTZ 1) */</comment>
	<expr><block>{
		<expr><literal type="string">"Russia TZ 2 Standard Time"</literal></expr>, <expr><literal type="string">"Russia TZ 2 Daylight Time"</literal></expr>,
		<expr><literal type="string">"Europe/Moscow"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+03:00) Moscow, St. Petersburg,
								 * Volgograd (RTZ 2) */</comment>
	<expr><block>{
		<expr><literal type="string">"Russia TZ 3 Standard Time"</literal></expr>, <expr><literal type="string">"Russia TZ 3 Daylight Time"</literal></expr>,
		<expr><literal type="string">"Europe/Samara"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+04:00) Izhevsk, Samara (RTZ 3) */</comment>
	<expr><block>{
		<expr><literal type="string">"Russia TZ 4 Standard Time"</literal></expr>, <expr><literal type="string">"Russia TZ 4 Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Yekaterinburg"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+05:00) Ekaterinburg (RTZ 4) */</comment>
	<expr><block>{
		<expr><literal type="string">"Russia TZ 5 Standard Time"</literal></expr>, <expr><literal type="string">"Russia TZ 5 Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Novosibirsk"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+06:00) Novosibirsk (RTZ 5) */</comment>
	<expr><block>{
		<expr><literal type="string">"Russia TZ 6 Standard Time"</literal></expr>, <expr><literal type="string">"Russia TZ 6 Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Krasnoyarsk"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+07:00) Krasnoyarsk (RTZ 6) */</comment>
	<expr><block>{
		<expr><literal type="string">"Russia TZ 7 Standard Time"</literal></expr>, <expr><literal type="string">"Russia TZ 7 Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Irkutsk"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+08:00) Irkutsk (RTZ 7) */</comment>
	<expr><block>{
		<expr><literal type="string">"Russia TZ 8 Standard Time"</literal></expr>, <expr><literal type="string">"Russia TZ 8 Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Yakutsk"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+09:00) Yakutsk (RTZ 8) */</comment>
	<expr><block>{
		<expr><literal type="string">"Russia TZ 9 Standard Time"</literal></expr>, <expr><literal type="string">"Russia TZ 9 Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Vladivostok"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+10:00) Vladivostok, Magadan (RTZ 9) */</comment>
	<expr><block>{
		<expr><literal type="string">"Russia TZ 10 Standard Time"</literal></expr>, <expr><literal type="string">"Russia TZ 10 Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Magadan"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+11:00) Chokurdakh (RTZ 10) */</comment>
	<expr><block>{
		<expr><literal type="string">"Russia TZ 11 Standard Time"</literal></expr>, <expr><literal type="string">"Russia TZ 11 Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Anadyr"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+12:00) Anadyr,
								 * Petropavlovsk-Kamchatsky (RTZ 11) */</comment>
	<expr><block>{
		<expr><literal type="string">"Russian Standard Time"</literal></expr>, <expr><literal type="string">"Russian Daylight Time"</literal></expr>,
		<expr><literal type="string">"Europe/Moscow"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+03:00) Moscow, St. Petersburg,
								 * Volgograd */</comment>
	<expr><block>{
		<expr><literal type="string">"SA Eastern Standard Time"</literal></expr>, <expr><literal type="string">"SA Eastern Daylight Time"</literal></expr>,
		<expr><literal type="string">"America/Buenos_Aires"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-03:00) Cayenne, Fortaleza */</comment>
	<expr><block>{
		<expr><literal type="string">"SA Pacific Standard Time"</literal></expr>, <expr><literal type="string">"SA Pacific Daylight Time"</literal></expr>,
		<expr><literal type="string">"America/Bogota"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-05:00) Bogota, Lima, Quito, Rio Branco */</comment>
	<expr><block>{
		<expr><literal type="string">"SA Western Standard Time"</literal></expr>, <expr><literal type="string">"SA Western Daylight Time"</literal></expr>,
		<expr><literal type="string">"America/Caracas"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-04:00) Georgetown, La Paz, Manaus, San
								 * Juan */</comment>
	<expr><block>{
		<expr><literal type="string">"Saint Pierre Standard Time"</literal></expr>, <expr><literal type="string">"Saint Pierre Daylight Time"</literal></expr>,
		<expr><literal type="string">"America/Miquelon"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-03:00) Saint Pierre and Miquelon */</comment>
	<expr><block>{
		<expr><literal type="string">"Samoa Standard Time"</literal></expr>, <expr><literal type="string">"Samoa Daylight Time"</literal></expr>,
		<expr><literal type="string">"Pacific/Samoa"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+13:00) Samoa */</comment>
	<expr><block>{
		<expr><literal type="string">"SE Asia Standard Time"</literal></expr>, <expr><literal type="string">"SE Asia Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Bangkok"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+07:00) Bangkok, Hanoi, Jakarta */</comment>
	<expr><block>{
		<expr><literal type="string">"Malay Peninsula Standard Time"</literal></expr>, <expr><literal type="string">"Malay Peninsula Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Kuala_Lumpur"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+08:00) Kuala Lumpur, Singapore */</comment>
	<expr><block>{
		<expr><literal type="string">"Sakhalin Standard Time"</literal></expr>, <expr><literal type="string">"Sakhalin Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Sakhalin"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+11:00) Sakhalin */</comment>
	<expr><block>{
		<expr><literal type="string">"South Africa Standard Time"</literal></expr>, <expr><literal type="string">"South Africa Daylight Time"</literal></expr>,
		<expr><literal type="string">"Africa/Harare"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+02:00) Harare, Pretoria */</comment>
	<expr><block>{
		<expr><literal type="string">"Sri Lanka Standard Time"</literal></expr>, <expr><literal type="string">"Sri Lanka Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Colombo"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+05:30) Sri Jayawardenepura */</comment>
	<expr><block>{
		<expr><literal type="string">"Syria Standard Time"</literal></expr>, <expr><literal type="string">"Syria Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Damascus"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+02:00) Damascus */</comment>
	<expr><block>{
		<expr><literal type="string">"Taipei Standard Time"</literal></expr>, <expr><literal type="string">"Taipei Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Taipei"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+08:00) Taipei */</comment>
	<expr><block>{
		<expr><literal type="string">"Tasmania Standard Time"</literal></expr>, <expr><literal type="string">"Tasmania Daylight Time"</literal></expr>,
		<expr><literal type="string">"Australia/Hobart"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+10:00) Hobart */</comment>
	<expr><block>{
		<expr><literal type="string">"Tocantins Standard Time"</literal></expr>, <expr><literal type="string">"Tocantins Daylight Time"</literal></expr>,
		<expr><literal type="string">"America/Araguaina"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-03:00) Araguaina */</comment>
	<expr><block>{
		<expr><literal type="string">"Tokyo Standard Time"</literal></expr>, <expr><literal type="string">"Tokyo Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Tokyo"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+09:00) Osaka, Sapporo, Tokyo */</comment>
	<expr><block>{
		<expr><literal type="string">"Tonga Standard Time"</literal></expr>, <expr><literal type="string">"Tonga Daylight Time"</literal></expr>,
		<expr><literal type="string">"Pacific/Tongatapu"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+13:00) Nuku'alofa */</comment>
	<expr><block>{
		<expr><literal type="string">"Tomsk Standard Time"</literal></expr>, <expr><literal type="string">"Tomsk Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Tomsk"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+07:00) Tomsk */</comment>
	<expr><block>{
		<expr><literal type="string">"Transbaikal Standard Time"</literal></expr>, <expr><literal type="string">"Transbaikal Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Chita"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+09:00) Chita */</comment>
	<expr><block>{
		<expr><literal type="string">"Turkey Standard Time"</literal></expr>, <expr><literal type="string">"Turkey Daylight Time"</literal></expr>,
		<expr><literal type="string">"Europe/Istanbul"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+02:00) Istanbul */</comment>
	<expr><block>{
		<expr><literal type="string">"Turks and Caicos Standard Time"</literal></expr>, <expr><literal type="string">"Turks and Caicos Daylight Time"</literal></expr>,
		<expr><literal type="string">"America/Grand_Turk"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-04:00) Turks and Caicos */</comment>
	<expr><block>{
		<expr><literal type="string">"Ulaanbaatar Standard Time"</literal></expr>, <expr><literal type="string">"Ulaanbaatar Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Ulaanbaatar"</literal></expr>,
	}</block></expr>,							<comment type="block">/* (UTC+08:00) Ulaanbaatar */</comment>
	<expr><block>{
		<expr><literal type="string">"US Eastern Standard Time"</literal></expr>, <expr><literal type="string">"US Eastern Daylight Time"</literal></expr>,
		<expr><literal type="string">"US/Eastern"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-05:00) Indiana (East) */</comment>
	<expr><block>{
		<expr><literal type="string">"US Mountain Standard Time"</literal></expr>, <expr><literal type="string">"US Mountain Daylight Time"</literal></expr>,
		<expr><literal type="string">"US/Arizona"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-07:00) Arizona */</comment>
	<expr><block>{
		<expr><literal type="string">"Coordinated Universal Time"</literal></expr>, <expr><literal type="string">"Coordinated Universal Time"</literal></expr>,
		<expr><literal type="string">"UTC"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC) Coordinated Universal Time */</comment>
	<expr><block>{
		<expr><literal type="string">"UTC+12"</literal></expr>, <expr><literal type="string">"UTC+12"</literal></expr>,
		<expr><literal type="string">"Etc/GMT+12"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+12:00) Coordinated Universal Time+12 */</comment>
	<expr><block>{
		<expr><literal type="string">"UTC-02"</literal></expr>, <expr><literal type="string">"UTC-02"</literal></expr>,
		<expr><literal type="string">"Etc/GMT-02"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-02:00) Coordinated Universal Time-02 */</comment>
	<expr><block>{
		<expr><literal type="string">"UTC-08"</literal></expr>, <expr><literal type="string">"UTC-08"</literal></expr>,
		<expr><literal type="string">"Etc/GMT-08"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-08:00) Coordinated Universal Time-08 */</comment>
	<expr><block>{
		<expr><literal type="string">"UTC-09"</literal></expr>, <expr><literal type="string">"UTC-09"</literal></expr>,
		<expr><literal type="string">"Etc/GMT-09"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-09:00) Coordinated Universal Time-09 */</comment>
	<expr><block>{
		<expr><literal type="string">"UTC-11"</literal></expr>, <expr><literal type="string">"UTC-11"</literal></expr>,
		<expr><literal type="string">"Etc/GMT-11"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC-11:00) Coordinated Universal Time-11 */</comment>
	<expr><block>{
		<expr><literal type="string">"Venezuela Standard Time"</literal></expr>, <expr><literal type="string">"Venezuela Daylight Time"</literal></expr>,
		<expr><literal type="string">"America/Caracas"</literal></expr>,
	}</block></expr>,							<comment type="block">/* (UTC-04:30) Caracas */</comment>
	<expr><block>{
		<expr><literal type="string">"Vladivostok Standard Time"</literal></expr>, <expr><literal type="string">"Vladivostok Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Vladivostok"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+10:00) Vladivostok (RTZ 9) */</comment>
	<expr><block>{
		<expr><literal type="string">"W. Australia Standard Time"</literal></expr>, <expr><literal type="string">"W. Australia Daylight Time"</literal></expr>,
		<expr><literal type="string">"Australia/Perth"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+08:00) Perth */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NOT_USED</name></cpp:ifdef>
	<comment type="block">/* Could not find a match for this one (just a guess). Excluded for now. */</comment>
	<expr><block>{
		<expr><literal type="string">"W. Central Africa Standard Time"</literal></expr>, <expr><literal type="string">"W. Central Africa Daylight Time"</literal></expr>,
		<expr><literal type="string">"WAT"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+01:00) West Central Africa */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{
		<expr><literal type="string">"W. Europe Standard Time"</literal></expr>, <expr><literal type="string">"W. Europe Daylight Time"</literal></expr>,
		<expr><literal type="string">"CET"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+01:00) Amsterdam, Berlin, Bern, Rome,
								 * Stockholm, Vienna */</comment>
	<expr><block>{
		<expr><literal type="string">"W. Mongolia Standard Time"</literal></expr>, <expr><literal type="string">"W. Mongolia Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Hovd"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+07:00) Hovd */</comment>
	<expr><block>{
		<expr><literal type="string">"West Asia Standard Time"</literal></expr>, <expr><literal type="string">"West Asia Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Karachi"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+05:00) Ashgabat, Tashkent */</comment>
	<expr><block>{
		<expr><literal type="string">"West Bank Gaza Standard Time"</literal></expr>, <expr><literal type="string">"West Bank Gaza Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Gaza"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+02:00) Gaza, Hebron */</comment>
	<expr><block>{
		<expr><literal type="string">"West Pacific Standard Time"</literal></expr>, <expr><literal type="string">"West Pacific Daylight Time"</literal></expr>,
		<expr><literal type="string">"Pacific/Guam"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+10:00) Guam, Port Moresby */</comment>
	<expr><block>{
		<expr><literal type="string">"Yakutsk Standard Time"</literal></expr>, <expr><literal type="string">"Yakutsk Daylight Time"</literal></expr>,
		<expr><literal type="string">"Asia/Yakutsk"</literal></expr>
	}</block></expr>,							<comment type="block">/* (UTC+09:00) Yakutsk */</comment>
	<expr><block>{
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>identify_system_timezone</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>tzname</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>localtzname</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type>		<name>t</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name>  <modifier>*</modifier></type><name>tm</name> <init>= <expr><call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HKEY</name></type>		<name>rootKey</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>idx</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tm</name></expr>)</condition>
	<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_IDENTIFY_TIMEZONE</name></cpp:ifdef>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"could not identify system time zone: localtime() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<return>return <expr><name>NULL</name></expr>;</return>			<comment type="block">/* go to GMT */</comment>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tzname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tzname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strftime</name><argument_list>(<argument><expr><name>tzname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tzname</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%Z"</literal></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>win32_tzmap</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>stdname</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>tzname</name></expr></argument>, <argument><expr><name><name>win32_tzmap</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>stdname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
			<call><name>strcmp</name><argument_list>(<argument><expr><name>tzname</name></expr></argument>, <argument><expr><name><name>win32_tzmap</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dstname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_IDENTIFY_TIMEZONE</name></cpp:ifdef>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"TZ \"%s\" matches system time zone \"%s\"\n"</literal></expr></argument>,
					<argument><expr><name><name>win32_tzmap</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pgtzname</name></expr></argument>, <argument><expr><name>tzname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<return>return <expr><name><name>win32_tzmap</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pgtzname</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * Localized Windows versions return localized names for the timezone.
	 * Scan the registry to find the English name, and then try matching
	 * against our table again.
	 */</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>localtzname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>localtzname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>RegOpenKeyEx</name><argument_list>(<argument><expr><name>HKEY_LOCAL_MACHINE</name></expr></argument>,
					 <argument><expr><literal type="string">"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Time Zones"</literal></expr></argument>,
					 <argument><expr><literal type="number">0</literal></expr></argument>,
					 <argument><expr><name>KEY_READ</name></expr></argument>,
					 <argument><expr><operator>&amp;</operator><name>rootKey</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition>
	<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_IDENTIFY_TIMEZONE</name></cpp:ifdef>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"could not open registry key to identify system time zone: error code %lu\n"</literal></expr></argument>,
				<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<return>return <expr><name>NULL</name></expr>;</return>			<comment type="block">/* go to GMT */</comment>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>keyname</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>zonename</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>DWORD</name></type>		<name>namesize</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>FILETIME</name></type>	<name>lastwrite</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HKEY</name></type>		<name>key</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>LONG</name></type>		<name>r</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>keyname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>keyname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>namesize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>keyname</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>RegEnumKeyEx</name><argument_list>(<argument><expr><name>rootKey</name></expr></argument>,
							  <argument><expr><name>idx</name></expr></argument>,
							  <argument><expr><name>keyname</name></expr></argument>,
							  <argument><expr><operator>&amp;</operator><name>namesize</name></expr></argument>,
							  <argument><expr><name>NULL</name></expr></argument>,
							  <argument><expr><name>NULL</name></expr></argument>,
							  <argument><expr><name>NULL</name></expr></argument>,
							  <argument><expr><operator>&amp;</operator><name>lastwrite</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>ERROR_NO_MORE_ITEMS</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_IDENTIFY_TIMEZONE</name></cpp:ifdef>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"could not enumerate registry subkeys to identify system time zone: %d\n"</literal></expr></argument>,
					<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>RegOpenKeyEx</name><argument_list>(<argument><expr><name>rootKey</name></expr></argument>, <argument><expr><name>keyname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>KEY_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition>
		<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_IDENTIFY_TIMEZONE</name></cpp:ifdef>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"could not open registry subkey to identify system time zone: %d\n"</literal></expr></argument>,
					<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>zonename</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zonename</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>namesize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>zonename</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>RegQueryValueEx</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"Std"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>zonename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>namesize</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition>
		<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_IDENTIFY_TIMEZONE</name></cpp:ifdef>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"could not query value for key \"std\" to identify system time zone \"%s\": %d\n"</literal></expr></argument>,
					<argument><expr><name>keyname</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>			<comment type="block">/* Proceed to look at the next timezone */</comment>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>tzname</name></expr></argument>, <argument><expr><name>zonename</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Matched zone */</comment>
			<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>localtzname</name></expr></argument>, <argument><expr><name>keyname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>zonename</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zonename</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>namesize</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>zonename</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>RegQueryValueEx</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"Dlt"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>zonename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>namesize</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition>
		<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_IDENTIFY_TIMEZONE</name></cpp:ifdef>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"could not query value for key \"dlt\" to identify system time zone \"%s\": %d\n"</literal></expr></argument>,
					<argument><expr><name>keyname</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>			<comment type="block">/* Proceed to look at the next timezone */</comment>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>tzname</name></expr></argument>, <argument><expr><name>zonename</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Matched DST zone */</comment>
			<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>localtzname</name></expr></argument>, <argument><expr><name>keyname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>rootKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>localtzname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Found a localized name, so scan for that one too */</comment>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>win32_tzmap</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>stdname</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>localtzname</name></expr></argument>, <argument><expr><name><name>win32_tzmap</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>stdname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
				<call><name>strcmp</name><argument_list>(<argument><expr><name>localtzname</name></expr></argument>, <argument><expr><name><name>win32_tzmap</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dstname</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_IDENTIFY_TIMEZONE</name></cpp:ifdef>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"TZ \"%s\" matches localized system time zone \"%s\" (\"%s\")\n"</literal></expr></argument>,
						<argument><expr><name><name>win32_tzmap</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pgtzname</name></expr></argument>, <argument><expr><name>tzname</name></expr></argument>, <argument><expr><name>localtzname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
				<return>return <expr><name><name>win32_tzmap</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pgtzname</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_IDENTIFY_TIMEZONE</name></cpp:ifdef>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"could not find a match for system time zone \"%s\"\n"</literal></expr></argument>,
			<argument><expr><name>tzname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>NULL</name></expr>;</return>				<comment type="block">/* go to GMT */</comment>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* WIN32 */</comment>


<comment type="block">/*
 * Return true if the given zone name is valid and is an "acceptable" zone.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>validate_zone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tzname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pg_tz</name>	   <modifier>*</modifier></type><name>tz</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tzname</name> <operator>||</operator> <operator>!</operator><name><name>tzname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>tz</name> <operator>=</operator> <call><name>pg_load_tz</name><argument_list>(<argument><expr><name>tzname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tz</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_tz_acceptable</name><argument_list>(<argument><expr><name>tz</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Identify a suitable default timezone setting based on the environment.
 *
 * The installation share_path must be passed in, as that is the default
 * location for the timezone database directory.
 *
 * We first look to the TZ environment variable.  If not found or not
 * recognized by our own code, we see if we can identify the timezone
 * from the behavior of the system timezone library.  When all else fails,
 * return NULL, indicating that we should default to GMT.
 */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>select_default_timezone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>share_path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tzname</name></decl>;</decl_stmt>

	<comment type="block">/* Initialize timezone directory path, if needed */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SYSTEMTZDIR</name></cpp:ifndef>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tzdirpath</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tzdirpath</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/timezone"</literal></expr></argument>, <argument><expr><name>share_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* Check TZ environment variable */</comment>
	<expr_stmt><expr><name>tzname</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"TZ"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>validate_zone</name><argument_list>(<argument><expr><name>tzname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>tzname</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Nope, so try to identify the system timezone */</comment>
	<expr_stmt><expr><name>tzname</name> <operator>=</operator> <call><name>identify_system_timezone</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>validate_zone</name><argument_list>(<argument><expr><name>tzname</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>tzname</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
