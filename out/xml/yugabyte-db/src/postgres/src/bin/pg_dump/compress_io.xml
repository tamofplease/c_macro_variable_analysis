<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/bin/pg_dump/compress_io.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * compress_io.c
 *	 Routines for archivers to write an uncompressed or compressed data
 *	 stream.
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * This file includes two APIs for dealing with compressed data. The first
 * provides more flexibility, using callbacks to read/write data from the
 * underlying stream. The second API is a wrapper around fopen/gzopen and
 * friends, providing an interface similar to those, but abstracts away
 * the possible compression. Both APIs use libz for the compression, but
 * the second API uses gzip headers, so the resulting files can be easily
 * manipulated with the gzip utility.
 *
 * Compressor API
 * --------------
 *
 *	The interface for writing to an archive consists of three functions:
 *	AllocateCompressor, WriteDataToArchive and EndCompressor. First you call
 *	AllocateCompressor, then write all the data by calling WriteDataToArchive
 *	as many times as needed, and finally EndCompressor. WriteDataToArchive
 *	and EndCompressor will call the WriteFunc that was provided to
 *	AllocateCompressor for each chunk of compressed data.
 *
 *	The interface for reading an archive consists of just one function:
 *	ReadDataFromArchive. ReadDataFromArchive reads the whole compressed input
 *	stream, by repeatedly calling the given ReadFunc. ReadFunc returns the
 *	compressed data chunk at a time, and ReadDataFromArchive decompresses it
 *	and passes the decompressed data to ahwrite(), until ReadFunc returns 0
 *	to signal EOF.
 *
 *	The interface is the same for compressed and uncompressed streams.
 *
 * Compressed stream API
 * ----------------------
 *
 *	The compressed stream API is a wrapper around the C standard fopen() and
 *	libz's gzopen() APIs. It allows you to use the same functions for
 *	compressed and uncompressed streams. cfopen_read() first tries to open
 *	the file with given name, and if it fails, it tries to open the same
 *	file with the .gz suffix. cfopen_write() opens a file for writing, an
 *	extra argument specifies if the file should be compressed, and adds the
 *	.gz suffix to the filename if so. This allows you to easily handle both
 *	compressed and uncompressed files.
 *
 * IDENTIFICATION
 *	   src/bin/pg_dump/compress_io.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compress_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_backup_utils.h"</cpp:file></cpp:include>

<comment type="block">/*----------------------
 * Compressor API
 *----------------------
 */</comment>

<comment type="block">/* typedef appears in compress_io.h */</comment>
<struct>struct <name>CompressorState</name>
<block>{
	<decl_stmt><decl><type><name>CompressionAlgorithm</name></type> <name>comprAlg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WriteFunc</name></type>	<name>writeF</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
	<decl_stmt><decl><type><name>z_streamp</name></type>	<name>zp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>zlibOut</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>zlibOutSize</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>

<comment type="block">/* translator: this is a module name */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>modulename</name> <init>= <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"compress_io"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ParseCompressionOption</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>compression</name></decl></parameter>, <parameter><decl><type><name>CompressionAlgorithm</name> <modifier>*</modifier></type><name>alg</name></decl></parameter>,
					   <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>level</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Routines that support zlib compressed data I/O */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>InitCompressorZlib</name><parameter_list>(<parameter><decl><type><name>CompressorState</name> <modifier>*</modifier></type><name>cs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DeflateCompressorZlib</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>CompressorState</name> <modifier>*</modifier></type><name>cs</name></decl></parameter>,
					  <parameter><decl><type><name>bool</name></type> <name>flush</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ReadDataFromArchiveZlib</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>ReadFunc</name></type> <name>readF</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>WriteDataToArchiveZlib</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>CompressorState</name> <modifier>*</modifier></type><name>cs</name></decl></parameter>,
					   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dLen</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>EndCompressorZlib</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>CompressorState</name> <modifier>*</modifier></type><name>cs</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Routines that support uncompressed data I/O */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ReadDataFromArchiveNone</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>ReadFunc</name></type> <name>readF</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>WriteDataToArchiveNone</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>CompressorState</name> <modifier>*</modifier></type><name>cs</name></decl></parameter>,
					   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dLen</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Interprets a numeric 'compression' value. The algorithm implied by the
 * value (zlib or none at the moment), is returned in *alg, and the
 * zlib compression level in *level.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ParseCompressionOption</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>compression</name></decl></parameter>, <parameter><decl><type><name>CompressionAlgorithm</name> <modifier>*</modifier></type><name>alg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>compression</name> <operator>==</operator> <name>Z_DEFAULT_COMPRESSION</name> <operator>||</operator>
		<operator>(</operator><name>compression</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>compression</name> <operator>&lt;=</operator> <literal type="number">9</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>alg</name> <operator>=</operator> <name>COMPR_ALG_LIBZ</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>compression</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>alg</name> <operator>=</operator> <name>COMPR_ALG_NONE</name></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>exit_horribly</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>, <argument><expr><literal type="string">"invalid compression code: %d\n"</literal></expr></argument>,
					  <argument><expr><name>compression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>alg</name> <operator>=</operator> <name>COMPR_ALG_NONE</name></expr>;</expr_stmt>	<comment type="block">/* keep compiler quiet */</comment>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* The level is just the passed-in value. */</comment>
	<if_stmt><if>if <condition>(<expr><name>level</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>level</name> <operator>=</operator> <name>compression</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Public interface routines */</comment>

<comment type="block">/* Allocate a new compressor */</comment>
<function><type><name>CompressorState</name> <modifier>*</modifier></type>
<name>AllocateCompressor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>compression</name></decl></parameter>, <parameter><decl><type><name>WriteFunc</name></type> <name>writeF</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CompressorState</name> <modifier>*</modifier></type><name>cs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CompressionAlgorithm</name></type> <name>alg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>level</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ParseCompressionOption</name><argument_list>(<argument><expr><name>compression</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifndef>
	<if_stmt><if>if <condition>(<expr><name>alg</name> <operator>==</operator> <name>COMPR_ALG_LIBZ</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>exit_horribly</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>, <argument><expr><literal type="string">"not built with zlib support\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>cs</name> <operator>=</operator> <operator>(</operator><name>CompressorState</name> <operator>*</operator><operator>)</operator> <call><name>pg_malloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CompressorState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>writeF</name></name> <operator>=</operator> <name>writeF</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>comprAlg</name></name> <operator>=</operator> <name>alg</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Perform compression algorithm specific initialization.
	 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name>alg</name> <operator>==</operator> <name>COMPR_ALG_LIBZ</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>InitCompressorZlib</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><name>cs</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Read all compressed data from the input stream (via readF) and print it
 * out with ahwrite().
 */</comment>
<function><type><name>void</name></type>
<name>ReadDataFromArchive</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>compression</name></decl></parameter>, <parameter><decl><type><name>ReadFunc</name></type> <name>readF</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CompressionAlgorithm</name></type> <name>alg</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ParseCompressionOption</name><argument_list>(<argument><expr><name>compression</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>alg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>alg</name> <operator>==</operator> <name>COMPR_ALG_NONE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ReadDataFromArchiveNone</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><name>readF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>alg</name> <operator>==</operator> <name>COMPR_ALG_LIBZ</name></expr>)</condition>
	<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
		<expr_stmt><expr><call><name>ReadDataFromArchiveZlib</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><name>readF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>exit_horribly</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>, <argument><expr><literal type="string">"not built with zlib support\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Compress and write data to the output stream (via writeF).
 */</comment>
<function><type><name>void</name></type>
<name>WriteDataToArchive</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>CompressorState</name> <modifier>*</modifier></type><name>cs</name></decl></parameter>,
				   <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name><name>cs</name><operator>-&gt;</operator><name>comprAlg</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>COMPR_ALG_LIBZ</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
			<expr_stmt><expr><call><name>WriteDataToArchiveZlib</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><name>cs</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<expr_stmt><expr><call><name>exit_horribly</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>, <argument><expr><literal type="string">"not built with zlib support\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<break>break;</break>
		<case>case <expr><name>COMPR_ALG_NONE</name></expr>:</case>
			<expr_stmt><expr><call><name>WriteDataToArchiveNone</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><name>cs</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
	<return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Terminate compression library context and flush its buffers.
 */</comment>
<function><type><name>void</name></type>
<name>EndCompressor</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>CompressorState</name> <modifier>*</modifier></type><name>cs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>cs</name><operator>-&gt;</operator><name>comprAlg</name></name> <operator>==</operator> <name>COMPR_ALG_LIBZ</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>EndCompressorZlib</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Private routines, specific to each compression method. */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
<comment type="block">/*
 * Functions for zlib compressed output.
 */</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>InitCompressorZlib</name><parameter_list>(<parameter><decl><type><name>CompressorState</name> <modifier>*</modifier></type><name>cs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>z_streamp</name></type>	<name>zp</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>zp</name> <operator>=</operator> <name><name>cs</name><operator>-&gt;</operator><name>zp</name></name> <operator>=</operator> <operator>(</operator><name>z_streamp</name><operator>)</operator> <call><name>pg_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>z_stream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>zp</name><operator>-&gt;</operator><name>zalloc</name></name> <operator>=</operator> <name>Z_NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>zp</name><operator>-&gt;</operator><name>zfree</name></name> <operator>=</operator> <name>Z_NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>zp</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <name>Z_NULL</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * zlibOutSize is the buffer size we tell zlib it can output to.  We
	 * actually allocate one extra byte because some routines want to append a
	 * trailing zero byte to the zlib output.
	 */</comment>
	<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>zlibOut</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>pg_malloc</name><argument_list>(<argument><expr><name>ZLIB_OUT_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>zlibOutSize</name></name> <operator>=</operator> <name>ZLIB_OUT_SIZE</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>deflateInit</name><argument_list>(<argument><expr><name>zp</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>Z_OK</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>exit_horribly</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>,
					  <argument><expr><literal type="string">"could not initialize compression library: %s\n"</literal></expr></argument>,
					  <argument><expr><name><name>zp</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Just be paranoid - maybe End is called after Start, with no Write */</comment>
	<expr_stmt><expr><name><name>zp</name><operator>-&gt;</operator><name>next_out</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>cs</name><operator>-&gt;</operator><name>zlibOut</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>zp</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>=</operator> <name><name>cs</name><operator>-&gt;</operator><name>zlibOutSize</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>EndCompressorZlib</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>CompressorState</name> <modifier>*</modifier></type><name>cs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>z_streamp</name></type>	<name>zp</name> <init>= <expr><name><name>cs</name><operator>-&gt;</operator><name>zp</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>zp</name><operator>-&gt;</operator><name>next_in</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>zp</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/* Flush any remaining data from zlib buffer */</comment>
	<expr_stmt><expr><call><name>DeflateCompressorZlib</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><name>cs</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>deflateEnd</name><argument_list>(<argument><expr><name>zp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>Z_OK</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>exit_horribly</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>,
					  <argument><expr><literal type="string">"could not close compression stream: %s\n"</literal></expr></argument>, <argument><expr><name><name>zp</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>zlibOut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cs</name><operator>-&gt;</operator><name>zp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>DeflateCompressorZlib</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>CompressorState</name> <modifier>*</modifier></type><name>cs</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>flush</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>z_streamp</name></type>	<name>zp</name> <init>= <expr><name><name>cs</name><operator>-&gt;</operator><name>zp</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>out</name> <init>= <expr><name><name>cs</name><operator>-&gt;</operator><name>zlibOut</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name> <init>= <expr><name>Z_OK</name></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><name><name>cs</name><operator>-&gt;</operator><name>zp</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>flush</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>deflate</name><argument_list>(<argument><expr><name>zp</name></expr></argument>, <argument><expr><ternary><condition><expr><name>flush</name></expr> ?</condition><then> <expr><name>Z_FINISH</name></expr> </then><else>: <expr><name>Z_NO_FLUSH</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>Z_STREAM_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>exit_horribly</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>,
						  <argument><expr><literal type="string">"could not compress data: %s\n"</literal></expr></argument>, <argument><expr><name><name>zp</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flush</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>zp</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>&lt;</operator> <name><name>cs</name><operator>-&gt;</operator><name>zlibOutSize</name></name><operator>)</operator><operator>)</operator>
			<operator>||</operator> <operator>(</operator><name><name>zp</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>
			<operator>||</operator> <operator>(</operator><name><name>zp</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>
			)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * Extra paranoia: avoid zero-length chunks, since a zero length
			 * chunk is the EOF marker in the custom format. This should never
			 * happen but...
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>zp</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>&lt;</operator> <name><name>cs</name><operator>-&gt;</operator><name>zlibOutSize</name></name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * Any write function should do its own error checking but to
				 * make sure we do a check here as well...
				 */</comment>
				<decl_stmt><decl><type><name>size_t</name></type>		<name>len</name> <init>= <expr><name><name>cs</name><operator>-&gt;</operator><name>zlibOutSize</name></name> <operator>-</operator> <name><name>zp</name><operator>-&gt;</operator><name>avail_out</name></name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name><name>cs</name><operator>-&gt;</operator><name>writeF</name></name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>zp</name><operator>-&gt;</operator><name>next_out</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>out</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>zp</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>=</operator> <name><name>cs</name><operator>-&gt;</operator><name>zlibOutSize</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>Z_STREAM_END</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>WriteDataToArchiveZlib</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>CompressorState</name> <modifier>*</modifier></type><name>cs</name></decl></parameter>,
					   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>zp</name><operator>-&gt;</operator><name>next_in</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cs</name><operator>-&gt;</operator><name>zp</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>=</operator> <name>dLen</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>DeflateCompressorZlib</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><name>cs</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ReadDataFromArchiveZlib</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>ReadFunc</name></type> <name>readF</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>z_streamp</name></type>	<name>zp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name> <init>= <expr><name>Z_OK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>cnt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>buflen</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>zp</name> <operator>=</operator> <operator>(</operator><name>z_streamp</name><operator>)</operator> <call><name>pg_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>z_stream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>zp</name><operator>-&gt;</operator><name>zalloc</name></name> <operator>=</operator> <name>Z_NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>zp</name><operator>-&gt;</operator><name>zfree</name></name> <operator>=</operator> <name>Z_NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>zp</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <name>Z_NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>pg_malloc</name><argument_list>(<argument><expr><name>ZLIB_IN_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>buflen</name> <operator>=</operator> <name>ZLIB_IN_SIZE</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>pg_malloc</name><argument_list>(<argument><expr><name>ZLIB_OUT_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>inflateInit</name><argument_list>(<argument><expr><name>zp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>Z_OK</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>exit_horribly</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>,
					  <argument><expr><literal type="string">"could not initialize compression library: %s\n"</literal></expr></argument>,
					  <argument><expr><name><name>zp</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* no minimal chunk size for zlib */</comment>
	<while>while <condition>(<expr><operator>(</operator><name>cnt</name> <operator>=</operator> <call><name>readF</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buflen</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>zp</name><operator>-&gt;</operator><name>next_in</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>zp</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>=</operator> <name>cnt</name></expr>;</expr_stmt>

		<while>while <condition>(<expr><name><name>zp</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>zp</name><operator>-&gt;</operator><name>next_out</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>out</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>zp</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>=</operator> <name>ZLIB_OUT_SIZE</name></expr>;</expr_stmt>

			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>inflate</name><argument_list>(<argument><expr><name>zp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>Z_OK</name> <operator>&amp;&amp;</operator> <name>res</name> <operator>!=</operator> <name>Z_STREAM_END</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>exit_horribly</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>,
							  <argument><expr><literal type="string">"could not uncompress data: %s\n"</literal></expr></argument>, <argument><expr><name><name>zp</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name><name>out</name><index>[<expr><name>ZLIB_OUT_SIZE</name> <operator>-</operator> <name><name>zp</name><operator>-&gt;</operator><name>avail_out</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ahwrite</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ZLIB_OUT_SIZE</name> <operator>-</operator> <name><name>zp</name><operator>-&gt;</operator><name>avail_out</name></name></expr></argument>, <argument><expr><name>AH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></while>

	<expr_stmt><expr><name><name>zp</name><operator>-&gt;</operator><name>next_in</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>zp</name><operator>-&gt;</operator><name>avail_in</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>res</name> <operator>!=</operator> <name>Z_STREAM_END</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>zp</name><operator>-&gt;</operator><name>next_out</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>out</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>zp</name><operator>-&gt;</operator><name>avail_out</name></name> <operator>=</operator> <name>ZLIB_OUT_SIZE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>inflate</name><argument_list>(<argument><expr><name>zp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>Z_OK</name> <operator>&amp;&amp;</operator> <name>res</name> <operator>!=</operator> <name>Z_STREAM_END</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>exit_horribly</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>,
						  <argument><expr><literal type="string">"could not uncompress data: %s\n"</literal></expr></argument>, <argument><expr><name><name>zp</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>out</name><index>[<expr><name>ZLIB_OUT_SIZE</name> <operator>-</operator> <name><name>zp</name><operator>-&gt;</operator><name>avail_out</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ahwrite</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ZLIB_OUT_SIZE</name> <operator>-</operator> <name><name>zp</name><operator>-&gt;</operator><name>avail_out</name></name></expr></argument>, <argument><expr><name>AH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><call><name>inflateEnd</name><argument_list>(<argument><expr><name>zp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>Z_OK</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>exit_horribly</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>,
					  <argument><expr><literal type="string">"could not close compression library: %s\n"</literal></expr></argument>, <argument><expr><name><name>zp</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>zp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* HAVE_LIBZ */</comment>


<comment type="block">/*
 * Functions for uncompressed output.
 */</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ReadDataFromArchiveNone</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>ReadFunc</name></type> <name>readF</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>cnt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>buflen</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>pg_malloc</name><argument_list>(<argument><expr><name>ZLIB_OUT_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>buflen</name> <operator>=</operator> <name>ZLIB_OUT_SIZE</name></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>cnt</name> <operator>=</operator> <call><name>readF</name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buflen</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ahwrite</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>AH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>WriteDataToArchiveNone</name><parameter_list>(<parameter><decl><type><name>ArchiveHandle</name> <modifier>*</modifier></type><name>AH</name></decl></parameter>, <parameter><decl><type><name>CompressorState</name> <modifier>*</modifier></type><name>cs</name></decl></parameter>,
					   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dLen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name><name>cs</name><operator>-&gt;</operator><name>writeF</name></name><argument_list>(<argument><expr><name>AH</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
</block_content>}</block></function>


<comment type="block">/*----------------------
 * Compressed stream API
 *----------------------
 */</comment>

<comment type="block">/*
 * cfp represents an open stream, wrapping the underlying FILE or gzFile
 * pointer. This is opaque to the callers.
 */</comment>
<struct>struct <name>cfp</name>
<block>{
	<decl_stmt><decl><type><name>FILE</name>	   <modifier>*</modifier></type><name>uncompressedfp</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
	<decl_stmt><decl><type><name>gzFile</name></type>		<name>compressedfp</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>hasSuffix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suffix</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* free() without changing errno; useful in several places below */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_keep_errno</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>save_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Open a file for reading. 'path' is the file to open, and 'mode' should
 * be either "r" or "rb".
 *
 * If the file at 'path' does not exist, we append the ".gz" suffix (if 'path'
 * doesn't already have it) and try again. So if you pass "foo" as 'path',
 * this will open either "foo" or "foo.gz".
 *
 * On failure, return NULL with an error code in errno.
 */</comment>
<function><type><name>cfp</name> <modifier>*</modifier></type>
<name>cfopen_read</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>cfp</name>		   <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><call><name>hasSuffix</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">".gz"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>cfopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<block>{<block_content>
		<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>cfopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"%s.gz"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>cfopen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>free_keep_errno</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>fp</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Open a file for writing. 'path' indicates the path name, and 'mode' must
 * be a filemode as accepted by fopen() and gzopen() that indicates writing
 * ("w", "wb", "a", or "ab").
 *
 * If 'compression' is non-zero, a gzip compressed stream is opened, and
 * 'compression' indicates the compression level used. The ".gz" suffix
 * is automatically added to 'path' in that case.
 *
 * On failure, return NULL with an error code in errno.
 */</comment>
<function><type><name>cfp</name> <modifier>*</modifier></type>
<name>cfopen_write</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>compression</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>cfp</name>		   <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>compression</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>cfopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>fname</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"%s.gz"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>fp</name> <operator>=</operator> <call><name>cfopen</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>compression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free_keep_errno</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>exit_horribly</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>, <argument><expr><literal type="string">"not built with zlib support\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>fp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>				<comment type="block">/* keep compiler quiet */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>fp</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Opens file 'path' in 'mode'. If 'compression' is non-zero, the file
 * is opened with libz gzopen(), otherwise with plain fopen().
 *
 * On failure, return NULL with an error code in errno.
 */</comment>
<function><type><name>cfp</name> <modifier>*</modifier></type>
<name>cfopen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>compression</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>cfp</name>		   <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>pg_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>compression</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><name>compression</name> <operator>!=</operator> <name>Z_DEFAULT_COMPRESSION</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* user has specified a compression level, so tell zlib to use it */</comment>
			<decl_stmt><decl><type><name>char</name></type>		<name><name>mode_compression</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>mode_compression</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mode_compression</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%d"</literal></expr></argument>,
					 <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>compression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>compressedfp</name></name> <operator>=</operator> <call><name>gzopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>mode_compression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* don't specify a level, just use the zlib default */</comment>
			<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>compressedfp</name></name> <operator>=</operator> <call><name>gzopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uncompressedfp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>compressedfp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>free_keep_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>fp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>exit_horribly</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>, <argument><expr><literal type="string">"not built with zlib support\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>compressedfp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uncompressedfp</name></name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>uncompressedfp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>free_keep_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>fp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>fp</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>cfread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>cfp</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>ret</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>compressedfp</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>gzread</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>compressedfp</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>size</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>gzeof</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>compressedfp</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>errnum</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errmsg</name> <init>= <expr><call><name>gzerror</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>compressedfp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errnum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>exit_horribly</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>,
						  <argument><expr><literal type="string">"could not read from input file: %s\n"</literal></expr></argument>,
						  <argument><expr><ternary><condition><expr><name>errnum</name> <operator>==</operator> <name>Z_ERRNO</name></expr> ?</condition><then> <expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>errmsg</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uncompressedfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>size</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>feof</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uncompressedfp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>READ_ERROR_EXIT</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uncompressedfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>cfwrite</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>cfp</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>compressedfp</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>gzwrite</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>compressedfp</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<return>return <expr><call><name>fwrite</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uncompressedfp</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>cfgetc</name><parameter_list>(<parameter><decl><type><name>cfp</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>ret</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>compressedfp</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>gzgetc</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>compressedfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>EOF</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gzeof</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>compressedfp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>exit_horribly</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>,
							  <argument><expr><literal type="string">"could not read from input file: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>exit_horribly</name><argument_list>(<argument><expr><name>modulename</name></expr></argument>,
							  <argument><expr><literal type="string">"could not read from input file: end of file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fgetc</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uncompressedfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>READ_ERROR_EXIT</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uncompressedfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>cfgets</name><parameter_list>(<parameter><decl><type><name>cfp</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>compressedfp</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>gzgets</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>compressedfp</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<return>return <expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uncompressedfp</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>cfclose</name><parameter_list>(<parameter><decl><type><name>cfp</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>result</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>fp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EBADF</name></expr>;</expr_stmt>
		<return>return <expr><name>EOF</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>compressedfp</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>gzclose</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>compressedfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>compressedfp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<block>{<block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>fclose</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uncompressedfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fp</name><operator>-&gt;</operator><name>uncompressedfp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>free_keep_errno</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>cfeof</name><parameter_list>(<parameter><decl><type><name>cfp</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>compressedfp</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>gzeof</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>compressedfp</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<return>return <expr><call><name>feof</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>uncompressedfp</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>get_cfp_error</name><parameter_list>(<parameter><decl><type><name>cfp</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>compressedfp</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>errnum</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errmsg</name> <init>= <expr><call><name>gzerror</name><argument_list>(<argument><expr><name><name>fp</name><operator>-&gt;</operator><name>compressedfp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errnum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>errnum</name> <operator>!=</operator> <name>Z_ERRNO</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>errmsg</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZ</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>hasSuffix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suffix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>filenamelen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>suffixlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>filenamelen</name> <operator>&lt;</operator> <name>suffixlen</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>filename</name><index>[<expr><name>filenamelen</name> <operator>-</operator> <name>suffixlen</name></expr>]</index></name></expr></argument>,
				  <argument><expr><name>suffix</name></expr></argument>,
				  <argument><expr><name>suffixlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
