<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/bin/pg_upgrade/function.c"><comment type="block">/*
 *	function.c
 *
 *	server-side function support
 *
 *	Copyright (c) 2010-2018, PostgreSQL Global Development Group
 *	src/bin/pg_upgrade/function.c
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_upgrade.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/transam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_language_d.h"</cpp:file></cpp:include>


<comment type="block">/*
 * qsort comparator for pointers to library names
 *
 * We sort first by name length, then alphabetically for names of the same
 * length.  This is to ensure that, eg, "hstore_plpython" sorts after both
 * "hstore" and "plpython"; otherwise transform modules will probably fail
 * their LOAD tests.  (The backend ought to cope with that consideration,
 * but it doesn't yet, and even when it does it'll still be a good idea
 * to have a predictable order of probing here.)
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>library_name_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str1</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator><operator>)</operator> <name>p1</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str2</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator><operator>)</operator> <name>p2</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>slen1</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>slen2</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>slen1</name> <operator>!=</operator> <name>slen2</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>slen1</name> <operator>-</operator> <name>slen2</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>str1</name></expr></argument>, <argument><expr><name>str2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * get_loadable_libraries()
 *
 *	Fetch the names of all old libraries containing C-language functions.
 *	We will later check that they all exist in the new installation.
 */</comment>
<function><type><name>void</name></type>
<name>get_loadable_libraries</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGresult</name>  <modifier>*</modifier><modifier>*</modifier></type><name>ress</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>totaltups</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>dbnum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found_public_plpython_handler</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>ress</name> <operator>=</operator> <operator>(</operator><name>PGresult</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>pg_malloc</name><argument_list>(<argument><expr><name><name>old_cluster</name><operator>.</operator><name>dbarr</name><operator>.</operator><name>ndbs</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PGresult</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>totaltups</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/* Fetch all library names, removing duplicates within each DB */</comment>
	<for>for <control>(<init><expr><name>dbnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>dbnum</name> <operator>&lt;</operator> <name><name>old_cluster</name><operator>.</operator><name>dbarr</name><operator>.</operator><name>ndbs</name></name></expr>;</condition> <incr><expr><name>dbnum</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>DbInfo</name>	   <modifier>*</modifier></type><name>active_db</name> <init>= <expr><operator>&amp;</operator><name><name>old_cluster</name><operator>.</operator><name>dbarr</name><operator>.</operator><name>dbs</name><index>[<expr><name>dbnum</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PGconn</name>	   <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>connectToServer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_cluster</name></expr></argument>, <argument><expr><name><name>active_db</name><operator>-&gt;</operator><name>db_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/*
		 * Fetch all libraries containing non-built-in C functions in this DB.
		 */</comment>
		<expr_stmt><expr><name><name>ress</name><index>[<expr><name>dbnum</name></expr>]</index></name> <operator>=</operator> <call><name>executeQueryOrDie</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,
										<argument><expr><literal type="string">"SELECT DISTINCT probin "</literal>
										<literal type="string">"FROM pg_catalog.pg_proc "</literal>
										<literal type="string">"WHERE prolang = %u AND "</literal>
										<literal type="string">"probin IS NOT NULL AND "</literal>
										<literal type="string">"oid &gt;= %u;"</literal></expr></argument>,
										<argument><expr><name>ClanguageId</name></expr></argument>,
										<argument><expr><name>FirstNormalObjectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>totaltups</name> <operator>+=</operator> <call><name>PQntuples</name><argument_list>(<argument><expr><name><name>ress</name><index>[<expr><name>dbnum</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Systems that install plpython before 8.1 have
		 * plpython_call_handler() defined in the "public" schema, causing
		 * pg_dump to dump it.  However that function still references
		 * "plpython" (no "2"), so it throws an error on restore.  This code
		 * checks for the problem function, reports affected databases to the
		 * user and explains how to remove them. 8.1 git commit:
		 * e0dedd0559f005d60c69c9772163e69c204bac69
		 * http://archives.postgresql.org/pgsql-hackers/2012-03/msg01101.php
		 * http://archives.postgresql.org/pgsql-bugs/2012-05/msg00206.php
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>GET_MAJOR_VERSION</name><argument_list>(<argument><expr><name><name>old_cluster</name><operator>.</operator><name>major_version</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">901</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>PGresult</name>   <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>executeQueryOrDie</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,
									<argument><expr><literal type="string">"SELECT 1 "</literal>
									<literal type="string">"FROM pg_catalog.pg_proc p "</literal>
									<literal type="string">"    JOIN pg_catalog.pg_namespace n "</literal>
									<literal type="string">"    ON pronamespace = n.oid "</literal>
									<literal type="string">"WHERE proname = 'plpython_call_handler' AND "</literal>
									<literal type="string">"nspname = 'public' AND "</literal>
									<literal type="string">"prolang = %u AND "</literal>
									<literal type="string">"probin = '$libdir/plpython' AND "</literal>
									<literal type="string">"p.oid &gt;= %u;"</literal></expr></argument>,
									<argument><expr><name>ClanguageId</name></expr></argument>,
									<argument><expr><name>FirstNormalObjectId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>PQntuples</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found_public_plpython_handler</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>pg_log</name><argument_list>(<argument><expr><name>PG_WARNING</name></expr></argument>,
						   <argument><expr><literal type="string">"\nThe old cluster has a \"plpython_call_handler\" function defined\n"</literal>
						   <literal type="string">"in the \"public\" schema which is a duplicate of the one defined\n"</literal>
						   <literal type="string">"in the \"pg_catalog\" schema.  You can confirm this by executing\n"</literal>
						   <literal type="string">"in psql:\n"</literal>
						   <literal type="string">"\n"</literal>
						   <literal type="string">"    \\df *.plpython_call_handler\n"</literal>
						   <literal type="string">"\n"</literal>
						   <literal type="string">"The \"public\" schema version of this function was created by a\n"</literal>
						   <literal type="string">"pre-8.1 install of plpython, and must be removed for pg_upgrade\n"</literal>
						   <literal type="string">"to complete because it references a now-obsolete \"plpython\"\n"</literal>
						   <literal type="string">"shared object file.  You can remove the \"public\" schema version\n"</literal>
						   <literal type="string">"of this function by running the following command:\n"</literal>
						   <literal type="string">"\n"</literal>
						   <literal type="string">"    DROP FUNCTION public.plpython_call_handler()\n"</literal>
						   <literal type="string">"\n"</literal>
						   <literal type="string">"in each affected database:\n"</literal>
						   <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><call><name>pg_log</name><argument_list>(<argument><expr><name>PG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"    %s\n"</literal></expr></argument>, <argument><expr><name><name>active_db</name><operator>-&gt;</operator><name>db_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>found_public_plpython_handler</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>found_public_plpython_handler</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"Remove the problem functions from the old cluster to continue.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Now we want to remove duplicates across DBs and sort the library names
	 * into order.  This avoids multiple probes of the same library, and
	 * ensures that libraries are probed in a consistent order, which is
	 * important for reproducible behavior if one library depends on another.
	 *
	 * First transfer all the names into one array, then sort, then remove
	 * duplicates.  Note: we strdup each name in the first loop so that we can
	 * safely clear the PGresults in the same loop.  This is a bit wasteful
	 * but it's unlikely there are enough names to matter.
	 */</comment>
	<expr_stmt><expr><name><name>os_info</name><operator>.</operator><name>libraries</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>pg_malloc</name><argument_list>(<argument><expr><name>totaltups</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>totaltups</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>dbnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>dbnum</name> <operator>&lt;</operator> <name><name>old_cluster</name><operator>.</operator><name>dbarr</name><operator>.</operator><name>ndbs</name></name></expr>;</condition> <incr><expr><name>dbnum</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PGresult</name>   <modifier>*</modifier></type><name>res</name> <init>= <expr><name><name>ress</name><index>[<expr><name>dbnum</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>ntups</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>rowno</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>ntups</name> <operator>=</operator> <call><name>PQntuples</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>rowno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>rowno</name> <operator>&lt;</operator> <name>ntups</name></expr>;</condition> <incr><expr><name>rowno</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>lib</name> <init>= <expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>rowno</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>os_info</name><operator>.</operator><name>libraries</name><index>[<expr><name>totaltups</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name>ress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>totaltups</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
					<decl><type ref="prev"/><name>lastnondup</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>os_info</name><operator>.</operator><name>libraries</name></name></expr></argument>, <argument><expr><name>totaltups</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>,
			  <argument><expr><name>library_name_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>lastnondup</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>totaltups</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>os_info</name><operator>.</operator><name>libraries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
					   <argument><expr><name><name>os_info</name><operator>.</operator><name>libraries</name><index>[<expr><name>lastnondup</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>os_info</name><operator>.</operator><name>libraries</name><index>[<expr><operator>++</operator><name>lastnondup</name></expr>]</index></name> <operator>=</operator> <name><name>os_info</name><operator>.</operator><name>libraries</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name><name>os_info</name><operator>.</operator><name>libraries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name>totaltups</name> <operator>=</operator> <name>lastnondup</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>os_info</name><operator>.</operator><name>num_libraries</name></name> <operator>=</operator> <name>totaltups</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * check_loadable_libraries()
 *
 *	Check that the new cluster contains all required libraries.
 *	We do this by actually trying to LOAD each one, thereby testing
 *	compatibility as well as presence.
 */</comment>
<function><type><name>void</name></type>
<name>check_loadable_libraries</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGconn</name>	   <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>connectToServer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_cluster</name></expr></argument>, <argument><expr><literal type="string">"template1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>libnum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE</name>	   <modifier>*</modifier></type><name>script</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>output_path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>prep_status</name><argument_list>(<argument><expr><literal type="string">"Checking for presence of required libraries"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>output_path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>output_path</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"loadable_libraries.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>libnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>libnum</name> <operator>&lt;</operator> <name><name>os_info</name><operator>.</operator><name>num_libraries</name></name></expr>;</condition> <incr><expr><name>libnum</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>lib</name> <init>= <expr><name><name>os_info</name><operator>.</operator><name>libraries</name><index>[<expr><name>libnum</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>llen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>cmd</name><index>[<expr><literal type="number">7</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>MAXPGPATH</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PGresult</name>   <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * In Postgres 9.0, Python 3 support was added, and to do that, a
		 * plpython2u language was created with library name plpython2.so as a
		 * symbolic link to plpython.so.  In Postgres 9.1, only the
		 * plpython2.so library was created, and both plpythonu and plpython2u
		 * pointing to it.  For this reason, any reference to library name
		 * "plpython" in an old PG &lt;= 9.1 cluster must look for "plpython2" in
		 * the new cluster.
		 *
		 * For this case, we could check pg_pltemplate, but that only works
		 * for languages, and does not help with function shared objects, so
		 * we just do a general fix.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>GET_MAJOR_VERSION</name><argument_list>(<argument><expr><name><name>old_cluster</name><operator>.</operator><name>major_version</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">901</literal> <operator>&amp;&amp;</operator>
			<call><name>strcmp</name><argument_list>(<argument><expr><name>lib</name></expr></argument>, <argument><expr><literal type="string">"$libdir/plpython"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>lib</name> <operator>=</operator> <literal type="string">"$libdir/plpython2"</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>llen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>lib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"LOAD '"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PQescapeStringConn</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>cmd</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lib</name></expr></argument>, <argument><expr><name>llen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>PQexec</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>PQresultStatus</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PGRES_COMMAND_OK</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>script</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>script</name> <operator>=</operator> <call><name>fopen_priv</name><argument_list>(<argument><expr><name>output_path</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"could not open file \"%s\": %s\n"</literal></expr></argument>,
						 <argument><expr><name>output_path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"could not load library \"%s\": %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><name>lib</name></expr></argument>,
					<argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pg_log</name><argument_list>(<argument><expr><name>PG_REPORT</name></expr></argument>, <argument><expr><literal type="string">"fatal\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"Your installation references loadable libraries that are missing from the\n"</literal>
				 <literal type="string">"new installation.  You can add these libraries to the new installation,\n"</literal>
				 <literal type="string">"or remove the functions using them from the old installation.  A list of\n"</literal>
				 <literal type="string">"problem libraries is in the file:\n"</literal>
				 <literal type="string">"    %s\n\n"</literal></expr></argument>, <argument><expr><name>output_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>check_ok</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>
</unit>
