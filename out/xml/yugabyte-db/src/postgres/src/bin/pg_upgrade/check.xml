<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/bin/pg_upgrade/check.c"><comment type="block">/*
 *	check.c
 *
 *	server checks and output routines
 *
 *	Copyright (c) 2010-2018, PostgreSQL Global Development Group
 *	src/bin/pg_upgrade/check.c
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_authid_d.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fe_utils/string_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mb/pg_wchar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_upgrade.h"</cpp:file></cpp:include>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>check_new_cluster_is_empty</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>check_databases_are_compatible</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>check_locale_and_encoding</name><parameter_list>(<parameter><decl><type><name>DbInfo</name> <modifier>*</modifier></type><name>olddb</name></decl></parameter>, <parameter><decl><type><name>DbInfo</name> <modifier>*</modifier></type><name>newdb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>equivalent_locale</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>category</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>loca</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>locb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>check_is_install_user</name><parameter_list>(<parameter><decl><type><name>ClusterInfo</name> <modifier>*</modifier></type><name>cluster</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>check_proper_datallowconn</name><parameter_list>(<parameter><decl><type><name>ClusterInfo</name> <modifier>*</modifier></type><name>cluster</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>check_for_prepared_transactions</name><parameter_list>(<parameter><decl><type><name>ClusterInfo</name> <modifier>*</modifier></type><name>cluster</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>check_for_isn_and_int8_passing_mismatch</name><parameter_list>(<parameter><decl><type><name>ClusterInfo</name> <modifier>*</modifier></type><name>cluster</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>check_for_reg_data_type_usage</name><parameter_list>(<parameter><decl><type><name>ClusterInfo</name> <modifier>*</modifier></type><name>cluster</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>check_for_jsonb_9_4_usage</name><parameter_list>(<parameter><decl><type><name>ClusterInfo</name> <modifier>*</modifier></type><name>cluster</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>check_for_pg_role_prefix</name><parameter_list>(<parameter><decl><type><name>ClusterInfo</name> <modifier>*</modifier></type><name>cluster</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_canonical_locale_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>category</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>locale</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * fix_path_separator
 * For non-Windows, just return the argument.
 * For Windows convert any forward slash to a backslash
 * such as is suitable for arguments to builtin commands
 * like RMDIR and DEL.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>fix_path_separator</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>

	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <name>result</name></expr>;</init> <condition><expr><operator>*</operator><name>c</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>c</name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>c</name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

	<return>return <expr><name>result</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

	<return>return <expr><name>path</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>output_check_banner</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>live_check</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>user_opts</name><operator>.</operator><name>check</name></name> <operator>&amp;&amp;</operator> <name>live_check</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pg_log</name><argument_list>(<argument><expr><name>PG_REPORT</name></expr></argument>,
			   <argument><expr><literal type="string">"Performing Consistency Checks on Old Live Server\n"</literal>
			   <literal type="string">"------------------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>pg_log</name><argument_list>(<argument><expr><name>PG_REPORT</name></expr></argument>,
			   <argument><expr><literal type="string">"Performing Consistency Checks\n"</literal>
			   <literal type="string">"-----------------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>check_and_dump_old_cluster</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>live_check</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* -- OLD -- */</comment>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>live_check</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>start_postmaster</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_cluster</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Extract a list of databases and tables from the old cluster */</comment>
	<expr_stmt><expr><call><name>get_db_and_rel_infos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_cluster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>init_tablespaces</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>get_loadable_libraries</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


	<comment type="block">/*
	 * Check for various failure cases
	 */</comment>
	<expr_stmt><expr><call><name>check_is_install_user</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_cluster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>check_proper_datallowconn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_cluster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>check_for_prepared_transactions</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_cluster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>check_for_reg_data_type_usage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_cluster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>check_for_isn_and_int8_passing_mismatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_cluster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Pre-PG 10 allowed tables with 'unknown' type columns and non WAL logged
	 * hash indexes
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>GET_MAJOR_VERSION</name><argument_list>(<argument><expr><name><name>old_cluster</name><operator>.</operator><name>major_version</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">906</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>old_9_6_check_for_unknown_data_type_usage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_cluster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>user_opts</name><operator>.</operator><name>check</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>old_9_6_invalidate_hash_indexes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_cluster</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* 9.5 and below should not have roles starting with pg_ */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>GET_MAJOR_VERSION</name><argument_list>(<argument><expr><name><name>old_cluster</name><operator>.</operator><name>major_version</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">905</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>check_for_pg_role_prefix</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_cluster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>GET_MAJOR_VERSION</name><argument_list>(<argument><expr><name><name>old_cluster</name><operator>.</operator><name>major_version</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">904</literal> <operator>&amp;&amp;</operator>
		<name><name>old_cluster</name><operator>.</operator><name>controldata</name><operator>.</operator><name>cat_ver</name></name> <operator>&lt;</operator> <name>JSONB_FORMAT_CHANGE_CAT_VER</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>check_for_jsonb_9_4_usage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_cluster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Pre-PG 9.4 had a different 'line' data type internal format */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>GET_MAJOR_VERSION</name><argument_list>(<argument><expr><name><name>old_cluster</name><operator>.</operator><name>major_version</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">903</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>old_9_3_check_for_line_data_type_usage</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_cluster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Pre-PG 9.0 had no large object permissions */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>GET_MAJOR_VERSION</name><argument_list>(<argument><expr><name><name>old_cluster</name><operator>.</operator><name>major_version</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">804</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>new_9_0_populate_pg_largeobject_metadata</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_cluster</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * While not a check option, we do this now because this is the only time
	 * the old server is running.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>user_opts</name><operator>.</operator><name>check</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>generate_old_dump</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>live_check</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>stop_postmaster</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>check_new_cluster</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>get_db_and_rel_infos</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_cluster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>check_new_cluster_is_empty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>check_databases_are_compatible</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>check_loadable_libraries</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>user_opts</name><operator>.</operator><name>transfer_mode</name></name> <operator>==</operator> <name>TRANSFER_MODE_LINK</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>check_hard_link</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>check_is_install_user</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_cluster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>check_for_prepared_transactions</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_cluster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>report_clusters_compatible</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>user_opts</name><operator>.</operator><name>check</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pg_log</name><argument_list>(<argument><expr><name>PG_REPORT</name></expr></argument>, <argument><expr><literal type="string">"\n*Clusters are compatible*\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* stops new cluster */</comment>
		<expr_stmt><expr><call><name>stop_postmaster</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>pg_log</name><argument_list>(<argument><expr><name>PG_REPORT</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal>
		   <literal type="string">"If pg_upgrade fails after this point, you must re-initdb the\n"</literal>
		   <literal type="string">"new cluster before continuing.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>issue_warnings_and_set_wal_level</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * We unconditionally start/stop the new server because pg_resetwal -o set
	 * wal_level to 'minimum'.  If the user is upgrading standby servers using
	 * the rsync instructions, they will need pg_upgrade to write its final
	 * WAL record showing wal_level as 'replica'.
	 */</comment>
	<expr_stmt><expr><call><name>start_postmaster</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_cluster</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Create dummy large object permissions for old &lt; PG 9.0? */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>GET_MAJOR_VERSION</name><argument_list>(<argument><expr><name><name>old_cluster</name><operator>.</operator><name>major_version</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">804</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>new_9_0_populate_pg_largeobject_metadata</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_cluster</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Reindex hash indexes for old &lt; 10.0 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>GET_MAJOR_VERSION</name><argument_list>(<argument><expr><name><name>old_cluster</name><operator>.</operator><name>major_version</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">906</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>old_9_6_invalidate_hash_indexes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_cluster</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>stop_postmaster</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>output_completion_banner</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>analyze_script_file_name</name></decl></parameter>,
						 <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>deletion_script_file_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Did we copy the free space files? */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>GET_MAJOR_VERSION</name><argument_list>(<argument><expr><name><name>old_cluster</name><operator>.</operator><name>major_version</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">804</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_log</name><argument_list>(<argument><expr><name>PG_REPORT</name></expr></argument>,
			   <argument><expr><literal type="string">"Optimizer statistics are not transferred by pg_upgrade so,\n"</literal>
			   <literal type="string">"once you start the new server, consider running:\n"</literal>
			   <literal type="string">"    %s\n\n"</literal></expr></argument>, <argument><expr><name>analyze_script_file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_log</name><argument_list>(<argument><expr><name>PG_REPORT</name></expr></argument>,
			   <argument><expr><literal type="string">"Optimizer statistics and free space information are not transferred\n"</literal>
			   <literal type="string">"by pg_upgrade so, once you start the new server, consider running:\n"</literal>
			   <literal type="string">"    %s\n\n"</literal></expr></argument>, <argument><expr><name>analyze_script_file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>


	<if_stmt><if>if <condition>(<expr><name>deletion_script_file_name</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_log</name><argument_list>(<argument><expr><name>PG_REPORT</name></expr></argument>,
			   <argument><expr><literal type="string">"Running this script will delete the old cluster's data files:\n"</literal>
			   <literal type="string">"    %s\n"</literal></expr></argument>,
			   <argument><expr><name>deletion_script_file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_log</name><argument_list>(<argument><expr><name>PG_REPORT</name></expr></argument>,
			   <argument><expr><literal type="string">"Could not create a script to delete the old cluster's data files\n"</literal>
			   <literal type="string">"because user-defined tablespaces or the new cluster's data directory\n"</literal>
			   <literal type="string">"exist in the old cluster directory.  The old cluster's contents must\n"</literal>
			   <literal type="string">"be deleted manually.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>check_cluster_versions</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>prep_status</name><argument_list>(<argument><expr><literal type="string">"Checking cluster versions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* cluster versions should already have been obtained */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>old_cluster</name><operator>.</operator><name>major_version</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>new_cluster</name><operator>.</operator><name>major_version</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * We allow upgrades from/to the same major version for alpha/beta
	 * upgrades
	 */</comment>

	<if_stmt><if>if <condition>(<expr><call><name>GET_MAJOR_VERSION</name><argument_list>(<argument><expr><name><name>old_cluster</name><operator>.</operator><name>major_version</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">804</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"This utility can only upgrade from PostgreSQL version 8.4 and later.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Only current PG version is supported as a target */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>GET_MAJOR_VERSION</name><argument_list>(<argument><expr><name><name>new_cluster</name><operator>.</operator><name>major_version</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>GET_MAJOR_VERSION</name><argument_list>(<argument><expr><name>PG_VERSION_NUM</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"This utility can only upgrade to PostgreSQL version %s.\n"</literal></expr></argument>,
				 <argument><expr><name>PG_MAJORVERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * We can't allow downgrading because we use the target pg_dump, and
	 * pg_dump cannot operate on newer database versions, only current and
	 * older versions.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>old_cluster</name><operator>.</operator><name>major_version</name></name> <operator>&gt;</operator> <name><name>new_cluster</name><operator>.</operator><name>major_version</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"This utility cannot be used to downgrade to older major PostgreSQL versions.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Ensure binaries match the designated data directories */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>GET_MAJOR_VERSION</name><argument_list>(<argument><expr><name><name>old_cluster</name><operator>.</operator><name>major_version</name></name></expr></argument>)</argument_list></call> <operator>!=</operator>
		<call><name>GET_MAJOR_VERSION</name><argument_list>(<argument><expr><name><name>old_cluster</name><operator>.</operator><name>bin_version</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"Old cluster data and binary directories are from different major versions.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>GET_MAJOR_VERSION</name><argument_list>(<argument><expr><name><name>new_cluster</name><operator>.</operator><name>major_version</name></name></expr></argument>)</argument_list></call> <operator>!=</operator>
		<call><name>GET_MAJOR_VERSION</name><argument_list>(<argument><expr><name><name>new_cluster</name><operator>.</operator><name>bin_version</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"New cluster data and binary directories are from different major versions.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>check_ok</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>check_cluster_compatibility</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>live_check</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* get/check pg_control data of servers */</comment>
	<expr_stmt><expr><call><name>get_control_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>old_cluster</name></expr></argument>, <argument><expr><name>live_check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>get_control_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>new_cluster</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>check_control_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>old_cluster</name><operator>.</operator><name>controldata</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new_cluster</name><operator>.</operator><name>controldata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* We read the real port number for PG &gt;= 9.1 */</comment>
	<if_stmt><if>if <condition>(<expr><name>live_check</name> <operator>&amp;&amp;</operator> <call><name>GET_MAJOR_VERSION</name><argument_list>(<argument><expr><name><name>old_cluster</name><operator>.</operator><name>major_version</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">901</literal> <operator>&amp;&amp;</operator>
		<name><name>old_cluster</name><operator>.</operator><name>port</name></name> <operator>==</operator> <name>DEF_PGUPORT</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"When checking a pre-PG 9.1 live old server, "</literal>
				 <literal type="string">"you must specify the old server's port number.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>live_check</name> <operator>&amp;&amp;</operator> <name><name>old_cluster</name><operator>.</operator><name>port</name></name> <operator>==</operator> <name><name>new_cluster</name><operator>.</operator><name>port</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"When checking a live server, "</literal>
				 <literal type="string">"the old and new port numbers must be different.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * check_locale_and_encoding()
 *
 * Check that locale and encoding of a database in the old and new clusters
 * are compatible.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_locale_and_encoding</name><parameter_list>(<parameter><decl><type><name>DbInfo</name> <modifier>*</modifier></type><name>olddb</name></decl></parameter>, <parameter><decl><type><name>DbInfo</name> <modifier>*</modifier></type><name>newdb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>olddb</name><operator>-&gt;</operator><name>db_encoding</name></name> <operator>!=</operator> <name><name>newdb</name><operator>-&gt;</operator><name>db_encoding</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"encodings for database \"%s\" do not match:  old \"%s\", new \"%s\"\n"</literal></expr></argument>,
				 <argument><expr><name><name>olddb</name><operator>-&gt;</operator><name>db_name</name></name></expr></argument>,
				 <argument><expr><call><name>pg_encoding_to_char</name><argument_list>(<argument><expr><name><name>olddb</name><operator>-&gt;</operator><name>db_encoding</name></name></expr></argument>)</argument_list></call></expr></argument>,
				 <argument><expr><call><name>pg_encoding_to_char</name><argument_list>(<argument><expr><name><name>newdb</name><operator>-&gt;</operator><name>db_encoding</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>equivalent_locale</name><argument_list>(<argument><expr><name>LC_COLLATE</name></expr></argument>, <argument><expr><name><name>olddb</name><operator>-&gt;</operator><name>db_collate</name></name></expr></argument>, <argument><expr><name><name>newdb</name><operator>-&gt;</operator><name>db_collate</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"lc_collate values for database \"%s\" do not match:  old \"%s\", new \"%s\"\n"</literal></expr></argument>,
				 <argument><expr><name><name>olddb</name><operator>-&gt;</operator><name>db_name</name></name></expr></argument>, <argument><expr><name><name>olddb</name><operator>-&gt;</operator><name>db_collate</name></name></expr></argument>, <argument><expr><name><name>newdb</name><operator>-&gt;</operator><name>db_collate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>equivalent_locale</name><argument_list>(<argument><expr><name>LC_CTYPE</name></expr></argument>, <argument><expr><name><name>olddb</name><operator>-&gt;</operator><name>db_ctype</name></name></expr></argument>, <argument><expr><name><name>newdb</name><operator>-&gt;</operator><name>db_ctype</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"lc_ctype values for database \"%s\" do not match:  old \"%s\", new \"%s\"\n"</literal></expr></argument>,
				 <argument><expr><name><name>olddb</name><operator>-&gt;</operator><name>db_name</name></name></expr></argument>, <argument><expr><name><name>olddb</name><operator>-&gt;</operator><name>db_ctype</name></name></expr></argument>, <argument><expr><name><name>newdb</name><operator>-&gt;</operator><name>db_ctype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * equivalent_locale()
 *
 * Best effort locale-name comparison.  Return false if we are not 100% sure
 * the locales are equivalent.
 *
 * Note: The encoding parts of the names are ignored. This function is
 * currently used to compare locale names stored in pg_database, and
 * pg_database contains a separate encoding field. That's compared directly
 * in check_locale_and_encoding().
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>equivalent_locale</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>category</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>loca</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>locb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>chara</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>charb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>canona</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>canonb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>lena</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>lenb</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * If the names are equal, the locales are equivalent. Checking this first
	 * avoids calling setlocale() in the common case that the names are equal.
	 * That's a good thing, if setlocale() is buggy, for example.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>loca</name></expr></argument>, <argument><expr><name>locb</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Not identical. Canonicalize both names, remove the encoding parts, and
	 * try again.
	 */</comment>
	<expr_stmt><expr><name>canona</name> <operator>=</operator> <call><name>get_canonical_locale_name</name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><name>loca</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>chara</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>canona</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>lena</name> <operator>=</operator> <ternary><condition><expr><name>chara</name></expr> ?</condition><then> <expr><operator>(</operator><name>chara</name> <operator>-</operator> <name>canona</name><operator>)</operator></expr> </then><else>: <expr><call><name>strlen</name><argument_list>(<argument><expr><name>canona</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

	<expr_stmt><expr><name>canonb</name> <operator>=</operator> <call><name>get_canonical_locale_name</name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><name>locb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>charb</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>canonb</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>lenb</name> <operator>=</operator> <ternary><condition><expr><name>charb</name></expr> ?</condition><then> <expr><operator>(</operator><name>charb</name> <operator>-</operator> <name>canonb</name><operator>)</operator></expr> </then><else>: <expr><call><name>strlen</name><argument_list>(<argument><expr><name>canonb</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>lena</name> <operator>==</operator> <name>lenb</name> <operator>&amp;&amp;</operator> <call><name>pg_strncasecmp</name><argument_list>(<argument><expr><name>canona</name></expr></argument>, <argument><expr><name>canonb</name></expr></argument>, <argument><expr><name>lena</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name>canona</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name>canonb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name>canona</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name>canonb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_new_cluster_is_empty</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>dbnum</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>dbnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>dbnum</name> <operator>&lt;</operator> <name><name>new_cluster</name><operator>.</operator><name>dbarr</name><operator>.</operator><name>ndbs</name></name></expr>;</condition> <incr><expr><name>dbnum</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>relnum</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>RelInfoArr</name> <modifier>*</modifier></type><name>rel_arr</name> <init>= <expr><operator>&amp;</operator><name><name>new_cluster</name><operator>.</operator><name>dbarr</name><operator>.</operator><name>dbs</name><index>[<expr><name>dbnum</name></expr>]</index></name><operator>.</operator><name>rel_arr</name></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>relnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>relnum</name> <operator>&lt;</operator> <name><name>rel_arr</name><operator>-&gt;</operator><name>nrels</name></name></expr>;</condition>
			 <incr><expr><name>relnum</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<comment type="block">/* pg_largeobject and its index should be skipped */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rel_arr</name><operator>-&gt;</operator><name>rels</name><index>[<expr><name>relnum</name></expr>]</index></name><operator>.</operator><name>nspname</name></expr></argument>, <argument><expr><literal type="string">"pg_catalog"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"New cluster database \"%s\" is not empty\n"</literal></expr></argument>,
						 <argument><expr><name><name>new_cluster</name><operator>.</operator><name>dbarr</name><operator>.</operator><name>dbs</name><index>[<expr><name>dbnum</name></expr>]</index></name><operator>.</operator><name>db_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Check that every database that already exists in the new cluster is
 * compatible with the corresponding database in the old one.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_databases_are_compatible</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>newdbnum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>olddbnum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DbInfo</name>	   <modifier>*</modifier></type><name>newdbinfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DbInfo</name>	   <modifier>*</modifier></type><name>olddbinfo</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>newdbnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>newdbnum</name> <operator>&lt;</operator> <name><name>new_cluster</name><operator>.</operator><name>dbarr</name><operator>.</operator><name>ndbs</name></name></expr>;</condition> <incr><expr><name>newdbnum</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>newdbinfo</name> <operator>=</operator> <operator>&amp;</operator><name><name>new_cluster</name><operator>.</operator><name>dbarr</name><operator>.</operator><name>dbs</name><index>[<expr><name>newdbnum</name></expr>]</index></name></expr>;</expr_stmt>

		<comment type="block">/* Find the corresponding database in the old cluster */</comment>
		<for>for <control>(<init><expr><name>olddbnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>olddbnum</name> <operator>&lt;</operator> <name><name>old_cluster</name><operator>.</operator><name>dbarr</name><operator>.</operator><name>ndbs</name></name></expr>;</condition> <incr><expr><name>olddbnum</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name>olddbinfo</name> <operator>=</operator> <operator>&amp;</operator><name><name>old_cluster</name><operator>.</operator><name>dbarr</name><operator>.</operator><name>dbs</name><index>[<expr><name>olddbnum</name></expr>]</index></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>newdbinfo</name><operator>-&gt;</operator><name>db_name</name></name></expr></argument>, <argument><expr><name><name>olddbinfo</name><operator>-&gt;</operator><name>db_name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>check_locale_and_encoding</name><argument_list>(<argument><expr><name>olddbinfo</name></expr></argument>, <argument><expr><name>newdbinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>
</block_content>}</block></function>


<comment type="block">/*
 * create_script_for_cluster_analyze()
 *
 *	This incrementally generates better optimizer statistics
 */</comment>
<function><type><name>void</name></type>
<name>create_script_for_cluster_analyze</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>analyze_script_file_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE</name>	   <modifier>*</modifier></type><name>script</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PQExpBufferData</name></type> <name>user_specification</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>prep_status</name><argument_list>(<argument><expr><literal type="string">"Creating script to analyze new cluster"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>initPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>user_specification</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>os_info</name><operator>.</operator><name>user_specified</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>appendPQExpBufferStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>user_specification</name></expr></argument>, <argument><expr><literal type="string">"-U "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>appendShellString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>user_specification</name></expr></argument>, <argument><expr><name><name>os_info</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>appendPQExpBufferChar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>user_specification</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>analyze_script_file_name</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"%sanalyze_new_cluster.%s"</literal></expr></argument>,
										 <argument><expr><name>SCRIPT_PREFIX</name></expr></argument>, <argument><expr><name>SCRIPT_EXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>script</name> <operator>=</operator> <call><name>fopen_priv</name><argument_list>(<argument><expr><operator>*</operator><name>analyze_script_file_name</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"could not open file \"%s\": %s\n"</literal></expr></argument>,
				 <argument><expr><operator>*</operator><name>analyze_script_file_name</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
	<comment type="block">/* add shebang header */</comment>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="string">"#!/bin/sh\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<comment type="block">/* suppress command echoing */</comment>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="string">"@echo off\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="string">"echo %sThis script will generate minimal optimizer statistics rapidly%s\n"</literal></expr></argument>,
			<argument><expr><name>ECHO_QUOTE</name></expr></argument>, <argument><expr><name>ECHO_QUOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="string">"echo %sso your system is usable, and then gather statistics twice more%s\n"</literal></expr></argument>,
			<argument><expr><name>ECHO_QUOTE</name></expr></argument>, <argument><expr><name>ECHO_QUOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="string">"echo %swith increasing accuracy.  When it is done, your system will%s\n"</literal></expr></argument>,
			<argument><expr><name>ECHO_QUOTE</name></expr></argument>, <argument><expr><name>ECHO_QUOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="string">"echo %shave the default level of optimizer statistics.%s\n"</literal></expr></argument>,
			<argument><expr><name>ECHO_QUOTE</name></expr></argument>, <argument><expr><name>ECHO_QUOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="string">"echo%s\n\n"</literal></expr></argument>, <argument><expr><name>ECHO_BLANK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="string">"echo %sIf you have used ALTER TABLE to modify the statistics target for%s\n"</literal></expr></argument>,
			<argument><expr><name>ECHO_QUOTE</name></expr></argument>, <argument><expr><name>ECHO_QUOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="string">"echo %sany tables, you might want to remove them and restore them after%s\n"</literal></expr></argument>,
			<argument><expr><name>ECHO_QUOTE</name></expr></argument>, <argument><expr><name>ECHO_QUOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="string">"echo %srunning this script because they will delay fast statistics generation.%s\n"</literal></expr></argument>,
			<argument><expr><name>ECHO_QUOTE</name></expr></argument>, <argument><expr><name>ECHO_QUOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="string">"echo%s\n\n"</literal></expr></argument>, <argument><expr><name>ECHO_BLANK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="string">"echo %sIf you would like default statistics as quickly as possible, cancel%s\n"</literal></expr></argument>,
			<argument><expr><name>ECHO_QUOTE</name></expr></argument>, <argument><expr><name>ECHO_QUOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="string">"echo %sthis script and run:%s\n"</literal></expr></argument>,
			<argument><expr><name>ECHO_QUOTE</name></expr></argument>, <argument><expr><name>ECHO_QUOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="string">"echo %s    \"%s/vacuumdb\" %s--all %s%s\n"</literal></expr></argument>, <argument><expr><name>ECHO_QUOTE</name></expr></argument>,
			<argument><expr><name><name>new_cluster</name><operator>.</operator><name>bindir</name></name></expr></argument>, <argument><expr><name><name>user_specification</name><operator>.</operator><name>data</name></name></expr></argument>,
	<comment type="block">/* Did we copy the free space files? */</comment>
			<argument><expr><ternary><condition><expr><operator>(</operator><call><name>GET_MAJOR_VERSION</name><argument_list>(<argument><expr><name><name>old_cluster</name><operator>.</operator><name>major_version</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">804</literal><operator>)</operator></expr> ?</condition><then>
			<expr><literal type="string">"--analyze-only"</literal></expr> </then><else>: <expr><literal type="string">"--analyze"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>ECHO_QUOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="string">"echo%s\n\n"</literal></expr></argument>, <argument><expr><name>ECHO_BLANK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="string">"\"%s/vacuumdb\" %s--all --analyze-in-stages\n"</literal></expr></argument>,
			<argument><expr><name><name>new_cluster</name><operator>.</operator><name>bindir</name></name></expr></argument>, <argument><expr><name><name>user_specification</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Did we copy the free space files? */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>GET_MAJOR_VERSION</name><argument_list>(<argument><expr><name><name>old_cluster</name><operator>.</operator><name>major_version</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">804</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="string">"\"%s/vacuumdb\" %s--all\n"</literal></expr></argument>, <argument><expr><name><name>new_cluster</name><operator>.</operator><name>bindir</name></name></expr></argument>,
				<argument><expr><name><name>user_specification</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="string">"echo%s\n\n"</literal></expr></argument>, <argument><expr><name>ECHO_BLANK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="string">"echo %sDone%s\n"</literal></expr></argument>,
			<argument><expr><name>ECHO_QUOTE</name></expr></argument>, <argument><expr><name>ECHO_QUOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
	<if_stmt><if>if <condition>(<expr><call><name>chmod</name><argument_list>(<argument><expr><operator>*</operator><name>analyze_script_file_name</name></expr></argument>, <argument><expr><name>S_IRWXU</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"could not add execute permission to file \"%s\": %s\n"</literal></expr></argument>,
				 <argument><expr><operator>*</operator><name>analyze_script_file_name</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>termPQExpBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>user_specification</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>check_ok</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * create_script_for_old_cluster_deletion()
 *
 *	This is particularly useful for tablespace deletion.
 */</comment>
<function><type><name>void</name></type>
<name>create_script_for_old_cluster_deletion</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>deletion_script_file_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE</name>	   <modifier>*</modifier></type><name>script</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>tblnum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>old_cluster_pgdata</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>,
				<decl><type ref="prev"/><name><name>new_cluster_pgdata</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>deletion_script_file_name</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"%sdelete_old_cluster.%s"</literal></expr></argument>,
										  <argument><expr><name>SCRIPT_PREFIX</name></expr></argument>, <argument><expr><name>SCRIPT_EXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>old_cluster_pgdata</name></expr></argument>, <argument><expr><name><name>old_cluster</name><operator>.</operator><name>pgdata</name></name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>canonicalize_path</name><argument_list>(<argument><expr><name>old_cluster_pgdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>new_cluster_pgdata</name></expr></argument>, <argument><expr><name><name>new_cluster</name><operator>.</operator><name>pgdata</name></name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>canonicalize_path</name><argument_list>(<argument><expr><name>new_cluster_pgdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Some people put the new data directory inside the old one. */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>path_is_prefix_of_path</name><argument_list>(<argument><expr><name>old_cluster_pgdata</name></expr></argument>, <argument><expr><name>new_cluster_pgdata</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pg_log</name><argument_list>(<argument><expr><name>PG_WARNING</name></expr></argument>,
			   <argument><expr><literal type="string">"\nWARNING:  new data directory should not be inside the old data directory, e.g. %s\n"</literal></expr></argument>, <argument><expr><name>old_cluster_pgdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Unlink file in case it is left over from a previous run. */</comment>
		<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><operator>*</operator><name>deletion_script_file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><operator>*</operator><name>deletion_script_file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>deletion_script_file_name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Some users (oddly) create tablespaces inside the cluster data
	 * directory.  We can't create a proper old cluster delete script in that
	 * case.
	 */</comment>
	<for>for <control>(<init><expr><name>tblnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>tblnum</name> <operator>&lt;</operator> <name><name>os_info</name><operator>.</operator><name>num_old_tablespaces</name></name></expr>;</condition> <incr><expr><name>tblnum</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>old_tablespace_dir</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>old_tablespace_dir</name></expr></argument>, <argument><expr><name><name>os_info</name><operator>.</operator><name>old_tablespaces</name><index>[<expr><name>tblnum</name></expr>]</index></name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>canonicalize_path</name><argument_list>(<argument><expr><name>old_tablespace_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>path_is_prefix_of_path</name><argument_list>(<argument><expr><name>old_cluster_pgdata</name></expr></argument>, <argument><expr><name>old_tablespace_dir</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* reproduce warning from CREATE TABLESPACE that is in the log */</comment>
			<expr_stmt><expr><call><name>pg_log</name><argument_list>(<argument><expr><name>PG_WARNING</name></expr></argument>,
				   <argument><expr><literal type="string">"\nWARNING:  user-defined tablespace locations should not be inside the data directory, e.g. %s\n"</literal></expr></argument>, <argument><expr><name>old_tablespace_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* Unlink file in case it is left over from a previous run. */</comment>
			<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><operator>*</operator><name>deletion_script_file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><operator>*</operator><name>deletion_script_file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>deletion_script_file_name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>prep_status</name><argument_list>(<argument><expr><literal type="string">"Creating script to delete old cluster"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>script</name> <operator>=</operator> <call><name>fopen_priv</name><argument_list>(<argument><expr><operator>*</operator><name>deletion_script_file_name</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"could not open file \"%s\": %s\n"</literal></expr></argument>,
				 <argument><expr><operator>*</operator><name>deletion_script_file_name</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
	<comment type="block">/* add shebang header */</comment>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="string">"#!/bin/sh\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* delete old cluster's default tablespace */</comment>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>RMDIR_CMD</name> <literal type="string">" %c%s%c\n"</literal></expr></argument>, <argument><expr><name>PATH_QUOTE</name></expr></argument>,
			<argument><expr><call><name>fix_path_separator</name><argument_list>(<argument><expr><name><name>old_cluster</name><operator>.</operator><name>pgdata</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PATH_QUOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* delete old cluster's alternate tablespaces */</comment>
	<for>for <control>(<init><expr><name>tblnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>tblnum</name> <operator>&lt;</operator> <name><name>os_info</name><operator>.</operator><name>num_old_tablespaces</name></name></expr>;</condition> <incr><expr><name>tblnum</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="block">/*
		 * Do the old cluster's per-database directories share a directory
		 * with a new version-specific tablespace?
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>old_cluster</name><operator>.</operator><name>tablespace_suffix</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* delete per-database directories */</comment>
			<decl_stmt><decl><type><name>int</name></type>			<name>dbnum</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* remove PG_VERSION? */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>GET_MAJOR_VERSION</name><argument_list>(<argument><expr><name><name>old_cluster</name><operator>.</operator><name>major_version</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">804</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>RM_CMD</name> <literal type="string">" %s%cPG_VERSION\n"</literal></expr></argument>,
						<argument><expr><call><name>fix_path_separator</name><argument_list>(<argument><expr><name><name>os_info</name><operator>.</operator><name>old_tablespaces</name><index>[<expr><name>tblnum</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><name>PATH_SEPARATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<for>for <control>(<init><expr><name>dbnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>dbnum</name> <operator>&lt;</operator> <name><name>old_cluster</name><operator>.</operator><name>dbarr</name><operator>.</operator><name>ndbs</name></name></expr>;</condition> <incr><expr><name>dbnum</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>RMDIR_CMD</name> <literal type="string">" %c%s%c%d%c\n"</literal></expr></argument>, <argument><expr><name>PATH_QUOTE</name></expr></argument>,
						<argument><expr><call><name>fix_path_separator</name><argument_list>(<argument><expr><name><name>os_info</name><operator>.</operator><name>old_tablespaces</name><index>[<expr><name>tblnum</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><name>PATH_SEPARATOR</name></expr></argument>, <argument><expr><name><name>old_cluster</name><operator>.</operator><name>dbarr</name><operator>.</operator><name>dbs</name><index>[<expr><name>dbnum</name></expr>]</index></name><operator>.</operator><name>db_oid</name></expr></argument>,
						<argument><expr><name>PATH_QUOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>suffix_path</name> <init>= <expr><call><name>pg_strdup</name><argument_list>(<argument><expr><name><name>old_cluster</name><operator>.</operator><name>tablespace_suffix</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<comment type="block">/*
			 * Simply delete the tablespace directory, which might be ".old"
			 * or a version-specific subdirectory.
			 */</comment>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>RMDIR_CMD</name> <literal type="string">" %c%s%s%c\n"</literal></expr></argument>, <argument><expr><name>PATH_QUOTE</name></expr></argument>,
					<argument><expr><call><name>fix_path_separator</name><argument_list>(<argument><expr><name><name>os_info</name><operator>.</operator><name>old_tablespaces</name><index>[<expr><name>tblnum</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><call><name>fix_path_separator</name><argument_list>(<argument><expr><name>suffix_path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PATH_QUOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>suffix_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
	<if_stmt><if>if <condition>(<expr><call><name>chmod</name><argument_list>(<argument><expr><operator>*</operator><name>deletion_script_file_name</name></expr></argument>, <argument><expr><name>S_IRWXU</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"could not add execute permission to file \"%s\": %s\n"</literal></expr></argument>,
				 <argument><expr><operator>*</operator><name>deletion_script_file_name</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>check_ok</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 *	check_is_install_user()
 *
 *	Check we are the install user, and that the new cluster
 *	has no other users.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_is_install_user</name><parameter_list>(<parameter><decl><type><name>ClusterInfo</name> <modifier>*</modifier></type><name>cluster</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGresult</name>   <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGconn</name>	   <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>connectToServer</name><argument_list>(<argument><expr><name>cluster</name></expr></argument>, <argument><expr><literal type="string">"template1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>prep_status</name><argument_list>(<argument><expr><literal type="string">"Checking database user is the install user"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Can't use pg_authid because only superusers can view it. */</comment>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>executeQueryOrDie</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,
							<argument><expr><literal type="string">"SELECT rolsuper, oid "</literal>
							<literal type="string">"FROM pg_catalog.pg_roles "</literal>
							<literal type="string">"WHERE rolname = current_user "</literal>
							<literal type="string">"AND rolname !~ '^pg_'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * We only allow the install user in the new cluster (see comment below)
	 * and we preserve pg_authid.oid, so this must be the install user in the
	 * old cluster too.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>PQntuples</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator>
		<call><name>atooid</name><argument_list>(<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>BOOTSTRAP_SUPERUSERID</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"database user \"%s\" is not the install user\n"</literal></expr></argument>,
				 <argument><expr><name><name>os_info</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>executeQueryOrDie</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,
							<argument><expr><literal type="string">"SELECT COUNT(*) "</literal>
							<literal type="string">"FROM pg_catalog.pg_roles "</literal>
							<literal type="string">"WHERE rolname !~ '^pg_'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PQntuples</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"could not determine the number of users\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * We only allow the install user in the new cluster because other defined
	 * users might match users defined in the old cluster and generate an
	 * error during pg_dump restore.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>cluster</name> <operator>==</operator> <operator>&amp;</operator><name>new_cluster</name> <operator>&amp;&amp;</operator> <call><name>atooid</name><argument_list>(<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"Only the install user can be defined in the new cluster.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>check_ok</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_proper_datallowconn</name><parameter_list>(<parameter><decl><type><name>ClusterInfo</name> <modifier>*</modifier></type><name>cluster</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>dbnum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGconn</name>	   <modifier>*</modifier></type><name>conn_template1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGresult</name>   <modifier>*</modifier></type><name>dbres</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>ntups</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i_datname</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i_datallowconn</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>prep_status</name><argument_list>(<argument><expr><literal type="string">"Checking database connection settings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>conn_template1</name> <operator>=</operator> <call><name>connectToServer</name><argument_list>(<argument><expr><name>cluster</name></expr></argument>, <argument><expr><literal type="string">"template1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* get database names */</comment>
	<expr_stmt><expr><name>dbres</name> <operator>=</operator> <call><name>executeQueryOrDie</name><argument_list>(<argument><expr><name>conn_template1</name></expr></argument>,
							  <argument><expr><literal type="string">"SELECT	datname, datallowconn "</literal>
							  <literal type="string">"FROM	pg_catalog.pg_database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>i_datname</name> <operator>=</operator> <call><name>PQfnumber</name><argument_list>(<argument><expr><name>dbres</name></expr></argument>, <argument><expr><literal type="string">"datname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>i_datallowconn</name> <operator>=</operator> <call><name>PQfnumber</name><argument_list>(<argument><expr><name>dbres</name></expr></argument>, <argument><expr><literal type="string">"datallowconn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ntups</name> <operator>=</operator> <call><name>PQntuples</name><argument_list>(<argument><expr><name>dbres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>dbnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>dbnum</name> <operator>&lt;</operator> <name>ntups</name></expr>;</condition> <incr><expr><name>dbnum</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>datname</name> <init>= <expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>dbres</name></expr></argument>, <argument><expr><name>dbnum</name></expr></argument>, <argument><expr><name>i_datname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>datallowconn</name> <init>= <expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>dbres</name></expr></argument>, <argument><expr><name>dbnum</name></expr></argument>, <argument><expr><name>i_datallowconn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>datname</name></expr></argument>, <argument><expr><literal type="string">"template0"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* avoid restore failure when pg_dumpall tries to create template0 */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>datallowconn</name></expr></argument>, <argument><expr><literal type="string">"t"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"template0 must not allow connections, "</literal>
						 <literal type="string">"i.e. its pg_database.datallowconn must be false\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/*
			 * avoid datallowconn == false databases from being skipped on
			 * restore
			 */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>datallowconn</name></expr></argument>, <argument><expr><literal type="string">"f"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"All non-template0 databases must allow connections, "</literal>
						 <literal type="string">"i.e. their pg_database.datallowconn must be true\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>dbres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>conn_template1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>check_ok</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 *	check_for_prepared_transactions()
 *
 *	Make sure there are no prepared transactions because the storage format
 *	might have changed.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_for_prepared_transactions</name><parameter_list>(<parameter><decl><type><name>ClusterInfo</name> <modifier>*</modifier></type><name>cluster</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGresult</name>   <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGconn</name>	   <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>connectToServer</name><argument_list>(<argument><expr><name>cluster</name></expr></argument>, <argument><expr><literal type="string">"template1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>prep_status</name><argument_list>(<argument><expr><literal type="string">"Checking for prepared transactions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>executeQueryOrDie</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,
							<argument><expr><literal type="string">"SELECT * "</literal>
							<literal type="string">"FROM pg_catalog.pg_prepared_xacts"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PQntuples</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>cluster</name> <operator>==</operator> <operator>&amp;</operator><name>old_cluster</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"The source cluster contains prepared transactions\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"The target cluster contains prepared transactions\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>check_ok</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 *	check_for_isn_and_int8_passing_mismatch()
 *
 *	contrib/isn relies on data type int8, and in 8.4 int8 can now be passed
 *	by value.  The schema dumps the CREATE TYPE PASSEDBYVALUE setting so
 *	it must match for the old and new servers.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_for_isn_and_int8_passing_mismatch</name><parameter_list>(<parameter><decl><type><name>ClusterInfo</name> <modifier>*</modifier></type><name>cluster</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>dbnum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE</name>	   <modifier>*</modifier></type><name>script</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>output_path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>prep_status</name><argument_list>(<argument><expr><literal type="string">"Checking for contrib/isn with bigint-passing mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>old_cluster</name><operator>.</operator><name>controldata</name><operator>.</operator><name>float8_pass_by_value</name></name> <operator>==</operator>
		<name><name>new_cluster</name><operator>.</operator><name>controldata</name><operator>.</operator><name>float8_pass_by_value</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* no mismatch */</comment>
		<expr_stmt><expr><call><name>check_ok</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>output_path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>output_path</name></expr></argument>)</argument_list></sizeof></expr></argument>,
			 <argument><expr><literal type="string">"contrib_isn_and_int8_pass_by_value.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>dbnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>dbnum</name> <operator>&lt;</operator> <name><name>cluster</name><operator>-&gt;</operator><name>dbarr</name><operator>.</operator><name>ndbs</name></name></expr>;</condition> <incr><expr><name>dbnum</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PGresult</name>   <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>db_used</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>ntups</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>rowno</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>i_nspname</name></decl>,
					<decl><type ref="prev"/><name>i_proname</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>DbInfo</name>	   <modifier>*</modifier></type><name>active_db</name> <init>= <expr><operator>&amp;</operator><name><name>cluster</name><operator>-&gt;</operator><name>dbarr</name><operator>.</operator><name>dbs</name><index>[<expr><name>dbnum</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PGconn</name>	   <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>connectToServer</name><argument_list>(<argument><expr><name>cluster</name></expr></argument>, <argument><expr><name><name>active_db</name><operator>-&gt;</operator><name>db_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/* Find any functions coming from contrib/isn */</comment>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>executeQueryOrDie</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,
								<argument><expr><literal type="string">"SELECT n.nspname, p.proname "</literal>
								<literal type="string">"FROM	pg_catalog.pg_proc p, "</literal>
								<literal type="string">"		pg_catalog.pg_namespace n "</literal>
								<literal type="string">"WHERE	p.pronamespace = n.oid AND "</literal>
								<literal type="string">"		p.probin = '$libdir/isn'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>ntups</name> <operator>=</operator> <call><name>PQntuples</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i_nspname</name> <operator>=</operator> <call><name>PQfnumber</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"nspname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i_proname</name> <operator>=</operator> <call><name>PQfnumber</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"proname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>rowno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>rowno</name> <operator>&lt;</operator> <name>ntups</name></expr>;</condition> <incr><expr><name>rowno</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>script</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>script</name> <operator>=</operator> <call><name>fopen_priv</name><argument_list>(<argument><expr><name>output_path</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"could not open file \"%s\": %s\n"</literal></expr></argument>,
						 <argument><expr><name>output_path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>db_used</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="string">"Database: %s\n"</literal></expr></argument>, <argument><expr><name><name>active_db</name><operator>-&gt;</operator><name>db_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>db_used</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="string">"  %s.%s\n"</literal></expr></argument>,
					<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>rowno</name></expr></argument>, <argument><expr><name>i_nspname</name></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>rowno</name></expr></argument>, <argument><expr><name>i_proname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>script</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pg_log</name><argument_list>(<argument><expr><name>PG_REPORT</name></expr></argument>, <argument><expr><literal type="string">"fatal\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"Your installation contains \"contrib/isn\" functions which rely on the\n"</literal>
				 <literal type="string">"bigint data type.  Your old and new clusters pass bigint values\n"</literal>
				 <literal type="string">"differently so this cluster cannot currently be upgraded.  You can\n"</literal>
				 <literal type="string">"manually upgrade databases that use \"contrib/isn\" facilities and remove\n"</literal>
				 <literal type="string">"\"contrib/isn\" from the old cluster and restart the upgrade.  A list of\n"</literal>
				 <literal type="string">"the problem functions is in the file:\n"</literal>
				 <literal type="string">"    %s\n\n"</literal></expr></argument>, <argument><expr><name>output_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>check_ok</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * check_for_reg_data_type_usage()
 *	pg_upgrade only preserves these system values:
 *		pg_class.oid
 *		pg_type.oid
 *		pg_enum.oid
 *
 *	Many of the reg* data types reference system catalog info that is
 *	not preserved, and hence these data types cannot be used in user
 *	tables upgraded by pg_upgrade.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_for_reg_data_type_usage</name><parameter_list>(<parameter><decl><type><name>ClusterInfo</name> <modifier>*</modifier></type><name>cluster</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>dbnum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE</name>	   <modifier>*</modifier></type><name>script</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>output_path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>prep_status</name><argument_list>(<argument><expr><literal type="string">"Checking for reg* data types in user tables"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>output_path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>output_path</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"tables_using_reg.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>dbnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>dbnum</name> <operator>&lt;</operator> <name><name>cluster</name><operator>-&gt;</operator><name>dbarr</name><operator>.</operator><name>ndbs</name></name></expr>;</condition> <incr><expr><name>dbnum</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PGresult</name>   <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>db_used</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>ntups</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>rowno</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>i_nspname</name></decl>,
					<decl><type ref="prev"/><name>i_relname</name></decl>,
					<decl><type ref="prev"/><name>i_attname</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>DbInfo</name>	   <modifier>*</modifier></type><name>active_db</name> <init>= <expr><operator>&amp;</operator><name><name>cluster</name><operator>-&gt;</operator><name>dbarr</name><operator>.</operator><name>dbs</name><index>[<expr><name>dbnum</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PGconn</name>	   <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>connectToServer</name><argument_list>(<argument><expr><name>cluster</name></expr></argument>, <argument><expr><name><name>active_db</name><operator>-&gt;</operator><name>db_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/*
		 * While several relkinds don't store any data, e.g. views, they can
		 * be used to define data types of other columns, so we check all
		 * relkinds.
		 */</comment>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>executeQueryOrDie</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,
								<argument><expr><literal type="string">"SELECT n.nspname, c.relname, a.attname "</literal>
								<literal type="string">"FROM	pg_catalog.pg_class c, "</literal>
								<literal type="string">"		pg_catalog.pg_namespace n, "</literal>
								<literal type="string">"		pg_catalog.pg_attribute a, "</literal>
								<literal type="string">"		pg_catalog.pg_type t "</literal>
								<literal type="string">"WHERE	c.oid = a.attrelid AND "</literal>
								<literal type="string">"		NOT a.attisdropped AND "</literal>
								<literal type="string">"       a.atttypid = t.oid AND "</literal>
								<literal type="string">"       t.typnamespace = "</literal>
								<literal type="string">"           (SELECT oid FROM pg_namespace "</literal>
								<literal type="string">"            WHERE nspname = 'pg_catalog') AND"</literal>
								<literal type="string">"		t.typname IN ( "</literal>
		<comment type="block">/* regclass.oid is preserved, so 'regclass' is OK */</comment>
								<literal type="string">"           'regconfig', "</literal>
								<literal type="string">"           'regdictionary', "</literal>
								<literal type="string">"           'regnamespace', "</literal>
								<literal type="string">"           'regoper', "</literal>
								<literal type="string">"           'regoperator', "</literal>
								<literal type="string">"           'regproc', "</literal>
								<literal type="string">"           'regprocedure' "</literal>
		<comment type="block">/* regrole.oid is preserved, so 'regrole' is OK */</comment>
		<comment type="block">/* regtype.oid is preserved, so 'regtype' is OK */</comment>
								<literal type="string">"			) AND "</literal>
								<literal type="string">"		c.relnamespace = n.oid AND "</literal>
								<literal type="string">"		n.nspname NOT IN ('pg_catalog', 'information_schema')"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>ntups</name> <operator>=</operator> <call><name>PQntuples</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i_nspname</name> <operator>=</operator> <call><name>PQfnumber</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"nspname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i_relname</name> <operator>=</operator> <call><name>PQfnumber</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"relname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i_attname</name> <operator>=</operator> <call><name>PQfnumber</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"attname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>rowno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>rowno</name> <operator>&lt;</operator> <name>ntups</name></expr>;</condition> <incr><expr><name>rowno</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>script</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>script</name> <operator>=</operator> <call><name>fopen_priv</name><argument_list>(<argument><expr><name>output_path</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"could not open file \"%s\": %s\n"</literal></expr></argument>,
						 <argument><expr><name>output_path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>db_used</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="string">"Database: %s\n"</literal></expr></argument>, <argument><expr><name><name>active_db</name><operator>-&gt;</operator><name>db_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>db_used</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="string">"  %s.%s.%s\n"</literal></expr></argument>,
					<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>rowno</name></expr></argument>, <argument><expr><name>i_nspname</name></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>rowno</name></expr></argument>, <argument><expr><name>i_relname</name></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>rowno</name></expr></argument>, <argument><expr><name>i_attname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>script</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pg_log</name><argument_list>(<argument><expr><name>PG_REPORT</name></expr></argument>, <argument><expr><literal type="string">"fatal\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"Your installation contains one of the reg* data types in user tables.\n"</literal>
				 <literal type="string">"These data types reference system OIDs that are not preserved by\n"</literal>
				 <literal type="string">"pg_upgrade, so this cluster cannot currently be upgraded.  You can\n"</literal>
				 <literal type="string">"remove the problem tables and restart the upgrade.  A list of the problem\n"</literal>
				 <literal type="string">"columns is in the file:\n"</literal>
				 <literal type="string">"    %s\n\n"</literal></expr></argument>, <argument><expr><name>output_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>check_ok</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * check_for_jsonb_9_4_usage()
 *
 *	JSONB changed its storage format during 9.4 beta, so check for it.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_for_jsonb_9_4_usage</name><parameter_list>(<parameter><decl><type><name>ClusterInfo</name> <modifier>*</modifier></type><name>cluster</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>dbnum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE</name>	   <modifier>*</modifier></type><name>script</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>output_path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>prep_status</name><argument_list>(<argument><expr><literal type="string">"Checking for incompatible \"jsonb\" data type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>output_path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>output_path</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"tables_using_jsonb.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>dbnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>dbnum</name> <operator>&lt;</operator> <name><name>cluster</name><operator>-&gt;</operator><name>dbarr</name><operator>.</operator><name>ndbs</name></name></expr>;</condition> <incr><expr><name>dbnum</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PGresult</name>   <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>db_used</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>ntups</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>rowno</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>i_nspname</name></decl>,
					<decl><type ref="prev"/><name>i_relname</name></decl>,
					<decl><type ref="prev"/><name>i_attname</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>DbInfo</name>	   <modifier>*</modifier></type><name>active_db</name> <init>= <expr><operator>&amp;</operator><name><name>cluster</name><operator>-&gt;</operator><name>dbarr</name><operator>.</operator><name>dbs</name><index>[<expr><name>dbnum</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PGconn</name>	   <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>connectToServer</name><argument_list>(<argument><expr><name>cluster</name></expr></argument>, <argument><expr><name><name>active_db</name><operator>-&gt;</operator><name>db_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/*
		 * While several relkinds don't store any data, e.g. views, they can
		 * be used to define data types of other columns, so we check all
		 * relkinds.
		 */</comment>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>executeQueryOrDie</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,
								<argument><expr><literal type="string">"SELECT n.nspname, c.relname, a.attname "</literal>
								<literal type="string">"FROM	pg_catalog.pg_class c, "</literal>
								<literal type="string">"		pg_catalog.pg_namespace n, "</literal>
								<literal type="string">"		pg_catalog.pg_attribute a "</literal>
								<literal type="string">"WHERE	c.oid = a.attrelid AND "</literal>
								<literal type="string">"		NOT a.attisdropped AND "</literal>
								<literal type="string">"		a.atttypid = 'pg_catalog.jsonb'::pg_catalog.regtype AND "</literal>
								<literal type="string">"		c.relnamespace = n.oid AND "</literal>
		<comment type="block">/* exclude possible orphaned temp tables */</comment>
								<literal type="string">"		n.nspname !~ '^pg_temp_' AND "</literal>
								<literal type="string">"		n.nspname NOT IN ('pg_catalog', 'information_schema')"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>ntups</name> <operator>=</operator> <call><name>PQntuples</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i_nspname</name> <operator>=</operator> <call><name>PQfnumber</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"nspname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i_relname</name> <operator>=</operator> <call><name>PQfnumber</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"relname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i_attname</name> <operator>=</operator> <call><name>PQfnumber</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="string">"attname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>rowno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>rowno</name> <operator>&lt;</operator> <name>ntups</name></expr>;</condition> <incr><expr><name>rowno</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>script</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>script</name> <operator>=</operator> <call><name>fopen_priv</name><argument_list>(<argument><expr><name>output_path</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"could not open file \"%s\": %s\n"</literal></expr></argument>,
						 <argument><expr><name>output_path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>db_used</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="string">"Database: %s\n"</literal></expr></argument>, <argument><expr><name><name>active_db</name><operator>-&gt;</operator><name>db_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>db_used</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="string">"  %s.%s.%s\n"</literal></expr></argument>,
					<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>rowno</name></expr></argument>, <argument><expr><name>i_nspname</name></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>rowno</name></expr></argument>, <argument><expr><name>i_relname</name></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>rowno</name></expr></argument>, <argument><expr><name>i_attname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>script</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pg_log</name><argument_list>(<argument><expr><name>PG_REPORT</name></expr></argument>, <argument><expr><literal type="string">"fatal\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"Your installation contains the \"jsonb\" data type in user tables.\n"</literal>
				 <literal type="string">"The internal format of \"jsonb\" changed during 9.4 beta so this cluster cannot currently\n"</literal>
				 <literal type="string">"be upgraded.  You can remove the problem tables and restart the upgrade.  A list\n"</literal>
				 <literal type="string">"of the problem columns is in the file:\n"</literal>
				 <literal type="string">"    %s\n\n"</literal></expr></argument>, <argument><expr><name>output_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>check_ok</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * check_for_pg_role_prefix()
 *
 *	Versions older than 9.6 should not have any pg_* roles
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_for_pg_role_prefix</name><parameter_list>(<parameter><decl><type><name>ClusterInfo</name> <modifier>*</modifier></type><name>cluster</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGresult</name>   <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGconn</name>	   <modifier>*</modifier></type><name>conn</name> <init>= <expr><call><name>connectToServer</name><argument_list>(<argument><expr><name>cluster</name></expr></argument>, <argument><expr><literal type="string">"template1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>prep_status</name><argument_list>(<argument><expr><literal type="string">"Checking for roles starting with \"pg_\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>executeQueryOrDie</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,
							<argument><expr><literal type="string">"SELECT * "</literal>
							<literal type="string">"FROM pg_catalog.pg_roles "</literal>
							<literal type="string">"WHERE rolname ~ '^pg_'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PQntuples</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>cluster</name> <operator>==</operator> <operator>&amp;</operator><name>old_cluster</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"The source cluster contains roles starting with \"pg_\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"The target cluster contains roles starting with \"pg_\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>check_ok</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * get_canonical_locale_name
 *
 * Send the locale name to the system, and hope we get back a canonical
 * version.  This should match the backend's check_locale() function.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>get_canonical_locale_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>category</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>locale</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>save</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

	<comment type="block">/* get the current setting, so we can restore it. */</comment>
	<expr_stmt><expr><name>save</name> <operator>=</operator> <call><name>setlocale</name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>save</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"failed to get the current locale\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* 'save' may be pointing at a modifiable scratch variable, so copy it. */</comment>
	<expr_stmt><expr><name>save</name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* set the locale with setlocale, to see if it accepts it. */</comment>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>setlocale</name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"failed to get system locale name for \"%s\"\n"</literal></expr></argument>, <argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pg_strdup</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* restore old value. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>setlocale</name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><name>save</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"failed to restore old locale \"%s\"\n"</literal></expr></argument>, <argument><expr><name>save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name>save</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>
</unit>
