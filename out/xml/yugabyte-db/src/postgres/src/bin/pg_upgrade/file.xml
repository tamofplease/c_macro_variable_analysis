<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/bin/pg_upgrade/file.c"><comment type="block">/*
 *	file.c
 *
 *	file system operations
 *
 *	Copyright (c) 2010-2018, PostgreSQL Global Development Group
 *	src/bin/pg_upgrade/file.c
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/visibilitymap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/file_perm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_upgrade.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/bufpage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/checksum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/checksum_impl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>win32_pghardlink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/*
 * copyFile()
 *
 * Copies a relation file from src to dst.
 * schemaName/relName are relation's SQL name (used for error messages only).
 */</comment>
<function><type><name>void</name></type>
<name>copyFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
		 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>schemaName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>relName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
	<decl_stmt><decl><type><name>int</name></type>			<name>src_fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>dest_fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>src_fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>PG_BINARY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"error while copying relation \"%s.%s\": could not open file \"%s\": %s\n"</literal></expr></argument>,
				 <argument><expr><name>schemaName</name></expr></argument>, <argument><expr><name>relName</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dest_fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_EXCL</name> <operator>|</operator> <name>PG_BINARY</name></expr></argument>,
						<argument><expr><name>pg_file_create_mode</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"error while copying relation \"%s.%s\": could not create file \"%s\": %s\n"</literal></expr></argument>,
				 <argument><expr><name>schemaName</name></expr></argument>, <argument><expr><name>relName</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* copy in fairly large chunks for best efficiency */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_BUF_SIZE</name></cpp:macro> <cpp:value>(50 * BLCKSZ)</cpp:value></cpp:define>

	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>pg_malloc</name><argument_list>(<argument><expr><name>COPY_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* perform data copying i.e read src source, write to destination */</comment>
	<while>while <condition>(<expr><name>true</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ssize_t</name></type>		<name>nbytes</name> <init>= <expr><call><name>read</name><argument_list>(<argument><expr><name>src_fd</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>COPY_BUF_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"error while copying relation \"%s.%s\": could not read file \"%s\": %s\n"</literal></expr></argument>,
					 <argument><expr><name>schemaName</name></expr></argument>, <argument><expr><name>relName</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>nbytes</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>dest_fd</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nbytes</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* if write didn't set errno, assume problem is no disk space */</comment>
			<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOSPC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"error while copying relation \"%s.%s\": could not write file \"%s\": %s\n"</literal></expr></argument>,
					 <argument><expr><name>schemaName</name></expr></argument>, <argument><expr><name>relName</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>pg_free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>src_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>dest_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>							<comment type="block">/* WIN32 */</comment>

	<if_stmt><if>if <condition>(<expr><call><name>CopyFile</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>_dosmaperr</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"error while copying relation \"%s.%s\" (\"%s\" to \"%s\"): %s\n"</literal></expr></argument>,
				 <argument><expr><name>schemaName</name></expr></argument>, <argument><expr><name>relName</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* WIN32 */</comment>
</block_content>}</block></function>


<comment type="block">/*
 * linkFile()
 *
 * Hard-links a relation file from src to dst.
 * schemaName/relName are relation's SQL name (used for error messages only).
 */</comment>
<function><type><name>void</name></type>
<name>linkFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
		 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>schemaName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>relName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>pg_link_file</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"error while creating link for relation \"%s.%s\" (\"%s\" to \"%s\"): %s\n"</literal></expr></argument>,
				 <argument><expr><name>schemaName</name></expr></argument>, <argument><expr><name>relName</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * rewriteVisibilityMap()
 *
 * Transform a visibility map file, copying from src to dst.
 * schemaName/relName are relation's SQL name (used for error messages only).
 *
 * In versions of PostgreSQL prior to catversion 201603011, PostgreSQL's
 * visibility map included one bit per heap page; it now includes two.
 * When upgrading a cluster from before that time to a current PostgreSQL
 * version, we could refuse to copy visibility maps from the old cluster
 * to the new cluster; the next VACUUM would recreate them, but at the
 * price of scanning the entire table.  So, instead, we rewrite the old
 * visibility maps in the new format.  That way, the all-visible bits
 * remain set for the pages for which they were set previously.  The
 * all-frozen bits are never set by this conversion; we leave that to VACUUM.
 */</comment>
<function><type><name>void</name></type>
<name>rewriteVisibilityMap</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fromfile</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tofile</name></decl></parameter>,
					 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>schemaName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>relName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>src_fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>dst_fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGAlignedBlock</name></type> <name>buffer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGAlignedBlock</name></type> <name>new_vmbuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type>		<name>totalBytesRead</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type>		<name>src_filesize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>rewriteVmBytesPerPage</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BlockNumber</name></type> <name>new_blkno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>statbuf</name></decl>;</decl_stmt>

	<comment type="block">/* Compute number of old-format bytes per new page */</comment>
	<expr_stmt><expr><name>rewriteVmBytesPerPage</name> <operator>=</operator> <operator>(</operator><name>BLCKSZ</name> <operator>-</operator> <name>SizeOfPageHeaderData</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>src_fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>fromfile</name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>PG_BINARY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"error while copying relation \"%s.%s\": could not open file \"%s\": %s\n"</literal></expr></argument>,
				 <argument><expr><name>schemaName</name></expr></argument>, <argument><expr><name>relName</name></expr></argument>, <argument><expr><name>fromfile</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name>src_fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statbuf</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"error while copying relation \"%s.%s\": could not stat file \"%s\": %s\n"</literal></expr></argument>,
				 <argument><expr><name>schemaName</name></expr></argument>, <argument><expr><name>relName</name></expr></argument>, <argument><expr><name>fromfile</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dst_fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>tofile</name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_EXCL</name> <operator>|</operator> <name>PG_BINARY</name></expr></argument>,
					   <argument><expr><name>pg_file_create_mode</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"error while copying relation \"%s.%s\": could not create file \"%s\": %s\n"</literal></expr></argument>,
				 <argument><expr><name>schemaName</name></expr></argument>, <argument><expr><name>relName</name></expr></argument>, <argument><expr><name>tofile</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Save old file size */</comment>
	<expr_stmt><expr><name>src_filesize</name> <operator>=</operator> <name><name>statbuf</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Turn each visibility map page into 2 pages one by one. Each new page
	 * has the same page header as the old one.  If the last section of the
	 * last page is empty, we skip it, mostly to avoid turning one-page
	 * visibility maps for small relations into two pages needlessly.
	 */</comment>
	<while>while <condition>(<expr><name>totalBytesRead</name> <operator>&lt;</operator> <name>src_filesize</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ssize_t</name></type>		<name>bytesRead</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>old_cur</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>old_break</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>old_blkend</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PageHeaderData</name></type> <name>pageheader</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>old_lastblk</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>bytesRead</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>src_fd</name></expr></argument>, <argument><expr><name><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>BLCKSZ</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>BLCKSZ</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>bytesRead</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"error while copying relation \"%s.%s\": could not read file \"%s\": %s\n"</literal></expr></argument>,
						 <argument><expr><name>schemaName</name></expr></argument>, <argument><expr><name>relName</name></expr></argument>, <argument><expr><name>fromfile</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"error while copying relation \"%s.%s\": partial page found in file \"%s\"\n"</literal></expr></argument>,
						 <argument><expr><name>schemaName</name></expr></argument>, <argument><expr><name>relName</name></expr></argument>, <argument><expr><name>fromfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>totalBytesRead</name> <operator>+=</operator> <name>BLCKSZ</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>old_lastblk</name> <operator>=</operator> <operator>(</operator><name>totalBytesRead</name> <operator>==</operator> <name>src_filesize</name><operator>)</operator></expr>;</expr_stmt>

		<comment type="block">/* Save the page header data */</comment>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pageheader</name></expr></argument>, <argument><expr><name><name>buffer</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>SizeOfPageHeaderData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * These old_* variables point to old visibility map page. old_cur
		 * points to current position on old page. old_blkend points to end of
		 * old block.  old_break is the end+1 position on the old page for the
		 * data that will be transferred to the current new page.
		 */</comment>
		<expr_stmt><expr><name>old_cur</name> <operator>=</operator> <name><name>buffer</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name>SizeOfPageHeaderData</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>old_blkend</name> <operator>=</operator> <name><name>buffer</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name>bytesRead</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>old_break</name> <operator>=</operator> <name>old_cur</name> <operator>+</operator> <name>rewriteVmBytesPerPage</name></expr>;</expr_stmt>

		<while>while <condition>(<expr><name>old_break</name> <operator>&lt;=</operator> <name>old_blkend</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>new_cur</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type>		<name>empty</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type>		<name>old_lastpart</name></decl>;</decl_stmt>

			<comment type="block">/* First, copy old page header to new page */</comment>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>new_vmbuf</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pageheader</name></expr></argument>, <argument><expr><name>SizeOfPageHeaderData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* Rewriting the last part of the last old page? */</comment>
			<expr_stmt><expr><name>old_lastpart</name> <operator>=</operator> <name>old_lastblk</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>old_break</name> <operator>==</operator> <name>old_blkend</name><operator>)</operator></expr>;</expr_stmt>

			<expr_stmt><expr><name>new_cur</name> <operator>=</operator> <name><name>new_vmbuf</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name>SizeOfPageHeaderData</name></expr>;</expr_stmt>

			<comment type="block">/* Process old page bytes one by one, and turn it into new page. */</comment>
			<while>while <condition>(<expr><name>old_cur</name> <operator>&lt;</operator> <name>old_break</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>uint8</name></type>		<name>byte</name> <init>= <expr><operator>*</operator><operator>(</operator><name>uint8</name> <operator>*</operator><operator>)</operator> <name>old_cur</name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>uint16</name></type>		<name>new_vmbits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

				<comment type="block">/* Generate new format bits while keeping old information */</comment>
				<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BITS_PER_BYTE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>byte</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name>empty</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>new_vmbits</name> <operator>|=</operator>
							<name>VISIBILITYMAP_ALL_VISIBLE</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>BITS_PER_HEAPBLOCK</name> <operator>*</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></for>

				<comment type="block">/* Copy new visibility map bytes to new-format page */</comment>
				<expr_stmt><expr><name><name>new_cur</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><name>new_vmbits</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>new_cur</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><name>new_vmbits</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

				<expr_stmt><expr><name>old_cur</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>new_cur</name> <operator>+=</operator> <name>BITS_PER_HEAPBLOCK</name></expr>;</expr_stmt>
			</block_content>}</block></while>

			<comment type="block">/* If the last part of the last page is empty, skip writing it */</comment>
			<if_stmt><if>if <condition>(<expr><name>old_lastpart</name> <operator>&amp;&amp;</operator> <name>empty</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>

			<comment type="block">/* Set new checksum for visibility map page, if enabled */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>new_cluster</name><operator>.</operator><name>controldata</name><operator>.</operator><name>data_checksum_version</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>(</operator><operator>(</operator><name>PageHeader</name><operator>)</operator> <name><name>new_vmbuf</name><operator>.</operator><name>data</name></name><operator>)</operator><operator>-&gt;</operator><name>pd_checksum</name> <operator>=</operator>
					<call><name>pg_checksum_page</name><argument_list>(<argument><expr><name><name>new_vmbuf</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>new_blkno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>dst_fd</name></expr></argument>, <argument><expr><name><name>new_vmbuf</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>BLCKSZ</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>BLCKSZ</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* if write didn't set errno, assume problem is no disk space */</comment>
				<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOSPC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"error while copying relation \"%s.%s\": could not write file \"%s\": %s\n"</literal></expr></argument>,
						 <argument><expr><name>schemaName</name></expr></argument>, <argument><expr><name>relName</name></expr></argument>, <argument><expr><name>tofile</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* Advance for next new page */</comment>
			<expr_stmt><expr><name>old_break</name> <operator>+=</operator> <name>rewriteVmBytesPerPage</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>new_blkno</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></while>

	<comment type="block">/* Clean up */</comment>
	<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>dst_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>src_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>check_hard_link</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>existing_file</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>new_link_file</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>existing_file</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>existing_file</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/PG_VERSION"</literal></expr></argument>, <argument><expr><name><name>old_cluster</name><operator>.</operator><name>pgdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>new_link_file</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>new_link_file</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/PG_VERSION.linktest"</literal></expr></argument>, <argument><expr><name><name>new_cluster</name><operator>.</operator><name>pgdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>new_link_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* might fail */</comment>

	<if_stmt><if>if <condition>(<expr><call><name>pg_link_file</name><argument_list>(<argument><expr><name>existing_file</name></expr></argument>, <argument><expr><name>new_link_file</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_fatal</name><argument_list>(<argument><expr><literal type="string">"could not create hard link between old and new data directories: %s\n"</literal>
				 <literal type="string">"In link mode the old and new data directories must be on the same file system.\n"</literal></expr></argument>,
				 <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>new_link_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<comment type="block">/* implementation of pg_link_file() on Windows */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>win32_pghardlink</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * CreateHardLinkA returns zero for failure
	 * http://msdn.microsoft.com/en-us/library/aa363860(VS.85).aspx
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>CreateHardLinkA</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>_dosmaperr</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
