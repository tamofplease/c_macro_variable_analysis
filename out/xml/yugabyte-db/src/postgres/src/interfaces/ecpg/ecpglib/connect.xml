<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/interfaces/ecpg/ecpglib/connect.c"><comment type="block">/* src/interfaces/ecpg/ecpglib/connect.c */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POSTGRES_ECPG_INTERNAL</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecpg-pthread-win32.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecpgtype.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecpglib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ecpgerrno.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlca.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_THREAD_SAFETY</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_mutex_t</name></type> <name>connections_mutex</name> <init>= <expr><name>PTHREAD_MUTEX_INITIALIZER</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_key_t</name></type> <name>actual_connection_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_once_t</name></type> <name>actual_connection_key_once</name> <init>= <expr><name>PTHREAD_ONCE_INIT</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type><name>actual_connection</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type><name>all_connections</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_THREAD_SAFETY</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ecpg_actual_connection_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pthread_key_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>actual_connection_key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ecpg_pthreads_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>actual_connection_key_once</name></expr></argument>, <argument><expr><name>ecpg_actual_connection_init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type>
<name>ecpg_get_connection_nr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>connection_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>connection_name</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>connection_name</name></expr></argument>, <argument><expr><literal type="string">"CURRENT"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
	<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_THREAD_SAFETY</name></cpp:ifdef>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pthread_getspecific</name><argument_list>(<argument><expr><name>actual_connection_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * if no connection in TSD for this thread, get the global default
		 * connection and hope the user knows what they're doing (i.e. using
		 * their own mutex to protect that connection from concurrent accesses
		 */</comment>
		<comment type="block">/* if !ret then  we  got the connection from TSD */</comment>
		<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>ret</name></expr>)</condition><block type="pseudo"><block_content>
			<comment type="block">/* no TSD connection, going for global */</comment>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>actual_connection</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>actual_connection</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type><name>con</name></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>con</name> <operator>=</operator> <name>all_connections</name></expr>;</init> <condition><expr><name>con</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>con</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>connection_name</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>con</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type>
<name>ecpg_get_connection</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>connection_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>connection_name</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>connection_name</name></expr></argument>, <argument><expr><literal type="string">"CURRENT"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
	<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_THREAD_SAFETY</name></cpp:ifdef>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pthread_getspecific</name><argument_list>(<argument><expr><name>actual_connection_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * if no connection in TSD for this thread, get the global default
		 * connection and hope the user knows what they're doing (i.e. using
		 * their own mutex to protect that connection from concurrent accesses
		 */</comment>
		<comment type="block">/* if !ret then  we  got the connection from TSD */</comment>
		<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>ret</name></expr>)</condition><block type="pseudo"><block_content>
			<comment type="block">/* no TSD connection here either, using global */</comment>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>actual_connection</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>actual_connection</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_THREAD_SAFETY</name></cpp:ifdef>
		<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>connections_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ecpg_get_connection_nr</name><argument_list>(<argument><expr><name>connection_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_THREAD_SAFETY</name></cpp:ifdef>
		<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>connections_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ecpg_finish</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type><name>act</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>act</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>ECPGtype_information_cache</name></name> <modifier>*</modifier></type><name>cache</name></decl>,
				   <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>ecpg_deallocate_all_conn</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ECPG_COMPAT_PGSQL</name></expr></argument>, <argument><expr><name>act</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PQfinish</name><argument_list>(<argument><expr><name><name>act</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * no need to lock connections_mutex - we're always called by
		 * ECPGdisconnect or ECPGconnect, which are holding the lock
		 */</comment>

		<comment type="block">/* remove act from the list */</comment>
		<if_stmt><if>if <condition>(<expr><name>act</name> <operator>==</operator> <name>all_connections</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>all_connections</name> <operator>=</operator> <name><name>act</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type><name>con</name></decl>;</decl_stmt>

			<for>for <control>(<init><expr><name>con</name> <operator>=</operator> <name>all_connections</name></expr>;</init> <condition><expr><name><name>con</name><operator>-&gt;</operator><name>next</name></name> <operator>&amp;&amp;</operator> <name><name>con</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>act</name></expr>;</condition> <incr><expr><name>con</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
			<if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>act</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_THREAD_SAFETY</name></cpp:ifdef>
		<if_stmt><if>if <condition>(<expr><call><name>pthread_getspecific</name><argument_list>(<argument><expr><name>actual_connection_key</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>act</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pthread_setspecific</name><argument_list>(<argument><expr><name>actual_connection_key</name></expr></argument>, <argument><expr><name>all_connections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<if_stmt><if>if <condition>(<expr><name>actual_connection</name> <operator>==</operator> <name>act</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>actual_connection</name> <operator>=</operator> <name>all_connections</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ecpg_finish: connection %s closed\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>act</name><operator>-&gt;</operator><name>name</name></name></expr> ?</condition><then> <expr><name><name>act</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><literal type="string">"(null)"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>cache</name> <operator>=</operator> <name><name>act</name><operator>-&gt;</operator><name>cache_head</name></name></expr>;</init> <condition><expr><name>cache</name></expr>;</condition> <incr><expr><name>ptr</name> <operator>=</operator> <name>cache</name></expr><operator>,</operator> <expr><name>cache</name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
		<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name><name>act</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>act</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* delete cursor variables when last connection gets closed */</comment>
		<if_stmt><if>if <condition>(<expr><name>all_connections</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name><name>struct</name> <name>var_list</name></name> <modifier>*</modifier></type><name>iv_ptr</name></decl>;</decl_stmt>

			<for>for <control>(<init>;</init> <condition><expr><name>ivlist</name></expr>;</condition> <incr><expr><name>iv_ptr</name> <operator>=</operator> <name>ivlist</name></expr><operator>,</operator> <expr><name>ivlist</name> <operator>=</operator> <name><name>ivlist</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>iv_ptr</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ecpg_finish: called an extra time\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ECPGsetcommit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>connection_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type><name>con</name> <init>= <expr><call><name>ecpg_get_connection</name><argument_list>(<argument><expr><name>connection_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGresult</name>   <modifier>*</modifier></type><name>results</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_init</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>connection_name</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ECPGsetcommit on line %d: action \"%s\"; connection \"%s\"\n"</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>autocommit</name></name> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"off"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>PQtransactionStatus</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>PQTRANS_IDLE</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>results</name> <operator>=</operator> <call><name>PQexec</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><literal type="string">"begin transaction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_check_PQresult</name><argument_list>(<argument><expr><name>results</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><name>ECPG_COMPAT_PGSQL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>autocommit</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>con</name><operator>-&gt;</operator><name>autocommit</name></name> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="string">"on"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"on"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>PQtransactionStatus</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PQTRANS_IDLE</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>results</name> <operator>=</operator> <call><name>PQexec</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><literal type="string">"commit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_check_PQresult</name><argument_list>(<argument><expr><name>results</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name><name>con</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><name>ECPG_COMPAT_PGSQL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>results</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>con</name><operator>-&gt;</operator><name>autocommit</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ECPGsetconn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>connection_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type><name>con</name> <init>= <expr><call><name>ecpg_get_connection</name><argument_list>(<argument><expr><name>connection_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_init</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>connection_name</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_THREAD_SAFETY</name></cpp:ifdef>
	<expr_stmt><expr><call><name>pthread_setspecific</name><argument_list>(<argument><expr><name>actual_connection_key</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>actual_connection</name> <operator>=</operator> <name>con</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>ECPGnoticeReceiver</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PGresult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>sqlstate</name> <init>= <expr><call><name>PQresultErrorField</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>PG_DIAG_SQLSTATE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>message</name> <init>= <expr><call><name>PQresultErrorField</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>PG_DIAG_MESSAGE_PRIMARY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sqlca_t</name></name> <modifier>*</modifier></type><name>sqlca</name> <init>= <expr><call><name>ECPGget_sqlca</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>sqlcode</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>sqlca</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>arg</name></expr>;</expr_stmt>					<comment type="block">/* keep the compiler quiet */</comment>
	<if_stmt><if>if <condition>(<expr><name>sqlstate</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>sqlstate</name> <operator>=</operator> <name>ECPG_SQLSTATE_ECPG_INTERNAL_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>message</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>		<comment type="block">/* Shouldn't happen, but need to be sure */</comment>
		<expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>ecpg_gettext</name><argument_list>(<argument><expr><literal type="string">"empty message text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* these are not warnings */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>sqlstate</name></expr></argument>, <argument><expr><literal type="string">"00"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ECPGnoticeReceiver: %s\n"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* map to SQLCODE for backward compatibility */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>sqlstate</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_INVALID_CURSOR_NAME</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>sqlcode</name> <operator>=</operator> <name>ECPG_WARNING_UNKNOWN_PORTAL</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>sqlstate</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_ACTIVE_SQL_TRANSACTION</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>sqlcode</name> <operator>=</operator> <name>ECPG_WARNING_IN_TRANSACTION</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>sqlstate</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_NO_ACTIVE_SQL_TRANSACTION</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>sqlcode</name> <operator>=</operator> <name>ECPG_WARNING_NO_TRANSACTION</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>sqlstate</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_DUPLICATE_CURSOR</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>sqlcode</name> <operator>=</operator> <name>ECPG_WARNING_PORTAL_EXISTS</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>sqlcode</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlstate</name></name></expr></argument>, <argument><expr><name>sqlstate</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlstate</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlcode</name></name> <operator>=</operator> <name>sqlcode</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlwarn</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'W'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlwarn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'W'</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrml</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>sqlca</name><operator>-&gt;</operator><name>sqlerrm</name><operator>.</operator><name>sqlerrmc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"raising sqlcode %d\n"</literal></expr></argument>, <argument><expr><name>sqlcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* this contains some quick hacks, needs to be cleaned up, but it works */</comment>
<function><type><name>bool</name></type>
<name>ECPGconnect</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>passwd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>connection_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>autocommit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sqlca_t</name></name> <modifier>*</modifier></type><name>sqlca</name> <init>= <expr><call><name>ECPGget_sqlca</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>enum</name> <name>COMPAT_MODE</name></name></type> <name>compat</name> <init>= <expr><name>c</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type><name>this</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>connect_params</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>dbname</name> <init>= <expr><ternary><condition><expr><name>name</name></expr> ?</condition><then> <expr><call><name>ecpg_strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>host</name> <init>= <expr><name>NULL</name></expr></init></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>port</name> <init>= <expr><name>NULL</name></expr></init></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>realname</name> <init>= <expr><name>NULL</name></expr></init></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>options</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>conn_keywords</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>conn_values</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>sqlca</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_OUT_OF_MEMORY</name></expr></argument>,
				   <argument><expr><name>ECPG_SQLSTATE_ECPG_OUT_OF_MEMORY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ecpg_init_sqlca</name><argument_list>(<argument><expr><name>sqlca</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * clear auto_mem structure because some error handling functions might
	 * access it
	 */</comment>
	<expr_stmt><expr><call><name>ecpg_clear_auto_mem</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>INFORMIX_MODE</name><argument_list>(<argument><expr><name>compat</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>envname</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * Informix uses an environment variable DBPATH that overrides the
		 * connection parameters given here. We do the same with PG_DBPATH as
		 * the syntax is different.
		 */</comment>
		<expr_stmt><expr><name>envname</name> <operator>=</operator> <call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"PG_DBPATH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>envname</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>dbname</name> <operator>=</operator> <call><name>ecpg_strdup</name><argument_list>(<argument><expr><name>envname</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>dbname</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>connection_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>connection_name</name> <operator>=</operator> <literal type="string">"DEFAULT"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ENABLE_THREAD_SAFETY</name></expr></cpp:if>
	<expr_stmt><expr><call><name>ecpg_pthreads_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* check if the identifier is unique */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>ecpg_get_connection</name><argument_list>(<argument><expr><name>connection_name</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ECPGconnect: connection identifier %s is already in use\n"</literal></expr></argument>,
				 <argument><expr><name>connection_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>this</name> <operator>=</operator> <operator>(</operator>struct <name>connection</name> <operator>*</operator><operator>)</operator> <call><name>ecpg_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>connection</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>dbname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* get the detail information from dbname */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>, <argument><expr><literal type="string">"tcp:"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>, <argument><expr><literal type="string">"unix:"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

			<comment type="block">/*
			 * only allow protocols tcp and unix
			 */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>, <argument><expr><literal type="string">"tcp:"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>, <argument><expr><literal type="string">"unix:"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>dbname</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="string">"postgresql://"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"postgresql://"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>

				<comment type="block">/*------
				 * new style:
				 *	&lt;tcp|unix&gt;:postgresql://server[:port|:/unixsocket/path:]
				 *	[/db-name][?options]
				 *------
				 */</comment>
				<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"postgresql://"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>dbname</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>	<comment type="block">/* options given */</comment>
				<block>{<block_content>
					<expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>ecpg_strdup</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><operator>*</operator><name>tmp</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>last_dir_separator</name><argument_list>(<argument><expr><name>dbname</name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>	<comment type="block">/* database name given */</comment>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <comment type="block">/* non-empty database name */</comment>
					<block>{<block_content>
						<expr_stmt><expr><name>realname</name> <operator>=</operator> <call><name>ecpg_strdup</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>connect_params</name><operator>++</operator></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><operator>*</operator><name>tmp</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>dbname</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>	<comment type="block">/* port number or Unix socket path given */</comment>
				<block>{<block_content>
					<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>tmp2</name></decl>;</decl_stmt>

					<expr_stmt><expr><operator>*</operator><name>tmp</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmp2</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><operator>*</operator><name>tmp2</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name>host</name> <operator>=</operator> <call><name>ecpg_strdup</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>connect_params</name><operator>++</operator></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>, <argument><expr><literal type="string">"unix:"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ECPGconnect: socketname %s given for TCP connection on line %d\n"</literal></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_CONNECT</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_SQLCLIENT_UNABLE_TO_ESTABLISH_SQLCONNECTION</name></expr></argument>, <argument><expr><ternary><condition><expr><name>realname</name></expr> ?</condition><then> <expr><name>realname</name></expr> </then><else>: <expr><call><name>ecpg_gettext</name><argument_list>(<argument><expr><literal type="string">"&lt;DEFAULT&gt;"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<if_stmt><if>if <condition>(<expr><name>host</name></expr>)</condition><block type="pseudo"><block_content>
								<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

							<comment type="block">/*
							 * port not set yet if (port) ecpg_free(port);
							 */</comment>
							<if_stmt><if>if <condition>(<expr><name>options</name></expr>)</condition><block type="pseudo"><block_content>
								<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
							<if_stmt><if>if <condition>(<expr><name>realname</name></expr>)</condition><block type="pseudo"><block_content>
								<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>realname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
							<if_stmt><if>if <condition>(<expr><name>dbname</name></expr>)</condition><block type="pseudo"><block_content>
								<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
							<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<return>return <expr><name>false</name></expr>;</return>
						</block_content>}</block></if></if_stmt>
					</block_content>}</block></if>
					<else>else
					<block>{<block_content>
						<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>ecpg_strdup</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>connect_params</name><operator>++</operator></expr>;</expr_stmt>
					</block_content>}</block></else></if_stmt>
				</block_content>}</block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>, <argument><expr><literal type="string">"unix:"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>dbname</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>dbname</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ECPGconnect: non-localhost access via sockets on line %d\n"</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_CONNECT</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_SQLCLIENT_UNABLE_TO_ESTABLISH_SQLCONNECTION</name></expr></argument>, <argument><expr><ternary><condition><expr><name>realname</name></expr> ?</condition><then> <expr><name>realname</name></expr> </then><else>: <expr><call><name>ecpg_gettext</name><argument_list>(<argument><expr><literal type="string">"&lt;DEFAULT&gt;"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><name>host</name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
						<if_stmt><if>if <condition>(<expr><name>port</name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
						<if_stmt><if>if <condition>(<expr><name>options</name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
						<if_stmt><if>if <condition>(<expr><name>realname</name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>realname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
						<if_stmt><if>if <condition>(<expr><name>dbname</name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
						<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<return>return <expr><name>false</name></expr>;</return>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>dbname</name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name>host</name> <operator>=</operator> <call><name>ecpg_strdup</name><argument_list>(<argument><expr><name>dbname</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>connect_params</name><operator>++</operator></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></else></if_stmt>

			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* old style: dbname[@server][:port] */</comment>
			<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>	<comment type="block">/* port number given */</comment>
			<block>{<block_content>
				<expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>ecpg_strdup</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>connect_params</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>tmp</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>strrchr</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>, <argument><expr><literal type="char">'@'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>	<comment type="block">/* host name given */</comment>
			<block>{<block_content>
				<expr_stmt><expr><name>host</name> <operator>=</operator> <call><name>ecpg_strdup</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>connect_params</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>tmp</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>realname</name> <operator>=</operator> <call><name>ecpg_strdup</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>connect_params</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>realname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>realname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/* add connection to our list */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_THREAD_SAFETY</name></cpp:ifdef>
	<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>connections_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><name>connection_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>ecpg_strdup</name><argument_list>(<argument><expr><name>connection_name</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>ecpg_strdup</name><argument_list>(<argument><expr><name>realname</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>cache_head</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>prep_stmts</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>all_connections</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>all_connections</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>all_connections</name> <operator>=</operator> <name>this</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_THREAD_SAFETY</name></cpp:ifdef>
	<expr_stmt><expr><call><name>pthread_setspecific</name><argument_list>(<argument><expr><name>actual_connection_key</name></expr></argument>, <argument><expr><name>all_connections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>actual_connection</name> <operator>=</operator> <name>all_connections</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ECPGconnect: opening database %s on %s port %s %s%s %s%s\n"</literal></expr></argument>,
			 <argument><expr><ternary><condition><expr><name>realname</name></expr> ?</condition><then> <expr><name>realname</name></expr> </then><else>: <expr><literal type="string">"&lt;DEFAULT&gt;"</literal></expr></else></ternary></expr></argument>,
			 <argument><expr><ternary><condition><expr><name>host</name></expr> ?</condition><then> <expr><name>host</name></expr> </then><else>: <expr><literal type="string">"&lt;DEFAULT&gt;"</literal></expr></else></ternary></expr></argument>,
			 <argument><expr><ternary><condition><expr><name>port</name></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name>ecpg_internal_regression_mode</name></expr> ?</condition><then> <expr><literal type="string">"&lt;REGRESSION_PORT&gt;"</literal></expr> </then><else>: <expr><name>port</name></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><literal type="string">"&lt;DEFAULT&gt;"</literal></expr></else></ternary></expr></argument>,
			 <argument><expr><ternary><condition><expr><name>options</name></expr> ?</condition><then> <expr><literal type="string">"with options "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>options</name></expr> ?</condition><then> <expr><name>options</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
			 <argument><expr><ternary><condition><expr><operator>(</operator><name>user</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"for user "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>user</name></expr> ?</condition><then> <expr><name>user</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>options</name></expr>)</condition><block type="pseudo"><block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<comment type="block">/* count options */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>connect_params</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>user</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>connect_params</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>passwd</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>passwd</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>connect_params</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* allocate enough space for all connection parameters */</comment>
	<expr_stmt><expr><name>conn_keywords</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>ecpg_alloc</name><argument_list>(<argument><expr><operator>(</operator><name>connect_params</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>conn_values</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>ecpg_alloc</name><argument_list>(<argument><expr><name>connect_params</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>conn_keywords</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>conn_values</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>host</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>port</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>options</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>realname</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>realname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>dbname</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>conn_keywords</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>conn_keywords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>conn_values</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>conn_values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>realname</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>conn_keywords</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="string">"dbname"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>conn_values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>realname</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>host</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>conn_keywords</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="string">"host"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>conn_values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>host</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>port</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>conn_keywords</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="string">"port"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>conn_values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>port</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>user</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>conn_keywords</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="string">"user"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>conn_values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>user</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>passwd</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>passwd</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>conn_keywords</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="string">"password"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>conn_values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>passwd</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>options</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

		<comment type="block">/* options look like this "option1 = value1 option2 = value2 ... */</comment>
		<comment type="block">/* we have to break up the string into single options */</comment>
		<for>for <control>(<init><expr><name>str</name> <operator>=</operator> <name>options</name></expr>;</init> <condition><expr><operator>*</operator><name>str</name></expr>;</condition><incr/>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>e</name></decl>,
						<decl><type ref="prev"/><name>a</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>token1</name></decl>,
					   <decl><type ref="prev"><modifier>*</modifier></type><name>token2</name></decl>;</decl_stmt>

			<for>for <control>(<init><expr><name>token1</name> <operator>=</operator> <name>str</name></expr>;</init> <condition><expr><operator>*</operator><name>token1</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>token1</name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>token1</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
			<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>token1</name><index>[<expr><name>e</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>token1</name><index>[<expr><name>e</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'='</literal></expr>;</condition> <incr><expr><name>e</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
			<if_stmt><if>if <condition>(<expr><name><name>token1</name><index>[<expr><name>e</name></expr>]</index></name></expr>)</condition>		<comment type="block">/* found "=" */</comment>
			<block>{<block_content>
				<expr_stmt><expr><name><name>token1</name><index>[<expr><name>e</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
				<for>for <control>(<init><expr><name>token2</name> <operator>=</operator> <name>token1</name> <operator>+</operator> <name>e</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><operator>*</operator><name>token2</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>token2</name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>token2</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
				<for>for <control>(<init><expr><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>token2</name><index>[<expr><name>a</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>token2</name><index>[<expr><name>a</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'&amp;'</literal></expr>;</condition> <incr><expr><name>a</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
				<if_stmt><if>if <condition>(<expr><name><name>token2</name><index>[<expr><name>a</name></expr>]</index></name></expr>)</condition>	<comment type="block">/* found "&amp;" =&gt; another option follows */</comment>
				<block>{<block_content>
					<expr_stmt><expr><name><name>token2</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>str</name> <operator>=</operator> <name>token2</name> <operator>+</operator> <name>a</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>str</name> <operator>=</operator> <name>token2</name> <operator>+</operator> <name>a</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<expr_stmt><expr><name><name>conn_keywords</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>token1</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>conn_values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>token2</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<comment type="block">/* the parser should not be able to create this invalid option */</comment>
				<expr_stmt><expr><name>str</name> <operator>=</operator> <name>token1</name> <operator>+</operator> <name>e</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></for>

	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>conn_keywords</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>	<comment type="block">/* terminator */</comment>

	<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>connection</name></name> <operator>=</operator> <call><name>PQconnectdbParams</name><argument_list>(<argument><expr><name>conn_keywords</name></expr></argument>, <argument><expr><name>conn_values</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>host</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>port</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>options</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>dbname</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>dbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>conn_values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>conn_keywords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PQstatus</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CONNECTION_BAD</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errmsg</name> <init>= <expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><ternary><condition><expr><name>realname</name></expr> ?</condition><then> <expr><name>realname</name></expr> </then><else>: <expr><call><name>ecpg_gettext</name><argument_list>(<argument><expr><literal type="string">"&lt;DEFAULT&gt;"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>ecpg_log</name><argument_list>(<argument><expr><literal type="string">"ECPGconnect: could not open database: %s\n"</literal></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ecpg_finish</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_THREAD_SAFETY</name></cpp:ifdef>
		<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>connections_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_CONNECT</name></expr></argument>, <argument><expr><name>ECPG_SQLSTATE_SQLCLIENT_UNABLE_TO_ESTABLISH_SQLCONNECTION</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>realname</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>realname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>realname</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ecpg_free</name><argument_list>(<argument><expr><name>realname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_THREAD_SAFETY</name></cpp:ifdef>
	<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>connections_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>autocommit</name></name> <operator>=</operator> <name>autocommit</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PQsetNoticeReceiver</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ECPGnoticeReceiver</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ECPGdisconnect</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>connection_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sqlca_t</name></name> <modifier>*</modifier></type><name>sqlca</name> <init>= <expr><call><name>ECPGget_sqlca</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type><name>con</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>sqlca</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ecpg_raise</name><argument_list>(<argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>ECPG_OUT_OF_MEMORY</name></expr></argument>,
				   <argument><expr><name>ECPG_SQLSTATE_ECPG_OUT_OF_MEMORY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_THREAD_SAFETY</name></cpp:ifdef>
	<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>connections_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>connection_name</name></expr></argument>, <argument><expr><literal type="string">"ALL"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ecpg_init_sqlca</name><argument_list>(<argument><expr><name>sqlca</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>con</name> <operator>=</operator> <name>all_connections</name></expr>;</init> <condition><expr><name>con</name></expr>;</condition><incr/>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>con</name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name>con</name> <operator>=</operator> <name><name>con</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ecpg_finish</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>con</name> <operator>=</operator> <call><name>ecpg_get_connection_nr</name><argument_list>(<argument><expr><name>connection_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ecpg_init</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>connection_name</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_THREAD_SAFETY</name></cpp:ifdef>
			<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>connections_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ecpg_finish</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></else></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ENABLE_THREAD_SAFETY</name></cpp:ifdef>
	<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>connections_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>PGconn</name> <modifier>*</modifier></type>
<name>ECPGget_PGconn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>connection_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>connection</name></name> <modifier>*</modifier></type><name>con</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>con</name> <operator>=</operator> <call><name>ecpg_get_connection</name><argument_list>(<argument><expr><name>connection_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>con</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name><name>con</name><operator>-&gt;</operator><name>connection</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
