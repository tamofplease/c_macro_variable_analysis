<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/interfaces/ecpg/preproc/ecpg_keywords.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * ecpg_keywords.c
 *	  lexical token lookup for reserved words in postgres embedded SQL
 *
 * IDENTIFICATION
 *	  src/interfaces/ecpg/preproc/ecpg_keywords.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"preproc.h"</cpp:file></cpp:include>

<comment type="block">/*
 * List of (keyword-name, keyword-token-value) pairs.
 *
 * !!WARNING!!: This list must be sorted, because binary
 *		 search is used to locate entries.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ScanKeyword</name></type> <name><name>ECPGScanKeywords</name><index>[]</index></name> <init>= <expr><block>{
	<comment type="block">/* name, value, category */</comment>

	<comment type="block">/*
	 * category is not needed in ecpg, it is only here so we can share the
	 * data structure with the backend
	 */</comment>
	<expr><block>{<expr><literal type="string">"allocate"</literal></expr>, <expr><name>SQL_ALLOCATE</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"autocommit"</literal></expr>, <expr><name>SQL_AUTOCOMMIT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"bool"</literal></expr>, <expr><name>SQL_BOOL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"break"</literal></expr>, <expr><name>SQL_BREAK</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"cardinality"</literal></expr>, <expr><name>SQL_CARDINALITY</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"connect"</literal></expr>, <expr><name>SQL_CONNECT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"count"</literal></expr>, <expr><name>SQL_COUNT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"datetime_interval_code"</literal></expr>, <expr><name>SQL_DATETIME_INTERVAL_CODE</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"datetime_interval_precision"</literal></expr>, <expr><name>SQL_DATETIME_INTERVAL_PRECISION</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"describe"</literal></expr>, <expr><name>SQL_DESCRIBE</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"descriptor"</literal></expr>, <expr><name>SQL_DESCRIPTOR</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"disconnect"</literal></expr>, <expr><name>SQL_DISCONNECT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"found"</literal></expr>, <expr><name>SQL_FOUND</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"free"</literal></expr>, <expr><name>SQL_FREE</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"get"</literal></expr>, <expr><name>SQL_GET</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"go"</literal></expr>, <expr><name>SQL_GO</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"goto"</literal></expr>, <expr><name>SQL_GOTO</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"identified"</literal></expr>, <expr><name>SQL_IDENTIFIED</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"indicator"</literal></expr>, <expr><name>SQL_INDICATOR</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"key_member"</literal></expr>, <expr><name>SQL_KEY_MEMBER</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"length"</literal></expr>, <expr><name>SQL_LENGTH</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"long"</literal></expr>, <expr><name>SQL_LONG</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"nullable"</literal></expr>, <expr><name>SQL_NULLABLE</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"octet_length"</literal></expr>, <expr><name>SQL_OCTET_LENGTH</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"open"</literal></expr>, <expr><name>SQL_OPEN</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"output"</literal></expr>, <expr><name>SQL_OUTPUT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"reference"</literal></expr>, <expr><name>SQL_REFERENCE</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"returned_length"</literal></expr>, <expr><name>SQL_RETURNED_LENGTH</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"returned_octet_length"</literal></expr>, <expr><name>SQL_RETURNED_OCTET_LENGTH</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"scale"</literal></expr>, <expr><name>SQL_SCALE</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"section"</literal></expr>, <expr><name>SQL_SECTION</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"short"</literal></expr>, <expr><name>SQL_SHORT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"signed"</literal></expr>, <expr><name>SQL_SIGNED</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"sqlerror"</literal></expr>, <expr><name>SQL_SQLERROR</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"sqlprint"</literal></expr>, <expr><name>SQL_SQLPRINT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"sqlwarning"</literal></expr>, <expr><name>SQL_SQLWARNING</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"stop"</literal></expr>, <expr><name>SQL_STOP</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"struct"</literal></expr>, <expr><name>SQL_STRUCT</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"unsigned"</literal></expr>, <expr><name>SQL_UNSIGNED</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"var"</literal></expr>, <expr><name>SQL_VAR</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"whenever"</literal></expr>, <expr><name>SQL_WHENEVER</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * ScanECPGKeywordLookup - see if a given word is a keyword
 *
 * Returns a pointer to the ScanKeyword table entry, or NULL if no match.
 * Keywords are matched using the same case-folding rules as in the backend.
 */</comment>
<function><type><specifier>const</specifier> <name>ScanKeyword</name> <modifier>*</modifier></type>
<name>ScanECPGKeywordLookup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ScanKeyword</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

	<comment type="block">/* First check SQL symbols defined by the backend. */</comment>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ScanKeywordLookup</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>SQLScanKeywords</name></expr></argument>, <argument><expr><name>NumSQLScanKeywords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Try ECPG-specific keywords. */</comment>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ScanKeywordLookup</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>ECPGScanKeywords</name></expr></argument>, <argument><expr><call><name>lengthof</name><argument_list>(<argument><expr><name>ECPGScanKeywords</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
