<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/interfaces/ecpg/pgtypeslib/timestamp.c"><comment type="block">/*
 * src/interfaces/ecpg/pgtypeslib/timestamp.c
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__FAST_MATH__</name></cpp:ifdef>
<cpp:error>#<cpp:directive>error</cpp:directive> -ffast-math is known to break this code</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgtypes_timestamp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgtypes_date.h"</cpp:file></cpp:include>


<function><type><specifier>static</specifier> <name>int64</name></type>
<name>time2t</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>hour</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>fsec_t</name></type> <name>fsec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>hour</name> <operator>*</operator> <name>MINS_PER_HOUR</name><operator>)</operator> <operator>+</operator> <name>min</name><operator>)</operator> <operator>*</operator> <name>SECS_PER_MINUTE</name><operator>)</operator> <operator>+</operator> <name>sec</name><operator>)</operator> <operator>*</operator> <name>USECS_PER_SEC</name><operator>)</operator> <operator>+</operator> <name>fsec</name></expr>;</return>
</block_content>}</block></function>								<comment type="block">/* time2t() */</comment>

<function><type><specifier>static</specifier> <name>timestamp</name></type>
<name>dt2local</name><parameter_list>(<parameter><decl><type><name>timestamp</name></type> <name>dt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>dt</name> <operator>-=</operator> <operator>(</operator><name>tz</name> <operator>*</operator> <name>USECS_PER_SEC</name><operator>)</operator></expr>;</expr_stmt>
	<return>return <expr><name>dt</name></expr>;</return>
</block_content>}</block></function>								<comment type="block">/* dt2local() */</comment>

<comment type="block">/* tm2timestamp()
 * Convert a tm structure to a timestamp data type.
 * Note that year is _not_ 1900-based, but is an explicit full value.
 * Also, month is one-based, _not_ zero-based.
 *
 * Returns -1 on failure (overflow).
 */</comment>
<function><type><name>int</name></type>
<name>tm2timestamp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>, <parameter><decl><type><name>fsec_t</name></type> <name>fsec</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>tzp</name></decl></parameter>, <parameter><decl><type><name>timestamp</name> <modifier>*</modifier></type> <name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>dDate</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type>		<name>time</name></decl>;</decl_stmt>

	<comment type="block">/* Prevent overflow in Julian-day routines */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_VALID_JULIAN</name><argument_list>(<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>dDate</name> <operator>=</operator> <call><name>date2j</name><argument_list>(<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>date2j</name><argument_list>(<argument><expr><literal type="number">2000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>time</name> <operator>=</operator> <call><name>time2t</name><argument_list>(<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name></expr></argument>, <argument><expr><name>fsec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <operator>(</operator><name>dDate</name> <operator>*</operator> <name>USECS_PER_DAY</name><operator>)</operator> <operator>+</operator> <name>time</name></expr>;</expr_stmt>
	<comment type="block">/* check for major overflow */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>result</name> <operator>-</operator> <name>time</name><operator>)</operator> <operator>/</operator> <name>USECS_PER_DAY</name> <operator>!=</operator> <name>dDate</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<comment type="block">/* check for just-barely overflow (okay except time-of-day wraps) */</comment>
	<comment type="block">/* caution: we want to allow 1999-12-31 24:00:00 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name><name>result</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>dDate</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
		<operator>(</operator><operator>*</operator><name>result</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>dDate</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>tzp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <call><name>dt2local</name><argument_list>(<argument><expr><operator>*</operator><name>result</name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><operator>*</operator><name>tzp</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* final range check catches just-out-of-range timestamps */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_VALID_TIMESTAMP</name><argument_list>(<argument><expr><operator>*</operator><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>								<comment type="block">/* tm2timestamp() */</comment>

<function><type><specifier>static</specifier> <name>timestamp</name></type>
<name>SetEpochTimestamp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int64</name></type>		<name>noresult</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>timestamp</name></type>	<name>dt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type>	<name>tt</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>tm</name> <init>= <expr><operator>&amp;</operator><name>tt</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>GetEpochTime</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>noresult</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>tm2timestamp</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>dt</name></expr>;</return>
</block_content>}</block></function>								<comment type="block">/* SetEpochTimestamp() */</comment>

<comment type="block">/* timestamp2tm()
 * Convert timestamp data type to POSIX time structure.
 * Note that year is _not_ 1900-based, but is an explicit full value.
 * Also, month is one-based, _not_ zero-based.
 * Returns:
 *	 0 on success
 *	-1 on out of range
 *
 * For dates within the system-supported time_t range, convert to the
 *	local time zone. If out of this range, leave as GMT. - tgl 97/05/27
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>timestamp2tm</name><parameter_list>(<parameter><decl><type><name>timestamp</name></type> <name>dt</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>tzp</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>, <parameter><decl><type><name>fsec_t</name> <modifier>*</modifier></type><name>fsec</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>tzn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int64</name></type>		<name>dDate</name></decl>,
				<decl><type ref="prev"/><name>date0</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type>		<name>time</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TM_ZONE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_INT_TIMEZONE</name></expr></argument>)</argument_list></call></expr></cpp:if>
	<decl_stmt><decl><type><name>time_t</name></type>		<name>utime</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name>  <modifier>*</modifier></type><name>tx</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>date0</name> <operator>=</operator> <call><name>date2j</name><argument_list>(<argument><expr><literal type="number">2000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>time</name> <operator>=</operator> <name>dt</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TMODULO</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>dDate</name></expr></argument>, <argument><expr><name>USECS_PER_DAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>time</name> <operator>&lt;</operator> <call><name>INT64CONST</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>time</name> <operator>+=</operator> <name>USECS_PER_DAY</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>dDate</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* add offset to go from J2000 back to standard Julian date */</comment>
	<expr_stmt><expr><name>dDate</name> <operator>+=</operator> <name>date0</name></expr>;</expr_stmt>

	<comment type="block">/* Julian day routine does not work for negative Julian days */</comment>
	<if_stmt><if>if <condition>(<expr><macro><name>dDate</name></macro> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>dDate</name> <operator>&gt;</operator> <operator>(</operator><name>timestamp</name><operator>)</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>j2date</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>dDate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dt2time</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name></expr></argument>, <argument><expr><name>fsec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>tzp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Does this fall within the capabilities of the localtime()
		 * interface? Then use this to rotate to the local time zone.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>IS_VALID_UTIME</name><argument_list>(<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TM_ZONE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_INT_TIMEZONE</name></expr></argument>)</argument_list></call></expr></cpp:if>

			<expr_stmt><expr><name>utime</name> <operator>=</operator> <name>dt</name> <operator>/</operator> <name>USECS_PER_SEC</name> <operator>+</operator>
				<operator>(</operator><operator>(</operator><name>date0</name> <operator>-</operator> <call><name>date2j</name><argument_list>(<argument><expr><literal type="number">1970</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <call><name>INT64CONST</name><argument_list>(<argument><expr><literal type="number">86400</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

			<expr_stmt><expr><name>tx</name> <operator>=</operator> <call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>utime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>=</operator> <name><name>tx</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>=</operator> <name><name>tx</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>=</operator> <name><name>tx</name><operator>-&gt;</operator><name>tm_mday</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>=</operator> <name><name>tx</name><operator>-&gt;</operator><name>tm_hour</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>=</operator> <name><name>tx</name><operator>-&gt;</operator><name>tm_min</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_isdst</name></name> <operator>=</operator> <name><name>tx</name><operator>-&gt;</operator><name>tm_isdst</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TM_ZONE</name></expr></argument>)</argument_list></call></expr></cpp:if>
			<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_gmtoff</name></name> <operator>=</operator> <name><name>tx</name><operator>-&gt;</operator><name>tm_gmtoff</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_zone</name></name> <operator>=</operator> <name><name>tx</name><operator>-&gt;</operator><name>tm_zone</name></name></expr>;</expr_stmt>

			<expr_stmt><expr><operator>*</operator><name>tzp</name> <operator>=</operator> <operator>-</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_gmtoff</name></name></expr>;</expr_stmt>	<comment type="block">/* tm_gmtoff is Sun/DEC-ism */</comment>
			<if_stmt><if>if <condition>(<expr><name>tzn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>tzn</name> <operator>=</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_zone</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_INT_TIMEZONE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
			<expr_stmt><expr><operator>*</operator><name>tzp</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_isdst</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>TIMEZONE_GLOBAL</name> <operator>-</operator> <name>SECS_PER_HOUR</name></expr> </then><else>: <expr><name>TIMEZONE_GLOBAL</name></expr></else></ternary></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>tzn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>tzn</name> <operator>=</operator> <name><name>TZNAME_GLOBAL</name><index>[<expr><operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_isdst</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>							<comment type="block">/* not (HAVE_TM_ZONE || HAVE_INT_TIMEZONE) */</comment>
			<expr_stmt><expr><operator>*</operator><name>tzp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<comment type="block">/* Mark this as *no* time zone available */</comment>
			<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_isdst</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>tzn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>tzn</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>tzp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<comment type="block">/* Mark this as *no* time zone available */</comment>
			<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_isdst</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>tzn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>tzn</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_isdst</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>tzn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>tzn</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_yday</name></name> <operator>=</operator> <name>dDate</name> <operator>-</operator> <call><name>date2j</name><argument_list>(<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>								<comment type="block">/* timestamp2tm() */</comment>

<comment type="block">/* EncodeSpecialTimestamp()
 *	* Convert reserved timestamp data type to string.
 *	 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>EncodeSpecialTimestamp</name><parameter_list>(<parameter><decl><type><name>timestamp</name></type> <name>dt</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>TIMESTAMP_IS_NOBEGIN</name><argument_list>(<argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>EARLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>TIMESTAMP_IS_NOEND</name><argument_list>(<argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>LATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>				<comment type="block">/* shouldn't happen */</comment>
</block_content>}</block></function>

<function><type><name>timestamp</name></type>
<name>PGTYPEStimestamp_from_asc</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>endptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>timestamp</name></type>	<name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type>		<name>noresult</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fsec_t</name></type>		<name>fsec</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type>	<name>tt</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>tm</name> <init>= <expr><operator>&amp;</operator><name>tt</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>dtype</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name><name>field</name><index>[<expr><name>MAXDATEFIELDS</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name><name>ftype</name><index>[<expr><name>MAXDATEFIELDS</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>lowstr</name><index>[<expr><name>MAXDATELEN</name> <operator>+</operator> <name>MAXDATEFIELDS</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>realptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	  <modifier>*</modifier><modifier>*</modifier></type><name>ptr</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>endptr</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>endptr</name></expr> </then><else>: <expr><operator>&amp;</operator><name>realptr</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>MAXDATELEN</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>PGTYPES_TS_BAD_TIMESTAMP</name></expr>;</expr_stmt>
		<return>return <expr><name>noresult</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ParseDateTime</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>lowstr</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>ftype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nf</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
		<call><name>DecodeDateTime</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>ftype</name></expr></argument>, <argument><expr><name>nf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dtype</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fsec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>PGTYPES_TS_BAD_TIMESTAMP</name></expr>;</expr_stmt>
		<return>return <expr><name>noresult</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<switch>switch <condition>(<expr><name>dtype</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>DTK_DATE</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><call><name>tm2timestamp</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>fsec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>PGTYPES_TS_BAD_TIMESTAMP</name></expr>;</expr_stmt>
				<return>return <expr><name>noresult</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>

		<case>case <expr><name>DTK_EPOCH</name></expr>:</case>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>SetEpochTimestamp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>DTK_LATE</name></expr>:</case>
			<expr_stmt><expr><call><name>TIMESTAMP_NOEND</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>DTK_EARLY</name></expr>:</case>
			<expr_stmt><expr><call><name>TIMESTAMP_NOBEGIN</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>DTK_INVALID</name></expr>:</case>
			<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>PGTYPES_TS_BAD_TIMESTAMP</name></expr>;</expr_stmt>
			<return>return <expr><name>noresult</name></expr>;</return>

		<default>default:</default>
			<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>PGTYPES_TS_BAD_TIMESTAMP</name></expr>;</expr_stmt>
			<return>return <expr><name>noresult</name></expr>;</return>
	</block_content>}</block></switch>

	<comment type="block">/* AdjustTimestampForTypmod(&amp;result, typmod); */</comment>

	<comment type="block">/*
	 * Since it's difficult to test for noresult, make sure errno is 0 if no
	 * error occurred.
	 */</comment>
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>PGTYPEStimestamp_to_asc</name><parameter_list>(<parameter><decl><type><name>timestamp</name></type> <name>tstamp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type>	<name>tt</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>tm</name> <init>= <expr><operator>&amp;</operator><name>tt</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>buf</name><index>[<expr><name>MAXDATELEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fsec_t</name></type>		<name>fsec</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>DateStyle</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>	<comment type="block">/* this defaults to USE_ISO_DATES, shall we
								 * make it an option? */</comment>

	<if_stmt><if>if <condition>(<expr><call><name>TIMESTAMP_NOT_FINITE</name><argument_list>(<argument><expr><name>tstamp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>EncodeSpecialTimestamp</name><argument_list>(<argument><expr><name>tstamp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>timestamp2tm</name><argument_list>(<argument><expr><name>tstamp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fsec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>EncodeDateTime</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>fsec</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DateStyle</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>PGTYPES_TS_BAD_TIMESTAMP</name></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><call><name>pgtypes_strdup</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>PGTYPEStimestamp_current</name><parameter_list>(<parameter><decl><type><name>timestamp</name> <modifier>*</modifier></type> <name>ts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type>	<name>tm</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>GetCurrentDateTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>tm2timestamp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dttofmtasc_replace</name><parameter_list>(<parameter><decl><type><name>timestamp</name> <modifier>*</modifier></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>date</name></type> <name>dDate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dow</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>,
				   <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pstr_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmtstr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>union</name> <name>un_fmt_comb</name></name></type> <name>replace_val</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>replace_type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>fmtstr</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>q</name> <init>= <expr><name>output</name></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
			<comment type="block">/* fix compiler warning */</comment>
			<expr_stmt><expr><name>replace_type</name> <operator>=</operator> <name>PGTYPES_TYPE_NOTHING</name></expr>;</expr_stmt>
			<switch>switch <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition>
			<block>{<block_content>
					<comment type="block">/* the abbreviated name of the day in the week */</comment>
					<comment type="block">/* XXX should be locale aware */</comment>
				<case>case <expr><literal type="char">'a'</literal></expr>:</case>
					<expr_stmt><expr><name><name>replace_val</name><operator>.</operator><name>str_val</name></name> <operator>=</operator> <name><name>pgtypes_date_weekdays_short</name><index>[<expr><name>dow</name></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>replace_type</name> <operator>=</operator> <name>PGTYPES_TYPE_STRING_CONSTANT</name></expr>;</expr_stmt>
					<break>break;</break>
					<comment type="block">/* the full name of the day in the week */</comment>
					<comment type="block">/* XXX should be locale aware */</comment>
				<case>case <expr><literal type="char">'A'</literal></expr>:</case>
					<expr_stmt><expr><name><name>replace_val</name><operator>.</operator><name>str_val</name></name> <operator>=</operator> <name><name>days</name><index>[<expr><name>dow</name></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>replace_type</name> <operator>=</operator> <name>PGTYPES_TYPE_STRING_CONSTANT</name></expr>;</expr_stmt>
					<break>break;</break>
					<comment type="block">/* the abbreviated name of the month */</comment>
					<comment type="block">/* XXX should be locale aware */</comment>
				<case>case <expr><literal type="char">'b'</literal></expr>:</case>
				<case>case <expr><literal type="char">'h'</literal></expr>:</case>
					<expr_stmt><expr><name><name>replace_val</name><operator>.</operator><name>str_val</name></name> <operator>=</operator> <name><name>months</name><index>[<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>replace_type</name> <operator>=</operator> <name>PGTYPES_TYPE_STRING_CONSTANT</name></expr>;</expr_stmt>
					<break>break;</break>
					<comment type="block">/* the full name of the month */</comment>
					<comment type="block">/* XXX should be locale aware */</comment>
				<case>case <expr><literal type="char">'B'</literal></expr>:</case>
					<expr_stmt><expr><name><name>replace_val</name><operator>.</operator><name>str_val</name></name> <operator>=</operator> <name><name>pgtypes_date_months</name><index>[<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>replace_type</name> <operator>=</operator> <name>PGTYPES_TYPE_STRING_CONSTANT</name></expr>;</expr_stmt>
					<break>break;</break>

					<comment type="block">/*
					 * The	preferred  date  and  time	representation	for
					 * the current locale.
					 */</comment>
				<case>case <expr><literal type="char">'c'</literal></expr>:</case>
					<comment type="block">/* XXX */</comment>
					<break>break;</break>
					<comment type="block">/* the century number with leading zeroes */</comment>
				<case>case <expr><literal type="char">'C'</literal></expr>:</case>
					<expr_stmt><expr><name><name>replace_val</name><operator>.</operator><name>uint_val</name></name> <operator>=</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>replace_type</name> <operator>=</operator> <name>PGTYPES_TYPE_UINT_2_LZ</name></expr>;</expr_stmt>
					<break>break;</break>
					<comment type="block">/* day with leading zeroes (01 - 31) */</comment>
				<case>case <expr><literal type="char">'d'</literal></expr>:</case>
					<expr_stmt><expr><name><name>replace_val</name><operator>.</operator><name>uint_val</name></name> <operator>=</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>replace_type</name> <operator>=</operator> <name>PGTYPES_TYPE_UINT_2_LZ</name></expr>;</expr_stmt>
					<break>break;</break>
					<comment type="block">/* the date in the format mm/dd/yy */</comment>
				<case>case <expr><literal type="char">'D'</literal></expr>:</case>

					<comment type="block">/*
					 * ts, dDate, dow, tm is information about the timestamp
					 *
					 * q is the start of the current output buffer
					 *
					 * pstr_len is a pointer to the remaining size of output,
					 * i.e. the size of q
					 */</comment>
					<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>dttofmtasc_replace</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>dDate</name></expr></argument>, <argument><expr><name>dow</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>,
										   <argument><expr><name>q</name></expr></argument>, <argument><expr><name>pstr_len</name></expr></argument>,
										   <argument><expr><literal type="string">"%m/%d/%y"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition><block type="pseudo"><block_content>
						<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
					<break>break;</break>
					<comment type="block">/* day with leading spaces (01 - 31) */</comment>
				<case>case <expr><literal type="char">'e'</literal></expr>:</case>
					<expr_stmt><expr><name><name>replace_val</name><operator>.</operator><name>uint_val</name></name> <operator>=</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>replace_type</name> <operator>=</operator> <name>PGTYPES_TYPE_UINT_2_LS</name></expr>;</expr_stmt>
					<break>break;</break>

					<comment type="block">/*
					 * alternative format modifier
					 */</comment>
				<case>case <expr><literal type="char">'E'</literal></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><name>char</name></type>		<name><name>tmp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><literal type="string">"%Ex"</literal></expr></init></decl>;</decl_stmt>

						<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
							<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
						<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

						<comment type="block">/*
						 * strftime's month is 0 based, ours is 1 based
						 */</comment>
						<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>strftime</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>*</operator><name>pstr_len</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
							<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
						<while>while <condition>(<expr><operator>*</operator><name>q</name></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>
							<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pstr_len</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>
						</block_content>}</block></while>
						<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name>replace_type</name> <operator>=</operator> <name>PGTYPES_TYPE_NOTHING</name></expr>;</expr_stmt>
						<break>break;</break>
					</block_content>}</block>

					<comment type="block">/*
					 * The ISO 8601 year with century as a decimal number. The
					 * 4-digit year corresponding to the ISO week number.
					 */</comment>
				<case>case <expr><literal type="char">'G'</literal></expr>:</case>
					<block>{<block_content>
						<comment type="block">/* Keep compiler quiet - Don't use a literal format */</comment>
						<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><literal type="string">"%G"</literal></expr></init></decl>;</decl_stmt>

						<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>strftime</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>*</operator><name>pstr_len</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
							<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
						<while>while <condition>(<expr><operator>*</operator><name>q</name></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>
							<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pstr_len</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>
						</block_content>}</block></while>
						<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name>replace_type</name> <operator>=</operator> <name>PGTYPES_TYPE_NOTHING</name></expr>;</expr_stmt>
					</block_content>}</block>
					<break>break;</break>

					<comment type="block">/*
					 * Like %G, but without century, i.e., with a 2-digit year
					 * (00-99).
					 */</comment>
				<case>case <expr><literal type="char">'g'</literal></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><literal type="string">"%g"</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* Keep compiler quiet about
												 * 2-digit year */</comment>

						<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>strftime</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>*</operator><name>pstr_len</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
							<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
						<while>while <condition>(<expr><operator>*</operator><name>q</name></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>
							<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pstr_len</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>
						</block_content>}</block></while>
						<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name>replace_type</name> <operator>=</operator> <name>PGTYPES_TYPE_NOTHING</name></expr>;</expr_stmt>
					</block_content>}</block>
					<break>break;</break>
					<comment type="block">/* hour (24 hour clock) with leading zeroes */</comment>
				<case>case <expr><literal type="char">'H'</literal></expr>:</case>
					<expr_stmt><expr><name><name>replace_val</name><operator>.</operator><name>uint_val</name></name> <operator>=</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>replace_type</name> <operator>=</operator> <name>PGTYPES_TYPE_UINT_2_LZ</name></expr>;</expr_stmt>
					<break>break;</break>
					<comment type="block">/* hour (12 hour clock) with leading zeroes */</comment>
				<case>case <expr><literal type="char">'I'</literal></expr>:</case>
					<expr_stmt><expr><name><name>replace_val</name><operator>.</operator><name>uint_val</name></name> <operator>=</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>%</operator> <literal type="number">12</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>replace_type</name> <operator>=</operator> <name>PGTYPES_TYPE_UINT_2_LZ</name></expr>;</expr_stmt>
					<break>break;</break>

					<comment type="block">/*
					 * The day of the year as a decimal number with leading
					 * zeroes. It ranges from 001 to 366.
					 */</comment>
				<case>case <expr><literal type="char">'j'</literal></expr>:</case>
					<expr_stmt><expr><name><name>replace_val</name><operator>.</operator><name>uint_val</name></name> <operator>=</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_yday</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>replace_type</name> <operator>=</operator> <name>PGTYPES_TYPE_UINT_3_LZ</name></expr>;</expr_stmt>
					<break>break;</break>

					<comment type="block">/*
					 * The hour (24 hour clock). Leading zeroes will be turned
					 * into spaces.
					 */</comment>
				<case>case <expr><literal type="char">'k'</literal></expr>:</case>
					<expr_stmt><expr><name><name>replace_val</name><operator>.</operator><name>uint_val</name></name> <operator>=</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>replace_type</name> <operator>=</operator> <name>PGTYPES_TYPE_UINT_2_LS</name></expr>;</expr_stmt>
					<break>break;</break>

					<comment type="block">/*
					 * The hour (12 hour clock). Leading zeroes will be turned
					 * into spaces.
					 */</comment>
				<case>case <expr><literal type="char">'l'</literal></expr>:</case>
					<expr_stmt><expr><name><name>replace_val</name><operator>.</operator><name>uint_val</name></name> <operator>=</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>%</operator> <literal type="number">12</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>replace_type</name> <operator>=</operator> <name>PGTYPES_TYPE_UINT_2_LS</name></expr>;</expr_stmt>
					<break>break;</break>
					<comment type="block">/* The month as a decimal number with a leading zero */</comment>
				<case>case <expr><literal type="char">'m'</literal></expr>:</case>
					<expr_stmt><expr><name><name>replace_val</name><operator>.</operator><name>uint_val</name></name> <operator>=</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>replace_type</name> <operator>=</operator> <name>PGTYPES_TYPE_UINT_2_LZ</name></expr>;</expr_stmt>
					<break>break;</break>
					<comment type="block">/* The minute as a decimal number with a leading zero */</comment>
				<case>case <expr><literal type="char">'M'</literal></expr>:</case>
					<expr_stmt><expr><name><name>replace_val</name><operator>.</operator><name>uint_val</name></name> <operator>=</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>replace_type</name> <operator>=</operator> <name>PGTYPES_TYPE_UINT_2_LZ</name></expr>;</expr_stmt>
					<break>break;</break>
					<comment type="block">/* A newline character */</comment>
				<case>case <expr><literal type="char">'n'</literal></expr>:</case>
					<expr_stmt><expr><name><name>replace_val</name><operator>.</operator><name>char_val</name></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>replace_type</name> <operator>=</operator> <name>PGTYPES_TYPE_CHAR</name></expr>;</expr_stmt>
					<break>break;</break>
					<comment type="block">/* the AM/PM specifier (uppercase) */</comment>
					<comment type="block">/* XXX should be locale aware */</comment>
				<case>case <expr><literal type="char">'p'</literal></expr>:</case>
					<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name><name>replace_val</name><operator>.</operator><name>str_val</name></name> <operator>=</operator> <literal type="string">"AM"</literal></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><name><name>replace_val</name><operator>.</operator><name>str_val</name></name> <operator>=</operator> <literal type="string">"PM"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
					<expr_stmt><expr><name>replace_type</name> <operator>=</operator> <name>PGTYPES_TYPE_STRING_CONSTANT</name></expr>;</expr_stmt>
					<break>break;</break>
					<comment type="block">/* the AM/PM specifier (lowercase) */</comment>
					<comment type="block">/* XXX should be locale aware */</comment>
				<case>case <expr><literal type="char">'P'</literal></expr>:</case>
					<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name><name>replace_val</name><operator>.</operator><name>str_val</name></name> <operator>=</operator> <literal type="string">"am"</literal></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><name><name>replace_val</name><operator>.</operator><name>str_val</name></name> <operator>=</operator> <literal type="string">"pm"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
					<expr_stmt><expr><name>replace_type</name> <operator>=</operator> <name>PGTYPES_TYPE_STRING_CONSTANT</name></expr>;</expr_stmt>
					<break>break;</break>
					<comment type="block">/* the time in the format %I:%M:%S %p */</comment>
					<comment type="block">/* XXX should be locale aware */</comment>
				<case>case <expr><literal type="char">'r'</literal></expr>:</case>
					<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>dttofmtasc_replace</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>dDate</name></expr></argument>, <argument><expr><name>dow</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>,
										   <argument><expr><name>q</name></expr></argument>, <argument><expr><name>pstr_len</name></expr></argument>,
										   <argument><expr><literal type="string">"%I:%M:%S %p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition><block type="pseudo"><block_content>
						<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
					<break>break;</break>
					<comment type="block">/* The time in 24 hour notation (%H:%M) */</comment>
				<case>case <expr><literal type="char">'R'</literal></expr>:</case>
					<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>dttofmtasc_replace</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>dDate</name></expr></argument>, <argument><expr><name>dow</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>,
										   <argument><expr><name>q</name></expr></argument>, <argument><expr><name>pstr_len</name></expr></argument>,
										   <argument><expr><literal type="string">"%H:%M"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition><block type="pseudo"><block_content>
						<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
					<break>break;</break>
					<comment type="block">/* The number of seconds since the Epoch (1970-01-01) */</comment>
				<case>case <expr><literal type="char">'s'</literal></expr>:</case>
					<expr_stmt><expr><name><name>replace_val</name><operator>.</operator><name>int64_val</name></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>ts</name> <operator>-</operator> <call><name>SetEpochTimestamp</name><argument_list>()</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">1000000.0</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>replace_type</name> <operator>=</operator> <name>PGTYPES_TYPE_INT64</name></expr>;</expr_stmt>
					<break>break;</break>
					<comment type="block">/* seconds as a decimal number with leading zeroes */</comment>
				<case>case <expr><literal type="char">'S'</literal></expr>:</case>
					<expr_stmt><expr><name><name>replace_val</name><operator>.</operator><name>uint_val</name></name> <operator>=</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>replace_type</name> <operator>=</operator> <name>PGTYPES_TYPE_UINT_2_LZ</name></expr>;</expr_stmt>
					<break>break;</break>
					<comment type="block">/* A tabulator */</comment>
				<case>case <expr><literal type="char">'t'</literal></expr>:</case>
					<expr_stmt><expr><name><name>replace_val</name><operator>.</operator><name>char_val</name></name> <operator>=</operator> <literal type="char">'\t'</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>replace_type</name> <operator>=</operator> <name>PGTYPES_TYPE_CHAR</name></expr>;</expr_stmt>
					<break>break;</break>
					<comment type="block">/* The time in 24 hour notation (%H:%M:%S) */</comment>
				<case>case <expr><literal type="char">'T'</literal></expr>:</case>
					<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>dttofmtasc_replace</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>dDate</name></expr></argument>, <argument><expr><name>dow</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>,
										   <argument><expr><name>q</name></expr></argument>, <argument><expr><name>pstr_len</name></expr></argument>,
										   <argument><expr><literal type="string">"%H:%M:%S"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition><block type="pseudo"><block_content>
						<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
					<break>break;</break>

					<comment type="block">/*
					 * The day of the week as a decimal, Monday = 1, Sunday =
					 * 7
					 */</comment>
				<case>case <expr><literal type="char">'u'</literal></expr>:</case>
					<expr_stmt><expr><name><name>replace_val</name><operator>.</operator><name>uint_val</name></name> <operator>=</operator> <name>dow</name></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name><name>replace_val</name><operator>.</operator><name>uint_val</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name><name>replace_val</name><operator>.</operator><name>uint_val</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<expr_stmt><expr><name>replace_type</name> <operator>=</operator> <name>PGTYPES_TYPE_UINT</name></expr>;</expr_stmt>
					<break>break;</break>
					<comment type="block">/* The week number of the year as a decimal number */</comment>
				<case>case <expr><literal type="char">'U'</literal></expr>:</case>
					<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>strftime</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>*</operator><name>pstr_len</name></expr></argument>, <argument><expr><literal type="string">"%U"</literal></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
					<while>while <condition>(<expr><operator>*</operator><name>q</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>
						<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pstr_len</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>
					</block_content>}</block></while>
					<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>replace_type</name> <operator>=</operator> <name>PGTYPES_TYPE_NOTHING</name></expr>;</expr_stmt>
					<break>break;</break>

					<comment type="block">/*
					 * The ISO 8601:1988 week number of the current year as a
					 * decimal number.
					 */</comment>
				<case>case <expr><literal type="char">'V'</literal></expr>:</case>
					<block>{<block_content>
						<comment type="block">/* Keep compiler quiet - Don't use a literal format */</comment>
						<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><literal type="string">"%V"</literal></expr></init></decl>;</decl_stmt>

						<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>strftime</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>*</operator><name>pstr_len</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
							<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
						<while>while <condition>(<expr><operator>*</operator><name>q</name></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>
							<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pstr_len</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>
						</block_content>}</block></while>
						<expr_stmt><expr><name>replace_type</name> <operator>=</operator> <name>PGTYPES_TYPE_NOTHING</name></expr>;</expr_stmt>
					</block_content>}</block>
					<break>break;</break>

					<comment type="block">/*
					 * The day of the week as a decimal, Sunday being 0 and
					 * Monday 1.
					 */</comment>
				<case>case <expr><literal type="char">'w'</literal></expr>:</case>
					<expr_stmt><expr><name><name>replace_val</name><operator>.</operator><name>uint_val</name></name> <operator>=</operator> <name>dow</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>replace_type</name> <operator>=</operator> <name>PGTYPES_TYPE_UINT</name></expr>;</expr_stmt>
					<break>break;</break>
					<comment type="block">/* The week number of the year (another definition) */</comment>
				<case>case <expr><literal type="char">'W'</literal></expr>:</case>
					<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>strftime</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>*</operator><name>pstr_len</name></expr></argument>, <argument><expr><literal type="string">"%U"</literal></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
					<while>while <condition>(<expr><operator>*</operator><name>q</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>
						<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pstr_len</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>
					</block_content>}</block></while>
					<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>replace_type</name> <operator>=</operator> <name>PGTYPES_TYPE_NOTHING</name></expr>;</expr_stmt>
					<break>break;</break>

					<comment type="block">/*
					 * The preferred date representation for the current
					 * locale without the time.
					 */</comment>
				<case>case <expr><literal type="char">'x'</literal></expr>:</case>
					<block>{<block_content>
						<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><literal type="string">"%x"</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* Keep compiler quiet about
												 * 2-digit year */</comment>

						<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>strftime</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>*</operator><name>pstr_len</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
							<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
						<while>while <condition>(<expr><operator>*</operator><name>q</name></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>
							<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pstr_len</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>
						</block_content>}</block></while>
						<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name>replace_type</name> <operator>=</operator> <name>PGTYPES_TYPE_NOTHING</name></expr>;</expr_stmt>
					</block_content>}</block>
					<break>break;</break>

					<comment type="block">/*
					 * The preferred time representation for the current
					 * locale without the date.
					 */</comment>
				<case>case <expr><literal type="char">'X'</literal></expr>:</case>
					<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>strftime</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>*</operator><name>pstr_len</name></expr></argument>, <argument><expr><literal type="string">"%X"</literal></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
					<while>while <condition>(<expr><operator>*</operator><name>q</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>
						<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pstr_len</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>
					</block_content>}</block></while>
					<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>replace_type</name> <operator>=</operator> <name>PGTYPES_TYPE_NOTHING</name></expr>;</expr_stmt>
					<break>break;</break>
					<comment type="block">/* The year without the century (2 digits, leading zeroes) */</comment>
				<case>case <expr><literal type="char">'y'</literal></expr>:</case>
					<expr_stmt><expr><name><name>replace_val</name><operator>.</operator><name>uint_val</name></name> <operator>=</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>%</operator> <literal type="number">100</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>replace_type</name> <operator>=</operator> <name>PGTYPES_TYPE_UINT_2_LZ</name></expr>;</expr_stmt>
					<break>break;</break>
					<comment type="block">/* The year with the century (4 digits) */</comment>
				<case>case <expr><literal type="char">'Y'</literal></expr>:</case>
					<expr_stmt><expr><name><name>replace_val</name><operator>.</operator><name>uint_val</name></name> <operator>=</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>replace_type</name> <operator>=</operator> <name>PGTYPES_TYPE_UINT</name></expr>;</expr_stmt>
					<break>break;</break>
					<comment type="block">/* The time zone offset from GMT */</comment>
				<case>case <expr><literal type="char">'z'</literal></expr>:</case>
					<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>strftime</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>*</operator><name>pstr_len</name></expr></argument>, <argument><expr><literal type="string">"%z"</literal></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
					<while>while <condition>(<expr><operator>*</operator><name>q</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>
						<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pstr_len</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>
					</block_content>}</block></while>
					<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>replace_type</name> <operator>=</operator> <name>PGTYPES_TYPE_NOTHING</name></expr>;</expr_stmt>
					<break>break;</break>
					<comment type="block">/* The name or abbreviation of the time zone */</comment>
				<case>case <expr><literal type="char">'Z'</literal></expr>:</case>
					<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>strftime</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><operator>*</operator><name>pstr_len</name></expr></argument>, <argument><expr><literal type="string">"%Z"</literal></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
					<while>while <condition>(<expr><operator>*</operator><name>q</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>
						<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pstr_len</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>
					</block_content>}</block></while>
					<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>replace_type</name> <operator>=</operator> <name>PGTYPES_TYPE_NOTHING</name></expr>;</expr_stmt>
					<break>break;</break>
					<comment type="block">/* A % sign */</comment>
				<case>case <expr><literal type="char">'%'</literal></expr>:</case>
					<expr_stmt><expr><name><name>replace_val</name><operator>.</operator><name>char_val</name></name> <operator>=</operator> <literal type="char">'%'</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>replace_type</name> <operator>=</operator> <name>PGTYPES_TYPE_CHAR</name></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><literal type="char">'\0'</literal></expr>:</case>
					<comment type="block">/* fmtstr: foo%' - The string ends with a % sign */</comment>

					<comment type="block">/*
					 * this is not compliant to the specification
					 */</comment>
					<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
				<default>default:</default>

					<comment type="block">/*
					 * if we don't know the pattern, we just copy it
					 */</comment>
					<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pstr_len</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <literal type="char">'%'</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>
						<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pstr_len</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pstr_len</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
							<expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>
							<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pstr_len</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>
						</block_content>}</block></if>
						<else>else
						<block>{<block_content>
							<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
							<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
						</block_content>}</block></else></if_stmt>
						<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
					</block_content>}</block></if>
					<else>else<block type="pseudo"><block_content>
						<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
					<break>break;</break>
			</block_content>}</block></switch>
			<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>pgtypes_fmt_replace</name><argument_list>(<argument><expr><name>replace_val</name></expr></argument>, <argument><expr><name>replace_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><name>pstr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pstr_len</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
				<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pstr_len</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>PGTYPEStimestamp_fmt_asc</name><parameter_list>(<parameter><decl><type><name>timestamp</name> <modifier>*</modifier></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>str_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmtstr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type>	<name>tm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fsec_t</name></type>		<name>fsec</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>date</name></type>		<name>dDate</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>dow</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>dDate</name> <operator>=</operator> <call><name>PGTYPESdate_from_timestamp</name><argument_list>(<argument><expr><operator>*</operator><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>dow</name> <operator>=</operator> <call><name>PGTYPESdate_dayofweek</name><argument_list>(<argument><expr><name>dDate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>timestamp2tm</name><argument_list>(<argument><expr><operator>*</operator><name>ts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fsec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>dttofmtasc_replace</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>dDate</name></expr></argument>, <argument><expr><name>dow</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str_len</name></expr></argument>, <argument><expr><name>fmtstr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>PGTYPEStimestamp_sub</name><parameter_list>(<parameter><decl><type><name>timestamp</name> <modifier>*</modifier></type> <name>ts1</name></decl></parameter>, <parameter><decl><type><name>timestamp</name> <modifier>*</modifier></type> <name>ts2</name></decl></parameter>, <parameter><decl><type><name>interval</name> <modifier>*</modifier></type> <name>iv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>TIMESTAMP_NOT_FINITE</name><argument_list>(<argument><expr><operator>*</operator><name>ts1</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>TIMESTAMP_NOT_FINITE</name><argument_list>(<argument><expr><operator>*</operator><name>ts2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>PGTYPES_TS_ERR_EINFTIME</name></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>iv</name><operator>-&gt;</operator><name>time</name></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>ts1</name> <operator>-</operator> <operator>*</operator><name>ts2</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name><name>iv</name><operator>-&gt;</operator><name>month</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>PGTYPEStimestamp_defmt_asc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>timestamp</name> <modifier>*</modifier></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>year</name></decl>,
				<decl><type ref="prev"/><name>month</name></decl>,
				<decl><type ref="prev"/><name>day</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>hour</name></decl>,
				<decl><type ref="prev"/><name>minute</name></decl>,
				<decl><type ref="prev"/><name>second</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>tz</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>mstr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>mfmt</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fmt</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>fmt</name> <operator>=</operator> <literal type="string">"%Y-%m-%d %H:%M:%S"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>fmt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>mstr</name> <operator>=</operator> <call><name>pgtypes_strdup</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>mfmt</name> <operator>=</operator> <call><name>pgtypes_strdup</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * initialize with impossible values so that we can see if the fields
	 * where specified at all
	 */</comment>
	<comment type="block">/* XXX ambiguity with 1 BC for year? */</comment>
	<expr_stmt><expr><name>year</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>month</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>day</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>hour</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>minute</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>second</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>tz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>PGTYPEStimestamp_defmt_scan</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mstr</name></expr></argument>, <argument><expr><name>mfmt</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>year</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>month</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>day</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hour</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>minute</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>second</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
* add an interval to a time stamp
*
*	*tout = tin + span
*
*	 returns 0 if successful
*	 returns -1 if it fails
*
*/</comment>

<function><type><name>int</name></type>
<name>PGTYPEStimestamp_add_interval</name><parameter_list>(<parameter><decl><type><name>timestamp</name> <modifier>*</modifier></type> <name>tin</name></decl></parameter>, <parameter><decl><type><name>interval</name> <modifier>*</modifier></type> <name>span</name></decl></parameter>, <parameter><decl><type><name>timestamp</name> <modifier>*</modifier></type> <name>tout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>TIMESTAMP_NOT_FINITE</name><argument_list>(<argument><expr><operator>*</operator><name>tin</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>tout</name> <operator>=</operator> <operator>*</operator><name>tin</name></expr>;</expr_stmt></block_content></block></if>


	<else>else
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>span</name><operator>-&gt;</operator><name>month</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type>	<name>tt</name></decl>,
					   <decl><type ref="prev"><modifier>*</modifier></type><name>tm</name> <init>= <expr><operator>&amp;</operator><name>tt</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>fsec_t</name></type>		<name>fsec</name></decl>;</decl_stmt>


			<if_stmt><if>if <condition>(<expr><call><name>timestamp2tm</name><argument_list>(<argument><expr><operator>*</operator><name>tin</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fsec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>+=</operator> <name><name>span</name><operator>-&gt;</operator><name>month</name></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>&gt;</operator> <name>MONTHS_PER_YEAR</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+=</operator> <operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>MONTHS_PER_YEAR</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>=</operator> <operator>(</operator><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>MONTHS_PER_YEAR</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+=</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>/</operator> <name>MONTHS_PER_YEAR</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>=</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>%</operator> <name>MONTHS_PER_YEAR</name> <operator>+</operator> <name>MONTHS_PER_YEAR</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>


			<comment type="block">/* adjust for end of month boundary problems... */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>&gt;</operator> <name><name>day_tab</name><index>[<expr><call><name>isleap</name><argument_list>(<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>=</operator> <operator>(</operator><name><name>day_tab</name><index>[<expr><call><name>isleap</name><argument_list>(<argument><expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>


			<if_stmt><if>if <condition>(<expr><call><name>tm2timestamp</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>fsec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tin</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>


		<expr_stmt><expr><operator>*</operator><name>tin</name> <operator>+=</operator> <name><name>span</name><operator>-&gt;</operator><name>time</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>tout</name> <operator>=</operator> <operator>*</operator><name>tin</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>


<comment type="block">/*
* subtract an interval from a time stamp
*
*	*tout = tin - span
*
*	 returns 0 if successful
*	 returns -1 if it fails
*
*/</comment>

<function><type><name>int</name></type>
<name>PGTYPEStimestamp_sub_interval</name><parameter_list>(<parameter><decl><type><name>timestamp</name> <modifier>*</modifier></type> <name>tin</name></decl></parameter>, <parameter><decl><type><name>interval</name> <modifier>*</modifier></type> <name>span</name></decl></parameter>, <parameter><decl><type><name>timestamp</name> <modifier>*</modifier></type> <name>tout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>interval</name></type>	<name>tspan</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>tspan</name><operator>.</operator><name>month</name></name> <operator>=</operator> <operator>-</operator><name><name>span</name><operator>-&gt;</operator><name>month</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tspan</name><operator>.</operator><name>time</name></name> <operator>=</operator> <operator>-</operator><name><name>span</name><operator>-&gt;</operator><name>time</name></name></expr>;</expr_stmt>


	<return>return <expr><call><name>PGTYPEStimestamp_add_interval</name><argument_list>(<argument><expr><name>tin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tspan</name></expr></argument>, <argument><expr><name>tout</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
