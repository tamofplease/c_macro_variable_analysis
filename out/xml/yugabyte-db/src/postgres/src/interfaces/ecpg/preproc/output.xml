<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/interfaces/ecpg/preproc/output.c"><comment type="block">/* src/interfaces/ecpg/preproc/output.c */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extern.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>output_escaped_str</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>quoted</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type>
<name>output_line_number</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>line</name> <init>= <expr><call><name>hashline_number</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>base_yyout</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>output_simple_statement</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>output_escaped_str</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>output_line_number</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * store the whenever action here
 */</comment>
<decl_stmt><decl><type><name><name>struct</name> <name>when</name></name></type> <name>when_error</name></decl>,
			<decl><type ref="prev"/><name>when_nf</name></decl>,
			<decl><type ref="prev"/><name>when_warn</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_action</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>when</name></name> <modifier>*</modifier></type><name>w</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>W_SQLPRINT</name></expr>:</case>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>base_yyout</name></expr></argument>, <argument><expr><literal type="string">"sqlprint();"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>W_GOTO</name></expr>:</case>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>base_yyout</name></expr></argument>, <argument><expr><literal type="string">"goto %s;"</literal></expr></argument>, <argument><expr><name><name>w</name><operator>-&gt;</operator><name>command</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>W_DO</name></expr>:</case>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>base_yyout</name></expr></argument>, <argument><expr><literal type="string">"%s;"</literal></expr></argument>, <argument><expr><name><name>w</name><operator>-&gt;</operator><name>command</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>W_STOP</name></expr>:</case>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>base_yyout</name></expr></argument>, <argument><expr><literal type="string">"exit (1);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>W_BREAK</name></expr>:</case>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>base_yyout</name></expr></argument>, <argument><expr><literal type="string">"break;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>W_CONTINUE</name></expr>:</case>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>base_yyout</name></expr></argument>, <argument><expr><literal type="string">"continue;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>base_yyout</name></expr></argument>, <argument><expr><literal type="string">"{/* %d not implemented yet */}"</literal></expr></argument>, <argument><expr><name><name>w</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>whenever_action</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mode</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>when_nf</name><operator>.</operator><name>code</name></name> <operator>!=</operator> <name>W_NOTHING</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>output_line_number</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>base_yyout</name></expr></argument>, <argument><expr><literal type="string">"\nif (sqlca.sqlcode == ECPG_NOT_FOUND) "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>print_action</name><argument_list>(<argument><expr><operator>&amp;</operator><name>when_nf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>when_warn</name><operator>.</operator><name>code</name></name> <operator>!=</operator> <name>W_NOTHING</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>output_line_number</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>base_yyout</name></expr></argument>, <argument><expr><literal type="string">"\nif (sqlca.sqlwarn[0] == 'W') "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>print_action</name><argument_list>(<argument><expr><operator>&amp;</operator><name>when_warn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>when_error</name><operator>.</operator><name>code</name></name> <operator>!=</operator> <name>W_NOTHING</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>output_line_number</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>base_yyout</name></expr></argument>, <argument><expr><literal type="string">"\nif (sqlca.sqlcode &lt; 0) "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>print_action</name><argument_list>(<argument><expr><operator>&amp;</operator><name>when_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>mode</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'}'</literal></expr></argument>, <argument><expr><name>base_yyout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>output_line_number</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>hashline_number</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* do not print line numbers if we are in debug mode */</comment>
	<if_stmt><if>if <condition>(<expr><name>input_filename</name>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>YYDEBUG</name></cpp:ifdef>
		<operator>&amp;&amp;</operator> <operator>!</operator><name>base_yydebug</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		)</condition>
	<block>{<block_content>
		<comment type="block">/* "* 2" here is for escaping '\' and '"' below */</comment>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>line</name> <init>= <expr><call><name>mm_alloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"\n#line %d \"%s\"\n"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name> <operator>*</operator> <literal type="number">10</literal> <operator>/</operator> <literal type="number">3</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>input_filename</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>src</name></decl>,
				   <decl><type ref="prev"><modifier>*</modifier></type><name>dest</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"\n#line %d \""</literal></expr></argument>, <argument><expr><name>base_yylineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>src</name> <operator>=</operator> <name>input_filename</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>dest</name> <operator>=</operator> <name>line</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<while>while <condition>(<expr><operator>*</operator><name>src</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>src</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>||</operator> <operator>*</operator><name>src</name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><operator>*</operator><name>dest</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><literal type="string">"\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><name>line</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>EMPTY</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ecpg_statement_type_name</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="string">"ECPGst_normal"</literal></expr>,
	<expr><literal type="string">"ECPGst_execute"</literal></expr>,
	<expr><literal type="string">"ECPGst_exec_immediate"</literal></expr>,
	<expr><literal type="string">"ECPGst_prepnormal"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>output_statement</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>whenever_mode</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ECPG_statement_type</name></name></type> <name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>base_yyout</name></expr></argument>, <argument><expr><literal type="string">"{ ECPGdo(__LINE__, %d, %d, %s, %d, "</literal></expr></argument>, <argument><expr><name>compat</name></expr></argument>, <argument><expr><name>force_indicator</name></expr></argument>, <argument><expr><ternary><condition><expr><name>connection</name></expr> ?</condition><then> <expr><name>connection</name></expr> </then><else>: <expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>questionmarks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>st</name> <operator>==</operator> <name>ECPGst_execute</name> <operator>||</operator> <name>st</name> <operator>==</operator> <name>ECPGst_exec_immediate</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>base_yyout</name></expr></argument>, <argument><expr><literal type="string">"%s, %s, "</literal></expr></argument>, <argument><expr><name><name>ecpg_statement_type_name</name><index>[<expr><name>st</name></expr>]</index></name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>st</name> <operator>==</operator> <name>ECPGst_prepnormal</name> <operator>&amp;&amp;</operator> <name>auto_prepare</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"ECPGst_prepnormal, \""</literal></expr></argument>, <argument><expr><name>base_yyout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"ECPGst_normal, \""</literal></expr></argument>, <argument><expr><name>base_yyout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><call><name>output_escaped_str</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"\", "</literal></expr></argument>, <argument><expr><name>base_yyout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* dump variables to C file */</comment>
	<expr_stmt><expr><call><name>dump_variables</name><argument_list>(<argument><expr><name>argsinsert</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"ECPGt_EOIT, "</literal></expr></argument>, <argument><expr><name>base_yyout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dump_variables</name><argument_list>(<argument><expr><name>argsresult</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"ECPGt_EORT);"</literal></expr></argument>, <argument><expr><name>base_yyout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>reset_variables</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>whenever_action</name><argument_list>(<argument><expr><name>whenever_mode</name> <operator>|</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>connection</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>connection</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>output_prepare_statement</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>base_yyout</name></expr></argument>, <argument><expr><literal type="string">"{ ECPGprepare(__LINE__, %s, %d, "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>connection</name></expr> ?</condition><then> <expr><name>connection</name></expr> </then><else>: <expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>questionmarks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>output_escaped_str</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>, <argument><expr><name>base_yyout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>output_escaped_str</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">");"</literal></expr></argument>, <argument><expr><name>base_yyout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>whenever_action</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>connection</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>connection</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>output_deallocate_prepare_statement</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>con</name> <init>= <expr><ternary><condition><expr><name>connection</name></expr> ?</condition><then> <expr><name>connection</name></expr> </then><else>: <expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>base_yyout</name></expr></argument>, <argument><expr><literal type="string">"{ ECPGdeallocate(__LINE__, %d, %s, "</literal></expr></argument>, <argument><expr><name>compat</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>output_escaped_str</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">");"</literal></expr></argument>, <argument><expr><name>base_yyout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>base_yyout</name></expr></argument>, <argument><expr><literal type="string">"{ ECPGdeallocate_all(__LINE__, %d, %s);"</literal></expr></argument>, <argument><expr><name>compat</name></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>whenever_action</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>connection</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>connection</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>output_escaped_str</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>quoted</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>quoted</name> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition> <comment type="block">/* do not escape quotes
														 * at beginning and end
														 * if quoted string */</comment>
	<block>{<block_content>
		<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"\""</literal></expr></argument>, <argument><expr><name>base_yyout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* output this char by char as we have to filter " and \n */</comment>
	<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"\\\""</literal></expr></argument>, <argument><expr><name>base_yyout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"\\\n"</literal></expr></argument>, <argument><expr><name>base_yyout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>j</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>

			<comment type="block">/*
			 * check whether this is a continuation line if it is, do not
			 * output anything because newlines are escaped anyway
			 */</comment>

			<comment type="block">/* accept blanks after the '\' as some other compilers do too */</comment>
			<do>do
			<block>{<block_content>
				<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block> while <condition>(<expr><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name><name>str</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition>;</do>

			<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name><name>str</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\n'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <comment type="block">/* not followed by a
																			 * newline */</comment>
				<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"\\\\"</literal></expr></argument>, <argument><expr><name>base_yyout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"\\\r\n"</literal></expr></argument>, <argument><expr><name>base_yyout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>base_yyout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>quoted</name> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'"'</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"\""</literal></expr></argument>, <argument><expr><name>base_yyout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
