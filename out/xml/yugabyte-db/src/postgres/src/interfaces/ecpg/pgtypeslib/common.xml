<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/interfaces/ecpg/pgtypeslib/common.c"><comment type="block">/* src/interfaces/ecpg/pgtypeslib/common.c */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgtypes.h"</cpp:file></cpp:include>

<comment type="block">/* Return value is zero-filled. */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>pgtypes_alloc</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>new</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1L</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>new</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>pgtypes_strdup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>new</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>new</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>new</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pgtypes_fmt_replace</name><parameter_list>(<parameter><decl><type><name><name>union</name> <name>un_fmt_comb</name></name></type> <name>replace_val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>replace_type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pstr_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * general purpose variable, set to 0 in order to fix compiler warning
	 */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>replace_type</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>PGTYPES_TYPE_NOTHING</name></expr>:</case>
			<break>break;</break>
		<case>case <expr><name>PGTYPES_TYPE_STRING_CONSTANT</name></expr>:</case>
		<case>case <expr><name>PGTYPES_TYPE_STRING_MALLOCED</name></expr>:</case>
			<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>replace_val</name><operator>.</operator><name>str_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <operator>*</operator><name>pstr_len</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* include trailing terminator in what we copy */</comment>
				<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>output</name></expr></argument>, <argument><expr><name><name>replace_val</name><operator>.</operator><name>str_val</name></name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>pstr_len</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>output</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>replace_type</name> <operator>==</operator> <name>PGTYPES_TYPE_STRING_MALLOCED</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>replace_val</name><operator>.</operator><name>str_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
			<break>break;</break>
		<case>case <expr><name>PGTYPES_TYPE_CHAR</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pstr_len</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><operator>(</operator><operator>*</operator><name>output</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <name><name>replace_val</name><operator>.</operator><name>char_val</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><operator>(</operator><operator>*</operator><name>output</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
				<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pstr_len</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><operator>(</operator><operator>*</operator><name>output</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
			<break>break;</break>
		<case>case <expr><name>PGTYPES_TYPE_DOUBLE_NF</name></expr>:</case>
		<case>case <expr><name>PGTYPES_TYPE_INT64</name></expr>:</case>
		<case>case <expr><name>PGTYPES_TYPE_UINT</name></expr>:</case>
		<case>case <expr><name>PGTYPES_TYPE_UINT_2_LZ</name></expr>:</case>
		<case>case <expr><name>PGTYPES_TYPE_UINT_2_LS</name></expr>:</case>
		<case>case <expr><name>PGTYPES_TYPE_UINT_3_LZ</name></expr>:</case>
		<case>case <expr><name>PGTYPES_TYPE_UINT_4_LZ</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>pgtypes_alloc</name><argument_list>(<argument><expr><name>PGTYPES_FMT_NUM_MAX_DIGITS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>
				<switch>switch <condition>(<expr><name>replace_type</name></expr>)</condition>
				<block>{<block_content>
					<case>case <expr><name>PGTYPES_TYPE_DOUBLE_NF</name></expr>:</case>
						<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>PGTYPES_FMT_NUM_MAX_DIGITS</name></expr></argument>,
									 <argument><expr><literal type="string">"%0.0g"</literal></expr></argument>, <argument><expr><name><name>replace_val</name><operator>.</operator><name>double_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><name>PGTYPES_TYPE_INT64</name></expr>:</case>
						<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>PGTYPES_FMT_NUM_MAX_DIGITS</name></expr></argument>,
									 <argument><expr><name>INT64_FORMAT</name></expr></argument>, <argument><expr><name><name>replace_val</name><operator>.</operator><name>int64_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><name>PGTYPES_TYPE_UINT</name></expr>:</case>
						<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>PGTYPES_FMT_NUM_MAX_DIGITS</name></expr></argument>,
									 <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name><name>replace_val</name><operator>.</operator><name>uint_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><name>PGTYPES_TYPE_UINT_2_LZ</name></expr>:</case>
						<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>PGTYPES_FMT_NUM_MAX_DIGITS</name></expr></argument>,
									 <argument><expr><literal type="string">"%02u"</literal></expr></argument>, <argument><expr><name><name>replace_val</name><operator>.</operator><name>uint_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><name>PGTYPES_TYPE_UINT_2_LS</name></expr>:</case>
						<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>PGTYPES_FMT_NUM_MAX_DIGITS</name></expr></argument>,
									 <argument><expr><literal type="string">"%2u"</literal></expr></argument>, <argument><expr><name><name>replace_val</name><operator>.</operator><name>uint_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><name>PGTYPES_TYPE_UINT_3_LZ</name></expr>:</case>
						<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>PGTYPES_FMT_NUM_MAX_DIGITS</name></expr></argument>,
									 <argument><expr><literal type="string">"%03u"</literal></expr></argument>, <argument><expr><name><name>replace_val</name><operator>.</operator><name>uint_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><name>PGTYPES_TYPE_UINT_4_LZ</name></expr>:</case>
						<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>PGTYPES_FMT_NUM_MAX_DIGITS</name></expr></argument>,
									 <argument><expr><literal type="string">"%04u"</literal></expr></argument>, <argument><expr><name><name>replace_val</name><operator>.</operator><name>uint_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
				</block_content>}</block></switch>

				<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name> <operator>&gt;=</operator> <name>PGTYPES_FMT_NUM_MAX_DIGITS</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>pstr_len</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>

				<comment type="block">/*
				 * if *pstr_len == 0, we don't have enough space for the
				 * terminator and the conversion fails
				 */</comment>
				<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pstr_len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>*</operator><name>output</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>*</operator><name>output</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<default>default:</default>
			<break>break;</break>
	</block_content>}</block></switch>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Functions declared in pgtypes.h. */</comment>

<comment type="block">/* Just frees memory (mostly needed for Windows) */</comment>
<function><type><name>void</name></type>
<name>PGTYPESchar_free</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
