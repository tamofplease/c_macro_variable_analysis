<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/interfaces/ecpg/preproc/type.c"><comment type="block">/* src/interfaces/ecpg/preproc/type.c */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extern.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>indicator_set</name></cpp:macro> <cpp:value>ind_type != NULL &amp;&amp; ind_type-&gt;type != ECPGt_NO_INDICATOR</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>ECPGstruct_member</name></name></type> <name>struct_no_indicator</name> <init>= <expr><block>{<expr><literal type="string">"no_indicator"</literal></expr>, <expr><operator>&amp;</operator><name>ecpg_no_indicator</name></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* malloc + error check */</comment>
<function><type><name>void</name> <modifier>*</modifier></type>
<name>mm_alloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>mmfatal</name><argument_list>(<argument><expr><name>OUT_OF_MEMORY</name></expr></argument>, <argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* strdup + error check */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>mm_strdup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>new</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>mmfatal</name><argument_list>(<argument><expr><name>OUT_OF_MEMORY</name></expr></argument>, <argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>new</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* duplicate memberlist */</comment>
<function><type><name><name>struct</name> <name>ECPGstruct_member</name></name> <modifier>*</modifier></type>
<name>ECPGstruct_member_dup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ECPGstruct_member</name></name> <modifier>*</modifier></type><name>rm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ECPGstruct_member</name></name> <modifier>*</modifier></type><name>new</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>rm</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>ECPGtype</name></name> <modifier>*</modifier></type><name>type</name></decl>;</decl_stmt>

		<switch>switch <condition>(<expr><name><name>rm</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>ECPGt_struct</name></expr>:</case>
			<case>case <expr><name>ECPGt_union</name></expr>:</case>
				<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>ECPGmake_struct_type</name><argument_list>(<argument><expr><name><name>rm</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>members</name></name></expr></argument>, <argument><expr><name><name>rm</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>rm</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>type_name</name></name></expr></argument>, <argument><expr><name><name>rm</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>struct_sizeof</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ECPGt_array</name></expr>:</case>

				<comment type="block">/*
				 * if this array does contain a struct again, we have to
				 * create the struct too
				 */</comment>
				<if_stmt><if>if <condition>(<expr><name><name>rm</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ECPGt_struct</name> <operator>||</operator> <name><name>rm</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ECPGt_union</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>ECPGmake_struct_type</name><argument_list>(<argument><expr><name><name>rm</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>members</name></name></expr></argument>, <argument><expr><name><name>rm</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>rm</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>type_name</name></name></expr></argument>, <argument><expr><name><name>rm</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>struct_sizeof</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>ECPGmake_array_type</name><argument_list>(<argument><expr><call><name>ECPGmake_simple_type</name><argument_list>(<argument><expr><name><name>rm</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>rm</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>rm</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>rm</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>ECPGmake_simple_type</name><argument_list>(<argument><expr><name><name>rm</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>rm</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>rm</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
		</block_content>}</block></switch>

		<expr_stmt><expr><call><name>ECPGmake_struct_member</name><argument_list>(<argument><expr><name><name>rm</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>rm</name> <operator>=</operator> <name><name>rm</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>new</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* The NAME argument is copied. The type argument is preserved as a pointer. */</comment>
<function><type><name>void</name></type>
<name>ECPGmake_struct_member</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ECPGtype</name></name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ECPGstruct_member</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>start</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ECPGstruct_member</name></name> <modifier>*</modifier></type><name>ptr</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>ne</name> <init>=
	<expr><operator>(</operator>struct <name>ECPGstruct_member</name> <operator>*</operator><operator>)</operator> <call><name>mm_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ECPGstruct_member</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>ne</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ne</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ne</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>ptr</name> <operator>=</operator> <operator>*</operator><name>start</name></expr>;</init> <condition><expr><name>ptr</name> <operator>&amp;&amp;</operator> <name><name>ptr</name><operator>-&gt;</operator><name>next</name></name></expr>;</condition> <incr><expr><name>ptr</name> <operator>=</operator> <name><name>ptr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

	<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>ptr</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>ne</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>start</name> <operator>=</operator> <name>ne</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>ECPGtype</name></name> <modifier>*</modifier></type>
<name>ECPGmake_simple_type</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>ECPGttype</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>counter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ECPGtype</name></name> <modifier>*</modifier></type><name>ne</name> <init>= <expr><operator>(</operator>struct <name>ECPGtype</name> <operator>*</operator><operator>)</operator> <call><name>mm_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ECPGtype</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>ne</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ne</name><operator>-&gt;</operator><name>type_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ne</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ne</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ne</name><operator>-&gt;</operator><name>struct_sizeof</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ne</name><operator>-&gt;</operator><name>counter</name></name> <operator>=</operator> <name>counter</name></expr>;</expr_stmt>		<comment type="block">/* only needed for varchar */</comment>

	<return>return <expr><name>ne</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>ECPGtype</name></name> <modifier>*</modifier></type>
<name>ECPGmake_array_type</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ECPGtype</name></name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ECPGtype</name></name> <modifier>*</modifier></type><name>ne</name> <init>= <expr><call><name>ECPGmake_simple_type</name><argument_list>(<argument><expr><name>ECPGt_array</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>ne</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

	<return>return <expr><name>ne</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>ECPGtype</name></name> <modifier>*</modifier></type>
<name>ECPGmake_struct_type</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ECPGstruct_member</name></name> <modifier>*</modifier></type><name>rm</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ECPGttype</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>type_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>struct_sizeof</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ECPGtype</name></name> <modifier>*</modifier></type><name>ne</name> <init>= <expr><call><name>ECPGmake_simple_type</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><call><name>mm_strdup</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>ne</name><operator>-&gt;</operator><name>type_name</name></name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><name>type_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ne</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>members</name></name> <operator>=</operator> <call><name>ECPGstruct_member_dup</name><argument_list>(<argument><expr><name>rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ne</name><operator>-&gt;</operator><name>struct_sizeof</name></name> <operator>=</operator> <name>struct_sizeof</name></expr>;</expr_stmt>

	<return>return <expr><name>ne</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>get_type</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>ECPGttype</name></name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>ECPGt_char</name></expr>:</case>
			<return>return <expr><literal type="string">"ECPGt_char"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>ECPGt_unsigned_char</name></expr>:</case>
			<return>return <expr><literal type="string">"ECPGt_unsigned_char"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>ECPGt_short</name></expr>:</case>
			<return>return <expr><literal type="string">"ECPGt_short"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>ECPGt_unsigned_short</name></expr>:</case>
			<return>return <expr><literal type="string">"ECPGt_unsigned_short"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>ECPGt_int</name></expr>:</case>
			<return>return <expr><literal type="string">"ECPGt_int"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>ECPGt_unsigned_int</name></expr>:</case>
			<return>return <expr><literal type="string">"ECPGt_unsigned_int"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>ECPGt_long</name></expr>:</case>
			<return>return <expr><literal type="string">"ECPGt_long"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>ECPGt_unsigned_long</name></expr>:</case>
			<return>return <expr><literal type="string">"ECPGt_unsigned_long"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>ECPGt_long_long</name></expr>:</case>
			<return>return <expr><literal type="string">"ECPGt_long_long"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>ECPGt_unsigned_long_long</name></expr>:</case>
			<return>return <expr><literal type="string">"ECPGt_unsigned_long_long"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>ECPGt_float</name></expr>:</case>
			<return>return <expr><literal type="string">"ECPGt_float"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>ECPGt_double</name></expr>:</case>
			<return>return <expr><literal type="string">"ECPGt_double"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>ECPGt_bool</name></expr>:</case>
			<return>return <expr><literal type="string">"ECPGt_bool"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>ECPGt_varchar</name></expr>:</case>
			<return>return <expr><literal type="string">"ECPGt_varchar"</literal></expr>;</return>
		<case>case <expr><name>ECPGt_NO_INDICATOR</name></expr>:</case>	<comment type="block">/* no indicator */</comment>
			<return>return <expr><literal type="string">"ECPGt_NO_INDICATOR"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>ECPGt_char_variable</name></expr>:</case>	<comment type="block">/* string that should not be quoted */</comment>
			<return>return <expr><literal type="string">"ECPGt_char_variable"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>ECPGt_const</name></expr>:</case>		<comment type="block">/* constant string quoted */</comment>
			<return>return <expr><literal type="string">"ECPGt_const"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>ECPGt_decimal</name></expr>:</case>
			<return>return <expr><literal type="string">"ECPGt_decimal"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>ECPGt_numeric</name></expr>:</case>
			<return>return <expr><literal type="string">"ECPGt_numeric"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>ECPGt_interval</name></expr>:</case>
			<return>return <expr><literal type="string">"ECPGt_interval"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>ECPGt_descriptor</name></expr>:</case>
			<return>return <expr><literal type="string">"ECPGt_descriptor"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>ECPGt_sqlda</name></expr>:</case>
			<return>return <expr><literal type="string">"ECPGt_sqlda"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>ECPGt_date</name></expr>:</case>
			<return>return <expr><literal type="string">"ECPGt_date"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>ECPGt_timestamp</name></expr>:</case>
			<return>return <expr><literal type="string">"ECPGt_timestamp"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>ECPGt_string</name></expr>:</case>
			<return>return <expr><literal type="string">"ECPGt_string"</literal></expr>;</return>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>mmerror</name><argument_list>(<argument><expr><name>PARSE_ERROR</name></expr></argument>, <argument><expr><name>ET_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized variable type code %d"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Dump a type.
   The type is dumped as:
   type-tag &lt;comma&gt;				   - enum ECPGttype
   reference-to-variable &lt;comma&gt;		   - char *
   size &lt;comma&gt;					   - long size of this field (if varchar)
   arrsize &lt;comma&gt;				   - long number of elements in the arr
   offset &lt;comma&gt;				   - offset to the next element
   Where:
   type-tag is one of the simple types or varchar.
   reference-to-variable can be a reference to a struct element.
   arrsize is the size of the array in case of array fetches. Otherwise 0.
   size is the maxsize in case it is a varchar. Otherwise it is the size of
   the variable (required to do array fetches of structs).
 */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ECPGdump_a_simple</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ECPGttype</name></name></type> <name>type</name></decl></parameter>,
				  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>varcharsize</name></decl></parameter>,
				  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arrsize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ECPGdump_a_struct</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ind_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arrsize</name></decl></parameter>,
				  <parameter><decl><type><name><name>struct</name> <name>ECPGtype</name></name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ECPGtype</name></name> <modifier>*</modifier></type><name>ind_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ind_prefix</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type>
<name>ECPGdump_a_type</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ECPGtype</name></name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>brace_level</name></decl></parameter>,
				<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ind_name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ECPGtype</name></name> <modifier>*</modifier></type><name>ind_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>ind_brace_level</name></decl></parameter>,
				<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ind_prefix</name></decl></parameter>,
				<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arr_str_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>struct_sizeof</name></decl></parameter>,
				<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ind_struct_sizeof</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>variable</name></name> <modifier>*</modifier></type><name>var</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>type</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ECPGt_descriptor</name> <operator>&amp;&amp;</operator> <name><name>type</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ECPGt_sqlda</name> <operator>&amp;&amp;</operator>
		<name><name>type</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ECPGt_char_variable</name> <operator>&amp;&amp;</operator> <name><name>type</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ECPGt_const</name> <operator>&amp;&amp;</operator>
		<name>brace_level</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>var</name> <operator>=</operator> <call><name>find_variable</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>var</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name><name>type</name><operator>-&gt;</operator><name>type</name></name><operator>)</operator> <operator>||</operator>
			<operator>(</operator><name><name>var</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>type_name</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>type</name><operator>-&gt;</operator><name>type_name</name></name><operator>)</operator> <operator>||</operator>
			<operator>(</operator><operator>!</operator><name><name>var</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>type_name</name></name> <operator>&amp;&amp;</operator> <name><name>type</name><operator>-&gt;</operator><name>type_name</name></name><operator>)</operator> <operator>||</operator>
			<operator>(</operator><name><name>var</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>type_name</name></name> <operator>&amp;&amp;</operator> <name><name>type</name><operator>-&gt;</operator><name>type_name</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>type_name</name></name></expr></argument>, <argument><expr><name><name>type</name><operator>-&gt;</operator><name>type_name</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>mmerror</name><argument_list>(<argument><expr><name>PARSE_ERROR</name></expr></argument>, <argument><expr><name>ET_ERROR</name></expr></argument>, <argument><expr><literal type="string">"variable \"%s\" is hidden by a local variable of a different type"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>brace_level</name></name> <operator>!=</operator> <name>brace_level</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>mmerror</name><argument_list>(<argument><expr><name>PARSE_ERROR</name></expr></argument>, <argument><expr><name>ET_WARNING</name></expr></argument>, <argument><expr><literal type="string">"variable \"%s\" is hidden by a local variable"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>ind_name</name> <operator>&amp;&amp;</operator> <name>ind_type</name> <operator>&amp;&amp;</operator> <name><name>ind_type</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ECPGt_NO_INDICATOR</name> <operator>&amp;&amp;</operator> <name>ind_brace_level</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>mm_strdup</name><argument_list>(<argument><expr><name>ind_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>var</name> <operator>=</operator> <call><name>find_variable</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>var</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name><name>ind_type</name><operator>-&gt;</operator><name>type</name></name><operator>)</operator> <operator>||</operator>
				<operator>(</operator><name><name>var</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>type_name</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ind_type</name><operator>-&gt;</operator><name>type_name</name></name><operator>)</operator> <operator>||</operator>
				<operator>(</operator><operator>!</operator><name><name>var</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>type_name</name></name> <operator>&amp;&amp;</operator> <name><name>ind_type</name><operator>-&gt;</operator><name>type_name</name></name><operator>)</operator> <operator>||</operator>
				<operator>(</operator><name><name>var</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>type_name</name></name> <operator>&amp;&amp;</operator> <name><name>ind_type</name><operator>-&gt;</operator><name>type_name</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>type_name</name></name></expr></argument>, <argument><expr><name><name>ind_type</name><operator>-&gt;</operator><name>type_name</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>mmerror</name><argument_list>(<argument><expr><name>PARSE_ERROR</name></expr></argument>, <argument><expr><name>ET_ERROR</name></expr></argument>, <argument><expr><literal type="string">"indicator variable \"%s\" is hidden by a local variable of a different type"</literal></expr></argument>, <argument><expr><name>ind_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>brace_level</name></name> <operator>!=</operator> <name>ind_brace_level</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>mmerror</name><argument_list>(<argument><expr><name>PARSE_ERROR</name></expr></argument>, <argument><expr><name>ET_WARNING</name></expr></argument>, <argument><expr><literal type="string">"indicator variable \"%s\" is hidden by a local variable"</literal></expr></argument>, <argument><expr><name>ind_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<switch>switch <condition>(<expr><name><name>type</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>ECPGt_array</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>indicator_set</name> <operator>&amp;&amp;</operator> <name><name>ind_type</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ECPGt_array</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>mmfatal</name><argument_list>(<argument><expr><name>INDICATOR_NOT_ARRAY</name></expr></argument>, <argument><expr><literal type="string">"indicator for array/pointer has to be array/pointer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<switch>switch <condition>(<expr><name><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>ECPGt_array</name></expr>:</case>
					<expr_stmt><expr><call><name>mmerror</name><argument_list>(<argument><expr><name>PARSE_ERROR</name></expr></argument>, <argument><expr><name>ET_ERROR</name></expr></argument>, <argument><expr><literal type="string">"nested arrays are not supported (except strings)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* array of array */</comment>
					<break>break;</break>
				<case>case <expr><name>ECPGt_struct</name></expr>:</case>
				<case>case <expr><name>ECPGt_union</name></expr>:</case>
					<expr_stmt><expr><call><name>ECPGdump_a_struct</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
									  <argument><expr><name>ind_name</name></expr></argument>,
									  <argument><expr><name><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,
									  <argument><expr><name><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name></name></expr></argument>,
									  <argument><expr><ternary><condition><expr><operator>(</operator><name>ind_type</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>ind_type</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ECPGt_NO_INDICATOR</name><operator>)</operator></expr> ?</condition><then> <expr><name>ind_type</name></expr> </then><else>: <expr><name><name>ind_type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name></name></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></argument>,
									  <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>ind_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<default>default:</default>
					<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_SIMPLE_TYPE</name><argument_list>(<argument><expr><name><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>base_yyerror</name><argument_list>(<argument><expr><literal type="string">"internal error: unknown datatype, please report this to &lt;pgsql-bugs@postgresql.org&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

					<expr_stmt><expr><call><name>ECPGdump_a_simple</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
									  <argument><expr><name><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>type</name></name></expr></argument>,
									  <argument><expr><name><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>struct_sizeof</name></expr> ?</condition><then> <expr><name>struct_sizeof</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,
									  <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<if_stmt><if>if <condition>(<expr><name>ind_type</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
					<block>{<block_content>
						<if_stmt><if>if <condition>(<expr><name><name>ind_type</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ECPGt_NO_INDICATOR</name></expr>)</condition>
						<block>{<block_content>
							<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>str_neg_one</name> <init>= <expr><call><name>mm_strdup</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

							<expr_stmt><expr><call><name>ECPGdump_a_simple</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>ind_name</name></expr></argument>, <argument><expr><name><name>ind_type</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>ind_type</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>str_neg_one</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ind_prefix</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str_neg_one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></if>
						<else>else
						<block>{<block_content>
							<expr_stmt><expr><call><name>ECPGdump_a_simple</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>ind_name</name></expr></argument>, <argument><expr><name><name>ind_type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>type</name></name></expr></argument>,
											  <argument><expr><name><name>ind_type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>ind_type</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ind_prefix</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></else></if_stmt>
					</block_content>}</block></if></if_stmt>
			</block_content>}</block></switch>
			<break>break;</break>
		<case>case <expr><name>ECPGt_struct</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>str_one</name> <init>= <expr><call><name>mm_strdup</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><name>indicator_set</name> <operator>&amp;&amp;</operator> <name><name>ind_type</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>ECPGt_struct</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>mmfatal</name><argument_list>(<argument><expr><name>INDICATOR_NOT_STRUCT</name></expr></argument>, <argument><expr><literal type="string">"indicator for struct has to be a struct"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><call><name>ECPGdump_a_struct</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>ind_name</name></expr></argument>, <argument><expr><name>str_one</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>ind_type</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>ind_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str_one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>ECPGt_union</name></expr>:</case>		<comment type="block">/* cannot dump a complete union */</comment>
			<expr_stmt><expr><call><name>base_yyerror</name><argument_list>(<argument><expr><literal type="string">"type of union has to be specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ECPGt_char_variable</name></expr>:</case>
			<block>{<block_content>
				<comment type="block">/*
				 * Allocate for each, as there are code-paths where the values
				 * get stomped on.
				 */</comment>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>str_varchar_one</name> <init>= <expr><call><name>mm_strdup</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>str_arr_one</name> <init>= <expr><call><name>mm_strdup</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>str_neg_one</name> <init>= <expr><call><name>mm_strdup</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><name>indicator_set</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ind_type</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ECPGt_struct</name> <operator>||</operator> <name><name>ind_type</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ECPGt_array</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>mmfatal</name><argument_list>(<argument><expr><name>INDICATOR_NOT_SIMPLE</name></expr></argument>, <argument><expr><literal type="string">"indicator for simple data type has to be simple"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><call><name>ECPGdump_a_simple</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>type</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>str_varchar_one</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>arr_str_size</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>arr_str_size</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>arr_str_size</name></expr> </then><else>: <expr><name>str_arr_one</name></expr></else></ternary></expr></argument>, <argument><expr><name>struct_sizeof</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>ind_type</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ECPGdump_a_simple</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>ind_name</name></expr></argument>, <argument><expr><name><name>ind_type</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>ind_type</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>arr_str_size</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>arr_str_size</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>arr_str_size</name></expr> </then><else>: <expr><name>str_neg_one</name></expr></else></ternary></expr></argument>, <argument><expr><name>ind_struct_sizeof</name></expr></argument>, <argument><expr><name>ind_prefix</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str_varchar_one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str_arr_one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str_neg_one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>ECPGt_descriptor</name></expr>:</case>
			<block>{<block_content>
				<comment type="block">/*
				 * Allocate for each, as there are code-paths where the values
				 * get stomped on.
				 */</comment>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>str_neg_one</name> <init>= <expr><call><name>mm_strdup</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>ind_type_neg_one</name> <init>= <expr><call><name>mm_strdup</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><name>indicator_set</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ind_type</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ECPGt_struct</name> <operator>||</operator> <name><name>ind_type</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ECPGt_array</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>mmfatal</name><argument_list>(<argument><expr><name>INDICATOR_NOT_SIMPLE</name></expr></argument>, <argument><expr><literal type="string">"indicator for simple data type has to be simple"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><call><name>ECPGdump_a_simple</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>type</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>str_neg_one</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>ind_type</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ECPGdump_a_simple</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>ind_name</name></expr></argument>, <argument><expr><name><name>ind_type</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>ind_type</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>ind_type_neg_one</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ind_prefix</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str_neg_one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ind_type_neg_one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<default>default:</default>
			<block>{<block_content>
				<comment type="block">/*
				 * Allocate for each, as there are code-paths where the values
				 * get stomped on.
				 */</comment>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>str_neg_one</name> <init>= <expr><call><name>mm_strdup</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>ind_type_neg_one</name> <init>= <expr><call><name>mm_strdup</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><name>indicator_set</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ind_type</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ECPGt_struct</name> <operator>||</operator> <name><name>ind_type</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ECPGt_array</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>mmfatal</name><argument_list>(<argument><expr><name>INDICATOR_NOT_SIMPLE</name></expr></argument>, <argument><expr><literal type="string">"indicator for simple data type has to be simple"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><call><name>ECPGdump_a_simple</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>type</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>arr_str_size</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>arr_str_size</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>arr_str_size</name></expr> </then><else>: <expr><name>str_neg_one</name></expr></else></ternary></expr></argument>, <argument><expr><name>struct_sizeof</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>type</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>ind_type</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ECPGdump_a_simple</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>ind_name</name></expr></argument>, <argument><expr><name><name>ind_type</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>ind_type</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>arr_str_size</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>arr_str_size</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>arr_str_size</name></expr> </then><else>: <expr><name>ind_type_neg_one</name></expr></else></ternary></expr></argument>, <argument><expr><name>ind_struct_sizeof</name></expr></argument>, <argument><expr><name>ind_prefix</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str_neg_one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ind_type_neg_one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>


<comment type="block">/* If size is NULL, then the offset is 0, if not use size as a
   string, it represents the offset needed if we are in an array of structs. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ECPGdump_a_simple</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ECPGttype</name></name></type> <name>type</name></decl></parameter>,
				  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>varcharsize</name></decl></parameter>,
				  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arrsize</name></decl></parameter>,
				  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>size</name></decl></parameter>,
				  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>,
				  <parameter><decl><type><name>int</name></type> <name>counter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>ECPGt_NO_INDICATOR</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"\n\tECPGt_NO_INDICATOR, NULL , 0L, 0L, 0L, "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>ECPGt_descriptor</name></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/* remember that name here already contains quotes (if needed) */</comment>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"\n\tECPGt_descriptor, %s, 1L, 1L, 1L, "</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>ECPGt_sqlda</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"\n\tECPGt_sqlda, &amp;%s, 0L, 0L, 0L, "</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>variable</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>mm_alloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>prefix</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>strlen</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>offset</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>mm_alloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"sizeof(struct varchar_)"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>varcharsize</name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name> <operator>*</operator> <literal type="number">10</literal> <operator>/</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
		<block>{<block_content>
				<comment type="block">/*
				 * we have to use the &amp; operator except for arrays and
				 * pointers
				 */</comment>

			<case>case <expr><name>ECPGt_varchar</name></expr>:</case>

				<comment type="block">/*
				 * we have to use the pointer except for arrays with given
				 * bounds
				 */</comment>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><call><name>atoi</name><argument_list>(<argument><expr><name>arrsize</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
					 <operator>(</operator><call><name>atoi</name><argument_list>(<argument><expr><name>arrsize</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>arrsize</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
					<name>size</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>variable</name></expr></argument>, <argument><expr><literal type="string">"(%s%s)"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>prefix</name></expr> ?</condition><then> <expr><name>prefix</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>variable</name></expr></argument>, <argument><expr><literal type="string">"&amp;(%s%s)"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>prefix</name></expr> ?</condition><then> <expr><name>prefix</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<comment type="block">/*
				 * If we created a varchar structure automatically, counter is
				 * greater than 0.
				 */</comment>
				<if_stmt><if>if <condition>(<expr><name>counter</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="string">"sizeof(struct varchar_%d)"</literal></expr></argument>, <argument><expr><name>counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="string">"sizeof(struct varchar)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<break>break;</break>
			<case>case <expr><name>ECPGt_char</name></expr>:</case>
			<case>case <expr><name>ECPGt_unsigned_char</name></expr>:</case>
			<case>case <expr><name>ECPGt_char_variable</name></expr>:</case>
			<case>case <expr><name>ECPGt_string</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>sizeof_name</name> <init>= <expr><literal type="string">"char"</literal></expr></init></decl>;</decl_stmt>

					<comment type="block">/*
					 * we have to use the pointer except for arrays with given
					 * bounds, ecpglib will distinguish between * and []
					 */</comment>
					<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>atoi</name><argument_list>(<argument><expr><name>varcharsize</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator>
						 <operator>(</operator><call><name>atoi</name><argument_list>(<argument><expr><name>arrsize</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
						 <operator>(</operator><call><name>atoi</name><argument_list>(<argument><expr><name>varcharsize</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>varcharsize</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
						 <operator>(</operator><call><name>atoi</name><argument_list>(<argument><expr><name>arrsize</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>arrsize</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator>
						<operator>&amp;&amp;</operator> <name>size</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>variable</name></expr></argument>, <argument><expr><literal type="string">"(%s%s)"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>prefix</name></expr> ?</condition><then> <expr><name>prefix</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>==</operator> <name>ECPGt_char</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>ECPGt_unsigned_char</name><operator>)</operator> <operator>&amp;&amp;</operator>
							<call><name>strcmp</name><argument_list>(<argument><expr><name>varcharsize</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
						<block>{<block_content>
							<comment type="block">/*
							 * If this is an array of char *, the offset would
							 * be sizeof(char *) and not sizeof(char).
							 */</comment>
							<expr_stmt><expr><name>sizeof_name</name> <operator>=</operator> <literal type="string">"char *"</literal></expr>;</expr_stmt>
						</block_content>}</block></if></if_stmt>
					</block_content>}</block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>variable</name></expr></argument>, <argument><expr><literal type="string">"&amp;(%s%s)"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>prefix</name></expr> ?</condition><then> <expr><name>prefix</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

					<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="string">"(%s)*sizeof(%s)"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>varcharsize</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"1"</literal></expr> </then><else>: <expr><name>varcharsize</name></expr></else></ternary></expr></argument>, <argument><expr><name>sizeof_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block>
			<case>case <expr><name>ECPGt_numeric</name></expr>:</case>

				<comment type="block">/*
				 * we have to use a pointer here
				 */</comment>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>variable</name></expr></argument>, <argument><expr><literal type="string">"&amp;(%s%s)"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>prefix</name></expr> ?</condition><then> <expr><name>prefix</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="string">"sizeof(numeric)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ECPGt_interval</name></expr>:</case>

				<comment type="block">/*
				 * we have to use a pointer here
				 */</comment>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>variable</name></expr></argument>, <argument><expr><literal type="string">"&amp;(%s%s)"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>prefix</name></expr> ?</condition><then> <expr><name>prefix</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="string">"sizeof(interval)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ECPGt_date</name></expr>:</case>

				<comment type="block">/*
				 * we have to use a pointer and translate the variable type
				 */</comment>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>variable</name></expr></argument>, <argument><expr><literal type="string">"&amp;(%s%s)"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>prefix</name></expr> ?</condition><then> <expr><name>prefix</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="string">"sizeof(date)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ECPGt_timestamp</name></expr>:</case>

				<comment type="block">/*
				 * we have to use a pointer and translate the variable type
				 */</comment>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>variable</name></expr></argument>, <argument><expr><literal type="string">"&amp;(%s%s)"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>prefix</name></expr> ?</condition><then> <expr><name>prefix</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="string">"sizeof(timestamp)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ECPGt_const</name></expr>:</case>

				<comment type="block">/*
				 * just dump the const as string
				 */</comment>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>variable</name></expr></argument>, <argument><expr><literal type="string">"\"%s\""</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="string">"strlen(\"%s\")"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>

				<comment type="block">/*
				 * we have to use the pointer except for arrays with given
				 * bounds
				 */</comment>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><call><name>atoi</name><argument_list>(<argument><expr><name>arrsize</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
					 <operator>(</operator><call><name>atoi</name><argument_list>(<argument><expr><name>arrsize</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>arrsize</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
					<name>size</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>variable</name></expr></argument>, <argument><expr><literal type="string">"(%s%s)"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>prefix</name></expr> ?</condition><then> <expr><name>prefix</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>variable</name></expr></argument>, <argument><expr><literal type="string">"&amp;(%s%s)"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>prefix</name></expr> ?</condition><then> <expr><name>prefix</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="string">"sizeof(%s)"</literal></expr></argument>, <argument><expr><call><name>ecpg_type_name</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
		</block_content>}</block></switch>

		<comment type="block">/*
		 * Array size would be -1 for addresses of members within structure,
		 * when pointer to structure is being dumped.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>atoi</name><argument_list>(<argument><expr><name>arrsize</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>size</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>arrsize</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * If size i.e. the size of structure of which this variable is part
		 * of, that gives the offset to the next element, if required
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"\n\t%s,%s,(long)%s,(long)%s,%s, "</literal></expr></argument>, <argument><expr><call><name>get_type</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>variable</name></expr></argument>, <argument><expr><name>varcharsize</name></expr></argument>, <argument><expr><name>arrsize</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"\n\t%s,%s,(long)%s,(long)%s,%s, "</literal></expr></argument>, <argument><expr><call><name>get_type</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>variable</name></expr></argument>, <argument><expr><name>varcharsize</name></expr></argument>, <argument><expr><name>arrsize</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>variable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/* Penetrate a struct and dump the contents. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ECPGdump_a_struct</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ind_name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arrsize</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ECPGtype</name></name> <modifier>*</modifier></type><name>type</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ECPGtype</name></name> <modifier>*</modifier></type><name>ind_type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ind_prefix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * If offset is NULL, then this is the first recursive level. If not then
	 * we are in a struct in a struct and the offset is used as offset.
	 */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>ECPGstruct_member</name></name> <modifier>*</modifier></type><name>p</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>ind_p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>pbuf</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>mm_alloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>prefix</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>strlen</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>ind_pbuf</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>mm_alloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>ind_name</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>ind_prefix</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>strlen</name><argument_list>(<argument><expr><name>ind_prefix</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>atoi</name><argument_list>(<argument><expr><name>arrsize</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>, <argument><expr><literal type="string">"%s%s."</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>prefix</name></expr> ?</condition><then> <expr><name>prefix</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>, <argument><expr><literal type="string">"%s%s-&gt;"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>prefix</name></expr> ?</condition><then> <expr><name>prefix</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>prefix</name> <operator>=</operator> <name>pbuf</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>ind_type</name> <operator>==</operator> <operator>&amp;</operator><name>ecpg_no_indicator</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ind_p</name> <operator>=</operator> <operator>&amp;</operator><name>struct_no_indicator</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>ind_type</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>atoi</name><argument_list>(<argument><expr><name>arrsize</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>ind_pbuf</name></expr></argument>, <argument><expr><literal type="string">"%s%s."</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>ind_prefix</name></expr> ?</condition><then> <expr><name>ind_prefix</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>ind_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>ind_pbuf</name></expr></argument>, <argument><expr><literal type="string">"%s%s-&gt;"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>ind_prefix</name></expr> ?</condition><then> <expr><name>ind_prefix</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>ind_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><name>ind_prefix</name> <operator>=</operator> <name>ind_pbuf</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ind_p</name> <operator>=</operator> <name><name>ind_type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>members</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>members</name></name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ECPGdump_a_type</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
						<argument><expr><ternary><condition><expr><operator>(</operator><name>ind_p</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>ind_p</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,
						<argument><expr><ternary><condition><expr><operator>(</operator><name>ind_p</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>ind_p</name><operator>-&gt;</operator><name>type</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,
						<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
						<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>ind_prefix</name></expr></argument>, <argument><expr><name>arrsize</name></expr></argument>, <argument><expr><name><name>type</name><operator>-&gt;</operator><name>struct_sizeof</name></name></expr></argument>,
						<argument><expr><ternary><condition><expr><operator>(</operator><name>ind_p</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>ind_type</name><operator>-&gt;</operator><name>struct_sizeof</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ind_p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>ind_p</name> <operator>!=</operator> <operator>&amp;</operator><name>struct_no_indicator</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>ind_p</name> <operator>=</operator> <name><name>ind_p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>ind_p</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>mmerror</name><argument_list>(<argument><expr><name>PARSE_ERROR</name></expr></argument>, <argument><expr><name>ET_WARNING</name></expr></argument>, <argument><expr><literal type="string">"indicator struct \"%s\" has too few members"</literal></expr></argument>, <argument><expr><name>ind_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>ind_p</name> <operator>=</operator> <operator>&amp;</operator><name>struct_no_indicator</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>ind_type</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>ind_p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>ind_p</name> <operator>!=</operator> <operator>&amp;</operator><name>struct_no_indicator</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>mmerror</name><argument_list>(<argument><expr><name>PARSE_ERROR</name></expr></argument>, <argument><expr><name>ET_WARNING</name></expr></argument>, <argument><expr><literal type="string">"indicator struct \"%s\" has too many members"</literal></expr></argument>, <argument><expr><name>ind_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ind_pbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ECPGfree_struct_member</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ECPGstruct_member</name></name> <modifier>*</modifier></type><name>rm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<while>while <condition>(<expr><name>rm</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>ECPGstruct_member</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>rm</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>rm</name> <operator>=</operator> <name><name>rm</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ECPGfree_type</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ECPGtype</name></name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_SIMPLE_TYPE</name><argument_list>(<argument><expr><name><name>type</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<switch>switch <condition>(<expr><name><name>type</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>ECPGt_array</name></expr>:</case>
				<switch>switch <condition>(<expr><name><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
				<block>{<block_content>
					<case>case <expr><name>ECPGt_array</name></expr>:</case>
						<expr_stmt><expr><call><name>base_yyerror</name><argument_list>(<argument><expr><literal type="string">"internal error: found multidimensional array\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<case>case <expr><name>ECPGt_struct</name></expr>:</case>
					<case>case <expr><name>ECPGt_union</name></expr>:</case>
						<comment type="block">/* Array of structs. */</comment>
						<expr_stmt><expr><call><name>ECPGfree_struct_member</name><argument_list>(<argument><expr><name><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>members</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					<default>default:</default>
						<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_SIMPLE_TYPE</name><argument_list>(<argument><expr><name><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>base_yyerror</name><argument_list>(<argument><expr><literal type="string">"internal error: unknown datatype, please report this to &lt;pgsql-bugs@postgresql.org&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

						<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>element</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></switch>
				<break>break;</break>
			<case>case <expr><name>ECPGt_struct</name></expr>:</case>
			<case>case <expr><name>ECPGt_union</name></expr>:</case>
				<expr_stmt><expr><call><name>ECPGfree_struct_member</name><argument_list>(<argument><expr><name><name>type</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>members</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>mmerror</name><argument_list>(<argument><expr><name>PARSE_ERROR</name></expr></argument>, <argument><expr><name>ET_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized variable type code %d"</literal></expr></argument>, <argument><expr><name><name>type</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>get_dtype</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>ECPGdtype</name></name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>ECPGd_count</name></expr>:</case>
			<return>return <expr><literal type="string">"ECPGd_countr"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>ECPGd_data</name></expr>:</case>
			<return>return <expr><literal type="string">"ECPGd_data"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>ECPGd_di_code</name></expr>:</case>
			<return>return <expr><literal type="string">"ECPGd_di_code"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>ECPGd_di_precision</name></expr>:</case>
			<return>return <expr><literal type="string">"ECPGd_di_precision"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>ECPGd_indicator</name></expr>:</case>
			<return>return <expr><literal type="string">"ECPGd_indicator"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>ECPGd_key_member</name></expr>:</case>
			<return>return <expr><literal type="string">"ECPGd_key_member"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>ECPGd_length</name></expr>:</case>
			<return>return <expr><literal type="string">"ECPGd_length"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>ECPGd_name</name></expr>:</case>
			<return>return <expr><literal type="string">"ECPGd_name"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>ECPGd_nullable</name></expr>:</case>
			<return>return <expr><literal type="string">"ECPGd_nullable"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>ECPGd_octet</name></expr>:</case>
			<return>return <expr><literal type="string">"ECPGd_octet"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>ECPGd_precision</name></expr>:</case>
			<return>return <expr><literal type="string">"ECPGd_precision"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>ECPGd_ret_length</name></expr>:</case>
			<return>return <expr><literal type="string">"ECPGd_ret_length"</literal></expr>;</return>
		<case>case <expr><name>ECPGd_ret_octet</name></expr>:</case>
			<return>return <expr><literal type="string">"ECPGd_ret_octet"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>ECPGd_scale</name></expr>:</case>
			<return>return <expr><literal type="string">"ECPGd_scale"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>ECPGd_type</name></expr>:</case>
			<return>return <expr><literal type="string">"ECPGd_type"</literal></expr>;</return>
			<break>break;</break>
		<case>case <expr><name>ECPGd_cardinality</name></expr>:</case>
			<return>return <expr><literal type="string">"ECPGd_cardinality"</literal></expr>;</return>
		<default>default:</default>
			<expr_stmt><expr><call><name>mmerror</name><argument_list>(<argument><expr><name>PARSE_ERROR</name></expr></argument>, <argument><expr><name>ET_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized descriptor item code %d"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
