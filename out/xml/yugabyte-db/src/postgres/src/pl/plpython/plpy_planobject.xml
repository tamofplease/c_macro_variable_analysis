<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/pl/plpython/plpy_planobject.c"><comment type="block">/*
 * the PLyPlan class
 *
 * src/pl/plpython/plpy_planobject.c
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpython.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpy_planobject.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpy_cursorobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpy_elog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpy_spi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>PLy_plan_dealloc</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>PLy_plan_cursor</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>PLy_plan_execute</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>PLy_plan_status</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>PLy_plan_doc</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="string">"Store a PostgreSQL plan"</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyMethodDef</name></type> <name><name>PLy_plan_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="string">"cursor"</literal></expr>, <expr><name>PLy_plan_cursor</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"execute"</literal></expr>, <expr><name>PLy_plan_execute</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"status"</literal></expr>, <expr><name>PLy_plan_status</name></expr>, <expr><name>METH_VARARGS</name></expr>, <expr><name>NULL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>PyTypeObject</name></type> <name>PLy_PlanType</name> <init>= <expr><block>{
	<expr><call><name>PyVarObject_HEAD_INIT</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
	<literal type="string">"PLyPlan"</literal></expr>,					<comment type="block">/* tp_name */</comment>
	<expr><sizeof>sizeof<argument_list>(<argument><expr><name>PLyPlanObject</name></expr></argument>)</argument_list></sizeof></expr>,		<comment type="block">/* tp_size */</comment>
	<expr><literal type="number">0</literal></expr>,							<comment type="block">/* tp_itemsize */</comment>

	<comment type="block">/*
	 * methods
	 */</comment>
	<expr><name>PLy_plan_dealloc</name></expr>,			<comment type="block">/* tp_dealloc */</comment>
	<expr><literal type="number">0</literal></expr>,							<comment type="block">/* tp_print */</comment>
	<expr><literal type="number">0</literal></expr>,							<comment type="block">/* tp_getattr */</comment>
	<expr><literal type="number">0</literal></expr>,							<comment type="block">/* tp_setattr */</comment>
	<expr><literal type="number">0</literal></expr>,							<comment type="block">/* tp_compare */</comment>
	<expr><literal type="number">0</literal></expr>,							<comment type="block">/* tp_repr */</comment>
	<expr><literal type="number">0</literal></expr>,							<comment type="block">/* tp_as_number */</comment>
	<expr><literal type="number">0</literal></expr>,							<comment type="block">/* tp_as_sequence */</comment>
	<expr><literal type="number">0</literal></expr>,							<comment type="block">/* tp_as_mapping */</comment>
	<expr><literal type="number">0</literal></expr>,							<comment type="block">/* tp_hash */</comment>
	<expr><literal type="number">0</literal></expr>,							<comment type="block">/* tp_call */</comment>
	<expr><literal type="number">0</literal></expr>,							<comment type="block">/* tp_str */</comment>
	<expr><literal type="number">0</literal></expr>,							<comment type="block">/* tp_getattro */</comment>
	<expr><literal type="number">0</literal></expr>,							<comment type="block">/* tp_setattro */</comment>
	<expr><literal type="number">0</literal></expr>,							<comment type="block">/* tp_as_buffer */</comment>
	<expr><name>Py_TPFLAGS_DEFAULT</name> <operator>|</operator> <name>Py_TPFLAGS_BASETYPE</name></expr>,	<comment type="block">/* tp_flags */</comment>
	<expr><name>PLy_plan_doc</name></expr>,				<comment type="block">/* tp_doc */</comment>
	<expr><literal type="number">0</literal></expr>,							<comment type="block">/* tp_traverse */</comment>
	<expr><literal type="number">0</literal></expr>,							<comment type="block">/* tp_clear */</comment>
	<expr><literal type="number">0</literal></expr>,							<comment type="block">/* tp_richcompare */</comment>
	<expr><literal type="number">0</literal></expr>,							<comment type="block">/* tp_weaklistoffset */</comment>
	<expr><literal type="number">0</literal></expr>,							<comment type="block">/* tp_iter */</comment>
	<expr><literal type="number">0</literal></expr>,							<comment type="block">/* tp_iternext */</comment>
	<expr><name>PLy_plan_methods</name></expr>,			<comment type="block">/* tp_tpmethods */</comment>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>PLy_plan_init_type</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>PyType_Ready</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PLy_PlanType</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not initialize PLy_PlanType"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>PyObject</name> <modifier>*</modifier></type>
<name>PLy_plan_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PLyPlanObject</name> <modifier>*</modifier></type><name>ob</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ob</name> <operator>=</operator> <call><name>PyObject_New</name><argument_list>(<argument><expr><name>PLyPlanObject</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>PLy_PlanType</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>ob</name><operator>-&gt;</operator><name>plan</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ob</name><operator>-&gt;</operator><name>nargs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ob</name><operator>-&gt;</operator><name>types</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ob</name><operator>-&gt;</operator><name>values</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ob</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ob</name><operator>-&gt;</operator><name>mcxt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator> <name>ob</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>is_PLyPlanObject</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>ob</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>ob</name><operator>-&gt;</operator><name>ob_type</name></name> <operator>==</operator> <operator>&amp;</operator><name>PLy_PlanType</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>PLy_plan_dealloc</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PLyPlanObject</name> <modifier>*</modifier></type><name>ob</name> <init>= <expr><operator>(</operator><name>PLyPlanObject</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ob</name><operator>-&gt;</operator><name>plan</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>SPI_freeplan</name><argument_list>(<argument><expr><name><name>ob</name><operator>-&gt;</operator><name>plan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ob</name><operator>-&gt;</operator><name>plan</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ob</name><operator>-&gt;</operator><name>mcxt</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>MemoryContextDelete</name><argument_list>(<argument><expr><name><name>ob</name><operator>-&gt;</operator><name>mcxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ob</name><operator>-&gt;</operator><name>mcxt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name><name>arg</name><operator>-&gt;</operator><name>ob_type</name><operator>-&gt;</operator><name>tp_free</name></name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>PLy_plan_cursor</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>planargs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"|O"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>planargs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>PLy_cursor_plan</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>planargs</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>PLy_plan_execute</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type>		<name>limit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"|Ol"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>limit</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>PLy_spi_execute_plan</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>PLy_plan_status</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">":status"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_True</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>Py_True</name></expr>;</return>
		<comment type="block">/* return PyInt_FromLong(self-&gt;status); */</comment>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
