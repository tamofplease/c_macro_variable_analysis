<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/pl/plpython/plpy_typeio.c"><comment type="block">/*
 * transforming Datums to Python objects and vice versa
 *
 * src/pl/plpython/plpy_typeio.c
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mb/pg_wchar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/fmgroids.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpython.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpy_typeio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpy_elog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpy_main.h"</cpp:file></cpp:include>


<comment type="block">/* conversion from Datums to Python objects */</comment>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>PLyBool_FromBool</name><parameter_list>(<parameter><decl><type><name>PLyDatumToOb</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>d</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>PLyFloat_FromFloat4</name><parameter_list>(<parameter><decl><type><name>PLyDatumToOb</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>d</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>PLyFloat_FromFloat8</name><parameter_list>(<parameter><decl><type><name>PLyDatumToOb</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>d</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>PLyDecimal_FromNumeric</name><parameter_list>(<parameter><decl><type><name>PLyDatumToOb</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>d</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>PLyInt_FromInt16</name><parameter_list>(<parameter><decl><type><name>PLyDatumToOb</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>d</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>PLyInt_FromInt32</name><parameter_list>(<parameter><decl><type><name>PLyDatumToOb</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>d</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>PLyLong_FromInt64</name><parameter_list>(<parameter><decl><type><name>PLyDatumToOb</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>d</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>PLyLong_FromOid</name><parameter_list>(<parameter><decl><type><name>PLyDatumToOb</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>d</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>PLyBytes_FromBytea</name><parameter_list>(<parameter><decl><type><name>PLyDatumToOb</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>d</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>PLyString_FromScalar</name><parameter_list>(<parameter><decl><type><name>PLyDatumToOb</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>d</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>PLyObject_FromTransform</name><parameter_list>(<parameter><decl><type><name>PLyDatumToOb</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>d</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>PLyList_FromArray</name><parameter_list>(<parameter><decl><type><name>PLyDatumToOb</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>d</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>PLyList_FromArray_recurse</name><parameter_list>(<parameter><decl><type><name>PLyDatumToOb</name> <modifier>*</modifier></type><name>elm</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dims</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ndim</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dim</name></decl></parameter>,
						  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dataptr_p</name></decl></parameter>, <parameter><decl><type><name>bits8</name> <modifier>*</modifier><modifier>*</modifier></type><name>bitmap_p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bitmask_p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>PLyDict_FromComposite</name><parameter_list>(<parameter><decl><type><name>PLyDatumToOb</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>d</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>PLyDict_FromTuple</name><parameter_list>(<parameter><decl><type><name>PLyDatumToOb</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>HeapTuple</name></type> <name>tuple</name></decl></parameter>, <parameter><decl><type><name>TupleDesc</name></type> <name>desc</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* conversion from Python objects to Datums */</comment>
<function_decl><type><specifier>static</specifier> <name>Datum</name></type> <name>PLyObject_ToBool</name><parameter_list>(<parameter><decl><type><name>PLyObToDatum</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>plrv</name></decl></parameter>,
				 <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isnull</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>inarray</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Datum</name></type> <name>PLyObject_ToBytea</name><parameter_list>(<parameter><decl><type><name>PLyObToDatum</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>plrv</name></decl></parameter>,
				  <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isnull</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>inarray</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Datum</name></type> <name>PLyObject_ToComposite</name><parameter_list>(<parameter><decl><type><name>PLyObToDatum</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>plrv</name></decl></parameter>,
					  <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isnull</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>inarray</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Datum</name></type> <name>PLyObject_ToScalar</name><parameter_list>(<parameter><decl><type><name>PLyObToDatum</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>plrv</name></decl></parameter>,
				   <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isnull</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>inarray</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Datum</name></type> <name>PLyObject_ToDomain</name><parameter_list>(<parameter><decl><type><name>PLyObToDatum</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>plrv</name></decl></parameter>,
				   <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isnull</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>inarray</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Datum</name></type> <name>PLyObject_ToTransform</name><parameter_list>(<parameter><decl><type><name>PLyObToDatum</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>plrv</name></decl></parameter>,
					  <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isnull</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>inarray</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Datum</name></type> <name>PLySequence_ToArray</name><parameter_list>(<parameter><decl><type><name>PLyObToDatum</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>plrv</name></decl></parameter>,
					<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isnull</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>inarray</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>PLySequence_ToArray_recurse</name><parameter_list>(<parameter><decl><type><name>PLyObToDatum</name> <modifier>*</modifier></type><name>elm</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>list</name></decl></parameter>,
							<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dims</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ndim</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dim</name></decl></parameter>,
							<parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>elems</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>nulls</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>currelem</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* conversion from Python objects to composite Datums */</comment>
<function_decl><type><specifier>static</specifier> <name>Datum</name></type> <name>PLyString_ToComposite</name><parameter_list>(<parameter><decl><type><name>PLyObToDatum</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>inarray</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Datum</name></type> <name>PLyMapping_ToComposite</name><parameter_list>(<parameter><decl><type><name>PLyObToDatum</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>TupleDesc</name></type> <name>desc</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>mapping</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Datum</name></type> <name>PLySequence_ToComposite</name><parameter_list>(<parameter><decl><type><name>PLyObToDatum</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>TupleDesc</name></type> <name>desc</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>sequence</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Datum</name></type> <name>PLyGenericObject_ToComposite</name><parameter_list>(<parameter><decl><type><name>PLyObToDatum</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>TupleDesc</name></type> <name>desc</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>inarray</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * Conversion functions.  Remember output from Python is input to
 * PostgreSQL, and vice versa.
 */</comment>

<comment type="block">/*
 * Perform input conversion, given correctly-set-up state information.
 *
 * This is the outer-level entry point for any input conversion.  Internally,
 * the conversion functions recurse directly to each other.
 */</comment>
<function><type><name>PyObject</name> <modifier>*</modifier></type>
<name>PLy_input_convert</name><parameter_list>(<parameter><decl><type><name>PLyDatumToOb</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PLyExecutionContext</name> <modifier>*</modifier></type><name>exec_ctx</name> <init>= <expr><call><name>PLy_current_execution_context</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>scratch_context</name> <init>= <expr><call><name>PLy_get_scratch_context</name><argument_list>(<argument><expr><name>exec_ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Do the work in the scratch context to avoid leaking memory from the
	 * datatype output function calls.  (The individual PLyDatumToObFunc
	 * functions can't reset the scratch context, because they recurse and an
	 * inner one might clobber data an outer one still needs.  So we do it
	 * once at the outermost recursion level.)
	 *
	 * We reset the scratch context before, not after, each conversion cycle.
	 * This way we aren't on the hook to release a Python refcount on the
	 * result object in case MemoryContextReset throws an error.
	 */</comment>
	<expr_stmt><expr><call><name>MemoryContextReset</name><argument_list>(<argument><expr><name>scratch_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>scratch_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>arg</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Perform output conversion, given correctly-set-up state information.
 *
 * This is the outer-level entry point for any output conversion.  Internally,
 * the conversion functions recurse directly to each other.
 *
 * The result, as well as any cruft generated along the way, are in the
 * current memory context.  Caller is responsible for cleanup.
 */</comment>
<function><type><name>Datum</name></type>
<name>PLy_output_convert</name><parameter_list>(<parameter><decl><type><name>PLyObToDatum</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isnull</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* at outer level, we are not considering an array element */</comment>
	<return>return <expr><call><name><name>arg</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>isnull</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Transform a tuple into a Python dict object.
 *
 * Note: the tupdesc must match the one used to set up *arg.  We could
 * insist that this function lookup the tupdesc from what is in *arg,
 * but in practice all callers have the right tupdesc available.
 */</comment>
<function><type><name>PyObject</name> <modifier>*</modifier></type>
<name>PLy_input_from_tuple</name><parameter_list>(<parameter><decl><type><name>PLyDatumToOb</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>HeapTuple</name></type> <name>tuple</name></decl></parameter>, <parameter><decl><type><name>TupleDesc</name></type> <name>desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>dict</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PLyExecutionContext</name> <modifier>*</modifier></type><name>exec_ctx</name> <init>= <expr><call><name>PLy_current_execution_context</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>scratch_context</name> <init>= <expr><call><name>PLy_get_scratch_context</name><argument_list>(<argument><expr><name>exec_ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * As in PLy_input_convert, do the work in the scratch context.
	 */</comment>
	<expr_stmt><expr><call><name>MemoryContextReset</name><argument_list>(<argument><expr><name>scratch_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>scratch_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>dict</name> <operator>=</operator> <call><name>PLyDict_FromTuple</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>dict</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize, or re-initialize, per-column input info for a composite type.
 *
 * This is separate from PLy_input_setup_func() because in cases involving
 * anonymous record types, we need to be passed the tupdesc explicitly.
 * It's caller's responsibility that the tupdesc has adequate lifespan
 * in such cases.  If the tupdesc is for a named composite or registered
 * record type, it does not need to be long-lived.
 */</comment>
<function><type><name>void</name></type>
<name>PLy_input_setup_tuple</name><parameter_list>(<parameter><decl><type><name>PLyDatumToOb</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>TupleDesc</name></type> <name>desc</name></decl></parameter>, <parameter><decl><type><name>PLyProcedure</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<comment type="block">/* We should be working on a previously-set-up struct */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>arg</name><operator>-&gt;</operator><name>func</name></name> <operator>==</operator> <name>PLyDict_FromComposite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Save pointer to tupdesc, but only if this is an anonymous record type */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>arg</name><operator>-&gt;</operator><name>typoid</name></name> <operator>==</operator> <name>RECORDOID</name> <operator>&amp;&amp;</operator> <name><name>arg</name><operator>-&gt;</operator><name>typmod</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>recdesc</name></name> <operator>=</operator> <name>desc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* (Re)allocate atts array as needed */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>natts</name></name> <operator>!=</operator> <name><name>desc</name><operator>-&gt;</operator><name>natts</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>atts</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>atts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>natts</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>atts</name></name> <operator>=</operator> <operator>(</operator><name>PLyDatumToOb</name> <operator>*</operator><operator>)</operator>
			<call><name>MemoryContextAllocZero</name><argument_list>(<argument><expr><name><name>arg</name><operator>-&gt;</operator><name>mcxt</name></name></expr></argument>,
								   <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>natts</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PLyDatumToOb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Fill the atts entries, except for dropped columns */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>attr</name> <init>= <expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PLyDatumToOb</name> <modifier>*</modifier></type><name>att</name> <init>= <expr><operator>&amp;</operator><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>atts</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>attisdropped</name></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>att</name><operator>-&gt;</operator><name>typoid</name></name> <operator>==</operator> <name><name>attr</name><operator>-&gt;</operator><name>atttypid</name></name> <operator>&amp;&amp;</operator> <name><name>att</name><operator>-&gt;</operator><name>typmod</name></name> <operator>==</operator> <name><name>attr</name><operator>-&gt;</operator><name>atttypmod</name></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>			<comment type="block">/* already set up this entry */</comment>

		<expr_stmt><expr><call><name>PLy_input_setup_func</name><argument_list>(<argument><expr><name>att</name></expr></argument>, <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>mcxt</name></name></expr></argument>,
							 <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>atttypid</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>atttypmod</name></name></expr></argument>,
							 <argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize, or re-initialize, per-column output info for a composite type.
 *
 * This is separate from PLy_output_setup_func() because in cases involving
 * anonymous record types, we need to be passed the tupdesc explicitly.
 * It's caller's responsibility that the tupdesc has adequate lifespan
 * in such cases.  If the tupdesc is for a named composite or registered
 * record type, it does not need to be long-lived.
 */</comment>
<function><type><name>void</name></type>
<name>PLy_output_setup_tuple</name><parameter_list>(<parameter><decl><type><name>PLyObToDatum</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>TupleDesc</name></type> <name>desc</name></decl></parameter>, <parameter><decl><type><name>PLyProcedure</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<comment type="block">/* We should be working on a previously-set-up struct */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>arg</name><operator>-&gt;</operator><name>func</name></name> <operator>==</operator> <name>PLyObject_ToComposite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Save pointer to tupdesc, but only if this is an anonymous record type */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>arg</name><operator>-&gt;</operator><name>typoid</name></name> <operator>==</operator> <name>RECORDOID</name> <operator>&amp;&amp;</operator> <name><name>arg</name><operator>-&gt;</operator><name>typmod</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>recdesc</name></name> <operator>=</operator> <name>desc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* (Re)allocate atts array as needed */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>natts</name></name> <operator>!=</operator> <name><name>desc</name><operator>-&gt;</operator><name>natts</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>atts</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>atts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>natts</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>atts</name></name> <operator>=</operator> <operator>(</operator><name>PLyObToDatum</name> <operator>*</operator><operator>)</operator>
			<call><name>MemoryContextAllocZero</name><argument_list>(<argument><expr><name><name>arg</name><operator>-&gt;</operator><name>mcxt</name></name></expr></argument>,
								   <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>natts</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PLyObToDatum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Fill the atts entries, except for dropped columns */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>attr</name> <init>= <expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PLyObToDatum</name> <modifier>*</modifier></type><name>att</name> <init>= <expr><operator>&amp;</operator><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>atts</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>attisdropped</name></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>att</name><operator>-&gt;</operator><name>typoid</name></name> <operator>==</operator> <name><name>attr</name><operator>-&gt;</operator><name>atttypid</name></name> <operator>&amp;&amp;</operator> <name><name>att</name><operator>-&gt;</operator><name>typmod</name></name> <operator>==</operator> <name><name>attr</name><operator>-&gt;</operator><name>atttypmod</name></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>			<comment type="block">/* already set up this entry */</comment>

		<expr_stmt><expr><call><name>PLy_output_setup_func</name><argument_list>(<argument><expr><name>att</name></expr></argument>, <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>mcxt</name></name></expr></argument>,
							  <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>atttypid</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>-&gt;</operator><name>atttypmod</name></name></expr></argument>,
							  <argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Set up output info for a PL/Python function returning record.
 *
 * Note: the given tupdesc is not necessarily long-lived.
 */</comment>
<function><type><name>void</name></type>
<name>PLy_output_setup_record</name><parameter_list>(<parameter><decl><type><name>PLyObToDatum</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>TupleDesc</name></type> <name>desc</name></decl></parameter>, <parameter><decl><type><name>PLyProcedure</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Makes no sense unless RECORD */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>arg</name><operator>-&gt;</operator><name>typoid</name></name> <operator>==</operator> <name>RECORDOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>tdtypeid</name></name> <operator>==</operator> <name>RECORDOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Bless the record type if not already done.  We'd have to do this anyway
	 * to return a tuple, so we might as well force the issue so we can use
	 * the known-record-type code path.
	 */</comment>
	<expr_stmt><expr><call><name>BlessTupleDesc</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Update arg-&gt;typmod, and clear the recdesc link if it's changed. The
	 * next call of PLyObject_ToComposite will look up a long-lived tupdesc
	 * for the record type.
	 */</comment>
	<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>typmod</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>tdtypmod</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>recdesc</name></name> <operator>&amp;&amp;</operator>
		<name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>recdesc</name><operator>-&gt;</operator><name>tdtypmod</name></name> <operator>!=</operator> <name><name>arg</name><operator>-&gt;</operator><name>typmod</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>recdesc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Update derived data if necessary */</comment>
	<expr_stmt><expr><call><name>PLy_output_setup_tuple</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Recursively initialize the PLyObToDatum structure(s) needed to construct
 * a SQL value of the specified typeOid/typmod from a Python value.
 * (But note that at this point we may have RECORDOID/-1, ie, an indeterminate
 * record type.)
 * proc is used to look up transform functions.
 */</comment>
<function><type><name>void</name></type>
<name>PLy_output_setup_func</name><parameter_list>(<parameter><decl><type><name>PLyObToDatum</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>MemoryContext</name></type> <name>arg_mcxt</name></decl></parameter>,
					  <parameter><decl><type><name>Oid</name></type> <name>typeOid</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>typmod</name></decl></parameter>,
					  <parameter><decl><type><name>PLyProcedure</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TypeCacheEntry</name> <modifier>*</modifier></type><name>typentry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name>typtype</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>trfuncid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>typinput</name></decl>;</decl_stmt>

	<comment type="block">/* Since this is recursive, it could theoretically be driven to overflow */</comment>
	<expr_stmt><expr><call><name>check_stack_depth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>typoid</name></name> <operator>=</operator> <name>typeOid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>typmod</name></name> <operator>=</operator> <name>typmod</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>mcxt</name></name> <operator>=</operator> <name>arg_mcxt</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Fetch typcache entry for the target type, asking for whatever info
	 * we'll need later.  RECORD is a special case: just treat it as composite
	 * without bothering with the typcache entry.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>typeOid</name> <operator>!=</operator> <name>RECORDOID</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>typentry</name> <operator>=</operator> <call><name>lookup_type_cache</name><argument_list>(<argument><expr><name>typeOid</name></expr></argument>, <argument><expr><name>TYPECACHE_DOMAIN_BASE_INFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>typtype</name> <operator>=</operator> <name><name>typentry</name><operator>-&gt;</operator><name>typtype</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>typbyval</name></name> <operator>=</operator> <name><name>typentry</name><operator>-&gt;</operator><name>typbyval</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>typlen</name></name> <operator>=</operator> <name><name>typentry</name><operator>-&gt;</operator><name>typlen</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>typalign</name></name> <operator>=</operator> <name><name>typentry</name><operator>-&gt;</operator><name>typalign</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>typentry</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>typtype</name> <operator>=</operator> <name>TYPTYPE_COMPOSITE</name></expr>;</expr_stmt>
		<comment type="block">/* hard-wired knowledge about type RECORD: */</comment>
		<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>typbyval</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>typlen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>typalign</name></name> <operator>=</operator> <literal type="char">'d'</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * Choose conversion method.  Note that transform functions are checked
	 * for composite and scalar types, but not for arrays or domains.  This is
	 * somewhat historical, but we'd have a problem allowing them on domains,
	 * since we drill down through all levels of a domain nest without looking
	 * at the intermediate levels at all.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>typtype</name> <operator>==</operator> <name>TYPTYPE_DOMAIN</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Domain */</comment>
		<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>PLyObject_ToDomain</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>domain</name><operator>.</operator><name>domain_info</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<comment type="block">/* Recursively set up conversion info for the element type */</comment>
		<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>domain</name><operator>.</operator><name>base</name></name> <operator>=</operator> <operator>(</operator><name>PLyObToDatum</name> <operator>*</operator><operator>)</operator>
			<call><name>MemoryContextAllocZero</name><argument_list>(<argument><expr><name>arg_mcxt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PLyObToDatum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PLy_output_setup_func</name><argument_list>(<argument><expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>domain</name><operator>.</operator><name>base</name></name></expr></argument>, <argument><expr><name>arg_mcxt</name></expr></argument>,
							  <argument><expr><name><name>typentry</name><operator>-&gt;</operator><name>domainBaseType</name></name></expr></argument>,
							  <argument><expr><name><name>typentry</name><operator>-&gt;</operator><name>domainBaseTypmod</name></name></expr></argument>,
							  <argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>typentry</name> <operator>&amp;&amp;</operator>
			 <call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>typentry</name><operator>-&gt;</operator><name>typelem</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>typentry</name><operator>-&gt;</operator><name>typlen</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Standard varlena array (cf. get_element_type) */</comment>
		<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>PLySequence_ToArray</name></expr>;</expr_stmt>
		<comment type="block">/* Get base type OID to insert into constructed array */</comment>
		<comment type="block">/* (note this might not be the same as the immediate child type) */</comment>
		<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>elmbasetype</name></name> <operator>=</operator> <call><name>getBaseType</name><argument_list>(<argument><expr><name><name>typentry</name><operator>-&gt;</operator><name>typelem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Recursively set up conversion info for the element type */</comment>
		<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>elm</name></name> <operator>=</operator> <operator>(</operator><name>PLyObToDatum</name> <operator>*</operator><operator>)</operator>
			<call><name>MemoryContextAllocZero</name><argument_list>(<argument><expr><name>arg_mcxt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PLyObToDatum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PLy_output_setup_func</name><argument_list>(<argument><expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>elm</name></name></expr></argument>, <argument><expr><name>arg_mcxt</name></expr></argument>,
							  <argument><expr><name><name>typentry</name><operator>-&gt;</operator><name>typelem</name></name></expr></argument>, <argument><expr><name>typmod</name></expr></argument>,
							  <argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><name>trfuncid</name> <operator>=</operator> <call><name>get_transform_tosql</name><argument_list>(<argument><expr><name>typeOid</name></expr></argument>,
											 <argument><expr><name><name>proc</name><operator>-&gt;</operator><name>langid</name></name></expr></argument>,
											 <argument><expr><name><name>proc</name><operator>-&gt;</operator><name>trftypes</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>PLyObject_ToTransform</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fmgr_info_cxt</name><argument_list>(<argument><expr><name>trfuncid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>transform</name><operator>.</operator><name>typtransform</name></name></expr></argument>, <argument><expr><name>arg_mcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>typtype</name> <operator>==</operator> <name>TYPTYPE_COMPOSITE</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Named composite type, or RECORD */</comment>
		<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>PLyObject_ToComposite</name></expr>;</expr_stmt>
		<comment type="block">/* We'll set up the per-field data later */</comment>
		<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>recdesc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>typentry</name></name> <operator>=</operator> <name>typentry</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>tupdescid</name></name> <operator>=</operator> <name>INVALID_TUPLEDESC_IDENTIFIER</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>atts</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>natts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<comment type="block">/* Mark this invalid till needed, too */</comment>
		<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>recinfunc</name><operator>.</operator><name>fn_oid</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* Scalar type, but we have a couple of special cases */</comment>
		<switch>switch <condition>(<expr><name>typeOid</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>BOOLOID</name></expr>:</case>
				<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>PLyObject_ToBool</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>BYTEAOID</name></expr>:</case>
				<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>PLyObject_ToBytea</name></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>PLyObject_ToScalar</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>getTypeInputInfo</name><argument_list>(<argument><expr><name>typeOid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>typinput</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>scalar</name><operator>.</operator><name>typioparam</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>fmgr_info_cxt</name><argument_list>(<argument><expr><name>typinput</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>scalar</name><operator>.</operator><name>typfunc</name></name></expr></argument>, <argument><expr><name>arg_mcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Recursively initialize the PLyDatumToOb structure(s) needed to construct
 * a Python value from a SQL value of the specified typeOid/typmod.
 * (But note that at this point we may have RECORDOID/-1, ie, an indeterminate
 * record type.)
 * proc is used to look up transform functions.
 */</comment>
<function><type><name>void</name></type>
<name>PLy_input_setup_func</name><parameter_list>(<parameter><decl><type><name>PLyDatumToOb</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>MemoryContext</name></type> <name>arg_mcxt</name></decl></parameter>,
					 <parameter><decl><type><name>Oid</name></type> <name>typeOid</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>typmod</name></decl></parameter>,
					 <parameter><decl><type><name>PLyProcedure</name> <modifier>*</modifier></type><name>proc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TypeCacheEntry</name> <modifier>*</modifier></type><name>typentry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name>typtype</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>trfuncid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>typoutput</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>typisvarlena</name></decl>;</decl_stmt>

	<comment type="block">/* Since this is recursive, it could theoretically be driven to overflow */</comment>
	<expr_stmt><expr><call><name>check_stack_depth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>typoid</name></name> <operator>=</operator> <name>typeOid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>typmod</name></name> <operator>=</operator> <name>typmod</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>mcxt</name></name> <operator>=</operator> <name>arg_mcxt</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Fetch typcache entry for the target type, asking for whatever info
	 * we'll need later.  RECORD is a special case: just treat it as composite
	 * without bothering with the typcache entry.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>typeOid</name> <operator>!=</operator> <name>RECORDOID</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>typentry</name> <operator>=</operator> <call><name>lookup_type_cache</name><argument_list>(<argument><expr><name>typeOid</name></expr></argument>, <argument><expr><name>TYPECACHE_DOMAIN_BASE_INFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>typtype</name> <operator>=</operator> <name><name>typentry</name><operator>-&gt;</operator><name>typtype</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>typbyval</name></name> <operator>=</operator> <name><name>typentry</name><operator>-&gt;</operator><name>typbyval</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>typlen</name></name> <operator>=</operator> <name><name>typentry</name><operator>-&gt;</operator><name>typlen</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>typalign</name></name> <operator>=</operator> <name><name>typentry</name><operator>-&gt;</operator><name>typalign</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>typentry</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>typtype</name> <operator>=</operator> <name>TYPTYPE_COMPOSITE</name></expr>;</expr_stmt>
		<comment type="block">/* hard-wired knowledge about type RECORD: */</comment>
		<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>typbyval</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>typlen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>typalign</name></name> <operator>=</operator> <literal type="char">'d'</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * Choose conversion method.  Note that transform functions are checked
	 * for composite and scalar types, but not for arrays or domains.  This is
	 * somewhat historical, but we'd have a problem allowing them on domains,
	 * since we drill down through all levels of a domain nest without looking
	 * at the intermediate levels at all.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>typtype</name> <operator>==</operator> <name>TYPTYPE_DOMAIN</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Domain --- we don't care, just recurse down to the base type */</comment>
		<expr_stmt><expr><call><name>PLy_input_setup_func</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>arg_mcxt</name></expr></argument>,
							 <argument><expr><name><name>typentry</name><operator>-&gt;</operator><name>domainBaseType</name></name></expr></argument>,
							 <argument><expr><name><name>typentry</name><operator>-&gt;</operator><name>domainBaseTypmod</name></name></expr></argument>,
							 <argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>typentry</name> <operator>&amp;&amp;</operator>
			 <call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>typentry</name><operator>-&gt;</operator><name>typelem</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>typentry</name><operator>-&gt;</operator><name>typlen</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Standard varlena array (cf. get_element_type) */</comment>
		<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>PLyList_FromArray</name></expr>;</expr_stmt>
		<comment type="block">/* Recursively set up conversion info for the element type */</comment>
		<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>elm</name></name> <operator>=</operator> <operator>(</operator><name>PLyDatumToOb</name> <operator>*</operator><operator>)</operator>
			<call><name>MemoryContextAllocZero</name><argument_list>(<argument><expr><name>arg_mcxt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PLyDatumToOb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PLy_input_setup_func</name><argument_list>(<argument><expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>elm</name></name></expr></argument>, <argument><expr><name>arg_mcxt</name></expr></argument>,
							 <argument><expr><name><name>typentry</name><operator>-&gt;</operator><name>typelem</name></name></expr></argument>, <argument><expr><name>typmod</name></expr></argument>,
							 <argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><name>trfuncid</name> <operator>=</operator> <call><name>get_transform_fromsql</name><argument_list>(<argument><expr><name>typeOid</name></expr></argument>,
											   <argument><expr><name><name>proc</name><operator>-&gt;</operator><name>langid</name></name></expr></argument>,
											   <argument><expr><name><name>proc</name><operator>-&gt;</operator><name>trftypes</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>PLyObject_FromTransform</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fmgr_info_cxt</name><argument_list>(<argument><expr><name>trfuncid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>transform</name><operator>.</operator><name>typtransform</name></name></expr></argument>, <argument><expr><name>arg_mcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>typtype</name> <operator>==</operator> <name>TYPTYPE_COMPOSITE</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Named composite type, or RECORD */</comment>
		<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>PLyDict_FromComposite</name></expr>;</expr_stmt>
		<comment type="block">/* We'll set up the per-field data later */</comment>
		<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>recdesc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>typentry</name></name> <operator>=</operator> <name>typentry</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>tupdescid</name></name> <operator>=</operator> <name>INVALID_TUPLEDESC_IDENTIFIER</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>atts</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>natts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* Scalar type, but we have a couple of special cases */</comment>
		<switch>switch <condition>(<expr><name>typeOid</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>BOOLOID</name></expr>:</case>
				<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>PLyBool_FromBool</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>FLOAT4OID</name></expr>:</case>
				<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>PLyFloat_FromFloat4</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>FLOAT8OID</name></expr>:</case>
				<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>PLyFloat_FromFloat8</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>NUMERICOID</name></expr>:</case>
				<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>PLyDecimal_FromNumeric</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>INT2OID</name></expr>:</case>
				<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>PLyInt_FromInt16</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>INT4OID</name></expr>:</case>
				<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>PLyInt_FromInt32</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>INT8OID</name></expr>:</case>
				<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>PLyLong_FromInt64</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>OIDOID</name></expr>:</case>
				<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>PLyLong_FromOid</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>BYTEAOID</name></expr>:</case>
				<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>PLyBytes_FromBytea</name></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>func</name></name> <operator>=</operator> <name>PLyString_FromScalar</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>getTypeOutputInfo</name><argument_list>(<argument><expr><name>typeOid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>typoutput</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>typisvarlena</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>fmgr_info_cxt</name><argument_list>(<argument><expr><name>typoutput</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>scalar</name><operator>.</operator><name>typfunc</name></name></expr></argument>, <argument><expr><name>arg_mcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Special-purpose input converters.
 */</comment>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>PLyBool_FromBool</name><parameter_list>(<parameter><decl><type><name>PLyDatumToOb</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>DatumGetBool</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>Py_RETURN_TRUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>Py_RETURN_FALSE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>PLyFloat_FromFloat4</name><parameter_list>(<parameter><decl><type><name>PLyDatumToOb</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>PyFloat_FromDouble</name><argument_list>(<argument><expr><call><name>DatumGetFloat4</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>PLyFloat_FromFloat8</name><parameter_list>(<parameter><decl><type><name>PLyDatumToOb</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>PyFloat_FromDouble</name><argument_list>(<argument><expr><call><name>DatumGetFloat8</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>PLyDecimal_FromNumeric</name><parameter_list>(<parameter><decl><type><name>PLyDatumToOb</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>decimal_constructor</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>pyvalue</name></decl>;</decl_stmt>

	<comment type="block">/* Try to import cdecimal.  If it doesn't exist, fall back to decimal. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>decimal_constructor</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>decimal_module</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>decimal_module</name> <operator>=</operator> <call><name>PyImport_ImportModule</name><argument_list>(<argument><expr><literal type="string">"cdecimal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>decimal_module</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>decimal_module</name> <operator>=</operator> <call><name>PyImport_ImportModule</name><argument_list>(<argument><expr><literal type="string">"decimal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>decimal_module</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PLy_elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not import a module for Decimal constructor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>decimal_constructor</name> <operator>=</operator> <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>decimal_module</name></expr></argument>, <argument><expr><literal type="string">"Decimal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>decimal_constructor</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PLy_elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"no Decimal attribute in module"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>DatumGetCString</name><argument_list>(<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>numeric_out</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pyvalue</name> <operator>=</operator> <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>decimal_constructor</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pyvalue</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PLy_elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"conversion from numeric to Decimal failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>pyvalue</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>PLyInt_FromInt16</name><parameter_list>(<parameter><decl><type><name>PLyDatumToOb</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><call><name>DatumGetInt16</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>PLyInt_FromInt32</name><parameter_list>(<parameter><decl><type><name>PLyDatumToOb</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><call><name>DatumGetInt32</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>PLyLong_FromInt64</name><parameter_list>(<parameter><decl><type><name>PLyDatumToOb</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>PyLong_FromLongLong</name><argument_list>(<argument><expr><call><name>DatumGetInt64</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>PLyLong_FromOid</name><parameter_list>(<parameter><decl><type><name>PLyDatumToOb</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>PyLong_FromUnsignedLong</name><argument_list>(<argument><expr><call><name>DatumGetObjectId</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>PLyBytes_FromBytea</name><parameter_list>(<parameter><decl><type><name>PLyDatumToOb</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>txt</name> <init>= <expr><call><name>DatumGetByteaPP</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>size</name> <init>= <expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>PyBytes_FromStringAndSize</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Generic input conversion using a SQL type's output function.
 */</comment>
<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>PLyString_FromScalar</name><parameter_list>(<parameter><decl><type><name>PLyDatumToOb</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>x</name> <init>= <expr><call><name>OutputFunctionCall</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>scalar</name><operator>.</operator><name>typfunc</name></name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>r</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Convert using a from-SQL transform function.
 */</comment>
<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>PLyObject_FromTransform</name><parameter_list>(<parameter><decl><type><name>PLyDatumToOb</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>t</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>FunctionCall1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>transform</name><operator>.</operator><name>typtransform</name></name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Convert a SQL array to a Python list.
 */</comment>
<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>PLyList_FromArray</name><parameter_list>(<parameter><decl><type><name>PLyDatumToOb</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ArrayType</name>  <modifier>*</modifier></type><name>array</name> <init>= <expr><call><name>DatumGetArrayTypeP</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PLyDatumToOb</name> <modifier>*</modifier></type><name>elm</name> <init>= <expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>elm</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>ndim</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name>		   <modifier>*</modifier></type><name>dims</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>dataptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bits8</name>	   <modifier>*</modifier></type><name>bitmap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>bitmask</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ARR_NDIM</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>PyList_New</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Array dimensions and left bounds */</comment>
	<expr_stmt><expr><name>ndim</name> <operator>=</operator> <call><name>ARR_NDIM</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>dims</name> <operator>=</operator> <call><name>ARR_DIMS</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>ndim</name> <operator>&lt;</operator> <name>MAXDIM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * We iterate the SQL array in the physical order it's stored in the
	 * datum. For example, for a 3-dimensional array the order of iteration
	 * would be the following: [0,0,0] elements through [0,0,k], then [0,1,0]
	 * through [0,1,k] till [0,m,k], then [1,0,0] through [1,0,k] till
	 * [1,m,k], and so on.
	 *
	 * In Python, there are no multi-dimensional lists as such, but they are
	 * represented as a list of lists. So a 3-d array of [n,m,k] elements is a
	 * list of n m-element arrays, each element of which is k-element array.
	 * PLyList_FromArray_recurse() builds the Python list for a single
	 * dimension, and recurses for the next inner dimension.
	 */</comment>
	<expr_stmt><expr><name>dataptr</name> <operator>=</operator> <call><name>ARR_DATA_PTR</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>bitmap</name> <operator>=</operator> <call><name>ARR_NULLBITMAP</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>bitmask</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<return>return <expr><call><name>PLyList_FromArray_recurse</name><argument_list>(<argument><expr><name>elm</name></expr></argument>, <argument><expr><name>dims</name></expr></argument>, <argument><expr><name>ndim</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
									 <argument><expr><operator>&amp;</operator><name>dataptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitmap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitmask</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>PLyList_FromArray_recurse</name><parameter_list>(<parameter><decl><type><name>PLyDatumToOb</name> <modifier>*</modifier></type><name>elm</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dims</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ndim</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dim</name></decl></parameter>,
						  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dataptr_p</name></decl></parameter>, <parameter><decl><type><name>bits8</name> <modifier>*</modifier><modifier>*</modifier></type><name>bitmap_p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bitmask_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>PyList_New</name><argument_list>(<argument><expr><name><name>dims</name><index>[<expr><name>dim</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>dim</name> <operator>&lt;</operator> <name>ndim</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Outer dimension. Recurse for each inner slice. */</comment>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dims</name><index>[<expr><name>dim</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>sublist</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>sublist</name> <operator>=</operator> <call><name>PLyList_FromArray_recurse</name><argument_list>(<argument><expr><name>elm</name></expr></argument>, <argument><expr><name>dims</name></expr></argument>, <argument><expr><name>ndim</name></expr></argument>, <argument><expr><name>dim</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
												<argument><expr><name>dataptr_p</name></expr></argument>, <argument><expr><name>bitmap_p</name></expr></argument>, <argument><expr><name>bitmask_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PyList_SET_ITEM</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>sublist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * Innermost dimension. Fill the list with the values from the array
		 * for this slice.
		 */</comment>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>dataptr</name> <init>= <expr><operator>*</operator><name>dataptr_p</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bits8</name>	   <modifier>*</modifier></type><name>bitmap</name> <init>= <expr><operator>*</operator><name>bitmap_p</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>bitmask</name> <init>= <expr><operator>*</operator><name>bitmask_p</name></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dims</name><index>[<expr><name>dim</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<comment type="block">/* checking for NULL */</comment>
			<if_stmt><if>if <condition>(<expr><name>bitmap</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>bitmap</name> <operator>&amp;</operator> <name>bitmask</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>PyList_SET_ITEM</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<decl_stmt><decl><type><name>Datum</name></type>		<name>itemvalue</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>itemvalue</name> <operator>=</operator> <call><name>fetch_att</name><argument_list>(<argument><expr><name>dataptr</name></expr></argument>, <argument><expr><name><name>elm</name><operator>-&gt;</operator><name>typbyval</name></name></expr></argument>, <argument><expr><name><name>elm</name><operator>-&gt;</operator><name>typlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>PyList_SET_ITEM</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name><name>elm</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name>elm</name></expr></argument>, <argument><expr><name>itemvalue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>dataptr</name> <operator>=</operator> <call><name>att_addlength_pointer</name><argument_list>(<argument><expr><name>dataptr</name></expr></argument>, <argument><expr><name><name>elm</name><operator>-&gt;</operator><name>typlen</name></name></expr></argument>, <argument><expr><name>dataptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>dataptr</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>att_align_nominal</name><argument_list>(<argument><expr><name>dataptr</name></expr></argument>, <argument><expr><name><name>elm</name><operator>-&gt;</operator><name>typalign</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>

			<comment type="block">/* advance bitmap pointer if any */</comment>
			<if_stmt><if>if <condition>(<expr><name>bitmap</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>bitmask</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>bitmask</name> <operator>==</operator> <literal type="number">0x100</literal></expr> <comment type="block">/* (1&lt;&lt;8) */</comment> )</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>bitmap</name><operator>++</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name>bitmask</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><operator>*</operator><name>dataptr_p</name> <operator>=</operator> <name>dataptr</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>bitmap_p</name> <operator>=</operator> <name>bitmap</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>bitmask_p</name> <operator>=</operator> <name>bitmask</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Convert a composite SQL value to a Python dict.
 */</comment>
<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>PLyDict_FromComposite</name><parameter_list>(<parameter><decl><type><name>PLyDatumToOb</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>dict</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTupleHeader</name></type> <name>td</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>tupType</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>tupTypmod</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTupleData</name></type> <name>tmptup</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>td</name> <operator>=</operator> <call><name>DatumGetHeapTupleHeader</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Extract rowtype info and find a tupdesc */</comment>
	<expr_stmt><expr><name>tupType</name> <operator>=</operator> <call><name>HeapTupleHeaderGetTypeId</name><argument_list>(<argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tupTypmod</name> <operator>=</operator> <call><name>HeapTupleHeaderGetTypMod</name><argument_list>(<argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>lookup_rowtype_tupdesc</name><argument_list>(<argument><expr><name>tupType</name></expr></argument>, <argument><expr><name>tupTypmod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Set up I/O funcs if not done yet */</comment>
	<expr_stmt><expr><call><name>PLy_input_setup_tuple</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>,
						  <argument><expr><call><name>PLy_current_execution_context</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>curr_proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Build a temporary HeapTuple control structure */</comment>
	<expr_stmt><expr><name><name>tmptup</name><operator>.</operator><name>t_len</name></name> <operator>=</operator> <call><name>HeapTupleHeaderGetDatumLength</name><argument_list>(<argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tmptup</name><operator>.</operator><name>t_data</name></name> <operator>=</operator> <name>td</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>dict</name> <operator>=</operator> <call><name>PLyDict_FromTuple</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmptup</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ReleaseTupleDesc</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>dict</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Transform a tuple into a Python dict object.
 */</comment>
<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>PLyDict_FromTuple</name><parameter_list>(<parameter><decl><type><name>PLyDatumToOb</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>HeapTuple</name></type> <name>tuple</name></decl></parameter>, <parameter><decl><type><name>TupleDesc</name></type> <name>desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier><specifier>volatile</specifier></type> <name>dict</name></decl>;</decl_stmt>

	<comment type="block">/* Simple sanity check that desc matches */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>natts</name></name> <operator>==</operator> <name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>natts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>dict</name> <operator>=</operator> <call><name>PyDict_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>dict</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>natts</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>PLyDatumToOb</name> <modifier>*</modifier></type><name>att</name> <init>= <expr><operator>&amp;</operator><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>atts</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>attr</name> <init>= <expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Datum</name></type>		<name>vattr</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type>		<name>is_null</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>attisdropped</name></name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>NameStr</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>attname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>vattr</name> <operator>=</operator> <call><name>heap_getattr</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>is_null</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name><name>att</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name>att</name></expr></argument>, <argument><expr><name>vattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>dict</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Convert a Python object to a PostgreSQL bool datum.  This can't go
 * through the generic conversion function, because Python attaches a
 * Boolean value to everything, more things than the PostgreSQL bool
 * type can parse.
 */</comment>
<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>PLyObject_ToBool</name><parameter_list>(<parameter><decl><type><name>PLyObToDatum</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>plrv</name></decl></parameter>,
				 <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isnull</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>inarray</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>plrv</name> <operator>==</operator> <name>Py_None</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>isnull</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>isnull</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<return>return <expr><call><name>BoolGetDatum</name><argument_list>(<argument><expr><call><name>PyObject_IsTrue</name><argument_list>(<argument><expr><name>plrv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Convert a Python object to a PostgreSQL bytea datum.  This doesn't
 * go through the generic conversion function to circumvent problems
 * with embedded nulls.  And it's faster this way.
 */</comment>
<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>PLyObject_ToBytea</name><parameter_list>(<parameter><decl><type><name>PLyObToDatum</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>plrv</name></decl></parameter>,
				  <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isnull</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>inarray</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier><specifier>volatile</specifier></type> <name>plrv_so</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>rv</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>plrv</name> <operator>==</operator> <name>Py_None</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>isnull</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>isnull</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>plrv_so</name> <operator>=</operator> <call><name>PyObject_Bytes</name><argument_list>(<argument><expr><name>plrv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>plrv_so</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PLy_elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not create bytes representation of Python object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>plrv_sc</name> <init>= <expr><call><name>PyBytes_AsString</name><argument_list>(<argument><expr><name>plrv_so</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>size_t</name></type>		<name>len</name> <init>= <expr><call><name>PyBytes_Size</name><argument_list>(<argument><expr><name>plrv_so</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>size_t</name></type>		<name>size</name> <init>= <expr><name>len</name> <operator>+</operator> <name>VARHDRSZ</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bytea</name>	   <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>VARDATA</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>plrv_sc</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>plrv_so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>plrv_so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Convert a Python object to a composite type. First look up the type's
 * description, then route the Python object through the conversion function
 * for obtaining PostgreSQL tuples.
 */</comment>
<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>PLyObject_ToComposite</name><parameter_list>(<parameter><decl><type><name>PLyObToDatum</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>plrv</name></decl></parameter>,
					  <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isnull</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>inarray</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>rv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>desc</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>plrv</name> <operator>==</operator> <name>Py_None</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>isnull</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>isnull</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * The string conversion case doesn't require a tupdesc, nor per-field
	 * conversion data, so just go for it if that's the case to use.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>PyString_Check</name><argument_list>(<argument><expr><name>plrv</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>PyUnicode_Check</name><argument_list>(<argument><expr><name>plrv</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>PLyString_ToComposite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>plrv</name></expr></argument>, <argument><expr><name>inarray</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * If we're dealing with a named composite type, we must look up the
	 * tupdesc every time, to protect against possible changes to the type.
	 * RECORD types can't change between calls; but we must still be willing
	 * to set up the info the first time, if nobody did yet.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>arg</name><operator>-&gt;</operator><name>typoid</name></name> <operator>!=</operator> <name>RECORDOID</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>lookup_rowtype_tupdesc</name><argument_list>(<argument><expr><name><name>arg</name><operator>-&gt;</operator><name>typoid</name></name></expr></argument>, <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>typmod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* We should have the descriptor of the type's typcache entry */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>desc</name> <operator>==</operator> <name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>typentry</name><operator>-&gt;</operator><name>tupDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Detect change of descriptor, update cache if needed */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>tupdescid</name></name> <operator>!=</operator> <name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>typentry</name><operator>-&gt;</operator><name>tupDesc_identifier</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>PLy_output_setup_tuple</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>,
								   <argument><expr><call><name>PLy_current_execution_context</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>curr_proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>tupdescid</name></name> <operator>=</operator> <name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>typentry</name><operator>-&gt;</operator><name>tupDesc_identifier</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>desc</name> <operator>=</operator> <name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>recdesc</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>desc</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>lookup_rowtype_tupdesc</name><argument_list>(<argument><expr><name><name>arg</name><operator>-&gt;</operator><name>typoid</name></name></expr></argument>, <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>typmod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>recdesc</name></name> <operator>=</operator> <name>desc</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* Pin descriptor to match unpin below */</comment>
			<expr_stmt><expr><call><name>PinTupleDesc</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* Simple sanity check on our caching */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>natts</name></name> <operator>==</operator> <name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>natts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Convert, using the appropriate method depending on the type of the
	 * supplied Python object.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>PySequence_Check</name><argument_list>(<argument><expr><name>plrv</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/* composite type as sequence (tuple, list etc) */</comment>
		<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>PLySequence_ToComposite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>plrv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>PyMapping_Check</name><argument_list>(<argument><expr><name>plrv</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/* composite type as mapping (currently only dict) */</comment>
		<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>PLyMapping_ToComposite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>plrv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<comment type="block">/* returned as smth, must provide method __getattr__(name) */</comment>
		<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>PLyGenericObject_ToComposite</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>plrv</name></expr></argument>, <argument><expr><name>inarray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>ReleaseTupleDesc</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>rv</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Convert Python object to C string in server encoding.
 *
 * Note: this is exported for use by add-on transform modules.
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>PLyObject_AsString</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>plrv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>plrv_bo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>plrv_sc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>plen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>slen</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PyUnicode_Check</name><argument_list>(<argument><expr><name>plrv</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>plrv_bo</name> <operator>=</operator> <call><name>PLyUnicode_Bytes</name><argument_list>(<argument><expr><name>plrv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>PyFloat_Check</name><argument_list>(<argument><expr><name>plrv</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* use repr() for floats, str() is lossy */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr></cpp:if>
		<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>PyObject_Repr</name><argument_list>(<argument><expr><name>plrv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>plrv_bo</name> <operator>=</operator> <call><name>PLyUnicode_Bytes</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><name>plrv_bo</name> <operator>=</operator> <call><name>PyObject_Repr</name><argument_list>(<argument><expr><name>plrv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr></cpp:if>
		<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>PyObject_Str</name><argument_list>(<argument><expr><name>plrv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>plrv_bo</name> <operator>=</operator> <call><name>PLyUnicode_Bytes</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><name>plrv_bo</name> <operator>=</operator> <call><name>PyObject_Str</name><argument_list>(<argument><expr><name>plrv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>plrv_bo</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PLy_elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not create string representation of Python object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>plrv_sc</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><call><name>PyBytes_AsString</name><argument_list>(<argument><expr><name>plrv_bo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>plen</name> <operator>=</operator> <call><name>PyBytes_Size</name><argument_list>(<argument><expr><name>plrv_bo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>slen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>plrv_sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>plrv_bo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>slen</name> <operator>&lt;</operator> <name>plen</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATATYPE_MISMATCH</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not convert Python object into cstring: Python string representation appears to contain null bytes"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>slen</name> <operator>&gt;</operator> <name>plen</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not convert Python object into cstring: Python string longer than reported length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>pg_verifymbstr</name><argument_list>(<argument><expr><name>plrv_sc</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>plrv_sc</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Generic output conversion function: convert PyObject to cstring and
 * cstring into PostgreSQL type.
 */</comment>
<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>PLyObject_ToScalar</name><parameter_list>(<parameter><decl><type><name>PLyObToDatum</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>plrv</name></decl></parameter>,
				   <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isnull</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>inarray</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>plrv</name> <operator>==</operator> <name>Py_None</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>isnull</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>isnull</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>PLyObject_AsString</name><argument_list>(<argument><expr><name>plrv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>InputFunctionCall</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>scalar</name><operator>.</operator><name>typfunc</name></name></expr></argument>,
							 <argument><expr><name>str</name></expr></argument>,
							 <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>scalar</name><operator>.</operator><name>typioparam</name></name></expr></argument>,
							 <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>typmod</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Convert to a domain type.
 */</comment>
<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>PLyObject_ToDomain</name><parameter_list>(<parameter><decl><type><name>PLyObToDatum</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>plrv</name></decl></parameter>,
				   <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isnull</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>inarray</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PLyObToDatum</name> <modifier>*</modifier></type><name>base</name> <init>= <expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>domain</name><operator>.</operator><name>base</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>base</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>plrv</name></expr></argument>, <argument><expr><name>isnull</name></expr></argument>, <argument><expr><name>inarray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>domain_check</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>*</operator><name>isnull</name></expr></argument>, <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>typoid</name></name></expr></argument>,
				 <argument><expr><operator>&amp;</operator><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>domain</name><operator>.</operator><name>domain_info</name></name></expr></argument>, <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>mcxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Convert using a to-SQL transform function.
 */</comment>
<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>PLyObject_ToTransform</name><parameter_list>(<parameter><decl><type><name>PLyObToDatum</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>plrv</name></decl></parameter>,
					  <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isnull</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>inarray</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>plrv</name> <operator>==</operator> <name>Py_None</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>isnull</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>isnull</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<return>return <expr><call><name>FunctionCall1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>transform</name><operator>.</operator><name>typtransform</name></name></expr></argument>, <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>plrv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Convert Python sequence to SQL array.
 */</comment>
<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>PLySequence_ToArray</name><parameter_list>(<parameter><decl><type><name>PLyObToDatum</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>plrv</name></decl></parameter>,
					<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isnull</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>inarray</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ArrayType</name>  <modifier>*</modifier></type><name>array</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name>	   <modifier>*</modifier></type><name>elems</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name>	   <modifier>*</modifier></type><name>nulls</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type>		<name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>ndim</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name><name>dims</name><index>[<expr><name>MAXDIM</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name><name>lbs</name><index>[<expr><name>MAXDIM</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>currelem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>pyptr</name> <init>= <expr><name>plrv</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>plrv</name> <operator>==</operator> <name>Py_None</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>isnull</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>isnull</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Determine the number of dimensions, and their sizes.
	 */</comment>
	<expr_stmt><expr><name>ndim</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>plrv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PyList_Check</name><argument_list>(<argument><expr><name>pyptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>ndim</name> <operator>==</operator> <name>MAXDIM</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PLy_elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"number of array dimensions exceeds the maximum allowed (%d)"</literal></expr></argument>, <argument><expr><name>MAXDIM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>dims</name><index>[<expr><name>ndim</name></expr>]</index></name> <operator>=</operator> <call><name>PySequence_Length</name><argument_list>(<argument><expr><name>pyptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>dims</name><index>[<expr><name>ndim</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PLy_elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not determine sequence length for function return value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>dims</name><index>[<expr><name>ndim</name></expr>]</index></name> <operator>&gt;</operator> <name>MaxAllocSize</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PLy_elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"array size exceeds the maximum allowed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>len</name> <operator>*=</operator> <name><name>dims</name><index>[<expr><name>ndim</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>MaxAllocSize</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PLy_elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"array size exceeds the maximum allowed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>dims</name><index>[<expr><name>ndim</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* empty sequence */</comment>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>ndim</name><operator>++</operator></expr>;</expr_stmt>

		<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>PySequence_GetItem</name><argument_list>(<argument><expr><name>pyptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>pyptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pyptr</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>pyptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Check for zero dimensions. This happens if the object is a tuple or a
	 * string, rather than a list, or is not a sequence at all. We don't map
	 * tuples or strings to arrays in general, but in the first level, be
	 * lenient, for historical reasons. So if the object is a sequence of any
	 * kind, treat it as a one-dimensional array.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>ndim</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PySequence_Check</name><argument_list>(<argument><expr><name>plrv</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PLy_elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"return value of function with array return type is not a Python sequence"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>ndim</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>dims</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>PySequence_Length</name><argument_list>(<argument><expr><name>plrv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Traverse the Python lists, in depth-first order, and collect all the
	 * elements at the bottom level into 'elems'/'nulls' arrays.
	 */</comment>
	<expr_stmt><expr><name>elems</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>nulls</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>currelem</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PLySequence_ToArray_recurse</name><argument_list>(<argument><expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>elm</name></name></expr></argument>, <argument><expr><name>plrv</name></expr></argument>,
								<argument><expr><name>dims</name></expr></argument>, <argument><expr><name>ndim</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
								<argument><expr><name>elems</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>currelem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ndim</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>lbs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><name>array</name> <operator>=</operator> <call><name>construct_md_array</name><argument_list>(<argument><expr><name>elems</name></expr></argument>,
							   <argument><expr><name>nulls</name></expr></argument>,
							   <argument><expr><name>ndim</name></expr></argument>,
							   <argument><expr><name>dims</name></expr></argument>,
							   <argument><expr><name>lbs</name></expr></argument>,
							   <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>elmbasetype</name></name></expr></argument>,
							   <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>elm</name><operator>-&gt;</operator><name>typlen</name></name></expr></argument>,
							   <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>elm</name><operator>-&gt;</operator><name>typbyval</name></name></expr></argument>,
							   <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>array</name><operator>.</operator><name>elm</name><operator>-&gt;</operator><name>typalign</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Helper function for PLySequence_ToArray. Traverse a Python list of lists in
 * depth-first order, storing the elements in 'elems'.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>PLySequence_ToArray_recurse</name><parameter_list>(<parameter><decl><type><name>PLyObToDatum</name> <modifier>*</modifier></type><name>elm</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>list</name></decl></parameter>,
							<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dims</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ndim</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dim</name></decl></parameter>,
							<parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>elems</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>nulls</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>currelem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PySequence_Length</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>dims</name><index>[<expr><name>dim</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"wrong length of inner sequence: has length %d, but %d was expected"</literal></expr></argument>,
						<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>PySequence_Length</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>dims</name><index>[<expr><name>dim</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>,</operator>
				 <operator>(</operator><call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"To construct a multidimensional array, the inner sequences must all have the same length."</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>dim</name> <operator>&lt;</operator> <name>ndim</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dims</name><index>[<expr><name>dim</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>sublist</name> <init>= <expr><call><name>PySequence_GetItem</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>PLySequence_ToArray_recurse</name><argument_list>(<argument><expr><name>elm</name></expr></argument>, <argument><expr><name>sublist</name></expr></argument>, <argument><expr><name>dims</name></expr></argument>, <argument><expr><name>ndim</name></expr></argument>, <argument><expr><name>dim</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
										<argument><expr><name>elems</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>, <argument><expr><name>currelem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>sublist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dims</name><index>[<expr><name>dim</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>obj</name> <init>= <expr><call><name>PySequence_GetItem</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>elems</name><index>[<expr><operator>*</operator><name>currelem</name></expr>]</index></name> <operator>=</operator> <call><name><name>elm</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name>elm</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nulls</name><index>[<expr><operator>*</operator><name>currelem</name></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><operator>*</operator><name>currelem</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Convert a Python string to composite, using record_in.
 */</comment>
<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>PLyString_ToComposite</name><parameter_list>(<parameter><decl><type><name>PLyObToDatum</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>inarray</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Set up call data for record_in, if we didn't already.  (We can't just
	 * use DirectFunctionCall, because record_in needs a fn_extra field.)
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>recinfunc</name><operator>.</operator><name>fn_oid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>fmgr_info_cxt</name><argument_list>(<argument><expr><name>F_RECORD_IN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>recinfunc</name></name></expr></argument>, <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>mcxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>PLyObject_AsString</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If we are parsing a composite type within an array, and the string
	 * isn't a valid record literal, there's a high chance that the function
	 * did something like:
	 *
	 * CREATE FUNCTION .. RETURNS comptype[] AS $$ return [['foo', 'bar']] $$
	 * LANGUAGE plpython;
	 *
	 * Before PostgreSQL 10, that was interpreted as a single-dimensional
	 * array, containing record ('foo', 'bar'). PostgreSQL 10 added support
	 * for multi-dimensional arrays, and it is now interpreted as a
	 * two-dimensional array, containing two records, 'foo', and 'bar'.
	 * record_in() will throw an error, because "foo" is not a valid record
	 * literal.
	 *
	 * To make that less confusing to users who are upgrading from older
	 * versions, try to give a hint in the typical instances of that. If we
	 * are parsing an array of composite types, and we see a string literal
	 * that is not a valid record literal, give a hint. We only want to give
	 * the hint in the narrow case of a malformed string literal, not any
	 * error from record_in(), so check for that case here specifically.
	 *
	 * This check better match the one in record_in(), so that we don't forbid
	 * literals that are actually valid!
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>inarray</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt>

		<comment type="block">/* Allow leading whitespace */</comment>
		<while>while <condition>(<expr><operator>*</operator><name>ptr</name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>ptr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>!=</operator> <literal type="char">'('</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_TEXT_REPRESENTATION</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"malformed record literal: \"%s\""</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Missing left parenthesis."</literal></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"To return a composite type in an array, return the composite type as a Python tuple, e.g., \"[('foo',)]\"."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>InputFunctionCall</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>recinfunc</name></name></expr></argument>,
							 <argument><expr><name>str</name></expr></argument>,
							 <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>typoid</name></name></expr></argument>,
							 <argument><expr><name><name>arg</name><operator>-&gt;</operator><name>typmod</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>PLyMapping_ToComposite</name><parameter_list>(<parameter><decl><type><name>PLyObToDatum</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>TupleDesc</name></type> <name>desc</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>mapping</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name>	   <modifier>*</modifier></type><name>values</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name>	   <modifier>*</modifier></type><name>nulls</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>PyMapping_Check</name><argument_list>(<argument><expr><name>mapping</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Build tuple */</comment>
	<expr_stmt><expr><name>values</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>desc</name><operator>-&gt;</operator><name>natts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>nulls</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>desc</name><operator>-&gt;</operator><name>natts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier><specifier>volatile</specifier></type> <name>value</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PLyObToDatum</name> <modifier>*</modifier></type><name>att</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>attr</name> <init>= <expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>attisdropped</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>nulls</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>NameStr</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>attname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>value</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>att</name> <operator>=</operator> <operator>&amp;</operator><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>atts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<block>{<block_content>
			<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>PyMapping_GetItemString</name><argument_list>(<argument><expr><name>mapping</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_COLUMN</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"key \"%s\" not found in mapping"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"To return null in a column, "</literal>
								 <literal type="string">"add the value None to the mapping with the key named after the column."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>att</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name>att</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nulls</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>value</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block>
		<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<block>{<block_content>
			<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>heap_copy_tuple_as_datum</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>heap_freetuple</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>PLySequence_ToComposite</name><parameter_list>(<parameter><decl><type><name>PLyObToDatum</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>TupleDesc</name></type> <name>desc</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>sequence</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name>	   <modifier>*</modifier></type><name>values</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name>	   <modifier>*</modifier></type><name>nulls</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>idx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>PySequence_Check</name><argument_list>(<argument><expr><name>sequence</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Check that sequence length is exactly same as PG tuple's. We actually
	 * can ignore exceeding items or assume missing ones as null but to avoid
	 * plpython developer's errors we are strict here
	 */</comment>
	<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>attisdropped</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<if_stmt><if>if <condition>(<expr><call><name>PySequence_Length</name><argument_list>(<argument><expr><name>sequence</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>idx</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATATYPE_MISMATCH</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"length of returned sequence did not match number of columns in row"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Build tuple */</comment>
	<expr_stmt><expr><name>values</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>desc</name><operator>-&gt;</operator><name>natts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>nulls</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>desc</name><operator>-&gt;</operator><name>natts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier><specifier>volatile</specifier></type> <name>value</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PLyObToDatum</name> <modifier>*</modifier></type><name>att</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>attisdropped</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>nulls</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>value</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>att</name> <operator>=</operator> <operator>&amp;</operator><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>atts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<block>{<block_content>
			<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>PySequence_GetItem</name><argument_list>(<argument><expr><name>sequence</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>att</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name>att</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nulls</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>value</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block>
		<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<block>{<block_content>
			<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>heap_copy_tuple_as_datum</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>heap_freetuple</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>PLyGenericObject_ToComposite</name><parameter_list>(<parameter><decl><type><name>PLyObToDatum</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>TupleDesc</name></type> <name>desc</name></decl></parameter>, <parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>inarray</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name>	   <modifier>*</modifier></type><name>values</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name>	   <modifier>*</modifier></type><name>nulls</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<comment type="block">/* Build tuple */</comment>
	<expr_stmt><expr><name>values</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>desc</name><operator>-&gt;</operator><name>natts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>nulls</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>desc</name><operator>-&gt;</operator><name>natts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier><specifier>volatile</specifier></type> <name>value</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PLyObToDatum</name> <modifier>*</modifier></type><name>att</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>attr</name> <init>= <expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>attisdropped</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>nulls</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>NameStr</name><argument_list>(<argument><expr><name><name>attr</name><operator>-&gt;</operator><name>attname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>value</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>att</name> <operator>=</operator> <operator>&amp;</operator><name><name>arg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tuple</name><operator>.</operator><name>atts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<block>{<block_content>
			<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * No attribute for this column in the object.
				 *
				 * If we are parsing a composite type in an array, a likely
				 * cause is that the function contained something like "[[123,
				 * 'foo']]". Before PostgreSQL 10, that was interpreted as an
				 * array, with a composite type (123, 'foo') in it. But now
				 * it's interpreted as a two-dimensional array, and we try to
				 * interpret "123" as the composite type. See also similar
				 * heuristic in PLyObject_ToScalar().
				 */</comment>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_COLUMN</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"attribute \"%s\" does not exist in Python object"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <ternary><condition><expr><name>inarray</name></expr> ?</condition><then>
						 <expr><call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"To return a composite type in an array, return the composite type as a Python tuple, e.g., \"[('foo',)]\"."</literal></expr></argument>)</argument_list></call></expr> </then><else>:
						 <expr><call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"To return null in a column, let the returned object have an attribute named after column with value None."</literal></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>att</name><operator>-&gt;</operator><name>func</name></name><argument_list>(<argument><expr><name>att</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nulls</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>value</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block>
		<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<block>{<block_content>
			<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>heap_form_tuple</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>heap_copy_tuple_as_datum</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>heap_freetuple</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
</unit>
