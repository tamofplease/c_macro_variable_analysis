<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/src/pl/plpgsql/src/pl_funcs.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * pl_funcs.c		- Misc functions for the PL/pgSQL
 *			  procedural language
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/pl/plpgsql/src/pl_funcs.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpgsql.h"</cpp:file></cpp:include>


<comment type="block">/* ----------
 * Local variables for namespace handling
 *
 * The namespace structure actually forms a tree, of which only one linear
 * list or "chain" (from the youngest item to the root) is accessible from
 * any one plpgsql statement.  During initial parsing of a function, ns_top
 * points to the youngest item accessible from the block currently being
 * parsed.  We store the entire tree, however, since at runtime we will need
 * to access the chain that's relevant to any one statement.
 *
 * Block boundaries in the namespace chain are marked by PLPGSQL_NSTYPE_LABEL
 * items.
 * ----------
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>PLpgSQL_nsitem</name> <modifier>*</modifier></type><name>ns_top</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<comment type="block">/* ----------
 * plpgsql_ns_init			Initialize namespace processing for a new function
 * ----------
 */</comment>
<function><type><name>void</name></type>
<name>plpgsql_ns_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>ns_top</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* ----------
 * plpgsql_ns_push			Create a new namespace level
 * ----------
 */</comment>
<function><type><name>void</name></type>
<name>plpgsql_ns_push</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>, <parameter><decl><type><name>PLpgSQL_label_type</name></type> <name>label_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>label</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>label</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>plpgsql_ns_additem</name><argument_list>(<argument><expr><name>PLPGSQL_NSTYPE_LABEL</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>label_type</name></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* ----------
 * plpgsql_ns_pop			Pop entries back to (and including) the last label
 * ----------
 */</comment>
<function><type><name>void</name></type>
<name>plpgsql_ns_pop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>ns_top</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name><name>ns_top</name><operator>-&gt;</operator><name>itemtype</name></name> <operator>!=</operator> <name>PLPGSQL_NSTYPE_LABEL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>ns_top</name> <operator>=</operator> <name><name>ns_top</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt></block_content></block></while>
	<expr_stmt><expr><name>ns_top</name> <operator>=</operator> <name><name>ns_top</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* ----------
 * plpgsql_ns_top			Fetch the current namespace chain end
 * ----------
 */</comment>
<function><type><name>PLpgSQL_nsitem</name> <modifier>*</modifier></type>
<name>plpgsql_ns_top</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>ns_top</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* ----------
 * plpgsql_ns_additem		Add an item to the current namespace chain
 * ----------
 */</comment>
<function><type><name>void</name></type>
<name>plpgsql_ns_additem</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_nsitem_type</name></type> <name>itemtype</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>itemno</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PLpgSQL_nsitem</name> <modifier>*</modifier></type><name>nse</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* first item added must be a label */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>ns_top</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>itemtype</name> <operator>==</operator> <name>PLPGSQL_NSTYPE_LABEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>nse</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>PLpgSQL_nsitem</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nse</name><operator>-&gt;</operator><name>itemtype</name></name> <operator>=</operator> <name>itemtype</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nse</name><operator>-&gt;</operator><name>itemno</name></name> <operator>=</operator> <name>itemno</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nse</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>ns_top</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>nse</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ns_top</name> <operator>=</operator> <name>nse</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* ----------
 * plpgsql_ns_lookup		Lookup an identifier in the given namespace chain
 *
 * Note that this only searches for variables, not labels.
 *
 * If localmode is true, only the topmost block level is searched.
 *
 * name1 must be non-NULL.  Pass NULL for name2 and/or name3 if parsing a name
 * with fewer than three components.
 *
 * If names_used isn't NULL, *names_used receives the number of names
 * matched: 0 if no match, 1 if name1 matched an unqualified variable name,
 * 2 if name1 and name2 matched a block label + variable name.
 *
 * Note that name3 is never directly matched to anything.  However, if it
 * isn't NULL, we will disregard qualified matches to scalar variables.
 * Similarly, if name2 isn't NULL, we disregard unqualified matches to
 * scalar variables.
 * ----------
 */</comment>
<function><type><name>PLpgSQL_nsitem</name> <modifier>*</modifier></type>
<name>plpgsql_ns_lookup</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_nsitem</name> <modifier>*</modifier></type><name>ns_cur</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>localmode</name></decl></parameter>,
				  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name3</name></decl></parameter>,
				  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>names_used</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Outer loop iterates once per block level in the namespace chain */</comment>
	<while>while <condition>(<expr><name>ns_cur</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PLpgSQL_nsitem</name> <modifier>*</modifier></type><name>nsitem</name></decl>;</decl_stmt>

		<comment type="block">/* Check this level for unqualified match to variable name */</comment>
		<for>for <control>(<init><expr><name>nsitem</name> <operator>=</operator> <name>ns_cur</name></expr>;</init>
			 <condition><expr><name><name>nsitem</name><operator>-&gt;</operator><name>itemtype</name></name> <operator>!=</operator> <name>PLPGSQL_NSTYPE_LABEL</name></expr>;</condition>
			 <incr><expr><name>nsitem</name> <operator>=</operator> <name><name>nsitem</name><operator>-&gt;</operator><name>prev</name></name></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>nsitem</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name1</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>name2</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
					<name><name>nsitem</name><operator>-&gt;</operator><name>itemtype</name></name> <operator>!=</operator> <name>PLPGSQL_NSTYPE_VAR</name></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>names_used</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><operator>*</operator><name>names_used</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<return>return <expr><name>nsitem</name></expr>;</return>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<comment type="block">/* Check this level for qualified match to variable name */</comment>
		<if_stmt><if>if <condition>(<expr><name>name2</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
			<call><name>strcmp</name><argument_list>(<argument><expr><name><name>nsitem</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name1</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<for>for <control>(<init><expr><name>nsitem</name> <operator>=</operator> <name>ns_cur</name></expr>;</init>
				 <condition><expr><name><name>nsitem</name><operator>-&gt;</operator><name>itemtype</name></name> <operator>!=</operator> <name>PLPGSQL_NSTYPE_LABEL</name></expr>;</condition>
				 <incr><expr><name>nsitem</name> <operator>=</operator> <name><name>nsitem</name><operator>-&gt;</operator><name>prev</name></name></expr></incr>)</control>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>nsitem</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name2</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>name3</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
						<name><name>nsitem</name><operator>-&gt;</operator><name>itemtype</name></name> <operator>!=</operator> <name>PLPGSQL_NSTYPE_VAR</name></expr>)</condition>
					<block>{<block_content>
						<if_stmt><if>if <condition>(<expr><name>names_used</name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><operator>*</operator><name>names_used</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
						<return>return <expr><name>nsitem</name></expr>;</return>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>localmode</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>				<comment type="block">/* do not look into upper levels */</comment>

		<expr_stmt><expr><name>ns_cur</name> <operator>=</operator> <name><name>nsitem</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/* This is just to suppress possibly-uninitialized-variable warnings */</comment>
	<if_stmt><if>if <condition>(<expr><name>names_used</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>names_used</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>				<comment type="block">/* No match found */</comment>
</block_content>}</block></function>


<comment type="block">/* ----------
 * plpgsql_ns_lookup_label		Lookup a label in the given namespace chain
 * ----------
 */</comment>
<function><type><name>PLpgSQL_nsitem</name> <modifier>*</modifier></type>
<name>plpgsql_ns_lookup_label</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_nsitem</name> <modifier>*</modifier></type><name>ns_cur</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<while>while <condition>(<expr><name>ns_cur</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>ns_cur</name><operator>-&gt;</operator><name>itemtype</name></name> <operator>==</operator> <name>PLPGSQL_NSTYPE_LABEL</name> <operator>&amp;&amp;</operator>
			<call><name>strcmp</name><argument_list>(<argument><expr><name><name>ns_cur</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>ns_cur</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>ns_cur</name> <operator>=</operator> <name><name>ns_cur</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>NULL</name></expr>;</return>				<comment type="block">/* label not found */</comment>
</block_content>}</block></function>


<comment type="block">/* ----------
 * plpgsql_ns_find_nearest_loop		Find innermost loop label in namespace chain
 * ----------
 */</comment>
<function><type><name>PLpgSQL_nsitem</name> <modifier>*</modifier></type>
<name>plpgsql_ns_find_nearest_loop</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_nsitem</name> <modifier>*</modifier></type><name>ns_cur</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<while>while <condition>(<expr><name>ns_cur</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>ns_cur</name><operator>-&gt;</operator><name>itemtype</name></name> <operator>==</operator> <name>PLPGSQL_NSTYPE_LABEL</name> <operator>&amp;&amp;</operator>
			<name><name>ns_cur</name><operator>-&gt;</operator><name>itemno</name></name> <operator>==</operator> <name>PLPGSQL_LABEL_LOOP</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>ns_cur</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>ns_cur</name> <operator>=</operator> <name><name>ns_cur</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>NULL</name></expr>;</return>				<comment type="block">/* no loop found */</comment>
</block_content>}</block></function>


<comment type="block">/*
 * Statement type as a string, for use in error messages etc.
 */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>plpgsql_stmt_typename</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>cmd_type</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>PLPGSQL_STMT_BLOCK</name></expr>:</case>
			<return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"statement block"</literal></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>PLPGSQL_STMT_ASSIGN</name></expr>:</case>
			<return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"assignment"</literal></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>PLPGSQL_STMT_IF</name></expr>:</case>
			<return>return <expr><literal type="string">"IF"</literal></expr>;</return>
		<case>case <expr><name>PLPGSQL_STMT_CASE</name></expr>:</case>
			<return>return <expr><literal type="string">"CASE"</literal></expr>;</return>
		<case>case <expr><name>PLPGSQL_STMT_LOOP</name></expr>:</case>
			<return>return <expr><literal type="string">"LOOP"</literal></expr>;</return>
		<case>case <expr><name>PLPGSQL_STMT_WHILE</name></expr>:</case>
			<return>return <expr><literal type="string">"WHILE"</literal></expr>;</return>
		<case>case <expr><name>PLPGSQL_STMT_FORI</name></expr>:</case>
			<return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"FOR with integer loop variable"</literal></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>PLPGSQL_STMT_FORS</name></expr>:</case>
			<return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"FOR over SELECT rows"</literal></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>PLPGSQL_STMT_FORC</name></expr>:</case>
			<return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"FOR over cursor"</literal></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>PLPGSQL_STMT_FOREACH_A</name></expr>:</case>
			<return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"FOREACH over array"</literal></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>PLPGSQL_STMT_EXIT</name></expr>:</case>
			<return>return <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>PLpgSQL_stmt_exit</name> <operator>*</operator><operator>)</operator> <name>stmt</name><operator>)</operator><operator>-&gt;</operator><name>is_exit</name></expr> ?</condition><then> <expr><literal type="string">"EXIT"</literal></expr> </then><else>: <expr><literal type="string">"CONTINUE"</literal></expr></else></ternary></expr>;</return>
		<case>case <expr><name>PLPGSQL_STMT_RETURN</name></expr>:</case>
			<return>return <expr><literal type="string">"RETURN"</literal></expr>;</return>
		<case>case <expr><name>PLPGSQL_STMT_RETURN_NEXT</name></expr>:</case>
			<return>return <expr><literal type="string">"RETURN NEXT"</literal></expr>;</return>
		<case>case <expr><name>PLPGSQL_STMT_RETURN_QUERY</name></expr>:</case>
			<return>return <expr><literal type="string">"RETURN QUERY"</literal></expr>;</return>
		<case>case <expr><name>PLPGSQL_STMT_RAISE</name></expr>:</case>
			<return>return <expr><literal type="string">"RAISE"</literal></expr>;</return>
		<case>case <expr><name>PLPGSQL_STMT_ASSERT</name></expr>:</case>
			<return>return <expr><literal type="string">"ASSERT"</literal></expr>;</return>
		<case>case <expr><name>PLPGSQL_STMT_EXECSQL</name></expr>:</case>
			<return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"SQL statement"</literal></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>PLPGSQL_STMT_DYNEXECUTE</name></expr>:</case>
			<return>return <expr><literal type="string">"EXECUTE"</literal></expr>;</return>
		<case>case <expr><name>PLPGSQL_STMT_DYNFORS</name></expr>:</case>
			<return>return <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"FOR over EXECUTE statement"</literal></expr></argument>)</argument_list></call></expr>;</return>
		<case>case <expr><name>PLPGSQL_STMT_GETDIAG</name></expr>:</case>
			<return>return <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>PLpgSQL_stmt_getdiag</name> <operator>*</operator><operator>)</operator> <name>stmt</name><operator>)</operator><operator>-&gt;</operator><name>is_stacked</name></expr> ?</condition><then>
				<expr><literal type="string">"GET STACKED DIAGNOSTICS"</literal></expr> </then><else>: <expr><literal type="string">"GET DIAGNOSTICS"</literal></expr></else></ternary></expr>;</return>
		<case>case <expr><name>PLPGSQL_STMT_OPEN</name></expr>:</case>
			<return>return <expr><literal type="string">"OPEN"</literal></expr>;</return>
		<case>case <expr><name>PLPGSQL_STMT_FETCH</name></expr>:</case>
			<return>return <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>PLpgSQL_stmt_fetch</name> <operator>*</operator><operator>)</operator> <name>stmt</name><operator>)</operator><operator>-&gt;</operator><name>is_move</name></expr> ?</condition><then> <expr><literal type="string">"MOVE"</literal></expr> </then><else>: <expr><literal type="string">"FETCH"</literal></expr></else></ternary></expr>;</return>
		<case>case <expr><name>PLPGSQL_STMT_CLOSE</name></expr>:</case>
			<return>return <expr><literal type="string">"CLOSE"</literal></expr>;</return>
		<case>case <expr><name>PLPGSQL_STMT_PERFORM</name></expr>:</case>
			<return>return <expr><literal type="string">"PERFORM"</literal></expr>;</return>
		<case>case <expr><name>PLPGSQL_STMT_CALL</name></expr>:</case>
			<return>return <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>PLpgSQL_stmt_call</name> <operator>*</operator><operator>)</operator> <name>stmt</name><operator>)</operator><operator>-&gt;</operator><name>is_call</name></expr> ?</condition><then> <expr><literal type="string">"CALL"</literal></expr> </then><else>: <expr><literal type="string">"DO"</literal></expr></else></ternary></expr>;</return>
		<case>case <expr><name>PLPGSQL_STMT_COMMIT</name></expr>:</case>
			<return>return <expr><literal type="string">"COMMIT"</literal></expr>;</return>
		<case>case <expr><name>PLPGSQL_STMT_ROLLBACK</name></expr>:</case>
			<return>return <expr><literal type="string">"ROLLBACK"</literal></expr>;</return>
		<case>case <expr><name>PLPGSQL_STMT_SET</name></expr>:</case>
			<return>return <expr><literal type="string">"SET"</literal></expr>;</return>
	</block_content>}</block></switch>

	<return>return <expr><literal type="string">"unknown"</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * GET DIAGNOSTICS item name as a string, for use in error messages etc.
 */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>plpgsql_getdiag_kindname</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_getdiag_kind</name></type> <name>kind</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>kind</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>PLPGSQL_GETDIAG_ROW_COUNT</name></expr>:</case>
			<return>return <expr><literal type="string">"ROW_COUNT"</literal></expr>;</return>
		<case>case <expr><name>PLPGSQL_GETDIAG_RESULT_OID</name></expr>:</case>
			<return>return <expr><literal type="string">"RESULT_OID"</literal></expr>;</return>
		<case>case <expr><name>PLPGSQL_GETDIAG_CONTEXT</name></expr>:</case>
			<return>return <expr><literal type="string">"PG_CONTEXT"</literal></expr>;</return>
		<case>case <expr><name>PLPGSQL_GETDIAG_ERROR_CONTEXT</name></expr>:</case>
			<return>return <expr><literal type="string">"PG_EXCEPTION_CONTEXT"</literal></expr>;</return>
		<case>case <expr><name>PLPGSQL_GETDIAG_ERROR_DETAIL</name></expr>:</case>
			<return>return <expr><literal type="string">"PG_EXCEPTION_DETAIL"</literal></expr>;</return>
		<case>case <expr><name>PLPGSQL_GETDIAG_ERROR_HINT</name></expr>:</case>
			<return>return <expr><literal type="string">"PG_EXCEPTION_HINT"</literal></expr>;</return>
		<case>case <expr><name>PLPGSQL_GETDIAG_RETURNED_SQLSTATE</name></expr>:</case>
			<return>return <expr><literal type="string">"RETURNED_SQLSTATE"</literal></expr>;</return>
		<case>case <expr><name>PLPGSQL_GETDIAG_COLUMN_NAME</name></expr>:</case>
			<return>return <expr><literal type="string">"COLUMN_NAME"</literal></expr>;</return>
		<case>case <expr><name>PLPGSQL_GETDIAG_CONSTRAINT_NAME</name></expr>:</case>
			<return>return <expr><literal type="string">"CONSTRAINT_NAME"</literal></expr>;</return>
		<case>case <expr><name>PLPGSQL_GETDIAG_DATATYPE_NAME</name></expr>:</case>
			<return>return <expr><literal type="string">"PG_DATATYPE_NAME"</literal></expr>;</return>
		<case>case <expr><name>PLPGSQL_GETDIAG_MESSAGE_TEXT</name></expr>:</case>
			<return>return <expr><literal type="string">"MESSAGE_TEXT"</literal></expr>;</return>
		<case>case <expr><name>PLPGSQL_GETDIAG_TABLE_NAME</name></expr>:</case>
			<return>return <expr><literal type="string">"TABLE_NAME"</literal></expr>;</return>
		<case>case <expr><name>PLPGSQL_GETDIAG_SCHEMA_NAME</name></expr>:</case>
			<return>return <expr><literal type="string">"SCHEMA_NAME"</literal></expr>;</return>
	</block_content>}</block></switch>

	<return>return <expr><literal type="string">"unknown"</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/**********************************************************************
 * Release memory when a PL/pgSQL function is no longer needed
 *
 * The code for recursing through the function tree is really only
 * needed to locate PLpgSQL_expr nodes, which may contain references
 * to saved SPI Plans that must be freed.  The function tree itself,
 * along with subsidiary data, is freed in one swoop by freeing the
 * function's permanent memory context.
 **********************************************************************/</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_stmt</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_block</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_block</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_assign</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_assign</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_if</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_if</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_case</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_case</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_loop</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_loop</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_while</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_while</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_fori</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_fori</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_fors</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_fors</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_forc</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_forc</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_foreach_a</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_foreach_a</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_exit</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_exit</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_return</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_return</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_return_next</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_return_next</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_return_query</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_return_query</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_raise</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_raise</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_assert</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_assert</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_execsql</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_execsql</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_dynexecute</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_dynexecute</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_dynfors</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_dynfors</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_getdiag</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_getdiag</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_open</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_open</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_fetch</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_fetch</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_close</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_close</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_perform</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_perform</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_call</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_call</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_commit</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_commit</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_rollback</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_rollback</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_set</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_set</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_expr</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_expr</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_stmt</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>cmd_type</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>PLPGSQL_STMT_BLOCK</name></expr>:</case>
			<expr_stmt><expr><call><name>free_block</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_block</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_ASSIGN</name></expr>:</case>
			<expr_stmt><expr><call><name>free_assign</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_assign</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_IF</name></expr>:</case>
			<expr_stmt><expr><call><name>free_if</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_if</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_CASE</name></expr>:</case>
			<expr_stmt><expr><call><name>free_case</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_case</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_LOOP</name></expr>:</case>
			<expr_stmt><expr><call><name>free_loop</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_loop</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_WHILE</name></expr>:</case>
			<expr_stmt><expr><call><name>free_while</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_while</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_FORI</name></expr>:</case>
			<expr_stmt><expr><call><name>free_fori</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_fori</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_FORS</name></expr>:</case>
			<expr_stmt><expr><call><name>free_fors</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_fors</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_FORC</name></expr>:</case>
			<expr_stmt><expr><call><name>free_forc</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_forc</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_FOREACH_A</name></expr>:</case>
			<expr_stmt><expr><call><name>free_foreach_a</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_foreach_a</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_EXIT</name></expr>:</case>
			<expr_stmt><expr><call><name>free_exit</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_exit</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_RETURN</name></expr>:</case>
			<expr_stmt><expr><call><name>free_return</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_return</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_RETURN_NEXT</name></expr>:</case>
			<expr_stmt><expr><call><name>free_return_next</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_return_next</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_RETURN_QUERY</name></expr>:</case>
			<expr_stmt><expr><call><name>free_return_query</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_return_query</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_RAISE</name></expr>:</case>
			<expr_stmt><expr><call><name>free_raise</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_raise</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_ASSERT</name></expr>:</case>
			<expr_stmt><expr><call><name>free_assert</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_assert</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_EXECSQL</name></expr>:</case>
			<expr_stmt><expr><call><name>free_execsql</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_execsql</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_DYNEXECUTE</name></expr>:</case>
			<expr_stmt><expr><call><name>free_dynexecute</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_dynexecute</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_DYNFORS</name></expr>:</case>
			<expr_stmt><expr><call><name>free_dynfors</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_dynfors</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_GETDIAG</name></expr>:</case>
			<expr_stmt><expr><call><name>free_getdiag</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_getdiag</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_OPEN</name></expr>:</case>
			<expr_stmt><expr><call><name>free_open</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_open</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_FETCH</name></expr>:</case>
			<expr_stmt><expr><call><name>free_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_fetch</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_CLOSE</name></expr>:</case>
			<expr_stmt><expr><call><name>free_close</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_close</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_PERFORM</name></expr>:</case>
			<expr_stmt><expr><call><name>free_perform</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_perform</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_CALL</name></expr>:</case>
			<expr_stmt><expr><call><name>free_call</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_call</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_COMMIT</name></expr>:</case>
			<expr_stmt><expr><call><name>free_commit</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_commit</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_ROLLBACK</name></expr>:</case>
			<expr_stmt><expr><call><name>free_rollback</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_rollback</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_SET</name></expr>:</case>
			<expr_stmt><expr><call><name>free_set</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_set</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized cmd_type: %d"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>cmd_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_stmts</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>stmts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

	<macro><name>foreach</name><argument_list>(<argument>s</argument>, <argument>stmts</argument>)</argument_list></macro>
	<block>{<block_content>
		<expr_stmt><expr><call><name>free_stmt</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_block</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_block</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>free_stmts</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>exceptions</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

		<macro><name>foreach</name><argument_list>(<argument>e</argument>, <argument>block-&gt;exceptions-&gt;exc_list</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>PLpgSQL_exception</name> <modifier>*</modifier></type><name>exc</name> <init>= <expr><operator>(</operator><name>PLpgSQL_exception</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>free_stmts</name><argument_list>(<argument><expr><name><name>exc</name><operator>-&gt;</operator><name>action</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_assign</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_assign</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>free_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_if</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_if</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>free_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free_stmts</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>then_body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>foreach</name><argument_list>(<argument>l</argument>, <argument>stmt-&gt;elsif_list</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PLpgSQL_if_elsif</name> <modifier>*</modifier></type><name>elif</name> <init>= <expr><operator>(</operator><name>PLpgSQL_if_elsif</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>free_expr</name><argument_list>(<argument><expr><name><name>elif</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free_stmts</name><argument_list>(<argument><expr><name><name>elif</name><operator>-&gt;</operator><name>stmts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>free_stmts</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>else_body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_case</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_case</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>free_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>t_expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>foreach</name><argument_list>(<argument>l</argument>, <argument>stmt-&gt;case_when_list</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PLpgSQL_case_when</name> <modifier>*</modifier></type><name>cwt</name> <init>= <expr><operator>(</operator><name>PLpgSQL_case_when</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>free_expr</name><argument_list>(<argument><expr><name><name>cwt</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free_stmts</name><argument_list>(<argument><expr><name><name>cwt</name><operator>-&gt;</operator><name>stmts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>free_stmts</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>else_stmts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_loop</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_loop</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>free_stmts</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_while</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_while</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>free_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free_stmts</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_fori</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_fori</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>free_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lower</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>upper</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>step</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free_stmts</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_fors</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_fors</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>free_stmts</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_forc</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_forc</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>free_stmts</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>argquery</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_foreach_a</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_foreach_a</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>free_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free_stmts</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_open</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_open</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>free_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>argquery</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>dynquery</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>stmt-&gt;params</argument>)</argument_list></macro>
	<block>{<block_content>
		<expr_stmt><expr><call><name>free_expr</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_expr</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_fetch</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_fetch</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>free_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_close</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_close</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_perform</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_perform</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>free_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_call</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_call</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>free_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_commit</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_commit</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_rollback</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_rollback</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_set</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_set</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>free_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_exit</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_exit</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>free_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_return</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_return</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>free_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_return_next</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_return_next</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>free_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_return_query</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_return_query</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>free_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>dynquery</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>stmt-&gt;params</argument>)</argument_list></macro>
	<block>{<block_content>
		<expr_stmt><expr><call><name>free_expr</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_expr</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_raise</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_raise</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>stmt-&gt;params</argument>)</argument_list></macro>
	<block>{<block_content>
		<expr_stmt><expr><call><name>free_expr</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_expr</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>stmt-&gt;options</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PLpgSQL_raise_option</name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><operator>(</operator><name>PLpgSQL_raise_option</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>free_expr</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_assert</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_assert</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>free_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_execsql</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_execsql</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>free_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>sqlstmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_dynexecute</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_dynexecute</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>free_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>stmt-&gt;params</argument>)</argument_list></macro>
	<block>{<block_content>
		<expr_stmt><expr><call><name>free_expr</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_expr</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_dynfors</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_dynfors</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>free_stmts</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>stmt-&gt;params</argument>)</argument_list></macro>
	<block>{<block_content>
		<expr_stmt><expr><call><name>free_expr</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_expr</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_getdiag</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_getdiag</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_expr</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_expr</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>expr</name> <operator>&amp;&amp;</operator> <name><name>expr</name><operator>-&gt;</operator><name>plan</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>SPI_freeplan</name><argument_list>(<argument><expr><name><name>expr</name><operator>-&gt;</operator><name>plan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>expr</name><operator>-&gt;</operator><name>plan</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>plpgsql_free_function_memory</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_function</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<comment type="block">/* Better not call this on an in-use function */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>func</name><operator>-&gt;</operator><name>use_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Release plans associated with variable declarations */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>func</name><operator>-&gt;</operator><name>ndatums</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PLpgSQL_datum</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><name><name>func</name><operator>-&gt;</operator><name>datums</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<switch>switch <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>dtype</name></name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>PLPGSQL_DTYPE_VAR</name></expr>:</case>
			<case>case <expr><name>PLPGSQL_DTYPE_PROMISE</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>PLpgSQL_var</name> <modifier>*</modifier></type><name>var</name> <init>= <expr><operator>(</operator><name>PLpgSQL_var</name> <operator>*</operator><operator>)</operator> <name>d</name></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><call><name>free_expr</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>default_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>free_expr</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>cursor_explicit_expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><name>PLPGSQL_DTYPE_ROW</name></expr>:</case>
				<break>break;</break>
			<case>case <expr><name>PLPGSQL_DTYPE_REC</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>PLpgSQL_rec</name> <modifier>*</modifier></type><name>rec</name> <init>= <expr><operator>(</operator><name>PLpgSQL_rec</name> <operator>*</operator><operator>)</operator> <name>d</name></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><call><name>free_expr</name><argument_list>(<argument><expr><name><name>rec</name><operator>-&gt;</operator><name>default_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><name>PLPGSQL_DTYPE_RECFIELD</name></expr>:</case>
				<break>break;</break>
			<case>case <expr><name>PLPGSQL_DTYPE_ARRAYELEM</name></expr>:</case>
				<expr_stmt><expr><call><name>free_expr</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>PLpgSQL_arrayelem</name> <operator>*</operator><operator>)</operator> <name>d</name><operator>)</operator><operator>-&gt;</operator><name>subscript</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized data type: %d"</literal></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>dtype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>
	</block_content>}</block></for>
	<expr_stmt><expr><name><name>func</name><operator>-&gt;</operator><name>ndatums</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/* Release plans in statement tree */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>func</name><operator>-&gt;</operator><name>action</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free_block</name><argument_list>(<argument><expr><name><name>func</name><operator>-&gt;</operator><name>action</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>func</name><operator>-&gt;</operator><name>action</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * And finally, release all memory except the PLpgSQL_function struct
	 * itself (which has to be kept around because there may be multiple
	 * fn_extra pointers to it).
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>func</name><operator>-&gt;</operator><name>fn_cxt</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>MemoryContextDelete</name><argument_list>(<argument><expr><name><name>func</name><operator>-&gt;</operator><name>fn_cxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>func</name><operator>-&gt;</operator><name>fn_cxt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" format="doxygen">/**********************************************************************
 * Debug functions for analyzing the compiled code
 **********************************************************************/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>dump_indent</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dump_ind</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dump_stmt</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dump_block</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_block</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dump_assign</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_assign</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dump_if</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_if</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dump_case</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_case</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dump_loop</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_loop</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dump_while</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_while</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dump_fori</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_fori</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dump_fors</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_fors</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dump_forc</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_forc</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dump_foreach_a</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_foreach_a</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dump_exit</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_exit</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dump_return</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_return</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dump_return_next</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_return_next</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dump_return_query</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_return_query</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dump_raise</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_raise</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dump_assert</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_assert</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dump_execsql</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_execsql</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dump_dynexecute</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_dynexecute</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dump_dynfors</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_dynfors</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dump_getdiag</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_getdiag</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dump_open</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_open</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dump_fetch</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_fetch</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dump_cursor_direction</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_fetch</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dump_close</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_close</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dump_perform</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_perform</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dump_call</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_call</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dump_commit</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_commit</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dump_rollback</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_rollback</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dump_set</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_set</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dump_expr</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_expr</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_ind</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dump_indent</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_stmt</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%3d:"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>cmd_type</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>PLPGSQL_STMT_BLOCK</name></expr>:</case>
			<expr_stmt><expr><call><name>dump_block</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_block</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_ASSIGN</name></expr>:</case>
			<expr_stmt><expr><call><name>dump_assign</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_assign</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_IF</name></expr>:</case>
			<expr_stmt><expr><call><name>dump_if</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_if</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_CASE</name></expr>:</case>
			<expr_stmt><expr><call><name>dump_case</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_case</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_LOOP</name></expr>:</case>
			<expr_stmt><expr><call><name>dump_loop</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_loop</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_WHILE</name></expr>:</case>
			<expr_stmt><expr><call><name>dump_while</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_while</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_FORI</name></expr>:</case>
			<expr_stmt><expr><call><name>dump_fori</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_fori</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_FORS</name></expr>:</case>
			<expr_stmt><expr><call><name>dump_fors</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_fors</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_FORC</name></expr>:</case>
			<expr_stmt><expr><call><name>dump_forc</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_forc</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_FOREACH_A</name></expr>:</case>
			<expr_stmt><expr><call><name>dump_foreach_a</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_foreach_a</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_EXIT</name></expr>:</case>
			<expr_stmt><expr><call><name>dump_exit</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_exit</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_RETURN</name></expr>:</case>
			<expr_stmt><expr><call><name>dump_return</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_return</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_RETURN_NEXT</name></expr>:</case>
			<expr_stmt><expr><call><name>dump_return_next</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_return_next</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_RETURN_QUERY</name></expr>:</case>
			<expr_stmt><expr><call><name>dump_return_query</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_return_query</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_RAISE</name></expr>:</case>
			<expr_stmt><expr><call><name>dump_raise</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_raise</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_ASSERT</name></expr>:</case>
			<expr_stmt><expr><call><name>dump_assert</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_assert</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_EXECSQL</name></expr>:</case>
			<expr_stmt><expr><call><name>dump_execsql</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_execsql</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_DYNEXECUTE</name></expr>:</case>
			<expr_stmt><expr><call><name>dump_dynexecute</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_dynexecute</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_DYNFORS</name></expr>:</case>
			<expr_stmt><expr><call><name>dump_dynfors</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_dynfors</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_GETDIAG</name></expr>:</case>
			<expr_stmt><expr><call><name>dump_getdiag</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_getdiag</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_OPEN</name></expr>:</case>
			<expr_stmt><expr><call><name>dump_open</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_open</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_FETCH</name></expr>:</case>
			<expr_stmt><expr><call><name>dump_fetch</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_fetch</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_CLOSE</name></expr>:</case>
			<expr_stmt><expr><call><name>dump_close</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_close</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_PERFORM</name></expr>:</case>
			<expr_stmt><expr><call><name>dump_perform</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_perform</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_CALL</name></expr>:</case>
			<expr_stmt><expr><call><name>dump_call</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_call</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_COMMIT</name></expr>:</case>
			<expr_stmt><expr><call><name>dump_commit</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_commit</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_ROLLBACK</name></expr>:</case>
			<expr_stmt><expr><call><name>dump_rollback</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_rollback</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PLPGSQL_STMT_SET</name></expr>:</case>
			<expr_stmt><expr><call><name>dump_set</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt_set</name> <operator>*</operator><operator>)</operator> <name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized cmd_type: %d"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>cmd_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_stmts</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>stmts</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>dump_indent</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<macro><name>foreach</name><argument_list>(<argument>s</argument>, <argument>stmts</argument>)</argument_list></macro>
		<expr_stmt><expr><call><name>dump_stmt</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_stmt</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>dump_indent</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_block</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_block</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>label</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"*unnamed*"</literal></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>label</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"BLOCK &lt;&lt;%s&gt;&gt;\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dump_stmts</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>exceptions</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

		<macro><name>foreach</name><argument_list>(<argument>e</argument>, <argument>block-&gt;exceptions-&gt;exc_list</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>PLpgSQL_exception</name> <modifier>*</modifier></type><name>exc</name> <init>= <expr><operator>(</operator><name>PLpgSQL_exception</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>PLpgSQL_condition</name> <modifier>*</modifier></type><name>cond</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    EXCEPTION WHEN "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>cond</name> <operator>=</operator> <name><name>exc</name><operator>-&gt;</operator><name>conditions</name></name></expr>;</init> <condition><expr><name>cond</name></expr>;</condition> <incr><expr><name>cond</name> <operator>=</operator> <name><name>cond</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>cond</name> <operator>!=</operator> <name><name>exc</name><operator>-&gt;</operator><name>conditions</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" OR "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>cond</name><operator>-&gt;</operator><name>condname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" THEN\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>dump_stmts</name><argument_list>(<argument><expr><name><name>exc</name><operator>-&gt;</operator><name>action</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    END -- %s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_assign</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_assign</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ASSIGN var %d := "</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>varno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dump_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_if</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_if</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"IF "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dump_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" THEN\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dump_stmts</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>then_body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>foreach</name><argument_list>(<argument>l</argument>, <argument>stmt-&gt;elsif_list</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PLpgSQL_if_elsif</name> <modifier>*</modifier></type><name>elif</name> <init>= <expr><operator>(</operator><name>PLpgSQL_if_elsif</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    ELSIF "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dump_expr</name><argument_list>(<argument><expr><name><name>elif</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" THEN\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dump_stmts</name><argument_list>(<argument><expr><name><name>elif</name><operator>-&gt;</operator><name>stmts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>else_body</name></name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    ELSE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dump_stmts</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>else_body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    ENDIF\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_case</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_case</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"CASE %d "</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>t_varno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>t_expr</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>dump_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>t_expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>dump_indent</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
	<macro><name>foreach</name><argument_list>(<argument>l</argument>, <argument>stmt-&gt;case_when_list</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PLpgSQL_case_when</name> <modifier>*</modifier></type><name>cwt</name> <init>= <expr><operator>(</operator><name>PLpgSQL_case_when</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"WHEN "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dump_expr</name><argument_list>(<argument><expr><name><name>cwt</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"THEN\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>dump_indent</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dump_stmts</name><argument_list>(<argument><expr><name><name>cwt</name><operator>-&gt;</operator><name>stmts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>dump_indent</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	</block_content>}</block>
	<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>have_else</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ELSE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>dump_indent</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dump_stmts</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>else_stmts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>dump_indent</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>dump_indent</name> <operator>-=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    ENDCASE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_loop</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_loop</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"LOOP\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dump_stmts</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    ENDLOOP\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_while</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_while</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"WHILE "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dump_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dump_stmts</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    ENDWHILE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_fori</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_fori</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"FORI %s %s\n"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>var</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>stmt</name><operator>-&gt;</operator><name>reverse</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"REVERSE"</literal></expr> </then><else>: <expr><literal type="string">"NORMAL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>dump_indent</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    lower = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dump_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>lower</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    upper = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dump_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>upper</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>step</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    step = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dump_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>step</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>dump_indent</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dump_stmts</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    ENDFORI\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_fors</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_fors</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"FORS %s "</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>var</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dump_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dump_stmts</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    ENDFORS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_forc</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_forc</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"FORC %s "</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>var</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"curvar=%d\n"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>curvar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>dump_indent</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>argquery</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  arguments = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dump_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>argquery</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>dump_indent</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dump_stmts</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    ENDFORC\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_foreach_a</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_foreach_a</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"FOREACHA var %d "</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>varno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>slice</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"SLICE %d "</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>slice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"IN "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dump_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dump_stmts</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    ENDFOREACHA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_open</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_open</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"OPEN curvar=%d\n"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>curvar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>dump_indent</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>argquery</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  arguments = '"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dump_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>argquery</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>query</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  query = '"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dump_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>dynquery</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  execute = '"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dump_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>dynquery</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"'\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>params</name></name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>dump_indent</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    USING\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>dump_indent</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>stmt-&gt;params</argument>)</argument_list></macro>
			<block>{<block_content>
				<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    parameter $%d: "</literal></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>dump_expr</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_expr</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<expr_stmt><expr><name>dump_indent</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>dump_indent</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_fetch</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_fetch</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>stmt</name><operator>-&gt;</operator><name>is_move</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"FETCH curvar=%d\n"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>curvar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dump_cursor_direction</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>dump_indent</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>target</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    target = %d %s\n"</literal></expr></argument>,
				   <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>target</name><operator>-&gt;</operator><name>dno</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>target</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>dump_indent</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"MOVE curvar=%d\n"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>curvar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dump_cursor_direction</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_cursor_direction</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_fetch</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>dump_indent</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>direction</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>FETCH_FORWARD</name></expr>:</case>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    FORWARD "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>FETCH_BACKWARD</name></expr>:</case>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    BACKWARD "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>FETCH_ABSOLUTE</name></expr>:</case>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    ABSOLUTE "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>FETCH_RELATIVE</name></expr>:</case>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    RELATIVE "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"??? unknown cursor direction %d"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>direction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>expr</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>dump_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%ld\n"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>how_many</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>dump_indent</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_close</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_close</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"CLOSE curvar=%d\n"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>curvar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_perform</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_perform</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"PERFORM expr = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dump_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_call</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_call</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s expr = "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>stmt</name><operator>-&gt;</operator><name>is_call</name></name></expr> ?</condition><then> <expr><literal type="string">"CALL"</literal></expr> </then><else>: <expr><literal type="string">"DO"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dump_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_commit</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_commit</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"COMMIT\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_rollback</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_rollback</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ROLLBACK\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_set</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_set</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>expr</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_exit</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_exit</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>stmt</name><operator>-&gt;</operator><name>is_exit</name></name></expr> ?</condition><then> <expr><literal type="string">"EXIT"</literal></expr> </then><else>: <expr><literal type="string">"CONTINUE"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>label</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" label='%s'"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>label</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>cond</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" WHEN "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dump_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_return</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_return</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"RETURN "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>retvarno</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"variable %d"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>retvarno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>expr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>dump_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_return_next</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_return_next</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"RETURN NEXT "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>retvarno</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"variable %d"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>retvarno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>expr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>dump_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_return_query</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_return_query</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>query</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"RETURN QUERY "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dump_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"RETURN QUERY EXECUTE "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dump_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>dynquery</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>params</name></name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>dump_indent</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    USING\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>dump_indent</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>stmt-&gt;params</argument>)</argument_list></macro>
			<block>{<block_content>
				<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    parameter $%d: "</literal></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>dump_expr</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_expr</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<expr_stmt><expr><name>dump_indent</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_raise</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_raise</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"RAISE level=%d"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>elog_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>condname</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" condname='%s'"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>condname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>message</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" message='%s'"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>dump_indent</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>stmt-&gt;params</argument>)</argument_list></macro>
	<block>{<block_content>
		<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    parameter %d: "</literal></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dump_expr</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_expr</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>options</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    USING\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>dump_indent</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>stmt-&gt;options</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>PLpgSQL_raise_option</name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><operator>(</operator><name>PLpgSQL_raise_option</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<switch>switch <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>opt_type</name></name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><name>PLPGSQL_RAISEOPTION_ERRCODE</name></expr>:</case>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    ERRCODE = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>PLPGSQL_RAISEOPTION_MESSAGE</name></expr>:</case>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    MESSAGE = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>PLPGSQL_RAISEOPTION_DETAIL</name></expr>:</case>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    DETAIL = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>PLPGSQL_RAISEOPTION_HINT</name></expr>:</case>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    HINT = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>PLPGSQL_RAISEOPTION_COLUMN</name></expr>:</case>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    COLUMN = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>PLPGSQL_RAISEOPTION_CONSTRAINT</name></expr>:</case>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    CONSTRAINT = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>PLPGSQL_RAISEOPTION_DATATYPE</name></expr>:</case>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    DATATYPE = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>PLPGSQL_RAISEOPTION_TABLE</name></expr>:</case>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    TABLE = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>PLPGSQL_RAISEOPTION_SCHEMA</name></expr>:</case>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    SCHEMA = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
			</block_content>}</block></switch>
			<expr_stmt><expr><call><name>dump_expr</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<expr_stmt><expr><name>dump_indent</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>dump_indent</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_assert</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_assert</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ASSERT "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dump_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>dump_indent</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>message</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    MESSAGE = "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dump_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>dump_indent</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_execsql</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_execsql</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"EXECSQL "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dump_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>sqlstmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>dump_indent</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>target</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    INTO%s target = %d %s\n"</literal></expr></argument>,
			   <argument><expr><ternary><condition><expr><name><name>stmt</name><operator>-&gt;</operator><name>strict</name></name></expr> ?</condition><then> <expr><literal type="string">" STRICT"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
			   <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>target</name><operator>-&gt;</operator><name>dno</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>target</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>dump_indent</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_dynexecute</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_dynexecute</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"EXECUTE "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dump_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>dump_indent</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>target</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    INTO%s target = %d %s\n"</literal></expr></argument>,
			   <argument><expr><ternary><condition><expr><name><name>stmt</name><operator>-&gt;</operator><name>strict</name></name></expr> ?</condition><then> <expr><literal type="string">" STRICT"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
			   <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>target</name><operator>-&gt;</operator><name>dno</name></name></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>target</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>params</name></name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    USING\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>dump_indent</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>stmt-&gt;params</argument>)</argument_list></macro>
		<block>{<block_content>
			<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    parameter %d: "</literal></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>dump_expr</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_expr</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<expr_stmt><expr><name>dump_indent</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>dump_indent</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_dynfors</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_dynfors</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"FORS %s EXECUTE "</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>var</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dump_expr</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>params</name></name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>dump_indent</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    USING\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>dump_indent</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>stmt-&gt;params</argument>)</argument_list></macro>
		<block>{<block_content>
			<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    parameter $%d: "</literal></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>dump_expr</name><argument_list>(<argument><expr><operator>(</operator><name>PLpgSQL_expr</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<expr_stmt><expr><name>dump_indent</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>dump_stmts</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    ENDFORS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_getdiag</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_stmt_getdiag</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>dump_ind</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"GET %s DIAGNOSTICS "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>stmt</name><operator>-&gt;</operator><name>is_stacked</name></name></expr> ?</condition><then> <expr><literal type="string">"STACKED"</literal></expr> </then><else>: <expr><literal type="string">"CURRENT"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>stmt-&gt;diag_items</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PLpgSQL_diag_item</name> <modifier>*</modifier></type><name>diag_item</name> <init>= <expr><operator>(</operator><name>PLpgSQL_diag_item</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>lc</name> <operator>!=</operator> <call><name>list_head</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>diag_items</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"{var %d} = %s"</literal></expr></argument>, <argument><expr><name><name>diag_item</name><operator>-&gt;</operator><name>target</name></name></expr></argument>,
			   <argument><expr><call><name>plpgsql_getdiag_kindname</name><argument_list>(<argument><expr><name><name>diag_item</name><operator>-&gt;</operator><name>kind</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>dump_expr</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_expr</name> <modifier>*</modifier></type><name>expr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"'%s'"</literal></expr></argument>, <argument><expr><name><name>expr</name><operator>-&gt;</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>plpgsql_dumptree</name><parameter_list>(<parameter><decl><type><name>PLpgSQL_function</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PLpgSQL_datum</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nExecution tree of successfully compiled PL/pgSQL function %s:\n"</literal></expr></argument>,
		   <argument><expr><name><name>func</name><operator>-&gt;</operator><name>fn_signature</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nFunction's data area:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>func</name><operator>-&gt;</operator><name>ndatums</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>func</name><operator>-&gt;</operator><name>datums</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    entry %d: "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<switch>switch <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>dtype</name></name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>PLPGSQL_DTYPE_VAR</name></expr>:</case>
			<case>case <expr><name>PLPGSQL_DTYPE_PROMISE</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>PLpgSQL_var</name> <modifier>*</modifier></type><name>var</name> <init>= <expr><operator>(</operator><name>PLpgSQL_var</name> <operator>*</operator><operator>)</operator> <name>d</name></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"VAR %-16s type %s (typoid %u) atttypmod %d\n"</literal></expr></argument>,
						   <argument><expr><name><name>var</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>datatype</name><operator>-&gt;</operator><name>typname</name></name></expr></argument>,
						   <argument><expr><name><name>var</name><operator>-&gt;</operator><name>datatype</name><operator>-&gt;</operator><name>typoid</name></name></expr></argument>,
						   <argument><expr><name><name>var</name><operator>-&gt;</operator><name>datatype</name><operator>-&gt;</operator><name>atttypmod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>isconst</name></name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"                                  CONSTANT\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>notnull</name></name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"                                  NOT NULL\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>default_val</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"                                  DEFAULT "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>dump_expr</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>default_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
					<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>cursor_explicit_expr</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
					<block>{<block_content>
						<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>cursor_explicit_argrow</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"                                  CURSOR argument row %d\n"</literal></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>cursor_explicit_argrow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

						<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"                                  CURSOR IS "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>dump_expr</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>cursor_explicit_expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
					<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>promise</name></name> <operator>!=</operator> <name>PLPGSQL_PROMISE_NONE</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"                                  PROMISE %d\n"</literal></expr></argument>,
							   <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>var</name><operator>-&gt;</operator><name>promise</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><name>PLPGSQL_DTYPE_ROW</name></expr>:</case>
				<block>{<block_content>
					<decl_stmt><decl><type><name>PLpgSQL_row</name> <modifier>*</modifier></type><name>row</name> <init>= <expr><operator>(</operator><name>PLpgSQL_row</name> <operator>*</operator><operator>)</operator> <name>d</name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ROW %-16s fields"</literal></expr></argument>, <argument><expr><name><name>row</name><operator>-&gt;</operator><name>refname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>row</name><operator>-&gt;</operator><name>nfields</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
					<block>{<block_content>
						<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s=var %d"</literal></expr></argument>, <argument><expr><name><name>row</name><operator>-&gt;</operator><name>fieldnames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
							   <argument><expr><name><name>row</name><operator>-&gt;</operator><name>varnos</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></for>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block>
				<break>break;</break>
			<case>case <expr><name>PLPGSQL_DTYPE_REC</name></expr>:</case>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"REC %-16s typoid %u\n"</literal></expr></argument>,
					   <argument><expr><operator>(</operator><operator>(</operator><name>PLpgSQL_rec</name> <operator>*</operator><operator>)</operator> <name>d</name><operator>)</operator><operator>-&gt;</operator><name>refname</name></expr></argument>,
					   <argument><expr><operator>(</operator><operator>(</operator><name>PLpgSQL_rec</name> <operator>*</operator><operator>)</operator> <name>d</name><operator>)</operator><operator>-&gt;</operator><name>rectypeid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>PLpgSQL_rec</name> <operator>*</operator><operator>)</operator> <name>d</name><operator>)</operator><operator>-&gt;</operator><name>isconst</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"                                  CONSTANT\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>PLpgSQL_rec</name> <operator>*</operator><operator>)</operator> <name>d</name><operator>)</operator><operator>-&gt;</operator><name>notnull</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"                                  NOT NULL\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>PLpgSQL_rec</name> <operator>*</operator><operator>)</operator> <name>d</name><operator>)</operator><operator>-&gt;</operator><name>default_val</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"                                  DEFAULT "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>dump_expr</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>PLpgSQL_rec</name> <operator>*</operator><operator>)</operator> <name>d</name><operator>)</operator><operator>-&gt;</operator><name>default_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>
			<case>case <expr><name>PLPGSQL_DTYPE_RECFIELD</name></expr>:</case>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"RECFIELD %-16s of REC %d\n"</literal></expr></argument>,
					   <argument><expr><operator>(</operator><operator>(</operator><name>PLpgSQL_recfield</name> <operator>*</operator><operator>)</operator> <name>d</name><operator>)</operator><operator>-&gt;</operator><name>fieldname</name></expr></argument>,
					   <argument><expr><operator>(</operator><operator>(</operator><name>PLpgSQL_recfield</name> <operator>*</operator><operator>)</operator> <name>d</name><operator>)</operator><operator>-&gt;</operator><name>recparentno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>PLPGSQL_DTYPE_ARRAYELEM</name></expr>:</case>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ARRAYELEM of VAR %d subscript "</literal></expr></argument>,
					   <argument><expr><operator>(</operator><operator>(</operator><name>PLpgSQL_arrayelem</name> <operator>*</operator><operator>)</operator> <name>d</name><operator>)</operator><operator>-&gt;</operator><name>arrayparentno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>dump_expr</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>PLpgSQL_arrayelem</name> <operator>*</operator><operator>)</operator> <name>d</name><operator>)</operator><operator>-&gt;</operator><name>subscript</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"??? unknown data type %d\n"</literal></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>dtype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nFunction's statements:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>dump_indent</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%3d:"</literal></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>action</name><operator>-&gt;</operator><name>lineno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dump_block</name><argument_list>(<argument><expr><name><name>func</name><operator>-&gt;</operator><name>action</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nEnd of execution tree of function %s\n\n"</literal></expr></argument>, <argument><expr><name><name>func</name><operator>-&gt;</operator><name>fn_signature</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
