<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/contrib/jsonb_plpython/jsonb_plpython.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpython.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpy_elog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpy_typeio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/jsonb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/fmgrprotos.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/numeric.h"</cpp:file></cpp:include>

<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<function_decl><type><name>void</name></type>		<name>_PG_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* for PLyObject_AsString in plpy_typeio.c */</comment>
<typedef>typedef <function_decl><type><name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>PLyObject_AsString_t</name>) <parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>plrv</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>PLyObject_AsString_t</name></type> <name>PLyObject_AsString_p</name></decl>;</decl_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>PLy_elog_impl_t</name>) <parameter_list>(<parameter><decl><type><name>int</name></type> <name>elevel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>PLy_elog_impl_t</name></type> <name>PLy_elog_impl_p</name></decl>;</decl_stmt>

<comment type="block">/*
 * decimal_constructor is a function from python library and used
 * for transforming strings into python decimal type
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>decimal_constructor</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>PLyObject_FromJsonbContainer</name><parameter_list>(<parameter><decl><type><name>JsonbContainer</name> <modifier>*</modifier></type><name>jsonb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>JsonbValue</name> <modifier>*</modifier></type><name>PLyObject_ToJsonbValue</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,
					   <parameter><decl><type><name>JsonbParseState</name> <modifier>*</modifier><modifier>*</modifier></type><name>jsonb_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_elem</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr></cpp:if>
<typedef>typedef <function_decl><type><name>PyObject</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>PLyUnicode_FromStringAndSize_t</name>)
			<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>PLyUnicode_FromStringAndSize_t</name></type> <name>PLyUnicode_FromStringAndSize_p</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Module initialize function: fetch function pointers for cross-module calls.
 */</comment>
<function><type><name>void</name></type>
<name>_PG_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Asserts verify that typedefs above match original declarations */</comment>
	<expr_stmt><expr><call><name>AssertVariableIsOfType</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PLyObject_AsString</name></expr></argument>, <argument><expr><name>PLyObject_AsString_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>PLyObject_AsString_p</name> <operator>=</operator> <operator>(</operator><name>PLyObject_AsString_t</name><operator>)</operator>
		<call><name>load_external_function</name><argument_list>(<argument><expr><literal type="string">"$libdir/"</literal> <name>PLPYTHON_LIBNAME</name></expr></argument>, <argument><expr><literal type="string">"PLyObject_AsString"</literal></expr></argument>,
							   <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr></cpp:if>
	<expr_stmt><expr><call><name>AssertVariableIsOfType</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PLyUnicode_FromStringAndSize</name></expr></argument>, <argument><expr><name>PLyUnicode_FromStringAndSize_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>PLyUnicode_FromStringAndSize_p</name> <operator>=</operator> <operator>(</operator><name>PLyUnicode_FromStringAndSize_t</name><operator>)</operator>
		<call><name>load_external_function</name><argument_list>(<argument><expr><literal type="string">"$libdir/"</literal> <name>PLPYTHON_LIBNAME</name></expr></argument>, <argument><expr><literal type="string">"PLyUnicode_FromStringAndSize"</literal></expr></argument>,
							   <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>AssertVariableIsOfType</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PLy_elog_impl</name></expr></argument>, <argument><expr><name>PLy_elog_impl_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>PLy_elog_impl_p</name> <operator>=</operator> <operator>(</operator><name>PLy_elog_impl_t</name><operator>)</operator>
		<call><name>load_external_function</name><argument_list>(<argument><expr><literal type="string">"$libdir/"</literal> <name>PLPYTHON_LIBNAME</name></expr></argument>, <argument><expr><literal type="string">"PLy_elog_impl"</literal></expr></argument>,
							   <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* These defines must be after the _PG_init */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLyObject_AsString</name></cpp:macro> <cpp:value>(PLyObject_AsString_p)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLyUnicode_FromStringAndSize</name></cpp:macro> <cpp:value>(PLyUnicode_FromStringAndSize_p)</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PLy_elog</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLy_elog</name></cpp:macro> <cpp:value>(PLy_elog_impl_p)</cpp:value></cpp:define>

<comment type="block">/*
 * PLyString_FromJsonbValue
 *
 * Transform string JsonbValue to Python string.
 */</comment>
<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>PLyString_FromJsonbValue</name><parameter_list>(<parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jbv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>jbv</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>jbvString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name><name>jbv</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name><name>jbv</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * PLyString_ToJsonbValue
 *
 * Transform Python string to JsonbValue.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>PLyString_ToJsonbValue</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jbvElem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>jbvElem</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>jbvString</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>jbvElem</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name> <operator>=</operator> <call><name>PLyObject_AsString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>jbvElem</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>jbvElem</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * PLyObject_FromJsonbValue
 *
 * Transform JsonbValue to PyObject.
 */</comment>
<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>PLyObject_FromJsonbValue</name><parameter_list>(<parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jsonbValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name><name>jsonbValue</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>jbvNull</name></expr>:</case>
			<expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt>

		<case>case <expr><name>jbvBinary</name></expr>:</case>
			<return>return <expr><call><name>PLyObject_FromJsonbContainer</name><argument_list>(<argument><expr><name><name>jsonbValue</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>binary</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</return>

		<case>case <expr><name>jbvNumeric</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Datum</name></type>		<name>num</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>NumericGetDatum</name><argument_list>(<argument><expr><name><name>jsonbValue</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>numeric</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>DatumGetCString</name><argument_list>(<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>numeric_out</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<return>return <expr><call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>decimal_constructor</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block>

		<case>case <expr><name>jbvString</name></expr>:</case>
			<return>return <expr><call><name>PLyString_FromJsonbValue</name><argument_list>(<argument><expr><name>jsonbValue</name></expr></argument>)</argument_list></call></expr>;</return>

		<case>case <expr><name>jbvBool</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name><name>jsonbValue</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>boolean</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>Py_RETURN_TRUE</name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>Py_RETURN_FALSE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unexpected jsonb value type: %d"</literal></expr></argument>, <argument><expr><name><name>jsonbValue</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
 * PLyObject_FromJsonb
 *
 * Transform JsonbContainer to PyObject.
 */</comment>
<function><type><specifier>static</specifier> <name>PyObject</name> <modifier>*</modifier></type>
<name>PLyObject_FromJsonbContainer</name><parameter_list>(<parameter><decl><type><name>JsonbContainer</name> <modifier>*</modifier></type><name>jsonb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonbIteratorToken</name></type> <name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonbValue</name></type>	<name>v</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonbIterator</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name>JsonbIteratorInit</name><argument_list>(<argument><expr><name>jsonb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>JsonbIteratorNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name>r</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>WJB_BEGIN_ARRAY</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>.</operator><name>val</name><operator>.</operator><name>array</name><operator>.</operator><name>rawScalar</name></name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>JsonbValue</name></type>	<name>tmp</name></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>JsonbIteratorNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>WJB_ELEM</name> <operator>||</operator>
					<operator>(</operator><name>r</name> <operator>=</operator> <call><name>JsonbIteratorNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>WJB_END_ARRAY</name> <operator>||</operator>
					<operator>(</operator><name>r</name> <operator>=</operator> <call><name>JsonbIteratorNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>WJB_DONE</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unexpected jsonb token: %d"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>PLyObject_FromJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/* array in v */</comment>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>PyList_New</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

				<while>while <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>JsonbIteratorNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>WJB_DONE</name></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>WJB_ELEM</name></expr>)</condition>
					<block>{<block_content>
						<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>elem</name> <init>= <expr><call><name>PLyObject_FromJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

						<expr_stmt><expr><call><name>PyList_Append</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></while>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>

		<case>case <expr><name>WJB_BEGIN_OBJECT</name></expr>:</case>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>PyDict_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

			<while>while <condition>(<expr><operator>(</operator><name>r</name> <operator>=</operator> <call><name>JsonbIteratorNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>WJB_DONE</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>WJB_KEY</name></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>PLyString_FromJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<if_stmt><if>if <condition>(<expr><operator>!</operator><name>key</name></expr>)</condition><block type="pseudo"><block_content>
						<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

					<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>JsonbIteratorNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>WJB_VALUE</name></expr>)</condition>
					<block>{<block_content>
						<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>PLyObject_FromJsonbValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

						<if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<return>return <expr><name>NULL</name></expr>;</return>
						</block_content>}</block></if></if_stmt>

						<expr_stmt><expr><call><name>PyDict_SetItem</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>

					<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></while>
			<break>break;</break>

		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unexpected jsonb token: %d"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></switch>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * PLyMapping_ToJsonbValue
 *
 * Transform Python dict to JsonbValue.
 */</comment>
<function><type><specifier>static</specifier> <name>JsonbValue</name> <modifier>*</modifier></type>
<name>PLyMapping_ToJsonbValue</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>JsonbParseState</name> <modifier>*</modifier><modifier>*</modifier></type><name>jsonb_state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Py_ssize_t</name></type>	<name>pcount</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* We need it volatile, since we use it after longjmp */</comment>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>PyObject</name> <modifier>*</modifier></type><name>items_v</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>pcount</name> <operator>=</operator> <call><name>PyMapping_Size</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>items_v</name> <operator>=</operator> <call><name>PyMapping_Items</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Py_ssize_t</name></type>	<name>i</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>items</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>items</name> <operator>=</operator> <operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator> <name>items_v</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><name>jsonb_state</name></expr></argument>, <argument><expr><name>WJB_BEGIN_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pcount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>JsonbValue</name></type>	<name>jbvKey</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>PyList_GetItem</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>PyTuple_GetItem</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>PyTuple_GetItem</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<comment type="block">/* Python dictionary can have None as key */</comment>
			<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>Py_None</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>jbvKey</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>jbvString</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>jbvKey</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>jbvKey</name><operator>.</operator><name>val</name><operator>.</operator><name>string</name><operator>.</operator><name>val</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/* All others types of keys we serialize to string */</comment>
				<expr_stmt><expr><call><name>PLyString_ToJsonbValue</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jbvKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>

			<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pushJsonbValue</name><argument_list>(<argument><expr><name>jsonb_state</name></expr></argument>, <argument><expr><name>WJB_KEY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jbvKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>PLyObject_ToJsonbValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>jsonb_state</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>pushJsonbValue</name><argument_list>(<argument><expr><name>jsonb_state</name></expr></argument>, <argument><expr><name>WJB_END_OBJECT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>items_v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * PLySequence_ToJsonbValue
 *
 * Transform python list to JsonbValue. Expects transformed PyObject and
 * a state required for jsonb construction.
 */</comment>
<function><type><specifier>static</specifier> <name>JsonbValue</name> <modifier>*</modifier></type>
<name>PLySequence_ToJsonbValue</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>JsonbParseState</name> <modifier>*</modifier><modifier>*</modifier></type><name>jsonb_state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Py_ssize_t</name></type>	<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Py_ssize_t</name></type>	<name>pcount</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>pcount</name> <operator>=</operator> <call><name>PySequence_Size</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><name>jsonb_state</name></expr></argument>, <argument><expr><name>WJB_BEGIN_ARRAY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pcount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>PySequence_GetItem</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>PLyObject_ToJsonbValue</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>jsonb_state</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><name>jsonb_state</name></expr></argument>, <argument><expr><name>WJB_END_ARRAY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * PLyNumber_ToJsonbValue(PyObject *obj)
 *
 * Transform python number to JsonbValue.
 */</comment>
<function><type><specifier>static</specifier> <name>JsonbValue</name> <modifier>*</modifier></type>
<name>PLyNumber_ToJsonbValue</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>jbvNum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Numeric</name></type>		<name>num</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>PLyObject_AsString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Datum</name></type>		<name>numd</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>numd</name> <operator>=</operator> <call><name>DirectFunctionCall3</name><argument_list>(<argument><expr><name>numeric_in</name></expr></argument>,
								   <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>,
								   <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr></argument>,
								   <argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>DatumGetNumeric</name><argument_list>(<argument><expr><name>numd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATATYPE_MISMATCH</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not convert value \"%s\" to jsonb"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * jsonb doesn't allow NaN (per JSON specification), so we have to prevent
	 * it here explicitly.  (Infinity is also not allowed in jsonb, but
	 * numeric_in above already catches that.)
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>numeric_is_nan</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_NUMERIC_VALUE_OUT_OF_RANGE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cannot convert NaN to jsonb"</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>jbvNum</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>jbvNumeric</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>jbvNum</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>numeric</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>

	<return>return <expr><name>jbvNum</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * PLyObject_ToJsonbValue(PyObject *obj)
 *
 * Transform python object to JsonbValue.
 */</comment>
<function><type><specifier>static</specifier> <name>JsonbValue</name> <modifier>*</modifier></type>
<name>PLyObject_ToJsonbValue</name><parameter_list>(<parameter><decl><type><name>PyObject</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>JsonbParseState</name> <modifier>*</modifier><modifier>*</modifier></type><name>jsonb_state</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_elem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>JsonbValue</name></type>	<name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>PyString_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>PyUnicode_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>PySequence_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>PLySequence_ToJsonbValue</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>jsonb_state</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>PyMapping_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>PLyMapping_ToJsonbValue</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>jsonb_state</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Allocate JsonbValue in heap only if it is raw scalar value. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>jsonb_state</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>&amp;</operator><name>buf</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>JsonbValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>obj</name> <operator>==</operator> <name>Py_None</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>jbvNull</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>PyString_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>PyUnicode_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PLyString_ToJsonbValue</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<comment type="block">/*
	 * PyNumber_Check() returns true for booleans, so boolean check should
	 * come first.
	 */</comment>
	<if type="elseif">else if <condition>(<expr><call><name>PyBool_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>jbvBool</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>val</name><operator>.</operator><name>boolean</name></name> <operator>=</operator> <operator>(</operator><name>obj</name> <operator>==</operator> <name>Py_True</name><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>PyNumber_Check</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>PLyNumber_ToJsonbValue</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Python type \"%s\" cannot be transformed to jsonb"</literal></expr></argument>,
						 <argument><expr><call><name>PLyObject_AsString</name><argument_list>(<argument><expr><operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator> <name><name>obj</name><operator>-&gt;</operator><name>ob_type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/* Push result into 'jsonb_state' unless it is raw scalar value. */</comment>
	<return>return <expr><operator>(</operator><ternary><condition><expr><operator>*</operator><name>jsonb_state</name></expr> ?</condition><then>
			<expr><call><name>pushJsonbValue</name><argument_list>(<argument><expr><name>jsonb_state</name></expr></argument>, <argument><expr><ternary><condition><expr><name>is_elem</name></expr> ?</condition><then> <expr><name>WJB_ELEM</name></expr> </then><else>: <expr><name>WJB_VALUE</name></expr></else></ternary></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr> </then><else>:
			<expr><name>out</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * plpython_to_jsonb
 *
 * Transform python object to Jsonb datum
 */</comment>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>plpython_to_jsonb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>plpython_to_jsonb</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>obj</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonbValue</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>JsonbParseState</name> <modifier>*</modifier></type><name>jsonb_state</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>obj</name> <operator>=</operator> <operator>(</operator><name>PyObject</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>PLyObject_ToJsonbValue</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jsonb_state</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><call><name>JsonbValueToJsonb</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * jsonb_to_plpython
 *
 * Transform Jsonb datum to PyObject and return it as internal.
 */</comment>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>jsonb_to_plpython</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>jsonb_to_plpython</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Jsonb</name>	   <modifier>*</modifier></type><name>in</name> <init>= <expr><call><name>PG_GETARG_JSONB_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Initialize pointer to Decimal constructor. First we try "cdecimal", C
	 * version of decimal library. In case of failure we use slower "decimal"
	 * module.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>decimal_constructor</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>decimal_module</name> <init>= <expr><call><name>PyImport_ImportModule</name><argument_list>(<argument><expr><literal type="string">"cdecimal"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>decimal_module</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>decimal_module</name> <operator>=</operator> <call><name>PyImport_ImportModule</name><argument_list>(<argument><expr><literal type="string">"decimal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>decimal_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>decimal_constructor</name> <operator>=</operator> <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>decimal_module</name></expr></argument>, <argument><expr><literal type="string">"Decimal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>PLyObject_FromJsonbContainer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>in</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PLy_elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"transformation from jsonb to Python failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
