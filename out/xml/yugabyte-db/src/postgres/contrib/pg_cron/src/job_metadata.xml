<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/contrib/pg_cron/src/job_metadata.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * src/job_metadata.c
 *
 * Functions for reading and manipulating pg_cron metadata.
 *
 * Copyright (c) 2016, Citus Data, Inc.
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_yb_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cron.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cron_job.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"job_metadata.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_cron.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/genam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/heapam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/skey.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_extension.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/indexing.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/namespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/extension.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/sequence.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/trigger.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/postmaster.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/lock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/fmgroids.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/inval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/relcache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/snapmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">100000</literal><operator>)</operator></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/varlena.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/spi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/dbcommands.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_authid.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>PG_VERSION_NUM</name> <operator>&lt;</operator> <literal type="number">120000</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>table_open</name><parameter_list>(<parameter><type><name>r</name></type></parameter>, <parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>heap_open(r, l)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>table_close</name><parameter_list>(<parameter><type><name>r</name></type></parameter>, <parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>heap_close(r, l)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/* forward declarations */</comment>
<function_decl><type><specifier>static</specifier> <name>HTAB</name> <modifier>*</modifier></type> <name>CreateCronJobHash</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int64</name></type> <name>ScheduleCronJob</name><parameter_list>(<parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>scheduleText</name></decl></parameter>, <parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>commandText</name></decl></parameter>,
                <parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>databaseText</name></decl></parameter>, <parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>usernameText</name></decl></parameter>,
                <parameter><decl><type><name>bool</name></type> <name>active</name></decl></parameter>, <parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>jobnameText</name></decl></parameter>,
                <parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>nodenameText</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Oid</name></type> <name>CronExtensionOwner</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>EnsureDeletePermission</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>cronJobsTable</name></decl></parameter>, <parameter><decl><type><name>HeapTuple</name></type> <name>heapTuple</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>InvalidateJobCacheCallback</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>argument</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>relationId</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>InvalidateJobCache</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Oid</name></type> <name>CronJobRelationId</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>JobRunTableChangeCallback</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>argument</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>relationId</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SignalJobRunChange</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>CronJob</name> <modifier>*</modifier></type> <name>TupleToCronJob</name><parameter_list>(<parameter><decl><type><name>TupleDesc</name></type> <name>tupleDescriptor</name></decl></parameter>, <parameter><decl><type><name>HeapTuple</name></type> <name>heapTuple</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>AlterJob</name><parameter_list>(<parameter><decl><type><name>int64</name></type> <name>jobId</name></decl></parameter>, <parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>scheduleText</name></decl></parameter>, <parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>commandText</name></decl></parameter>,
           <parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>nodenameText</name></decl></parameter>, <parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>databaseText</name></decl></parameter>, <parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>usernameText</name></decl></parameter>,
           <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>active</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>Oid</name></type> <name>GetRoleOidIfCanLogin</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>username</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* SQL-callable functions */</comment>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>cron_schedule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>cron_schedule_named</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>cron_schedule_in_database</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>cron_unschedule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>cron_unschedule_named</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>cron_unschedule_yb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>cron_unschedule_named_yb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>cron_job_cache_invalidate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>cron_job_cache_invalidate_non_trigger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>cron_signal_job_run_change</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>cron_alter_job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<comment type="block">/* global variables */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>MemoryContext</name></type> <name>CronJobContext</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>HTAB</name> <modifier>*</modifier></type><name>CronJobHash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Oid</name></type> <name>CachedCronJobRelationId</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Oid</name></type> <name>CachedCronJobRunRelationId</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>CronJobCacheValid</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>CronJobRunTableChanged</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>CronHost</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>EnableSuperuserJobs</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>


<comment type="block">/*
 * InitializeJobMetadataCache initializes the data structures for caching
 * job metadata.
 */</comment>
<function><type><name>void</name></type>
<name>InitializeJobMetadataCache</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* watch for invalidation events */</comment>
  <expr_stmt><expr><call><name>CacheRegisterRelcacheCallback</name><argument_list>(<argument><expr><name>InvalidateJobCacheCallback</name></expr></argument>, <argument><expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CacheRegisterRelcacheCallback</name><argument_list>(<argument><expr><name>JobRunTableChangeCallback</name></expr></argument>, <argument><expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>CronJobContext</name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>CurrentMemoryContext</name></expr></argument>,
                       <argument><expr><literal type="string">"pg_cron job context"</literal></expr></argument>,
                       <argument><expr><name>ALLOCSET_DEFAULT_MINSIZE</name></expr></argument>,
                       <argument><expr><name>ALLOCSET_DEFAULT_INITSIZE</name></expr></argument>,
                       <argument><expr><name>ALLOCSET_DEFAULT_MAXSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>CronJobHash</name> <operator>=</operator> <call><name>CreateCronJobHash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * ResetJobMetadataCache resets the job metadata cache to its initial
 * state.
 */</comment>
<function><type><name>void</name></type>
<name>ResetJobMetadataCache</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>MemoryContextResetAndDeleteChildren</name><argument_list>(<argument><expr><name>CronJobContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>CronJobHash</name> <operator>=</operator> <call><name>CreateCronJobHash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * CreateCronJobHash creates the hash for caching job metadata.
 */</comment>
<function><type><specifier>static</specifier> <name>HTAB</name> <modifier>*</modifier></type>
<name>CreateCronJobHash</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HTAB</name> <modifier>*</modifier></type><name>taskHash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HASHCTL</name></type> <name>info</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>hashFlags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>info</name><operator>.</operator><name>keysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>info</name><operator>.</operator><name>entrysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CronJob</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>info</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name>tag_hash</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>info</name><operator>.</operator><name>hcxt</name></name> <operator>=</operator> <name>CronJobContext</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>hashFlags</name> <operator>=</operator> <operator>(</operator><name>HASH_ELEM</name> <operator>|</operator> <name>HASH_FUNCTION</name> <operator>|</operator> <name>HASH_CONTEXT</name><operator>)</operator></expr>;</expr_stmt>

  <expr_stmt><expr><name>taskHash</name> <operator>=</operator> <call><name>hash_create</name><argument_list>(<argument><expr><literal type="string">"pg_cron jobs"</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>hashFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>taskHash</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * GetCronJob gets the cron job with the given id.
 */</comment>
<function><type><name>CronJob</name> <modifier>*</modifier></type>
<name>GetCronJob</name><parameter_list>(<parameter><decl><type><name>int64</name></type> <name>jobId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>CronJob</name> <modifier>*</modifier></type><name>job</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64</name></type> <name>hashKey</name> <init>= <expr><name>jobId</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>isPresent</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>job</name> <operator>=</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>CronJobHash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hashKey</name></expr></argument>, <argument><expr><name>HASH_FIND</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isPresent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>job</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * ScheduleCronJob schedules a cron job with the given name.
 */</comment>
<function><type><specifier>static</specifier> <name>int64</name></type>
<name>ScheduleCronJob</name><parameter_list>(<parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>scheduleText</name></decl></parameter>, <parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>commandText</name></decl></parameter>, <parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>databaseText</name></decl></parameter>,
          <parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>usernameText</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>active</name></decl></parameter>, <parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>jobnameText</name></decl></parameter>, <parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>nodenameText</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>entry</name> <modifier>*</modifier></type><name>parsedSchedule</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>schedule</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>command</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nodename</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>database_name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>jobName</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>username</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>AclResult</name></type> <name>aclresult</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Oid</name></type> <name>userIdcheckacl</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64</name></type> <name>jobId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Datum</name></type> <name>jobIdDatum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>StringInfoData</name></type> <name>querybuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Oid</name></type> <name><name>argTypes</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Datum</name></type> <name><name>argValues</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>nullValues</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>nullValues</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>argCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>Oid</name></type> <name>savedUserId</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>savedSecurityContext</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TupleDesc</name></type> <name>returnedRowDescriptor</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HeapTuple</name></type> <name>returnedRow</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>returnedJobIdIsNull</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>Oid</name></type> <name>userId</name> <init>= <expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>userIdcheckacl</name> <operator>=</operator> <call><name>GetUserId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>username</name> <operator>=</operator> <call><name>GetUserNameFromId</name><argument_list>(<argument><expr><name>userId</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* check schedule is valid */</comment>
  <expr_stmt><expr><name>schedule</name> <operator>=</operator> <call><name>text_to_cstring</name><argument_list>(<argument><expr><name>scheduleText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>parsedSchedule</name> <operator>=</operator> <call><name>parse_cron_entry</name><argument_list>(<argument><expr><name>schedule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>parsedSchedule</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
            <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid schedule: %s"</literal></expr></argument>, <argument><expr><name>schedule</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>free_entry</name><argument_list>(<argument><expr><name>parsedSchedule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querybuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querybuf</name></expr></argument>,
    <argument><expr><literal type="string">"insert into %s (schedule, command, database, username, active, nodename"</literal></expr></argument>,
    <argument><expr><call><name>quote_qualified_identifier</name><argument_list>(<argument><expr><name>CRON_SCHEMA_NAME</name></expr></argument>, <argument><expr><name>JOBS_TABLE_NAME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>jobnameText</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querybuf</name></expr></argument>, <argument><expr><literal type="string">", jobname"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querybuf</name></expr></argument>, <argument><expr><literal type="string">") values ($1, $2, $3, $4, $5, $6"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>jobnameText</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querybuf</name></expr></argument>, <argument><expr><literal type="string">", $7) "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querybuf</name></expr></argument>, <argument><expr><literal type="string">"on conflict on constraint jobname_username_uniq "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querybuf</name></expr></argument>, <argument><expr><literal type="string">"do update set "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querybuf</name></expr></argument>, <argument><expr><literal type="string">"schedule = EXCLUDED.schedule, "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querybuf</name></expr></argument>, <argument><expr><literal type="string">"command = EXCLUDED.command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querybuf</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querybuf</name></expr></argument>, <argument><expr><literal type="string">" returning jobid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>argTypes</name><index>[<expr><name>argCount</name></expr>]</index></name> <operator>=</operator> <name>TEXTOID</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>argValues</name><index>[<expr><name>argCount</name></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>schedule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>argCount</name><operator>++</operator></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>argTypes</name><index>[<expr><name>argCount</name></expr>]</index></name> <operator>=</operator> <name>TEXTOID</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>command</name> <operator>=</operator> <call><name>text_to_cstring</name><argument_list>(<argument><expr><name>commandText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>argValues</name><index>[<expr><name>argCount</name></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>argCount</name><operator>++</operator></expr>;</expr_stmt>

  <comment type="block">/* username has been provided */</comment>
  <if_stmt><if>if <condition>(<expr><name>usernameText</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>superuser</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"must be superuser to create a job for another role"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>username</name> <operator>=</operator> <call><name>text_to_cstring</name><argument_list>(<argument><expr><name>usernameText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>userIdcheckacl</name> <operator>=</operator> <call><name>GetRoleOidIfCanLogin</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* database has been provided */</comment>
  <if_stmt><if>if <condition>(<expr><name>databaseText</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>database_name</name> <operator>=</operator> <call><name>text_to_cstring</name><argument_list>(<argument><expr><name>databaseText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
  <comment type="block">/* use the GUC */</comment>
    <expr_stmt><expr><name>database_name</name> <operator>=</operator> <name>CronTableDatabaseName</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <comment type="block">/* first do a crude check to see whether superuser jobs are allowed */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>EnableSuperuserJobs</name> <operator>&amp;&amp;</operator> <call><name>superuser_arg</name><argument_list>(<argument><expr><name>userIdcheckacl</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_PRIVILEGE</name></expr></argument>)</argument_list></call><operator>,</operator>
            <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cannot schedule jobs as superuser"</literal></expr></argument>)</argument_list></call><operator>,</operator>
            <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Scheduling jobs as superuser is disallowed when "</literal>
                  <literal type="string">"cron.enable_superuser_jobs is set to off."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* ensure the user that is used in the job can connect to the database */</comment>
  <expr_stmt><expr><name>aclresult</name> <operator>=</operator> <call><name>pg_database_aclcheck</name><argument_list>(<argument><expr><call><name>get_database_oid</name><argument_list>(<argument><expr><name>database_name</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name>userIdcheckacl</name></expr></argument>, <argument><expr><name>ACL_CONNECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>aclresult</name> <operator>!=</operator> <name>ACLCHECK_OK</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"User %s does not have CONNECT privilege on %s"</literal></expr></argument>,
        <argument><expr><call><name>GetUserNameFromId</name><argument_list>(<argument><expr><name>userIdcheckacl</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>database_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>argTypes</name><index>[<expr><name>argCount</name></expr>]</index></name> <operator>=</operator> <name>TEXTOID</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>argValues</name><index>[<expr><name>argCount</name></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>database_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>argCount</name><operator>++</operator></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>argTypes</name><index>[<expr><name>argCount</name></expr>]</index></name> <operator>=</operator> <name>TEXTOID</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>argValues</name><index>[<expr><name>argCount</name></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>argCount</name><operator>++</operator></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>argTypes</name><index>[<expr><name>argCount</name></expr>]</index></name> <operator>=</operator> <name>BOOLOID</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>argValues</name><index>[<expr><name>argCount</name></expr>]</index></name> <operator>=</operator> <call><name>BoolGetDatum</name><argument_list>(<argument><expr><name>active</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>argCount</name><operator>++</operator></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>argTypes</name><index>[<expr><name>argCount</name></expr>]</index></name> <operator>=</operator> <name>TEXTOID</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>nodenameText</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>  
    <expr_stmt><expr><name>nodename</name> <operator>=</operator> <call><name>text_to_cstring</name><argument_list>(<argument><expr><name>nodenameText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>argValues</name><index>[<expr><name>argCount</name></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <comment type="line">// set this field to be null</comment>
    <expr_stmt><expr><name><name>nullValues</name><index>[<expr><name>argCount</name></expr>]</index></name> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name>argCount</name><operator>++</operator></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>jobnameText</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>argTypes</name><index>[<expr><name>argCount</name></expr>]</index></name> <operator>=</operator> <name>TEXTOID</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>jobName</name> <operator>=</operator> <call><name>text_to_cstring</name><argument_list>(<argument><expr><name>jobnameText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>argValues</name><index>[<expr><name>argCount</name></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>jobName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>argCount</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>GetUserIdAndSecContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>savedUserId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>savedSecurityContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SetUserIdAndSecContext</name><argument_list>(<argument><expr><call><name>CronExtensionOwner</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SECURITY_LOCAL_USERID_CHANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Open SPI context. */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>SPI_connect</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>SPI_OK_CONNECT</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"SPI_connect failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>SPI_execute_with_args</name><argument_list>(<argument><expr><name><name>querybuf</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>argCount</name></expr></argument>, <argument><expr><name>argTypes</name></expr></argument>, <argument><expr><name>argValues</name></expr></argument>, <argument><expr><name>nullValues</name></expr></argument>,
                <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SPI_OK_INSERT_RETURNING</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"SPI_exec failed: %s"</literal></expr></argument>, <argument><expr><name><name>querybuf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>SPI_processed</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"query did not return any rows: %s"</literal></expr></argument>, <argument><expr><name><name>querybuf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>returnedRowDescriptor</name> <operator>=</operator> <name><name>SPI_tuptable</name><operator>-&gt;</operator><name>tupdesc</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>returnedRow</name> <operator>=</operator> <name><name>SPI_tuptable</name><operator>-&gt;</operator><name>vals</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

  <expr_stmt><expr><name>jobIdDatum</name> <operator>=</operator> <call><name>SPI_getbinval</name><argument_list>(<argument><expr><name>returnedRow</name></expr></argument>, <argument><expr><name>returnedRowDescriptor</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
                 <argument><expr><operator>&amp;</operator><name>returnedJobIdIsNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>jobId</name> <operator>=</operator> <call><name>DatumGetInt64</name><argument_list>(<argument><expr><name>jobIdDatum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>querybuf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SPI_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SetUserIdAndSecContext</name><argument_list>(<argument><expr><name>savedUserId</name></expr></argument>, <argument><expr><name>savedSecurityContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// InvalidateJobCache();</comment>

  <return>return <expr><name>jobId</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * GetRoleOidIfCanLogin
 * Checks user exist and can log in
 */</comment>
<function><type><specifier>static</specifier> <name>Oid</name></type>
<name>GetRoleOidIfCanLogin</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>username</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HeapTuple</name></type>   <name>roletup</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Form_pg_authid</name></type> <name>rform</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Oid</name></type> <name>roleOid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>roletup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>AUTHNAME</name></expr></argument>, <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>roletup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
        <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"role \"%s\" does not exist"</literal></expr></argument>,
            <argument><expr><name>username</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>rform</name> <operator>=</operator> <operator>(</operator><name>Form_pg_authid</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>roletup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rform</name><operator>-&gt;</operator><name>rolcanlogin</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
        <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"role \"%s\" can not log in"</literal></expr></argument>,
            <argument><expr><name>username</name></expr></argument>)</argument_list></call><operator>,</operator>
         <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Jobs may only be run by roles that have the LOGIN attribute."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>PG_VERSION_NUM</name> <operator>&lt;</operator> <literal type="number">120000</literal><operator>)</operator></expr></cpp:if>
  <expr_stmt><expr><name>roleOid</name> <operator>=</operator> <call><name>HeapTupleGetOid</name><argument_list>(<argument><expr><name>roletup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><name>roleOid</name> <operator>=</operator> <name><name>rform</name><operator>-&gt;</operator><name>oid</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>roletup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>roleOid</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * cron_alter_job alter a job
 */</comment>
<function><type><name>Datum</name></type>
<name>cron_alter_job</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int64</name></type> <name>jobId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>scheduleText</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>commandText</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>databaseText</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>usernameText</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>active</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>nodenameText</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"job_id can not be NULL"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>jobId</name> <operator>=</operator> <call><name>PG_GETARG_INT64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>scheduleText</name> <operator>=</operator> <call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>commandText</name> <operator>=</operator> <call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>databaseText</name> <operator>=</operator> <call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>usernameText</name> <operator>=</operator> <call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>active</name> <operator>=</operator> <call><name>PG_GETARG_BOOL</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>nodenameText</name> <operator>=</operator> <call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>AlterJob</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>, <argument><expr><name>scheduleText</name></expr></argument>, <argument><expr><name>commandText</name></expr></argument>, <argument><expr><name>nodenameText</name></expr></argument>, <argument><expr><name>databaseText</name></expr></argument>, <argument><expr><name>usernameText</name></expr></argument>,
        <argument><expr><ternary><condition><expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>&amp;</operator><name>active</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * cron_schedule schedule a job
 */</comment>
<function><type><name>Datum</name></type>
<name>cron_schedule</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>scheduleText</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>commandText</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64</name></type> <name>jobId</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"schedule can not be NULL"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>scheduleText</name> <operator>=</operator> <call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"command can not be NULL"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>commandText</name> <operator>=</operator> <call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <expr_stmt><expr><name>jobId</name> <operator>=</operator> <call><name>ScheduleCronJob</name><argument_list>(<argument><expr><name>scheduleText</name></expr></argument>, <argument><expr><name>commandText</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
              <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>PG_RETURN_INT64</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * cron_schedule schedule a named job
 */</comment>
<function><type><name>Datum</name></type>
<name>cron_schedule_named</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>scheduleText</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>commandText</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>nodenameText</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>jobnameText</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64</name></type> <name>jobId</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"job_name can not be NULL"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>jobnameText</name> <operator>=</operator> <call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"schedule can not be NULL"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>scheduleText</name> <operator>=</operator> <call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"command can not be NULL"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>commandText</name> <operator>=</operator> <call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>nodenameText</name> <operator>=</operator> <call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>jobId</name> <operator>=</operator> <call><name>ScheduleCronJob</name><argument_list>(<argument><expr><name>scheduleText</name></expr></argument>, <argument><expr><name>commandText</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
              <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>jobnameText</name></expr></argument>, <argument><expr><name>nodenameText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>PG_RETURN_INT64</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * cron_schedule_in_database schedule a named job with more options. We cannot
 * set nodename to be the 4th parameter and have cron_schedule_named also
 * point to cron_schedule_in_database because this would break compatibility
 * with the older sql function interface for cron_schedule_in_database
 */</comment>
<function><type><name>Datum</name></type>
<name>cron_schedule_in_database</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>scheduleText</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>commandText</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>nodenameText</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>databaseText</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>usernameText</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>active</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>jobnameText</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64</name></type> <name>jobId</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"job_name can not be NULL"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>jobnameText</name> <operator>=</operator> <call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"schedule can not be NULL"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>scheduleText</name> <operator>=</operator> <call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"command can not be NULL"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>commandText</name> <operator>=</operator> <call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"database can not be NULL"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>databaseText</name> <operator>=</operator> <call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>usernameText</name> <operator>=</operator> <call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>active</name> <operator>=</operator> <call><name>PG_GETARG_BOOL</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>nodenameText</name> <operator>=</operator> <call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>jobId</name> <operator>=</operator> <call><name>ScheduleCronJob</name><argument_list>(<argument><expr><name>scheduleText</name></expr></argument>, <argument><expr><name>commandText</name></expr></argument>, <argument><expr><name>databaseText</name></expr></argument>,
              <argument><expr><name>usernameText</name></expr></argument>, <argument><expr><name>active</name></expr></argument>, <argument><expr><name>jobnameText</name></expr></argument>, <argument><expr><name>nodenameText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>PG_RETURN_INT64</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block">/*
 * NextRunId draws a new run ID from cron.runid_seq.
 */</comment>
<function><type><name>int64</name></type>
<name>NextRunId</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>sequenceName</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Oid</name></type> <name>sequenceId</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>sequenceNameList</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>RangeVar</name> <modifier>*</modifier></type><name>sequenceVar</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Datum</name></type> <name>sequenceIdDatum</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Oid</name></type> <name>savedUserId</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>savedSecurityContext</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Datum</name></type> <name>jobIdDatum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64</name></type> <name>jobId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>failOK</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MemoryContext</name></type> <name>originalContext</name> <init>= <expr><name>CurrentMemoryContext</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>StartTransactionCommand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PushActiveSnapshot</name><argument_list>(<argument><expr><call><name>GetTransactionSnapshot</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>JobRunDetailsTableExists</name><argument_list>()</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>PopActiveSnapshot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CommitTransactionCommand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>originalContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* if the job_run_details table is not yet created, the run ID is not used */</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* resolve relationId from passed in schema and relation name */</comment>
  <expr_stmt><expr><name>sequenceName</name> <operator>=</operator> <call><name>cstring_to_text</name><argument_list>(<argument><expr><name>RUN_ID_SEQUENCE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>sequenceNameList</name> <operator>=</operator> <call><name>textToQualifiedNameList</name><argument_list>(<argument><expr><name>sequenceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>sequenceVar</name> <operator>=</operator> <call><name>makeRangeVarFromNameList</name><argument_list>(<argument><expr><name>sequenceNameList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>sequenceId</name> <operator>=</operator> <call><name>RangeVarGetRelid</name><argument_list>(<argument><expr><name>sequenceVar</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>, <argument><expr><name>failOK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>sequenceIdDatum</name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>sequenceId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>GetUserIdAndSecContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>savedUserId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>savedSecurityContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SetUserIdAndSecContext</name><argument_list>(<argument><expr><call><name>CronExtensionOwner</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SECURITY_LOCAL_USERID_CHANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* generate new and unique colocation id from sequence */</comment>
  <expr_stmt><expr><name>jobIdDatum</name> <operator>=</operator> <call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>nextval_oid</name></expr></argument>, <argument><expr><name>sequenceIdDatum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SetUserIdAndSecContext</name><argument_list>(<argument><expr><name>savedUserId</name></expr></argument>, <argument><expr><name>savedSecurityContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>jobId</name> <operator>=</operator> <call><name>DatumGetInt64</name><argument_list>(<argument><expr><name>jobIdDatum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>PopActiveSnapshot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CommitTransactionCommand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>originalContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>jobId</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * CronExtensionOwner returns the name of the user that owns the
 * extension.
 */</comment>
<function><type><specifier>static</specifier> <name>Oid</name></type>
<name>CronExtensionOwner</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>Relation</name></type> <name>extensionRelation</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SysScanDesc</name></type> <name>scanDescriptor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>entry</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HeapTuple</name></type> <name>extensionTuple</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Form_pg_extension</name></type> <name>extensionForm</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Oid</name></type> <name>extensionOwner</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>extensionRelation</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><name>ExtensionRelationId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
        <argument><expr><name>Anum_pg_extension_extname</name></expr></argument>,
        <argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_NAMEEQ</name></expr></argument>,
        <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>EXTENSION_NAME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>scanDescriptor</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>extensionRelation</name></expr></argument>, <argument><expr><name>ExtensionNameIndexId</name></expr></argument>,
                    <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>extensionTuple</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>scanDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>extensionTuple</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OBJECT_NOT_IN_PREREQUISITE_STATE</name></expr></argument>)</argument_list></call><operator>,</operator>
            <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"pg_cron extension not loaded"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>extensionForm</name> <operator>=</operator> <operator>(</operator><name>Form_pg_extension</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>extensionTuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>extensionOwner</name> <operator>=</operator> <name><name>extensionForm</name><operator>-&gt;</operator><name>extowner</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>scanDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>extensionRelation</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>extensionOwner</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * cron_unschedule removes a cron job.
 */</comment>
<function><type><name>Datum</name></type>
<name>cron_unschedule</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>cron_unschedule_yb</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</return>

  <comment type="line" format="doxygen">/////////////////</comment>

  <decl_stmt><decl><type><name>int64</name></type> <name>jobId</name> <init>= <expr><call><name>PG_GETARG_INT64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>Oid</name></type> <name>cronSchemaId</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Oid</name></type> <name>cronJobIndexId</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>Relation</name></type> <name>cronJobsTable</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SysScanDesc</name></type> <name>scanDescriptor</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>scanKey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>scanKeyCount</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>indexOK</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HeapTuple</name></type> <name>heapTuple</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>cronSchemaId</name> <operator>=</operator> <call><name>get_namespace_oid</name><argument_list>(<argument><expr><name>CRON_SCHEMA_NAME</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cronJobIndexId</name> <operator>=</operator> <call><name>get_relname_relid</name><argument_list>(<argument><expr><name>JOB_ID_INDEX_NAME</name></expr></argument>, <argument><expr><name>cronSchemaId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>cronJobsTable</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><call><name>CronJobRelationId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scanKey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>Anum_cron_job_jobid</name></expr></argument>,
        <argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_INT8EQ</name></expr></argument>, <argument><expr><call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>scanDescriptor</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>cronJobsTable</name></expr></argument>,
                    <argument><expr><name>cronJobIndexId</name></expr></argument>, <argument><expr><name>indexOK</name></expr></argument>,
                    <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>scanKeyCount</name></expr></argument>, <argument><expr><name>scanKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>heapTuple</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>scanDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>heapTuple</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not find valid entry for job "</literal>
                 <name>INT64_FORMAT</name></expr></argument>, <argument><expr><name>jobId</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>EnsureDeletePermission</name><argument_list>(<argument><expr><name>cronJobsTable</name></expr></argument>, <argument><expr><name>heapTuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>simple_heap_delete</name><argument_list>(<argument><expr><name>cronJobsTable</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>heapTuple</name><operator>-&gt;</operator><name>t_self</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>scanDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>cronJobsTable</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CommandCounterIncrement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>InvalidateJobCache</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * cron_unschedule_yb removes a cron job.
 */</comment>
<function><type><name>Datum</name></type>
<name>cron_unschedule_yb</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>StringInfoData</name></type> <name>querybuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>argCount</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Oid</name></type> <name><name>argTypes</name><index>[<expr><name>argCount</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Datum</name></type> <name><name>argValues</name><index>[<expr><name>argCount</name></expr>]</index></name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64</name></type> <name>jobId</name> <init>= <expr><call><name>PG_GETARG_INT64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>argTypes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>INT8OID</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>argValues</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querybuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// TODO: Use yugabyte equivalent of heap_delete</comment>

  <comment type="block">/* Open SPI context. */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>SPI_connect</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>SPI_OK_CONNECT</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"SPI_connect failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querybuf</name></expr></argument>,
    <argument><expr><literal type="string">"delete from %s.%s where jobid=$1"</literal></expr></argument>,
    <argument><expr><name>CRON_SCHEMA_NAME</name></expr></argument>, <argument><expr><name>JOBS_TABLE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"SPI_exec: %s"</literal></expr></argument>, <argument><expr><name><name>querybuf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>SPI_execute_with_args</name><argument_list>(<argument><expr><name><name>querybuf</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>argCount</name></expr></argument>, <argument><expr><name>argTypes</name></expr></argument>, <argument><expr><name>argValues</name></expr></argument>,
                <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SPI_OK_DELETE</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"SPI_exec failed: %s"</literal></expr></argument>, <argument><expr><name><name>querybuf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>querybuf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SPI_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * cron_unschedule_named removes a cron job by name.
 */</comment>
<function><type><name>Datum</name></type>
<name>cron_unschedule_named</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>cron_unschedule_named_yb</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</return>

  <comment type="line" format="doxygen">//////////////</comment>

  <decl_stmt><decl><type><name>Datum</name></type> <name>jobNameDatum</name> <init>= <expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Name</name></type> <name>jobName</name> <init>= <expr><call><name>DatumGetName</name><argument_list>(<argument><expr><name>jobNameDatum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>Oid</name></type> <name>userId</name> <init>= <expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>userName</name> <init>= <expr><call><name>GetUserNameFromId</name><argument_list>(<argument><expr><name>userId</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Datum</name></type> <name>userNameDatum</name> <init>= <expr><call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>userName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>Relation</name></type> <name>cronJobsTable</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SysScanDesc</name></type> <name>scanDescriptor</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>scanKey</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>scanKeyCount</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>indexOK</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HeapTuple</name></type> <name>heapTuple</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>cronJobsTable</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><call><name>CronJobRelationId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scanKey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>Anum_cron_job_jobname</name></expr></argument>,
        <argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_NAMEEQ</name></expr></argument>, <argument><expr><name>jobNameDatum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scanKey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>Anum_cron_job_username</name></expr></argument>,
        <argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_TEXTEQ</name></expr></argument>, <argument><expr><name>userNameDatum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>scanDescriptor</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>cronJobsTable</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><name>indexOK</name></expr></argument>,
                    <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>scanKeyCount</name></expr></argument>, <argument><expr><name>scanKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>heapTuple</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>scanDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>heapTuple</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not find valid entry for job '%s'"</literal></expr></argument>,
                 <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><operator>*</operator><name>jobName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>EnsureDeletePermission</name><argument_list>(<argument><expr><name>cronJobsTable</name></expr></argument>, <argument><expr><name>heapTuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>simple_heap_delete</name><argument_list>(<argument><expr><name>cronJobsTable</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>heapTuple</name><operator>-&gt;</operator><name>t_self</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>scanDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>cronJobsTable</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>CommandCounterIncrement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>InvalidateJobCache</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * cron_unschedule_named_yb removes a cron job by name.
 */</comment>
<function><type><name>Datum</name></type>
<name>cron_unschedule_named_yb</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>StringInfoData</name></type> <name>querybuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>argCount</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Oid</name></type> <name><name>argTypes</name><index>[<expr><name>argCount</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Datum</name></type> <name><name>argValues</name><index>[<expr><name>argCount</name></expr>]</index></name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>Datum</name></type> <name>jobNameDatum</name> <init>= <expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><name>Oid</name></type> <name>userId</name> <init>= <expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>userName</name> <init>= <expr><call><name>GetUserNameFromId</name><argument_list>(<argument><expr><name>userId</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>argTypes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NAMEOID</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>argValues</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>jobNameDatum</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>argTypes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>TEXTOID</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>argValues</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>userName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querybuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// TODO: Use yugabyte equivalent of heap_delete</comment>

  <comment type="block">/* Open SPI context. */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>SPI_connect</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>SPI_OK_CONNECT</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"SPI_connect failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querybuf</name></expr></argument>,
    <argument><expr><literal type="string">"delete from %s.%s where jobname=$1 and username=$2"</literal></expr></argument>,
    <argument><expr><name>CRON_SCHEMA_NAME</name></expr></argument>, <argument><expr><name>JOBS_TABLE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"SPI_exec: %s"</literal></expr></argument>, <argument><expr><name><name>querybuf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>SPI_execute_with_args</name><argument_list>(<argument><expr><name><name>querybuf</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>argCount</name></expr></argument>, <argument><expr><name>argTypes</name></expr></argument>, <argument><expr><name>argValues</name></expr></argument>,
                <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SPI_OK_DELETE</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"SPI_exec failed: %s"</literal></expr></argument>, <argument><expr><name><name>querybuf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>querybuf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SPI_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * EnsureDeletePermission throws an error if the current user does
 * not have permission to delete the given cron.job tuple.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>EnsureDeletePermission</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>cronJobsTable</name></decl></parameter>, <parameter><decl><type><name>HeapTuple</name></type> <name>heapTuple</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>TupleDesc</name></type> <name>tupleDescriptor</name> <init>= <expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>cronJobsTable</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* check if the current user owns the row */</comment>
  <decl_stmt><decl><type><name>Oid</name></type> <name>userId</name> <init>= <expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>userName</name> <init>= <expr><call><name>GetUserNameFromId</name><argument_list>(<argument><expr><name>userId</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>isNull</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Datum</name></type> <name>ownerNameDatum</name> <init>= <expr><call><name>heap_getattr</name><argument_list>(<argument><expr><name>heapTuple</name></expr></argument>, <argument><expr><name>Anum_cron_job_username</name></expr></argument>,
                    <argument><expr><name>tupleDescriptor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ownerName</name> <init>= <expr><call><name>TextDatumGetCString</name><argument_list>(<argument><expr><name>ownerNameDatum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name>userName</name></expr></argument>, <argument><expr><name>ownerName</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* otherwise, allow if the user has DELETE permission */</comment>
    <decl_stmt><decl><type><name>AclResult</name></type> <name>aclResult</name> <init>= <expr><call><name>pg_class_aclcheck</name><argument_list>(<argument><expr><call><name>CronJobRelationId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><name>ACL_DELETE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>aclResult</name> <operator>!=</operator> <name>ACLCHECK_OK</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>aclcheck_error</name><argument_list>(<argument><expr><name>aclResult</name></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>PG_VERSION_NUM</name> <operator>&lt;</operator> <literal type="number">110000</literal><operator>)</operator></expr></cpp:if>
               <argument><expr><name>ACL_KIND_CLASS</name></expr></argument>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
               <argument><expr><name>OBJECT_TABLE</name></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
               <argument><expr><call><name>get_rel_name</name><argument_list>(<argument><expr><call><name>CronJobRelationId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * cron_job_cache_invalidate invalidates the job cache in response to
 * a trigger.
 */</comment>
<function><type><name>Datum</name></type>
<name>cron_job_cache_invalidate</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CALLED_AS_TRIGGER</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_E_R_I_E_TRIGGER_PROTOCOL_VIOLATED</name></expr></argument>)</argument_list></call><operator>,</operator>
            <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"must be called as trigger"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>InvalidateJobCache</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * cron_job_cache_invalidate_non_trigger invalidates the job cache. We have a
 * non-trigger version so that our cron service can signal to the postgres
 * that the job table changed
 */</comment>
<function><type><name>Datum</name></type>
<name>cron_job_cache_invalidate_non_trigger</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>InvalidateJobCache</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * cron_job_cache_invalidate_non_trigger invalidates the job cache
 */</comment>
<function><type><name>Datum</name></type>
<name>cron_signal_job_run_change</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>SignalJobRunChange</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Invalidate job cache ensures the job cache is reloaded on the next
 * iteration of pg_cron.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>InvalidateJobCache</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HeapTuple</name></type> <name>classTuple</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>classTuple</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>RELOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><call><name>CronJobRelationId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>classTuple</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cache invalidated"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CacheInvalidateRelcacheByTuple</name><argument_list>(<argument><expr><name>classTuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>classTuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * SignalJobRunChange ensures the job run table is scanned for newly
 * assigned jobs and possibly job completions on the next iteration of pg_cron
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>SignalJobRunChange</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HeapTuple</name></type> <name>classTuple</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>classTuple</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>RELOID</name></expr></argument>,
                 <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><call><name>CronJobRunRelationId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>classTuple</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>CacheInvalidateRelcacheByTuple</name><argument_list>(<argument><expr><name>classTuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>classTuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * InvalidateJobCacheCallback invalidates the job cache in response to
 * an invalidation event.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>InvalidateJobCacheCallback</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>argument</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>relationId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>relationId</name> <operator>==</operator> <name>CachedCronJobRelationId</name> <operator>||</operator>
    <name>CachedCronJobRelationId</name> <operator>==</operator> <name>InvalidOid</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"callback triggered"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>CronJobCacheValid</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>CachedCronJobRelationId</name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * JobRunTableChangeCallback signals the job_run_details table was updated.
 * Invalidation of the job_run_details table only occurs by manually
 * executing the sql function cron.signal_job_run_change().
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>JobRunTableChangeCallback</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>argument</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>relationId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>relationId</name> <operator>==</operator> <name>CachedCronJobRunRelationId</name> <operator>||</operator>
    <name>CachedCronJobRunRelationId</name> <operator>==</operator> <name>InvalidOid</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"job run callback triggered"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>CronJobRunTableChanged</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>CachedCronJobRunRelationId</name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * CronJobRunRelationId returns a cached oid of the cron.job_run_details
 * relation.
 */</comment>
<function><type><name>Oid</name></type>
<name>CronJobRunRelationId</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>CachedCronJobRunRelationId</name> <operator>==</operator> <name>InvalidOid</name></expr>)</condition>
  <block>{<block_content>
    <decl_stmt><decl><type><name>Oid</name></type> <name>cronSchemaId</name> <init>= <expr><call><name>get_namespace_oid</name><argument_list>(<argument><expr><name>CRON_SCHEMA_NAME</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>CachedCronJobRunRelationId</name> <operator>=</operator>
      <call><name>get_relname_relid</name><argument_list>(<argument><expr><name>JOB_RUN_DETAILS_TABLE_NAME</name></expr></argument>, <argument><expr><name>cronSchemaId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>CachedCronJobRunRelationId</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * CachedCronJobRelationId returns a cached oid of the cron.job relation.
 */</comment>
<function><type><specifier>static</specifier> <name>Oid</name></type>
<name>CronJobRelationId</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>CachedCronJobRelationId</name> <operator>==</operator> <name>InvalidOid</name></expr>)</condition>
  <block>{<block_content>
    <decl_stmt><decl><type><name>Oid</name></type> <name>cronSchemaId</name> <init>= <expr><call><name>get_namespace_oid</name><argument_list>(<argument><expr><name>CRON_SCHEMA_NAME</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>CachedCronJobRelationId</name> <operator>=</operator> <call><name>get_relname_relid</name><argument_list>(<argument><expr><name>JOBS_TABLE_NAME</name></expr></argument>, <argument><expr><name>cronSchemaId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>CachedCronJobRelationId</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * LoadCronJobList loads the current list of jobs from the
 * cron.job table and adds each job to the CronJobHash.
 */</comment>
<function><type><name>List</name> <modifier>*</modifier></type>
<name>LoadCronJobList</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>jobList</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>Relation</name></type> <name>cronJobTable</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SysScanDesc</name></type> <name>scanDescriptor</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>scanKey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>scanKeyCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HeapTuple</name></type> <name>heapTuple</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TupleDesc</name></type> <name>tupleDescriptor</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MemoryContext</name></type> <name>originalContext</name> <init>= <expr><name>CurrentMemoryContext</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SetCurrentStatementStartTimestamp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>StartTransactionCommand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PushActiveSnapshot</name><argument_list>(<argument><expr><call><name>GetTransactionSnapshot</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*
   * If the pg_cron extension has not been created yet or
   * we are on a hot standby, the job table is treated as
   * being empty.
   */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PgCronHasBeenLoaded</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>RecoveryInProgress</name><argument_list>()</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>PopActiveSnapshot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CommitTransactionCommand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>originalContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pgstat_report_activity</name><argument_list>(<argument><expr><name>STATE_IDLE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NIL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>cronJobTable</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><call><name>CronJobRelationId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>scanDescriptor</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>cronJobTable</name></expr></argument>,
                    <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
                    <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>scanKeyCount</name></expr></argument>, <argument><expr><name>scanKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tupleDescriptor</name> <operator>=</operator> <call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>cronJobTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>heapTuple</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>scanDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>heapTuple</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CronJob</name> <modifier>*</modifier></type><name>job</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Oid</name></type> <name>jobOwnerId</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>CronJobContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>job</name> <operator>=</operator> <call><name>TupleToCronJob</name><argument_list>(<argument><expr><name>tupleDescriptor</name></expr></argument>, <argument><expr><name>heapTuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>jobOwnerId</name> <operator>=</operator> <call><name>get_role_oid</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>userName</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>EnableSuperuserJobs</name> <operator>&amp;&amp;</operator> <call><name>superuser_arg</name><argument_list>(<argument><expr><name>jobOwnerId</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/*
       * Someone inserted a superuser into the metadata. Skip over the
       * job when cron.enable_superuser_jobs is disabled. The memory
       * will be cleaned up when CronJobContext is reset.
       */</comment>
      <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_PRIVILEGE</name></expr></argument>)</argument_list></call><operator>,</operator>
                <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"skipping job "</literal> <name>INT64_FORMAT</name> <literal type="string">" since superuser jobs "</literal>
                   <literal type="string">"are currently disallowed"</literal></expr></argument>,
                   <argument><expr><name><name>job</name><operator>-&gt;</operator><name>jobId</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name>jobList</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>jobList</name></expr></argument>, <argument><expr><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>heapTuple</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>scanDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>scanDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>cronJobTable</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>PopActiveSnapshot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CommitTransactionCommand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>originalContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pgstat_report_activity</name><argument_list>(<argument><expr><name>STATE_IDLE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>jobList</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * TupleToCronJob takes a heap tuple and converts it into a CronJob
 * struct.
 */</comment>
<function><type><specifier>static</specifier> <name>CronJob</name> <modifier>*</modifier></type>
<name>TupleToCronJob</name><parameter_list>(<parameter><decl><type><name>TupleDesc</name></type> <name>tupleDescriptor</name></decl></parameter>, <parameter><decl><type><name>HeapTuple</name></type> <name>heapTuple</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>CronJob</name> <modifier>*</modifier></type><name>job</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64</name></type> <name>jobKey</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>isNull</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>isPresent</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>entry</name> <modifier>*</modifier></type><name>parsedSchedule</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>isNodeNameNull</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>Datum</name></type> <name>jobId</name> <init>= <expr><call><name>heap_getattr</name><argument_list>(<argument><expr><name>heapTuple</name></expr></argument>, <argument><expr><name>Anum_cron_job_jobid</name></expr></argument>,
                 <argument><expr><name>tupleDescriptor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Datum</name></type> <name>schedule</name> <init>= <expr><call><name>heap_getattr</name><argument_list>(<argument><expr><name>heapTuple</name></expr></argument>, <argument><expr><name>Anum_cron_job_schedule</name></expr></argument>,
                  <argument><expr><name>tupleDescriptor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Datum</name></type> <name>command</name> <init>= <expr><call><name>heap_getattr</name><argument_list>(<argument><expr><name>heapTuple</name></expr></argument>, <argument><expr><name>Anum_cron_job_command</name></expr></argument>,
                 <argument><expr><name>tupleDescriptor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Datum</name></type> <name>nodeName</name> <init>= <expr><call><name>heap_getattr</name><argument_list>(<argument><expr><name>heapTuple</name></expr></argument>, <argument><expr><name>Anum_cron_job_nodename</name></expr></argument>,
                  <argument><expr><name>tupleDescriptor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNodeNameNull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Datum</name></type> <name>nodePort</name> <init>= <expr><call><name>heap_getattr</name><argument_list>(<argument><expr><name>heapTuple</name></expr></argument>, <argument><expr><name>Anum_cron_job_nodeport</name></expr></argument>,
                  <argument><expr><name>tupleDescriptor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Datum</name></type> <name>database</name> <init>= <expr><call><name>heap_getattr</name><argument_list>(<argument><expr><name>heapTuple</name></expr></argument>, <argument><expr><name>Anum_cron_job_database</name></expr></argument>,
                  <argument><expr><name>tupleDescriptor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Datum</name></type> <name>userName</name> <init>= <expr><call><name>heap_getattr</name><argument_list>(<argument><expr><name>heapTuple</name></expr></argument>, <argument><expr><name>Anum_cron_job_username</name></expr></argument>,
                  <argument><expr><name>tupleDescriptor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>jobKey</name> <operator>=</operator> <call><name>DatumGetInt64</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>job</name> <operator>=</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>CronJobHash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jobKey</name></expr></argument>, <argument><expr><name>HASH_ENTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isPresent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jobId</name></name> <operator>=</operator> <call><name>DatumGetInt64</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>scheduleText</name></name> <operator>=</operator> <call><name>TextDatumGetCString</name><argument_list>(<argument><expr><name>schedule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>command</name></name> <operator>=</operator> <call><name>TextDatumGetCString</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// Nodenames can be null to indicate the job can be run on any node</comment>
  <expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>nodeName</name></name> <operator>=</operator> <ternary><condition><expr><name>isNodeNameNull</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>TextDatumGetCString</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>nodePort</name></name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><name>nodePort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>userName</name></name> <operator>=</operator> <call><name>TextDatumGetCString</name><argument_list>(<argument><expr><name>userName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>database</name></name> <operator>=</operator> <call><name>TextDatumGetCString</name><argument_list>(<argument><expr><name>database</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>HeapTupleHeaderGetNatts</name><argument_list>(<argument><expr><name><name>heapTuple</name><operator>-&gt;</operator><name>t_data</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>Anum_cron_job_active</name></expr>)</condition>
  <block>{<block_content>
    <decl_stmt><decl><type><name>Datum</name></type> <name>active</name> <init>= <expr><call><name>heap_getattr</name><argument_list>(<argument><expr><name>heapTuple</name></expr></argument>, <argument><expr><name>Anum_cron_job_active</name></expr></argument>,
                <argument><expr><name>tupleDescriptor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>isNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>active</name></name> <operator>=</operator> <call><name>DatumGetBool</name><argument_list>(<argument><expr><name>active</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>active</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>tupleDescriptor</name><operator>-&gt;</operator><name>natts</name></name> <operator>&gt;=</operator> <name>Anum_cron_job_jobname</name></expr>)</condition>
  <block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>isJobNameNull</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name></type> <name>jobName</name> <init>= <expr><call><name>heap_getattr</name><argument_list>(<argument><expr><name>heapTuple</name></expr></argument>, <argument><expr><name>Anum_cron_job_jobname</name></expr></argument>,
                   <argument><expr><name>tupleDescriptor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isJobNameNull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isJobNameNull</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jobName</name></name> <operator>=</operator> <call><name>DatumGetName</name><argument_list>(<argument><expr><name>jobName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>jobName</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>parsedSchedule</name> <operator>=</operator> <call><name>parse_cron_entry</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>scheduleText</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>parsedSchedule</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* copy the schedule and free the allocated memory immediately */</comment>

    <expr_stmt><expr><name><name>job</name><operator>-&gt;</operator><name>schedule</name></name> <operator>=</operator> <operator>*</operator><name>parsedSchedule</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free_entry</name><argument_list>(<argument><expr><name>parsedSchedule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid pg_cron schedule for job "</literal> <name>INT64_FORMAT</name> <literal type="string">": %s"</literal></expr></argument>,
               <argument><expr><name><name>job</name><operator>-&gt;</operator><name>jobId</name></name></expr></argument>, <argument><expr><name><name>job</name><operator>-&gt;</operator><name>scheduleText</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* a zeroed out schedule never runs */</comment>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>job</name><operator>-&gt;</operator><name>schedule</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>job</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * PgCronHasBeenLoaded returns true if the pg_cron extension has been created
 * in the current database and the extension script has been executed. Otherwise,
 * it returns false. The result is cached as this is called very frequently.
 */</comment>
<function><type><name>bool</name></type>
<name>PgCronHasBeenLoaded</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>extensionLoaded</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>extensionPresent</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>extensionScriptExecuted</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>Oid</name></type> <name>extensionOid</name> <init>= <expr><call><name>get_extension_oid</name><argument_list>(<argument><expr><name>EXTENSION_NAME</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>extensionOid</name> <operator>!=</operator> <name>InvalidOid</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>extensionPresent</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>extensionPresent</name></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* check if pg_cron extension objects are still being created */</comment>
    <if_stmt><if>if <condition>(<expr><name>creating_extension</name> <operator>&amp;&amp;</operator> <name>CurrentExtensionObject</name> <operator>==</operator> <name>extensionOid</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>extensionScriptExecuted</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>IsBinaryUpgrade</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>extensionScriptExecuted</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>extensionLoaded</name> <operator>=</operator> <name>extensionPresent</name> <operator>&amp;&amp;</operator> <name>extensionScriptExecuted</name></expr>;</expr_stmt>

  <return>return <expr><name>extensionLoaded</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>InsertJobRunDetail</name><parameter_list>(<parameter><decl><type><name>int64</name></type> <name>runId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int64</name> <modifier>*</modifier></type><name>jobId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>database</name></decl></parameter>,
                <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>username</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>command</name></decl></parameter>,
           <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>status</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nodename</name></decl></parameter>,
           <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>return_message</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TimestampTz</name> <modifier>*</modifier></type><name>start_time</name></decl></parameter>,
           <parameter><decl><type><specifier>const</specifier> <name>TimestampTz</name> <modifier>*</modifier></type><name>end_time</name></decl></parameter>)</parameter_list>
<block>{<block_content>  
  <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>jobId</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>database</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>username</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>command</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>status</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>nodename</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>StringInfoData</name></type> <name>querybuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>argCount</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Oid</name></type> <name><name>argTypes</name><index>[<expr><name>argCount</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Datum</name></type> <name><name>argValues</name><index>[<expr><name>argCount</name></expr>]</index></name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>nullValues</name><index>[<expr><name>argCount</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>nullValues</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>argCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>MemoryContext</name></type> <name>originalContext</name> <init>= <expr><name>CurrentMemoryContext</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SetCurrentStatementStartTimestamp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>StartTransactionCommand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PushActiveSnapshot</name><argument_list>(<argument><expr><call><name>GetTransactionSnapshot</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PgCronHasBeenLoaded</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>RecoveryInProgress</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>JobRunDetailsTableExists</name><argument_list>()</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>PopActiveSnapshot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CommitTransactionCommand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>originalContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querybuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Open SPI context. */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>SPI_connect</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>SPI_OK_CONNECT</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"SPI_connect failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


  <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querybuf</name></expr></argument>,
    <argument><expr><literal type="string">"insert into %s.%s (jobid, runid, database, username, command, status, "</literal>
    <literal type="string">"nodename, return_message, start_time, end_time) values "</literal>
    <literal type="string">"($1,$2,$3,$4,$5,$6,$7,$8,$9,$10)"</literal></expr></argument>,
    <argument><expr><name>CRON_SCHEMA_NAME</name></expr></argument>, <argument><expr><name>JOB_RUN_DETAILS_TABLE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* jobId */</comment>
  <expr_stmt><expr><name><name>argTypes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>INT8OID</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>argValues</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><operator>*</operator><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* runId */</comment>
  <expr_stmt><expr><name><name>argTypes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>INT8OID</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>argValues</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>runId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* database */</comment>
  <expr_stmt><expr><name><name>argTypes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>TEXTOID</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>argValues</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>database</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* username */</comment>
  <expr_stmt><expr><name><name>argTypes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>TEXTOID</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>argValues</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* command */</comment>
  <expr_stmt><expr><name><name>argTypes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>TEXTOID</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>argValues</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* status */</comment>
  <expr_stmt><expr><name><name>argTypes</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>TEXTOID</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>argValues</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* nodename */</comment>
  <expr_stmt><expr><name><name>argTypes</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>TEXTOID</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>argValues</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* return_message */</comment>
  <expr_stmt><expr><name><name>argTypes</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>TEXTOID</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>return_message</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>argValues</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>return_message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>nullValues</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* start_time */</comment>
  <expr_stmt><expr><name><name>argTypes</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>TIMESTAMPTZOID</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>start_time</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>argValues</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <call><name>TimestampTzGetDatum</name><argument_list>(<argument><expr><operator>*</operator><name>start_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>nullValues</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* end_time */</comment>
  <expr_stmt><expr><name><name>argTypes</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name>TIMESTAMPTZOID</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>end_time</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>argValues</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <call><name>TimestampTzGetDatum</name><argument_list>(<argument><expr><operator>*</operator><name>end_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name><name>nullValues</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>pgstat_report_activity</name><argument_list>(<argument><expr><name>STATE_RUNNING</name></expr></argument>, <argument><expr><name><name>querybuf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><call><name>SPI_execute_with_args</name><argument_list>(<argument><expr><name><name>querybuf</name><operator>.</operator><name>data</name></name></expr></argument>,
    <argument><expr><name>argCount</name></expr></argument>, <argument><expr><name>argTypes</name></expr></argument>, <argument><expr><name>argValues</name></expr></argument>, <argument><expr><name>nullValues</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SPI_OK_INSERT</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"SPI_exec failed: %s"</literal></expr></argument>, <argument><expr><name><name>querybuf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>querybuf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SPI_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PopActiveSnapshot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CommitTransactionCommand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>originalContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pgstat_report_activity</name><argument_list>(<argument><expr><name>STATE_IDLE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>UpdateJobRunDetail</name><parameter_list>(<parameter><decl><type><name>int64</name></type> <name>runId</name></decl></parameter>, <parameter><decl><type><name>int32</name> <modifier>*</modifier></type><name>job_pid</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>status</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>return_message</name></decl></parameter>, <parameter><decl><type><name>TimestampTz</name> <modifier>*</modifier></type><name>start_time</name></decl></parameter>,
                                                                        <parameter><decl><type><name>TimestampTz</name> <modifier>*</modifier></type><name>end_time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>StringInfoData</name></type> <name>querybuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Oid</name></type> <name><name>argTypes</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Datum</name></type> <name><name>argValues</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MemoryContext</name></type> <name>originalContext</name> <init>= <expr><name>CurrentMemoryContext</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SetCurrentStatementStartTimestamp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>StartTransactionCommand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PushActiveSnapshot</name><argument_list>(<argument><expr><call><name>GetTransactionSnapshot</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PgCronHasBeenLoaded</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>RecoveryInProgress</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>JobRunDetailsTableExists</name><argument_list>()</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>PopActiveSnapshot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CommitTransactionCommand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>originalContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querybuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="block">/* Open SPI context. */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>SPI_connect</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>SPI_OK_CONNECT</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"SPI_connect failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


  <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querybuf</name></expr></argument>,
    <argument><expr><literal type="string">"update %s.%s set"</literal></expr></argument>, <argument><expr><name>CRON_SCHEMA_NAME</name></expr></argument>, <argument><expr><name>JOB_RUN_DETAILS_TABLE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="block">/* add the fields to be updated */</comment>
  <if_stmt><if>if <condition>(<expr><name>job_pid</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>argTypes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>INT4OID</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>argValues</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><operator>*</operator><name>job_pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querybuf</name></expr></argument>, <argument><expr><literal type="string">" job_pid = $%d,"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>argTypes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>TEXTOID</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>argValues</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querybuf</name></expr></argument>, <argument><expr><literal type="string">" status = $%d,"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>return_message</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>argTypes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>TEXTOID</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>argValues</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>return_message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querybuf</name></expr></argument>, <argument><expr><literal type="string">" return_message = $%d,"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>start_time</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>argTypes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>TIMESTAMPTZOID</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>argValues</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>TimestampTzGetDatum</name><argument_list>(<argument><expr><operator>*</operator><name>start_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querybuf</name></expr></argument>, <argument><expr><literal type="string">" start_time = $%d,"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>end_time</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>argTypes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>TIMESTAMPTZOID</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>argValues</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>TimestampTzGetDatum</name><argument_list>(<argument><expr><operator>*</operator><name>end_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querybuf</name></expr></argument>, <argument><expr><literal type="string">" end_time = $%d,"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>argTypes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>INT8OID</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>argValues</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>runId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

  <comment type="block">/* remove the last comma */</comment>
  <expr_stmt><expr><name><name>querybuf</name><operator>.</operator><name>len</name></name><operator>--</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>querybuf</name><operator>.</operator><name>data</name><index>[<expr><name><name>querybuf</name><operator>.</operator><name>len</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

  <comment type="block">/* and add the where clause */</comment>
  <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querybuf</name></expr></argument>, <argument><expr><literal type="string">" where runid = $%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>pgstat_report_activity</name><argument_list>(<argument><expr><name>STATE_RUNNING</name></expr></argument>, <argument><expr><name><name>querybuf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><call><name>SPI_execute_with_args</name><argument_list>(<argument><expr><name><name>querybuf</name><operator>.</operator><name>data</name></name></expr></argument>,
    <argument><expr><name>i</name></expr></argument>, <argument><expr><name>argTypes</name></expr></argument>, <argument><expr><name>argValues</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SPI_OK_UPDATE</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"SPI_exec failed: %s"</literal></expr></argument>, <argument><expr><name><name>querybuf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>querybuf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SPI_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PopActiveSnapshot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CommitTransactionCommand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>originalContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pgstat_report_activity</name><argument_list>(<argument><expr><name>STATE_IDLE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>AlterJob</name><parameter_list>(<parameter><decl><type><name>int64</name></type> <name>jobId</name></decl></parameter>, <parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>scheduleText</name></decl></parameter>, <parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>commandText</name></decl></parameter>, <parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>nodenameText</name></decl></parameter>,
     <parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>databaseText</name></decl></parameter>, <parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>usernameText</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>active</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>StringInfoData</name></type> <name>querybuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Oid</name></type> <name><name>argTypes</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Datum</name></type> <name><name>argValues</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>AclResult</name></type> <name>aclresult</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Oid</name></type> <name>userId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Oid</name></type> <name>userIdcheckacl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Oid</name></type> <name>savedUserId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>savedSecurityContext</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>database_name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>schedule</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>command</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>username</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>currentuser</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>entry</name> <modifier>*</modifier></type><name>parsedSchedule</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>userId</name> <operator>=</operator> <call><name>GetUserId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>userIdcheckacl</name> <operator>=</operator> <call><name>GetUserId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>currentuser</name> <operator>=</operator> <call><name>GetUserNameFromId</name><argument_list>(<argument><expr><name>userId</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>savedUserId</name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>savedSecurityContext</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PgCronHasBeenLoaded</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>RecoveryInProgress</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>JobTableExists</name><argument_list>()</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querybuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querybuf</name></expr></argument>,
    <argument><expr><literal type="string">"update %s.%s set"</literal></expr></argument>, <argument><expr><name>CRON_SCHEMA_NAME</name></expr></argument>, <argument><expr><name>JOBS_TABLE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* username has been provided */</comment>
  <if_stmt><if>if <condition>(<expr><name>usernameText</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>superuser</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"must be superuser to alter username"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>username</name> <operator>=</operator> <call><name>text_to_cstring</name><argument_list>(<argument><expr><name>usernameText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>userIdcheckacl</name> <operator>=</operator> <call><name>GetRoleOidIfCanLogin</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>username</name> <operator>=</operator> <name>currentuser</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>EnableSuperuserJobs</name> <operator>&amp;&amp;</operator> <call><name>superuser_arg</name><argument_list>(<argument><expr><name>userIdcheckacl</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_PRIVILEGE</name></expr></argument>)</argument_list></call><operator>,</operator>
            <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cannot schedule jobs as superuser"</literal></expr></argument>)</argument_list></call><operator>,</operator>
            <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Scheduling jobs as superuser is disallowed when "</literal>
                  <literal type="string">"cron.enable_superuser_jobs is set to off."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* add the fields to be updated */</comment>
  <comment type="block">/* database has been provided */</comment>
  <if_stmt><if>if <condition>(<expr><name>databaseText</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>database_name</name> <operator>=</operator> <call><name>text_to_cstring</name><argument_list>(<argument><expr><name>databaseText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* ensure the user that is used in the job can connect to the database */</comment>
    <expr_stmt><expr><name>aclresult</name> <operator>=</operator> <call><name>pg_database_aclcheck</name><argument_list>(<argument><expr><call><name>get_database_oid</name><argument_list>(<argument><expr><name>database_name</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>userIdcheckacl</name></expr></argument>, <argument><expr><name>ACL_CONNECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>aclresult</name> <operator>!=</operator> <name>ACLCHECK_OK</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"User %s does not have CONNECT privilege on %s"</literal></expr></argument>, <argument><expr><call><name>GetUserNameFromId</name><argument_list>(<argument><expr><name>userIdcheckacl</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>database_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>argTypes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>TEXTOID</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>argValues</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>database_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querybuf</name></expr></argument>, <argument><expr><literal type="string">" database = $%d,"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* ensure schedule is valid */</comment>
  <if_stmt><if>if <condition>(<expr><name>scheduleText</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>schedule</name> <operator>=</operator> <call><name>text_to_cstring</name><argument_list>(<argument><expr><name>scheduleText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>parsedSchedule</name> <operator>=</operator> <call><name>parse_cron_entry</name><argument_list>(<argument><expr><name>schedule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>parsedSchedule</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
          <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid schedule: %s"</literal></expr></argument>, <argument><expr><name>schedule</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>free_entry</name><argument_list>(<argument><expr><name>parsedSchedule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>argTypes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>TEXTOID</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>argValues</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>schedule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querybuf</name></expr></argument>, <argument><expr><literal type="string">" schedule = $%d,"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>commandText</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>argTypes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>TEXTOID</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>command</name> <operator>=</operator> <call><name>text_to_cstring</name><argument_list>(<argument><expr><name>commandText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>argValues</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querybuf</name></expr></argument>, <argument><expr><literal type="string">" command = $%d,"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>nodenameText</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>argTypes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>TEXTOID</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nodename</name> <init>= <expr><call><name>text_to_cstring</name><argument_list>(<argument><expr><name>nodenameText</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>argValues</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querybuf</name></expr></argument>, <argument><expr><literal type="string">" nodename = $%d,"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>usernameText</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>argTypes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>TEXTOID</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>argValues</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querybuf</name></expr></argument>, <argument><expr><literal type="string">" username = $%d,"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>active</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>argTypes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>BOOLOID</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>argValues</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>BoolGetDatum</name><argument_list>(<argument><expr><operator>*</operator><name>active</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querybuf</name></expr></argument>, <argument><expr><literal type="string">" active = $%d,"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* remove the last comma */</comment>
  <expr_stmt><expr><name><name>querybuf</name><operator>.</operator><name>len</name></name><operator>--</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>querybuf</name><operator>.</operator><name>data</name><index>[<expr><name><name>querybuf</name><operator>.</operator><name>len</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

  <comment type="block">/* and add the where clause */</comment>
  <expr_stmt><expr><name><name>argTypes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>INT8OID</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>argValues</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatum</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querybuf</name></expr></argument>, <argument><expr><literal type="string">" where jobid = $%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* ensure the caller owns the row */</comment>
  <expr_stmt><expr><name><name>argTypes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>TEXTOID</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>argValues</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>currentuser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>superuser</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querybuf</name></expr></argument>, <argument><expr><literal type="string">" and username = $%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"no updates specified"</literal></expr></argument>)</argument_list></call><operator>,</operator>
            <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"You must specify at least one job attribute to change when calling alter_job"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>GetUserIdAndSecContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>savedUserId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>savedSecurityContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SetUserIdAndSecContext</name><argument_list>(<argument><expr><call><name>CronExtensionOwner</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SECURITY_LOCAL_USERID_CHANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Open SPI context. */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>SPI_connect</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>SPI_OK_CONNECT</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"SPI_connect failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>(<expr><call><name>SPI_execute_with_args</name><argument_list>(<argument><expr><name><name>querybuf</name><operator>.</operator><name>data</name></name></expr></argument>,
    <argument><expr><name>i</name></expr></argument>, <argument><expr><name>argTypes</name></expr></argument>, <argument><expr><name>argValues</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SPI_OK_UPDATE</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"SPI_exec failed: %s"</literal></expr></argument>, <argument><expr><name><name>querybuf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>querybuf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>SPI_processed</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Job "</literal> <name>INT64_FORMAT</name> <literal type="string">" does not exist or you don't own it"</literal></expr></argument>, <argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>SPI_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SetUserIdAndSecContext</name><argument_list>(<argument><expr><name>savedUserId</name></expr></argument>, <argument><expr><name>savedSecurityContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Don't invalidate the cache. Let the callback do that.</comment>
  <return>return;</return>

  <expr_stmt><expr><call><name>InvalidateJobCache</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>MarkPendingRunsAsFailed</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>StringInfoData</name></type> <name>querybuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MemoryContext</name></type> <name>originalContext</name> <init>= <expr><name>CurrentMemoryContext</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SetCurrentStatementStartTimestamp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>StartTransactionCommand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PushActiveSnapshot</name><argument_list>(<argument><expr><call><name>GetTransactionSnapshot</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PgCronHasBeenLoaded</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>RecoveryInProgress</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>JobRunDetailsTableExists</name><argument_list>()</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>PopActiveSnapshot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CommitTransactionCommand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>originalContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querybuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Open SPI context. */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>SPI_connect</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>SPI_OK_CONNECT</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"SPI_connect failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


  <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querybuf</name></expr></argument>,
    <argument><expr><literal type="string">"update %s.%s set status = '%s', return_message = 'server restarted' where status in ('%s','%s')"</literal></expr></argument>
    , <argument><expr><name>CRON_SCHEMA_NAME</name></expr></argument>, <argument><expr><name>JOB_RUN_DETAILS_TABLE_NAME</name></expr></argument>, <argument><expr><call><name>GetCronStatus</name><argument_list>(<argument><expr><name>CRON_STATUS_FAILED</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GetCronStatus</name><argument_list>(<argument><expr><name>CRON_STATUS_STARTING</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GetCronStatus</name><argument_list>(<argument><expr><name>CRON_STATUS_RUNNING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querybuf</name></expr></argument>, <argument><expr><literal type="string">" and nodename='%s'"</literal></expr></argument>, <argument><expr><name>MyNodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>pgstat_report_activity</name><argument_list>(<argument><expr><name>STATE_RUNNING</name></expr></argument>, <argument><expr><name><name>querybuf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// If this worker comes back and tries to clean up while</comment>
  <comment type="line">// leader detects the node was down and tries to clean up as well,</comment>
  <comment type="line">// ignore optimistic locking errors</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>SPI_exec</name><argument_list>(<argument><expr><name><name>querybuf</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsYugaByteEnabled</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>res</name> <operator>!=</operator> <name>SPI_OK_UPDATE</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"SPI_exec failed: %s"</literal></expr></argument>, <argument><expr><name><name>querybuf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>querybuf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SPI_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PopActiveSnapshot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CommitTransactionCommand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>originalContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pgstat_report_activity</name><argument_list>(<argument><expr><name>STATE_IDLE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>GetCronStatus</name><parameter_list>(<parameter><decl><type><name>CronStatus</name></type> <name>cronstatus</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>statusDesc</name> <init>= <expr><literal type="string">"unknown status"</literal></expr></init></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name>cronstatus</name></expr>)</condition>
  <block>{<block_content>
  <case>case <expr><name>CRON_STATUS_STARTING</name></expr>:</case>
    <expr_stmt><expr><name>statusDesc</name> <operator>=</operator> <literal type="string">"starting"</literal></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>CRON_STATUS_RUNNING</name></expr>:</case>
    <expr_stmt><expr><name>statusDesc</name> <operator>=</operator> <literal type="string">"running"</literal></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>CRON_STATUS_SENDING</name></expr>:</case>
    <expr_stmt><expr><name>statusDesc</name> <operator>=</operator> <literal type="string">"sending"</literal></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>CRON_STATUS_CONNECTING</name></expr>:</case>
    <expr_stmt><expr><name>statusDesc</name> <operator>=</operator> <literal type="string">"connecting"</literal></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>CRON_STATUS_SUCCEEDED</name></expr>:</case>
    <expr_stmt><expr><name>statusDesc</name> <operator>=</operator> <literal type="string">"succeeded"</literal></expr>;</expr_stmt>
    <break>break;</break>
  <case>case <expr><name>CRON_STATUS_FAILED</name></expr>:</case>
    <expr_stmt><expr><name>statusDesc</name> <operator>=</operator> <literal type="string">"failed"</literal></expr>;</expr_stmt>
    <break>break;</break>
  <default>default:</default>
    <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><name>statusDesc</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * JobRunDetailsTableExists returns whether the job_run_details table exists.
 */</comment>
<function><type><name>bool</name></type>
<name>JobRunDetailsTableExists</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>Oid</name></type> <name>cronSchemaId</name> <init>= <expr><call><name>get_namespace_oid</name><argument_list>(<argument><expr><name>CRON_SCHEMA_NAME</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Oid</name></type> <name>jobRunDetailsTableOid</name> <init>= <expr><call><name>get_relname_relid</name><argument_list>(<argument><expr><name>JOB_RUN_DETAILS_TABLE_NAME</name></expr></argument>,
                          <argument><expr><name>cronSchemaId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <return>return <expr><name>jobRunDetailsTableOid</name> <operator>!=</operator> <name>InvalidOid</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * JobTableExists returns whether the job table exists.
 */</comment>
<function><type><name>bool</name></type>
<name>JobTableExists</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>Oid</name></type> <name>cronSchemaId</name> <init>= <expr><call><name>get_namespace_oid</name><argument_list>(<argument><expr><name>CRON_SCHEMA_NAME</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Oid</name></type> <name>jobTableOid</name> <init>= <expr><call><name>get_relname_relid</name><argument_list>(<argument><expr><name>JOBS_TABLE_NAME</name></expr></argument>,
                        <argument><expr><name>cronSchemaId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <return>return <expr><name>jobTableOid</name> <operator>!=</operator> <name>InvalidOid</name></expr>;</return>
</block_content>}</block></function>
</unit>
