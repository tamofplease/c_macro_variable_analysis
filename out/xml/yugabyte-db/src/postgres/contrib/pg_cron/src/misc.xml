<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/contrib/pg_cron/src/misc.c"><comment type="block">/* Copyright 1988,1990,1993,1994 by Paul Vixie
 * All rights reserved
 *
 * Distribute freely, except: don't remove my name from the source or
 * documentation (don't take credit for my work), mark your changes (don't
 * get me blamed for your possible bugs), don't alter or remove this
 * notice.  May be sold if buildable source is provided to buyer.  No
 * warrantee of any kind, express or implied, is included with this
 * software; use at your own risk, responsibility for damages (if any) to
 * anyone resulting from the use of this software rests entirely with the
 * user.
 *
 * Send bug reports, bug fixes, enhancements, requests, flames, etc., and
 * I'll try to keep a version up to date.  I can be reached as follows:
 * Paul Vixie          &lt;paul@vix.com&gt;          uunet!decwrl!vixie!paul
 */</comment>

<comment type="block">/* marco 07nov16 [removed code not needed by pg_cron]
 * marco 04sep16 [integrated into pg_cron]
 * vix 26jan87 [RCS has the rest of the log]
 * vix 30dec86 [written]
 */</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cron.h"</cpp:file></cpp:include>


<comment type="block">/* get_char(file) : like getc() but increment LineNumber on newlines
 */</comment>
<function><type><name>int</name></type>
<name>get_char</name><parameter_list>(<parameter><decl><type><name>file</name></type></decl></parameter>)</parameter_list>
  <decl_stmt><decl><type><name>FILE</name>  <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>  <name>ch</name></decl>;</decl_stmt>

  <comment type="block">/*
   * Sneaky hack: we wrapped an in-memory buffer into a FILE*
   * to minimize changes to cron.c.
   *
   * This code replaces:
   * ch = getc(file);
   */</comment>
  <decl_stmt><decl><type><name>file_buffer</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><operator>(</operator><name>file_buffer</name> <operator>*</operator><operator>)</operator> <name>file</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>buffer</name><operator>-&gt;</operator><name>unget_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>ch</name> <operator>=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>unget_data</name><index>[<expr><operator>--</operator><name><name>buffer</name><operator>-&gt;</operator><name>unget_count</name></name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>buffer</name><operator>-&gt;</operator><name>pointer</name></name> <operator>==</operator> <name><name>buffer</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>pointer</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if>
  <if type="elseif">else if <condition>(<expr><name><name>buffer</name><operator>-&gt;</operator><name>pointer</name></name> <operator>&gt;</operator> <name><name>buffer</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>ch</name> <operator>=</operator> <name>EOF</name></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <expr_stmt><expr><name>ch</name> <operator>=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>buffer</name><operator>-&gt;</operator><name>pointer</name></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>Set_LineNum</name><argument_list>(<argument><expr><name>LineNumber</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>ch</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* unget_char(ch, file) : like ungetc but do LineNumber processing
 */</comment>
<function><type><name>void</name></type>
<name>unget_char</name><parameter_list>(<parameter><decl><type><name>ch</name></type></decl></parameter>, <parameter><decl><type><name>file</name></type></decl></parameter>)</parameter_list>
  <decl_stmt><decl><type><name>int</name></type>  <name>ch</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FILE</name>  <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<block>{<block_content>

  <comment type="block">/*
   * Sneaky hack: we wrapped an in-memory buffer into a FILE*
   * to minimize changes to cron.c.
   *
   * This code replaces:
   * ungetc(ch, file);
   */</comment>
  <decl_stmt><decl><type><name>file_buffer</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><operator>(</operator><name>file_buffer</name> <operator>*</operator><operator>)</operator> <name>file</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>buffer</name><operator>-&gt;</operator><name>unget_count</name></name> <operator>&gt;=</operator> <literal type="number">1024</literal></expr>)</condition>
  <block>{<block_content>  
    <expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"ungetc limit exceeded"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>ERROR_EXIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>buffer</name><operator>-&gt;</operator><name>unget_data</name><index>[<expr><name><name>buffer</name><operator>-&gt;</operator><name>unget_count</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
         <expr_stmt><expr><call><name>Set_LineNum</name><argument_list>(<argument><expr><name>LineNumber</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/* get_string(str, max, file, termstr) : like fgets() but
 *    (1) has terminator string which should include \n
 *    (2) will always leave room for the null
 *    (3) uses get_char() so LineNumber will be accurate
 *    (4) returns EOF or terminating character, whichever
 */</comment>
<function><type><name>int</name></type>
<name>get_string</name><parameter_list>(<parameter><decl><type><name>string</name></type></decl></parameter>, <parameter><decl><type><name>size</name></type></decl></parameter>, <parameter><decl><type><name>file</name></type></decl></parameter>, <parameter><decl><type><name>terms</name></type></decl></parameter>)</parameter_list>
  <decl_stmt><decl><type><name>char</name>  <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>  <name>size</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FILE</name>  <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>  <modifier>*</modifier></type><name>terms</name></decl>;</decl_stmt>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>  <name>ch</name></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>EOF</name> <operator>!=</operator> <operator>(</operator><name>ch</name> <operator>=</operator> <call><name>get_char</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strchr</name><argument_list>(<argument><expr><name>terms</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>string</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>ch</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>size</name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>*</operator><name>string</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <return>return <expr><name>ch</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* skip_comments(file) : read past comment (if any)
 */</comment>
<function><type><name>void</name></type>
<name>skip_comments</name><parameter_list>(<parameter><decl><type><name>file</name></type></decl></parameter>)</parameter_list>
  <decl_stmt><decl><type><name>FILE</name>  <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>  <name>ch</name></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>EOF</name> <operator>!=</operator> <operator>(</operator><name>ch</name> <operator>=</operator> <call><name>get_char</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <comment type="block">/* ch is now the first character of a line.
     */</comment>

    <while>while <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>get_char</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

    <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
      <break>break;</break></block_content></block></if></if_stmt>

    <comment type="block">/* ch is now the first non-blank character of a line.
     */</comment>

    <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>!=</operator> <literal type="char">'#'</literal></expr>)</condition><block type="pseudo"><block_content>
      <break>break;</break></block_content></block></if></if_stmt>

    <comment type="block">/* ch must be a newline or comment as first non-blank
     * character on a line.
     */</comment>

    <while>while <condition>(<expr><name>ch</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>!=</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>get_char</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

    <comment type="block">/* ch is now the newline of a line which we're going to
     * ignore.
     */</comment>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><name>ch</name> <operator>!=</operator> <name>EOF</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>unget_char</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
</unit>
