<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/contrib/pg_cron/src/task_states.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * src/task_states.c
 *
 * Logic for storing and manipulating cron task states.
 *
 * Copyright (c) 2016, Citus Data, Inc.
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cron.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cron_job.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_cron.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"task_states.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/genam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/heapam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_collation_d.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/spi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/fmgroids.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/hsearch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/inval.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/snapmgr.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>PG_VERSION_NUM</name> <operator>&lt;</operator> <literal type="number">120000</literal><operator>)</operator></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>table_open</name><parameter_list>(<parameter><type><name>r</name></type></parameter>, <parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>heap_open(r, l)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>table_close</name><parameter_list>(<parameter><type><name>r</name></type></parameter>, <parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>heap_close(r, l)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/* forward declarations */</comment>
<function_decl><type><specifier>static</specifier> <name>HTAB</name> <modifier>*</modifier></type> <name>CreateCronTaskHash</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>CronTask</name> <modifier>*</modifier></type> <name>GetCronTask</name><parameter_list>(<parameter><decl><type><name>int64</name></type> <name>jobId</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* global variables */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>MemoryContext</name></type> <name>CronTaskContext</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>HTAB</name> <modifier>*</modifier></type><name>CronTaskHash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<comment type="block">/*
 * InitializeTaskStateHash initializes the hash for storing task states.
 */</comment>
<function><type><name>void</name></type>
<name>InitializeTaskStateHash</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name>CronTaskContext</name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>CurrentMemoryContext</name></expr></argument>,
                        <argument><expr><literal type="string">"pg_cron task context"</literal></expr></argument>,
                        <argument><expr><name>ALLOCSET_DEFAULT_MINSIZE</name></expr></argument>,
                        <argument><expr><name>ALLOCSET_DEFAULT_INITSIZE</name></expr></argument>,
                        <argument><expr><name>ALLOCSET_DEFAULT_MAXSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>CronTaskHash</name> <operator>=</operator> <call><name>CreateCronTaskHash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * CreateCronTaskHash creates the hash for storing cron task states.
 */</comment>
<function><type><specifier>static</specifier> <name>HTAB</name> <modifier>*</modifier></type>
<name>CreateCronTaskHash</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HTAB</name> <modifier>*</modifier></type><name>taskHash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HASHCTL</name></type> <name>info</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>hashFlags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>info</name><operator>.</operator><name>keysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>info</name><operator>.</operator><name>entrysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CronTask</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>info</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name>tag_hash</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>info</name><operator>.</operator><name>hcxt</name></name> <operator>=</operator> <name>CronTaskContext</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>hashFlags</name> <operator>=</operator> <operator>(</operator><name>HASH_ELEM</name> <operator>|</operator> <name>HASH_FUNCTION</name> <operator>|</operator> <name>HASH_CONTEXT</name><operator>)</operator></expr>;</expr_stmt>

  <expr_stmt><expr><name>taskHash</name> <operator>=</operator> <call><name>hash_create</name><argument_list>(<argument><expr><literal type="string">"pg_cron tasks"</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>hashFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>taskHash</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * RefreshTaskHash reloads the cron jobs from the cron.job table.
 * If a job that has an active task has been removed, the task
 * is marked as inactive by this function.
 */</comment>
<function><type><name>void</name></type>
<name>RefreshTaskHash</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>jobList</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>jobCell</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CronTask</name> <modifier>*</modifier></type><name>task</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> <name>status</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ResetJobMetadataCache</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><name>CronTaskHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* mark all tasks as inactive */</comment>
  <while>while <condition>(<expr><operator>(</operator><name>task</name> <operator>=</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>isActive</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name>jobList</name> <operator>=</operator> <call><name>LoadCronJobList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* mark tasks that still have a job as active */</comment>
  <macro><name>foreach</name><argument_list>(<argument>jobCell</argument>, <argument>jobList</argument>)</argument_list></macro>
  <block>{<block_content>
    <decl_stmt><decl><type><name>CronJob</name> <modifier>*</modifier></type><name>job</name> <init>= <expr><operator>(</operator><name>CronJob</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>jobCell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>CronTask</name> <modifier>*</modifier></type><name>task</name> <init>= <expr><call><name>GetCronTask</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>jobId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>isActive</name></name> <operator>=</operator> <name><name>job</name><operator>-&gt;</operator><name>active</name></name></expr>;</expr_stmt>
  </block_content>}</block>

  <expr_stmt><expr><name>CronJobCacheValid</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * GetCronTask gets the current task with the given job ID.
 */</comment>
<function><type><specifier>static</specifier> <name>CronTask</name> <modifier>*</modifier></type>
<name>GetCronTask</name><parameter_list>(<parameter><decl><type><name>int64</name></type> <name>jobId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>CronTask</name> <modifier>*</modifier></type><name>task</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64</name></type> <name>hashKey</name> <init>= <expr><name>jobId</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>isPresent</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>task</name> <operator>=</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>CronTaskHash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hashKey</name></expr></argument>, <argument><expr><name>HASH_ENTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isPresent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isPresent</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>InitializeCronTask</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>task</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * InitializeCronTask intializes a CronTask struct.
 */</comment>
<function><type><name>void</name></type>
<name>InitializeCronTask</name><parameter_list>(<parameter><decl><type><name>CronTask</name> <modifier>*</modifier></type><name>task</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>jobId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>runId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>jobId</name></name> <operator>=</operator> <name>jobId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>CRON_TASK_WAITING</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>pendingRunCount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>connection</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>pollingStatus</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>startDeadline</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>isSocketReady</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>isActive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>errorMessage</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>freeErrorMessage</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>runningLocal</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * CurrentTaskList extracts the current list of tasks from the
 * cron task hash.
 */</comment>
<function><type><name>List</name> <modifier>*</modifier></type>
<name>CurrentTaskList</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>taskList</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CronTask</name> <modifier>*</modifier></type><name>task</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> <name>status</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><name>CronTaskHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr><operator>(</operator><name>task</name> <operator>=</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>taskList</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>taskList</name></expr></argument>, <argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>taskList</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * RemoveTask remove the task for the given job ID.
 */</comment>
<function><type><name>void</name></type>
<name>RemoveTask</name><parameter_list>(<parameter><decl><type><name>int64</name></type> <name>jobId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>isPresent</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>hash_search</name><argument_list>(<argument><expr><name>CronTaskHash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jobId</name></expr></argument>, <argument><expr><name>HASH_REMOVE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isPresent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * ProcessNewJobs queues up the new jobs assigned for this worker
 */</comment>
<function><type><name>void</name></type>
<name>ProcessNewJobs</name><parameter_list>()</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>Relation</name></type> <name>cronJobRunTable</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SysScanDesc</name></type> <name>scanDescriptor</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>scanKeyCount</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>scanKey</name><index>[<expr><name>scanKeyCount</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>indexOK</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HeapTuple</name></type> <name>heapTuple</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TupleDesc</name></type> <name>tupleDescriptor</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MemoryContext</name></type> <name>originalContext</name> <init>= <expr><name>CurrentMemoryContext</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>Datum</name></type> <name>nodeNameDatum</name> <init>= <expr><call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>MyNodeName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Datum</name></type> <name>statusDatum</name> <init>=
    <expr><call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><call><name>GetCronStatus</name><argument_list>(<argument><expr><name>CRON_STATUS_STARTING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SetCurrentStatementStartTimestamp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>StartTransactionCommand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PushActiveSnapshot</name><argument_list>(<argument><expr><call><name>GetTransactionSnapshot</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*
   * If the pg_cron extension has not been created yet or
   * we are on a hot standby, the job run details table is treated as
   * being empty.
   */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PgCronHasBeenLoaded</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>RecoveryInProgress</name><argument_list>()</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>PopActiveSnapshot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CommitTransactionCommand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>originalContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pgstat_report_activity</name><argument_list>(<argument><expr><name>STATE_IDLE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>cronJobRunTable</name> <operator>=</operator> <call><name>table_open</name><argument_list>(<argument><expr><call><name>CronJobRunRelationId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// Need to look for nodename = me and status = starting</comment>
  <expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scanKey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>Anum_job_run_details_nodename</name></expr></argument>,
        <argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_TEXTEQ</name></expr></argument>, <argument><expr><name>nodeNameDatum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scanKey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>Anum_job_run_details_status</name></expr></argument>,
        <argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_TEXTEQ</name></expr></argument>, <argument><expr><name>statusDatum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>scanDescriptor</name> <operator>=</operator> <call><name>systable_beginscan</name><argument_list>(<argument><expr><name>cronJobRunTable</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><name>indexOK</name></expr></argument>,
                    <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>scanKeyCount</name></expr></argument>, <argument><expr><name>scanKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tupleDescriptor</name> <operator>=</operator> <call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>cronJobRunTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>heapTuple</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>scanDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>heapTuple</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>isNull</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>CronTaskContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Datum</name></type> <name>jobIdDatum</name> <init>= <expr><call><name>heap_getattr</name><argument_list>(<argument><expr><name>heapTuple</name></expr></argument>, <argument><expr><name>Anum_job_run_details_jobid</name></expr></argument>,
                 <argument><expr><name>tupleDescriptor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64</name></type> <name>jobId</name> <init>= <expr><call><name>DatumGetInt64</name><argument_list>(<argument><expr><name>jobIdDatum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datum</name></type> <name>runIdDatum</name> <init>= <expr><call><name>heap_getattr</name><argument_list>(<argument><expr><name>heapTuple</name></expr></argument>, <argument><expr><name>Anum_job_run_details_runid</name></expr></argument>,
                 <argument><expr><name>tupleDescriptor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64</name></type> <name>runId</name> <init>= <expr><call><name>DatumGetInt64</name><argument_list>(<argument><expr><name>runIdDatum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>heapTuple</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>scanDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>,<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Got job "</literal> <name>INT64_FORMAT</name> <literal type="string">" run "</literal> <name>INT64_FORMAT</name></expr></argument>,
              <argument><expr><name>jobId</name></expr></argument>, <argument><expr><name>runId</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>CronTask</name> <modifier>*</modifier></type><name>task</name> <init>= <expr><call><name>GetCronTask</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// We should never be in the done state outside of ManageCronTask</comment>
    <switch>switch <condition>(<expr><name><name>task</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition>
    <block>{<block_content>
      <case>case <expr><name>CRON_TASK_REMOTE_START</name></expr>:</case>
        <comment type="line">// leader assigned work to themselves</comment>
      <case>case <expr><name>CRON_TASK_WAITING</name></expr>:</case>
        <comment type="line">// non-leader worker got a job</comment>
      <case>case <expr><name>CRON_TASK_DONE</name></expr>:</case>
        <comment type="line">// leader/non-leader worker just completed the job run</comment>
        <comment type="line">// but didn't get a change to reset the task yet</comment>
        <break>break;</break>
      <default>default:</default>
        <comment type="line">// job is already running</comment>
        <expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Unexpected job "</literal> <name>INT64_FORMAT</name> <literal type="string">" run "</literal>
                     <name>INT64_FORMAT</name> <literal type="string">" found while job run in "</literal>
                     <literal type="string">"state %d. Ignoring "</literal></expr></argument>,
                     <argument><expr><name>jobId</name></expr></argument>, <argument><expr><name>runId</name></expr></argument>, <argument><expr><name><name>task</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
    </block_content>}</block></switch>
    <expr_stmt><expr><call><name>SetTaskLocalStart</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>runId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>scanDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>cronJobRunTable</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>PopActiveSnapshot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CommitTransactionCommand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>originalContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pgstat_report_activity</name><argument_list>(<argument><expr><name>STATE_IDLE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * UpdateJobRunStatus determines if there are any tasks that completed
 */</comment>
<function><type><name>void</name></type>
<name>UpdateJobRunStatus</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>taskList</name></decl></parameter>)</parameter_list>
<block>{<block_content>  
  <decl_stmt><decl><type><name>StringInfoData</name></type> <name>querybuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MemoryContext</name></type> <name>originalContext</name> <init>= <expr><name>CurrentMemoryContext</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SetCurrentStatementStartTimestamp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>StartTransactionCommand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PushActiveSnapshot</name><argument_list>(<argument><expr><call><name>GetTransactionSnapshot</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PgCronHasBeenLoaded</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>RecoveryInProgress</name><argument_list>()</argument_list></call> <operator>||</operator>
    <operator>!</operator><call><name>JobRunDetailsTableExists</name><argument_list>()</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>PopActiveSnapshot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CommitTransactionCommand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>originalContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querybuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Open SPI context. */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>SPI_connect</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>SPI_OK_CONNECT</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"SPI_connect failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


  <comment type="line">// We want to find the status of the job runs we are currently monitoring</comment>
  <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querybuf</name></expr></argument>,
    <argument><expr><literal type="string">"SELECT jobid, runid, status FROM %s.%s WHERE runid IN ("</literal></expr></argument>,
    <argument><expr><name>CRON_SCHEMA_NAME</name></expr></argument>, <argument><expr><name>JOB_RUN_DETAILS_TABLE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>taskCell</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <macro><name>foreach</name><argument_list>(<argument>taskCell</argument>, <argument>taskList</argument>)</argument_list></macro>
  <block>{<block_content>
    <decl_stmt><decl><type><name>CronTask</name> <modifier>*</modifier></type><name>task</name> <init>= <expr><operator>(</operator><name>CronTask</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>taskCell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// Ignore local running tasks because those will naturally move their</comment>
    <comment type="line">// state to CRON_TASK_DONE</comment>
    <if_stmt><if>if <condition>(<expr><name><name>task</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>CRON_TASK_REMOTE_START</name> <operator>||</operator>
      <name><name>task</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>CRON_TASK_REMOTE_RUNNING</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querybuf</name></expr></argument>, <argument><expr><name>INT64_FORMAT</name><literal type="string">", "</literal></expr></argument>, <argument><expr><name><name>task</name><operator>-&gt;</operator><name>runId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>, <argument><expr><literal type="string">"No job runs awaiting completion!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SPI_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PopActiveSnapshot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CommitTransactionCommand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>originalContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pgstat_report_activity</name><argument_list>(<argument><expr><name>STATE_IDLE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// Remove extra comma and space</comment>
  <expr_stmt><expr><name><name>querybuf</name><operator>.</operator><name>len</name></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>querybuf</name><operator>.</operator><name>data</name><index>[<expr><name><name>querybuf</name><operator>.</operator><name>len</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>querybuf</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>pgstat_report_activity</name><argument_list>(<argument><expr><name>STATE_RUNNING</name></expr></argument>, <argument><expr><name><name>querybuf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><call><name>SPI_execute</name><argument_list>(<argument><expr><name><name>querybuf</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SPI_OK_SELECT</name> <operator>||</operator>
     <name>SPI_tuptable</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"SPI_exec failed: %s"</literal></expr></argument>, <argument><expr><name><name>querybuf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SPITupleTable</name> <modifier>*</modifier></type><name>tuptable</name> <init>= <expr><name>SPI_tuptable</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TupleDesc</name></type> <name>tupdesc</name> <init>= <expr><name><name>tuptable</name><operator>-&gt;</operator><name>tupdesc</name></name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>uint64</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SPI_processed</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>HeapTuple</name></type> <name>tuple</name> <init>= <expr><name><name>tuptable</name><operator>-&gt;</operator><name>vals</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>isNull</name></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>CronTaskContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>Datum</name></type> <name>jobIdDatum</name> <init>= <expr><call><name>SPI_getbinval</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>isNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64</name></type> <name>jobId</name> <init>= <expr><call><name>DatumGetInt64</name><argument_list>(<argument><expr><name>jobIdDatum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>Datum</name></type> <name>runIdDatum</name> <init>= <expr><call><name>SPI_getbinval</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>isNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64</name></type> <name>runId</name> <init>= <expr><call><name>DatumGetInt64</name><argument_list>(<argument><expr><name>runIdDatum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>status</name> <init>= <expr><call><name>SPI_getvalue</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CronTask</name> <modifier>*</modifier></type><name>task</name> <init>= <expr><call><name>GetCronTask</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><call><name>GetCronStatus</name><argument_list>(<argument><expr><name>CRON_STATUS_SUCCEEDED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
      <call><name>strcmp</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><call><name>GetCronStatus</name><argument_list>(<argument><expr><name>CRON_STATUS_FAILED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Job "</literal> <name>INT64_FORMAT</name> <literal type="string">" Run "</literal> <name>INT64_FORMAT</name> <literal type="string">" complete"</literal></expr></argument>,
         <argument><expr><name>jobId</name></expr></argument>, <argument><expr><name>runId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>task</name><operator>-&gt;</operator><name>isActive</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SetTaskDone</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>RemoveTask</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><call><name>GetCronStatus</name><argument_list>(<argument><expr><name>CRON_STATUS_RUNNING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Job "</literal> <name>INT64_FORMAT</name> <literal type="string">" Run "</literal> <name>INT64_FORMAT</name> <literal type="string">" running"</literal></expr></argument>,
         <argument><expr><name>jobId</name></expr></argument>, <argument><expr><name>runId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SetTaskRemoteRunning</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>querybuf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SPI_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PopActiveSnapshot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>CommitTransactionCommand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>originalContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pgstat_report_activity</name><argument_list>(<argument><expr><name>STATE_IDLE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * SetTaskDone sets a task to the done state
 */</comment>
<function><type><name>void</name></type>
<name>SetTaskDone</name><parameter_list>(<parameter><decl><type><name>CronTask</name> <modifier>*</modifier></type><name>task</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>CRON_TASK_DONE</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * SetTaskLocalStart sets a task to be executed locally
 */</comment>
<function><type><name>void</name></type>
<name>SetTaskLocalStart</name><parameter_list>(<parameter><decl><type><name>CronTask</name> <modifier>*</modifier></type><name>task</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>runId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>ResetTask</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>UseBackgroundWorkers</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>CRON_TASK_BGW_START</name></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>CRON_TASK_START</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
  
  <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>runId</name></name> <operator>=</operator> <name>runId</name></expr>;</expr_stmt>
  <comment type="line">// Set runningLocal to be true so that this task will follow the</comment>
  <comment type="line">// state transitions for a worker</comment>
  <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>runningLocal</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * SetTaskRemoteRunning sets a task to the remote running state
 */</comment>
<function><type><name>void</name></type>
<name>SetTaskRemoteRunning</name><parameter_list>(<parameter><decl><type><name>CronTask</name> <modifier>*</modifier></type><name>task</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>CRON_TASK_REMOTE_RUNNING</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * ResetTask resets the state of a job run.
 * Pending run count is NOT affected
 */</comment>
<function><type><name>void</name></type>
<name>ResetTask</name><parameter_list>(<parameter><decl><type><name>CronTask</name> <modifier>*</modifier></type><name>task</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>currentPendingRunCount</name> <init>= <expr><name><name>task</name><operator>-&gt;</operator><name>pendingRunCount</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>InitializeCronTask</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name><name>task</name><operator>-&gt;</operator><name>jobId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*
   * We keep the number of runs that should have started while
   * the task was still running. If &gt;0, this will trigger another
   * run immediately.
   */</comment>
  <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>pendingRunCount</name></name> <operator>=</operator> <name>currentPendingRunCount</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * IncrementTaskRunCount adds one to the pending run count
 */</comment>
<function><type><name>void</name></type>
<name>IncrementTaskRunCount</name><parameter_list>(<parameter><decl><type><name>CronTask</name> <modifier>*</modifier></type><name>task</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>pendingRunCount</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * RepeatTask resets the job run and adds one to the pending run count
 */</comment>
<function><type><name>void</name></type>
<name>RepeatTask</name><parameter_list>(<parameter><decl><type><name>int64</name></type> <name>jobId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>CronTask</name> <modifier>*</modifier></type><name>task</name> <init>= <expr><call><name>GetCronTask</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SetTaskDone</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>IncrementTaskRunCount</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
