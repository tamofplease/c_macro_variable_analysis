<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/contrib/hstore/hstore_compat.c"><comment type="block">/*
 * contrib/hstore/hstore_compat.c
 *
 * Notes on old/new hstore format disambiguation.
 *
 * There are three formats to consider:
 * 1) old contrib/hstore (referred to as hstore-old)
 * 2) prerelease pgfoundry hstore
 * 3) new contrib/hstore
 *
 * (2) and (3) are identical except for the HS_FLAG_NEWVERSION
 * bit, which is set in (3) but not (2).
 *
 * Values that are already in format (3), or which are
 * unambiguously in format (2), are handled by the first
 * "return immediately" test in hstoreUpgrade().
 *
 * To stress a point: we ONLY get here with possibly-ambiguous
 * values if we're doing some sort of in-place migration from an
 * old prerelease pgfoundry hstore-new; and we explicitly don't
 * support that without fixing up any potentially padded values
 * first. Most of the code here is serious overkill, but the
 * performance penalty isn't serious (especially compared to the
 * palloc() that we have to do anyway) and the belt-and-braces
 * validity checks provide some reassurance. (If for some reason
 * we get a value that would have worked on the old code, but
 * which would be botched by the conversion code, the validity
 * checks will fail it first so we get an error rather than bad
 * data.)
 *
 * Note also that empty hstores are the same in (2) and (3), so
 * there are some special-case paths for them.
 *
 * We tell the difference between formats (2) and (3) as follows (but
 * note that there are some edge cases where we can't tell; see
 * comments in hstoreUpgrade):
 *
 * First, since there must be at least one entry, we look at
 * how the bits line up. The new format looks like:
 *
 * 10kkkkkkkkkkkkkkkkkkkkkkkkkkkkkk  (k..k = keylen)
 * 0nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv  (v..v = keylen+vallen)
 *
 * The old format looks like one of these, depending on endianness
 * and bitfield layout: (k..k = keylen, v..v = vallen, p..p = pos,
 * n = isnull)
 *
 * kkkkkkkkkkkkkkkkvvvvvvvvvvvvvvvv
 * nppppppppppppppppppppppppppppppp
 *
 * kkkkkkkkkkkkkkkkvvvvvvvvvvvvvvvv
 * pppppppppppppppppppppppppppppppn
 *
 * vvvvvvvvvvvvvvvvkkkkkkkkkkkkkkkk
 * nppppppppppppppppppppppppppppppp
 *
 * vvvvvvvvvvvvvvvvkkkkkkkkkkkkkkkk
 * pppppppppppppppppppppppppppppppn   (usual i386 format)
 *
 * If the entry is in old format, for the first entry "pos" must be 0.
 * We can obviously see that either keylen or vallen must be &gt;32768
 * for there to be any ambiguity (which is why lengths less than that
 * are fasttracked in hstore.h) Since "pos"==0, the "v" field in the
 * new-format interpretation can only be 0 or 1, which constrains all
 * but three bits of the old-format's k and v fields. But in addition
 * to all of this, the data length implied by the keylen and vallen
 * must fit in the varlena size. So the only ambiguous edge case for
 * hstores with only one entry occurs between a new-format entry with
 * an excess (~32k) of padding, and an old-format entry. But we know
 * which format to use in that case based on how we were compiled, so
 * no actual data corruption can occur.
 *
 * If there is more than one entry, the requirement that keys do not
 * decrease in length, and that positions increase contiguously, and
 * that the end of the data not be beyond the end of the varlena
 * itself, disambiguates in almost all other cases. There is a small
 * set of ambiguous cases which could occur if the old-format value
 * has a large excess of padding and just the right pattern of key
 * sizes, but these are also handled based on how we were compiled.
 *
 * The otherwise undocumented function hstore_version_diag is provided
 * for testing purposes.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hstore.h"</cpp:file></cpp:include>

<comment type="block">/*
 * This is the structure used for entries in the old contrib/hstore
 * implementation. Notice that this is the same size as the new entry
 * (two 32-bit words per key/value pair) and that the header is the
 * same, so the old and new versions of ARRPTR, STRPTR, CALCDATASIZE
 * etc. are compatible.
 *
 * If the above statement isn't true on some bizarre platform, we're
 * a bit hosed (see StaticAssertStmt in hstoreValidOldFormat).
 */</comment>
<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>uint16</name></type>		<name>keylen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint16</name></type>		<name>vallen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>
				<name>valisnull</name><range>:<expr><literal type="number">1</literal></expr></range></decl>,
				<name>pos</name><range>:<expr><literal type="number">31</literal></expr></range>;</decl_stmt>
}</block></struct></type> <name>HOldEntry</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>hstoreValidNewFormat</name><parameter_list>(<parameter><decl><type><name>HStore</name> <modifier>*</modifier></type><name>hs</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>hstoreValidOldFormat</name><parameter_list>(<parameter><decl><type><name>HStore</name> <modifier>*</modifier></type><name>hs</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * Validity test for a new-format hstore.
 *	0 = not valid
 *	1 = valid but with "slop" in the length
 *	2 = exactly valid
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>hstoreValidNewFormat</name><parameter_list>(<parameter><decl><type><name>HStore</name> <modifier>*</modifier></type><name>hs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>count</name> <init>= <expr><call><name>HS_COUNT</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HEntry</name>	   <modifier>*</modifier></type><name>entries</name> <init>= <expr><call><name>ARRPTR</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>buflen</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>count</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>HSE_ENDPOS</name><argument_list>(<argument><expr><name><name>entries</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>count</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>vsize</name> <init>= <expr><call><name>CALCDATASIZE</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>hs</name><operator>-&gt;</operator><name>size_</name></name> <operator>&amp;</operator> <name>HS_FLAG_NEWVERSION</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HSE_ISFIRST</name><argument_list>(<argument><expr><name><name>entries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>vsize</name> <operator>&gt;</operator> <call><name>VARSIZE</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* entry position must be nondecreasing */</comment>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>HSE_ISFIRST</name><argument_list>(<argument><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call>
			<operator>||</operator> <operator>(</operator><call><name>HSE_ENDPOS</name><argument_list>(<argument><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>HSE_ENDPOS</name><argument_list>(<argument><expr><name><name>entries</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* key length must be nondecreasing and keys must not be null */</comment>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>HSTORE_KEYLEN</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>HSTORE_KEYLEN</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>HSE_ISNULL</name><argument_list>(<argument><expr><name><name>entries</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>vsize</name> <operator>!=</operator> <call><name>VARSIZE</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Validity test for an old-format hstore.
 *	0 = not valid
 *	1 = valid but with "slop" in the length
 *	2 = exactly valid
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>hstoreValidOldFormat</name><parameter_list>(<parameter><decl><type><name>HStore</name> <modifier>*</modifier></type><name>hs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>count</name> <init>= <expr><name><name>hs</name><operator>-&gt;</operator><name>size_</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HOldEntry</name>  <modifier>*</modifier></type><name>entries</name> <init>= <expr><operator>(</operator><name>HOldEntry</name> <operator>*</operator><operator>)</operator> <call><name>ARRPTR</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>vsize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>lastpos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>hs</name><operator>-&gt;</operator><name>size_</name></name> <operator>&amp;</operator> <name>HS_FLAG_NEWVERSION</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* New format uses an HEntry for key and another for value */</comment>
	<expr_stmt><expr><call><name>StaticAssertStmt</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HOldEntry</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>HEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>,
					 <argument><expr><literal type="string">"old hstore format is not upward-compatible"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0xFFFFFFF</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>CALCDATASIZE</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>VARSIZE</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>entries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pos</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* key length must be nondecreasing */</comment>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>keylen</name> <operator>&lt;</operator> <name><name>entries</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>keylen</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * entry position must be strictly increasing, except for the first entry
	 * (which can be ""=&gt;"" and thus zero-length); and all entries must be
	 * properly contiguous
	 */</comment>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name> <operator>!=</operator> <name>lastpos</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>lastpos</name> <operator>+=</operator> <operator>(</operator><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>keylen</name>
					<operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>valisnull</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vallen</name></expr></else></ternary><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>vsize</name> <operator>=</operator> <call><name>CALCDATASIZE</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>lastpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>vsize</name> <operator>&gt;</operator> <call><name>VARSIZE</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>vsize</name> <operator>!=</operator> <call><name>VARSIZE</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><literal type="number">2</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * hstoreUpgrade: PG_DETOAST_DATUM plus support for conversion of old hstores
 */</comment>
<function><type><name>HStore</name> <modifier>*</modifier></type>
<name>hstoreUpgrade</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>orig</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HStore</name>	   <modifier>*</modifier></type><name>hs</name> <init>= <expr><operator>(</operator><name>HStore</name> <operator>*</operator><operator>)</operator> <call><name>PG_DETOAST_DATUM</name><argument_list>(<argument><expr><name>orig</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>valid_new</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>valid_old</name></decl>;</decl_stmt>

	<comment type="block">/* Return immediately if no conversion needed */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>hs</name><operator>-&gt;</operator><name>size_</name></name> <operator>&amp;</operator> <name>HS_FLAG_NEWVERSION</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>hs</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Do we have a writable copy? If not, make one. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>hs</name> <operator>==</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>orig</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>hs</name> <operator>=</operator> <operator>(</operator><name>HStore</name> <operator>*</operator><operator>)</operator> <call><name>PG_DETOAST_DATUM_COPY</name><argument_list>(<argument><expr><name>orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>hs</name><operator>-&gt;</operator><name>size_</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
		<operator>(</operator><call><name>VARSIZE</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">32768</literal> <operator>&amp;&amp;</operator> <call><name>HSE_ISFIRST</name><argument_list>(<argument><expr><operator>(</operator><call><name>ARRPTR</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>HS_SETCOUNT</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><call><name>HS_COUNT</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>HS_FIXSIZE</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><call><name>HS_COUNT</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>hs</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>valid_new</name> <operator>=</operator> <call><name>hstoreValidNewFormat</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>valid_old</name> <operator>=</operator> <call><name>hstoreValidOldFormat</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>valid_old</name> <operator>||</operator> <name><name>hs</name><operator>-&gt;</operator><name>size_</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>valid_new</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * force the "new version" flag and the correct varlena length.
			 */</comment>
			<expr_stmt><expr><call><name>HS_SETCOUNT</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><call><name>HS_COUNT</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>HS_FIXSIZE</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><call><name>HS_COUNT</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>hs</name></expr>;</return>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid hstore value found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * this is the tricky edge case. It is only possible in some quite extreme
	 * cases (the hstore must have had a lot of wasted padding space at the
	 * end). But the only way a "new" hstore value could get here is if we're
	 * upgrading in place from a pre-release version of hstore-new (NOT
	 * contrib/hstore), so we work off the following assumptions: 1. If you're
	 * moving from old contrib/hstore to hstore-new, you're required to fix up
	 * any potential conflicts first, e.g. by running ALTER TABLE ... USING
	 * col::text::hstore; on all hstore columns before upgrading. 2. If you're
	 * moving from old contrib/hstore to new contrib/hstore, then "new" values
	 * are impossible here 3. If you're moving from pre-release hstore-new to
	 * hstore-new, then "old" values are impossible here 4. If you're moving
	 * from pre-release hstore-new to new contrib/hstore, you're not doing so
	 * as an in-place upgrade, so there is no issue So the upshot of all this
	 * is that we can treat all the edge cases as "new" if we're being built
	 * as hstore-new, and "old" if we're being built as contrib/hstore.
	 *
	 * XXX the WARNING can probably be downgraded to DEBUG1 once this has been
	 * beta-tested. But for now, it would be very useful to know if anyone can
	 * actually reach this case in a non-contrived setting.
	 */</comment>

	<if_stmt><if>if <condition>(<expr><name>valid_new</name></expr>)</condition>
	<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HSTORE_IS_HSTORE_NEW</name></expr></cpp:if>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"ambiguous hstore value resolved as hstore-new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * force the "new version" flag and the correct varlena length.
		 */</comment>
		<expr_stmt><expr><call><name>HS_SETCOUNT</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><call><name>HS_COUNT</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>HS_FIXSIZE</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><call><name>HS_COUNT</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>hs</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"ambiguous hstore value resolved as hstore-old"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * must have an old-style value. Overwrite it in place as a new-style one.
	 */</comment>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>count</name> <init>= <expr><name><name>hs</name><operator>-&gt;</operator><name>size_</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HEntry</name>	   <modifier>*</modifier></type><name>new_entries</name> <init>= <expr><call><name>ARRPTR</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HOldEntry</name>  <modifier>*</modifier></type><name>old_entries</name> <init>= <expr><operator>(</operator><name>HOldEntry</name> <operator>*</operator><operator>)</operator> <call><name>ARRPTR</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>uint32</name></type>		<name>pos</name> <init>= <expr><name><name>old_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>uint32</name></type>		<name>keylen</name> <init>= <expr><name><name>old_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>keylen</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>uint32</name></type>		<name>vallen</name> <init>= <expr><name><name>old_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vallen</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type>		<name>isnull</name> <init>= <expr><name><name>old_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>valisnull</name></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>vallen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name><name>new_entries</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>entry</name> <operator>=</operator> <operator>(</operator><name>pos</name> <operator>+</operator> <name>keylen</name><operator>)</operator> <operator>&amp;</operator> <name>HENTRY_POSMASK</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>new_entries</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>entry</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>pos</name> <operator>+</operator> <name>keylen</name> <operator>+</operator> <name>vallen</name><operator>)</operator> <operator>&amp;</operator> <name>HENTRY_POSMASK</name><operator>)</operator>
											<operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>isnull</name><operator>)</operator></expr> ?</condition><then> <expr><name>HENTRY_ISNULL</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
		</block_content>}</block></for>

		<if_stmt><if>if <condition>(<expr><name>count</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>new_entries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>entry</name> <operator>|=</operator> <name>HENTRY_ISFIRST</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>HS_SETCOUNT</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>HS_FIXSIZE</name><argument_list>(<argument><expr><name>hs</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<return>return <expr><name>hs</name></expr>;</return>
</block_content>}</block></function>


<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>hstore_version_diag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>hstore_version_diag</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HStore</name>	   <modifier>*</modifier></type><name>hs</name> <init>= <expr><operator>(</operator><name>HStore</name> <operator>*</operator><operator>)</operator> <call><name>PG_DETOAST_DATUM</name><argument_list>(<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>valid_new</name> <init>= <expr><call><name>hstoreValidNewFormat</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>valid_old</name> <init>= <expr><call><name>hstoreValidOldFormat</name><argument_list>(<argument><expr><name>hs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><name>valid_old</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>valid_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
