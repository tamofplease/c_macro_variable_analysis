<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/contrib/auto_explain/auto_explain.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * auto_explain.c
 *
 *
 * Copyright (c) 2008-2018, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *	  contrib/auto_explain/auto_explain.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/explain.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/instrument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jit/jit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>

<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<comment type="block">/* GUC variables */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>auto_explain_log_min_duration</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* msec or -1 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>auto_explain_log_analyze</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>auto_explain_log_verbose</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>auto_explain_log_buffers</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>auto_explain_log_triggers</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>auto_explain_log_timing</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>auto_explain_log_format</name> <init>= <expr><name>EXPLAIN_FORMAT_TEXT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>auto_explain_log_nested_statements</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name>auto_explain_sample_rate</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>config_enum_entry</name></name></type> <name><name>format_options</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="string">"text"</literal></expr>, <expr><name>EXPLAIN_FORMAT_TEXT</name></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"xml"</literal></expr>, <expr><name>EXPLAIN_FORMAT_XML</name></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"json"</literal></expr>, <expr><name>EXPLAIN_FORMAT_JSON</name></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"yaml"</literal></expr>, <expr><name>EXPLAIN_FORMAT_YAML</name></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Current nesting depth of ExecutorRun calls */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>nesting_level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* Saved hook values in case of unload */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>ExecutorStart_hook_type</name></type> <name>prev_ExecutorStart</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ExecutorRun_hook_type</name></type> <name>prev_ExecutorRun</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ExecutorFinish_hook_type</name></type> <name>prev_ExecutorFinish</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ExecutorEnd_hook_type</name></type> <name>prev_ExecutorEnd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* Is the current query sampled, per backend */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>current_query_sampled</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>auto_explain_enabled</name><parameter_list>()</parameter_list></cpp:macro> \
	<cpp:value>(auto_explain_log_min_duration &gt;= 0 &amp;&amp; \
	 (nesting_level == 0 || auto_explain_log_nested_statements))</cpp:value></cpp:define>

<function_decl><type><name>void</name></type>		<name>_PG_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>		<name>_PG_fini</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>explain_ExecutorStart</name><parameter_list>(<parameter><decl><type><name>QueryDesc</name> <modifier>*</modifier></type><name>queryDesc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>explain_ExecutorRun</name><parameter_list>(<parameter><decl><type><name>QueryDesc</name> <modifier>*</modifier></type><name>queryDesc</name></decl></parameter>,
					<parameter><decl><type><name>ScanDirection</name></type> <name>direction</name></decl></parameter>,
					<parameter><decl><type><name>uint64</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>execute_once</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>explain_ExecutorFinish</name><parameter_list>(<parameter><decl><type><name>QueryDesc</name> <modifier>*</modifier></type><name>queryDesc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>explain_ExecutorEnd</name><parameter_list>(<parameter><decl><type><name>QueryDesc</name> <modifier>*</modifier></type><name>queryDesc</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * Module load callback
 */</comment>
<function><type><name>void</name></type>
<name>_PG_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Define custom GUC variables. */</comment>
	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(<argument><expr><literal type="string">"auto_explain.log_min_duration"</literal></expr></argument>,
							<argument><expr><literal type="string">"Sets the minimum execution time above which plans will be logged."</literal></expr></argument>,
							<argument><expr><literal type="string">"Zero prints all plans. -1 turns this feature off."</literal></expr></argument>,
							<argument><expr><operator>&amp;</operator><name>auto_explain_log_min_duration</name></expr></argument>,
							<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
							<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>,
							<argument><expr><name>PGC_SUSET</name></expr></argument>,
							<argument><expr><name>GUC_UNIT_MS</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(<argument><expr><literal type="string">"auto_explain.log_analyze"</literal></expr></argument>,
							 <argument><expr><literal type="string">"Use EXPLAIN ANALYZE for plan logging."</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name>auto_explain_log_analyze</name></expr></argument>,
							 <argument><expr><name>false</name></expr></argument>,
							 <argument><expr><name>PGC_SUSET</name></expr></argument>,
							 <argument><expr><literal type="number">0</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(<argument><expr><literal type="string">"auto_explain.log_verbose"</literal></expr></argument>,
							 <argument><expr><literal type="string">"Use EXPLAIN VERBOSE for plan logging."</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name>auto_explain_log_verbose</name></expr></argument>,
							 <argument><expr><name>false</name></expr></argument>,
							 <argument><expr><name>PGC_SUSET</name></expr></argument>,
							 <argument><expr><literal type="number">0</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(<argument><expr><literal type="string">"auto_explain.log_buffers"</literal></expr></argument>,
							 <argument><expr><literal type="string">"Log buffers usage."</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name>auto_explain_log_buffers</name></expr></argument>,
							 <argument><expr><name>false</name></expr></argument>,
							 <argument><expr><name>PGC_SUSET</name></expr></argument>,
							 <argument><expr><literal type="number">0</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(<argument><expr><literal type="string">"auto_explain.log_triggers"</literal></expr></argument>,
							 <argument><expr><literal type="string">"Include trigger statistics in plans."</literal></expr></argument>,
							 <argument><expr><literal type="string">"This has no effect unless log_analyze is also set."</literal></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name>auto_explain_log_triggers</name></expr></argument>,
							 <argument><expr><name>false</name></expr></argument>,
							 <argument><expr><name>PGC_SUSET</name></expr></argument>,
							 <argument><expr><literal type="number">0</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomEnumVariable</name><argument_list>(<argument><expr><literal type="string">"auto_explain.log_format"</literal></expr></argument>,
							 <argument><expr><literal type="string">"EXPLAIN format to be used for plan logging."</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name>auto_explain_log_format</name></expr></argument>,
							 <argument><expr><name>EXPLAIN_FORMAT_TEXT</name></expr></argument>,
							 <argument><expr><name>format_options</name></expr></argument>,
							 <argument><expr><name>PGC_SUSET</name></expr></argument>,
							 <argument><expr><literal type="number">0</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(<argument><expr><literal type="string">"auto_explain.log_nested_statements"</literal></expr></argument>,
							 <argument><expr><literal type="string">"Log nested statements."</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name>auto_explain_log_nested_statements</name></expr></argument>,
							 <argument><expr><name>false</name></expr></argument>,
							 <argument><expr><name>PGC_SUSET</name></expr></argument>,
							 <argument><expr><literal type="number">0</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(<argument><expr><literal type="string">"auto_explain.log_timing"</literal></expr></argument>,
							 <argument><expr><literal type="string">"Collect timing data, not just row counts."</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name>auto_explain_log_timing</name></expr></argument>,
							 <argument><expr><name>true</name></expr></argument>,
							 <argument><expr><name>PGC_SUSET</name></expr></argument>,
							 <argument><expr><literal type="number">0</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomRealVariable</name><argument_list>(<argument><expr><literal type="string">"auto_explain.sample_rate"</literal></expr></argument>,
							 <argument><expr><literal type="string">"Fraction of queries to process."</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name>auto_explain_sample_rate</name></expr></argument>,
							 <argument><expr><literal type="number">1.0</literal></expr></argument>,
							 <argument><expr><literal type="number">0.0</literal></expr></argument>,
							 <argument><expr><literal type="number">1.0</literal></expr></argument>,
							 <argument><expr><name>PGC_SUSET</name></expr></argument>,
							 <argument><expr><literal type="number">0</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>EmitWarningsOnPlaceholders</name><argument_list>(<argument><expr><literal type="string">"auto_explain"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Install hooks. */</comment>
	<expr_stmt><expr><name>prev_ExecutorStart</name> <operator>=</operator> <name>ExecutorStart_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ExecutorStart_hook</name> <operator>=</operator> <name>explain_ExecutorStart</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>prev_ExecutorRun</name> <operator>=</operator> <name>ExecutorRun_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ExecutorRun_hook</name> <operator>=</operator> <name>explain_ExecutorRun</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>prev_ExecutorFinish</name> <operator>=</operator> <name>ExecutorFinish_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ExecutorFinish_hook</name> <operator>=</operator> <name>explain_ExecutorFinish</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>prev_ExecutorEnd</name> <operator>=</operator> <name>ExecutorEnd_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ExecutorEnd_hook</name> <operator>=</operator> <name>explain_ExecutorEnd</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Module unload callback
 */</comment>
<function><type><name>void</name></type>
<name>_PG_fini</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Uninstall hooks. */</comment>
	<expr_stmt><expr><name>ExecutorStart_hook</name> <operator>=</operator> <name>prev_ExecutorStart</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ExecutorRun_hook</name> <operator>=</operator> <name>prev_ExecutorRun</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ExecutorFinish_hook</name> <operator>=</operator> <name>prev_ExecutorFinish</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ExecutorEnd_hook</name> <operator>=</operator> <name>prev_ExecutorEnd</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * ExecutorStart hook: start up logging if needed
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>explain_ExecutorStart</name><parameter_list>(<parameter><decl><type><name>QueryDesc</name> <modifier>*</modifier></type><name>queryDesc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * For rate sampling, randomly choose top-level statement. Either all
	 * nested statements will be explained or none will.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>auto_explain_log_min_duration</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nesting_level</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>current_query_sampled</name> <operator>=</operator> <operator>(</operator><call><name>random</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>auto_explain_sample_rate</name> <operator>*</operator>
								 <name>MAX_RANDOM_VALUE</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>auto_explain_enabled</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>current_query_sampled</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Enable per-node instrumentation iff log_analyze is required. */</comment>
		<if_stmt><if>if <condition>(<expr><name>auto_explain_log_analyze</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>eflags</name> <operator>&amp;</operator> <name>EXEC_FLAG_EXPLAIN_ONLY</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>auto_explain_log_timing</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>queryDesc</name><operator>-&gt;</operator><name>instrument_options</name></name> <operator>|=</operator> <name>INSTRUMENT_TIMER</name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>queryDesc</name><operator>-&gt;</operator><name>instrument_options</name></name> <operator>|=</operator> <name>INSTRUMENT_ROWS</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>auto_explain_log_buffers</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>queryDesc</name><operator>-&gt;</operator><name>instrument_options</name></name> <operator>|=</operator> <name>INSTRUMENT_BUFFERS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>prev_ExecutorStart</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>prev_ExecutorStart</name><argument_list>(<argument><expr><name>queryDesc</name></expr></argument>, <argument><expr><name>eflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>standard_ExecutorStart</name><argument_list>(<argument><expr><name>queryDesc</name></expr></argument>, <argument><expr><name>eflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>auto_explain_enabled</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>current_query_sampled</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Set up to track total elapsed time in ExecutorRun.  Make sure the
		 * space is allocated in the per-query context so it will go away at
		 * ExecutorEnd.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>queryDesc</name><operator>-&gt;</operator><name>totaltime</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcxt</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>oldcxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>queryDesc</name><operator>-&gt;</operator><name>estate</name><operator>-&gt;</operator><name>es_query_cxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>queryDesc</name><operator>-&gt;</operator><name>totaltime</name></name> <operator>=</operator> <call><name>InstrAlloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INSTRUMENT_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * ExecutorRun hook: all we need do is track nesting depth
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>explain_ExecutorRun</name><parameter_list>(<parameter><decl><type><name>QueryDesc</name> <modifier>*</modifier></type><name>queryDesc</name></decl></parameter>, <parameter><decl><type><name>ScanDirection</name></type> <name>direction</name></decl></parameter>,
					<parameter><decl><type><name>uint64</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>execute_once</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>nesting_level</name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>prev_ExecutorRun</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>prev_ExecutorRun</name><argument_list>(<argument><expr><name>queryDesc</name></expr></argument>, <argument><expr><name>direction</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>execute_once</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>standard_ExecutorRun</name><argument_list>(<argument><expr><name>queryDesc</name></expr></argument>, <argument><expr><name>direction</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>execute_once</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><name>nesting_level</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><name>nesting_level</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * ExecutorFinish hook: all we need do is track nesting depth
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>explain_ExecutorFinish</name><parameter_list>(<parameter><decl><type><name>QueryDesc</name> <modifier>*</modifier></type><name>queryDesc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>nesting_level</name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>prev_ExecutorFinish</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>prev_ExecutorFinish</name><argument_list>(<argument><expr><name>queryDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>standard_ExecutorFinish</name><argument_list>(<argument><expr><name>queryDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><name>nesting_level</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><name>nesting_level</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * ExecutorEnd hook: log results if needed
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>explain_ExecutorEnd</name><parameter_list>(<parameter><decl><type><name>QueryDesc</name> <modifier>*</modifier></type><name>queryDesc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>queryDesc</name><operator>-&gt;</operator><name>totaltime</name></name> <operator>&amp;&amp;</operator> <call><name>auto_explain_enabled</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>current_query_sampled</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcxt</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>double</name></type>		<name>msec</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * Make sure we operate in the per-query context, so any cruft will be
		 * discarded later during ExecutorEnd.
		 */</comment>
		<expr_stmt><expr><name>oldcxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>queryDesc</name><operator>-&gt;</operator><name>estate</name><operator>-&gt;</operator><name>es_query_cxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Make sure stats accumulation is done.  (Note: it's okay if several
		 * levels of hook all do this.)
		 */</comment>
		<expr_stmt><expr><call><name>InstrEndLoop</name><argument_list>(<argument><expr><name><name>queryDesc</name><operator>-&gt;</operator><name>totaltime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Log plan if duration is exceeded. */</comment>
		<expr_stmt><expr><name>msec</name> <operator>=</operator> <name><name>queryDesc</name><operator>-&gt;</operator><name>totaltime</name><operator>-&gt;</operator><name>total</name></name> <operator>*</operator> <literal type="number">1000.0</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>msec</name> <operator>&gt;=</operator> <name>auto_explain_log_min_duration</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>ExplainState</name> <modifier>*</modifier></type><name>es</name> <init>= <expr><call><name>NewExplainState</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>analyze</name></name> <operator>=</operator> <operator>(</operator><name><name>queryDesc</name><operator>-&gt;</operator><name>instrument_options</name></name> <operator>&amp;&amp;</operator> <name>auto_explain_log_analyze</name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>verbose</name></name> <operator>=</operator> <name>auto_explain_log_verbose</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>buffers</name></name> <operator>=</operator> <operator>(</operator><name><name>es</name><operator>-&gt;</operator><name>analyze</name></name> <operator>&amp;&amp;</operator> <name>auto_explain_log_buffers</name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>timing</name></name> <operator>=</operator> <operator>(</operator><name><name>es</name><operator>-&gt;</operator><name>analyze</name></name> <operator>&amp;&amp;</operator> <name>auto_explain_log_timing</name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>summary</name></name> <operator>=</operator> <name><name>es</name><operator>-&gt;</operator><name>analyze</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>auto_explain_log_format</name></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>ExplainBeginOutput</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ExplainQueryText</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><name>queryDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ExplainPrintPlan</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><name>queryDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>es</name><operator>-&gt;</operator><name>analyze</name></name> <operator>&amp;&amp;</operator> <name>auto_explain_log_triggers</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ExplainPrintTriggers</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><name>queryDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>es</name><operator>-&gt;</operator><name>costs</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ExplainPrintJITSummary</name><argument_list>(<argument><expr><name>es</name></expr></argument>, <argument><expr><name>queryDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>ExplainEndOutput</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* Remove last line break */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>es</name><operator>-&gt;</operator><name>str</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>es</name><operator>-&gt;</operator><name>str</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>es</name><operator>-&gt;</operator><name>str</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>str</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>--</operator><name><name>es</name><operator>-&gt;</operator><name>str</name><operator>-&gt;</operator><name>len</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="block">/* Fix JSON to output an object */</comment>
			<if_stmt><if>if <condition>(<expr><name>auto_explain_log_format</name> <operator>==</operator> <name>EXPLAIN_FORMAT_JSON</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>str</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'{'</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>es</name><operator>-&gt;</operator><name>str</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>es</name><operator>-&gt;</operator><name>str</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'}'</literal></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/*
			 * Note: we rely on the existing logging of context or
			 * debug_query_string to identify just which statement is being
			 * reported.  This isn't ideal but trying to do it here would
			 * often result in duplication.
			 */</comment>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"duration: %.3f ms  plan:\n%s"</literal></expr></argument>,
							<argument><expr><name>msec</name></expr></argument>, <argument><expr><name><name>es</name><operator>-&gt;</operator><name>str</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errhidestmt</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>prev_ExecutorEnd</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>prev_ExecutorEnd</name><argument_list>(<argument><expr><name>queryDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>standard_ExecutorEnd</name><argument_list>(<argument><expr><name>queryDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>
</unit>
