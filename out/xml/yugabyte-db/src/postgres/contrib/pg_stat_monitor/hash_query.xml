<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/contrib/pg_stat_monitor/hash_query.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * hash_query.c
 *		Track statement execution times across a whole database cluster.
 *
 * Portions Copyright Â© 2018-2020, Percona LLC and/or its affiliates
 *
 * Portions Copyright (c) 1996-2020, PostgreSQL Global Development Group
 *
 * Portions Copyright (c) 1994, The Regents of the University of California
 *
 * IDENTIFICATION
 *	  contrib/pg_stat_monitor/hash_query.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_stat_monitor.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>pgssSharedState</name> <modifier>*</modifier></type><name>pgss</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>HTAB</name> <modifier>*</modifier></type><name>pgss_hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>HTAB</name> <modifier>*</modifier></type><name>pgss_query_hash</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>HTAB</name><modifier>*</modifier></type> <name>hash_init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hash_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>entry_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hash_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>HTAB</name><modifier>*</modifier></type>
<name>hash_init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hash_name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>entry_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hash_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HASHCTL</name></type> <name>info</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name><operator>.</operator><name>keysize</name></name> <operator>=</operator> <name>key_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name><operator>.</operator><name>entrysize</name></name> <operator>=</operator> <name>entry_size</name></expr>;</expr_stmt>
	<return>return <expr><call><name>ShmemInitHash</name><argument_list>(<argument><expr><name>hash_name</name></expr></argument>, <argument><expr><name>hash_size</name></expr></argument>, <argument><expr><name>hash_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>HASH_ELEM</name> <operator>|</operator> <name>HASH_BLOBS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>pgss_startup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>i</name></decl>;</decl_stmt>

	<comment type="block">/* reset in case this is a restart within the postmaster */</comment>

	<expr_stmt><expr><name>pgss</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>pgss_hash</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>pgss_query_hash</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/*
	* Create or attach to the shared memory state, including hash table
	*/</comment>
	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>AddinShmemInitLock</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>pgss</name> <operator>=</operator> <call><name>ShmemInitStruct</name><argument_list>(<argument><expr><literal type="string">"pg_stat_monitor"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pgssSharedState</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* First time through ... */</comment>
		<expr_stmt><expr><name><name>pgss</name><operator>-&gt;</operator><name>lock</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><call><name>GetNamedLWLockTranche</name><argument_list>(<argument><expr><literal type="string">"pg_stat_monitor"</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>lock</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SpinLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pgss</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ResetSharedState</name><argument_list>(<argument><expr><name>pgss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>pgss</name><operator>-&gt;</operator><name>query_buf_size_bucket</name></name> <operator>=</operator> <name>MAX_QUERY_BUF</name> <operator>/</operator> <name>PGSM_MAX_BUCKETS</name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>PGSM_MAX_BUCKETS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>ShmemAlloc</name><argument_list>(<argument><expr><name><name>pgss</name><operator>-&gt;</operator><name>query_buf_size_bucket</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>set_qbuf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>uint64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>pgss_hash</name> <operator>=</operator> <call><name>hash_init</name><argument_list>(<argument><expr><literal type="string">"pg_stat_monitor: bucket hashtable"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pgssHashKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pgssEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>MAX_BUCKET_ENTRIES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pgss_query_hash</name> <operator>=</operator> <call><name>hash_init</name><argument_list>(<argument><expr><literal type="string">"pg_stat_monitor: query hashtable"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pgssQueryHashKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pgssQueryEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>MAX_BUCKET_ENTRIES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>AddinShmemInitLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If we're in the postmaster (or a standalone backend...), set up a shmem
	 * exit hook to dump the statistics to disk.
	 */</comment>
	<expr_stmt><expr><call><name>on_shmem_exit</name><argument_list>(<argument><expr><name>pgss_shmem_shutdown</name></expr></argument>, <argument><expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>pgssSharedState</name><modifier>*</modifier></type>
<name>pgsm_get_ss</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>pgss</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>HTAB</name><modifier>*</modifier></type>
<name>pgsm_get_hash</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>pgss_hash</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>HTAB</name><modifier>*</modifier></type>
<name>pgsm_get_query_hash</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>pgss_query_hash</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * shmem_shutdown hook: Dump statistics into file.
 *
 * Note: we don't bother with acquiring lock, because there should be no
 * other processes running when this is called.
 */</comment>
<function><type><name>void</name></type>
<name>pgss_shmem_shutdown</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Don't try to dump during a crash. */</comment>
	<if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>pgss</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<comment type="block">/* Safety check ... shouldn't get here unless shmem is set up. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsHashInitialize</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>Size</name></type>
<name>hash_memsize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type>	<name>size</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pgssSharedState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><name>MAX_QUERY_BUF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>hash_estimate_size</name><argument_list>(<argument><expr><name>MAX_BUCKET_ENTRIES</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pgssEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>hash_estimate_size</name><argument_list>(<argument><expr><name>MAX_BUCKET_ENTRIES</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pgssQueryEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>pgssEntry</name> <modifier>*</modifier></type>
<name>hash_entry_alloc</name><parameter_list>(<parameter><decl><type><name>pgssSharedState</name> <modifier>*</modifier></type><name>pgss</name></decl></parameter>, <parameter><decl><type><name>pgssHashKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>encoding</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pgssEntry</name>	<modifier>*</modifier></type><name>entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>hash_get_num_entries</name><argument_list>(<argument><expr><name>pgss_hash</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>MAX_BUCKET_ENTRIES</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"pg_stat_monitor: out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* Find or create an entry with desired hash code */</comment>
	<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>(</operator><name>pgssEntry</name> <operator>*</operator><operator>)</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>pgss_hash</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>HASH_ENTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>pgss</name><operator>-&gt;</operator><name>bucket_entry</name><index>[<expr><name><name>pgss</name><operator>-&gt;</operator><name>current_wbucket</name></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		<comment type="block">/* New entry, initialize it */</comment>
		<comment type="block">/* reset the statistics */</comment>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>counters</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Counters</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* set the appropriate initial usage count */</comment>
		<comment type="block">/* re-initialize the mutex each time ... we assume no one using it */</comment>
		<expr_stmt><expr><call><name>SpinLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* ... and don't forget the query text metadata */</comment>
		<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>encoding</name></name> <operator>=</operator> <name>encoding</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"pg_stat_monitor: out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>entry</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Deallocate least-used entries.
 *
 * Caller must hold an exclusive lock on pgss-&gt;lock.
 */</comment>
<function><type><name>void</name></type>
<name>hash_query_entry_dealloc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bucket</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> 	<name>hash_seq</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pgssQueryEntry</name>      <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_seq</name></expr></argument>, <argument><expr><name>pgss_query_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>entry</name> <operator>=</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_seq</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>bucket_id</name></name> <operator>==</operator> <name>bucket</name> <operator>||</operator> <name>bucket</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>pgss_query_hash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>HASH_REMOVE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/*
 * Deallocate least-used entries.
 *
 * Caller must hold an exclusive lock on pgss-&gt;lock.
 */</comment>
<function><type><name>void</name></type>
<name>hash_entry_dealloc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bucket</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> <name>hash_seq</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pgssEntry</name>		<modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_seq</name></expr></argument>, <argument><expr><name>pgss_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>entry</name> <operator>=</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_seq</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>bucket_id</name></name> <operator>==</operator> <name>bucket</name> <operator>||</operator> <name>bucket</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>pgss_hash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>HASH_REMOVE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/*
 * Release all entries.
 */</comment>
<function><type><name>void</name></type>
<name>hash_entry_reset</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pgssSharedState</name> <modifier>*</modifier></type><name>pgss</name>   <init>= <expr><call><name>pgsm_get_ss</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type>		<name>hash_seq</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pgssEntry</name>			<modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name><name>pgss</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_seq</name></expr></argument>, <argument><expr><name>pgss_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>entry</name> <operator>=</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_seq</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>hash_search</name><argument_list>(<argument><expr><name>pgss_hash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>HASH_REMOVE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name><name>pgss</name><operator>-&gt;</operator><name>current_wbucket</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name><name>pgss</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Caller must accuire lock */</comment>
<function><type><name>pgssQueryEntry</name><modifier>*</modifier></type>
<name>hash_create_query_entry</name><parameter_list>(<parameter><decl><type><name>uint64</name></type> <name>bucket_id</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>queryid</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>dbid</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>userid</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>ip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>pgssQueryHashKey</name></type>    <name>key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pgssQueryEntry</name>      <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>                <name>found</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>key</name><operator>.</operator><name>queryid</name></name> <operator>=</operator> <name>queryid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>bucket_id</name></name> <operator>=</operator> <name>bucket_id</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>dbid</name></name> <operator>=</operator> <name>dbid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>userid</name></name> <operator>=</operator> <name>userid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>ip</name></name> <operator>=</operator> <name>ip</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>(</operator><name>pgssQueryEntry</name> <operator>*</operator><operator>)</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>pgss_query_hash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>HASH_ENTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>entry</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Caller must accuire lock */</comment>
<function><type><name>pgssQueryEntry</name><modifier>*</modifier></type>
<name>hash_find_query_entry</name><parameter_list>(<parameter><decl><type><name>uint64</name></type> <name>bucket_id</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>queryid</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>dbid</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>userid</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>ip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>pgssQueryHashKey</name></type>    <name>key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pgssQueryEntry</name>      <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>                <name>found</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>key</name><operator>.</operator><name>queryid</name></name> <operator>=</operator> <name>queryid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>bucket_id</name></name> <operator>=</operator> <name>bucket_id</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>dbid</name></name> <operator>=</operator> <name>dbid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>userid</name></name> <operator>=</operator> <name>userid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>ip</name></name> <operator>=</operator> <name>ip</name></expr>;</expr_stmt>

    <comment type="block">/* Lookup the hash table entry with shared lock. */</comment>
	<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>(</operator><name>pgssQueryEntry</name> <operator>*</operator><operator>)</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>pgss_query_hash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>HASH_FIND</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>entry</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>IsHashInitialize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>pgss</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
			<name>pgss_hash</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

</unit>
