<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/contrib/pg_stat_statements/pg_stat_statements.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * pg_stat_statements.c
 *		Track statement execution times across a whole database cluster.
 *
 * Execution costs are totalled for each distinct source query, and kept in
 * a shared hashtable.  (We track only as many distinct queries as will fit
 * in the designated amount of shared memory.)
 *
 * As of Postgres 9.2, this module normalizes query entries.  Normalization
 * is a process whereby similar queries, typically differing only in their
 * constants (though the exact rules are somewhat more subtle than that) are
 * recognized as equivalent, and are tracked as a single entry.  This is
 * particularly useful for non-prepared queries.
 *
 * Normalization is implemented by fingerprinting queries, selectively
 * serializing those fields of each query tree's nodes that are judged to be
 * essential to the query.  This is referred to as a query jumble.  This is
 * distinct from a regular serialization in that various extraneous
 * information is ignored as irrelevant or not essential to the query, such
 * as the collations of Vars and, most notably, the values of constants.
 *
 * This jumble is acquired at the end of parse analysis of each query, and
 * a 64-bit hash of it is stored into the query's Query.queryId field.
 * The server then copies this value around, making it available in plan
 * tree(s) generated from the query.  The executor can then use this value
 * to blame query costs on the proper queryId.
 *
 * To facilitate presenting entries to users, we create "representative" query
 * strings in which constants are replaced with parameter symbols ($n), to
 * make it clearer what a normalized entry can represent.  To save on shared
 * memory, and to avoid having to truncate oversized query strings, we store
 * these strings in a temporary external query-texts file.  Offsets into this
 * file are kept in shared memory.
 *
 * Note about locking issues: to create or delete an entry in the shared
 * hashtable, one must hold pgss-&gt;lock exclusively.  Modifying any field
 * in an entry except the counters requires the same.  To look up an entry,
 * one must hold the lock shared.  To read or update the counters within
 * an entry, one must hold the lock shared or exclusive (so the entry doesn't
 * disappear!) and also take the entry's mutex spinlock.
 * The shared state variable pgss-&gt;extent (the next free spot in the external
 * query-text file) should be accessed only while holding either the
 * pgss-&gt;mutex spinlock, or exclusive lock on pgss-&gt;lock.  We use the mutex to
 * allow reserving file space while holding only shared lock on pgss-&gt;lock.
 * Rewriting the entire external query-text file, eg for garbage collection,
 * requires holding pgss-&gt;lock exclusively; this allows individual entries
 * in the file to be read or written while holding only shared lock.
 *
 *
 * Copyright (c) 2008-2018, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *	  contrib/pg_stat_statements/pg_stat_statements.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_authid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/instrument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mb/pg_wchar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/analyze.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parsetree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/scanner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/scansup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/fd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/ipc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/spin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcop/utility.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/acl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/pg_yb_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"yb/server/pgsql_webserver_wrapper.h"</cpp:file></cpp:include>

<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<comment type="block">/* Location of permanent stats file (valid when database is shut down) */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PGSS_DUMP_FILE</name></cpp:macro>	<cpp:value>PGSTAT_STAT_PERMANENT_DIRECTORY "/pg_stat_statements.stat"</cpp:value></cpp:define>

<comment type="block">/*
 * Location of external query text file.  We don't keep it in the core
 * system's stats_temp_directory.  The core system can safely use that GUC
 * setting, because the statistics collector temp file paths are set only once
 * as part of changing the GUC, but pg_stat_statements has no way of avoiding
 * race conditions.  Besides, we only expect modest, infrequent I/O for query
 * strings, so placing the file on a faster filesystem is not compelling.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PGSS_TEXT_FILE</name></cpp:macro>	<cpp:value>PG_STAT_TMP_DIR "/pgss_query_texts.stat"</cpp:value></cpp:define>

<comment type="block">/* Magic number identifying the stats file format */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32</name></type> <name>PGSS_FILE_HEADER</name> <init>= <expr><literal type="number">0x20171004</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* PostgreSQL major version number, changes in which invalidate all entries */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32</name></type> <name>PGSS_PG_MAJOR_VERSION</name> <init>= <expr><name>PG_VERSION_NUM</name> <operator>/</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* XXX: Should USAGE_EXEC reflect execution time and/or buffer usage? */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE_EXEC</name><parameter_list>(<parameter><type><name>duration</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(1.0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE_INIT</name></cpp:macro>				<cpp:value>(1.0)</cpp:value></cpp:define>	<comment type="block">/* including initial planning */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSUMED_MEDIAN_INIT</name></cpp:macro>		<cpp:value>(10.0)</cpp:value></cpp:define>	<comment type="block">/* initial assumed median usage */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSUMED_LENGTH_INIT</name></cpp:macro>		<cpp:value>1024</cpp:value></cpp:define>	<comment type="block">/* initial assumed mean query length */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE_DECREASE_FACTOR</name></cpp:macro>	<cpp:value>(0.99)</cpp:value></cpp:define>	<comment type="block">/* decreased every entry_dealloc */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STICKY_DECREASE_FACTOR</name></cpp:macro>	<cpp:value>(0.50)</cpp:value></cpp:define>	<comment type="block">/* factor for sticky entries */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE_DEALLOC_PERCENT</name></cpp:macro>	<cpp:value>5</cpp:value></cpp:define>	<comment type="block">/* free this % of entries at once */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JUMBLE_SIZE</name></cpp:macro>				<cpp:value>1024</cpp:value></cpp:define>	<comment type="block">/* query serialization buffer size */</comment>

<comment type="block">/*
 * Extension version number, for supporting older extension versions' objects
 */</comment>
<typedef>typedef <type><enum>enum <name>pgssVersion</name>
<block>{
	<decl><name>PGSS_V1_0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
	<decl><name>PGSS_V1_1</name></decl>,
	<decl><name>PGSS_V1_2</name></decl>,
	<decl><name>PGSS_V1_3</name></decl>
}</block></enum></type> <name>pgssVersion</name>;</typedef>

<comment type="block">/*
 * Hashtable key that defines the identity of a hashtable entry.  We separate
 * queries by user and by database even if they are otherwise identical.
 *
 * Right now, this structure contains no padding.  If you add any, make sure
 * to teach pgss_store() to zero the padding bytes.  Otherwise, things will
 * break, because pgss_hash is created using HASH_BLOBS, and thus tag_hash
 * is used to hash this.
 */</comment>
<typedef>typedef <type><struct>struct <name>pgssHashKey</name>
<block>{
	<decl_stmt><decl><type><name>Oid</name></type>			<name>userid</name></decl>;</decl_stmt>			<comment type="block">/* user OID */</comment>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>dbid</name></decl>;</decl_stmt>			<comment type="block">/* database OID */</comment>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>queryid</name></decl>;</decl_stmt>		<comment type="block">/* query identifier */</comment>
}</block></struct></type> <name>pgssHashKey</name>;</typedef>

<comment type="block">/*
 * The actual stats counters kept within pgssEntry.
 */</comment>
<typedef>typedef <type><struct>struct <name>Counters</name>
<block>{
	<decl_stmt><decl><type><name>int64</name></type>		<name>calls</name></decl>;</decl_stmt>			<comment type="block">/* # of times executed */</comment>
	<decl_stmt><decl><type><name>double</name></type>		<name>total_time</name></decl>;</decl_stmt>		<comment type="block">/* total execution time, in msec */</comment>
	<decl_stmt><decl><type><name>double</name></type>		<name>min_time</name></decl>;</decl_stmt>		<comment type="block">/* minimum execution time in msec */</comment>
	<decl_stmt><decl><type><name>double</name></type>		<name>max_time</name></decl>;</decl_stmt>		<comment type="block">/* maximum execution time in msec */</comment>
	<decl_stmt><decl><type><name>double</name></type>		<name>mean_time</name></decl>;</decl_stmt>		<comment type="block">/* mean execution time in msec */</comment>
	<decl_stmt><decl><type><name>double</name></type>		<name>sum_var_time</name></decl>;</decl_stmt>	<comment type="block">/* sum of variances in execution time in msec */</comment>
	<decl_stmt><decl><type><name>int64</name></type>		<name>rows</name></decl>;</decl_stmt>			<comment type="block">/* total # of retrieved or affected rows */</comment>
	<decl_stmt><decl><type><name>int64</name></type>		<name>shared_blks_hit</name></decl>;</decl_stmt>	<comment type="block">/* # of shared buffer hits */</comment>
	<decl_stmt><decl><type><name>int64</name></type>		<name>shared_blks_read</name></decl>;</decl_stmt>	<comment type="block">/* # of shared disk blocks read */</comment>
	<decl_stmt><decl><type><name>int64</name></type>		<name>shared_blks_dirtied</name></decl>;</decl_stmt>	<comment type="block">/* # of shared disk blocks dirtied */</comment>
	<decl_stmt><decl><type><name>int64</name></type>		<name>shared_blks_written</name></decl>;</decl_stmt>	<comment type="block">/* # of shared disk blocks written */</comment>
	<decl_stmt><decl><type><name>int64</name></type>		<name>local_blks_hit</name></decl>;</decl_stmt> <comment type="block">/* # of local buffer hits */</comment>
	<decl_stmt><decl><type><name>int64</name></type>		<name>local_blks_read</name></decl>;</decl_stmt>	<comment type="block">/* # of local disk blocks read */</comment>
	<decl_stmt><decl><type><name>int64</name></type>		<name>local_blks_dirtied</name></decl>;</decl_stmt> <comment type="block">/* # of local disk blocks dirtied */</comment>
	<decl_stmt><decl><type><name>int64</name></type>		<name>local_blks_written</name></decl>;</decl_stmt> <comment type="block">/* # of local disk blocks written */</comment>
	<decl_stmt><decl><type><name>int64</name></type>		<name>temp_blks_read</name></decl>;</decl_stmt> <comment type="block">/* # of temp blocks read */</comment>
	<decl_stmt><decl><type><name>int64</name></type>		<name>temp_blks_written</name></decl>;</decl_stmt>	<comment type="block">/* # of temp blocks written */</comment>
	<decl_stmt><decl><type><name>double</name></type>		<name>blk_read_time</name></decl>;</decl_stmt>	<comment type="block">/* time spent reading, in msec */</comment>
	<decl_stmt><decl><type><name>double</name></type>		<name>blk_write_time</name></decl>;</decl_stmt> <comment type="block">/* time spent writing, in msec */</comment>
	<decl_stmt><decl><type><name>double</name></type>		<name>usage</name></decl>;</decl_stmt>			<comment type="block">/* usage factor */</comment>
}</block></struct></type> <name>Counters</name>;</typedef>

<comment type="block">/*
 * Statistics per statement
 *
 * Note: in event of a failure in garbage collection of the query text file,
 * we reset query_offset to zero and query_len to -1.  This will be seen as
 * an invalid state by qtext_fetch().
 */</comment>
<typedef>typedef <type><struct>struct <name>pgssEntry</name>
<block>{
	<decl_stmt><decl><type><name>pgssHashKey</name></type> <name>key</name></decl>;</decl_stmt>			<comment type="block">/* hash key of entry - MUST BE FIRST */</comment>
	<decl_stmt><decl><type><name>Counters</name></type>	<name>counters</name></decl>;</decl_stmt>		<comment type="block">/* the statistics for this query */</comment>
	<decl_stmt><decl><type><name>Size</name></type>		<name>query_offset</name></decl>;</decl_stmt>	<comment type="block">/* query text offset in external file */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>query_len</name></decl>;</decl_stmt>		<comment type="block">/* # of valid bytes in query string, or -1 */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>encoding</name></decl>;</decl_stmt>		<comment type="block">/* query text encoding */</comment>
	<decl_stmt><decl><type><name>slock_t</name></type>		<name>mutex</name></decl>;</decl_stmt>			<comment type="block">/* protects the counters only */</comment>
}</block></struct></type> <name>pgssEntry</name>;</typedef>

<comment type="block">/*
 * Global shared state
 */</comment>
<typedef>typedef <type><struct>struct <name>pgssSharedState</name>
<block>{
	<decl_stmt><decl><type><name>LWLock</name>	   <modifier>*</modifier></type><name>lock</name></decl>;</decl_stmt>			<comment type="block">/* protects hashtable search/modification */</comment>
	<decl_stmt><decl><type><name>double</name></type>		<name>cur_median_usage</name></decl>;</decl_stmt>	<comment type="block">/* current median usage in hashtable */</comment>
	<decl_stmt><decl><type><name>Size</name></type>		<name>mean_query_len</name></decl>;</decl_stmt> <comment type="block">/* current mean entry text length */</comment>
	<decl_stmt><decl><type><name>slock_t</name></type>		<name>mutex</name></decl>;</decl_stmt>			<comment type="block">/* protects following fields only: */</comment>
	<decl_stmt><decl><type><name>Size</name></type>		<name>extent</name></decl>;</decl_stmt>			<comment type="block">/* current extent of query file */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>n_writers</name></decl>;</decl_stmt>		<comment type="block">/* number of active writers to query file */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>gc_count</name></decl>;</decl_stmt>		<comment type="block">/* query file garbage collection cycle count */</comment>
}</block></struct></type> <name>pgssSharedState</name>;</typedef>

<comment type="block">/*
 * Struct for tracking locations/lengths of constants during normalization
 */</comment>
<typedef>typedef <type><struct>struct <name>pgssLocationLen</name>
<block>{
	<decl_stmt><decl><type><name>int</name></type>			<name>location</name></decl>;</decl_stmt>		<comment type="block">/* start offset in query text */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>length</name></decl>;</decl_stmt>			<comment type="block">/* length in bytes, or -1 to ignore */</comment>
}</block></struct></type> <name>pgssLocationLen</name>;</typedef>

<comment type="block">/*
 * Working state for computing a query jumble and producing a normalized
 * query string
 */</comment>
<typedef>typedef <type><struct>struct <name>pgssJumbleState</name>
<block>{
	<comment type="block">/* Jumble of current query tree */</comment>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>jumble</name></decl>;</decl_stmt>

	<comment type="block">/* Number of bytes used in jumble[] */</comment>
	<decl_stmt><decl><type><name>Size</name></type>		<name>jumble_len</name></decl>;</decl_stmt>

	<comment type="block">/* Array of locations of constants that should be removed */</comment>
	<decl_stmt><decl><type><name>pgssLocationLen</name> <modifier>*</modifier></type><name>clocations</name></decl>;</decl_stmt>

	<comment type="block">/* Allocated length of clocations array */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>clocations_buf_size</name></decl>;</decl_stmt>

	<comment type="block">/* Current number of valid entries in clocations array */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>clocations_count</name></decl>;</decl_stmt>

	<comment type="block">/* highest Param id we've seen, in order to start normalization correctly */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>highest_extern_param_id</name></decl>;</decl_stmt>
}</block></struct></type> <name>pgssJumbleState</name>;</typedef>

<comment type="block">/*---- Local variables ----*/</comment>

<comment type="block">/* Current nesting depth of ExecutorRun+ProcessUtility calls */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>nested_level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* Saved hook values in case of unload */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>shmem_startup_hook_type</name></type> <name>prev_shmem_startup_hook</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>post_parse_analyze_hook_type</name></type> <name>prev_post_parse_analyze_hook</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ExecutorStart_hook_type</name></type> <name>prev_ExecutorStart</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ExecutorRun_hook_type</name></type> <name>prev_ExecutorRun</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ExecutorFinish_hook_type</name></type> <name>prev_ExecutorFinish</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ExecutorEnd_hook_type</name></type> <name>prev_ExecutorEnd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ProcessUtility_hook_type</name></type> <name>prev_ProcessUtility</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* Links to shared memory state */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>pgssSharedState</name> <modifier>*</modifier></type><name>pgss</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>HTAB</name> <modifier>*</modifier></type><name>pgss_hash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*---- GUC variables ----*/</comment>

<typedef>typedef <type><enum>enum
<block>{
	<decl><name>PGSS_TRACK_NONE</name></decl>,			<comment type="block">/* track no statements */</comment>
	<decl><name>PGSS_TRACK_TOP</name></decl>,				<comment type="block">/* only top level statements */</comment>
	<decl><name>PGSS_TRACK_ALL</name></decl>				<comment type="block">/* all statements, including nested ones */</comment>
}</block></enum></type>			<name>PGSSTrackLevel</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>config_enum_entry</name></name></type> <name><name>track_options</name><index>[]</index></name> <init>=
<expr><block>{
	<expr><block>{<expr><literal type="string">"none"</literal></expr>, <expr><name>PGSS_TRACK_NONE</name></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"top"</literal></expr>, <expr><name>PGSS_TRACK_TOP</name></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"all"</literal></expr>, <expr><name>PGSS_TRACK_ALL</name></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>pgss_max</name></decl>;</decl_stmt>			<comment type="block">/* max # statements to track */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>pgss_track</name></decl>;</decl_stmt>			<comment type="block">/* tracking level */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>pgss_track_utility</name></decl>;</decl_stmt> <comment type="block">/* whether to track utility commands */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>pgss_save</name></decl>;</decl_stmt>			<comment type="block">/* whether to save stats across shutdown */</comment>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pgss_enabled</name><parameter_list>()</parameter_list></cpp:macro> \
	<cpp:value>(pgss_track == PGSS_TRACK_ALL || \
	(pgss_track == PGSS_TRACK_TOP &amp;&amp; nested_level == 0))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>record_gc_qtexts</name><parameter_list>()</parameter_list></cpp:macro> \
	<cpp:value>do { \
		volatile pgssSharedState *s = (volatile pgssSharedState *) pgss; \
		SpinLockAcquire(&amp;s-&gt;mutex); \
		s-&gt;gc_count++; \
		SpinLockRelease(&amp;s-&gt;mutex); \
	} while(0)</cpp:value></cpp:define>

<comment type="block">/*---- Function declarations ----*/</comment>

<function_decl><type><name>void</name></type>		<name>_PG_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>		<name>_PG_fini</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>pg_stat_statements_reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>pg_stat_statements_1_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>pg_stat_statements_1_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>pg_stat_statements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pgss_shmem_startup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pgss_shmem_shutdown</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pgss_post_parse_analyze</name><parameter_list>(<parameter><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>, <parameter><decl><type><name>Query</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pgss_ExecutorStart</name><parameter_list>(<parameter><decl><type><name>QueryDesc</name> <modifier>*</modifier></type><name>queryDesc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pgss_ExecutorRun</name><parameter_list>(<parameter><decl><type><name>QueryDesc</name> <modifier>*</modifier></type><name>queryDesc</name></decl></parameter>,
				 <parameter><decl><type><name>ScanDirection</name></type> <name>direction</name></decl></parameter>,
				 <parameter><decl><type><name>uint64</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>execute_once</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pgss_ExecutorFinish</name><parameter_list>(<parameter><decl><type><name>QueryDesc</name> <modifier>*</modifier></type><name>queryDesc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pgss_ExecutorEnd</name><parameter_list>(<parameter><decl><type><name>QueryDesc</name> <modifier>*</modifier></type><name>queryDesc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pgss_ProcessUtility</name><parameter_list>(<parameter><decl><type><name>PlannedStmt</name> <modifier>*</modifier></type><name>pstmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>queryString</name></decl></parameter>,
					<parameter><decl><type><name>ProcessUtilityContext</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>ParamListInfo</name></type> <name>params</name></decl></parameter>,
					<parameter><decl><type><name>QueryEnvironment</name> <modifier>*</modifier></type><name>queryEnv</name></decl></parameter>,
					<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>completionTag</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint64</name></type> <name>pgss_hash_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pgss_store</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>queryId</name></decl></parameter>,
		   <parameter><decl><type><name>int</name></type> <name>query_location</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>query_len</name></decl></parameter>,
		   <parameter><decl><type><name>double</name></type> <name>total_time</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>rows</name></decl></parameter>,
		   <parameter><decl><type><specifier>const</specifier> <name>BufferUsage</name> <modifier>*</modifier></type><name>bufusage</name></decl></parameter>,
		   <parameter><decl><type><name>pgssJumbleState</name> <modifier>*</modifier></type><name>jstate</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pg_stat_statements_internal</name><parameter_list>(<parameter><decl><type><name>FunctionCallInfo</name></type> <name>fcinfo</name></decl></parameter>,
							<parameter><decl><type><name>pgssVersion</name></type> <name>api_version</name></decl></parameter>,
							<parameter><decl><type><name>bool</name></type> <name>showtext</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Size</name></type> <name>pgss_memsize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>pgssEntry</name> <modifier>*</modifier></type><name>entry_alloc</name><parameter_list>(<parameter><decl><type><name>pgssHashKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>query_offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>query_len</name></decl></parameter>,
			<parameter><decl><type><name>int</name></type> <name>encoding</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>sticky</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>entry_dealloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>qtext_store</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>query_len</name></decl></parameter>,
			<parameter><decl><type><name>Size</name> <modifier>*</modifier></type><name>query_offset</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>gc_count</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>qtext_load_file</name><parameter_list>(<parameter><decl><type><name>Size</name> <modifier>*</modifier></type><name>buffer_size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>qtext_fetch</name><parameter_list>(<parameter><decl><type><name>Size</name></type> <name>query_offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>query_len</name></decl></parameter>,
			<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>buffer_size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>need_gc_qtexts</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>gc_qtexts</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>entry_reset</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>AppendJumble</name><parameter_list>(<parameter><decl><type><name>pgssJumbleState</name> <modifier>*</modifier></type><name>jstate</name></decl></parameter>,
			 <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>JumbleQuery</name><parameter_list>(<parameter><decl><type><name>pgssJumbleState</name> <modifier>*</modifier></type><name>jstate</name></decl></parameter>, <parameter><decl><type><name>Query</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>JumbleRangeTable</name><parameter_list>(<parameter><decl><type><name>pgssJumbleState</name> <modifier>*</modifier></type><name>jstate</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>rtable</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>JumbleExpr</name><parameter_list>(<parameter><decl><type><name>pgssJumbleState</name> <modifier>*</modifier></type><name>jstate</name></decl></parameter>, <parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>RecordConstLocation</name><parameter_list>(<parameter><decl><type><name>pgssJumbleState</name> <modifier>*</modifier></type><name>jstate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>generate_normalized_query</name><parameter_list>(<parameter><decl><type><name>pgssJumbleState</name> <modifier>*</modifier></type><name>jstate</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>,
						 <parameter><decl><type><name>int</name></type> <name>query_loc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>query_len_p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encoding</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>fill_in_constant_lengths</name><parameter_list>(<parameter><decl><type><name>pgssJumbleState</name> <modifier>*</modifier></type><name>jstate</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>,
						 <parameter><decl><type><name>int</name></type> <name>query_loc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>comp_location</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * Module load callback
 */</comment>
<function><type><name>void</name></type>
<name>_PG_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * In order to create our shared memory area, we have to be loaded via
	 * shared_preload_libraries.  If not, fall out without hooking into any of
	 * the main system.  (We don't throw error here because it seems useful to
	 * allow the pg_stat_statements functions to be created even when the
	 * module isn't active.  The functions must protect themselves against
	 * being called then, however.)
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>process_shared_preload_libraries_in_progress</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Define (or redefine) custom GUC variables.
	 */</comment>
	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(<argument><expr><literal type="string">"pg_stat_statements.max"</literal></expr></argument>,
							<argument><expr><literal type="string">"Sets the maximum number of statements tracked by pg_stat_statements."</literal></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><operator>&amp;</operator><name>pgss_max</name></expr></argument>,
							<argument><expr><literal type="number">5000</literal></expr></argument>,
							<argument><expr><literal type="number">100</literal></expr></argument>,
							<argument><expr><name>INT_MAX</name></expr></argument>,
							<argument><expr><name>PGC_POSTMASTER</name></expr></argument>,
							<argument><expr><literal type="number">0</literal></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomEnumVariable</name><argument_list>(<argument><expr><literal type="string">"pg_stat_statements.track"</literal></expr></argument>,
							 <argument><expr><literal type="string">"Selects which statements are tracked by pg_stat_statements."</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name>pgss_track</name></expr></argument>,
							 <argument><expr><name>PGSS_TRACK_TOP</name></expr></argument>,
							 <argument><expr><name>track_options</name></expr></argument>,
							 <argument><expr><name>PGC_SUSET</name></expr></argument>,
							 <argument><expr><literal type="number">0</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(<argument><expr><literal type="string">"pg_stat_statements.track_utility"</literal></expr></argument>,
							 <argument><expr><literal type="string">"Selects whether utility commands are tracked by pg_stat_statements."</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name>pgss_track_utility</name></expr></argument>,
							 <argument><expr><name>true</name></expr></argument>,
							 <argument><expr><name>PGC_SUSET</name></expr></argument>,
							 <argument><expr><literal type="number">0</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(<argument><expr><literal type="string">"pg_stat_statements.save"</literal></expr></argument>,
							 <argument><expr><literal type="string">"Save pg_stat_statements statistics across server shutdowns."</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name>pgss_save</name></expr></argument>,
							 <argument><expr><name>true</name></expr></argument>,
							 <argument><expr><name>PGC_SIGHUP</name></expr></argument>,
							 <argument><expr><literal type="number">0</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>EmitWarningsOnPlaceholders</name><argument_list>(<argument><expr><literal type="string">"pg_stat_statements"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Request additional shared resources.  (These are no-ops if we're not in
	 * the postmaster process.)  We'll allocate or attach to the shared
	 * resources in pgss_shmem_startup().
	 */</comment>
	<expr_stmt><expr><call><name>RequestAddinShmemSpace</name><argument_list>(<argument><expr><call><name>pgss_memsize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RequestNamedLWLockTranche</name><argument_list>(<argument><expr><literal type="string">"pg_stat_statements"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Install hooks.
	 */</comment>
	<expr_stmt><expr><name>prev_shmem_startup_hook</name> <operator>=</operator> <name>shmem_startup_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>shmem_startup_hook</name> <operator>=</operator> <name>pgss_shmem_startup</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>prev_post_parse_analyze_hook</name> <operator>=</operator> <name>post_parse_analyze_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>post_parse_analyze_hook</name> <operator>=</operator> <name>pgss_post_parse_analyze</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>prev_ExecutorStart</name> <operator>=</operator> <name>ExecutorStart_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ExecutorStart_hook</name> <operator>=</operator> <name>pgss_ExecutorStart</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>prev_ExecutorRun</name> <operator>=</operator> <name>ExecutorRun_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ExecutorRun_hook</name> <operator>=</operator> <name>pgss_ExecutorRun</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>prev_ExecutorFinish</name> <operator>=</operator> <name>ExecutorFinish_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ExecutorFinish_hook</name> <operator>=</operator> <name>pgss_ExecutorFinish</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>prev_ExecutorEnd</name> <operator>=</operator> <name>ExecutorEnd_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ExecutorEnd_hook</name> <operator>=</operator> <name>pgss_ExecutorEnd</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>prev_ProcessUtility</name> <operator>=</operator> <name>ProcessUtility_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ProcessUtility_hook</name> <operator>=</operator> <name>pgss_ProcessUtility</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Module unload callback
 */</comment>
<function><type><name>void</name></type>
<name>_PG_fini</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Uninstall hooks. */</comment>
	<expr_stmt><expr><name>shmem_startup_hook</name> <operator>=</operator> <name>prev_shmem_startup_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>post_parse_analyze_hook</name> <operator>=</operator> <name>prev_post_parse_analyze_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ExecutorStart_hook</name> <operator>=</operator> <name>prev_ExecutorStart</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ExecutorRun_hook</name> <operator>=</operator> <name>prev_ExecutorRun</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ExecutorFinish_hook</name> <operator>=</operator> <name>prev_ExecutorFinish</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ExecutorEnd_hook</name> <operator>=</operator> <name>prev_ExecutorEnd</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ProcessUtility_hook</name> <operator>=</operator> <name>prev_ProcessUtility</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>resetYsqlStatementStats</name><parameter_list>()</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>pg_stat_statements_reset</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>getYsqlStatementStats</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cb_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> <name>hash_seq</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>qbuffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type>		<name>qbuffer_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pgssEntry</name>  <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>YsqlStatementStat</name></type> <name>tmp</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>qbuffer</name> <operator>=</operator> <call><name>qtext_load_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>qbuffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>qbuffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name><name>pgss</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_seq</name></expr></argument>, <argument><expr><name>pgss_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>entry</name> <operator>=</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_seq</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
    <comment type="line">// some entries have 0 calls and strange query text - ignore them</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>entry</name><operator>-&gt;</operator><name>counters</name><operator>.</operator><name>calls</name></name></expr>)</condition><block type="pseudo"><block_content>
      <continue>continue;</continue></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>qry</name> <init>= <expr><call><name>qtext_fetch</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>query_offset</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>query_len</name></name></expr></argument>, <argument><expr><name>qbuffer</name></expr></argument>, <argument><expr><name>qbuffer_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>qry</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>query</name></name>        <operator>=</operator> <name>qry</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>calls</name></name>        <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>counters</name><operator>.</operator><name>calls</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>total_time</name></name>   <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>counters</name><operator>.</operator><name>total_time</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>min_time</name></name>     <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>counters</name><operator>.</operator><name>min_time</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>max_time</name></name>     <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>counters</name><operator>.</operator><name>max_time</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>mean_time</name></name>    <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>counters</name><operator>.</operator><name>mean_time</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>sum_var_time</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>counters</name><operator>.</operator><name>sum_var_time</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>rows</name></name>         <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>counters</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>query_id</name></name>     <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>queryid</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>WriteStatArrayElemToJson</name><argument_list>(<argument><expr><name>cb_arg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name><name>pgss</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>qbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * shmem_startup hook: allocate or attach to shared memory,
 * then load any pre-existing statistics from file.
 * Also create and load the query-texts file, which is expected to exist
 * (even if empty) while the module is enabled.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>pgss_shmem_startup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HASHCTL</name></type>		<name>info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE</name>	   <modifier>*</modifier></type><name>file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE</name>	   <modifier>*</modifier></type><name>qfile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>header</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>num</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>pgver</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>buffer_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>prev_shmem_startup_hook</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>prev_shmem_startup_hook</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>RegisterGetYsqlStatStatements</name><argument_list>(<argument><expr><operator>&amp;</operator><name>getYsqlStatementStats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RegisterResetYsqlStatStatements</name><argument_list>(<argument><expr><operator>&amp;</operator><name>resetYsqlStatementStats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* reset in case this is a restart within the postmaster */</comment>
	<expr_stmt><expr><name>pgss</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>pgss_hash</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Create or attach to the shared memory state, including hash table
	 */</comment>
	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>AddinShmemInitLock</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>pgss</name> <operator>=</operator> <call><name>ShmemInitStruct</name><argument_list>(<argument><expr><literal type="string">"pg_stat_statements"</literal></expr></argument>,
						   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pgssSharedState</name></expr></argument>)</argument_list></sizeof></expr></argument>,
						   <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* First time through ... */</comment>
		<expr_stmt><expr><name><name>pgss</name><operator>-&gt;</operator><name>lock</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><call><name>GetNamedLWLockTranche</name><argument_list>(<argument><expr><literal type="string">"pg_stat_statements"</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>lock</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pgss</name><operator>-&gt;</operator><name>cur_median_usage</name></name> <operator>=</operator> <name>ASSUMED_MEDIAN_INIT</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pgss</name><operator>-&gt;</operator><name>mean_query_len</name></name> <operator>=</operator> <name>ASSUMED_LENGTH_INIT</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SpinLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pgss</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pgss</name><operator>-&gt;</operator><name>extent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pgss</name><operator>-&gt;</operator><name>n_writers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pgss</name><operator>-&gt;</operator><name>gc_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name><operator>.</operator><name>keysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pgssHashKey</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name><operator>.</operator><name>entrysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pgssEntry</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name>pgss_hash</name> <operator>=</operator> <call><name>ShmemInitHash</name><argument_list>(<argument><expr><literal type="string">"pg_stat_statements hash"</literal></expr></argument>,
							  <argument><expr><name>pgss_max</name></expr></argument>, <argument><expr><name>pgss_max</name></expr></argument>,
							  <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>,
							  <argument><expr><name>HASH_ELEM</name> <operator>|</operator> <name>HASH_BLOBS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>AddinShmemInitLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If we're in the postmaster (or a standalone backend...), set up a shmem
	 * exit hook to dump the statistics to disk.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>IsUnderPostmaster</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>on_shmem_exit</name><argument_list>(<argument><expr><name>pgss_shmem_shutdown</name></expr></argument>, <argument><expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Done if some other process already completed our initialization.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Note: we don't bother with locks here, because there should be no other
	 * processes running when this code is reached.
	 */</comment>

	<comment type="block">/* Unlink query text file possibly left over from crash */</comment>
	<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>PGSS_TEXT_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Allocate new query text temp file */</comment>
	<expr_stmt><expr><name>qfile</name> <operator>=</operator> <call><name>AllocateFile</name><argument_list>(<argument><expr><name>PGSS_TEXT_FILE</name></expr></argument>, <argument><expr><name>PG_BINARY_W</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>qfile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>write_error</name>;</goto></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * If we were told not to load old statistics, we're done.  (Note we do
	 * not try to unlink any old dump file in this case.  This seems a bit
	 * questionable but it's the historical behavior.)
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pgss_save</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>FreeFile</name><argument_list>(<argument><expr><name>qfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Attempt to load old statistics from the dump file.
	 */</comment>
	<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>AllocateFile</name><argument_list>(<argument><expr><name>PGSS_DUMP_FILE</name></expr></argument>, <argument><expr><name>PG_BINARY_R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENOENT</name></expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>read_error</name>;</goto></block_content></block></if></if_stmt>
		<comment type="block">/* No existing persisted stats file, so we're done */</comment>
		<expr_stmt><expr><call><name>FreeFile</name><argument_list>(<argument><expr><name>qfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>buffer_size</name> <operator>=</operator> <literal type="number">2048</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator>
		<call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pgver</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator>
		<call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>read_error</name>;</goto></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>header</name> <operator>!=</operator> <name>PGSS_FILE_HEADER</name> <operator>||</operator>
		<name>pgver</name> <operator>!=</operator> <name>PGSS_PG_MAJOR_VERSION</name></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>data_error</name>;</goto></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>pgssEntry</name></type>	<name>temp</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>pgssEntry</name>  <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Size</name></type>		<name>query_offset</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pgssEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>read_error</name>;</goto></block_content></block></if></if_stmt>

		<comment type="block">/* Encoding is the only field we can easily sanity-check */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PG_VALID_BE_ENCODING</name><argument_list>(<argument><expr><name><name>temp</name><operator>.</operator><name>encoding</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>data_error</name>;</goto></block_content></block></if></if_stmt>

		<comment type="block">/* Resize buffer as needed */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>temp</name><operator>.</operator><name>query_len</name></name> <operator>&gt;=</operator> <name>buffer_size</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>buffer_size</name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><name>buffer_size</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>temp</name><operator>.</operator><name>query_len</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>fread</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>temp</name><operator>.</operator><name>query_len</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>temp</name><operator>.</operator><name>query_len</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>read_error</name>;</goto></block_content></block></if></if_stmt>

		<comment type="block">/* Should have a trailing null, but let's make sure */</comment>
		<expr_stmt><expr><name><name>buffer</name><index>[<expr><name><name>temp</name><operator>.</operator><name>query_len</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

		<comment type="block">/* Skip loading "sticky" entries */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>temp</name><operator>.</operator><name>counters</name><operator>.</operator><name>calls</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/* Store the query text */</comment>
		<expr_stmt><expr><name>query_offset</name> <operator>=</operator> <name><name>pgss</name><operator>-&gt;</operator><name>extent</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>temp</name><operator>.</operator><name>query_len</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>qfile</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>temp</name><operator>.</operator><name>query_len</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>write_error</name>;</goto></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>pgss</name><operator>-&gt;</operator><name>extent</name></name> <operator>+=</operator> <name><name>temp</name><operator>.</operator><name>query_len</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

		<comment type="block">/* make the hashtable entry (discards old entries if too many) */</comment>
		<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>entry_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temp</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name>query_offset</name></expr></argument>, <argument><expr><name><name>temp</name><operator>.</operator><name>query_len</name></name></expr></argument>,
							<argument><expr><name><name>temp</name><operator>.</operator><name>encoding</name></name></expr></argument>,
							<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* copy in the actual stats */</comment>
		<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>counters</name></name> <operator>=</operator> <name><name>temp</name><operator>.</operator><name>counters</name></name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FreeFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FreeFile</name><argument_list>(<argument><expr><name>qfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Remove the persisted stats file so it's not included in
	 * backups/replication slaves, etc.  A new file will be written on next
	 * shutdown.
	 *
	 * Note: it's okay if the PGSS_TEXT_FILE is included in a basebackup,
	 * because we remove that file on startup; it acts inversely to
	 * PGSS_DUMP_FILE, in that it is only supposed to be around when the
	 * server is running, whereas PGSS_DUMP_FILE is only supposed to be around
	 * when the server is not running.  Leaving the file creates no danger of
	 * a newly restored database having a spurious record of execution costs,
	 * which is what we're really concerned about here.
	 */</comment>
	<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>PGSS_DUMP_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return;</return>

<label><name>read_error</name>:</label>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
			 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not read pg_stat_statement file \"%s\": %m"</literal></expr></argument>,
					<argument><expr><name>PGSS_DUMP_FILE</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<goto>goto <name>fail</name>;</goto>
<label><name>data_error</name>:</label>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"ignoring invalid data in pg_stat_statement file \"%s\""</literal></expr></argument>,
					<argument><expr><name>PGSS_DUMP_FILE</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<goto>goto <name>fail</name>;</goto>
<label><name>write_error</name>:</label>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
			 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not write pg_stat_statement file \"%s\": %m"</literal></expr></argument>,
					<argument><expr><name>PGSS_TEXT_FILE</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>fail</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>buffer</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>file</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FreeFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>qfile</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FreeFile</name><argument_list>(<argument><expr><name>qfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<comment type="block">/* If possible, throw away the bogus file; ignore any error */</comment>
	<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>PGSS_DUMP_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Don't unlink PGSS_TEXT_FILE here; it should always be around while the
	 * server is running with pg_stat_statements enabled
	 */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * shmem_shutdown hook: Dump statistics into file.
 *
 * Note: we don't bother with acquiring lock, because there should be no
 * other processes running when this is called.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>pgss_shmem_shutdown</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE</name>	   <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>qbuffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type>		<name>qbuffer_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> <name>hash_seq</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>num_entries</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pgssEntry</name>  <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

	<comment type="block">/* Don't try to dump during a crash. */</comment>
	<if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Safety check ... shouldn't get here unless shmem is set up. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pgss</name> <operator>||</operator> <operator>!</operator><name>pgss_hash</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Don't dump if told not to. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pgss_save</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>AllocateFile</name><argument_list>(<argument><expr><name>PGSS_DUMP_FILE</name> <literal type="string">".tmp"</literal></expr></argument>, <argument><expr><name>PG_BINARY_W</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PGSS_FILE_HEADER</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PGSS_PG_MAJOR_VERSION</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>num_entries</name> <operator>=</operator> <call><name>hash_get_num_entries</name><argument_list>(<argument><expr><name>pgss_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><operator>&amp;</operator><name>num_entries</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>qbuffer</name> <operator>=</operator> <call><name>qtext_load_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>qbuffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>qbuffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * When serializing to disk, we store query texts immediately after their
	 * entry data.  Any orphaned query texts are thereby excluded.
	 */</comment>
	<expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_seq</name></expr></argument>, <argument><expr><name>pgss_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>entry</name> <operator>=</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_seq</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>len</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>query_len</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>qstr</name> <init>= <expr><call><name>qtext_fetch</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>query_offset</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
									   <argument><expr><name>qbuffer</name></expr></argument>, <argument><expr><name>qbuffer_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>qstr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>			<comment type="block">/* Ignore any entries with bogus texts */</comment>

		<if_stmt><if>if <condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pgssEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator>
			<call><name>fwrite</name><argument_list>(<argument><expr><name>qstr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* note: we assume hash_seq_term won't change errno */</comment>
			<expr_stmt><expr><call><name>hash_seq_term</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>error</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>qbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>qbuffer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>FreeFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>file</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<goto>goto <name>error</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Rename file into place, so we atomically replace any old one.
	 */</comment>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>durable_rename</name><argument_list>(<argument><expr><name>PGSS_DUMP_FILE</name> <literal type="string">".tmp"</literal></expr></argument>, <argument><expr><name>PGSS_DUMP_FILE</name></expr></argument>, <argument><expr><name>LOG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Unlink query-texts file; it's not needed while shutdown */</comment>
	<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>PGSS_TEXT_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return;</return>

<label><name>error</name>:</label>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
			 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not write pg_stat_statement file \"%s\": %m"</literal></expr></argument>,
					<argument><expr><name>PGSS_DUMP_FILE</name> <literal type="string">".tmp"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>qbuffer</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>qbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>file</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FreeFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>PGSS_DUMP_FILE</name> <literal type="string">".tmp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>PGSS_TEXT_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Post-parse-analysis hook: mark query with a queryId
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>pgss_post_parse_analyze</name><parameter_list>(<parameter><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>, <parameter><decl><type><name>Query</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pgssJumbleState</name></type> <name>jstate</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>prev_post_parse_analyze_hook</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>prev_post_parse_analyze_hook</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Assert we didn't do this already */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>queryId</name></name> <operator>==</operator> <call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Safety check... */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pgss</name> <operator>||</operator> <operator>!</operator><name>pgss_hash</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Utility statements get queryId zero.  We do this even in cases where
	 * the statement contains an optimizable statement for which a queryId
	 * could be derived (such as EXPLAIN or DECLARE CURSOR).  For such cases,
	 * runtime control will first go through ProcessUtility and then the
	 * executor, and we don't want the executor hooks to do anything, since we
	 * are already measuring the statement's costs at the utility level.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>utilityStmt</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>queryId</name></name> <operator>=</operator> <call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Set up workspace for query jumbling */</comment>
	<expr_stmt><expr><name><name>jstate</name><operator>.</operator><name>jumble</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>JUMBLE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>jstate</name><operator>.</operator><name>jumble_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>jstate</name><operator>.</operator><name>clocations_buf_size</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>jstate</name><operator>.</operator><name>clocations</name></name> <operator>=</operator> <operator>(</operator><name>pgssLocationLen</name> <operator>*</operator><operator>)</operator>
		<call><name>palloc</name><argument_list>(<argument><expr><name><name>jstate</name><operator>.</operator><name>clocations_buf_size</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pgssLocationLen</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>jstate</name><operator>.</operator><name>clocations_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>jstate</name><operator>.</operator><name>highest_extern_param_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/* Compute query ID and mark the Query node with it */</comment>
	<expr_stmt><expr><call><name>JumbleQuery</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jstate</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>queryId</name></name> <operator>=</operator>
		<call><name>DatumGetUInt64</name><argument_list>(<argument><expr><call><name>hash_any_extended</name><argument_list>(<argument><expr><name><name>jstate</name><operator>.</operator><name>jumble</name></name></expr></argument>, <argument><expr><name><name>jstate</name><operator>.</operator><name>jumble_len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If we are unlucky enough to get a hash of zero, use 1 instead, to
	 * prevent confusion with the utility-statement case.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>queryId</name></name> <operator>==</operator> <call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>queryId</name></name> <operator>=</operator> <call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * If we were able to identify any ignorable constants, we immediately
	 * create a hash table entry for the query, so that we can record the
	 * normalized form of the query string.  If there were no such constants,
	 * the normalized string would be the same as the query text anyway, so
	 * there's no need for an early entry.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>jstate</name><operator>.</operator><name>clocations_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pgss_store</name><argument_list>(<argument><expr><name><name>pstate</name><operator>-&gt;</operator><name>p_sourcetext</name></name></expr></argument>,
				   <argument><expr><name><name>query</name><operator>-&gt;</operator><name>queryId</name></name></expr></argument>,
				   <argument><expr><name><name>query</name><operator>-&gt;</operator><name>stmt_location</name></name></expr></argument>,
				   <argument><expr><name><name>query</name><operator>-&gt;</operator><name>stmt_len</name></name></expr></argument>,
				   <argument><expr><literal type="number">0</literal></expr></argument>,
				   <argument><expr><literal type="number">0</literal></expr></argument>,
				   <argument><expr><name>NULL</name></expr></argument>,
				   <argument><expr><operator>&amp;</operator><name>jstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * ExecutorStart hook: start up tracking if needed
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>pgss_ExecutorStart</name><parameter_list>(<parameter><decl><type><name>QueryDesc</name> <modifier>*</modifier></type><name>queryDesc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>prev_ExecutorStart</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>prev_ExecutorStart</name><argument_list>(<argument><expr><name>queryDesc</name></expr></argument>, <argument><expr><name>eflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>standard_ExecutorStart</name><argument_list>(<argument><expr><name>queryDesc</name></expr></argument>, <argument><expr><name>eflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/*
	 * If query has queryId zero, don't track it.  This prevents double
	 * counting of optimizable statements that are directly contained in
	 * utility statements.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>pgss_enabled</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>queryDesc</name><operator>-&gt;</operator><name>plannedstmt</name><operator>-&gt;</operator><name>queryId</name></name> <operator>!=</operator> <call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Set up to track total elapsed time in ExecutorRun.  Make sure the
		 * space is allocated in the per-query context so it will go away at
		 * ExecutorEnd.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>queryDesc</name><operator>-&gt;</operator><name>totaltime</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcxt</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>oldcxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>queryDesc</name><operator>-&gt;</operator><name>estate</name><operator>-&gt;</operator><name>es_query_cxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>queryDesc</name><operator>-&gt;</operator><name>totaltime</name></name> <operator>=</operator> <call><name>InstrAlloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INSTRUMENT_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * ExecutorRun hook: all we need do is track nesting depth
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>pgss_ExecutorRun</name><parameter_list>(<parameter><decl><type><name>QueryDesc</name> <modifier>*</modifier></type><name>queryDesc</name></decl></parameter>, <parameter><decl><type><name>ScanDirection</name></type> <name>direction</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>count</name></decl></parameter>,
				 <parameter><decl><type><name>bool</name></type> <name>execute_once</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>nested_level</name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>prev_ExecutorRun</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>prev_ExecutorRun</name><argument_list>(<argument><expr><name>queryDesc</name></expr></argument>, <argument><expr><name>direction</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>execute_once</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>standard_ExecutorRun</name><argument_list>(<argument><expr><name>queryDesc</name></expr></argument>, <argument><expr><name>direction</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>execute_once</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><name>nested_level</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><name>nested_level</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * ExecutorFinish hook: all we need do is track nesting depth
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>pgss_ExecutorFinish</name><parameter_list>(<parameter><decl><type><name>QueryDesc</name> <modifier>*</modifier></type><name>queryDesc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>nested_level</name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>prev_ExecutorFinish</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>prev_ExecutorFinish</name><argument_list>(<argument><expr><name>queryDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>standard_ExecutorFinish</name><argument_list>(<argument><expr><name>queryDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><name>nested_level</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><name>nested_level</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * ExecutorEnd hook: store results if needed
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>pgss_ExecutorEnd</name><parameter_list>(<parameter><decl><type><name>QueryDesc</name> <modifier>*</modifier></type><name>queryDesc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>queryId</name> <init>= <expr><name><name>queryDesc</name><operator>-&gt;</operator><name>plannedstmt</name><operator>-&gt;</operator><name>queryId</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>queryId</name> <operator>!=</operator> <call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>queryDesc</name><operator>-&gt;</operator><name>totaltime</name></name> <operator>&amp;&amp;</operator> <call><name>pgss_enabled</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Make sure stats accumulation is done.  (Note: it's okay if several
		 * levels of hook all do this.)
		 */</comment>
		<expr_stmt><expr><call><name>InstrEndLoop</name><argument_list>(<argument><expr><name><name>queryDesc</name><operator>-&gt;</operator><name>totaltime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>pgss_store</name><argument_list>(<argument><expr><name><name>queryDesc</name><operator>-&gt;</operator><name>sourceText</name></name></expr></argument>,
				   <argument><expr><name>queryId</name></expr></argument>,
				   <argument><expr><name><name>queryDesc</name><operator>-&gt;</operator><name>plannedstmt</name><operator>-&gt;</operator><name>stmt_location</name></name></expr></argument>,
				   <argument><expr><name><name>queryDesc</name><operator>-&gt;</operator><name>plannedstmt</name><operator>-&gt;</operator><name>stmt_len</name></name></expr></argument>,
				   <argument><expr><name><name>queryDesc</name><operator>-&gt;</operator><name>totaltime</name><operator>-&gt;</operator><name>total</name></name> <operator>*</operator> <literal type="number">1000.0</literal></expr></argument>,	<comment type="block">/* convert to msec */</comment>
				   <argument><expr><name><name>queryDesc</name><operator>-&gt;</operator><name>estate</name><operator>-&gt;</operator><name>es_processed</name></name></expr></argument>,
				   <argument><expr><operator>&amp;</operator><name><name>queryDesc</name><operator>-&gt;</operator><name>totaltime</name><operator>-&gt;</operator><name>bufusage</name></name></expr></argument>,
				   <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>prev_ExecutorEnd</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>prev_ExecutorEnd</name><argument_list>(<argument><expr><name>queryDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>standard_ExecutorEnd</name><argument_list>(<argument><expr><name>queryDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * ProcessUtility hook
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>pgss_ProcessUtility</name><parameter_list>(<parameter><decl><type><name>PlannedStmt</name> <modifier>*</modifier></type><name>pstmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>queryString</name></decl></parameter>,
					<parameter><decl><type><name>ProcessUtilityContext</name></type> <name>context</name></decl></parameter>,
					<parameter><decl><type><name>ParamListInfo</name></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>QueryEnvironment</name> <modifier>*</modifier></type><name>queryEnv</name></decl></parameter>,
					<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>completionTag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Node</name>	   <modifier>*</modifier></type><name>parsetree</name> <init>= <expr><name><name>pstmt</name><operator>-&gt;</operator><name>utilityStmt</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * If it's an EXECUTE statement, we don't track it and don't increment the
	 * nesting level.  This allows the cycles to be charged to the underlying
	 * PREPARE instead (by the Executor hooks), which is much more useful.
	 *
	 * We also don't track execution of PREPARE.  If we did, we would get one
	 * hash table entry for the PREPARE (with hash calculated from the query
	 * string), and then a different one with the same query string (but hash
	 * calculated from the query tree) would be used to accumulate costs of
	 * ensuing EXECUTEs.  This would be confusing, and inconsistent with other
	 * cases where planning time is not included at all.
	 *
	 * Likewise, we don't track execution of DEALLOCATE.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>pgss_track_utility</name> <operator>&amp;&amp;</operator> <call><name>pgss_enabled</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
		<operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name>parsetree</name></expr></argument>, <argument><expr><name>ExecuteStmt</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		<operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name>parsetree</name></expr></argument>, <argument><expr><name>PrepareStmt</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		<operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name>parsetree</name></expr></argument>, <argument><expr><name>DeallocateStmt</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>instr_time</name></type>	<name>start</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>instr_time</name></type>	<name>duration</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint64</name></type>		<name>rows</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>BufferUsage</name></type> <name>bufusage_start</name></decl>,
					<decl><type ref="prev"/><name>bufusage</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>bufusage_start</name> <operator>=</operator> <name>pgBufferUsage</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>INSTR_TIME_SET_CURRENT</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>nested_level</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>prev_ProcessUtility</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>prev_ProcessUtility</name><argument_list>(<argument><expr><name>pstmt</name></expr></argument>, <argument><expr><name>queryString</name></expr></argument>,
									<argument><expr><name>context</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>queryEnv</name></expr></argument>,
									<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>completionTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>standard_ProcessUtility</name><argument_list>(<argument><expr><name>pstmt</name></expr></argument>, <argument><expr><name>queryString</name></expr></argument>,
										<argument><expr><name>context</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>queryEnv</name></expr></argument>,
										<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>completionTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<expr_stmt><expr><name>nested_level</name><operator>--</operator></expr>;</expr_stmt>
		</block_content>}</block>
		<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<block>{<block_content>
			<expr_stmt><expr><name>nested_level</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>INSTR_TIME_SET_CURRENT</name><argument_list>(<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>INSTR_TIME_SUBTRACT</name><argument_list>(<argument><expr><name>duration</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* parse command tag to retrieve the number of affected rows. */</comment>
		<if_stmt><if>if <condition>(<expr><name>completionTag</name> <operator>&amp;&amp;</operator>
			<call><name>strncmp</name><argument_list>(<argument><expr><name>completionTag</name></expr></argument>, <argument><expr><literal type="string">"COPY "</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>rows</name> <operator>=</operator> <call><name>pg_strtouint64</name><argument_list>(<argument><expr><name>completionTag</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>rows</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<comment type="block">/* calc differences of buffer counters. */</comment>
		<expr_stmt><expr><name><name>bufusage</name><operator>.</operator><name>shared_blks_hit</name></name> <operator>=</operator>
			<name><name>pgBufferUsage</name><operator>.</operator><name>shared_blks_hit</name></name> <operator>-</operator> <name><name>bufusage_start</name><operator>.</operator><name>shared_blks_hit</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>bufusage</name><operator>.</operator><name>shared_blks_read</name></name> <operator>=</operator>
			<name><name>pgBufferUsage</name><operator>.</operator><name>shared_blks_read</name></name> <operator>-</operator> <name><name>bufusage_start</name><operator>.</operator><name>shared_blks_read</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>bufusage</name><operator>.</operator><name>shared_blks_dirtied</name></name> <operator>=</operator>
			<name><name>pgBufferUsage</name><operator>.</operator><name>shared_blks_dirtied</name></name> <operator>-</operator> <name><name>bufusage_start</name><operator>.</operator><name>shared_blks_dirtied</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>bufusage</name><operator>.</operator><name>shared_blks_written</name></name> <operator>=</operator>
			<name><name>pgBufferUsage</name><operator>.</operator><name>shared_blks_written</name></name> <operator>-</operator> <name><name>bufusage_start</name><operator>.</operator><name>shared_blks_written</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>bufusage</name><operator>.</operator><name>local_blks_hit</name></name> <operator>=</operator>
			<name><name>pgBufferUsage</name><operator>.</operator><name>local_blks_hit</name></name> <operator>-</operator> <name><name>bufusage_start</name><operator>.</operator><name>local_blks_hit</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>bufusage</name><operator>.</operator><name>local_blks_read</name></name> <operator>=</operator>
			<name><name>pgBufferUsage</name><operator>.</operator><name>local_blks_read</name></name> <operator>-</operator> <name><name>bufusage_start</name><operator>.</operator><name>local_blks_read</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>bufusage</name><operator>.</operator><name>local_blks_dirtied</name></name> <operator>=</operator>
			<name><name>pgBufferUsage</name><operator>.</operator><name>local_blks_dirtied</name></name> <operator>-</operator> <name><name>bufusage_start</name><operator>.</operator><name>local_blks_dirtied</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>bufusage</name><operator>.</operator><name>local_blks_written</name></name> <operator>=</operator>
			<name><name>pgBufferUsage</name><operator>.</operator><name>local_blks_written</name></name> <operator>-</operator> <name><name>bufusage_start</name><operator>.</operator><name>local_blks_written</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>bufusage</name><operator>.</operator><name>temp_blks_read</name></name> <operator>=</operator>
			<name><name>pgBufferUsage</name><operator>.</operator><name>temp_blks_read</name></name> <operator>-</operator> <name><name>bufusage_start</name><operator>.</operator><name>temp_blks_read</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>bufusage</name><operator>.</operator><name>temp_blks_written</name></name> <operator>=</operator>
			<name><name>pgBufferUsage</name><operator>.</operator><name>temp_blks_written</name></name> <operator>-</operator> <name><name>bufusage_start</name><operator>.</operator><name>temp_blks_written</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>bufusage</name><operator>.</operator><name>blk_read_time</name></name> <operator>=</operator> <name><name>pgBufferUsage</name><operator>.</operator><name>blk_read_time</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>INSTR_TIME_SUBTRACT</name><argument_list>(<argument><expr><name><name>bufusage</name><operator>.</operator><name>blk_read_time</name></name></expr></argument>, <argument><expr><name><name>bufusage_start</name><operator>.</operator><name>blk_read_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>bufusage</name><operator>.</operator><name>blk_write_time</name></name> <operator>=</operator> <name><name>pgBufferUsage</name><operator>.</operator><name>blk_write_time</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>INSTR_TIME_SUBTRACT</name><argument_list>(<argument><expr><name><name>bufusage</name><operator>.</operator><name>blk_write_time</name></name></expr></argument>, <argument><expr><name><name>bufusage_start</name><operator>.</operator><name>blk_write_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>pgss_store</name><argument_list>(<argument><expr><name>queryString</name></expr></argument>,
				   <argument><expr><literal type="number">0</literal></expr></argument>,			<comment type="block">/* signal that it's a utility stmt */</comment>
				   <argument><expr><name><name>pstmt</name><operator>-&gt;</operator><name>stmt_location</name></name></expr></argument>,
				   <argument><expr><name><name>pstmt</name><operator>-&gt;</operator><name>stmt_len</name></name></expr></argument>,
				   <argument><expr><call><name>INSTR_TIME_GET_MILLISEC</name><argument_list>(<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr></argument>,
				   <argument><expr><name>rows</name></expr></argument>,
				   <argument><expr><operator>&amp;</operator><name>bufusage</name></expr></argument>,
				   <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>prev_ProcessUtility</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>prev_ProcessUtility</name><argument_list>(<argument><expr><name>pstmt</name></expr></argument>, <argument><expr><name>queryString</name></expr></argument>,
								<argument><expr><name>context</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>queryEnv</name></expr></argument>,
								<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>completionTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>standard_ProcessUtility</name><argument_list>(<argument><expr><name>pstmt</name></expr></argument>, <argument><expr><name>queryString</name></expr></argument>,
									<argument><expr><name>context</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>queryEnv</name></expr></argument>,
									<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>completionTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Given an arbitrarily long query string, produce a hash for the purposes of
 * identifying the query, without normalizing constants.  Used when hashing
 * utility statements.
 */</comment>
<function><type><specifier>static</specifier> <name>uint64</name></type>
<name>pgss_hash_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>DatumGetUInt64</name><argument_list>(<argument><expr><call><name>hash_any_extended</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>str</name></expr></argument>,
											<argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Store some statistics for a statement.
 *
 * If queryId is 0 then this is a utility statement and we should compute
 * a suitable queryId internally.
 *
 * If jstate is not NULL then we're trying to create an entry for which
 * we have no statistics as yet; we just want to record the normalized
 * query string.  total_time, rows, bufusage are ignored in this case.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>pgss_store</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>queryId</name></decl></parameter>,
		   <parameter><decl><type><name>int</name></type> <name>query_location</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>query_len</name></decl></parameter>,
		   <parameter><decl><type><name>double</name></type> <name>total_time</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>rows</name></decl></parameter>,
		   <parameter><decl><type><specifier>const</specifier> <name>BufferUsage</name> <modifier>*</modifier></type><name>bufusage</name></decl></parameter>,
		   <parameter><decl><type><name>pgssJumbleState</name> <modifier>*</modifier></type><name>jstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pgssHashKey</name></type> <name>key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pgssEntry</name>  <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>norm_query</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>redacted_query</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>         <name>redacted_query_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>encoding</name> <init>= <expr><call><name>GetDatabaseEncoding</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>query</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Safety check... */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pgss</name> <operator>||</operator> <operator>!</operator><name>pgss_hash</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Confine our attention to the relevant part of the string, if the query
	 * is a portion of a multi-statement source string.
	 *
	 * First apply starting offset, unless it's -1 (unknown).
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>query_location</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>query_location</name> <operator>&lt;=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>query</name> <operator>+=</operator> <name>query_location</name></expr>;</expr_stmt>
		<comment type="block">/* Length of 0 (or -1) means "rest of string" */</comment>
		<if_stmt><if>if <condition>(<expr><name>query_len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>query_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>query_len</name> <operator>&lt;=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* If query location is unknown, distrust query_len as well */</comment>
		<expr_stmt><expr><name>query_location</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>query_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * Discard leading and trailing whitespace, too.  Use scanner_isspace()
	 * not libc's isspace(), because we want to match the lexer's behavior.
	 */</comment>
	<while>while <condition>(<expr><name>query_len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>scanner_isspace</name><argument_list>(<argument><expr><name><name>query</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>query</name><operator>++</operator></expr><operator>,</operator> <expr><name>query_location</name><operator>++</operator></expr><operator>,</operator> <expr><name>query_len</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
	<while>while <condition>(<expr><name>query_len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>scanner_isspace</name><argument_list>(<argument><expr><name><name>query</name><index>[<expr><name>query_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>query_len</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

	<comment type="block">/* Use the redacted query for checking purposes. */</comment>
	<expr_stmt><expr><name>redacted_query</name> <operator>=</operator> <call><name>pnstrdup</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>query_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>redacted_query</name> <operator>=</operator> <call><name>RedactPasswordIfExists</name><argument_list>(<argument><expr><name>redacted_query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>redacted_query_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>redacted_query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * For utility statements, we just hash the query string to get an ID.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>queryId</name> <operator>==</operator> <call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>queryId</name> <operator>=</operator> <call><name>pgss_hash_string</name><argument_list>(<argument><expr><name>redacted_query</name></expr></argument>, <argument><expr><name>redacted_query_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Set up key for hashtable search */</comment>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>userid</name></name> <operator>=</operator> <call><name>GetUserId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>dbid</name></name> <operator>=</operator> <name>MyDatabaseId</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>queryid</name></name> <operator>=</operator> <name>queryId</name></expr>;</expr_stmt>

	<comment type="block">/* Lookup the hash table entry with shared lock. */</comment>
	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name><name>pgss</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>(</operator><name>pgssEntry</name> <operator>*</operator><operator>)</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>pgss_hash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>HASH_FIND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Create new entry, if not present */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>entry</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Size</name></type>		<name>query_offset</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>gc_count</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>stored</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>do_gc</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * Create a new, normalized query string if caller asked.  We don't
		 * need to hold the lock while doing this work.  (Note: in any case,
		 * it's possible that someone else creates a duplicate hashtable entry
		 * in the interval where we don't hold the lock below.  That case is
		 * handled by entry_alloc.)
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>jstate</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name><name>pgss</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>norm_query</name> <operator>=</operator> <call><name>generate_normalized_query</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><name>redacted_query</name></expr></argument>,
												   <argument><expr><name>query_location</name></expr></argument>,
												   <argument><expr><operator>&amp;</operator><name>redacted_query_len</name></expr></argument>,
												   <argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name><name>pgss</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Append new query text to file with only shared lock held */</comment>
		<expr_stmt><expr><name>stored</name> <operator>=</operator> <call><name>qtext_store</name><argument_list>(<argument><expr><ternary><condition><expr><name>norm_query</name></expr> ?</condition><then> <expr><name>norm_query</name></expr> </then><else>: <expr><name>redacted_query</name></expr></else></ternary></expr></argument>, <argument><expr><name>redacted_query_len</name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name>query_offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gc_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Determine whether we need to garbage collect external query texts
		 * while the shared lock is still held.  This micro-optimization
		 * avoids taking the time to decide this while holding exclusive lock.
		 */</comment>
		<expr_stmt><expr><name>do_gc</name> <operator>=</operator> <call><name>need_gc_qtexts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Need exclusive lock to make a new hashtable entry - promote */</comment>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name><name>pgss</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name><name>pgss</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * A garbage collection may have occurred while we weren't holding the
		 * lock.  In the unlikely event that this happens, the query text we
		 * stored above will have been garbage collected, so write it again.
		 * This should be infrequent enough that doing it while holding
		 * exclusive lock isn't a performance problem.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stored</name> <operator>||</operator> <name><name>pgss</name><operator>-&gt;</operator><name>gc_count</name></name> <operator>!=</operator> <name>gc_count</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>stored</name> <operator>=</operator> <call><name>qtext_store</name><argument_list>(<argument><expr><ternary><condition><expr><name>norm_query</name></expr> ?</condition><then> <expr><name>norm_query</name></expr> </then><else>: <expr><name>redacted_query</name></expr></else></ternary></expr></argument>, <argument><expr><name>redacted_query_len</name></expr></argument>,
								 <argument><expr><operator>&amp;</operator><name>query_offset</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* If we failed to write to the text file, give up */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>stored</name></expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

		<comment type="block">/* OK to create a new hashtable entry */</comment>
		<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>entry_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>query_offset</name></expr></argument>, <argument><expr><name>redacted_query_len</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>,
							<argument><expr><name>jstate</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* If needed, perform garbage collection while exclusive lock held */</comment>
		<if_stmt><if>if <condition>(<expr><name>do_gc</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>gc_qtexts</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Increment the counts, except when jstate is not NULL */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>jstate</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Grab the spinlock while updating the counters (see comment about
		 * locking rules at the head of the file)
		 */</comment>
		<decl_stmt><decl><type><specifier>volatile</specifier> <name>pgssEntry</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><specifier>volatile</specifier> <name>pgssEntry</name> <operator>*</operator><operator>)</operator> <name>entry</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* "Unstick" entry if it was previously sticky */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>counters</name><operator>.</operator><name>calls</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>counters</name><operator>.</operator><name>usage</name></name> <operator>=</operator> <name>USAGE_INIT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>counters</name><operator>.</operator><name>calls</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>counters</name><operator>.</operator><name>total_time</name></name> <operator>+=</operator> <name>total_time</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>counters</name><operator>.</operator><name>calls</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>counters</name><operator>.</operator><name>min_time</name></name> <operator>=</operator> <name>total_time</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>counters</name><operator>.</operator><name>max_time</name></name> <operator>=</operator> <name>total_time</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>counters</name><operator>.</operator><name>mean_time</name></name> <operator>=</operator> <name>total_time</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/*
			 * Welford's method for accurately computing variance. See
			 * &lt;http://www.johndcook.com/blog/standard_deviation/&gt;
			 */</comment>
			<decl_stmt><decl><type><name>double</name></type>		<name>old_mean</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>counters</name><operator>.</operator><name>mean_time</name></name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>counters</name><operator>.</operator><name>mean_time</name></name> <operator>+=</operator>
				<operator>(</operator><name>total_time</name> <operator>-</operator> <name>old_mean</name><operator>)</operator> <operator>/</operator> <name><name>e</name><operator>-&gt;</operator><name>counters</name><operator>.</operator><name>calls</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>counters</name><operator>.</operator><name>sum_var_time</name></name> <operator>+=</operator>
				<operator>(</operator><name>total_time</name> <operator>-</operator> <name>old_mean</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>total_time</name> <operator>-</operator> <name><name>e</name><operator>-&gt;</operator><name>counters</name><operator>.</operator><name>mean_time</name></name><operator>)</operator></expr>;</expr_stmt>

			<comment type="block">/* calculate min and max time */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>counters</name><operator>.</operator><name>min_time</name></name> <operator>&gt;</operator> <name>total_time</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>counters</name><operator>.</operator><name>min_time</name></name> <operator>=</operator> <name>total_time</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>counters</name><operator>.</operator><name>max_time</name></name> <operator>&lt;</operator> <name>total_time</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>counters</name><operator>.</operator><name>max_time</name></name> <operator>=</operator> <name>total_time</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>counters</name><operator>.</operator><name>rows</name></name> <operator>+=</operator> <name>rows</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>counters</name><operator>.</operator><name>shared_blks_hit</name></name> <operator>+=</operator> <name><name>bufusage</name><operator>-&gt;</operator><name>shared_blks_hit</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>counters</name><operator>.</operator><name>shared_blks_read</name></name> <operator>+=</operator> <name><name>bufusage</name><operator>-&gt;</operator><name>shared_blks_read</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>counters</name><operator>.</operator><name>shared_blks_dirtied</name></name> <operator>+=</operator> <name><name>bufusage</name><operator>-&gt;</operator><name>shared_blks_dirtied</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>counters</name><operator>.</operator><name>shared_blks_written</name></name> <operator>+=</operator> <name><name>bufusage</name><operator>-&gt;</operator><name>shared_blks_written</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>counters</name><operator>.</operator><name>local_blks_hit</name></name> <operator>+=</operator> <name><name>bufusage</name><operator>-&gt;</operator><name>local_blks_hit</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>counters</name><operator>.</operator><name>local_blks_read</name></name> <operator>+=</operator> <name><name>bufusage</name><operator>-&gt;</operator><name>local_blks_read</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>counters</name><operator>.</operator><name>local_blks_dirtied</name></name> <operator>+=</operator> <name><name>bufusage</name><operator>-&gt;</operator><name>local_blks_dirtied</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>counters</name><operator>.</operator><name>local_blks_written</name></name> <operator>+=</operator> <name><name>bufusage</name><operator>-&gt;</operator><name>local_blks_written</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>counters</name><operator>.</operator><name>temp_blks_read</name></name> <operator>+=</operator> <name><name>bufusage</name><operator>-&gt;</operator><name>temp_blks_read</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>counters</name><operator>.</operator><name>temp_blks_written</name></name> <operator>+=</operator> <name><name>bufusage</name><operator>-&gt;</operator><name>temp_blks_written</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>counters</name><operator>.</operator><name>blk_read_time</name></name> <operator>+=</operator> <call><name>INSTR_TIME_GET_MILLISEC</name><argument_list>(<argument><expr><name><name>bufusage</name><operator>-&gt;</operator><name>blk_read_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>counters</name><operator>.</operator><name>blk_write_time</name></name> <operator>+=</operator> <call><name>INSTR_TIME_GET_MILLISEC</name><argument_list>(<argument><expr><name><name>bufusage</name><operator>-&gt;</operator><name>blk_write_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>counters</name><operator>.</operator><name>usage</name></name> <operator>+=</operator> <call><name>USAGE_EXEC</name><argument_list>(<argument><expr><name>total_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<label><name>done</name>:</label>
	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name><name>pgss</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* We postpone this clean-up until we're out of the lock */</comment>
	<if_stmt><if>if <condition>(<expr><name>norm_query</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>norm_query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Reset all statement statistics.
 */</comment>
<function><type><name>Datum</name></type>
<name>pg_stat_statements_reset</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pgss</name> <operator>||</operator> <operator>!</operator><name>pgss_hash</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OBJECT_NOT_IN_PREREQUISITE_STATE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"pg_stat_statements must be loaded via shared_preload_libraries"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>entry_reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Number of output arguments (columns) for various API versions */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PG_STAT_STATEMENTS_COLS_V1_0</name></cpp:macro>	<cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PG_STAT_STATEMENTS_COLS_V1_1</name></cpp:macro>	<cpp:value>18</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PG_STAT_STATEMENTS_COLS_V1_2</name></cpp:macro>	<cpp:value>19</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PG_STAT_STATEMENTS_COLS_V1_3</name></cpp:macro>	<cpp:value>23</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PG_STAT_STATEMENTS_COLS</name></cpp:macro>			<cpp:value>23</cpp:value></cpp:define>	<comment type="block">/* maximum of above */</comment>

<comment type="block">/*
 * Retrieve statement statistics.
 *
 * The SQL API of this function has changed multiple times, and will likely
 * do so again in future.  To support the case where a newer version of this
 * loadable module is being used with an old SQL declaration of the function,
 * we continue to support the older API versions.  For 1.2 and later, the
 * expected API version is identified by embedding it in the C name of the
 * function.  Unfortunately we weren't bright enough to do that for 1.1.
 */</comment>
<function><type><name>Datum</name></type>
<name>pg_stat_statements_1_3</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>showtext</name> <init>= <expr><call><name>PG_GETARG_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pg_stat_statements_internal</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>PGSS_V1_3</name></expr></argument>, <argument><expr><name>showtext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>pg_stat_statements_1_2</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>showtext</name> <init>= <expr><call><name>PG_GETARG_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pg_stat_statements_internal</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>PGSS_V1_2</name></expr></argument>, <argument><expr><name>showtext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Legacy entry point for pg_stat_statements() API versions 1.0 and 1.1.
 * This can be removed someday, perhaps.
 */</comment>
<function><type><name>Datum</name></type>
<name>pg_stat_statements</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* If it's really API 1.1, we'll figure that out below */</comment>
	<expr_stmt><expr><call><name>pg_stat_statements_internal</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>PGSS_V1_0</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Common code for all versions of pg_stat_statements() */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>pg_stat_statements_internal</name><parameter_list>(<parameter><decl><type><name>FunctionCallInfo</name></type> <name>fcinfo</name></decl></parameter>,
							<parameter><decl><type><name>pgssVersion</name></type> <name>api_version</name></decl></parameter>,
							<parameter><decl><type><name>bool</name></type> <name>showtext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ReturnSetInfo</name> <modifier>*</modifier></type><name>rsinfo</name> <init>= <expr><operator>(</operator><name>ReturnSetInfo</name> <operator>*</operator><operator>)</operator> <name><name>fcinfo</name><operator>-&gt;</operator><name>resultinfo</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Tuplestorestate</name> <modifier>*</modifier></type><name>tupstore</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>per_query_ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>userid</name> <init>= <expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>is_allowed_role</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>qbuffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type>		<name>qbuffer_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type>		<name>extent</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>gc_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> <name>hash_seq</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pgssEntry</name>  <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

	<comment type="block">/* Superusers or members of pg_read_all_stats members are allowed */</comment>
	<expr_stmt><expr><name>is_allowed_role</name> <operator>=</operator> <call><name>is_member_of_role</name><argument_list>(<argument><expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>DEFAULT_ROLE_READ_ALL_STATS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* hash table must exist already */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pgss</name> <operator>||</operator> <operator>!</operator><name>pgss_hash</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OBJECT_NOT_IN_PREREQUISITE_STATE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"pg_stat_statements must be loaded via shared_preload_libraries"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* check to see if caller supports us returning a tuplestore */</comment>
	<if_stmt><if>if <condition>(<expr><name>rsinfo</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name>rsinfo</name></expr></argument>, <argument><expr><name>ReturnSetInfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"set-valued function called in context that cannot accept a set"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>rsinfo</name><operator>-&gt;</operator><name>allowedModes</name></name> <operator>&amp;</operator> <name>SFRM_Materialize</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"materialize mode required, but it is not "</literal> \
						<literal type="string">"allowed in this context"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Switch into long-lived context to construct returned data structures */</comment>
	<expr_stmt><expr><name>per_query_ctx</name> <operator>=</operator> <name><name>rsinfo</name><operator>-&gt;</operator><name>econtext</name><operator>-&gt;</operator><name>ecxt_per_query_memory</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>per_query_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Build a tuple descriptor for our result type */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>get_call_result_type</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tupdesc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TYPEFUNC_COMPOSITE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"return type must be a row type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Check we have the expected number of output arguments.  Aside from
	 * being a good safety check, we need a kluge here to detect API version
	 * 1.1, which was wedged into the code in an ill-considered way.
	 */</comment>
	<switch>switch <condition>(<expr><name><name>tupdesc</name><operator>-&gt;</operator><name>natts</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>PG_STAT_STATEMENTS_COLS_V1_0</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>api_version</name> <operator>!=</operator> <name>PGSS_V1_0</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"incorrect number of output arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>PG_STAT_STATEMENTS_COLS_V1_1</name></expr>:</case>
			<comment type="block">/* pg_stat_statements() should have told us 1.0 */</comment>
			<if_stmt><if>if <condition>(<expr><name>api_version</name> <operator>!=</operator> <name>PGSS_V1_0</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"incorrect number of output arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>api_version</name> <operator>=</operator> <name>PGSS_V1_1</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PG_STAT_STATEMENTS_COLS_V1_2</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>api_version</name> <operator>!=</operator> <name>PGSS_V1_2</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"incorrect number of output arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>PG_STAT_STATEMENTS_COLS_V1_3</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>api_version</name> <operator>!=</operator> <name>PGSS_V1_3</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"incorrect number of output arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"incorrect number of output arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<expr_stmt><expr><name>tupstore</name> <operator>=</operator> <call><name>tuplestore_begin_heap</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>work_mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>returnMode</name></name> <operator>=</operator> <name>SFRM_Materialize</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>setResult</name></name> <operator>=</operator> <name>tupstore</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>setDesc</name></name> <operator>=</operator> <name>tupdesc</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * We'd like to load the query text file (if needed) while not holding any
	 * lock on pgss-&gt;lock.  In the worst case we'll have to do this again
	 * after we have the lock, but it's unlikely enough to make this a win
	 * despite occasional duplicated work.  We need to reload if anybody
	 * writes to the file (either a retail qtext_store(), or a garbage
	 * collection) between this point and where we've gotten shared lock.  If
	 * a qtext_store is actually in progress when we look, we might as well
	 * skip the speculative load entirely.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>showtext</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>n_writers</name></decl>;</decl_stmt>

		<comment type="block">/* Take the mutex so we can examine variables */</comment>
		<block>{<block_content>
			<decl_stmt><decl><type><specifier>volatile</specifier> <name>pgssSharedState</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><specifier>volatile</specifier> <name>pgssSharedState</name> <operator>*</operator><operator>)</operator> <name>pgss</name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>extent</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>extent</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>n_writers</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>n_writers</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>gc_count</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>gc_count</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>

		<comment type="block">/* No point in loading file now if there are active writers */</comment>
		<if_stmt><if>if <condition>(<expr><name>n_writers</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>qbuffer</name> <operator>=</operator> <call><name>qtext_load_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>qbuffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Get shared lock, load or reload the query text file if we must, and
	 * iterate over the hashtable entries.
	 *
	 * With a large hash table, we might be holding the lock rather longer
	 * than one could wish.  However, this only blocks creation of new hash
	 * table entries, and the larger the hash table the less likely that is to
	 * be needed.  So we can hope this is okay.  Perhaps someday we'll decide
	 * we need to partition the hash table to limit the time spent holding any
	 * one lock.
	 */</comment>
	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name><name>pgss</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>showtext</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Here it is safe to examine extent and gc_count without taking the
		 * mutex.  Note that although other processes might change
		 * pgss-&gt;extent just after we look at it, the strings they then write
		 * into the file cannot yet be referenced in the hashtable, so we
		 * don't care whether we see them or not.
		 *
		 * If qtext_load_file fails, we just press on; we'll return NULL for
		 * every query text.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>qbuffer</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
			<name><name>pgss</name><operator>-&gt;</operator><name>extent</name></name> <operator>!=</operator> <name>extent</name> <operator>||</operator>
			<name><name>pgss</name><operator>-&gt;</operator><name>gc_count</name></name> <operator>!=</operator> <name>gc_count</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>qbuffer</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>qbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>qbuffer</name> <operator>=</operator> <call><name>qtext_load_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>qbuffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_seq</name></expr></argument>, <argument><expr><name>pgss_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>entry</name> <operator>=</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_seq</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Datum</name></type>		<name><name>values</name><index>[<expr><name>PG_STAT_STATEMENTS_COLS</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name><name>nulls</name><index>[<expr><name>PG_STAT_STATEMENTS_COLS</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Counters</name></type>	<name>tmp</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>double</name></type>		<name>stddev</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int64</name></type>		<name>queryid</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>queryid</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>nulls</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nulls</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>userid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>dbid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>is_allowed_role</name> <operator>||</operator> <name><name>entry</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>userid</name></name> <operator>==</operator> <name>userid</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>api_version</name> <operator>&gt;=</operator> <name>PGSS_V1_2</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatumFast</name><argument_list>(<argument><expr><name>queryid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>showtext</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>qstr</name> <init>= <expr><call><name>qtext_fetch</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>query_offset</name></name></expr></argument>,
											   <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>query_len</name></name></expr></argument>,
											   <argument><expr><name>qbuffer</name></expr></argument>,
											   <argument><expr><name>qbuffer_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><name>qstr</name></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>enc</name></decl>;</decl_stmt>

					<expr_stmt><expr><name>enc</name> <operator>=</operator> <call><name>pg_any_to_server</name><argument_list>(<argument><expr><name>qstr</name></expr></argument>,
										   <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>query_len</name></name></expr></argument>,
										   <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<if_stmt><if>if <condition>(<expr><name>enc</name> <operator>!=</operator> <name>qstr</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<comment type="block">/* Just return a null if we fail to find the text */</comment>
					<expr_stmt><expr><name><name>nulls</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/* Query text not requested */</comment>
				<expr_stmt><expr><name><name>nulls</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* Don't show queryid */</comment>
			<if_stmt><if>if <condition>(<expr><name>api_version</name> <operator>&gt;=</operator> <name>PGSS_V1_2</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>nulls</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="block">/*
			 * Don't show query text, but hint as to the reason for not doing
			 * so if it was requested
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>showtext</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><literal type="string">"&lt;insufficient privilege&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>nulls</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="block">/* copy counters to a local variable to keep locking time short */</comment>
		<block>{<block_content>
			<decl_stmt><decl><type><specifier>volatile</specifier> <name>pgssEntry</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><specifier>volatile</specifier> <name>pgssEntry</name> <operator>*</operator><operator>)</operator> <name>entry</name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>e</name><operator>-&gt;</operator><name>counters</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>

		<comment type="block">/* Skip entry if unexecuted (ie, it's a pending "sticky" entry) */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>.</operator><name>calls</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatumFast</name><argument_list>(<argument><expr><name><name>tmp</name><operator>.</operator><name>calls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Float8GetDatumFast</name><argument_list>(<argument><expr><name><name>tmp</name><operator>.</operator><name>total_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>api_version</name> <operator>&gt;=</operator> <name>PGSS_V1_3</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Float8GetDatumFast</name><argument_list>(<argument><expr><name><name>tmp</name><operator>.</operator><name>min_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Float8GetDatumFast</name><argument_list>(<argument><expr><name><name>tmp</name><operator>.</operator><name>max_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Float8GetDatumFast</name><argument_list>(<argument><expr><name><name>tmp</name><operator>.</operator><name>mean_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * Note we are calculating the population variance here, not the
			 * sample variance, as we have data for the whole population, so
			 * Bessel's correction is not used, and we don't divide by
			 * tmp.calls - 1.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>.</operator><name>calls</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>stddev</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name><name>tmp</name><operator>.</operator><name>sum_var_time</name></name> <operator>/</operator> <name><name>tmp</name><operator>.</operator><name>calls</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>stddev</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Float8GetDatumFast</name><argument_list>(<argument><expr><name>stddev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatumFast</name><argument_list>(<argument><expr><name><name>tmp</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatumFast</name><argument_list>(<argument><expr><name><name>tmp</name><operator>.</operator><name>shared_blks_hit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatumFast</name><argument_list>(<argument><expr><name><name>tmp</name><operator>.</operator><name>shared_blks_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>api_version</name> <operator>&gt;=</operator> <name>PGSS_V1_1</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatumFast</name><argument_list>(<argument><expr><name><name>tmp</name><operator>.</operator><name>shared_blks_dirtied</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatumFast</name><argument_list>(<argument><expr><name><name>tmp</name><operator>.</operator><name>shared_blks_written</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatumFast</name><argument_list>(<argument><expr><name><name>tmp</name><operator>.</operator><name>local_blks_hit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatumFast</name><argument_list>(<argument><expr><name><name>tmp</name><operator>.</operator><name>local_blks_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>api_version</name> <operator>&gt;=</operator> <name>PGSS_V1_1</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatumFast</name><argument_list>(<argument><expr><name><name>tmp</name><operator>.</operator><name>local_blks_dirtied</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatumFast</name><argument_list>(<argument><expr><name><name>tmp</name><operator>.</operator><name>local_blks_written</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatumFast</name><argument_list>(<argument><expr><name><name>tmp</name><operator>.</operator><name>temp_blks_read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatumFast</name><argument_list>(<argument><expr><name><name>tmp</name><operator>.</operator><name>temp_blks_written</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>api_version</name> <operator>&gt;=</operator> <name>PGSS_V1_1</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Float8GetDatumFast</name><argument_list>(<argument><expr><name><name>tmp</name><operator>.</operator><name>blk_read_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>values</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>Float8GetDatumFast</name><argument_list>(<argument><expr><name><name>tmp</name><operator>.</operator><name>blk_write_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>i</name> <operator>==</operator> <operator>(</operator><ternary><condition><expr><name>api_version</name> <operator>==</operator> <name>PGSS_V1_0</name></expr> ?</condition><then> <expr><name>PG_STAT_STATEMENTS_COLS_V1_0</name></expr> </then><else>:
					 <expr><ternary><condition><expr><name>api_version</name> <operator>==</operator> <name>PGSS_V1_1</name></expr> ?</condition><then> <expr><name>PG_STAT_STATEMENTS_COLS_V1_1</name></expr> </then><else>:
					 <expr><ternary><condition><expr><name>api_version</name> <operator>==</operator> <name>PGSS_V1_2</name></expr> ?</condition><then> <expr><name>PG_STAT_STATEMENTS_COLS_V1_2</name></expr> </then><else>:
					 <expr><ternary><condition><expr><name>api_version</name> <operator>==</operator> <name>PGSS_V1_3</name></expr> ?</condition><then> <expr><name>PG_STAT_STATEMENTS_COLS_V1_3</name></expr> </then><else>:
					 <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary> <comment type="block">/* fail if you forget to update this assert */</comment> <operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>tuplestore_putvalues</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/* clean up and return the tuplestore */</comment>
	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name><name>pgss</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>qbuffer</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>qbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>tuplestore_donestoring</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Estimate shared memory space needed.
 */</comment>
<function><type><specifier>static</specifier> <name>Size</name></type>
<name>pgss_memsize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type>		<name>size</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pgssSharedState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>hash_estimate_size</name><argument_list>(<argument><expr><name>pgss_max</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pgssEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Allocate a new hashtable entry.
 * caller must hold an exclusive lock on pgss-&gt;lock
 *
 * "query" need not be null-terminated; we rely on query_len instead
 *
 * If "sticky" is true, make the new entry artificially sticky so that it will
 * probably still be there when the query finishes execution.  We do this by
 * giving it a median usage value rather than the normal value.  (Strictly
 * speaking, query strings are normalized on a best effort basis, though it
 * would be difficult to demonstrate this even under artificial conditions.)
 *
 * Note: despite needing exclusive lock, it's not an error for the target
 * entry to already exist.  This is because pgss_store releases and
 * reacquires lock after failing to find a match; so someone else could
 * have made the entry while we waited to get exclusive lock.
 */</comment>
<function><type><specifier>static</specifier> <name>pgssEntry</name> <modifier>*</modifier></type>
<name>entry_alloc</name><parameter_list>(<parameter><decl><type><name>pgssHashKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>query_offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>query_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encoding</name></decl></parameter>,
			<parameter><decl><type><name>bool</name></type> <name>sticky</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pgssEntry</name>  <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found</name></decl>;</decl_stmt>

	<comment type="block">/* Make space if needed */</comment>
	<while>while <condition>(<expr><call><name>hash_get_num_entries</name><argument_list>(<argument><expr><name>pgss_hash</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>pgss_max</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>entry_dealloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></while>

	<comment type="block">/* Find or create an entry with desired hash code */</comment>
	<expr_stmt><expr><name>entry</name> <operator>=</operator> <operator>(</operator><name>pgssEntry</name> <operator>*</operator><operator>)</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>pgss_hash</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>HASH_ENTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* New entry, initialize it */</comment>

		<comment type="block">/* reset the statistics */</comment>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>counters</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Counters</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* set the appropriate initial usage count */</comment>
		<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>counters</name><operator>.</operator><name>usage</name></name> <operator>=</operator> <ternary><condition><expr><name>sticky</name></expr> ?</condition><then> <expr><name><name>pgss</name><operator>-&gt;</operator><name>cur_median_usage</name></name></expr> </then><else>: <expr><name>USAGE_INIT</name></expr></else></ternary></expr>;</expr_stmt>
		<comment type="block">/* re-initialize the mutex each time ... we assume no one using it */</comment>
		<expr_stmt><expr><call><name>SpinLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* ... and don't forget the query text metadata */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>query_len</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>query_offset</name></name> <operator>=</operator> <name>query_offset</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>query_len</name></name> <operator>=</operator> <name>query_len</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>encoding</name></name> <operator>=</operator> <name>encoding</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>entry</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * qsort comparator for sorting into increasing usage order
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>entry_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>rhs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>double</name></type>		<name>l_usage</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><name>pgssEntry</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator><operator>)</operator> <name>lhs</name><operator>)</operator><operator>-&gt;</operator><name><name>counters</name><operator>.</operator><name>usage</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type>		<name>r_usage</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><name>pgssEntry</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator><operator>)</operator> <name>rhs</name><operator>)</operator><operator>-&gt;</operator><name><name>counters</name><operator>.</operator><name>usage</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>l_usage</name> <operator>&lt;</operator> <name>r_usage</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>l_usage</name> <operator>&gt;</operator> <name>r_usage</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>+</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Deallocate least-used entries.
 *
 * Caller must hold an exclusive lock on pgss-&gt;lock.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>entry_dealloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> <name>hash_seq</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pgssEntry</name> <modifier>*</modifier><modifier>*</modifier></type><name>entries</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pgssEntry</name>  <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nvictims</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type>		<name>tottextlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nvalidtexts</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Sort entries by usage and deallocate USAGE_DEALLOC_PERCENT of them.
	 * While we're scanning the table, apply the decay factor to the usage
	 * values, and update the mean query length.
	 *
	 * Note that the mean query length is almost immediately obsolete, since
	 * we compute it before not after discarding the least-used entries.
	 * Hopefully, that doesn't affect the mean too much; it doesn't seem worth
	 * making two passes to get a more current result.  Likewise, the new
	 * cur_median_usage includes the entries we're about to zap.
	 */</comment>

	<expr_stmt><expr><name>entries</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><call><name>hash_get_num_entries</name><argument_list>(<argument><expr><name>pgss_hash</name></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pgssEntry</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>tottextlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>nvalidtexts</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_seq</name></expr></argument>, <argument><expr><name>pgss_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>entry</name> <operator>=</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_seq</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>entries</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
		<comment type="block">/* "Sticky" entries get a different usage decay rate. */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>counters</name><operator>.</operator><name>calls</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>counters</name><operator>.</operator><name>usage</name></name> <operator>*=</operator> <name>STICKY_DECREASE_FACTOR</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>counters</name><operator>.</operator><name>usage</name></name> <operator>*=</operator> <name>USAGE_DECREASE_FACTOR</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<comment type="block">/* In the mean length computation, ignore dropped texts. */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>query_len</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>tottextlen</name> <operator>+=</operator> <name><name>entry</name><operator>-&gt;</operator><name>query_len</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>nvalidtexts</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<comment type="block">/* Sort into increasing order by usage */</comment>
	<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pgssEntry</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>entry_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Record the (approximate) median usage */</comment>
	<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>pgss</name><operator>-&gt;</operator><name>cur_median_usage</name></name> <operator>=</operator> <name><name>entries</name><index>[<expr><name>i</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name><name>counters</name><operator>.</operator><name>usage</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<comment type="block">/* Record the mean query length */</comment>
	<if_stmt><if>if <condition>(<expr><name>nvalidtexts</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>pgss</name><operator>-&gt;</operator><name>mean_query_len</name></name> <operator>=</operator> <name>tottextlen</name> <operator>/</operator> <name>nvalidtexts</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>pgss</name><operator>-&gt;</operator><name>mean_query_len</name></name> <operator>=</operator> <name>ASSUMED_LENGTH_INIT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/* Now zap an appropriate fraction of lowest-usage entries */</comment>
	<expr_stmt><expr><name>nvictims</name> <operator>=</operator> <call><name>Max</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>i</name> <operator>*</operator> <name>USAGE_DEALLOC_PERCENT</name> <operator>/</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>nvictims</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>nvictims</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nvictims</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>hash_search</name><argument_list>(<argument><expr><name>pgss_hash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>key</name></expr></argument>, <argument><expr><name>HASH_REMOVE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Given a query string (not necessarily null-terminated), allocate a new
 * entry in the external query text file and store the string there.
 *
 * If successful, returns true, and stores the new entry's offset in the file
 * into *query_offset.  Also, if gc_count isn't NULL, *gc_count is set to the
 * number of garbage collections that have occurred so far.
 *
 * On failure, returns false.
 *
 * At least a shared lock on pgss-&gt;lock must be held by the caller, so as
 * to prevent a concurrent garbage collection.  Share-lock-holding callers
 * should pass a gc_count pointer to obtain the number of garbage collections,
 * so that they can recheck the count after obtaining exclusive lock to
 * detect whether a garbage collection occurred (and removed this entry).
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>qtext_store</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>query_len</name></decl></parameter>,
			<parameter><decl><type><name>Size</name> <modifier>*</modifier></type><name>query_offset</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>gc_count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type>		<name>off</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>fd</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * We use a spinlock to protect extent/n_writers/gc_count, so that
	 * multiple processes may execute this function concurrently.
	 */</comment>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>volatile</specifier> <name>pgssSharedState</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><specifier>volatile</specifier> <name>pgssSharedState</name> <operator>*</operator><operator>)</operator> <name>pgss</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>extent</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>extent</name></name> <operator>+=</operator> <name>query_len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>n_writers</name></name><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>gc_count</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>gc_count</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>gc_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><operator>*</operator><name>query_offset</name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>

	<comment type="block">/* Now write the data into the successfully-reserved part of the file */</comment>
	<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>OpenTransientFile</name><argument_list>(<argument><expr><name>PGSS_TEXT_FILE</name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>PG_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>off</name></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>query_len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>query_len</name></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"\0"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>CloseTransientFile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Mark our write complete */</comment>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>volatile</specifier> <name>pgssSharedState</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><specifier>volatile</specifier> <name>pgssSharedState</name> <operator>*</operator><operator>)</operator> <name>pgss</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>n_writers</name></name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<return>return <expr><name>true</name></expr>;</return>

<label><name>error</name>:</label>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
			 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not write pg_stat_statement file \"%s\": %m"</literal></expr></argument>,
					<argument><expr><name>PGSS_TEXT_FILE</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>CloseTransientFile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Mark our write complete */</comment>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>volatile</specifier> <name>pgssSharedState</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><specifier>volatile</specifier> <name>pgssSharedState</name> <operator>*</operator><operator>)</operator> <name>pgss</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>n_writers</name></name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Read the external query text file into a malloc'd buffer.
 *
 * Returns NULL (without throwing an error) if unable to read, eg
 * file not there or insufficient memory.
 *
 * On success, the buffer size is also returned into *buffer_size.
 *
 * This can be called without any lock on pgss-&gt;lock, but in that case
 * the caller is responsible for verifying that the result is sane.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>qtext_load_file</name><parameter_list>(<parameter><decl><type><name>Size</name> <modifier>*</modifier></type><name>buffer_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>stat</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>OpenTransientFile</name><argument_list>(<argument><expr><name>PGSS_TEXT_FILE</name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>PG_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENOENT</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not read pg_stat_statement file \"%s\": %m"</literal></expr></argument>,
							<argument><expr><name>PGSS_TEXT_FILE</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Get file length */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not stat pg_stat_statement file \"%s\": %m"</literal></expr></argument>,
						<argument><expr><name>PGSS_TEXT_FILE</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CloseTransientFile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Allocate buffer; beware that off_t might be wider than size_t */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>stat</name><operator>.</operator><name>st_size</name></name> <operator>&lt;=</operator> <name>MaxAllocHugeSize</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>stat</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Could not allocate enough memory to read pg_stat_statement file \"%s\"."</literal></expr></argument>,
						   <argument><expr><name>PGSS_TEXT_FILE</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CloseTransientFile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * OK, slurp in the file.  If we get a short read and errno doesn't get
	 * set, the reason is probably that garbage collection truncated the file
	 * since we did the fstat(), so we don't log a complaint --- but we don't
	 * return the data, either, since it's most likely corrupt due to
	 * concurrent writes from garbage collection.
	 */</comment>
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>stat</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>stat</name><operator>.</operator><name>st_size</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>errno</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not read pg_stat_statement file \"%s\": %m"</literal></expr></argument>,
							<argument><expr><name>PGSS_TEXT_FILE</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CloseTransientFile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>CloseTransientFile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>buffer_size</name> <operator>=</operator> <name><name>stat</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>
	<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Locate a query text in the file image previously read by qtext_load_file().
 *
 * We validate the given offset/length, and return NULL if bogus.  Otherwise,
 * the result points to a null-terminated string within the buffer.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>qtext_fetch</name><parameter_list>(<parameter><decl><type><name>Size</name></type> <name>query_offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>query_len</name></decl></parameter>,
			<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>buffer_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* File read failed? */</comment>
	<if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<comment type="block">/* Bogus offset/length? */</comment>
	<if_stmt><if>if <condition>(<expr><name>query_len</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
		<name>query_offset</name> <operator>+</operator> <name>query_len</name> <operator>&gt;=</operator> <name>buffer_size</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<comment type="block">/* As a further sanity check, make sure there's a trailing null */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>buffer</name><index>[<expr><name>query_offset</name> <operator>+</operator> <name>query_len</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<comment type="block">/* Looks OK */</comment>
	<return>return <expr><name>buffer</name> <operator>+</operator> <name>query_offset</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Do we need to garbage-collect the external query text file?
 *
 * Caller should hold at least a shared lock on pgss-&gt;lock.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>need_gc_qtexts</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type>		<name>extent</name></decl>;</decl_stmt>

	<comment type="block">/* Read shared extent pointer */</comment>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>volatile</specifier> <name>pgssSharedState</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><specifier>volatile</specifier> <name>pgssSharedState</name> <operator>*</operator><operator>)</operator> <name>pgss</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>extent</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>extent</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<comment type="block">/* Don't proceed if file does not exceed 512 bytes per possible entry */</comment>
	<if_stmt><if>if <condition>(<expr><name>extent</name> <operator>&lt;</operator> <literal type="number">512</literal> <operator>*</operator> <name>pgss_max</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Don't proceed if file is less than about 50% bloat.  Nothing can or
	 * should be done in the event of unusually large query texts accounting
	 * for file's large size.  We go to the trouble of maintaining the mean
	 * query length in order to prevent garbage collection from thrashing
	 * uselessly.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>extent</name> <operator>&lt;</operator> <name><name>pgss</name><operator>-&gt;</operator><name>mean_query_len</name></name> <operator>*</operator> <name>pgss_max</name> <operator>*</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Garbage-collect orphaned query texts in external file.
 *
 * This won't be called often in the typical case, since it's likely that
 * there won't be too much churn, and besides, a similar compaction process
 * occurs when serializing to disk at shutdown or as part of resetting.
 * Despite this, it seems prudent to plan for the edge case where the file
 * becomes unreasonably large, with no other method of compaction likely to
 * occur in the foreseeable future.
 *
 * The caller must hold an exclusive lock on pgss-&gt;lock.
 *
 * At the first sign of trouble we unlink the query text file to get a clean
 * slate (although existing statistics are retained), rather than risk
 * thrashing by allowing the same problem case to recur indefinitely.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>gc_qtexts</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>qbuffer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type>		<name>qbuffer_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE</name>	   <modifier>*</modifier></type><name>qfile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> <name>hash_seq</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pgssEntry</name>  <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type>		<name>extent</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nentries</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * When called from pgss_store, some other session might have proceeded
	 * with garbage collection in the no-lock-held interim of lock strength
	 * escalation.  Check once more that this is actually necessary.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>need_gc_qtexts</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Load the old texts file.  If we fail (out of memory, for instance),
	 * invalidate query texts.  Hopefully this is rare.  It might seem better
	 * to leave things alone on an OOM failure, but the problem is that the
	 * file is only going to get bigger; hoping for a future non-OOM result is
	 * risky and can easily lead to complete denial of service.
	 */</comment>
	<expr_stmt><expr><name>qbuffer</name> <operator>=</operator> <call><name>qtext_load_file</name><argument_list>(<argument><expr><operator>&amp;</operator><name>qbuffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>qbuffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>gc_fail</name>;</goto></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * We overwrite the query texts file in place, so as to reduce the risk of
	 * an out-of-disk-space failure.  Since the file is guaranteed not to get
	 * larger, this should always work on traditional filesystems; though we
	 * could still lose on copy-on-write filesystems.
	 */</comment>
	<expr_stmt><expr><name>qfile</name> <operator>=</operator> <call><name>AllocateFile</name><argument_list>(<argument><expr><name>PGSS_TEXT_FILE</name></expr></argument>, <argument><expr><name>PG_BINARY_W</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>qfile</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not write pg_stat_statement file \"%s\": %m"</literal></expr></argument>,
						<argument><expr><name>PGSS_TEXT_FILE</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>gc_fail</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>extent</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>nentries</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_seq</name></expr></argument>, <argument><expr><name>pgss_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>entry</name> <operator>=</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_seq</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>query_len</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>query_len</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>qry</name> <init>= <expr><call><name>qtext_fetch</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>query_offset</name></name></expr></argument>,
									  <argument><expr><name>query_len</name></expr></argument>,
									  <argument><expr><name>qbuffer</name></expr></argument>,
									  <argument><expr><name>qbuffer_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>qry</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Trouble ... drop the text */</comment>
			<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>query_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>query_len</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<comment type="block">/* entry will not be counted in mean query length computation */</comment>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><name>qry</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>query_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>qfile</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>query_len</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not write pg_stat_statement file \"%s\": %m"</literal></expr></argument>,
							<argument><expr><name>PGSS_TEXT_FILE</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>hash_seq_term</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>gc_fail</name>;</goto>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>query_offset</name></name> <operator>=</operator> <name>extent</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>extent</name> <operator>+=</operator> <name>query_len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>nentries</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/*
	 * Truncate away any now-unused space.  If this fails for some odd reason,
	 * we log it, but there's no need to fail.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>ftruncate</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>qfile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>extent</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not truncate pg_stat_statement file \"%s\": %m"</literal></expr></argument>,
						<argument><expr><name>PGSS_TEXT_FILE</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>FreeFile</name><argument_list>(<argument><expr><name>qfile</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not write pg_stat_statement file \"%s\": %m"</literal></expr></argument>,
						<argument><expr><name>PGSS_TEXT_FILE</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>qfile</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<goto>goto <name>gc_fail</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"pgss gc of queries file shrunk size from %zu to %zu"</literal></expr></argument>,
		 <argument><expr><name><name>pgss</name><operator>-&gt;</operator><name>extent</name></name></expr></argument>, <argument><expr><name>extent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Reset the shared extent pointer */</comment>
	<expr_stmt><expr><name><name>pgss</name><operator>-&gt;</operator><name>extent</name></name> <operator>=</operator> <name>extent</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Also update the mean query length, to be sure that need_gc_qtexts()
	 * won't still think we have a problem.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>nentries</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>pgss</name><operator>-&gt;</operator><name>mean_query_len</name></name> <operator>=</operator> <name>extent</name> <operator>/</operator> <name>nentries</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>pgss</name><operator>-&gt;</operator><name>mean_query_len</name></name> <operator>=</operator> <name>ASSUMED_LENGTH_INIT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>qbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * OK, count a garbage collection cycle.  (Note: even though we have
	 * exclusive lock on pgss-&gt;lock, we must take pgss-&gt;mutex for this, since
	 * other processes may examine gc_count while holding only the mutex.
	 * Also, we have to advance the count *after* we've rewritten the file,
	 * else other processes might not realize they read a stale file.)
	 */</comment>
	<expr_stmt><expr><call><name>record_gc_qtexts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return;</return>

<label><name>gc_fail</name>:</label>
	<comment type="block">/* clean up resources */</comment>
	<if_stmt><if>if <condition>(<expr><name>qfile</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FreeFile</name><argument_list>(<argument><expr><name>qfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>qbuffer</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>qbuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Since the contents of the external file are now uncertain, mark all
	 * hashtable entries as having invalid texts.
	 */</comment>
	<expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_seq</name></expr></argument>, <argument><expr><name>pgss_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>entry</name> <operator>=</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_seq</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>query_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>query_len</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/*
	 * Destroy the query text file and create a new, empty one
	 */</comment>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>unlink</name><argument_list>(<argument><expr><name>PGSS_TEXT_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>qfile</name> <operator>=</operator> <call><name>AllocateFile</name><argument_list>(<argument><expr><name>PGSS_TEXT_FILE</name></expr></argument>, <argument><expr><name>PG_BINARY_W</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>qfile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not write new pg_stat_statement file \"%s\": %m"</literal></expr></argument>,
						<argument><expr><name>PGSS_TEXT_FILE</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>FreeFile</name><argument_list>(<argument><expr><name>qfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/* Reset the shared extent pointer */</comment>
	<expr_stmt><expr><name><name>pgss</name><operator>-&gt;</operator><name>extent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/* Reset mean_query_len to match the new state */</comment>
	<expr_stmt><expr><name><name>pgss</name><operator>-&gt;</operator><name>mean_query_len</name></name> <operator>=</operator> <name>ASSUMED_LENGTH_INIT</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Bump the GC count even though we failed.
	 *
	 * This is needed to make concurrent readers of file without any lock on
	 * pgss-&gt;lock notice existence of new version of file.  Once readers
	 * subsequently observe a change in GC count with pgss-&gt;lock held, that
	 * forces a safe reopen of file.  Writers also require that we bump here,
	 * of course.  (As required by locking protocol, readers and writers don't
	 * trust earlier file contents until gc_count is found unchanged after
	 * pgss-&gt;lock acquired in shared or exclusive mode respectively.)
	 */</comment>
	<expr_stmt><expr><call><name>record_gc_qtexts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Function that caches environmental variable
 * FLAGS_TEST_yb_lwlock_crash_after_acquire_pg_stat_statements_reset.
 *
 * This avoids the process of checking the value of the environmental variable
 * time and again.
 */</comment>
<function><type><name>bool</name></type>
<name>yb_lwlock_crash_after_acquire_pg_stat_statements_reset</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cached_value</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>cached_value</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>cached_value</name> <operator>=</operator> <call><name>YBCIsEnvVarTrue</name><argument_list>(
		    <argument><expr><literal type="string">"FLAGS_TEST_yb_lwlock_crash_after_acquire_pg_stat_statements_reset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>cached_value</name></expr>;</return>

</block_content>}</block></function>

<comment type="block">/*
 * Release all entries.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>entry_reset</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> <name>hash_seq</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pgssEntry</name>  <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FILE</name>	   <modifier>*</modifier></type><name>qfile</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name><name>pgss</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_seq</name></expr></argument>, <argument><expr><name>pgss_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>entry</name> <operator>=</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_seq</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>hash_search</name><argument_list>(<argument><expr><name>pgss_hash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>HASH_REMOVE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><call><name>yb_lwlock_crash_after_acquire_pg_stat_statements_reset</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<comment type="block">/*
	 * Write new empty query file, perhaps even creating a new one to recover
	 * if the file was missing.
	 */</comment>
	<expr_stmt><expr><name>qfile</name> <operator>=</operator> <call><name>AllocateFile</name><argument_list>(<argument><expr><name>PGSS_TEXT_FILE</name></expr></argument>, <argument><expr><name>PG_BINARY_W</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>qfile</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not create pg_stat_statement file \"%s\": %m"</literal></expr></argument>,
						<argument><expr><name>PGSS_TEXT_FILE</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>done</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* If ftruncate fails, log it, but it's not a fatal problem */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>ftruncate</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>qfile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not truncate pg_stat_statement file \"%s\": %m"</literal></expr></argument>,
						<argument><expr><name>PGSS_TEXT_FILE</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>FreeFile</name><argument_list>(<argument><expr><name>qfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>done</name>:</label>
	<expr_stmt><expr><name><name>pgss</name><operator>-&gt;</operator><name>extent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="block">/* This counts as a query text garbage collection for our purposes */</comment>
	<expr_stmt><expr><call><name>record_gc_qtexts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name><name>pgss</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * AppendJumble: Append a value that is substantive in a given query to
 * the current jumble.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>AppendJumble</name><parameter_list>(<parameter><decl><type><name>pgssJumbleState</name> <modifier>*</modifier></type><name>jstate</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>item</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>jumble</name> <init>= <expr><name><name>jstate</name><operator>-&gt;</operator><name>jumble</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type>		<name>jumble_len</name> <init>= <expr><name><name>jstate</name><operator>-&gt;</operator><name>jumble_len</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Whenever the jumble buffer is full, we hash the current contents and
	 * reset the buffer to contain just that hash value, thus relying on the
	 * hash to summarize everything so far.
	 */</comment>
	<while>while <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Size</name></type>		<name>part_size</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>jumble_len</name> <operator>&gt;=</operator> <name>JUMBLE_SIZE</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>uint64</name></type>		<name>start_hash</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>start_hash</name> <operator>=</operator> <call><name>DatumGetUInt64</name><argument_list>(<argument><expr><call><name>hash_any_extended</name><argument_list>(<argument><expr><name>jumble</name></expr></argument>,
														  <argument><expr><name>JUMBLE_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>jumble</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start_hash</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>start_hash</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>jumble_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>start_hash</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>part_size</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>JUMBLE_SIZE</name> <operator>-</operator> <name>jumble_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>jumble</name> <operator>+</operator> <name>jumble_len</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>part_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>jumble_len</name> <operator>+=</operator> <name>part_size</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>item</name> <operator>+=</operator> <name>part_size</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>part_size</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name><name>jstate</name><operator>-&gt;</operator><name>jumble_len</name></name> <operator>=</operator> <name>jumble_len</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Wrappers around AppendJumble to encapsulate details of serialization
 * of individual local variable elements.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APP_JUMB</name><parameter_list>(<parameter><type><name>item</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>AppendJumble(jstate, (const unsigned char *) &amp;(item), sizeof(item))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APP_JUMB_STRING</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>AppendJumble(jstate, (const unsigned char *) (str), strlen(str) + 1)</cpp:value></cpp:define>

<comment type="block">/*
 * JumbleQuery: Selectively serialize the query tree, appending significant
 * data to the "query jumble" while ignoring nonsignificant data.
 *
 * Rule of thumb for what to include is that we should ignore anything not
 * semantically significant (such as alias names) as well as anything that can
 * be deduced from child nodes (else we'd just be double-hashing that piece
 * of information).
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>JumbleQuery</name><parameter_list>(<parameter><decl><type><name>pgssJumbleState</name> <modifier>*</modifier></type><name>jstate</name></decl></parameter>, <parameter><decl><type><name>Query</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>IsA</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>Query</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>utilityStmt</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>commandType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* resultRelation is usually predictable from commandType */</comment>
	<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>query</name><operator>-&gt;</operator><name>cteList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>JumbleRangeTable</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>rtable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>query</name><operator>-&gt;</operator><name>jointree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>query</name><operator>-&gt;</operator><name>targetList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>query</name><operator>-&gt;</operator><name>onConflict</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>query</name><operator>-&gt;</operator><name>returningList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>query</name><operator>-&gt;</operator><name>groupClause</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>query</name><operator>-&gt;</operator><name>groupingSets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>havingQual</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>query</name><operator>-&gt;</operator><name>windowClause</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>query</name><operator>-&gt;</operator><name>distinctClause</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>query</name><operator>-&gt;</operator><name>sortClause</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>limitOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>limitCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* we ignore rowMarks */</comment>
	<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><name><name>query</name><operator>-&gt;</operator><name>setOperations</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Jumble a range table
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>JumbleRangeTable</name><parameter_list>(<parameter><decl><type><name>pgssJumbleState</name> <modifier>*</modifier></type><name>jstate</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>rtable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>rtable</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>rte</name> <init>= <expr><call><name>lfirst_node</name><argument_list>(<argument><expr><name>RangeTblEntry</name></expr></argument>, <argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>rte</name><operator>-&gt;</operator><name>rtekind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<switch>switch <condition>(<expr><name><name>rte</name><operator>-&gt;</operator><name>rtekind</name></name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>RTE_RELATION</name></expr>:</case>
				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>rte</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>rte</name><operator>-&gt;</operator><name>tablesample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>RTE_SUBQUERY</name></expr>:</case>
				<expr_stmt><expr><call><name>JumbleQuery</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><name><name>rte</name><operator>-&gt;</operator><name>subquery</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>RTE_JOIN</name></expr>:</case>
				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>rte</name><operator>-&gt;</operator><name>jointype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>RTE_FUNCTION</name></expr>:</case>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>rte</name><operator>-&gt;</operator><name>functions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>RTE_TABLEFUNC</name></expr>:</case>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>rte</name><operator>-&gt;</operator><name>tablefunc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>RTE_VALUES</name></expr>:</case>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>rte</name><operator>-&gt;</operator><name>values_lists</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>RTE_CTE</name></expr>:</case>

				<comment type="block">/*
				 * Depending on the CTE name here isn't ideal, but it's the
				 * only info we have to identify the referenced WITH item.
				 */</comment>
				<expr_stmt><expr><call><name>APP_JUMB_STRING</name><argument_list>(<argument><expr><name><name>rte</name><operator>-&gt;</operator><name>ctename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>rte</name><operator>-&gt;</operator><name>ctelevelsup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>RTE_NAMEDTUPLESTORE</name></expr>:</case>
				<expr_stmt><expr><call><name>APP_JUMB_STRING</name><argument_list>(<argument><expr><name><name>rte</name><operator>-&gt;</operator><name>enrname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized RTE kind: %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>rte</name><operator>-&gt;</operator><name>rtekind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block>
</block_content>}</block></function>

<comment type="block">/*
 * Jumble an expression tree
 *
 * In general this function should handle all the same node types that
 * expression_tree_walker() does, and therefore it's coded to be as parallel
 * to that function as possible.  However, since we are only invoked on
 * queries immediately post-parse-analysis, we need not handle node types
 * that only appear in planning.
 *
 * Note: the reason we don't simply use expression_tree_walker() is that the
 * point of that function is to support tree walkers that don't care about
 * most tree node types, but here we care about all types.  We should complain
 * about any unrecognized node type.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>JumbleExpr</name><parameter_list>(<parameter><decl><type><name>pgssJumbleState</name> <modifier>*</modifier></type><name>jstate</name></decl></parameter>, <parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>temp</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Guard against stack overflow due to overly complex expressions */</comment>
	<expr_stmt><expr><call><name>check_stack_depth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * We always emit the node's NodeTag, then any additional fields that are
	 * considered significant, and then we recurse to any child nodes.
	 */</comment>
	<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><call><name>nodeTag</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>T_Var</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Var</name>		   <modifier>*</modifier></type><name>var</name> <init>= <expr><operator>(</operator><name>Var</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>varno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>varattno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>varlevelsup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_Const</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Const</name>	   <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>(</operator><name>Const</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<comment type="block">/* We jumble only the constant's type, not its value */</comment>
				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>consttype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* Also, record its parse location for query normalization */</comment>
				<expr_stmt><expr><call><name>RecordConstLocation</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>location</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_Param</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Param</name>	   <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Param</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>paramkind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>paramid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>paramtype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* Also, track the highest external Param id */</comment>
				<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>paramkind</name></name> <operator>==</operator> <name>PARAM_EXTERN</name> <operator>&amp;&amp;</operator>
					<name><name>p</name><operator>-&gt;</operator><name>paramid</name></name> <operator>&gt;</operator> <name><name>jstate</name><operator>-&gt;</operator><name>highest_extern_param_id</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>jstate</name><operator>-&gt;</operator><name>highest_extern_param_id</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>paramid</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_Aggref</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Aggref</name>	   <modifier>*</modifier></type><name>expr</name> <init>= <expr><operator>(</operator><name>Aggref</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>expr</name><operator>-&gt;</operator><name>aggfnoid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>expr</name><operator>-&gt;</operator><name>aggdirectargs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>expr</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>expr</name><operator>-&gt;</operator><name>aggorder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>expr</name><operator>-&gt;</operator><name>aggdistinct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>expr</name><operator>-&gt;</operator><name>aggfilter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_GroupingFunc</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>GroupingFunc</name> <modifier>*</modifier></type><name>grpnode</name> <init>= <expr><operator>(</operator><name>GroupingFunc</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>grpnode</name><operator>-&gt;</operator><name>refs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_WindowFunc</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>WindowFunc</name> <modifier>*</modifier></type><name>expr</name> <init>= <expr><operator>(</operator><name>WindowFunc</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>expr</name><operator>-&gt;</operator><name>winfnoid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>expr</name><operator>-&gt;</operator><name>winref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>expr</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>expr</name><operator>-&gt;</operator><name>aggfilter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_ArrayRef</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>ArrayRef</name>   <modifier>*</modifier></type><name>aref</name> <init>= <expr><operator>(</operator><name>ArrayRef</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>aref</name><operator>-&gt;</operator><name>refupperindexpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>aref</name><operator>-&gt;</operator><name>reflowerindexpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>aref</name><operator>-&gt;</operator><name>refexpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>aref</name><operator>-&gt;</operator><name>refassgnexpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_FuncExpr</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>FuncExpr</name>   <modifier>*</modifier></type><name>expr</name> <init>= <expr><operator>(</operator><name>FuncExpr</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>expr</name><operator>-&gt;</operator><name>funcid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>expr</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_NamedArgExpr</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>NamedArgExpr</name> <modifier>*</modifier></type><name>nae</name> <init>= <expr><operator>(</operator><name>NamedArgExpr</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>nae</name><operator>-&gt;</operator><name>argnumber</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>nae</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_OpExpr</name></expr>:</case>
		<case>case <expr><name>T_DistinctExpr</name></expr>:</case>	<comment type="block">/* struct-equivalent to OpExpr */</comment>
		<case>case <expr><name>T_NullIfExpr</name></expr>:</case>		<comment type="block">/* struct-equivalent to OpExpr */</comment>
			<block>{<block_content>
				<decl_stmt><decl><type><name>OpExpr</name>	   <modifier>*</modifier></type><name>expr</name> <init>= <expr><operator>(</operator><name>OpExpr</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>expr</name><operator>-&gt;</operator><name>opno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>expr</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_ScalarArrayOpExpr</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>ScalarArrayOpExpr</name> <modifier>*</modifier></type><name>expr</name> <init>= <expr><operator>(</operator><name>ScalarArrayOpExpr</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>expr</name><operator>-&gt;</operator><name>opno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>expr</name><operator>-&gt;</operator><name>useOr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>expr</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_BoolExpr</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>BoolExpr</name>   <modifier>*</modifier></type><name>expr</name> <init>= <expr><operator>(</operator><name>BoolExpr</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>expr</name><operator>-&gt;</operator><name>boolop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>expr</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_SubLink</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>SubLink</name>    <modifier>*</modifier></type><name>sublink</name> <init>= <expr><operator>(</operator><name>SubLink</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>sublink</name><operator>-&gt;</operator><name>subLinkType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>sublink</name><operator>-&gt;</operator><name>subLinkId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>sublink</name><operator>-&gt;</operator><name>testexpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleQuery</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><call><name>castNode</name><argument_list>(<argument><expr><name>Query</name></expr></argument>, <argument><expr><name><name>sublink</name><operator>-&gt;</operator><name>subselect</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_FieldSelect</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>FieldSelect</name> <modifier>*</modifier></type><name>fs</name> <init>= <expr><operator>(</operator><name>FieldSelect</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>fs</name><operator>-&gt;</operator><name>fieldnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>fs</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_FieldStore</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>FieldStore</name> <modifier>*</modifier></type><name>fstore</name> <init>= <expr><operator>(</operator><name>FieldStore</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>fstore</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>fstore</name><operator>-&gt;</operator><name>newvals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_RelabelType</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>RelabelType</name> <modifier>*</modifier></type><name>rt</name> <init>= <expr><operator>(</operator><name>RelabelType</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>rt</name><operator>-&gt;</operator><name>resulttype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>rt</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_CoerceViaIO</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>CoerceViaIO</name> <modifier>*</modifier></type><name>cio</name> <init>= <expr><operator>(</operator><name>CoerceViaIO</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>cio</name><operator>-&gt;</operator><name>resulttype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>cio</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_ArrayCoerceExpr</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>ArrayCoerceExpr</name> <modifier>*</modifier></type><name>acexpr</name> <init>= <expr><operator>(</operator><name>ArrayCoerceExpr</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>acexpr</name><operator>-&gt;</operator><name>resulttype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>acexpr</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>acexpr</name><operator>-&gt;</operator><name>elemexpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_ConvertRowtypeExpr</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>ConvertRowtypeExpr</name> <modifier>*</modifier></type><name>crexpr</name> <init>= <expr><operator>(</operator><name>ConvertRowtypeExpr</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>crexpr</name><operator>-&gt;</operator><name>resulttype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>crexpr</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_CollateExpr</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>CollateExpr</name> <modifier>*</modifier></type><name>ce</name> <init>= <expr><operator>(</operator><name>CollateExpr</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>collOid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>ce</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_CaseExpr</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>CaseExpr</name>   <modifier>*</modifier></type><name>caseexpr</name> <init>= <expr><operator>(</operator><name>CaseExpr</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>caseexpr</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<macro><name>foreach</name><argument_list>(<argument>temp</argument>, <argument>caseexpr-&gt;args</argument>)</argument_list></macro>
				<block>{<block_content>
					<decl_stmt><decl><type><name>CaseWhen</name>   <modifier>*</modifier></type><name>when</name> <init>= <expr><call><name>lfirst_node</name><argument_list>(<argument><expr><name>CaseWhen</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>when</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>when</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>caseexpr</name><operator>-&gt;</operator><name>defresult</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_CaseTestExpr</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>CaseTestExpr</name> <modifier>*</modifier></type><name>ct</name> <init>= <expr><operator>(</operator><name>CaseTestExpr</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>ct</name><operator>-&gt;</operator><name>typeId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_ArrayExpr</name></expr>:</case>
			<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>ArrayExpr</name> <operator>*</operator><operator>)</operator> <name>node</name><operator>)</operator><operator>-&gt;</operator><name>elements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_RowExpr</name></expr>:</case>
			<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>RowExpr</name> <operator>*</operator><operator>)</operator> <name>node</name><operator>)</operator><operator>-&gt;</operator><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_RowCompareExpr</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>RowCompareExpr</name> <modifier>*</modifier></type><name>rcexpr</name> <init>= <expr><operator>(</operator><name>RowCompareExpr</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>rcexpr</name><operator>-&gt;</operator><name>rctype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>rcexpr</name><operator>-&gt;</operator><name>largs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>rcexpr</name><operator>-&gt;</operator><name>rargs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_CoalesceExpr</name></expr>:</case>
			<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>CoalesceExpr</name> <operator>*</operator><operator>)</operator> <name>node</name><operator>)</operator><operator>-&gt;</operator><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>T_MinMaxExpr</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>MinMaxExpr</name> <modifier>*</modifier></type><name>mmexpr</name> <init>= <expr><operator>(</operator><name>MinMaxExpr</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>mmexpr</name><operator>-&gt;</operator><name>op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>mmexpr</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_SQLValueFunction</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>SQLValueFunction</name> <modifier>*</modifier></type><name>svf</name> <init>= <expr><operator>(</operator><name>SQLValueFunction</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>svf</name><operator>-&gt;</operator><name>op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="block">/* type is fully determined by op */</comment>
				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>svf</name><operator>-&gt;</operator><name>typmod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_XmlExpr</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>XmlExpr</name>    <modifier>*</modifier></type><name>xexpr</name> <init>= <expr><operator>(</operator><name>XmlExpr</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>xexpr</name><operator>-&gt;</operator><name>op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>xexpr</name><operator>-&gt;</operator><name>named_args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>xexpr</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_NullTest</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>NullTest</name>   <modifier>*</modifier></type><name>nt</name> <init>= <expr><operator>(</operator><name>NullTest</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>nt</name><operator>-&gt;</operator><name>nulltesttype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>nt</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_BooleanTest</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>BooleanTest</name> <modifier>*</modifier></type><name>bt</name> <init>= <expr><operator>(</operator><name>BooleanTest</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>bt</name><operator>-&gt;</operator><name>booltesttype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>bt</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_CoerceToDomain</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>CoerceToDomain</name> <modifier>*</modifier></type><name>cd</name> <init>= <expr><operator>(</operator><name>CoerceToDomain</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>cd</name><operator>-&gt;</operator><name>resulttype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>cd</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_CoerceToDomainValue</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>CoerceToDomainValue</name> <modifier>*</modifier></type><name>cdv</name> <init>= <expr><operator>(</operator><name>CoerceToDomainValue</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>cdv</name><operator>-&gt;</operator><name>typeId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_SetToDefault</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>SetToDefault</name> <modifier>*</modifier></type><name>sd</name> <init>= <expr><operator>(</operator><name>SetToDefault</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>sd</name><operator>-&gt;</operator><name>typeId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_CurrentOfExpr</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>CurrentOfExpr</name> <modifier>*</modifier></type><name>ce</name> <init>= <expr><operator>(</operator><name>CurrentOfExpr</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>cvarno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>ce</name><operator>-&gt;</operator><name>cursor_name</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>APP_JUMB_STRING</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>cursor_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>ce</name><operator>-&gt;</operator><name>cursor_param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_NextValueExpr</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>NextValueExpr</name> <modifier>*</modifier></type><name>nve</name> <init>= <expr><operator>(</operator><name>NextValueExpr</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>nve</name><operator>-&gt;</operator><name>seqid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>nve</name><operator>-&gt;</operator><name>typeId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_InferenceElem</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>InferenceElem</name> <modifier>*</modifier></type><name>ie</name> <init>= <expr><operator>(</operator><name>InferenceElem</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>ie</name><operator>-&gt;</operator><name>infercollid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>ie</name><operator>-&gt;</operator><name>inferopclass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><name><name>ie</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_TargetEntry</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>TargetEntry</name> <modifier>*</modifier></type><name>tle</name> <init>= <expr><operator>(</operator><name>TargetEntry</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>tle</name><operator>-&gt;</operator><name>resno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>tle</name><operator>-&gt;</operator><name>ressortgroupref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>tle</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_RangeTblRef</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>RangeTblRef</name> <modifier>*</modifier></type><name>rtr</name> <init>= <expr><operator>(</operator><name>RangeTblRef</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>rtr</name><operator>-&gt;</operator><name>rtindex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_JoinExpr</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>JoinExpr</name>   <modifier>*</modifier></type><name>join</name> <init>= <expr><operator>(</operator><name>JoinExpr</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>join</name><operator>-&gt;</operator><name>jointype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>join</name><operator>-&gt;</operator><name>isNatural</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>join</name><operator>-&gt;</operator><name>rtindex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><name><name>join</name><operator>-&gt;</operator><name>larg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><name><name>join</name><operator>-&gt;</operator><name>rarg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><name><name>join</name><operator>-&gt;</operator><name>quals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_FromExpr</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>FromExpr</name>   <modifier>*</modifier></type><name>from</name> <init>= <expr><operator>(</operator><name>FromExpr</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>from</name><operator>-&gt;</operator><name>fromlist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><name><name>from</name><operator>-&gt;</operator><name>quals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_OnConflictExpr</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>OnConflictExpr</name> <modifier>*</modifier></type><name>conf</name> <init>= <expr><operator>(</operator><name>OnConflictExpr</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>action</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>conf</name><operator>-&gt;</operator><name>arbiterElems</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>arbiterWhere</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>conf</name><operator>-&gt;</operator><name>onConflictSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>onConflictWhere</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>constraint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>conf</name><operator>-&gt;</operator><name>exclRelIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>conf</name><operator>-&gt;</operator><name>exclRelTlist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_List</name></expr>:</case>
			<macro><name>foreach</name><argument_list>(<argument>temp</argument>, <argument>(List *) node</argument>)</argument_list></macro>
			<block>{<block_content>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_IntList</name></expr>:</case>
			<macro><name>foreach</name><argument_list>(<argument>temp</argument>, <argument>(List *) node</argument>)</argument_list></macro>
			<block>{<block_content>
				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><call><name>lfirst_int</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_SortGroupClause</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>SortGroupClause</name> <modifier>*</modifier></type><name>sgc</name> <init>= <expr><operator>(</operator><name>SortGroupClause</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>sgc</name><operator>-&gt;</operator><name>tleSortGroupRef</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>sgc</name><operator>-&gt;</operator><name>eqop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>sgc</name><operator>-&gt;</operator><name>sortop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>sgc</name><operator>-&gt;</operator><name>nulls_first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_GroupingSet</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>GroupingSet</name> <modifier>*</modifier></type><name>gsnode</name> <init>= <expr><operator>(</operator><name>GroupingSet</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>gsnode</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_WindowClause</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>WindowClause</name> <modifier>*</modifier></type><name>wc</name> <init>= <expr><operator>(</operator><name>WindowClause</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>wc</name><operator>-&gt;</operator><name>winref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>wc</name><operator>-&gt;</operator><name>frameOptions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>wc</name><operator>-&gt;</operator><name>partitionClause</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>wc</name><operator>-&gt;</operator><name>orderClause</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><name><name>wc</name><operator>-&gt;</operator><name>startOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><name><name>wc</name><operator>-&gt;</operator><name>endOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_CommonTableExpr</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>CommonTableExpr</name> <modifier>*</modifier></type><name>cte</name> <init>= <expr><operator>(</operator><name>CommonTableExpr</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<comment type="block">/* we store the string name because RTE_CTE RTEs need it */</comment>
				<expr_stmt><expr><call><name>APP_JUMB_STRING</name><argument_list>(<argument><expr><name><name>cte</name><operator>-&gt;</operator><name>ctename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleQuery</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><call><name>castNode</name><argument_list>(<argument><expr><name>Query</name></expr></argument>, <argument><expr><name><name>cte</name><operator>-&gt;</operator><name>ctequery</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_SetOperationStmt</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>SetOperationStmt</name> <modifier>*</modifier></type><name>setop</name> <init>= <expr><operator>(</operator><name>SetOperationStmt</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>setop</name><operator>-&gt;</operator><name>op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>setop</name><operator>-&gt;</operator><name>all</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><name><name>setop</name><operator>-&gt;</operator><name>larg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><name><name>setop</name><operator>-&gt;</operator><name>rarg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_RangeTblFunction</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>RangeTblFunction</name> <modifier>*</modifier></type><name>rtfunc</name> <init>= <expr><operator>(</operator><name>RangeTblFunction</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><name><name>rtfunc</name><operator>-&gt;</operator><name>funcexpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_TableFunc</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>TableFunc</name>  <modifier>*</modifier></type><name>tablefunc</name> <init>= <expr><operator>(</operator><name>TableFunc</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><name><name>tablefunc</name><operator>-&gt;</operator><name>docexpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><name><name>tablefunc</name><operator>-&gt;</operator><name>rowexpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>tablefunc</name><operator>-&gt;</operator><name>colexprs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>T_TableSampleClause</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>TableSampleClause</name> <modifier>*</modifier></type><name>tsc</name> <init>= <expr><operator>(</operator><name>TableSampleClause</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>APP_JUMB</name><argument_list>(<argument><expr><name><name>tsc</name><operator>-&gt;</operator><name>tsmhandler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>tsc</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>JumbleExpr</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>tsc</name><operator>-&gt;</operator><name>repeatable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
			<break>break;</break>
		<default>default:</default>
			<comment type="block">/* Only a warning, since we can stumble along anyway */</comment>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"unrecognized node type: %d"</literal></expr></argument>,
				 <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>nodeTag</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
 * Record location of constant within query string of query tree
 * that is currently being walked.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>RecordConstLocation</name><parameter_list>(<parameter><decl><type><name>pgssJumbleState</name> <modifier>*</modifier></type><name>jstate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* -1 indicates unknown or undefined location */</comment>
	<if_stmt><if>if <condition>(<expr><name>location</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* enlarge array if needed */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>jstate</name><operator>-&gt;</operator><name>clocations_count</name></name> <operator>&gt;=</operator> <name><name>jstate</name><operator>-&gt;</operator><name>clocations_buf_size</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>jstate</name><operator>-&gt;</operator><name>clocations_buf_size</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>jstate</name><operator>-&gt;</operator><name>clocations</name></name> <operator>=</operator> <operator>(</operator><name>pgssLocationLen</name> <operator>*</operator><operator>)</operator>
				<call><name>repalloc</name><argument_list>(<argument><expr><name><name>jstate</name><operator>-&gt;</operator><name>clocations</name></name></expr></argument>,
						 <argument><expr><name><name>jstate</name><operator>-&gt;</operator><name>clocations_buf_size</name></name> <operator>*</operator>
						 <sizeof>sizeof<argument_list>(<argument><expr><name>pgssLocationLen</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>jstate</name><operator>-&gt;</operator><name>clocations</name><index>[<expr><name><name>jstate</name><operator>-&gt;</operator><name>clocations_count</name></name></expr>]</index></name><operator>.</operator><name>location</name> <operator>=</operator> <name>location</name></expr>;</expr_stmt>
		<comment type="block">/* initialize lengths to -1 to simplify fill_in_constant_lengths */</comment>
		<expr_stmt><expr><name><name>jstate</name><operator>-&gt;</operator><name>clocations</name><index>[<expr><name><name>jstate</name><operator>-&gt;</operator><name>clocations_count</name></name></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>jstate</name><operator>-&gt;</operator><name>clocations_count</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Generate a normalized version of the query string that will be used to
 * represent all similar queries.
 *
 * Note that the normalized representation may well vary depending on
 * just which "equivalent" query is used to create the hashtable entry.
 * We assume this is OK.
 *
 * If query_loc &gt; 0, then "query" has been advanced by that much compared to
 * the original string start, so we need to translate the provided locations
 * to compensate.  (This lets us avoid re-scanning statements before the one
 * of interest, so it's worth doing.)
 *
 * *query_len_p contains the input string length, and is updated with
 * the result string length on exit.  The resulting string might be longer
 * or shorter depending on what happens with replacement of constants.
 *
 * Returns a palloc'd string.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>generate_normalized_query</name><parameter_list>(<parameter><decl><type><name>pgssJumbleState</name> <modifier>*</modifier></type><name>jstate</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>,
						  <parameter><decl><type><name>int</name></type> <name>query_loc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>query_len_p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>encoding</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>norm_query</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>query_len</name> <init>= <expr><operator>*</operator><name>query_len_p</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>norm_query_buflen</name></decl>,	<comment type="block">/* Space allowed for norm_query */</comment>
				<decl><type ref="prev"/><name>len_to_wrt</name></decl>,		<comment type="block">/* Length (in bytes) to write */</comment>
				<decl><type ref="prev"/><name>quer_loc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,	<comment type="block">/* Source query byte location */</comment>
				<decl><type ref="prev"/><name>n_quer_loc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <comment type="block">/* Normalized query byte location */</comment>
				<decl><type ref="prev"/><name>last_off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,	<comment type="block">/* Offset from start for previous tok */</comment>
				<decl><type ref="prev"/><name>last_tok_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>	<comment type="block">/* Length (in bytes) of that tok */</comment>

	<comment type="block">/*
	 * Get constants' lengths (core system only gives us locations).  Note
	 * this also ensures the items are sorted by location.
	 */</comment>
	<expr_stmt><expr><call><name>fill_in_constant_lengths</name><argument_list>(<argument><expr><name>jstate</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>query_loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Allow for $n symbols to be longer than the constants they replace.
	 * Constants must take at least one byte in text form, while a $n symbol
	 * certainly isn't more than 11 bytes, even if n reaches INT_MAX.  We
	 * could refine that limit based on the max value of n for the current
	 * query, but it hardly seems worth any extra effort to do so.
	 */</comment>
	<expr_stmt><expr><name>norm_query_buflen</name> <operator>=</operator> <name>query_len</name> <operator>+</operator> <name><name>jstate</name><operator>-&gt;</operator><name>clocations_count</name></name> <operator>*</operator> <literal type="number">10</literal></expr>;</expr_stmt>

	<comment type="block">/* Allocate result buffer */</comment>
	<expr_stmt><expr><name>norm_query</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>norm_query_buflen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>jstate</name><operator>-&gt;</operator><name>clocations_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>off</name></decl>,		<comment type="block">/* Offset from start for cur tok */</comment>
					<decl><type ref="prev"/><name>tok_len</name></decl>;</decl_stmt>	<comment type="block">/* Length (in bytes) of that tok */</comment>

		<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>jstate</name><operator>-&gt;</operator><name>clocations</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>location</name></expr>;</expr_stmt>
		<comment type="block">/* Adjust recorded location if we're dealing with partial string */</comment>
		<expr_stmt><expr><name>off</name> <operator>-=</operator> <name>query_loc</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>tok_len</name> <operator>=</operator> <name><name>jstate</name><operator>-&gt;</operator><name>clocations</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>length</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>tok_len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>			<comment type="block">/* ignore any duplicates */</comment>

		<comment type="block">/* Copy next chunk (what precedes the next constant) */</comment>
		<expr_stmt><expr><name>len_to_wrt</name> <operator>=</operator> <name>off</name> <operator>-</operator> <name>last_off</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>len_to_wrt</name> <operator>-=</operator> <name>last_tok_len</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>len_to_wrt</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>norm_query</name> <operator>+</operator> <name>n_quer_loc</name></expr></argument>, <argument><expr><name>query</name> <operator>+</operator> <name>quer_loc</name></expr></argument>, <argument><expr><name>len_to_wrt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>n_quer_loc</name> <operator>+=</operator> <name>len_to_wrt</name></expr>;</expr_stmt>

		<comment type="block">/* And insert a param symbol in place of the constant token */</comment>
		<expr_stmt><expr><name>n_quer_loc</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>norm_query</name> <operator>+</operator> <name>n_quer_loc</name></expr></argument>, <argument><expr><literal type="string">"$%d"</literal></expr></argument>,
							  <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>jstate</name><operator>-&gt;</operator><name>highest_extern_param_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>quer_loc</name> <operator>=</operator> <name>off</name> <operator>+</operator> <name>tok_len</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>last_off</name> <operator>=</operator> <name>off</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>last_tok_len</name> <operator>=</operator> <name>tok_len</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * We've copied up until the last ignorable constant.  Copy over the
	 * remaining bytes of the original query string.
	 */</comment>
	<expr_stmt><expr><name>len_to_wrt</name> <operator>=</operator> <name>query_len</name> <operator>-</operator> <name>quer_loc</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>len_to_wrt</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>norm_query</name> <operator>+</operator> <name>n_quer_loc</name></expr></argument>, <argument><expr><name>query</name> <operator>+</operator> <name>quer_loc</name></expr></argument>, <argument><expr><name>len_to_wrt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>n_quer_loc</name> <operator>+=</operator> <name>len_to_wrt</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>n_quer_loc</name> <operator>&lt;=</operator> <name>norm_query_buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>norm_query</name><index>[<expr><name>n_quer_loc</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>query_len_p</name> <operator>=</operator> <name>n_quer_loc</name></expr>;</expr_stmt>
	<return>return <expr><name>norm_query</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Given a valid SQL string and an array of constant-location records,
 * fill in the textual lengths of those constants.
 *
 * The constants may use any allowed constant syntax, such as float literals,
 * bit-strings, single-quoted strings and dollar-quoted strings.  This is
 * accomplished by using the public API for the core scanner.
 *
 * It is the caller's job to ensure that the string is a valid SQL statement
 * with constants at the indicated locations.  Since in practice the string
 * has already been parsed, and the locations that the caller provides will
 * have originated from within the authoritative parser, this should not be
 * a problem.
 *
 * Duplicate constant pointers are possible, and will have their lengths
 * marked as '-1', so that they are later ignored.  (Actually, we assume the
 * lengths were initialized as -1 to start with, and don't change them here.)
 *
 * If query_loc &gt; 0, then "query" has been advanced by that much compared to
 * the original string start, so we need to translate the provided locations
 * to compensate.  (This lets us avoid re-scanning statements before the one
 * of interest, so it's worth doing.)
 *
 * N.B. There is an assumption that a '-' character at a Const location begins
 * a negative numeric constant.  This precludes there ever being another
 * reason for a constant to start with a '-'.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>fill_in_constant_lengths</name><parameter_list>(<parameter><decl><type><name>pgssJumbleState</name> <modifier>*</modifier></type><name>jstate</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>,
			 <parameter><decl><type><name>int</name></type> <name>query_loc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pgssLocationLen</name> <modifier>*</modifier></type><name>locs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>core_yyscan_t</name></type> <name>yyscanner</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>core_yy_extra_type</name></type> <name>yyextra</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>core_YYSTYPE</name></type> <name>yylval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>YYLTYPE</name></type>		<name>yylloc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>last_loc</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Sort the records by location so that we can process them in order while
	 * scanning the query text.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>jstate</name><operator>-&gt;</operator><name>clocations_count</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>jstate</name><operator>-&gt;</operator><name>clocations</name></name></expr></argument>, <argument><expr><name><name>jstate</name><operator>-&gt;</operator><name>clocations_count</name></name></expr></argument>,
			  <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pgssLocationLen</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>comp_location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>locs</name> <operator>=</operator> <name><name>jstate</name><operator>-&gt;</operator><name>clocations</name></name></expr>;</expr_stmt>

	<comment type="block">/* initialize the flex scanner --- should match raw_parser() */</comment>
	<expr_stmt><expr><name>yyscanner</name> <operator>=</operator> <call><name>scanner_init</name><argument_list>(<argument><expr><name>query</name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name>yyextra</name></expr></argument>,
							 <argument><expr><name>ScanKeywords</name></expr></argument>,
							 <argument><expr><name>NumScanKeywords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* we don't want to re-emit any escape string warnings */</comment>
	<expr_stmt><expr><name><name>yyextra</name><operator>.</operator><name>escape_string_warning</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<comment type="block">/* Search for each constant, in sequence */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>jstate</name><operator>-&gt;</operator><name>clocations_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>loc</name> <init>= <expr><name><name>locs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>location</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>tok</name></decl>;</decl_stmt>

		<comment type="block">/* Adjust recorded location if we're dealing with partial string */</comment>
		<expr_stmt><expr><name>loc</name> <operator>-=</operator> <name>query_loc</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>loc</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>loc</name> <operator>&lt;=</operator> <name>last_loc</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>			<comment type="block">/* Duplicate constant, ignore */</comment>

		<comment type="block">/* Lex tokens until we find the desired constant */</comment>
		<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name>tok</name> <operator>=</operator> <call><name>core_yylex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yylval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yylloc</name></expr></argument>, <argument><expr><name>yyscanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* We should not hit end-of-string, but if we do, behave sanely */</comment>
			<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>			<comment type="block">/* out of inner for-loop */</comment>

			<comment type="block">/*
			 * We should find the token position exactly, but if we somehow
			 * run past it, work with that.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>yylloc</name> <operator>&gt;=</operator> <name>loc</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>query</name><index>[<expr><name>loc</name></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/*
					 * It's a negative value - this is the one and only case
					 * where we replace more than a single token.
					 *
					 * Do not compensate for the core system's special-case
					 * adjustment of location to that of the leading '-'
					 * operator in the event of a negative constant.  It is
					 * also useful for our purposes to start from the minus
					 * symbol.  In this way, queries like "select * from foo
					 * where bar = 1" and "select * from foo where bar = -2"
					 * will have identical normalized query strings.
					 */</comment>
					<expr_stmt><expr><name>tok</name> <operator>=</operator> <call><name>core_yylex</name><argument_list>(<argument><expr><operator>&amp;</operator><name>yylval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yylloc</name></expr></argument>, <argument><expr><name>yyscanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<break>break;</break></block_content></block></if></if_stmt>	<comment type="block">/* out of inner for-loop */</comment>
				</block_content>}</block></if></if_stmt>

				<comment type="block">/*
				 * We now rely on the assumption that flex has placed a zero
				 * byte after the text of the current token in scanbuf.
				 */</comment>
				<expr_stmt><expr><name><name>locs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>yyextra</name><operator>.</operator><name>scanbuf</name></name> <operator>+</operator> <name>loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>			<comment type="block">/* out of inner for-loop */</comment>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<comment type="block">/* If we hit end-of-string, give up, leaving remaining lengths -1 */</comment>
		<if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>last_loc</name> <operator>=</operator> <name>loc</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>scanner_finish</name><argument_list>(<argument><expr><name>yyscanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * comp_location: comparator for qsorting pgssLocationLen structs by location
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>comp_location</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>l</name> <init>= <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>pgssLocationLen</name> <operator>*</operator><operator>)</operator> <name>a</name><operator>)</operator><operator>-&gt;</operator><name>location</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>r</name> <init>= <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>pgssLocationLen</name> <operator>*</operator><operator>)</operator> <name>b</name><operator>)</operator><operator>-&gt;</operator><name>location</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&lt;</operator> <name>r</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name>r</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>+</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function></unit>
