<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/contrib/ltree_plpython/ltree_plpython.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plpython.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ltree/ltree.h"</cpp:file></cpp:include>

<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>_PG_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Linkage to functions in plpython module */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr></cpp:if>
<typedef>typedef <function_decl><type><name>PyObject</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>PLyUnicode_FromStringAndSize_t</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>Py_ssize_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>PLyUnicode_FromStringAndSize_t</name></type> <name>PLyUnicode_FromStringAndSize_p</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/*
 * Module initialize function: fetch function pointers for cross-module calls.
 */</comment>
<function><type><name>void</name></type>
<name>_PG_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Asserts verify that typedefs above match original declarations */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PY_MAJOR_VERSION</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr></cpp:if>
	<expr_stmt><expr><call><name>AssertVariableIsOfType</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PLyUnicode_FromStringAndSize</name></expr></argument>, <argument><expr><name>PLyUnicode_FromStringAndSize_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>PLyUnicode_FromStringAndSize_p</name> <operator>=</operator> <operator>(</operator><name>PLyUnicode_FromStringAndSize_t</name><operator>)</operator>
		<call><name>load_external_function</name><argument_list>(<argument><expr><literal type="string">"$libdir/"</literal> <name>PLPYTHON_LIBNAME</name></expr></argument>, <argument><expr><literal type="string">"PLyUnicode_FromStringAndSize"</literal></expr></argument>,
							   <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<comment type="block">/* These defines must be after the module init function */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLyUnicode_FromStringAndSize</name></cpp:macro> <cpp:value>PLyUnicode_FromStringAndSize_p</cpp:value></cpp:define>


<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ltree_to_plpython</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type>
<name>ltree_to_plpython</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ltree</name>	   <modifier>*</modifier></type><name>in</name> <init>= <expr><call><name>PG_GETARG_LTREE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PyObject</name>   <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ltree_level</name> <modifier>*</modifier></type><name>curlevel</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>PyList_New</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>numlevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>list</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>curlevel</name> <operator>=</operator> <call><name>LTREE_FIRST</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>numlevel</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>PyList_SetItem</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name><name>curlevel</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>curlevel</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>curlevel</name> <operator>=</operator> <call><name>LEVEL_NEXT</name><argument_list>(<argument><expr><name>curlevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
