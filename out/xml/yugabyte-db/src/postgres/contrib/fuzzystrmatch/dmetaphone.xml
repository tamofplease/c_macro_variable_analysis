<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/contrib/fuzzystrmatch/dmetaphone.c"><comment type="block">/*
 * This is a port of the Double Metaphone algorithm for use in PostgreSQL.
 *
 * contrib/fuzzystrmatch/dmetaphone.c
 *
 * Double Metaphone computes 2 "sounds like" strings - a primary and an
 * alternate. In most cases they are the same, but for foreign names
 * especially they can be a bit different, depending on pronunciation.
 *
 * Information on using Double Metaphone can be found at
 *	 http://www.codeproject.com/string/dmetaphone1.asp
 * and the original article describing it can be found at
 *	 http://drdobbs.com/184401251
 *
 * For PostgreSQL we provide 2 functions - one for the primary and one for
 * the alternate. That way the functions are pure text-&gt;text mappings that
 * are useful in functional indexes. These are 'dmetaphone' for the
 * primary and 'dmetaphone_alt' for the alternate.
 *
 * Assuming that dmetaphone.so is in $libdir, the SQL to set up the
 * functions looks like this:
 *
 * CREATE FUNCTION dmetaphone (text) RETURNS text
 *	  LANGUAGE C IMMUTABLE STRICT
 *	  AS '$libdir/dmetaphone', 'dmetaphone';
 *
 * CREATE FUNCTION dmetaphone_alt (text) RETURNS text
 *	  LANGUAGE C IMMUTABLE STRICT
 *	  AS '$libdir/dmetaphone', 'dmetaphone_alt';
 *
 * Note that you have to declare the functions IMMUTABLE if you want to
 * use them in functional indexes, and you have to declare them as STRICT
 * as they do not check for NULL input, and will segfault if given NULL input.
 * (See below for alternative ) Declaring them as STRICT means PostgreSQL
 * will never call them with NULL, but instead assume the result is NULL,
 * which is what we (I) want.
 *
 * Alternatively, compile with -DDMETAPHONE_NOSTRICT and the functions
 * will detect NULL input and return NULL. The you don't have to declare them
 * as STRICT.
 *
 * There is a small inefficiency here - each function call actually computes
 * both the primary and the alternate and then throws away the one it doesn't
 * need. That's the way the perl module was written, because perl can handle
 * a list return more easily than we can in PostgreSQL. The result has been
 * fast enough for my needs, but it could maybe be optimized a bit to remove
 * that behaviour.
 *
 */</comment>


<comment type="block" format="doxygen">/***************************** COPYRIGHT NOTICES ***********************

Most of this code is directly from the Text::DoubleMetaphone perl module
version 0.05 available from https://www.cpan.org/.
It bears this copyright notice:


  Copyright 2000, Maurice Aubrey &lt;maurice@hevanet.com&gt;.
  All rights reserved.

  This code is based heavily on the C++ implementation by
  Lawrence Philips and incorporates several bug fixes courtesy
  of Kevin Atkinson &lt;kevina@users.sourceforge.net&gt;.

  This module is free software; you may redistribute it and/or
  modify it under the same terms as Perl itself.

The remaining code is authored by Andrew Dunstan &lt;amdunstan@ncshp.org&gt; and
&lt;andrew@dunslane.net&gt; and is covered this copyright:

  Copyright 2003, North Carolina State Highway Patrol.
  All rights reserved.

  Permission to use, copy, modify, and distribute this software and its
  documentation for any purpose, without fee, and without a written agreement
  is hereby granted, provided that the above copyright notice and this
  paragraph and the following two paragraphs appear in all copies.

  IN NO EVENT SHALL THE NORTH CAROLINA STATE HIGHWAY PATROL BE LIABLE TO ANY
  PARTY FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES,
  INCLUDING LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS
  DOCUMENTATION, EVEN IF THE NORTH CAROLINA STATE HIGHWAY PATROL HAS BEEN
  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

  THE NORTH CAROLINA STATE HIGHWAY PATROL SPECIFICALLY DISCLAIMS ANY
  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED
  HEREUNDER IS ON AN "AS IS" BASIS, AND THE NORTH CAROLINA STATE HIGHWAY PATROL
  HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR
  MODIFICATIONS.

***********************************************************************/</comment>


<comment type="block">/* include these first, according to the docs */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DMETAPHONE_MAIN</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>

<comment type="block">/* turn off assertions for embedded function */</comment>
<comment type="line">// Commented out by YugaByte: NDEBUG should not be redefined!</comment>
<comment type="line">// #define NDEBUG</comment>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>							<comment type="block">/* DMETAPHONE_MAIN */</comment>

<comment type="block">/* we need these if we didn't get them from postgres.h */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* DMETAPHONE_MAIN */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<comment type="block">/* prototype for the main function we got from the perl module */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DoubleMetaphone</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DMETAPHONE_MAIN</name></cpp:ifndef>

<comment type="block">/*
 * The PostgreSQL visible dmetaphone function.
 */</comment>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dmetaphone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type>
<name>dmetaphone</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>aptr</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name><name>codes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>code</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DMETAPHONE_NOSTRICT</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>aptr</name> <operator>=</operator> <call><name>text_to_cstring</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DoubleMetaphone</name><argument_list>(<argument><expr><name>aptr</name></expr></argument>, <argument><expr><name>codes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>codes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>code</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * The PostgreSQL visible dmetaphone_alt function.
 */</comment>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dmetaphone_alt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type>
<name>dmetaphone_alt</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>aptr</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name><name>codes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>code</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DMETAPHONE_NOSTRICT</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>arg</name> <operator>=</operator> <call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>aptr</name> <operator>=</operator> <call><name>text_to_cstring</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DoubleMetaphone</name><argument_list>(<argument><expr><name>aptr</name></expr></argument>, <argument><expr><name>codes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>codes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>code</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* here is where we start the code imported from the perl module */</comment>

<comment type="block">/* all memory handling is done with these macros */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>META_MALLOC</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> \
		  <cpp:value>(v = (t*)palloc(((n)*sizeof(t))))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>META_REALLOC</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> \
					  <cpp:value>(v = (t*)repalloc((v),((n)*sizeof(t))))</cpp:value></cpp:define>

<comment type="block">/*
 * Don't do pfree - it seems to cause a segv sometimes - which might have just
 * been caused by reloading the module in development.
 * So we rely on context cleanup - Tom Lane says pfree shouldn't be necessary
 * in a case like this.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>META_FREE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void)true)</cpp:value></cpp:define>	<comment type="block">/* pfree((x)) */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>							<comment type="block">/* not defined DMETAPHONE_MAIN */</comment>

<comment type="block">/* use the standard malloc library when not running in PostgreSQL */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>META_MALLOC</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> \
		  <cpp:value>(v = (t*)malloc(((n)*sizeof(t))))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>META_REALLOC</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> \
					  <cpp:value>(v = (t*)realloc((v),((n)*sizeof(t))))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>META_FREE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>free((x))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* defined DMETAPHONE_MAIN */</comment>



<comment type="block">/* this typedef was originally in the perl module's .h file */</comment>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>length</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>bufsize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>free_string_on_destroy</name></decl>;</decl_stmt>
}</block></struct></type>

<name>metastring</name>;</typedef>

<comment type="block">/*
 * remaining perl module funcs unchanged except for declaring them static
 * and reformatting to PostgreSQL indentation and to fit in 80 cols.
 *
 */</comment>

<function><type><specifier>static</specifier> <name>metastring</name> <modifier>*</modifier></type>
<name>NewMetaString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>init_str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>metastring</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>empty_string</name><index>[]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>META_MALLOC</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>metastring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>init_str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>init_str</name> <operator>=</operator> <name>empty_string</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>init_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* preallocate a bit more for potential growth */</comment>
	<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <literal type="number">7</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>META_MALLOC</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bufsize</name></name></expr></argument>, <argument><expr><name>char</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>str</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>init_str</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>free_string_on_destroy</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>DestroyMetaString</name><parameter_list>(<parameter><decl><type><name>metastring</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>free_string_on_destroy</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>str</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>META_FREE</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>META_FREE</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>IncreaseBuffer</name><parameter_list>(<parameter><decl><type><name>metastring</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chars_needed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>META_REALLOC</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>+</operator> <name>chars_needed</name> <operator>+</operator> <literal type="number">10</literal><operator>)</operator></expr></argument>, <argument><expr><name>char</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>str</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>+</operator> <name>chars_needed</name> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>MakeUpper</name><parameter_list>(<parameter><decl><type><name>metastring</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>str</name></name></expr>;</init> <condition><expr><operator>*</operator><name>i</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>i</name> <operator>=</operator> <call><name>toupper</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>IsVowel</name><parameter_list>(<parameter><decl><type><name>metastring</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name>c</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>pos</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>length</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>str</name></name> <operator>+</operator> <name>pos</name><operator>)</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'A'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'E'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'I'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'O'</literal><operator>)</operator> <operator>||</operator>
		<operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'U'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'Y'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>SlavoGermanic</name><parameter_list>(<parameter><decl><type><name>metastring</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>strstr</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"W"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>strstr</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"K"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>strstr</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"CZ"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>strstr</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"WITZ"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>char</name></type>
<name>GetAt</name><parameter_list>(<parameter><decl><type><name>metastring</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>pos</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>length</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="char">'\0'</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><operator>(</operator><operator>(</operator><name>char</name><operator>)</operator> <operator>*</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>str</name></name> <operator>+</operator> <name>pos</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>SetAt</name><parameter_list>(<parameter><decl><type><name>metastring</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>pos</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>length</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>str</name></name> <operator>+</operator> <name>pos</name><operator>)</operator> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
   Caveats: the START value is 0 based
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>StringAt</name><parameter_list>(<parameter><decl><type><name>metastring</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>test</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>va_list</name></type>		<name>ap</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>start</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>start</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>length</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>pos</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>str</name></name> <operator>+</operator> <name>start</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<do>do
	<block>{<block_content>
		<expr_stmt><expr><name>test</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>test</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>test</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>
	while <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>

	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>MetaphAdd</name><parameter_list>(<parameter><decl><type><name>metastring</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>new_str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>add_length</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>new_str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>add_length</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>new_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <name>add_length</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>IncreaseBuffer</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>add_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>str</name></name></expr></argument>, <argument><expr><name>new_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>length</name></name> <operator>+=</operator> <name>add_length</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>DoubleMetaphone</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>codes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>length</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>metastring</name> <modifier>*</modifier></type><name>original</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>metastring</name> <modifier>*</modifier></type><name>primary</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>metastring</name> <modifier>*</modifier></type><name>secondary</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>current</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>last</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>current</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="block">/* we need the real length and last prior to padding */</comment>
	<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>last</name> <operator>=</operator> <name>length</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>original</name> <operator>=</operator> <call><name>NewMetaString</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Pad original so we can index beyond end */</comment>
	<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><literal type="string">"     "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>primary</name> <operator>=</operator> <call><name>NewMetaString</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>secondary</name> <operator>=</operator> <call><name>NewMetaString</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>primary</name><operator>-&gt;</operator><name>free_string_on_destroy</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>secondary</name><operator>-&gt;</operator><name>free_string_on_destroy</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MakeUpper</name><argument_list>(<argument><expr><name>original</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* skip these when at start of word */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"GN"</literal></expr></argument>, <argument><expr><literal type="string">"KN"</literal></expr></argument>, <argument><expr><literal type="string">"PN"</literal></expr></argument>, <argument><expr><literal type="string">"WR"</literal></expr></argument>, <argument><expr><literal type="string">"PS"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Initial 'X' is pronounced 'Z' e.g. 'Xavier' */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>GetAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'X'</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"S"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* 'Z' maps to 'S' */</comment>
		<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"S"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* main loop */</comment>
	<while>while <condition>(<expr><operator>(</operator><name><name>primary</name><operator>-&gt;</operator><name>length</name></name> <operator>&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>secondary</name><operator>-&gt;</operator><name>length</name></name> <operator>&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>current</name> <operator>&gt;=</operator> <name>length</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<switch>switch <condition>(<expr><call><name>GetAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><literal type="char">'A'</literal></expr>:</case>
			<case>case <expr><literal type="char">'E'</literal></expr>:</case>
			<case>case <expr><literal type="char">'I'</literal></expr>:</case>
			<case>case <expr><literal type="char">'O'</literal></expr>:</case>
			<case>case <expr><literal type="char">'U'</literal></expr>:</case>
			<case>case <expr><literal type="char">'Y'</literal></expr>:</case>
				<if_stmt><if>if <condition>(<expr><name>current</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* all init vowels now map to 'A' */</comment>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'B'</literal></expr>:</case>

				<comment type="block">/* "-mb", e.g", "dumb", already skipped over... */</comment>
				<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"P"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"P"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>GetAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'B'</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'\xc7'</literal></expr>:</case>		<comment type="block">/* C with cedilla */</comment>
				<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"S"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"S"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'C'</literal></expr>:</case>
				<comment type="block">/* various germanic */</comment>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><name>current</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator>
					<operator>&amp;&amp;</operator> <operator>!</operator><call><name>IsVowel</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call>
					<operator>&amp;&amp;</operator> <call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"ACH"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
					<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><call><name>GetAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'I'</literal><operator>)</operator>
						<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><call><name>GetAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'E'</literal><operator>)</operator>
							<operator>||</operator> <call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"BACHER"</literal></expr></argument>,
										<argument><expr><literal type="string">"MACHER"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>

				<comment type="block">/* special case 'caesar' */</comment>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><name>current</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>
					<operator>&amp;&amp;</operator> <call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"CAESAR"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"S"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"S"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>

				<comment type="block">/* italian 'chianti' */</comment>
				<if_stmt><if>if <condition>(<expr><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"CHIA"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"CH"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* find 'michael' */</comment>
					<if_stmt><if>if <condition>(<expr><operator>(</operator><name>current</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator>
						<operator>&amp;&amp;</operator> <call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"CHAE"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"X"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
						<break>break;</break>
					</block_content>}</block></if></if_stmt>

					<comment type="block">/* greek roots e.g. 'chemistry', 'chorus' */</comment>
					<if_stmt><if>if <condition>(<expr><operator>(</operator><name>current</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>
						<operator>&amp;&amp;</operator> <operator>(</operator><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>,
									 <argument><expr><literal type="string">"HARAC"</literal></expr></argument>, <argument><expr><literal type="string">"HARIS"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
							<operator>||</operator> <call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"HOR"</literal></expr></argument>,
										<argument><expr><literal type="string">"HYM"</literal></expr></argument>, <argument><expr><literal type="string">"HIA"</literal></expr></argument>, <argument><expr><literal type="string">"HEM"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>)</operator>
						<operator>&amp;&amp;</operator> <operator>!</operator><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"CHORE"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
						<break>break;</break>
					</block_content>}</block></if></if_stmt>

					<comment type="block">/* germanic, greek, or otherwise 'ch' for 'kh' sound */</comment>
					<if_stmt><if>if <condition>(
						<expr><operator>(</operator><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"VAN "</literal></expr></argument>, <argument><expr><literal type="string">"VON "</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
						 <operator>||</operator> <call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"SCH"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>)</operator>
					<comment type="block">/* 'architect but not 'arch', 'orchestra', 'orchid' */</comment>
						<operator>||</operator> <call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"ORCHES"</literal></expr></argument>,
									<argument><expr><literal type="string">"ARCHIT"</literal></expr></argument>, <argument><expr><literal type="string">"ORCHID"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
						<operator>||</operator> <call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"T"</literal></expr></argument>, <argument><expr><literal type="string">"S"</literal></expr></argument>,
									<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
						<operator>||</operator> <operator>(</operator><operator>(</operator><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
									  <argument><expr><literal type="string">"A"</literal></expr></argument>, <argument><expr><literal type="string">"O"</literal></expr></argument>, <argument><expr><literal type="string">"U"</literal></expr></argument>, <argument><expr><literal type="string">"E"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
							 <operator>||</operator> <operator>(</operator><name>current</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator>

					<comment type="block">/*
					 * e.g., 'wachtler', 'wechsler', but not 'tichner'
					 */</comment>
							<operator>&amp;&amp;</operator> <call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"L"</literal></expr></argument>, <argument><expr><literal type="string">"R"</literal></expr></argument>,
										<argument><expr><literal type="string">"N"</literal></expr></argument>, <argument><expr><literal type="string">"M"</literal></expr></argument>, <argument><expr><literal type="string">"B"</literal></expr></argument>, <argument><expr><literal type="string">"H"</literal></expr></argument>, <argument><expr><literal type="string">"F"</literal></expr></argument>, <argument><expr><literal type="string">"V"</literal></expr></argument>, <argument><expr><literal type="string">"W"</literal></expr></argument>,
										<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if>
					<else>else
					<block>{<block_content>
						<if_stmt><if>if <condition>(<expr><name>current</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
						<block>{<block_content>
							<if_stmt><if>if <condition>(<expr><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"MC"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
							<block>{<block_content>
								<comment type="block">/* e.g., "McHugh" */</comment>
								<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							</block_content>}</block></if>
							<else>else
							<block>{<block_content>
								<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"X"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							</block_content>}</block></else></if_stmt>
						</block_content>}</block></if>
						<else>else
						<block>{<block_content>
							<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"X"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"X"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></else></if_stmt>
					</block_content>}</block></else></if_stmt>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
				<comment type="block">/* e.g, 'czerny' */</comment>
				<if_stmt><if>if <condition>(<expr><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"CZ"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
					<operator>&amp;&amp;</operator> <operator>!</operator><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"WICZ"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"S"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"X"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>

				<comment type="block">/* e.g., 'focaccia' */</comment>
				<if_stmt><if>if <condition>(<expr><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"CIA"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"X"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"X"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>

				<comment type="block">/* double 'C', but not if e.g. 'McClellan' */</comment>
				<if_stmt><if>if <condition>(<expr><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"CC"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
					<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name>current</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>GetAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'M'</literal><operator>)</operator><operator>)</operator></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* 'bellocchio' but not 'bacchus' */</comment>
					<if_stmt><if>if <condition>(<expr><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"I"</literal></expr></argument>, <argument><expr><literal type="string">"E"</literal></expr></argument>, <argument><expr><literal type="string">"H"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
						<operator>&amp;&amp;</operator> <operator>!</operator><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"HU"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<comment type="block">/* 'accident', 'accede' 'succeed' */</comment>
						<if_stmt><if>if <condition>(
							<expr><operator>(</operator><operator>(</operator><name>current</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator>
							 <operator>&amp;&amp;</operator> <operator>(</operator><call><name>GetAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'A'</literal><operator>)</operator><operator>)</operator>
							<operator>||</operator> <call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"UCCEE"</literal></expr></argument>,
										<argument><expr><literal type="string">"UCCES"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"KS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"KS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<comment type="block">/* 'bacci', 'bertucci', other italian */</comment>
						</block_content>}</block></if>
						<else>else
						<block>{<block_content>
							<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"X"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"X"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></else></if_stmt>
						<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
						<break>break;</break>
					</block_content>}</block></if>
					<else>else
					<block>{<block_content>			<comment type="block">/* Pierce's rule */</comment>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
						<break>break;</break>
					</block_content>}</block></else></if_stmt>
				</block_content>}</block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"CK"</literal></expr></argument>, <argument><expr><literal type="string">"CG"</literal></expr></argument>, <argument><expr><literal type="string">"CQ"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"CI"</literal></expr></argument>, <argument><expr><literal type="string">"CE"</literal></expr></argument>, <argument><expr><literal type="string">"CY"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* italian vs. english */</comment>
					<if_stmt><if>if <condition>(<expr><call><name>StringAt</name>
						<argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"CIO"</literal></expr></argument>, <argument><expr><literal type="string">"CIE"</literal></expr></argument>, <argument><expr><literal type="string">"CIA"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"S"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"X"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if>
					<else>else
					<block>{<block_content>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"S"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"S"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></else></if_stmt>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>

				<comment type="block">/* else */</comment>
				<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* name sent in 'mac caffrey', 'mac gregor */</comment>
				<if_stmt><if>if <condition>(<expr><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">" C"</literal></expr></argument>, <argument><expr><literal type="string">" Q"</literal></expr></argument>, <argument><expr><literal type="string">" G"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>, <argument><expr><literal type="string">"K"</literal></expr></argument>, <argument><expr><literal type="string">"Q"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
						 <operator>&amp;&amp;</operator> <operator>!</operator><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
									  <argument><expr><literal type="string">"CE"</literal></expr></argument>, <argument><expr><literal type="string">"CI"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'D'</literal></expr>:</case>
				<if_stmt><if>if <condition>(<expr><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"DG"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
								 <argument><expr><literal type="string">"I"</literal></expr></argument>, <argument><expr><literal type="string">"E"</literal></expr></argument>, <argument><expr><literal type="string">"Y"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<comment type="block">/* e.g. 'edge' */</comment>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"J"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"J"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
						<break>break;</break>
					</block_content>}</block></if>
					<else>else
					<block>{<block_content>
						<comment type="block">/* e.g. 'edgar' */</comment>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"TK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"TK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
						<break>break;</break>
					</block_content>}</block></else></if_stmt>
				</block_content>}</block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"DT"</literal></expr></argument>, <argument><expr><literal type="string">"DD"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"T"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"T"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>

				<comment type="block">/* else */</comment>
				<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"T"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"T"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'F'</literal></expr>:</case>
				<if_stmt><if>if <condition>(<expr><call><name>GetAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'F'</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"F"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"F"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'G'</literal></expr>:</case>
				<if_stmt><if>if <condition>(<expr><call><name>GetAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'H'</literal></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><operator>(</operator><name>current</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IsVowel</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
						<break>break;</break>
					</block_content>}</block></if></if_stmt>

					<if_stmt><if>if <condition>(<expr><name>current</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition>
					<block>{<block_content>
						<comment type="block">/* 'ghislane', ghiradelli */</comment>
						<if_stmt><if>if <condition>(<expr><name>current</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
						<block>{<block_content>
							<if_stmt><if>if <condition>(<expr><call><name>GetAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'I'</literal></expr>)</condition>
							<block>{<block_content>
								<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"J"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"J"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							</block_content>}</block></if>
							<else>else
							<block>{<block_content>
								<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							</block_content>}</block></else></if_stmt>
							<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
							<break>break;</break>
						</block_content>}</block></if></if_stmt>
					</block_content>}</block></if></if_stmt>

					<comment type="block">/*
					 * Parker's rule (with some further refinements) - e.g.,
					 * 'hugh'
					 */</comment>
					<if_stmt><if>if <condition>(
						<expr><operator>(</operator><operator>(</operator><name>current</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator>
						 <operator>&amp;&amp;</operator> <call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
									 <argument><expr><literal type="string">"B"</literal></expr></argument>, <argument><expr><literal type="string">"H"</literal></expr></argument>, <argument><expr><literal type="string">"D"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>)</operator>
					<comment type="block">/* e.g., 'bough' */</comment>
						<operator>||</operator> <operator>(</operator><operator>(</operator><name>current</name> <operator>&gt;</operator> <literal type="number">2</literal><operator>)</operator>
							<operator>&amp;&amp;</operator> <call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
										<argument><expr><literal type="string">"B"</literal></expr></argument>, <argument><expr><literal type="string">"H"</literal></expr></argument>, <argument><expr><literal type="string">"D"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>)</operator>
					<comment type="block">/* e.g., 'broughton' */</comment>
						<operator>||</operator> <operator>(</operator><operator>(</operator><name>current</name> <operator>&gt;</operator> <literal type="number">3</literal><operator>)</operator>
							<operator>&amp;&amp;</operator> <call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
										<argument><expr><literal type="string">"B"</literal></expr></argument>, <argument><expr><literal type="string">"H"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
						<break>break;</break>
					</block_content>}</block></if>
					<else>else
					<block>{<block_content>
						<comment type="block">/*
						 * e.g., 'laugh', 'McLaughlin', 'cough', 'gough',
						 * 'rough', 'tough'
						 */</comment>
						<if_stmt><if>if <condition>(<expr><operator>(</operator><name>current</name> <operator>&gt;</operator> <literal type="number">2</literal><operator>)</operator>
							<operator>&amp;&amp;</operator> <operator>(</operator><call><name>GetAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'U'</literal><operator>)</operator>
							<operator>&amp;&amp;</operator> <call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>,
										<argument><expr><literal type="string">"G"</literal></expr></argument>, <argument><expr><literal type="string">"L"</literal></expr></argument>, <argument><expr><literal type="string">"R"</literal></expr></argument>, <argument><expr><literal type="string">"T"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"F"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"F"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></if>
						<if type="elseif">else if <condition>(<expr><operator>(</operator><name>current</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator>
								 <operator>&amp;&amp;</operator> <call><name>GetAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'I'</literal></expr>)</condition>
						<block>{<block_content>


							<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></if></if_stmt>

						<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
						<break>break;</break>
					</block_content>}</block></else></if_stmt>
				</block_content>}</block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>GetAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'N'</literal></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><operator>(</operator><name>current</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>IsVowel</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
						<operator>&amp;&amp;</operator> <operator>!</operator><call><name>SlavoGermanic</name><argument_list>(<argument><expr><name>original</name></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"KN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"N"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if>
					<if type="elseif">else
						<comment type="block">/* not e.g. 'cagney' */</comment>
						if <condition>(<expr><operator>!</operator><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"EY"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
							<operator>&amp;&amp;</operator> <operator>(</operator><call><name>GetAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'Y'</literal><operator>)</operator>
							<operator>&amp;&amp;</operator> <operator>!</operator><call><name>SlavoGermanic</name><argument_list>(<argument><expr><name>original</name></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"N"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"KN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if>
					<else>else
					<block>{<block_content>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"KN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"KN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></else></if_stmt>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>

				<comment type="block">/* 'tagliaro' */</comment>
				<if_stmt><if>if <condition>(<expr><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"LI"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
					<operator>&amp;&amp;</operator> <operator>!</operator><call><name>SlavoGermanic</name><argument_list>(<argument><expr><name>original</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"KL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"L"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>

				<comment type="block">/* -ges-,-gep-,-gel-, -gie- at beginning */</comment>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><name>current</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>
					<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><call><name>GetAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'Y'</literal><operator>)</operator>
						<operator>||</operator> <call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"ES"</literal></expr></argument>, <argument><expr><literal type="string">"EP"</literal></expr></argument>,
									<argument><expr><literal type="string">"EB"</literal></expr></argument>, <argument><expr><literal type="string">"EL"</literal></expr></argument>, <argument><expr><literal type="string">"EY"</literal></expr></argument>, <argument><expr><literal type="string">"IB"</literal></expr></argument>, <argument><expr><literal type="string">"IL"</literal></expr></argument>, <argument><expr><literal type="string">"IN"</literal></expr></argument>, <argument><expr><literal type="string">"IE"</literal></expr></argument>,
									<argument><expr><literal type="string">"EI"</literal></expr></argument>, <argument><expr><literal type="string">"ER"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"J"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>

				<comment type="block">/* -ger-,  -gy- */</comment>
				<if_stmt><if>if <condition>(
					<expr><operator>(</operator><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"ER"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
					 <operator>||</operator> <operator>(</operator><call><name>GetAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'Y'</literal><operator>)</operator><operator>)</operator>
					<operator>&amp;&amp;</operator> <operator>!</operator><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>,
								 <argument><expr><literal type="string">"DANGER"</literal></expr></argument>, <argument><expr><literal type="string">"RANGER"</literal></expr></argument>, <argument><expr><literal type="string">"MANGER"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
					<operator>&amp;&amp;</operator> <operator>!</operator><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"E"</literal></expr></argument>, <argument><expr><literal type="string">"I"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
					<operator>&amp;&amp;</operator> <operator>!</operator><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"RGY"</literal></expr></argument>, <argument><expr><literal type="string">"OGY"</literal></expr></argument>,
								 <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"J"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>

				<comment type="block">/* italian e.g, 'biaggi' */</comment>
				<if_stmt><if>if <condition>(<expr><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"E"</literal></expr></argument>, <argument><expr><literal type="string">"I"</literal></expr></argument>, <argument><expr><literal type="string">"Y"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
					<operator>||</operator> <call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,
								<argument><expr><literal type="string">"AGGI"</literal></expr></argument>, <argument><expr><literal type="string">"OGGI"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* obvious germanic */</comment>
					<if_stmt><if>if <condition>(
						<expr><operator>(</operator><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"VAN "</literal></expr></argument>, <argument><expr><literal type="string">"VON "</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
						 <operator>||</operator> <call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"SCH"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>)</operator>
						<operator>||</operator> <call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"ET"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if>
					<else>else
					<block>{<block_content>
						<comment type="block">/* always soft if french ending */</comment>
						<if_stmt><if>if <condition>(<expr><call><name>StringAt</name>
							<argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"IER "</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"J"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"J"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></if>
						<else>else
						<block>{<block_content>
							<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"J"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></else></if_stmt>
					</block_content>}</block></else></if_stmt>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>GetAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'G'</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'H'</literal></expr>:</case>
				<comment type="block">/* only keep if first &amp; before vowel or btw. 2 vowels */</comment>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>current</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <call><name>IsVowel</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator>
					<operator>&amp;&amp;</operator> <call><name>IsVowel</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"H"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"H"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else<block type="pseudo"><block_content>
					<comment type="block">/* also takes care of 'HH' */</comment>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'J'</literal></expr>:</case>
				<comment type="block">/* obvious spanish, 'jose', 'san jacinto' */</comment>
				<if_stmt><if>if <condition>(<expr><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"JOSE"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
					<operator>||</operator> <call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"SAN "</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>current</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>
						 <operator>&amp;&amp;</operator> <operator>(</operator><call><name>GetAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator><operator>)</operator>
						<operator>||</operator> <call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"SAN "</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"H"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"H"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if>
					<else>else
					<block>{<block_content>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"J"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"H"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></else></if_stmt>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><operator>(</operator><name>current</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>
					<operator>&amp;&amp;</operator> <operator>!</operator><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"JOSE"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"J"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* Yankelovich/Jankelowicz */</comment>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<comment type="block">/* spanish pron. of e.g. 'bajador' */</comment>
					<if_stmt><if>if <condition>(<expr><call><name>IsVowel</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call>
						<operator>&amp;&amp;</operator> <operator>!</operator><call><name>SlavoGermanic</name><argument_list>(<argument><expr><name>original</name></expr></argument>)</argument_list></call>
						<operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><call><name>GetAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'A'</literal><operator>)</operator>
							<operator>||</operator> <operator>(</operator><call><name>GetAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'O'</literal><operator>)</operator><operator>)</operator></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"J"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"H"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if>
					<else>else
					<block>{<block_content>
						<if_stmt><if>if <condition>(<expr><name>current</name> <operator>==</operator> <name>last</name></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"J"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></if>
						<else>else
						<block>{<block_content>
							<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"L"</literal></expr></argument>, <argument><expr><literal type="string">"T"</literal></expr></argument>,
										  <argument><expr><literal type="string">"K"</literal></expr></argument>, <argument><expr><literal type="string">"S"</literal></expr></argument>, <argument><expr><literal type="string">"N"</literal></expr></argument>, <argument><expr><literal type="string">"M"</literal></expr></argument>, <argument><expr><literal type="string">"B"</literal></expr></argument>, <argument><expr><literal type="string">"Z"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
								<operator>&amp;&amp;</operator> <operator>!</operator><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
											 <argument><expr><literal type="string">"S"</literal></expr></argument>, <argument><expr><literal type="string">"K"</literal></expr></argument>, <argument><expr><literal type="string">"L"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
							<block>{<block_content>
								<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"J"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"J"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							</block_content>}</block></if></if_stmt>
						</block_content>}</block></else></if_stmt>
					</block_content>}</block></else></if_stmt>
				</block_content>}</block></else></if_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>GetAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'J'</literal></expr>)</condition><block type="pseudo"><block_content>	<comment type="block">/* it could happen! */</comment>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'K'</literal></expr>:</case>
				<if_stmt><if>if <condition>(<expr><call><name>GetAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'K'</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'L'</literal></expr>:</case>
				<if_stmt><if>if <condition>(<expr><call><name>GetAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'L'</literal></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* spanish e.g. 'cabrillo', 'gallegos' */</comment>
					<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>current</name> <operator>==</operator> <operator>(</operator><name>length</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator>
						 <operator>&amp;&amp;</operator> <call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"ILLO"</literal></expr></argument>,
									 <argument><expr><literal type="string">"ILLA"</literal></expr></argument>, <argument><expr><literal type="string">"ALLE"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>)</operator>
						<operator>||</operator> <operator>(</operator><operator>(</operator><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>last</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"AS"</literal></expr></argument>, <argument><expr><literal type="string">"OS"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
							 <operator>||</operator> <call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"A"</literal></expr></argument>, <argument><expr><literal type="string">"O"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>)</operator>
							<operator>&amp;&amp;</operator> <call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,
										<argument><expr><literal type="string">"ALLE"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"L"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
						<break>break;</break>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"L"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"L"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'M'</literal></expr>:</case>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"UMB"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
					 <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>current</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <name>last</name><operator>)</operator>
						 <operator>||</operator> <call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"ER"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator>
				<comment type="block">/* 'dumb','thumb' */</comment>
					<operator>||</operator> <operator>(</operator><call><name>GetAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'M'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"M"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"M"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'N'</literal></expr>:</case>
				<if_stmt><if>if <condition>(<expr><call><name>GetAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'N'</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"N"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"N"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'\xd1'</literal></expr>:</case>		<comment type="block">/* N with tilde */</comment>
				<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"N"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"N"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'P'</literal></expr>:</case>
				<if_stmt><if>if <condition>(<expr><call><name>GetAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'H'</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"F"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"F"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>

				<comment type="block">/* also account for "campbell", "raspberry" */</comment>
				<if_stmt><if>if <condition>(<expr><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"P"</literal></expr></argument>, <argument><expr><literal type="string">"B"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"P"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"P"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'Q'</literal></expr>:</case>
				<if_stmt><if>if <condition>(<expr><call><name>GetAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'Q'</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'R'</literal></expr>:</case>
				<comment type="block">/* french e.g. 'rogier', but exclude 'hochmeier' */</comment>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><name>current</name> <operator>==</operator> <name>last</name><operator>)</operator>
					<operator>&amp;&amp;</operator> <operator>!</operator><call><name>SlavoGermanic</name><argument_list>(<argument><expr><name>original</name></expr></argument>)</argument_list></call>
					<operator>&amp;&amp;</operator> <call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"IE"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
					<operator>&amp;&amp;</operator> <operator>!</operator><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"ME"</literal></expr></argument>, <argument><expr><literal type="string">"MA"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"R"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"R"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"R"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>GetAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'S'</literal></expr>:</case>
				<comment type="block">/* special cases 'island', 'isle', 'carlisle', 'carlysle' */</comment>
				<if_stmt><if>if <condition>(<expr><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"ISL"</literal></expr></argument>, <argument><expr><literal type="string">"YSL"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>

				<comment type="block">/* special case 'sugar-' */</comment>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><name>current</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>
					<operator>&amp;&amp;</operator> <call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"SUGAR"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"X"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"S"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"SH"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* germanic */</comment>
					<if_stmt><if>if <condition>(<expr><call><name>StringAt</name>
						<argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"HEIM"</literal></expr></argument>, <argument><expr><literal type="string">"HOEK"</literal></expr></argument>, <argument><expr><literal type="string">"HOLM"</literal></expr></argument>,
						 <argument><expr><literal type="string">"HOLZ"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"S"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"S"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if>
					<else>else
					<block>{<block_content>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"X"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"X"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></else></if_stmt>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>

				<comment type="block">/* italian &amp; armenian */</comment>
				<if_stmt><if>if <condition>(<expr><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"SIO"</literal></expr></argument>, <argument><expr><literal type="string">"SIA"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
					<operator>||</operator> <call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"SIAN"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SlavoGermanic</name><argument_list>(<argument><expr><name>original</name></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"S"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"X"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if>
					<else>else
					<block>{<block_content>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"S"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"S"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></else></if_stmt>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>

				<comment type="block">/*
				 * german &amp; anglicisations, e.g. 'smith' match 'schmidt',
				 * 'snider' match 'schneider' also, -sz- in slavic language
				 * although in hungarian it is pronounced 's'
				 */</comment>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>current</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>
					 <operator>&amp;&amp;</operator> <call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
								 <argument><expr><literal type="string">"M"</literal></expr></argument>, <argument><expr><literal type="string">"N"</literal></expr></argument>, <argument><expr><literal type="string">"L"</literal></expr></argument>, <argument><expr><literal type="string">"W"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>)</operator>
					<operator>||</operator> <call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Z"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"S"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"X"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Z"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"SC"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* Schlesinger's rule */</comment>
					<if_stmt><if>if <condition>(<expr><call><name>GetAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'H'</literal></expr>)</condition>
					<block>{<block_content>
						<comment type="block">/* dutch origin, e.g. 'school', 'schooner' */</comment>
						<if_stmt><if>if <condition>(<expr><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
									 <argument><expr><literal type="string">"OO"</literal></expr></argument>, <argument><expr><literal type="string">"ER"</literal></expr></argument>, <argument><expr><literal type="string">"EN"</literal></expr></argument>,
									 <argument><expr><literal type="string">"UY"</literal></expr></argument>, <argument><expr><literal type="string">"ED"</literal></expr></argument>, <argument><expr><literal type="string">"EM"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
						<block>{<block_content>
							<comment type="block">/* 'schermerhorn', 'schenker' */</comment>
							<if_stmt><if>if <condition>(<expr><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
										 <argument><expr><literal type="string">"ER"</literal></expr></argument>, <argument><expr><literal type="string">"EN"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
							<block>{<block_content>
								<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"X"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"SK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							</block_content>}</block></if>
							<else>else
							<block>{<block_content>
								<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"SK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"SK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							</block_content>}</block></else></if_stmt>
							<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
							<break>break;</break>
						</block_content>}</block></if>
						<else>else
						<block>{<block_content>
							<if_stmt><if>if <condition>(<expr><operator>(</operator><name>current</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IsVowel</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call>
								<operator>&amp;&amp;</operator> <operator>(</operator><call><name>GetAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'W'</literal><operator>)</operator></expr>)</condition>
							<block>{<block_content>
								<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"X"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"S"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							</block_content>}</block></if>
							<else>else
							<block>{<block_content>
								<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"X"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"X"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							</block_content>}</block></else></if_stmt>
							<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
							<break>break;</break>
						</block_content>}</block></else></if_stmt>
					</block_content>}</block></if></if_stmt>

					<if_stmt><if>if <condition>(<expr><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
								 <argument><expr><literal type="string">"I"</literal></expr></argument>, <argument><expr><literal type="string">"E"</literal></expr></argument>, <argument><expr><literal type="string">"Y"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"S"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"S"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
						<break>break;</break>
					</block_content>}</block></if></if_stmt>
					<comment type="block">/* else */</comment>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"SK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"SK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>

				<comment type="block">/* french e.g. 'resnais', 'artois' */</comment>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><name>current</name> <operator>==</operator> <name>last</name><operator>)</operator>
					<operator>&amp;&amp;</operator> <call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"AI"</literal></expr></argument>, <argument><expr><literal type="string">"OI"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"S"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"S"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"S"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"S"</literal></expr></argument>, <argument><expr><literal type="string">"Z"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'T'</literal></expr>:</case>
				<if_stmt><if>if <condition>(<expr><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"TION"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"X"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"X"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"TIA"</literal></expr></argument>, <argument><expr><literal type="string">"TCH"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"X"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"X"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"TH"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
					<operator>||</operator> <call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"TTH"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* special case 'thomas', 'thames' or germanic */</comment>
					<if_stmt><if>if <condition>(<expr><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"OM"</literal></expr></argument>, <argument><expr><literal type="string">"AM"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
						<operator>||</operator> <call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"VAN "</literal></expr></argument>, <argument><expr><literal type="string">"VON "</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
						<operator>||</operator> <call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"SCH"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"T"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"T"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if>
					<else>else
					<block>{<block_content>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"T"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></else></if_stmt>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"T"</literal></expr></argument>, <argument><expr><literal type="string">"D"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"T"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"T"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'V'</literal></expr>:</case>
				<if_stmt><if>if <condition>(<expr><call><name>GetAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'V'</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"F"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"F"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'W'</literal></expr>:</case>
				<comment type="block">/* can also be in middle of word */</comment>
				<if_stmt><if>if <condition>(<expr><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"WR"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"R"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"R"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><operator>(</operator><name>current</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>
					<operator>&amp;&amp;</operator> <operator>(</operator><call><name>IsVowel</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call>
						<operator>||</operator> <call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"WH"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* Wasserman should match Vasserman */</comment>
					<if_stmt><if>if <condition>(<expr><call><name>IsVowel</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"F"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if>
					<else>else
					<block>{<block_content>
						<comment type="block">/* need Uomo to match Womo */</comment>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></else></if_stmt>
				</block_content>}</block></if></if_stmt>

				<comment type="block">/* Arnow should match Arnoff */</comment>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>current</name> <operator>==</operator> <name>last</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>IsVowel</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator>
					<operator>||</operator> <call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"EWSKI"</literal></expr></argument>, <argument><expr><literal type="string">"EWSKY"</literal></expr></argument>,
								<argument><expr><literal type="string">"OWSKI"</literal></expr></argument>, <argument><expr><literal type="string">"OWSKY"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
					<operator>||</operator> <call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"SCH"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"F"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>

				<comment type="block">/* polish e.g. 'filipowicz' */</comment>
				<if_stmt><if>if <condition>(<expr><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"WICZ"</literal></expr></argument>, <argument><expr><literal type="string">"WITZ"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"TS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"FX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>

				<comment type="block">/* else skip it */</comment>
				<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'X'</literal></expr>:</case>
				<comment type="block">/* french e.g. breaux */</comment>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>current</name> <operator>==</operator> <name>last</name><operator>)</operator>
					  <operator>&amp;&amp;</operator> <operator>(</operator><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>,
								   <argument><expr><literal type="string">"IAU"</literal></expr></argument>, <argument><expr><literal type="string">"EAU"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
						  <operator>||</operator> <call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
									  <argument><expr><literal type="string">"AU"</literal></expr></argument>, <argument><expr><literal type="string">"OU"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"KS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"KS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>


				<if_stmt><if>if <condition>(<expr><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>, <argument><expr><literal type="string">"X"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<break>break;</break>

			<case>case <expr><literal type="char">'Z'</literal></expr>:</case>
				<comment type="block">/* chinese pinyin e.g. 'zhao' */</comment>
				<if_stmt><if>if <condition>(<expr><call><name>GetAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'H'</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"J"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"J"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><call><name>StringAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><operator>(</operator><name>current</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
								  <argument><expr><literal type="string">"ZO"</literal></expr></argument>, <argument><expr><literal type="string">"ZI"</literal></expr></argument>, <argument><expr><literal type="string">"ZA"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
						 <operator>||</operator> <operator>(</operator><call><name>SlavoGermanic</name><argument_list>(<argument><expr><name>original</name></expr></argument>)</argument_list></call>
							 <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>current</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator>
								 <operator>&amp;&amp;</operator> <call><name>GetAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'T'</literal><operator>)</operator><operator>)</operator></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"S"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"TS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="string">"S"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>MetaphAdd</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="string">"S"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>GetAt</name><argument_list>(<argument><expr><name>original</name></expr></argument>, <argument><expr><name>current</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'Z'</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<break>break;</break>

			<default>default:</default>
				<expr_stmt><expr><name>current</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></switch>

		<comment type="block">/*
		 * printf("PRIMARY: %s\n", primary-&gt;str); printf("SECONDARY: %s\n",
		 * secondary-&gt;str);
		 */</comment>
	</block_content>}</block></while>


	<if_stmt><if>if <condition>(<expr><name><name>primary</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>SetAt</name><argument_list>(<argument><expr><name>primary</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>secondary</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>SetAt</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>codes</name> <operator>=</operator> <name><name>primary</name><operator>-&gt;</operator><name>str</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><operator>++</operator><name>codes</name> <operator>=</operator> <name><name>secondary</name><operator>-&gt;</operator><name>str</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DestroyMetaString</name><argument_list>(<argument><expr><name>original</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>DestroyMetaString</name><argument_list>(<argument><expr><name>primary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>DestroyMetaString</name><argument_list>(<argument><expr><name>secondary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DMETAPHONE_MAIN</name></cpp:ifdef>

<comment type="block">/* just for testing - not part of the perl code */</comment>

<function><name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name><name>codes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>DoubleMetaphone</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>codes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s|%s\n"</literal></expr></argument>, <argument><expr><name><name>codes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>codes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
