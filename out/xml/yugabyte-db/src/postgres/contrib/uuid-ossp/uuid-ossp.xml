<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/contrib/uuid-ossp/uuid-ossp.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * UUID generation functions using the BSD, E2FS or OSSP UUID library
 *
 * Copyright (c) 2007-2018, PostgreSQL Global Development Group
 *
 * Portions Copyright (c) 2009 Andrew Gierth
 *
 * contrib/uuid-ossp/uuid-ossp.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"port/pg_bswap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/uuid.h"</cpp:file></cpp:include>

<comment type="block">/*
 * It's possible that there's more than one uuid.h header file present.
 * We expect configure to set the HAVE_ symbol for only the one we want.
 *
 * BSD includes a uuid_hash() function that conflicts with the one in
 * builtins.h; we #define it out of the way.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>uuid_hash</name></cpp:macro> <cpp:value>bsd_uuid_hash</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UUID_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uuid.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OSSP_UUID_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ossp/uuid.h&gt;</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UUID_UUID_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uuid/uuid.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"please use configure's --with-uuid switch to select a UUID library"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>uuid_hash</name></cpp:undef>

<comment type="block">/*
 * Some BSD variants offer md5 and sha1 implementations but Linux does not,
 * so we use a copy of the ones from pgcrypto.  Not needed with OSSP, though.
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_UUID_OSSP</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"md5.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sha1.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/* Check our UUID length against OSSP's; better both be 16 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UUID_OSSP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>UUID_LEN</name> <operator>!=</operator> <name>UUID_LEN_BIN</name><operator>)</operator></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> UUID length mismatch</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Define some constants like OSSP's, to make the code more readable */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_UUID_OSSP</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UUID_MAKE_MC</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UUID_MAKE_V1</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UUID_MAKE_V2</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UUID_MAKE_V3</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UUID_MAKE_V4</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UUID_MAKE_V5</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * A DCE 1.1 compatible source representation of UUIDs, derived from
 * the BSD implementation.  BSD already has this; OSSP doesn't need it.
 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UUID_E2FS</name></cpp:ifdef>
<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>uint32_t</name></type>	<name>time_low</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint16_t</name></type>	<name>time_mid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint16_t</name></type>	<name>time_hi_and_version</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8_t</name></type>		<name>clock_seq_hi_and_reserved</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8_t</name></type>		<name>clock_seq_low</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8_t</name></type>		<name><name>node</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>dce_uuid_t</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dce_uuid_t</name></cpp:macro> <cpp:value>uuid_t</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* If not OSSP, we need some endianness-manipulation macros */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_UUID_OSSP</name></cpp:ifndef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UUID_TO_NETWORK</name><parameter_list>(<parameter><type><name>uu</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>do { \
	uu.time_low = pg_hton32(uu.time_low); \
	uu.time_mid = pg_hton16(uu.time_mid); \
	uu.time_hi_and_version = pg_hton16(uu.time_hi_and_version); \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UUID_TO_LOCAL</name><parameter_list>(<parameter><type><name>uu</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>do { \
	uu.time_low = pg_ntoh32(uu.time_low); \
	uu.time_mid = pg_ntoh16(uu.time_mid); \
	uu.time_hi_and_version = pg_ntoh16(uu.time_hi_and_version); \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UUID_V3_OR_V5</name><parameter_list>(<parameter><type><name>uu</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>do { \
	uu.time_hi_and_version &amp;= 0x0FFF; \
	uu.time_hi_and_version |= (v &lt;&lt; 12); \
	uu.clock_seq_hi_and_reserved &amp;= 0x3F; \
	uu.clock_seq_hi_and_reserved |= 0x80; \
} while(0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* !HAVE_UUID_OSSP */</comment>

<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>uuid_nil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>uuid_ns_dns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>uuid_ns_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>uuid_ns_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>uuid_ns_x500</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>uuid_generate_v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>uuid_generate_v1mc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>uuid_generate_v3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>uuid_generate_v4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>uuid_generate_v5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UUID_OSSP</name></cpp:ifdef>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>pguuid_complain</name><parameter_list>(<parameter><decl><type><name>uuid_rc_t</name></type> <name>rc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>err</name> <init>= <expr><call><name>uuid_error</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_EXTERNAL_ROUTINE_EXCEPTION</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"OSSP uuid library failure: %s"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_EXTERNAL_ROUTINE_EXCEPTION</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"OSSP uuid library failure: error code %d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * We create a uuid_t object just once per session and re-use it for all
 * operations in this module.  OSSP UUID caches the system MAC address and
 * other state in this object.  Reusing the object has a number of benefits:
 * saving the cycles needed to fetch the system MAC address over and over,
 * reducing the amount of entropy we draw from /dev/urandom, and providing a
 * positive guarantee that successive generated V1-style UUIDs don't collide.
 * (On a machine fast enough to generate multiple UUIDs per microsecond,
 * or whatever the system's wall-clock resolution is, we'd otherwise risk
 * collisions whenever random initialization of the uuid_t's clock sequence
 * value chanced to produce duplicates.)
 *
 * However: when we're doing V3 or V5 UUID creation, uuid_make needs two
 * uuid_t objects, one holding the namespace UUID and one for the result.
 * It's unspecified whether it's safe to use the same uuid_t for both cases,
 * so let's cache a second uuid_t for use as the namespace holder object.
 */</comment>
<function><type><specifier>static</specifier> <name>uuid_t</name> <modifier>*</modifier></type>
<name>get_cached_uuid_t</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>which</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>uuid_t</name> <modifier>*</modifier></type><name><name>cached_uuid</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>cached_uuid</name><index>[<expr><name>which</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>uuid_rc_t</name></type>	<name>rc</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>uuid_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cached_uuid</name><index>[<expr><name>which</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>UUID_RC_OK</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>cached_uuid</name><index>[<expr><name>which</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pguuid_complain</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name><name>cached_uuid</name><index>[<expr><name>which</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>uuid_to_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uuid_t</name> <modifier>*</modifier></type><name>uuid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><name>UUID_LEN_STR</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>len</name> <init>= <expr><name>UUID_LEN_STR</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uuid_rc_t</name></type>	<name>rc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>uuid_export</name><argument_list>(<argument><expr><name>uuid</name></expr></argument>, <argument><expr><name>UUID_FMT_STR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>UUID_RC_OK</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pguuid_complain</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>string_to_uuid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>uuid_t</name> <modifier>*</modifier></type><name>uuid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uuid_rc_t</name></type>	<name>rc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>uuid_import</name><argument_list>(<argument><expr><name>uuid</name></expr></argument>, <argument><expr><name>UUID_FMT_STR</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>UUID_LEN_STR</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>UUID_RC_OK</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pguuid_complain</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>special_uuid_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uuid_t</name>	   <modifier>*</modifier></type><name>uuid</name> <init>= <expr><call><name>get_cached_uuid_t</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uuid_rc_t</name></type>	<name>rc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>uuid_load</name><argument_list>(<argument><expr><name>uuid</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>UUID_RC_OK</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pguuid_complain</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>uuid_to_string</name><argument_list>(<argument><expr><name>uuid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>uuid_in</name></expr></argument>, <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* len is unused with OSSP, but we want to have the same number of args */</comment>
<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>uuid_generate_internal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uuid_t</name> <modifier>*</modifier></type><name>ns</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uuid_t</name>	   <modifier>*</modifier></type><name>uuid</name> <init>= <expr><call><name>get_cached_uuid_t</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uuid_rc_t</name></type>	<name>rc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>uuid_make</name><argument_list>(<argument><expr><name>uuid</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>UUID_RC_OK</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pguuid_complain</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>uuid_to_string</name><argument_list>(<argument><expr><name>uuid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>uuid_in</name></expr></argument>, <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>uuid_generate_v35_internal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>pg_uuid_t</name> <modifier>*</modifier></type><name>ns</name></decl></parameter>, <parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uuid_t</name>	   <modifier>*</modifier></type><name>ns_uuid</name> <init>= <expr><call><name>get_cached_uuid_t</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>string_to_uuid</name><argument_list>(<argument><expr><call><name>DatumGetCString</name><argument_list>(<argument><expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>uuid_out</name></expr></argument>,
													   <argument><expr><call><name>UUIDPGetDatum</name><argument_list>(<argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
				   <argument><expr><name>ns_uuid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>uuid_generate_internal</name><argument_list>(<argument><expr><name>mode</name></expr></argument>,
								  <argument><expr><name>ns_uuid</name></expr></argument>,
								  <argument><expr><call><name>text_to_cstring</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>,
								  <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>							<comment type="block">/* !HAVE_UUID_OSSP */</comment>

<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>uuid_generate_internal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ns</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>strbuf</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>v</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><literal type="number">0</literal></expr>:</case>					<comment type="block">/* constant-value uuids */</comment>
			<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">37</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><literal type="number">1</literal></expr>:</case>					<comment type="block">/* time/node-based uuids */</comment>
			<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UUID_E2FS</name></cpp:ifdef>
				<decl_stmt><decl><type><name>uuid_t</name></type>		<name>uu</name></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>uuid_generate_time</name><argument_list>(<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>uuid_unparse</name><argument_list>(<argument><expr><name>uu</name></expr></argument>, <argument><expr><name>strbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/*
				 * PTR, if set, replaces the trailing characters of the uuid;
				 * this is to support v1mc, where a random multicast MAC is
				 * used instead of the physical one
				 */</comment>
				<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&lt;=</operator> <literal type="number">36</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>strbuf</name> <operator>+</operator> <operator>(</operator><literal type="number">36</literal> <operator>-</operator> <name>len</name><operator>)</operator></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>							<comment type="block">/* BSD */</comment>
				<decl_stmt><decl><type><name>uuid_t</name></type>		<name>uu</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>uint32_t</name></type>	<name>status</name> <init>= <expr><name>uuid_s_ok</name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>uuid_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>uuid_s_ok</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>uuid_to_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>uuid_s_ok</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">37</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<comment type="block">/*
						 * PTR, if set, replaces the trailing characters of
						 * the uuid; this is to support v1mc, where a random
						 * multicast MAC is used instead of the physical one
						 */</comment>
						<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&lt;=</operator> <literal type="number">36</literal></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>strbuf</name> <operator>+</operator> <operator>(</operator><literal type="number">36</literal> <operator>-</operator> <name>len</name><operator>)</operator></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
					</block_content>}</block></if></if_stmt>
					<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>uuid_s_ok</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_EXTERNAL_ROUTINE_EXCEPTION</name></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"uuid library failure: %d"</literal></expr></argument>,
									<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>status</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><literal type="number">3</literal></expr>:</case>					<comment type="block">/* namespace-based MD5 uuids */</comment>
		<case>case <expr><literal type="number">5</literal></expr>:</case>					<comment type="block">/* namespace-based SHA1 uuids */</comment>
			<block>{<block_content>
				<decl_stmt><decl><type><name>dce_uuid_t</name></type>	<name>uu</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UUID_BSD</name></cpp:ifdef>
				<decl_stmt><decl><type><name>uint32_t</name></type>	<name>status</name> <init>= <expr><name>uuid_s_ok</name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

				<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>MD5_CTX</name></type>		<name>ctx</name></decl>;</decl_stmt>

					<expr_stmt><expr><call><name>MD5Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>MD5Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uu</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>MD5Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="block">/* we assume sizeof MD5 result is 16, same as UUID size */</comment>
					<expr_stmt><expr><call><name>MD5Final</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>uu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<decl_stmt><decl><type><name>SHA1_CTX</name></type>	<name>ctx</name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>sha1result</name><index>[<expr><name>SHA1_RESULTLEN</name></expr>]</index></name></decl>;</decl_stmt>

					<expr_stmt><expr><call><name>SHA1Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>SHA1Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uu</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>SHA1Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>ptr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>SHA1Final</name><argument_list>(<argument><expr><name>sha1result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uu</name></expr></argument>, <argument><expr><name>sha1result</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uu</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>

				<comment type="block">/* the calculated hash is using local order */</comment>
				<expr_stmt><expr><call><name>UUID_TO_NETWORK</name><argument_list>(<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>UUID_V3_OR_V5</name><argument_list>(<argument><expr><name>uu</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UUID_E2FS</name></cpp:ifdef>
				<comment type="block">/* uuid_unparse expects local order */</comment>
				<expr_stmt><expr><call><name>UUID_TO_LOCAL</name><argument_list>(<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>uuid_unparse</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>uu</name></expr></argument>, <argument><expr><name>strbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>							<comment type="block">/* BSD */</comment>
				<expr_stmt><expr><call><name>uuid_to_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>uuid_s_ok</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">37</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name>str</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>uuid_s_ok</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_EXTERNAL_ROUTINE_EXCEPTION</name></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"uuid library failure: %d"</literal></expr></argument>,
									<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>status</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
				<break>break;</break>
			</block_content>}</block>

		<case>case <expr><literal type="number">4</literal></expr>:</case>					<comment type="block">/* random uuid */</comment>
		<default>default:</default>
			<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UUID_E2FS</name></cpp:ifdef>
				<decl_stmt><decl><type><name>uuid_t</name></type>		<name>uu</name></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>uuid_generate_random</name><argument_list>(<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>uuid_unparse</name><argument_list>(<argument><expr><name>uu</name></expr></argument>, <argument><expr><name>strbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>							<comment type="block">/* BSD */</comment>
				<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>strbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
						 <argument><expr><literal type="string">"%08lx-%04x-%04x-%04x-%04x%08lx"</literal></expr></argument>,
						 <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>arc4random</name><argument_list>()</argument_list></call></expr></argument>,
						 <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <operator>(</operator><call><name>arc4random</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr></argument>,
						 <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <operator>(</operator><operator>(</operator><call><name>arc4random</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0xfff</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x4000</literal><operator>)</operator></expr></argument>,
						 <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <operator>(</operator><operator>(</operator><call><name>arc4random</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0x3fff</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x8000</literal><operator>)</operator></expr></argument>,
						 <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <operator>(</operator><call><name>arc4random</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr></argument>,
						 <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>arc4random</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
				<break>break;</break>
			</block_content>}</block>
	</block_content>}</block></switch>

	<return>return <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>uuid_in</name></expr></argument>, <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>strbuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* HAVE_UUID_OSSP */</comment>


<function><type><name>Datum</name></type>
<name>uuid_nil</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UUID_OSSP</name></cpp:ifdef>
	<return>return <expr><call><name>special_uuid_value</name><argument_list>(<argument><expr><literal type="string">"nil"</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><call><name>uuid_generate_internal</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
								  <argument><expr><literal type="string">"00000000-0000-0000-0000-000000000000"</literal></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>uuid_ns_dns</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UUID_OSSP</name></cpp:ifdef>
	<return>return <expr><call><name>special_uuid_value</name><argument_list>(<argument><expr><literal type="string">"ns:DNS"</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><call><name>uuid_generate_internal</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
								  <argument><expr><literal type="string">"6ba7b810-9dad-11d1-80b4-00c04fd430c8"</literal></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>uuid_ns_url</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UUID_OSSP</name></cpp:ifdef>
	<return>return <expr><call><name>special_uuid_value</name><argument_list>(<argument><expr><literal type="string">"ns:URL"</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><call><name>uuid_generate_internal</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
								  <argument><expr><literal type="string">"6ba7b811-9dad-11d1-80b4-00c04fd430c8"</literal></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>uuid_ns_oid</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UUID_OSSP</name></cpp:ifdef>
	<return>return <expr><call><name>special_uuid_value</name><argument_list>(<argument><expr><literal type="string">"ns:OID"</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><call><name>uuid_generate_internal</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
								  <argument><expr><literal type="string">"6ba7b812-9dad-11d1-80b4-00c04fd430c8"</literal></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>uuid_ns_x500</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UUID_OSSP</name></cpp:ifdef>
	<return>return <expr><call><name>special_uuid_value</name><argument_list>(<argument><expr><literal type="string">"ns:X500"</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><call><name>uuid_generate_internal</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
								  <argument><expr><literal type="string">"6ba7b814-9dad-11d1-80b4-00c04fd430c8"</literal></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>uuid_generate_v1</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>uuid_generate_internal</name><argument_list>(<argument><expr><name>UUID_MAKE_V1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>uuid_generate_v1mc</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UUID_OSSP</name></cpp:ifdef>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UUID_E2FS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>strbuf</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uuid_t</name></type>		<name>uu</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>uuid_generate_random</name><argument_list>(<argument><expr><name>uu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* set IEEE802 multicast and local-admin bits */</comment>
	<expr_stmt><expr><operator>(</operator><operator>(</operator><name>dce_uuid_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>uu</name><operator>)</operator><operator>-&gt;</operator><name><name>node</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">0x03</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>uuid_unparse</name><argument_list>(<argument><expr><name>uu</name></expr></argument>, <argument><expr><name>strbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>strbuf</name> <operator>+</operator> <literal type="number">24</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>							<comment type="block">/* BSD */</comment>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>buf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

	<comment type="block">/* set IEEE802 multicast and local-admin bits */</comment>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"-%04x%08lx"</literal></expr></argument>,
			 <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <operator>(</operator><operator>(</operator><call><name>arc4random</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x0300</literal><operator>)</operator></expr></argument>,
			 <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>arc4random</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><call><name>uuid_generate_internal</name><argument_list>(<argument><expr><name>UUID_MAKE_V1</name> <operator>|</operator> <name>UUID_MAKE_MC</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
								  <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>uuid_generate_v3</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pg_uuid_t</name>  <modifier>*</modifier></type><name>ns</name> <init>= <expr><call><name>PG_GETARG_UUID_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UUID_OSSP</name></cpp:ifdef>
	<return>return <expr><call><name>uuid_generate_v35_internal</name><argument_list>(<argument><expr><name>UUID_MAKE_V3</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><call><name>uuid_generate_internal</name><argument_list>(<argument><expr><name>UUID_MAKE_V3</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>ns</name></expr></argument>,
								  <argument><expr><call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>uuid_generate_v4</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>uuid_generate_internal</name><argument_list>(<argument><expr><name>UUID_MAKE_V4</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>Datum</name></type>
<name>uuid_generate_v5</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pg_uuid_t</name>  <modifier>*</modifier></type><name>ns</name> <init>= <expr><call><name>PG_GETARG_UUID_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UUID_OSSP</name></cpp:ifdef>
	<return>return <expr><call><name>uuid_generate_v35_internal</name><argument_list>(<argument><expr><name>UUID_MAKE_V5</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><call><name>uuid_generate_internal</name><argument_list>(<argument><expr><name>UUID_MAKE_V5</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>ns</name></expr></argument>,
								  <argument><expr><call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
