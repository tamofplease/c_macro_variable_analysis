<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/contrib/xml2/xpath.c"><comment type="block">/*
 * contrib/xml2/xpath.c
 *
 * Parser interface for DOM-based parser (libxml) rather than
 * stream-based SAX-type parser
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/spi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/stringinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/xml.h"</cpp:file></cpp:include>

<comment type="block">/* libxml includes */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libxml/xpath.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libxml/tree.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libxml/xmlmemory.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libxml/xmlerror.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libxml/parserInternals.h&gt;</cpp:file></cpp:include>

<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<comment type="block">/* exported for use by xslt_proc.c */</comment>

<function_decl><type><name>PgXmlErrorContext</name> <modifier>*</modifier></type><name>pgxml_parser_init</name><parameter_list>(<parameter><decl><type><name>PgXmlStrictness</name></type> <name>strictness</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* workspace for pgxml_xpath() */</comment>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>xmlDocPtr</name></type>	<name>doctree</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>xmlXPathContextPtr</name></type> <name>ctxt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>xmlXPathObjectPtr</name></type> <name>res</name></decl>;</decl_stmt>
}</block></struct></type> <name>xpath_workspace</name>;</typedef>

<comment type="block">/* local declarations */</comment>

<function_decl><type><specifier>static</specifier> <name>xmlChar</name> <modifier>*</modifier></type><name>pgxmlNodeSetToText</name><parameter_list>(<parameter><decl><type><name>xmlNodeSetPtr</name></type> <name>nodeset</name></decl></parameter>,
				   <parameter><decl><type><name>xmlChar</name> <modifier>*</modifier></type><name>toptagname</name></decl></parameter>, <parameter><decl><type><name>xmlChar</name> <modifier>*</modifier></type><name>septagname</name></decl></parameter>,
				   <parameter><decl><type><name>xmlChar</name> <modifier>*</modifier></type><name>plainsep</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>text</name> <modifier>*</modifier></type><name>pgxml_result_to_text</name><parameter_list>(<parameter><decl><type><name>xmlXPathObjectPtr</name></type> <name>res</name></decl></parameter>, <parameter><decl><type><name>xmlChar</name> <modifier>*</modifier></type><name>toptag</name></decl></parameter>,
					 <parameter><decl><type><name>xmlChar</name> <modifier>*</modifier></type><name>septag</name></decl></parameter>, <parameter><decl><type><name>xmlChar</name> <modifier>*</modifier></type><name>plainsep</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>xmlChar</name> <modifier>*</modifier></type><name>pgxml_texttoxmlchar</name><parameter_list>(<parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>textstring</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>xmlXPathObjectPtr</name></type> <name>pgxml_xpath</name><parameter_list>(<parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>document</name></decl></parameter>, <parameter><decl><type><name>xmlChar</name> <modifier>*</modifier></type><name>xpath</name></decl></parameter>,
			<parameter><decl><type><name>xpath_workspace</name> <modifier>*</modifier></type><name>workspace</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cleanup_workspace</name><parameter_list>(<parameter><decl><type><name>xpath_workspace</name> <modifier>*</modifier></type><name>workspace</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * Initialize for xml parsing.
 *
 * As with the underlying pg_xml_init function, calls to this MUST be followed
 * by a PG_TRY block that guarantees that pg_xml_done is called.
 */</comment>
<function><type><name>PgXmlErrorContext</name> <modifier>*</modifier></type>
<name>pgxml_parser_init</name><parameter_list>(<parameter><decl><type><name>PgXmlStrictness</name></type> <name>strictness</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PgXmlErrorContext</name> <modifier>*</modifier></type><name>xmlerrcxt</name></decl>;</decl_stmt>

	<comment type="block">/* Set up error handling (we share the core's error handler) */</comment>
	<expr_stmt><expr><name>xmlerrcxt</name> <operator>=</operator> <call><name>pg_xml_init</name><argument_list>(<argument><expr><name>strictness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Note: we're assuming an elog cannot be thrown by the following calls */</comment>

	<comment type="block">/* Initialize libxml */</comment>
	<expr_stmt><expr><call><name>xmlInitParser</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>xmlSubstituteEntitiesDefault</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>xmlLoadExtDtdDefaultValue</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<return>return <expr><name>xmlerrcxt</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Returns true if document is well-formed
 *
 * Note: this has been superseded by a core function.  We still have to
 * have it in the contrib module so that existing SQL-level references
 * to the function won't fail; but in normal usage with up-to-date SQL
 * definitions for the contrib module, this won't be called.
 */</comment>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>xml_is_well_formed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type>
<name>xml_is_well_formed</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>	<comment type="block">/* document buffer */</comment>
	<decl_stmt><decl><type><name>bool</name></type>		<name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>docsize</name> <init>= <expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>xmlDocPtr</name></type>	<name>doctree</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PgXmlErrorContext</name> <modifier>*</modifier></type><name>xmlerrcxt</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>xmlerrcxt</name> <operator>=</operator> <call><name>pgxml_parser_init</name><argument_list>(<argument><expr><name>PG_XML_STRICTNESS_LEGACY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><name>doctree</name> <operator>=</operator> <call><name>xmlParseMemory</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>docsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>doctree</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>doctree</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>xmlFreeDoc</name><argument_list>(<argument><expr><name>doctree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pg_xml_done</name><argument_list>(<argument><expr><name>xmlerrcxt</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pg_xml_done</name><argument_list>(<argument><expr><name>xmlerrcxt</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* Encodes special characters (&lt;, &gt;, &amp;, " and \r) as XML entities */</comment>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>xml_encode_special_chars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type>
<name>xml_encode_special_chars</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>tin</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>tout</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>xmlChar</name>    <modifier>*</modifier></type><name>ts</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>tt</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>pgxml_texttoxmlchar</name><argument_list>(<argument><expr><name>tin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tt</name> <operator>=</operator> <call><name>xmlEncodeSpecialChars</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tout</name> <operator>=</operator> <call><name>cstring_to_text</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>tt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>xmlFree</name><argument_list>(<argument><expr><name>tt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><name>tout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Function translates a nodeset into a text representation
 *
 * iterates over each node in the set and calls xmlNodeDump to write it to
 * an xmlBuffer -from which an xmlChar * string is returned.
 *
 * each representation is surrounded by &lt;tagname&gt; ... &lt;/tagname&gt;
 *
 * plainsep is an ordinary (not tag) separator - if used, then nodes are
 * cast to string as output method
 */</comment>
<function><type><specifier>static</specifier> <name>xmlChar</name> <modifier>*</modifier></type>
<name>pgxmlNodeSetToText</name><parameter_list>(<parameter><decl><type><name>xmlNodeSetPtr</name></type> <name>nodeset</name></decl></parameter>,
				   <parameter><decl><type><name>xmlChar</name> <modifier>*</modifier></type><name>toptagname</name></decl></parameter>,
				   <parameter><decl><type><name>xmlChar</name> <modifier>*</modifier></type><name>septagname</name></decl></parameter>,
				   <parameter><decl><type><name>xmlChar</name> <modifier>*</modifier></type><name>plainsep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>xmlBufferPtr</name></type> <name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>xmlChar</name>    <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>xmlBufferCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>toptagname</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>xmlStrlen</name><argument_list>(<argument><expr><name>toptagname</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>xmlBufferWriteChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"&lt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>xmlBufferWriteCHAR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>toptagname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>xmlBufferWriteChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>nodeset</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>nodeset</name><operator>-&gt;</operator><name>nodeNr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>plainsep</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>xmlBufferWriteCHAR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,
								   <argument><expr><call><name>xmlXPathCastNodeToString</name><argument_list>(<argument><expr><name><name>nodeset</name><operator>-&gt;</operator><name>nodeTab</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* If this isn't the last entry, write the plain sep. */</comment>
				<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name><name>nodeset</name><operator>-&gt;</operator><name>nodeNr</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>xmlBufferWriteChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>plainsep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><name>septagname</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>xmlStrlen</name><argument_list>(<argument><expr><name>septagname</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>xmlBufferWriteChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"&lt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>xmlBufferWriteCHAR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>septagname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>xmlBufferWriteChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><call><name>xmlNodeDump</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,
							<argument><expr><name><name>nodeset</name><operator>-&gt;</operator><name>nodeTab</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>doc</name></expr></argument>,
							<argument><expr><name><name>nodeset</name><operator>-&gt;</operator><name>nodeTab</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
							<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><operator>(</operator><name>septagname</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>xmlStrlen</name><argument_list>(<argument><expr><name>septagname</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>xmlBufferWriteChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"&lt;/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>xmlBufferWriteCHAR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>septagname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>xmlBufferWriteChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>toptagname</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>xmlStrlen</name><argument_list>(<argument><expr><name>toptagname</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>xmlBufferWriteChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"&lt;/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>xmlBufferWriteCHAR</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>toptagname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>xmlBufferWriteChar</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>xmlStrdup</name><argument_list>(<argument><expr><name><name>buf</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>xmlBufferFree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Translate a PostgreSQL "varlena" -i.e. a variable length parameter
 * into the libxml2 representation
 */</comment>
<function><type><specifier>static</specifier> <name>xmlChar</name> <modifier>*</modifier></type>
<name>pgxml_texttoxmlchar</name><parameter_list>(<parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>textstring</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>xmlChar</name> <operator>*</operator><operator>)</operator> <call><name>text_to_cstring</name><argument_list>(<argument><expr><name>textstring</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Publicly visible XPath functions */</comment>

<comment type="block">/*
 * This is a "raw" xpath function. Check that it returns child elements
 * properly
 */</comment>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>xpath_nodeset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type>
<name>xpath_nodeset</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>document</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>xpathsupp</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>	<comment type="block">/* XPath expression */</comment>
	<decl_stmt><decl><type><name>xmlChar</name>    <modifier>*</modifier></type><name>toptag</name> <init>= <expr><call><name>pgxml_texttoxmlchar</name><argument_list>(<argument><expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>xmlChar</name>    <modifier>*</modifier></type><name>septag</name> <init>= <expr><call><name>pgxml_texttoxmlchar</name><argument_list>(<argument><expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>xmlChar</name>    <modifier>*</modifier></type><name>xpath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>xpres</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>xmlXPathObjectPtr</name></type> <name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>xpath_workspace</name></type> <name>workspace</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>xpath</name> <operator>=</operator> <call><name>pgxml_texttoxmlchar</name><argument_list>(<argument><expr><name>xpathsupp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgxml_xpath</name><argument_list>(<argument><expr><name>document</name></expr></argument>, <argument><expr><name>xpath</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>workspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>xpres</name> <operator>=</operator> <call><name>pgxml_result_to_text</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>toptag</name></expr></argument>, <argument><expr><name>septag</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>cleanup_workspace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>workspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>xpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>xpres</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><name>xpres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * The following function is almost identical, but returns the elements in
 * a list.
 */</comment>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>xpath_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type>
<name>xpath_list</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>document</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>xpathsupp</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>	<comment type="block">/* XPath expression */</comment>
	<decl_stmt><decl><type><name>xmlChar</name>    <modifier>*</modifier></type><name>plainsep</name> <init>= <expr><call><name>pgxml_texttoxmlchar</name><argument_list>(<argument><expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>xmlChar</name>    <modifier>*</modifier></type><name>xpath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>xpres</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>xmlXPathObjectPtr</name></type> <name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>xpath_workspace</name></type> <name>workspace</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>xpath</name> <operator>=</operator> <call><name>pgxml_texttoxmlchar</name><argument_list>(<argument><expr><name>xpathsupp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgxml_xpath</name><argument_list>(<argument><expr><name>document</name></expr></argument>, <argument><expr><name>xpath</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>workspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>xpres</name> <operator>=</operator> <call><name>pgxml_result_to_text</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>plainsep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>cleanup_workspace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>workspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>xpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>xpres</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><name>xpres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>xpath_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type>
<name>xpath_string</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>document</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>xpathsupp</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>	<comment type="block">/* XPath expression */</comment>
	<decl_stmt><decl><type><name>xmlChar</name>    <modifier>*</modifier></type><name>xpath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>pathsize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>xpres</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>xmlXPathObjectPtr</name></type> <name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>xpath_workspace</name></type> <name>workspace</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>pathsize</name> <operator>=</operator> <call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>xpathsupp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * We encapsulate the supplied path with "string()" = 8 chars + 1 for NUL
	 * at end
	 */</comment>
	<comment type="block">/* We could try casting to string using the libxml function? */</comment>

	<expr_stmt><expr><name>xpath</name> <operator>=</operator> <operator>(</operator><name>xmlChar</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>pathsize</name> <operator>+</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>xpath</name></expr></argument>, <argument><expr><literal type="string">"string("</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>xpath</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>xpathsupp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pathsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>xpath</name><index>[<expr><name>pathsize</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="char">')'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>xpath</name><index>[<expr><name>pathsize</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgxml_xpath</name><argument_list>(<argument><expr><name>document</name></expr></argument>, <argument><expr><name>xpath</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>workspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>xpres</name> <operator>=</operator> <call><name>pgxml_result_to_text</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>cleanup_workspace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>workspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>xpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>xpres</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><name>xpres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>xpath_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type>
<name>xpath_number</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>document</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>xpathsupp</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>	<comment type="block">/* XPath expression */</comment>
	<decl_stmt><decl><type><name>xmlChar</name>    <modifier>*</modifier></type><name>xpath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float4</name></type>		<name>fRes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>xmlXPathObjectPtr</name></type> <name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>xpath_workspace</name></type> <name>workspace</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>xpath</name> <operator>=</operator> <call><name>pgxml_texttoxmlchar</name><argument_list>(<argument><expr><name>xpathsupp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgxml_xpath</name><argument_list>(<argument><expr><name>document</name></expr></argument>, <argument><expr><name>xpath</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>workspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>xpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>fRes</name> <operator>=</operator> <call><name>xmlXPathCastToNumber</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>cleanup_workspace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>workspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>xmlXPathIsNaN</name><argument_list>(<argument><expr><name>fRes</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_FLOAT4</name><argument_list>(<argument><expr><name>fRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>xpath_bool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type>
<name>xpath_bool</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>document</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>xpathsupp</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>	<comment type="block">/* XPath expression */</comment>
	<decl_stmt><decl><type><name>xmlChar</name>    <modifier>*</modifier></type><name>xpath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>bRes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>xmlXPathObjectPtr</name></type> <name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>xpath_workspace</name></type> <name>workspace</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>xpath</name> <operator>=</operator> <call><name>pgxml_texttoxmlchar</name><argument_list>(<argument><expr><name>xpathsupp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgxml_xpath</name><argument_list>(<argument><expr><name>document</name></expr></argument>, <argument><expr><name>xpath</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>workspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>xpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>bRes</name> <operator>=</operator> <call><name>xmlXPathCastToBoolean</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>cleanup_workspace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>workspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>bRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<comment type="block">/* Core function to evaluate XPath query */</comment>

<function><type><specifier>static</specifier> <name>xmlXPathObjectPtr</name></type>
<name>pgxml_xpath</name><parameter_list>(<parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>document</name></decl></parameter>, <parameter><decl><type><name>xmlChar</name> <modifier>*</modifier></type><name>xpath</name></decl></parameter>, <parameter><decl><type><name>xpath_workspace</name> <modifier>*</modifier></type><name>workspace</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type>		<name>docsize</name> <init>= <expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>document</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PgXmlErrorContext</name> <modifier>*</modifier></type><name>xmlerrcxt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>xmlXPathCompExprPtr</name></type> <name>comppath</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>workspace</name><operator>-&gt;</operator><name>doctree</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>workspace</name><operator>-&gt;</operator><name>ctxt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>workspace</name><operator>-&gt;</operator><name>res</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>xmlerrcxt</name> <operator>=</operator> <call><name>pgxml_parser_init</name><argument_list>(<argument><expr><name>PG_XML_STRICTNESS_LEGACY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><name><name>workspace</name><operator>-&gt;</operator><name>doctree</name></name> <operator>=</operator> <call><name>xmlParseMemory</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>document</name></expr></argument>)</argument_list></call></expr></argument>,
											<argument><expr><name>docsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>workspace</name><operator>-&gt;</operator><name>doctree</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>workspace</name><operator>-&gt;</operator><name>ctxt</name></name> <operator>=</operator> <call><name>xmlXPathNewContext</name><argument_list>(<argument><expr><name><name>workspace</name><operator>-&gt;</operator><name>doctree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>workspace</name><operator>-&gt;</operator><name>ctxt</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <call><name>xmlDocGetRootElement</name><argument_list>(<argument><expr><name><name>workspace</name><operator>-&gt;</operator><name>doctree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* compile the path */</comment>
			<expr_stmt><expr><name>comppath</name> <operator>=</operator> <call><name>xmlXPathCompile</name><argument_list>(<argument><expr><name>xpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>comppath</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>xml_ereport</name><argument_list>(<argument><expr><name>xmlerrcxt</name></expr></argument>, <argument><expr><name>ERROR</name></expr></argument>, <argument><expr><name>ERRCODE_EXTERNAL_ROUTINE_EXCEPTION</name></expr></argument>,
							<argument><expr><literal type="string">"XPath Syntax Error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<comment type="block">/* Now evaluate the path expression. */</comment>
			<expr_stmt><expr><name><name>workspace</name><operator>-&gt;</operator><name>res</name></name> <operator>=</operator> <call><name>xmlXPathCompiledEval</name><argument_list>(<argument><expr><name>comppath</name></expr></argument>, <argument><expr><name><name>workspace</name><operator>-&gt;</operator><name>ctxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>xmlXPathFreeCompExpr</name><argument_list>(<argument><expr><name>comppath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><call><name>cleanup_workspace</name><argument_list>(<argument><expr><name>workspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>pg_xml_done</name><argument_list>(<argument><expr><name>xmlerrcxt</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>workspace</name><operator>-&gt;</operator><name>res</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>cleanup_workspace</name><argument_list>(<argument><expr><name>workspace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>pg_xml_done</name><argument_list>(<argument><expr><name>xmlerrcxt</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name><name>workspace</name><operator>-&gt;</operator><name>res</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Clean up after processing the result of pgxml_xpath() */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>cleanup_workspace</name><parameter_list>(<parameter><decl><type><name>xpath_workspace</name> <modifier>*</modifier></type><name>workspace</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>workspace</name><operator>-&gt;</operator><name>res</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>xmlXPathFreeObject</name><argument_list>(<argument><expr><name><name>workspace</name><operator>-&gt;</operator><name>res</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>workspace</name><operator>-&gt;</operator><name>res</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>workspace</name><operator>-&gt;</operator><name>ctxt</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>xmlXPathFreeContext</name><argument_list>(<argument><expr><name><name>workspace</name><operator>-&gt;</operator><name>ctxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>workspace</name><operator>-&gt;</operator><name>ctxt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>workspace</name><operator>-&gt;</operator><name>doctree</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>xmlFreeDoc</name><argument_list>(<argument><expr><name><name>workspace</name><operator>-&gt;</operator><name>doctree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>workspace</name><operator>-&gt;</operator><name>doctree</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>text</name> <modifier>*</modifier></type>
<name>pgxml_result_to_text</name><parameter_list>(<parameter><decl><type><name>xmlXPathObjectPtr</name></type> <name>res</name></decl></parameter>,
					 <parameter><decl><type><name>xmlChar</name> <modifier>*</modifier></type><name>toptag</name></decl></parameter>,
					 <parameter><decl><type><name>xmlChar</name> <modifier>*</modifier></type><name>septag</name></decl></parameter>,
					 <parameter><decl><type><name>xmlChar</name> <modifier>*</modifier></type><name>plainsep</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>xmlChar</name>    <modifier>*</modifier></type><name>xpresstr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>xpres</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>XPATH_NODESET</name></expr>:</case>
			<expr_stmt><expr><name>xpresstr</name> <operator>=</operator> <call><name>pgxmlNodeSetToText</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>nodesetval</name></name></expr></argument>,
										  <argument><expr><name>toptag</name></expr></argument>,
										  <argument><expr><name>septag</name></expr></argument>, <argument><expr><name>plainsep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>XPATH_STRING</name></expr>:</case>
			<expr_stmt><expr><name>xpresstr</name> <operator>=</operator> <call><name>xmlStrdup</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>stringval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"unsupported XQuery result: %d"</literal></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>xpresstr</name> <operator>=</operator> <call><name>xmlStrdup</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>xmlChar</name> <operator>*</operator><operator>)</operator> <literal type="string">"&lt;unsupported/&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<comment type="block">/* Now convert this result back to text */</comment>
	<expr_stmt><expr><name>xpres</name> <operator>=</operator> <call><name>cstring_to_text</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>xpresstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Free various storage */</comment>
	<expr_stmt><expr><call><name>xmlFree</name><argument_list>(<argument><expr><name>xpresstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>xpres</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * xpath_table is a table function. It needs some tidying (as do the
 * other functions here!
 */</comment>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>xpath_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>Datum</name></type>
<name>xpath_table</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Function parameters */</comment>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>pkeyfield</name> <init>= <expr><call><name>text_to_cstring</name><argument_list>(<argument><expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>xmlfield</name> <init>= <expr><call><name>text_to_cstring</name><argument_list>(<argument><expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>relname</name> <init>= <expr><call><name>text_to_cstring</name><argument_list>(<argument><expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>xpathset</name> <init>= <expr><call><name>text_to_cstring</name><argument_list>(<argument><expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>condition</name> <init>= <expr><call><name>text_to_cstring</name><argument_list>(<argument><expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* SPI (input tuple) support */</comment>
	<decl_stmt><decl><type><name>SPITupleTable</name> <modifier>*</modifier></type><name>tuptable</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>spi_tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>spi_tupdesc</name></decl>;</decl_stmt>

	<comment type="block">/* Output tuple (tuplestore) support */</comment>
	<decl_stmt><decl><type><name>Tuplestorestate</name> <modifier>*</modifier></type><name>tupstore</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>ret_tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>ret_tuple</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>ReturnSetInfo</name> <modifier>*</modifier></type><name>rsinfo</name> <init>= <expr><operator>(</operator><name>ReturnSetInfo</name> <operator>*</operator><operator>)</operator> <name><name>fcinfo</name><operator>-&gt;</operator><name>resultinfo</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AttInMetadata</name> <modifier>*</modifier></type><name>attinmeta</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>per_query_ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>char</name>	  <modifier>*</modifier><modifier>*</modifier></type><name>values</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>xmlChar</name>   <modifier>*</modifier><modifier>*</modifier></type><name>xpaths</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pathsep</name> <init>= <expr><literal type="string">"|"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type>			<name>numpaths</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>proc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>rownr</name></decl>;</decl_stmt>			<comment type="block">/* For issuing multiple rows from one original
								 * document */</comment>
	<decl_stmt><decl><type><name>bool</name></type>		<name>had_values</name></decl>;</decl_stmt>		<comment type="block">/* To determine end of nodeset results */</comment>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>query_buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PgXmlErrorContext</name> <modifier>*</modifier></type><name>xmlerrcxt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>xmlDocPtr</name></type> <name>doctree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* We only have a valid tuple description in table function mode */</comment>
	<if_stmt><if>if <condition>(<expr><name>rsinfo</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name>rsinfo</name></expr></argument>, <argument><expr><name>ReturnSetInfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"set-valued function called in context that cannot accept a set"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>rsinfo</name><operator>-&gt;</operator><name>expectedDesc</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"xpath_table must be called as a table function"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * We want to materialise because it means that we don't have to carry
	 * libxml2 parser state between invocations of this function
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>rsinfo</name><operator>-&gt;</operator><name>allowedModes</name></name> <operator>&amp;</operator> <name>SFRM_Materialize</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"xpath_table requires Materialize mode, but it is not "</literal>
						<literal type="string">"allowed in this context"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * The tuplestore must exist in a higher context than this function call
	 * (per_query_ctx is used)
	 */</comment>
	<expr_stmt><expr><name>per_query_ctx</name> <operator>=</operator> <name><name>rsinfo</name><operator>-&gt;</operator><name>econtext</name><operator>-&gt;</operator><name>ecxt_per_query_memory</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>per_query_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Create the tuplestore - work_mem is the max in-memory size before a
	 * file is created on disk to hold it.
	 */</comment>
	<expr_stmt><expr><name>tupstore</name> <operator>=</operator>
		<call><name>tuplestore_begin_heap</name><argument_list>(<argument><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>allowedModes</name></name> <operator>&amp;</operator> <name>SFRM_Materialize_Random</name></expr></argument>,
							  <argument><expr><name>false</name></expr></argument>, <argument><expr><name>work_mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* get the requested return tuple description */</comment>
	<expr_stmt><expr><name>ret_tupdesc</name> <operator>=</operator> <call><name>CreateTupleDescCopy</name><argument_list>(<argument><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>expectedDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* must have at least one output column (for the pkey) */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>ret_tupdesc</name><operator>-&gt;</operator><name>natts</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_SYNTAX_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"xpath_table must have at least one output column"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * At the moment we assume that the returned attributes make sense for the
	 * XPath specified (i.e. we trust the caller). It's not fatal if they get
	 * it wrong - the input function for the column type will raise an error
	 * if the path result can't be converted into the correct binary
	 * representation.
	 */</comment>

	<expr_stmt><expr><name>attinmeta</name> <operator>=</operator> <call><name>TupleDescGetAttInMetadata</name><argument_list>(<argument><expr><name>ret_tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Set return mode and allocate value space. */</comment>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>returnMode</name></name> <operator>=</operator> <name>SFRM_Materialize</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>setDesc</name></name> <operator>=</operator> <name>ret_tupdesc</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>values</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name><name>ret_tupdesc</name><operator>-&gt;</operator><name>natts</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>xpaths</name> <operator>=</operator> <operator>(</operator><name>xmlChar</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name><name>ret_tupdesc</name><operator>-&gt;</operator><name>natts</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>xmlChar</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Split XPaths. xpathset is a writable CString.
	 *
	 * Note that we stop splitting once we've done all needed for tupdesc
	 */</comment>
	<expr_stmt><expr><name>numpaths</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>xpathset</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>numpaths</name> <operator>&lt;</operator> <operator>(</operator><name><name>ret_tupdesc</name><operator>-&gt;</operator><name>natts</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>xpaths</name><index>[<expr><name>numpaths</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>xmlChar</name> <operator>*</operator><operator>)</operator> <name>pos</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>pos</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>pathsep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<break>break;</break></block_content></block></else></if_stmt>
	</block_content>}</block></while>

	<comment type="block">/* Now build query */</comment>
	<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>query_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Build initial sql statement */</comment>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>query_buf</name></expr></argument>, <argument><expr><literal type="string">"SELECT %s, %s FROM %s WHERE %s"</literal></expr></argument>,
					 <argument><expr><name>pkeyfield</name></expr></argument>,
					 <argument><expr><name>xmlfield</name></expr></argument>,
					 <argument><expr><name>relname</name></expr></argument>,
					 <argument><expr><name>condition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>SPI_connect</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"xpath_table: SPI_connect returned %d"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>SPI_exec</name><argument_list>(<argument><expr><name><name>query_buf</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SPI_OK_SELECT</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"xpath_table: SPI execution failed for query %s"</literal></expr></argument>,
			 <argument><expr><name><name>query_buf</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>proc</name> <operator>=</operator> <name>SPI_processed</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>tuptable</name> <operator>=</operator> <name>SPI_tuptable</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>spi_tupdesc</name> <operator>=</operator> <name><name>tuptable</name><operator>-&gt;</operator><name>tupdesc</name></name></expr>;</expr_stmt>

	<comment type="block">/* Switch out of SPI context */</comment>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Check that SPI returned correct result. If you put a comma into one of
	 * the function parameters, this will catch it when the SPI query returns
	 * e.g. 3 columns.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>spi_tupdesc</name><operator>-&gt;</operator><name>natts</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
						<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"expression returning multiple columns is not valid in parameter list"</literal></expr></argument>)</argument_list></call><operator>,</operator>
						<call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Expected two columns in SPI result, got %d."</literal></expr></argument>, <argument><expr><name><name>spi_tupdesc</name><operator>-&gt;</operator><name>natts</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Setup the parser.  This should happen after we are done evaluating the
	 * query, in case it calls functions that set up libxml differently.
	 */</comment>
	<expr_stmt><expr><name>xmlerrcxt</name> <operator>=</operator> <call><name>pgxml_parser_init</name><argument_list>(<argument><expr><name>PG_XML_STRICTNESS_LEGACY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<comment type="block">/* For each row i.e. document returned from SPI */</comment>
		<decl_stmt><decl><type><name>uint64</name></type>		<name>i</name></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>proc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>pkey</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>xmldoc</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>xmlXPathContextPtr</name></type> <name>ctxt</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>xmlXPathObjectPtr</name></type> <name>res</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>xmlChar</name>    <modifier>*</modifier></type><name>resstr</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>xmlXPathCompExprPtr</name></type> <name>comppath</name></decl>;</decl_stmt>

			<comment type="block">/* Extract the row data as C Strings */</comment>
			<expr_stmt><expr><name>spi_tuple</name> <operator>=</operator> <name><name>tuptable</name><operator>-&gt;</operator><name>vals</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>pkey</name> <operator>=</operator> <call><name>SPI_getvalue</name><argument_list>(<argument><expr><name>spi_tuple</name></expr></argument>, <argument><expr><name>spi_tupdesc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>xmldoc</name> <operator>=</operator> <call><name>SPI_getvalue</name><argument_list>(<argument><expr><name>spi_tuple</name></expr></argument>, <argument><expr><name>spi_tupdesc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * Clear the values array, so that not-well-formed documents
			 * return NULL in all columns.  Note that this also means that
			 * spare columns will be NULL.
			 */</comment>
			<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>ret_tupdesc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>

			<comment type="block">/* Insert primary key */</comment>
			<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>pkey</name></expr>;</expr_stmt>

			<comment type="block">/* Parse the document */</comment>
			<if_stmt><if>if <condition>(<expr><name>xmldoc</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>doctree</name> <operator>=</operator> <call><name>xmlParseMemory</name><argument_list>(<argument><expr><name>xmldoc</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>xmldoc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>				<comment type="block">/* treat NULL as not well-formed */</comment>
				<expr_stmt><expr><name>doctree</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>doctree</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* not well-formed, so output all-NULL tuple */</comment>
				<expr_stmt><expr><name>ret_tuple</name> <operator>=</operator> <call><name>BuildTupleFromCStrings</name><argument_list>(<argument><expr><name>attinmeta</name></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>tuplestore_puttuple</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>, <argument><expr><name>ret_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>heap_freetuple</name><argument_list>(<argument><expr><name>ret_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/* New loop here - we have to deal with nodeset results */</comment>
				<expr_stmt><expr><name>rownr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

				<do>do
				<block>{<block_content>
					<comment type="block">/* Now evaluate the set of xpaths. */</comment>
					<expr_stmt><expr><name>had_values</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
					<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numpaths</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
					<block>{<block_content>
						<expr_stmt><expr><name>ctxt</name> <operator>=</operator> <call><name>xmlXPathNewContext</name><argument_list>(<argument><expr><name>doctree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>ctxt</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <call><name>xmlDocGetRootElement</name><argument_list>(<argument><expr><name>doctree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<comment type="block">/* compile the path */</comment>
						<expr_stmt><expr><name>comppath</name> <operator>=</operator> <call><name>xmlXPathCompile</name><argument_list>(<argument><expr><name><name>xpaths</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><name>comppath</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>xml_ereport</name><argument_list>(<argument><expr><name>xmlerrcxt</name></expr></argument>, <argument><expr><name>ERROR</name></expr></argument>,
										<argument><expr><name>ERRCODE_EXTERNAL_ROUTINE_EXCEPTION</name></expr></argument>,
										<argument><expr><literal type="string">"XPath Syntax Error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

						<comment type="block">/* Now evaluate the path expression. */</comment>
						<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>xmlXPathCompiledEval</name><argument_list>(<argument><expr><name>comppath</name></expr></argument>, <argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>xmlXPathFreeCompExpr</name><argument_list>(<argument><expr><name>comppath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
						<block>{<block_content>
							<switch>switch <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
							<block>{<block_content>
								<case>case <expr><name>XPATH_NODESET</name></expr>:</case>
									<comment type="block">/* We see if this nodeset has enough nodes */</comment>
									<if_stmt><if>if <condition>(<expr><name><name>res</name><operator>-&gt;</operator><name>nodesetval</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
										<name>rownr</name> <operator>&lt;</operator> <name><name>res</name><operator>-&gt;</operator><name>nodesetval</name><operator>-&gt;</operator><name>nodeNr</name></name></expr>)</condition>
									<block>{<block_content>
										<expr_stmt><expr><name>resstr</name> <operator>=</operator> <call><name>xmlXPathCastNodeToString</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>nodesetval</name><operator>-&gt;</operator><name>nodeTab</name><index>[<expr><name>rownr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
										<expr_stmt><expr><name>had_values</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
									</block_content>}</block></if>
									<else>else<block type="pseudo"><block_content>
										<expr_stmt><expr><name>resstr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

									<break>break;</break>

								<case>case <expr><name>XPATH_STRING</name></expr>:</case>
									<expr_stmt><expr><name>resstr</name> <operator>=</operator> <call><name>xmlStrdup</name><argument_list>(<argument><expr><name><name>res</name><operator>-&gt;</operator><name>stringval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
									<break>break;</break>

								<default>default:</default>
									<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><literal type="string">"unsupported XQuery result: %d"</literal></expr></argument>, <argument><expr><name><name>res</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
									<expr_stmt><expr><name>resstr</name> <operator>=</operator> <call><name>xmlStrdup</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>xmlChar</name> <operator>*</operator><operator>)</operator> <literal type="string">"&lt;unsupported/&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							</block_content>}</block></switch>

							<comment type="block">/*
							 * Insert this into the appropriate column in the
							 * result tuple.
							 */</comment>
							<expr_stmt><expr><name><name>values</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>resstr</name></expr>;</expr_stmt>
						</block_content>}</block></if></if_stmt>
						<expr_stmt><expr><call><name>xmlXPathFreeContext</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></for>

					<comment type="block">/* Now add the tuple to the output, if there is one. */</comment>
					<if_stmt><if>if <condition>(<expr><name>had_values</name></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><name>ret_tuple</name> <operator>=</operator> <call><name>BuildTupleFromCStrings</name><argument_list>(<argument><expr><name>attinmeta</name></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>tuplestore_puttuple</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>, <argument><expr><name>ret_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>heap_freetuple</name><argument_list>(<argument><expr><name>ret_tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>

					<expr_stmt><expr><name>rownr</name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block> while <condition>(<expr><name>had_values</name></expr>)</condition>;</do>
			</block_content>}</block></else></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>doctree</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>xmlFreeDoc</name><argument_list>(<argument><expr><name>doctree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>doctree</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>pkey</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>pkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>xmldoc</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>xmldoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>doctree</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>xmlFreeDoc</name><argument_list>(<argument><expr><name>doctree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>pg_xml_done</name><argument_list>(<argument><expr><name>xmlerrcxt</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>doctree</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>xmlFreeDoc</name><argument_list>(<argument><expr><name>doctree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>pg_xml_done</name><argument_list>(<argument><expr><name>xmlerrcxt</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>tuplestore_donestoring</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SPI_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>setResult</name></name> <operator>=</operator> <name>tupstore</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * SFRM_Materialize mode expects us to return a NULL Datum. The actual
	 * tuples are in our tuplestore and passed back through rsinfo-&gt;setResult.
	 * rsinfo-&gt;setDesc is set to the tuple description that we actually used
	 * to build our tuples with, so the caller can verify we did what it was
	 * expecting.
	 */</comment>
	<return>return <expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
