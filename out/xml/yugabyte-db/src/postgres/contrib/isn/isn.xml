<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/contrib/isn/isn.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * isn.c
 *	  PostgreSQL type definitions for ISNs (ISBN, ISMN, ISSN, EAN13, UPC)
 *
 * Author:	German Mendez Bravo (Kronuz)
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *	  contrib/isn/isn.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"isn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"EAN13.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ISBN.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ISMN.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ISSN.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"UPC.h"</cpp:file></cpp:include>

<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISN_DEBUG</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISN_DEBUG</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXEAN13LEN</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>

<enum>enum <name>isn_type</name>
<block>{
	<decl><name>INVALID</name></decl>, <decl><name>ANY</name></decl>, <decl><name>EAN13</name></decl>, <decl><name>ISBN</name></decl>, <decl><name>ISMN</name></decl>, <decl><name>ISSN</name></decl>, <decl><name>UPC</name></decl>
}</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>isn_names</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"EAN13/UPC/ISxN"</literal></expr>, <expr><literal type="string">"EAN13/UPC/ISxN"</literal></expr>, <expr><literal type="string">"EAN13"</literal></expr>, <expr><literal type="string">"ISBN"</literal></expr>, <expr><literal type="string">"ISMN"</literal></expr>, <expr><literal type="string">"ISSN"</literal></expr>, <expr><literal type="string">"UPC"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>g_weak</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<comment type="block" format="doxygen">/***********************************************************************
 **
 **		Routines for EAN13/UPC/ISxNs.
 **
 ** Note:
 **  In this code, a normalized string is one that is known to be a valid
 **  ISxN number containing only digits and hyphens and with enough space
 **  to hold the full 13 digits plus the maximum of four hyphens.
 ***********************************************************************/</comment>

<comment type="block">/*----------------------------------------------------------
 * Debugging routines.
 *---------------------------------------------------------*/</comment>

<comment type="block">/*
 * Check if the table and its index is correct (just for debugging)
 */</comment>
<macro><name>pg_attribute_unused</name><argument_list>()</argument_list></macro>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type>
<name>check_table</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>(</operator><operator>*</operator><name>TABLE</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><specifier>const</specifier> <name>unsigned</name> <name><name>TABLE_index</name><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>aux1</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>aux2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>a</name></decl>,
				<decl><type ref="prev"/><name>b</name></decl>,
				<decl><type ref="prev"/><name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
				<decl><type ref="prev"/><name>y</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,
				<decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
				<decl><type ref="prev"/><name>j</name></decl>,
				<decl><type ref="prev"/><name>init</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>TABLE</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>TABLE_index</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><name><name>TABLE</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>TABLE</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>aux1</name> <operator>=</operator> <name><name>TABLE</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>aux2</name> <operator>=</operator> <name><name>TABLE</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

		<comment type="block">/* must always start with a digit: */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>aux1</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>aux2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>invalidtable</name>;</goto></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>*</operator><name>aux1</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>*</operator><name>aux2</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

		<comment type="block">/* must always have the same format and length: */</comment>
		<while>while <condition>(<expr><operator>*</operator><name>aux1</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>aux2</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>aux1</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
				  <call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>aux2</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
				<operator>(</operator><operator>*</operator><name>aux1</name> <operator>!=</operator> <operator>*</operator><name>aux2</name> <operator>||</operator> <operator>*</operator><name>aux1</name> <operator>!=</operator> <literal type="char">'-'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<goto>goto <name>invalidtable</name>;</goto></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>aux1</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>aux2</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>aux1</name> <operator>!=</operator> <operator>*</operator><name>aux2</name></expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>invalidtable</name>;</goto></block_content></block></if></if_stmt>

		<comment type="block">/* found a new range */</comment>
		<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <name>y</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* check current range in the index: */</comment>
			<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>x</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>y</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>TABLE_index</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>init</name></expr>)</condition><block type="pseudo"><block_content>
					<goto>goto <name>invalidindex</name>;</goto></block_content></block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>TABLE_index</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>i</name> <operator>-</operator> <name>init</name></expr>)</condition><block type="pseudo"><block_content>
					<goto>goto <name>invalidindex</name>;</goto></block_content></block></if></if_stmt>
			</block_content>}</block></for>
			<expr_stmt><expr><name>init</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>x</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Always get the new limit */</comment>
		<expr_stmt><expr><name>y</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <name>x</name></expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>invalidtable</name>;</goto></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>true</name></expr>;</return>

<label><name>invalidtable</name>:</label>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"invalid table near {\"%s\", \"%s\"} (pos: %d)"</literal></expr></argument>,
		 <argument><expr><name><name>TABLE</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>TABLE</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>false</name></expr>;</return>

<label><name>invalidindex</name>:</label>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"index %d is invalid"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<comment type="block">/*----------------------------------------------------------
 * Formatting and conversion routines.
 *---------------------------------------------------------*/</comment>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>dehyphenate</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>bufO</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>bufI</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type>	<name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>*</operator><name>bufI</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>bufI</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>bufO</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>bufI</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ret</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>bufI</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><operator>*</operator><name>bufO</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * hyphenate --- Try to hyphenate, in-place, the string starting at bufI
 *				  into bufO using the given hyphenation range TABLE.
 *				  Assumes the input string to be used is of only digits.
 *
 * Returns the number of characters actually hyphenated.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name></type>
<name>hyphenate</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator><name>bufO</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator><name>bufI</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>(</operator><operator>*</operator><name>TABLE</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><specifier>const</specifier> <name>unsigned</name> <name><name>TABLE_index</name><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type>	<name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ean_aux1</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>ean_aux2</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>ean_p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>firstdig</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>aux1</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>aux2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>	<name>search</name></decl>,
				<decl><type ref="prev"/><name>upper</name></decl>,
				<decl><type ref="prev"/><name>lower</name></decl>,
				<decl><type ref="prev"/><name>step</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>ean_in1</name></decl>,
				<decl><type ref="prev"/><name>ean_in2</name></decl>;</decl_stmt>

	<comment type="block">/* just compress the string if no further hyphenation is required */</comment>
	<if_stmt><if>if <condition>(<expr><name>TABLE</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>TABLE_index</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<while>while <condition>(<expr><operator>*</operator><name>bufI</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>bufO</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>bufI</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>ret</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><operator>*</operator><name>bufO</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>ret</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* add remaining hyphenations */</comment>

	<expr_stmt><expr><name>search</name> <operator>=</operator> <operator>*</operator><name>bufI</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>upper</name> <operator>=</operator> <name>lower</name> <operator>=</operator> <name><name>TABLE_index</name><index>[<expr><name>search</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>upper</name> <operator>+=</operator> <name><name>TABLE_index</name><index>[<expr><name>search</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>lower</name><operator>--</operator></expr>;</expr_stmt>

	<expr_stmt><expr><name>step</name> <operator>=</operator> <operator>(</operator><name>upper</name> <operator>-</operator> <name>lower</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>step</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>search</name> <operator>=</operator> <name>lower</name> <operator>+</operator> <name>step</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>firstdig</name> <operator>=</operator> <name>bufI</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ean_in1</name> <operator>=</operator> <name>ean_in2</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ean_aux1</name> <operator>=</operator> <name><name>TABLE</name><index>[<expr><name>search</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ean_aux2</name> <operator>=</operator> <name><name>TABLE</name><index>[<expr><name>search</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<do>do
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ean_in1</name> <operator>||</operator> <operator>*</operator><name>firstdig</name> <operator>&gt;=</operator> <operator>*</operator><name>ean_aux1</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>ean_in2</name> <operator>||</operator> <operator>*</operator><name>firstdig</name> <operator>&lt;=</operator> <operator>*</operator><name>ean_aux2</name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>firstdig</name> <operator>&gt;</operator> <operator>*</operator><name>ean_aux1</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>ean_in1</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>firstdig</name> <operator>&lt;</operator> <operator>*</operator><name>ean_aux2</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>ean_in2</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>ean_in1</name> <operator>&amp;&amp;</operator> <name>ean_in2</name></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>firstdig</name><operator>++</operator></expr><operator>,</operator> <expr><name>ean_aux1</name><operator>++</operator></expr><operator>,</operator> <expr><name>ean_aux2</name><operator>++</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>ean_aux1</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>ean_aux2</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>firstdig</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>ean_aux1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>ean_aux1</name><operator>++</operator></expr><operator>,</operator> <expr><name>ean_aux2</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/*
			 * check in what direction we should go and move the pointer
			 * accordingly
			 */</comment>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>firstdig</name> <operator>&lt;</operator> <operator>*</operator><name>ean_aux1</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>ean_in1</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>upper</name> <operator>=</operator> <name>search</name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>lower</name> <operator>=</operator> <name>search</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<expr_stmt><expr><name>step</name> <operator>=</operator> <operator>(</operator><name>upper</name> <operator>-</operator> <name>lower</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>search</name> <operator>=</operator> <name>lower</name> <operator>+</operator> <name>step</name></expr>;</expr_stmt>

			<comment type="block">/* Initialize stuff again: */</comment>
			<expr_stmt><expr><name>firstdig</name> <operator>=</operator> <name>bufI</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ean_in1</name> <operator>=</operator> <name>ean_in2</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ean_aux1</name> <operator>=</operator> <name><name>TABLE</name><index>[<expr><name>search</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ean_aux2</name> <operator>=</operator> <name><name>TABLE</name><index>[<expr><name>search</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block> while <condition>(<expr><name>step</name></expr>)</condition>;</do>

	<if_stmt><if>if <condition>(<expr><name>step</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>aux1</name> <operator>=</operator> <name>bufO</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>aux2</name> <operator>=</operator> <name>bufI</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ean_p</name> <operator>=</operator> <name><name>TABLE</name><index>[<expr><name>search</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<while>while <condition>(<expr><operator>*</operator><name>ean_p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>aux2</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>ean_p</name><operator>++</operator> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>aux1</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>aux2</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>aux1</name><operator>++</operator> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<expr_stmt><expr><name>ret</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><operator>*</operator><name>aux1</name><operator>++</operator> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>aux1</name> <operator>=</operator> <operator>*</operator><name>aux2</name></expr>;</expr_stmt>			<comment type="block">/* add a lookahead char */</comment>
		<return>return <expr><operator>(</operator><name>ret</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<comment type="block">/*
 * weight_checkdig -- Receives a buffer with a normalized ISxN string number,
 *					   and the length to weight.
 *
 * Returns the weight of the number (the check digit value, 0-10)
 */</comment>
<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>weight_checkdig</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>isn</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type>	<name>weight</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>*</operator><name>isn</name> <operator>&amp;&amp;</operator> <name>size</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>isn</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>weight</name> <operator>+=</operator> <name>size</name><operator>--</operator> <operator>*</operator> <operator>(</operator><operator>*</operator><name>isn</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>isn</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name>weight</name> <operator>=</operator> <name>weight</name> <operator>%</operator> <literal type="number">11</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>weight</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>weight</name> <operator>=</operator> <literal type="number">11</literal> <operator>-</operator> <name>weight</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>weight</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * checkdig --- Receives a buffer with a normalized ISxN string number,
 *				 and the length to check.
 *
 * Returns the check digit value (0-9)
 */</comment>
<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>checkdig</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type>	<name>check</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
				<decl><type ref="prev"/><name>check3</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>	<name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>num</name> <operator>==</operator> <literal type="char">'M'</literal></expr>)</condition>
	<block>{<block_content>							<comment type="block">/* ISMN start with 'M' */</comment>
		<expr_stmt><expr><name>check3</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<while>while <condition>(<expr><operator>*</operator><name>num</name> <operator>&amp;&amp;</operator> <name>size</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>num</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>pos</name><operator>++</operator> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>check3</name> <operator>+=</operator> <operator>*</operator><name>num</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>check</name> <operator>+=</operator> <operator>*</operator><name>num</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<expr_stmt><expr><name>size</name><operator>--</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><name>check</name> <operator>=</operator> <operator>(</operator><name>check</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>check3</name><operator>)</operator> <operator>%</operator> <literal type="number">10</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>check</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>check</name> <operator>=</operator> <literal type="number">10</literal> <operator>-</operator> <name>check</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>check</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * ean2isn --- Try to convert an ean13 number to a UPC/ISxN number.
 *			   This doesn't verify for a valid check digit.
 *
 * If errorOK is false, ereport a useful error message if the ean13 is bad.
 * If errorOK is true, just return "false" for bad input.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ean2isn</name><parameter_list>(<parameter><decl><type><name>ean13</name></type> <name>ean</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>errorOK</name></decl></parameter>, <parameter><decl><type><name>ean13</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>isn_type</name></name></type> <name>accept</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>enum</name> <name>isn_type</name></name></type> <name>type</name> <init>= <expr><name>INVALID</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>char</name></type>		<name><name>buf</name><index>[<expr><name>MAXEAN13LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>aux</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>	<name>digval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>	<name>search</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ean13</name></type>		<name>ret</name> <init>= <expr><name>ean</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>ean</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<comment type="block">/* verify it's in the EAN13 range */</comment>
	<if_stmt><if>if <condition>(<expr><name>ean</name> <operator>&gt;</operator> <call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">9999999999999</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>eantoobig</name>;</goto></block_content></block></if></if_stmt>

	<comment type="block">/* convert the number */</comment>
	<expr_stmt><expr><name>search</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>aux</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <literal type="number">13</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>aux</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>				<comment type="block">/* terminate string; aux points to last digit */</comment>
	<do>do
	<block>{<block_content>
		<expr_stmt><expr><name>digval</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <operator>(</operator><name>ean</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt> <comment type="block">/* get the decimal value */</comment>
		<expr_stmt><expr><name>ean</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>				<comment type="block">/* get next digit */</comment>
		<expr_stmt><expr><operator>*</operator><operator>--</operator><name>aux</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><name>digval</name> <operator>+</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt> <comment type="block">/* convert to ascii and store */</comment>
	</block_content>}</block> while <condition>(<expr><name>ean</name> <operator>&amp;&amp;</operator> <name>search</name><operator>++</operator> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition>;</do>
	<while>while <condition>(<expr><name>search</name><operator>++</operator> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><operator>--</operator><name>aux</name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></while>			<comment type="block">/* fill the remaining EAN13 with '0' */</comment>

	<comment type="block">/* find out the data type: */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"978"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>							<comment type="block">/* ISBN */</comment>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ISBN</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"977"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>							<comment type="block">/* ISSN */</comment>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ISSN</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"9790"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>							<comment type="block">/* ISMN */</comment>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ISMN</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"979"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>							<comment type="block">/* ISBN-13 */</comment>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ISBN</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><operator>*</operator><name>buf</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition>
	<block>{<block_content>							<comment type="block">/* UPC */</comment>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <name>UPC</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <name>EAN13</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>accept</name> <operator>!=</operator> <name>ANY</name> <operator>&amp;&amp;</operator> <name>accept</name> <operator>!=</operator> <name>EAN13</name> <operator>&amp;&amp;</operator> <name>accept</name> <operator>!=</operator> <name>type</name></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>eanwrongtype</name>;</goto></block_content></block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>

<label><name>eanwrongtype</name>:</label>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>errorOK</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>EAN13</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_TEXT_REPRESENTATION</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cannot cast EAN13(%s) to %s for number: \"%s\""</literal></expr></argument>,
							<argument><expr><name><name>isn_names</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>isn_names</name><index>[<expr><name>accept</name></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_TEXT_REPRESENTATION</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cannot cast %s to %s for number: \"%s\""</literal></expr></argument>,
							<argument><expr><name><name>isn_names</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>isn_names</name><index>[<expr><name>accept</name></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>false</name></expr>;</return>

<label><name>eantoobig</name>:</label>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>errorOK</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>eanbuf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

		<comment type="block">/*
		 * Format the number separately to keep the machine-dependent format
		 * code out of the translatable message text
		 */</comment>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>eanbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>eanbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>EAN13_FORMAT</name></expr></argument>, <argument><expr><name>ean</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_NUMERIC_VALUE_OUT_OF_RANGE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"value \"%s\" is out of range for %s type"</literal></expr></argument>,
						<argument><expr><name>eanbuf</name></expr></argument>, <argument><expr><name><name>isn_names</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * ean2UPC/ISxN --- Convert in-place a normalized EAN13 string to the corresponding
 *					UPC/ISxN string number. Assumes the input string is normalized.
 */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>ean2ISBN</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>isn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>aux</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>	<name>check</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * The number should come in this format: 978-0-000-00000-0 or may be an
	 * ISBN-13 number, 979-..., which does not have a short representation. Do
	 * the short output version if possible.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"978-"</literal></expr></argument>, <argument><expr><name>isn</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Strip the first part and calculate the new check digit */</comment>
		<expr_stmt><expr><call><name>hyphenate</name><argument_list>(<argument><expr><name>isn</name></expr></argument>, <argument><expr><name>isn</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>check</name> <operator>=</operator> <call><name>weight_checkdig</name><argument_list>(<argument><expr><name>isn</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>aux</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>isn</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<while>while <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><operator>--</operator><name>aux</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
		<if_stmt><if>if <condition>(<expr><name>check</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>aux</name> <operator>=</operator> <literal type="char">'X'</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>aux</name> <operator>=</operator> <name>check</name> <operator>+</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>ean2ISMN</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>isn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* the number should come in this format: 979-0-000-00000-0 */</comment>
	<comment type="block">/* Just strip the first part and change the first digit ('0') to 'M' */</comment>
	<expr_stmt><expr><call><name>hyphenate</name><argument_list>(<argument><expr><name>isn</name></expr></argument>, <argument><expr><name>isn</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>isn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'M'</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>ean2ISSN</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>isn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type>	<name>check</name></decl>;</decl_stmt>

	<comment type="block">/* the number should come in this format: 977-0000-000-00-0 */</comment>
	<comment type="block">/* Strip the first part, crop, and calculate the new check digit */</comment>
	<expr_stmt><expr><call><name>hyphenate</name><argument_list>(<argument><expr><name>isn</name></expr></argument>, <argument><expr><name>isn</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>check</name> <operator>=</operator> <call><name>weight_checkdig</name><argument_list>(<argument><expr><name>isn</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>check</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>isn</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'X'</literal></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>isn</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>check</name> <operator>+</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><name><name>isn</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>ean2UPC</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>isn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* the number should come in this format: 000-000000000-0 */</comment>
	<comment type="block">/* Strip the first part, crop, and dehyphenate */</comment>
	<expr_stmt><expr><call><name>dehyphenate</name><argument_list>(<argument><expr><name>isn</name></expr></argument>, <argument><expr><name>isn</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>isn</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * ean2* --- Converts a string of digits into an ean13 number.
 *			  Assumes the input string is a string with only digits
 *			  on it, and that it's within the range of ean13.
 *
 * Returns the ean13 value of the string.
 */</comment>
<function><type><specifier>static</specifier> <name>ean13</name></type>
<name>str2ean</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ean13</name></type>		<name>ean</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>		<comment type="block">/* current ean */</comment>

	<while>while <condition>(<expr><operator>*</operator><name>num</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>num</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>ean</name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>ean</name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>num</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><operator>(</operator><name>ean</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>			<comment type="block">/* also give room to a flag */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * ean2string --- Try to convert an ean13 number to a hyphenated string.
 *				  Assumes there's enough space in result to hold
 *				  the string (maximum MAXEAN13LEN+1 bytes)
 *				  This doesn't verify for a valid check digit.
 *
 * If shortType is true, the returned string is in the old ISxN short format.
 * If errorOK is false, ereport a useful error message if the string is bad.
 * If errorOK is true, just return "false" for bad input.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ean2string</name><parameter_list>(<parameter><decl><type><name>ean13</name></type> <name>ean</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>errorOK</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>shortType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>(</operator><operator>*</operator><name>TABLE</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>
	<expr_stmt><expr><specifier>const</specifier> <call><name>unsigned</name> <argument_list>(<argument><expr><operator>*</operator><name>TABLE_index</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>enum</name> <name>isn_type</name></name></type> <name>type</name> <init>= <expr><name>INVALID</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>aux</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>	<name>digval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>	<name>search</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name>valid</name> <init>= <expr><literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>	<comment type="block">/* was the number initially written with a
								 * valid check digit? */</comment>

	<expr_stmt><expr><name>TABLE_index</name> <operator>=</operator> <name>ISBN_index</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ean</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>valid</name> <operator>=</operator> <literal type="char">'!'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>ean</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<comment type="block">/* verify it's in the EAN13 range */</comment>
	<if_stmt><if>if <condition>(<expr><name>ean</name> <operator>&gt;</operator> <call><name>UINT64CONST</name><argument_list>(<argument><expr><literal type="number">9999999999999</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>eantoobig</name>;</goto></block_content></block></if></if_stmt>

	<comment type="block">/* convert the number */</comment>
	<expr_stmt><expr><name>search</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>aux</name> <operator>=</operator> <name>result</name> <operator>+</operator> <name>MAXEAN13LEN</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>aux</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>				<comment type="block">/* terminate string; aux points to last digit */</comment>
	<expr_stmt><expr><operator>*</operator><operator>--</operator><name>aux</name> <operator>=</operator> <name>valid</name></expr>;</expr_stmt>				<comment type="block">/* append '!' for numbers with invalid but
								 * corrected check digit */</comment>
	<do>do
	<block>{<block_content>
		<expr_stmt><expr><name>digval</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <operator>(</operator><name>ean</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt> <comment type="block">/* get the decimal value */</comment>
		<expr_stmt><expr><name>ean</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>				<comment type="block">/* get next digit */</comment>
		<expr_stmt><expr><operator>*</operator><operator>--</operator><name>aux</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <operator>(</operator><name>digval</name> <operator>+</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt> <comment type="block">/* convert to ascii and store */</comment>
		<if_stmt><if>if <condition>(<expr><name>search</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><operator>--</operator><name>aux</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>		<comment type="block">/* the check digit is always there */</comment>
	</block_content>}</block> while <condition>(<expr><name>ean</name> <operator>&amp;&amp;</operator> <name>search</name><operator>++</operator> <operator>&lt;</operator> <literal type="number">13</literal></expr>)</condition>;</do>
	<while>while <condition>(<expr><name>search</name><operator>++</operator> <operator>&lt;</operator> <literal type="number">13</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><operator>--</operator><name>aux</name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></while>			<comment type="block">/* fill the remaining EAN13 with '0' */</comment>

	<comment type="block">/* The string should be in this form: ???DDDDDDDDDDDD-D" */</comment>
	<expr_stmt><expr><name>search</name> <operator>=</operator> <call><name>hyphenate</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>result</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>EAN13_range</name></expr></argument>, <argument><expr><name>EAN13_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* verify it's a logically valid EAN13 */</comment>
	<if_stmt><if>if <condition>(<expr><name>search</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>search</name> <operator>=</operator> <call><name>hyphenate</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>result</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>okay</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* find out what type of hyphenation is needed: */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"978-"</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>search</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>							<comment type="block">/* ISBN -13 978-range */</comment>
		<comment type="block">/* The string should be in this form: 978-??000000000-0" */</comment>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ISBN</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>TABLE</name> <operator>=</operator> <name>ISBN_range</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>TABLE_index</name> <operator>=</operator> <name>ISBN_index</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"977-"</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>search</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>							<comment type="block">/* ISSN */</comment>
		<comment type="block">/* The string should be in this form: 977-??000000000-0" */</comment>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ISSN</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>TABLE</name> <operator>=</operator> <name>ISSN_range</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>TABLE_index</name> <operator>=</operator> <name>ISSN_index</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"979-0"</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>search</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>							<comment type="block">/* ISMN */</comment>
		<comment type="block">/* The string should be in this form: 979-0?000000000-0" */</comment>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ISMN</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>TABLE</name> <operator>=</operator> <name>ISMN_range</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>TABLE_index</name> <operator>=</operator> <name>ISMN_index</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"979-"</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>search</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>							<comment type="block">/* ISBN-13 979-range */</comment>
		<comment type="block">/* The string should be in this form: 979-??000000000-0" */</comment>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ISBN</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>TABLE</name> <operator>=</operator> <name>ISBN_range_new</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>TABLE_index</name> <operator>=</operator> <name>ISBN_index_new</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><operator>*</operator><name>result</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition>
	<block>{<block_content>							<comment type="block">/* UPC */</comment>
		<comment type="block">/* The string should be in this form: 000-00000000000-0" */</comment>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <name>UPC</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>TABLE</name> <operator>=</operator> <name>UPC_range</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>TABLE_index</name> <operator>=</operator> <name>UPC_index</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <name>EAN13</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>TABLE</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>TABLE_index</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/* verify it's a logically valid EAN13/UPC/ISxN */</comment>
	<expr_stmt><expr><name>digval</name> <operator>=</operator> <name>search</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>search</name> <operator>=</operator> <call><name>hyphenate</name><argument_list>(<argument><expr><name>result</name> <operator>+</operator> <name>digval</name></expr></argument>, <argument><expr><name>result</name> <operator>+</operator> <name>digval</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>TABLE</name></expr></argument>, <argument><expr><name>TABLE_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* verify it's a valid EAN13 */</comment>
	<if_stmt><if>if <condition>(<expr><name>search</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>search</name> <operator>=</operator> <call><name>hyphenate</name><argument_list>(<argument><expr><name>result</name> <operator>+</operator> <name>digval</name></expr></argument>, <argument><expr><name>result</name> <operator>+</operator> <name>digval</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>okay</name>;</goto>
	</block_content>}</block></if></if_stmt>

<label><name>okay</name>:</label>
	<comment type="block">/* convert to the old short type: */</comment>
	<if_stmt><if>if <condition>(<expr><name>shortType</name></expr>)</condition><block type="pseudo"><block_content>
		<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>ISBN</name></expr>:</case>
				<expr_stmt><expr><call><name>ean2ISBN</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ISMN</name></expr>:</case>
				<expr_stmt><expr><call><name>ean2ISMN</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ISSN</name></expr>:</case>
				<expr_stmt><expr><call><name>ean2ISSN</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>UPC</name></expr>:</case>
				<expr_stmt><expr><call><name>ean2UPC</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<break>break;</break>
		</block_content>}</block></switch></block_content></block></if></if_stmt>
	<return>return <expr><name>true</name></expr>;</return>

<label><name>eantoobig</name>:</label>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>errorOK</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>eanbuf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

		<comment type="block">/*
		 * Format the number separately to keep the machine-dependent format
		 * code out of the translatable message text
		 */</comment>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>eanbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>eanbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>EAN13_FORMAT</name></expr></argument>, <argument><expr><name>ean</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_NUMERIC_VALUE_OUT_OF_RANGE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"value \"%s\" is out of range for %s type"</literal></expr></argument>,
						<argument><expr><name>eanbuf</name></expr></argument>, <argument><expr><name><name>isn_names</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * string2ean --- try to parse a string into an ean13.
 *
 * If errorOK is false, ereport a useful error message if the string is bad.
 * If errorOK is true, just return "false" for bad input.
 *
 * if the input string ends with '!' it will always be treated as invalid
 * (even if the check digit is valid)
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>string2ean</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>errorOK</name></decl></parameter>, <parameter><decl><type><name>ean13</name> <modifier>*</modifier></type><name>result</name></decl></parameter>,
		   <parameter><decl><type><name><name>enum</name> <name>isn_type</name></name></type> <name>accept</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>digit</name></decl>,
				<decl><type ref="prev"/><name>last</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>buf</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <init>= <expr><literal type="string">"                "</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>aux1</name> <init>= <expr><name>buf</name> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* leave space for the first part, in case
								 * it's needed */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>aux2</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>enum</name> <name>isn_type</name></name></type> <name>type</name> <init>= <expr><name>INVALID</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>	<name>check</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
				<decl><type ref="prev"/><name>rcheck</name> <init>= <expr><operator>(</operator><name>unsigned</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>	<name>length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>magic</name> <init>= <expr><name>false</name></expr></init></decl>,
				<decl><type ref="prev"/><name>valid</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* recognize and validate the number: */</comment>
	<while>while <condition>(<expr><operator>*</operator><name>aux2</name> <operator>&amp;&amp;</operator> <name>length</name> <operator>&lt;=</operator> <literal type="number">13</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>last</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>aux2</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'!'</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><name>aux2</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal><operator>)</operator></expr>;</expr_stmt> <comment type="block">/* is the last character */</comment>
		<expr_stmt><expr><name>digit</name> <operator>=</operator> <operator>(</operator><call><name>isdigit</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>aux2</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>	<comment type="block">/* is current character
														 * a digit? */</comment>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>aux2</name> <operator>==</operator> <literal type="char">'?'</literal> <operator>&amp;&amp;</operator> <name>last</name></expr>)</condition><block type="pseudo"><block_content>	<comment type="block">/* automagically calculate check digit if
									 * it's '?' */</comment>
			<expr_stmt><expr><name>magic</name> <operator>=</operator> <name>digit</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>aux2</name> <operator>==</operator> <literal type="char">'M'</literal> <operator>||</operator> <operator>*</operator><name>aux2</name> <operator>==</operator> <literal type="char">'m'</literal><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* only ISMN can be here */</comment>
			<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>INVALID</name></expr>)</condition><block type="pseudo"><block_content>
				<goto>goto <name>eaninvalid</name>;</goto></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ISMN</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>aux1</name><operator>++</operator> <operator>=</operator> <literal type="char">'M'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>length</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>digit</name> <operator>||</operator> <operator>*</operator><name>aux2</name> <operator>==</operator> <literal type="char">'X'</literal> <operator>||</operator> <operator>*</operator><name>aux2</name> <operator>==</operator> <literal type="char">'x'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>last</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* only ISSN can be here */</comment>
			<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>INVALID</name></expr>)</condition><block type="pseudo"><block_content>
				<goto>goto <name>eaninvalid</name>;</goto></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ISSN</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>aux1</name><operator>++</operator> <operator>=</operator> <call><name>toupper</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>aux2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>length</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">9</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>digit</name> <operator>||</operator> <operator>*</operator><name>aux2</name> <operator>==</operator> <literal type="char">'X'</literal> <operator>||</operator> <operator>*</operator><name>aux2</name> <operator>==</operator> <literal type="char">'x'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>last</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* only ISBN and ISMN can be here */</comment>
			<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>INVALID</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name>ISMN</name></expr>)</condition><block type="pseudo"><block_content>
				<goto>goto <name>eaninvalid</name>;</goto></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>INVALID</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ISBN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>	<comment type="block">/* ISMN must start with 'M' */</comment>
			<expr_stmt><expr><operator>*</operator><name>aux1</name><operator>++</operator> <operator>=</operator> <call><name>toupper</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <operator>*</operator><name>aux2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>length</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">11</literal> <operator>&amp;&amp;</operator> <name>digit</name> <operator>&amp;&amp;</operator> <name>last</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* only UPC can be here */</comment>
			<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>INVALID</name></expr>)</condition><block type="pseudo"><block_content>
				<goto>goto <name>eaninvalid</name>;</goto></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>type</name> <operator>=</operator> <name>UPC</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>aux1</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>aux2</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>length</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><operator>*</operator><name>aux2</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <operator>*</operator><name>aux2</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* skip, we could validate but I think it's worthless */</comment>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><operator>*</operator><name>aux2</name> <operator>==</operator> <literal type="char">'!'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>aux2</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* the invalid check digit suffix was found, set it */</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>magic</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>valid</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>magic</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><operator>!</operator><name>digit</name></expr>)</condition>
		<block>{<block_content>
			<goto>goto <name>eaninvalid</name>;</goto>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>aux1</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>aux2</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>++</operator><name>length</name> <operator>&gt;</operator> <literal type="number">13</literal></expr>)</condition><block type="pseudo"><block_content>
				<goto>goto <name>eantoobig</name>;</goto></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name>aux2</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><operator>*</operator><name>aux1</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>				<comment type="block">/* terminate the string */</comment>

	<comment type="block">/* find the current check digit value */</comment>
	<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">13</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* only EAN13 can be here */</comment>
		<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>INVALID</name></expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>eaninvalid</name>;</goto></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <name>EAN13</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>check</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* only UPC can be here */</comment>
		<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>UPC</name></expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>eaninvalid</name>;</goto></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>check</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>ISBN</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name>ISMN</name></expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>eaninvalid</name>;</goto></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'X'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>check</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>check</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>INVALID</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name>ISSN</name></expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>eaninvalid</name>;</goto></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ISSN</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'X'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>check</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>check</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<goto>goto <name>eaninvalid</name>;</goto></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>INVALID</name></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>eaninvalid</name>;</goto></block_content></block></if></if_stmt>

	<comment type="block">/* obtain the real check digit value, validate, and convert to ean13: */</comment>
	<if_stmt><if>if <condition>(<expr><name>accept</name> <operator>==</operator> <name>EAN13</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name>accept</name></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>eanwrongtype</name>;</goto></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>accept</name> <operator>!=</operator> <name>ANY</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name>EAN13</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name>accept</name></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>eanwrongtype</name>;</goto></block_content></block></if></if_stmt>
	<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>EAN13</name></expr>:</case>
			<expr_stmt><expr><name>valid</name> <operator>=</operator> <operator>(</operator><name>valid</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>rcheck</name> <operator>=</operator> <call><name>checkdig</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>check</name> <operator>||</operator> <name>magic</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
			<comment type="block">/* now get the subtype of EAN13: */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>type</name> <operator>=</operator> <name>UPC</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"977"</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ISSN</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"978"</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ISBN</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"9790"</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ISMN</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"979"</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>type</name> <operator>=</operator> <name>ISBN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>accept</name> <operator>!=</operator> <name>EAN13</name> <operator>&amp;&amp;</operator> <name>accept</name> <operator>!=</operator> <name>ANY</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name>accept</name></expr>)</condition><block type="pseudo"><block_content>
				<goto>goto <name>eanwrongtype</name>;</goto></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>ISMN</name></expr>:</case>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"9790"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* this isn't for sure yet, for now ISMN
									 * it's only 9790 */</comment>
			<expr_stmt><expr><name>valid</name> <operator>=</operator> <operator>(</operator><name>valid</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>rcheck</name> <operator>=</operator> <call><name>checkdig</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>check</name> <operator>||</operator> <name>magic</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ISBN</name></expr>:</case>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"978"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>valid</name> <operator>=</operator> <operator>(</operator><name>valid</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>rcheck</name> <operator>=</operator> <call><name>weight_checkdig</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>check</name> <operator>||</operator> <name>magic</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>ISSN</name></expr>:</case>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><literal type="string">"00"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* append 00 as the normal issue
										 * publication code */</comment>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"977"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>valid</name> <operator>=</operator> <operator>(</operator><name>valid</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>rcheck</name> <operator>=</operator> <call><name>weight_checkdig</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>check</name> <operator>||</operator> <name>magic</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>UPC</name></expr>:</case>
			<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>valid</name> <operator>=</operator> <operator>(</operator><name>valid</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>rcheck</name> <operator>=</operator> <call><name>checkdig</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>check</name> <operator>||</operator> <name>magic</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<break>break;</break>
	</block_content>}</block></switch>

	<comment type="block">/* fix the check digit: */</comment>
	<for>for <control>(<init><expr><name>aux1</name> <operator>=</operator> <name>buf</name></expr>;</init> <condition><expr><operator>*</operator><name>aux1</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>aux1</name> <operator>&lt;=</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><name>aux1</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
	<expr_stmt><expr><name><name>aux1</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <call><name>checkdig</name><argument_list>(<argument><expr><name>aux1</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>aux1</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>valid</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>magic</name></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>eanbadcheck</name>;</goto></block_content></block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <call><name>str2ean</name><argument_list>(<argument><expr><name>aux1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>result</name> <operator>|=</operator> <ternary><condition><expr><name>valid</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>

<label><name>eanbadcheck</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>g_weak</name></expr>)</condition>
	<block>{<block_content>							<comment type="block">/* weak input mode is activated: */</comment>
		<comment type="block">/* set the "invalid-check-digit-on-input" flag */</comment>
		<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <call><name>str2ean</name><argument_list>(<argument><expr><name>aux1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>result</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>errorOK</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>rcheck</name> <operator>==</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_TEXT_REPRESENTATION</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid %s number: \"%s\""</literal></expr></argument>,
							<argument><expr><name><name>isn_names</name><index>[<expr><name>accept</name></expr>]</index></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_TEXT_REPRESENTATION</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid check digit for %s number: \"%s\", should be %c"</literal></expr></argument>,
							<argument><expr><name><name>isn_names</name><index>[<expr><name>accept</name></expr>]</index></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>rcheck</name> <operator>==</operator> <literal type="number">10</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><literal type="char">'X'</literal><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>rcheck</name> <operator>+</operator> <literal type="char">'0'</literal><operator>)</operator></expr></else></ternary></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>false</name></expr>;</return>

<label><name>eaninvalid</name>:</label>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>errorOK</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_TEXT_REPRESENTATION</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid input syntax for %s number: \"%s\""</literal></expr></argument>,
						<argument><expr><name><name>isn_names</name><index>[<expr><name>accept</name></expr>]</index></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>false</name></expr>;</return>

<label><name>eanwrongtype</name>:</label>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>errorOK</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_TEXT_REPRESENTATION</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cannot cast %s to %s for number: \"%s\""</literal></expr></argument>,
						<argument><expr><name><name>isn_names</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>isn_names</name><index>[<expr><name>accept</name></expr>]</index></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>false</name></expr>;</return>

<label><name>eantoobig</name>:</label>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>errorOK</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_NUMERIC_VALUE_OUT_OF_RANGE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"value \"%s\" is out of range for %s type"</literal></expr></argument>,
						<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>isn_names</name><index>[<expr><name>accept</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*----------------------------------------------------------
 * Exported routines.
 *---------------------------------------------------------*/</comment>

<function_decl><type><name>void</name></type>		<name>_PG_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type>
<name>_PG_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>ISN_DEBUG</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_table</name><argument_list>(<argument><expr><name>EAN13_range</name></expr></argument>, <argument><expr><name>EAN13_index</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"EAN13 failed check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_table</name><argument_list>(<argument><expr><name>ISBN_range</name></expr></argument>, <argument><expr><name>ISBN_index</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ISBN failed check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_table</name><argument_list>(<argument><expr><name>ISMN_range</name></expr></argument>, <argument><expr><name>ISMN_index</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ISMN failed check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_table</name><argument_list>(<argument><expr><name>ISSN_range</name></expr></argument>, <argument><expr><name>ISSN_index</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"ISSN failed check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_table</name><argument_list>(<argument><expr><name>UPC_range</name></expr></argument>, <argument><expr><name>UPC_index</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"UPC failed check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* isn_out
 */</comment>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>isn_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>isn_out</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ean13</name></type>		<name>val</name> <init>= <expr><call><name>PG_GETARG_EAN13</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>buf</name><index>[<expr><name>MAXEAN13LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ean2string</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_CSTRING</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ean13_out
 */</comment>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ean13_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>ean13_out</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ean13</name></type>		<name>val</name> <init>= <expr><call><name>PG_GETARG_EAN13</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>buf</name><index>[<expr><name>MAXEAN13LEN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ean2string</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_CSTRING</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ean13_in
 */</comment>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ean13_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>ean13_in</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>PG_GETARG_CSTRING</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ean13</name></type>		<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>string2ean</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>EAN13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_EAN13</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* isbn_in
 */</comment>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>isbn_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>isbn_in</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>PG_GETARG_CSTRING</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ean13</name></type>		<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>string2ean</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>ISBN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_EAN13</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* ismn_in
 */</comment>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ismn_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>ismn_in</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>PG_GETARG_CSTRING</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ean13</name></type>		<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>string2ean</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>ISMN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_EAN13</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* issn_in
 */</comment>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>issn_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>issn_in</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>PG_GETARG_CSTRING</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ean13</name></type>		<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>string2ean</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>ISSN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_EAN13</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* upc_in
 */</comment>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>upc_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>upc_in</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>PG_GETARG_CSTRING</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ean13</name></type>		<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>string2ean</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>UPC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_EAN13</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* casting functions
*/</comment>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>isbn_cast_from_ean13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>isbn_cast_from_ean13</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ean13</name></type>		<name>val</name> <init>= <expr><call><name>PG_GETARG_EAN13</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ean13</name></type>		<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ean2isn</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>ISBN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_EAN13</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>ismn_cast_from_ean13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>ismn_cast_from_ean13</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ean13</name></type>		<name>val</name> <init>= <expr><call><name>PG_GETARG_EAN13</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ean13</name></type>		<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ean2isn</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>ISMN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_EAN13</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>issn_cast_from_ean13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>issn_cast_from_ean13</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ean13</name></type>		<name>val</name> <init>= <expr><call><name>PG_GETARG_EAN13</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ean13</name></type>		<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ean2isn</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>ISSN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_EAN13</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>upc_cast_from_ean13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>upc_cast_from_ean13</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ean13</name></type>		<name>val</name> <init>= <expr><call><name>PG_GETARG_EAN13</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ean13</name></type>		<name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ean2isn</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><name>UPC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_EAN13</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* is_valid - returns false if the "invalid-check-digit-on-input" is set
 */</comment>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>is_valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>is_valid</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ean13</name></type>		<name>val</name> <init>= <expr><call><name>PG_GETARG_EAN13</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* make_valid - unsets the "invalid-check-digit-on-input" flag
 */</comment>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>make_valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>make_valid</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ean13</name></type>		<name>val</name> <init>= <expr><call><name>PG_GETARG_EAN13</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>val</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><operator>(</operator><name>ean13</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_EAN13</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* this function temporarily sets weak input flag
 * (to lose the strictness of check digit acceptance)
 * It's a helper function, not intended to be used!!
 */</comment>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>accept_weak_input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>accept_weak_input</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ISN_WEAK_MODE</name></cpp:ifdef>
	<expr_stmt><expr><name>g_weak</name> <operator>=</operator> <call><name>PG_GETARG_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<comment type="block">/* function has no effect */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* ISN_WEAK_MODE */</comment>
	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>g_weak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>weak_input_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>Datum</name></type>
<name>weak_input_status</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>g_weak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
