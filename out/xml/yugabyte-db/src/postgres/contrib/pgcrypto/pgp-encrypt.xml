<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/contrib/pgcrypto/pgp-encrypt.c"><comment type="block">/*
 * pgp-encrypt.c
 *	  OpenPGP encrypt.
 *
 * Copyright (c) 2005 Marko Kreen
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *	  notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *	  notice, this list of conditions and the following disclaimer in the
 *	  documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * contrib/pgcrypto/pgp-encrypt.c
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mbuf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/backend_random.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDC_DIGEST_LEN</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STREAM_ID</name></cpp:macro> <cpp:value>0xE0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STREAM_BLOCK_SHIFT</name></cpp:macro>	<cpp:value>14</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>uint8</name> <modifier>*</modifier></type>
<name>render_newlen</name><parameter_list>(<parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">191</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>h</name><operator>++</operator> <operator>=</operator> <name>len</name> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">191</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&lt;=</operator> <literal type="number">8383</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>h</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name>len</name> <operator>-</operator> <literal type="number">192</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">192</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>h</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>len</name> <operator>-</operator> <literal type="number">192</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>h</name><operator>++</operator> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>h</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>len</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>h</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>len</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>h</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>len</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>h</name><operator>++</operator> <operator>=</operator> <name>len</name> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>h</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>write_tag_only</name><parameter_list>(<parameter><decl><type><name>PushFilter</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint8</name></type>		<name>hdr</name> <init>= <expr><literal type="number">0xC0</literal> <operator>|</operator> <name>tag</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>pushf_write</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>write_normal_header</name><parameter_list>(<parameter><decl><type><name>PushFilter</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>hdr</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>h</name> <init>= <expr><name>hdr</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>h</name><operator>++</operator> <operator>=</operator> <literal type="number">0xC0</literal> <operator>|</operator> <name>tag</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>render_newlen</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>pushf_write</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <name>hdr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * MAC writer
 */</comment>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>mdc_init</name><parameter_list>(<parameter><decl><type><name>PushFilter</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>init_arg</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>priv_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PX_MD</name>	   <modifier>*</modifier></type><name>md</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_load_digest</name><argument_list>(<argument><expr><name>PGP_DIGEST_SHA1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>priv_p</name> <operator>=</operator> <name>md</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>mdc_write</name><parameter_list>(<parameter><decl><type><name>PushFilter</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PX_MD</name>	   <modifier>*</modifier></type><name>md</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>px_md_update</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>pushf_write</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>mdc_flush</name><parameter_list>(<parameter><decl><type><name>PushFilter</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>pkt</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <name>MDC_DIGEST_LEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PX_MD</name>	   <modifier>*</modifier></type><name>md</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * create mdc pkt
	 */</comment>
	<expr_stmt><expr><name><name>pkt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xD3</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pkt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x14</literal></expr>;</expr_stmt>				<comment type="block">/* MDC_DIGEST_LEN */</comment>
	<expr_stmt><expr><call><name>px_md_update</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_md_finish</name><argument_list>(<argument><expr><name>md</name></expr></argument>, <argument><expr><name>pkt</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pushf_write</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>+</operator> <name>MDC_DIGEST_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>+</operator> <name>MDC_DIGEST_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>mdc_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PX_MD</name>	   <modifier>*</modifier></type><name>md</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>px_md_free</name><argument_list>(<argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PushFilterOps</name></type> <name>mdc_filter</name> <init>= <expr><block>{
	<expr><name>mdc_init</name></expr>, <expr><name>mdc_write</name></expr>, <expr><name>mdc_flush</name></expr>, <expr><name>mdc_free</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<comment type="block">/*
 * Encrypted pkt writer
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCBUF</name></cpp:macro> <cpp:value>8192</cpp:value></cpp:define>
<struct>struct <name>EncStat</name>
<block>{
	<decl_stmt><decl><type><name>PGP_CFB</name>    <modifier>*</modifier></type><name>ciph</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>buf</name><index>[<expr><name>ENCBUF</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>encrypt_init</name><parameter_list>(<parameter><decl><type><name>PushFilter</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>init_arg</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>priv_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>EncStat</name></name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>init_arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGP_CFB</name>    <modifier>*</modifier></type><name>ciph</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>resync</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>

	<comment type="block">/* should we use newer packet format? */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>disable_mdc</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>uint8</name></type>		<name>ver</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>resync</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pushf_write</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ver</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_cfb_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ciph</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cipher_algo</name></name></expr></argument>,
						 <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sess_key</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sess_key_len</name></name></expr></argument>, <argument><expr><name>resync</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>px_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>st</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>st</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>ciph</name></name> <operator>=</operator> <name>ciph</name></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>priv_p</name> <operator>=</operator> <name>st</name></expr>;</expr_stmt>
	<return>return <expr><name>ENCBUF</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>encrypt_process</name><parameter_list>(<parameter><decl><type><name>PushFilter</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>EncStat</name></name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>avail</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>avail</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>tmplen</name> <init>= <expr><ternary><condition><expr><name>avail</name> <operator>&gt;</operator> <name>ENCBUF</name></expr> ?</condition><then> <expr><name>ENCBUF</name></expr> </then><else>: <expr><name>avail</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_cfb_encrypt</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>ciph</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>tmplen</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pushf_write</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>tmplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>tmplen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>avail</name> <operator>-=</operator> <name>tmplen</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>encrypt_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>EncStat</name></name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>ciph</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pgp_cfb_free</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>ciph</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>st</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PushFilterOps</name></type> <name>encrypt_filter</name> <init>= <expr><block>{
	<expr><name>encrypt_init</name></expr>, <expr><name>encrypt_process</name></expr>, <expr><name>NULL</name></expr>, <expr><name>encrypt_free</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Write Streamable pkts
 */</comment>

<struct>struct <name>PktStreamStat</name>
<block>{
	<decl_stmt><decl><type><name>int</name></type>			<name>final_done</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>pkt_block</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pkt_stream_init</name><parameter_list>(<parameter><decl><type><name>PushFilter</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>init_arg</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>priv_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>PktStreamStat</name></name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>px_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>st</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>final_done</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>pkt_block</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>STREAM_BLOCK_SHIFT</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>priv_p</name> <operator>=</operator> <name>st</name></expr>;</expr_stmt>

	<return>return <expr><name><name>st</name><operator>-&gt;</operator><name>pkt_block</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pkt_stream_process</name><parameter_list>(<parameter><decl><type><name>PushFilter</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>hdr</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>h</name> <init>= <expr><name>hdr</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>PktStreamStat</name></name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>final_done</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>PXE_BUG</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <name><name>st</name><operator>-&gt;</operator><name>pkt_block</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>h</name><operator>++</operator> <operator>=</operator> <name>STREAM_ID</name> <operator>|</operator> <name>STREAM_BLOCK_SHIFT</name></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>render_newlen</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>final_done</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pushf_write</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>pushf_write</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pkt_stream_flush</name><parameter_list>(<parameter><decl><type><name>PushFilter</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>hdr</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>h</name> <init>= <expr><name>hdr</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>PktStreamStat</name></name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* stream MUST end with normal packet. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>st</name><operator>-&gt;</operator><name>final_done</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>render_newlen</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pushf_write</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>h</name> <operator>-</operator> <name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>final_done</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>pkt_stream_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>PktStreamStat</name></name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>st</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PushFilterOps</name></type> <name>pkt_stream_filter</name> <init>= <expr><block>{
	<expr><name>pkt_stream_init</name></expr>, <expr><name>pkt_stream_process</name></expr>, <expr><name>pkt_stream_flush</name></expr>, <expr><name>pkt_stream_free</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type>
<name>pgp_create_pkt_writer</name><parameter_list>(<parameter><decl><type><name>PushFilter</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>PushFilter</name> <modifier>*</modifier><modifier>*</modifier></type><name>res_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>write_tag_only</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>pushf_create</name><argument_list>(<argument><expr><name>res_p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt_stream_filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Text conversion filter
 */</comment>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>crlf_process</name><parameter_list>(<parameter><decl><type><name>PushFilter</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data_end</name> <init>= <expr><name>data</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>p2</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>p1</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>line_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8</name></type> <name><name>crlf</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="char">'\r'</literal></expr>, <expr><literal type="char">'\n'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>p1</name> <operator>&lt;</operator> <name>data_end</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>p2</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>data_end</name> <operator>-</operator> <name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>p2</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>p2</name> <operator>=</operator> <name>data_end</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>line_len</name> <operator>=</operator> <name>p2</name> <operator>-</operator> <name>p1</name></expr>;</expr_stmt>

		<comment type="block">/* write data */</comment>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>line_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pushf_write</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>line_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>p1</name> <operator>+=</operator> <name>line_len</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* write crlf */</comment>
		<while>while <condition>(<expr><name>p1</name> <operator>&lt;</operator> <name>data_end</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p1</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pushf_write</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>crlf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>p1</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></while>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PushFilterOps</name></type> <name>crlf_filter</name> <init>= <expr><block>{
	<expr><name>NULL</name></expr>, <expr><name>crlf_process</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Initialize literal data packet
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>init_litdata_packet</name><parameter_list>(<parameter><decl><type><name>PushFilter</name> <modifier>*</modifier><modifier>*</modifier></type><name>pf_res</name></decl></parameter>, <parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>PushFilter</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>hdrlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>hdr</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>t</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PushFilter</name> <modifier>*</modifier></type><name>pkt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>type</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Create header
	 */</comment>

	<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>text_mode</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>unicode_mode</name></name></expr> ?</condition><then> <expr><literal type="char">'u'</literal></expr> </then><else>: <expr><literal type="char">'t'</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="char">'b'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/*
	 * Store the creation time into packet. The goal is to have as few known
	 * bytes as possible.
	 */</comment>
	<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>uint32</name><operator>)</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>hdr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hdr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hdr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hdr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hdr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>t</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hdr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>hdrlen</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>write_tag_only</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>PGP_PKT_LITERAL_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pushf_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt_stream_filter</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pushf_write</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>hdrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pushf_free</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>res</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>pf_res</name> <operator>=</operator> <name>pkt</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize compression filter
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>init_compress</name><parameter_list>(<parameter><decl><type><name>PushFilter</name> <modifier>*</modifier><modifier>*</modifier></type><name>pf_res</name></decl></parameter>, <parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>PushFilter</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name>type</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>compress_algo</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PushFilter</name> <modifier>*</modifier></type><name>pkt</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>write_tag_only</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>PGP_PKT_COMPRESSED_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pushf_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt_stream_filter</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pushf_write</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_compress_filter</name><argument_list>(<argument><expr><name>pf_res</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pushf_free</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize encdata packet
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>init_encdata_packet</name><parameter_list>(<parameter><decl><type><name>PushFilter</name> <modifier>*</modifier><modifier>*</modifier></type><name>pf_res</name></decl></parameter>, <parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>PushFilter</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>tag</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>disable_mdc</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>tag</name> <operator>=</operator> <name>PGP_PKT_SYMENCRYPTED_DATA</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>tag</name> <operator>=</operator> <name>PGP_PKT_SYMENCRYPTED_DATA_MDC</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>write_tag_only</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>pushf_create</name><argument_list>(<argument><expr><name>pf_res</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt_stream_filter</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * write prefix
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>write_prefix</name><parameter_list>(<parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>PushFilter</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_STRONG_RANDOM</name></cpp:ifdef>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>prefix</name><index>[<expr><name>PGP_MAX_BLOCK</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>,
				<decl><type ref="prev"/><name>bs</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>pgp_get_cipher_block_size</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cipher_algo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_backend_random</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>prefix</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>PXE_NO_RANDOM</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>prefix</name><index>[<expr><name>bs</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>prefix</name><index>[<expr><name>bs</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>prefix</name><index>[<expr><name>bs</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>prefix</name><index>[<expr><name>bs</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pushf_write</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>bs</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bs</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><ternary><condition><expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>res</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><name>PXE_NO_RANDOM</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/*
 * write symmetrically encrypted session key packet
 */</comment>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>symencrypt_sesskey</name><parameter_list>(<parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGP_CFB</name>    <modifier>*</modifier></type><name>cfb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name>algo</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>cipher_algo</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_cfb_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cfb</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>s2k_cipher_algo</name></name></expr></argument>,
						 <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>s2k</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>s2k</name><operator>.</operator><name>key_len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>pgp_cfb_encrypt</name><argument_list>(<argument><expr><name>cfb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>algo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pgp_cfb_encrypt</name><argument_list>(<argument><expr><name>cfb</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sess_key</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sess_key_len</name></name></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pgp_cfb_free</name><argument_list>(<argument><expr><name>cfb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>sess_key_len</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* 5.3: Symmetric-Key Encrypted Session-Key */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>write_symenc_sesskey</name><parameter_list>(<parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>PushFilter</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>pkt</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>pktlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>p</name> <init>= <expr><name>pkt</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>					<comment type="block">/* 5.3 - version number  */</comment>
	<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>s2k_cipher_algo</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>s2k</name><operator>.</operator><name>mode</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>s2k</name><operator>.</operator><name>digest_algo</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>s2k</name><operator>.</operator><name>mode</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>s2k</name><operator>.</operator><name>salt</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>s2k</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>s2k</name><operator>.</operator><name>iter</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>use_sess_key</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>symencrypt_sesskey</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>pktlen</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>pkt</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>write_normal_header</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>PGP_PKT_SYMENCRYPTED_SESSKEY</name></expr></argument>, <argument><expr><name>pktlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pushf_write</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>pktlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pktlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * key setup
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>init_s2k_key</name><parameter_list>(<parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>s2k_cipher_algo</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>s2k_cipher_algo</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cipher_algo</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_s2k_fill</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>s2k</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>s2k_mode</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>s2k_digest_algo</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>s2k_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>pgp_s2k_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>s2k</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>s2k_cipher_algo</name></name></expr></argument>,
						   <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sym_key</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sym_key_len</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>init_sess_key</name><parameter_list>(<parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>use_sess_key</name></name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pub_key</name></name></expr>)</condition>
	<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_STRONG_RANDOM</name></cpp:ifdef>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sess_key_len</name></name> <operator>=</operator> <call><name>pgp_get_cipher_key_size</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cipher_algo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_strong_random</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>ctx</name><operator>-&gt;</operator><name>sess_key</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sess_key_len</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>PXE_NO_RANDOM</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<return>return <expr><name>PXE_NO_RANDOM</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sess_key_len</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>s2k</name><operator>.</operator><name>key_len</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sess_key</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>s2k</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>s2k</name><operator>.</operator><name>key_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * combine
 */</comment>
<function><type><name>int</name></type>
<name>pgp_encrypt</name><parameter_list>(<parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>MBuf</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>MBuf</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PushFilter</name> <modifier>*</modifier></type><name>pf</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>pf_tmp</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * do we have any key
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>sym_key</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>pub_key</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>PXE_ARGUMENT_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* MBuf writer */</comment>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pushf_create_mbuf_writer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pf</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * initialize symkey
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>sym_key</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>init_s2k_key</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>init_sess_key</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * write keypkt
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>pub_key</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_write_pubenc_sesskey</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>write_symenc_sesskey</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

	<comment type="block">/* encrypted data pkt */</comment>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>init_encdata_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pf_tmp</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>pf</name> <operator>=</operator> <name>pf_tmp</name></expr>;</expr_stmt>

	<comment type="block">/* encrypter */</comment>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pushf_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pf_tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>encrypt_filter</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>pf</name> <operator>=</operator> <name>pf_tmp</name></expr>;</expr_stmt>

	<comment type="block">/* hasher */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>disable_mdc</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pushf_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pf_tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mdc_filter</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>pf</name> <operator>=</operator> <name>pf_tmp</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* prefix */</comment>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>write_prefix</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

	<comment type="block">/* compressor */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>compress_algo</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>compress_level</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>init_compress</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pf_tmp</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>pf</name> <operator>=</operator> <name>pf_tmp</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* data streamer */</comment>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>init_litdata_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pf_tmp</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>pf</name> <operator>=</operator> <name>pf_tmp</name></expr>;</expr_stmt>


	<comment type="block">/* text conversion? */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>text_mode</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>convert_crlf</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pushf_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pf_tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>crlf_filter</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>pf</name> <operator>=</operator> <name>pf_tmp</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * chain complete
	 */</comment>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>mbuf_grab</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><call><name>mbuf_avail</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pushf_write</name><argument_list>(<argument><expr><name>pf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pushf_flush</name><argument_list>(<argument><expr><name>pf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<label><name>out</name>:</label>
	<expr_stmt><expr><call><name>pushf_free_all</name><argument_list>(<argument><expr><name>pf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>
</unit>
