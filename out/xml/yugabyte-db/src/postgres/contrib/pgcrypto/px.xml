<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/contrib/pgcrypto/px.c"><comment type="block">/*
 * px.c
 *		Various cryptographic stuff for PostgreSQL.
 *
 * Copyright (c) 2001 Marko Kreen
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *	  notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *	  notice, this list of conditions and the following disclaimer in the
 *	  documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * contrib/pgcrypto/px.c
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px.h"</cpp:file></cpp:include>

<struct>struct <name>error_desc</name>
<block>{
	<decl_stmt><decl><type><name>int</name></type>			<name>err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>error_desc</name></name></type> <name><name>px_err_list</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>PXE_OK</name></expr>, <expr><literal type="string">"Everything ok"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PXE_ERR_GENERIC</name></expr>, <expr><literal type="string">"Some PX error (not specified)"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PXE_NO_HASH</name></expr>, <expr><literal type="string">"No such hash algorithm"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PXE_NO_CIPHER</name></expr>, <expr><literal type="string">"No such cipher algorithm"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PXE_NOTBLOCKSIZE</name></expr>, <expr><literal type="string">"Data not a multiple of block size"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PXE_BAD_OPTION</name></expr>, <expr><literal type="string">"Unknown option"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PXE_BAD_FORMAT</name></expr>, <expr><literal type="string">"Badly formatted type"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PXE_KEY_TOO_BIG</name></expr>, <expr><literal type="string">"Key was too big"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PXE_CIPHER_INIT</name></expr>, <expr><literal type="string">"Cipher cannot be initialized ?"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PXE_HASH_UNUSABLE_FOR_HMAC</name></expr>, <expr><literal type="string">"This hash algorithm is unusable for HMAC"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PXE_DEV_READ_ERROR</name></expr>, <expr><literal type="string">"Error reading from random device"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PXE_BUG</name></expr>, <expr><literal type="string">"pgcrypto bug"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PXE_ARGUMENT_ERROR</name></expr>, <expr><literal type="string">"Illegal argument to function"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PXE_UNKNOWN_SALT_ALGO</name></expr>, <expr><literal type="string">"Unknown salt algorithm"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PXE_BAD_SALT_ROUNDS</name></expr>, <expr><literal type="string">"Incorrect number of rounds"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PXE_MCRYPT_INTERNAL</name></expr>, <expr><literal type="string">"mcrypt internal error"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PXE_NO_RANDOM</name></expr>, <expr><literal type="string">"No strong random source"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PXE_DECRYPT_FAILED</name></expr>, <expr><literal type="string">"Decryption failed"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PXE_PGP_CORRUPT_DATA</name></expr>, <expr><literal type="string">"Wrong key or corrupt data"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PXE_PGP_CORRUPT_ARMOR</name></expr>, <expr><literal type="string">"Corrupt ascii-armor"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PXE_PGP_UNSUPPORTED_COMPR</name></expr>, <expr><literal type="string">"Unsupported compression algorithm"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PXE_PGP_UNSUPPORTED_CIPHER</name></expr>, <expr><literal type="string">"Unsupported cipher algorithm"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PXE_PGP_UNSUPPORTED_HASH</name></expr>, <expr><literal type="string">"Unsupported digest algorithm"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PXE_PGP_COMPRESSION_ERROR</name></expr>, <expr><literal type="string">"Compression error"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PXE_PGP_NOT_TEXT</name></expr>, <expr><literal type="string">"Not text data"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PXE_PGP_UNEXPECTED_PKT</name></expr>, <expr><literal type="string">"Unexpected packet in key data"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PXE_PGP_MATH_FAILED</name></expr>, <expr><literal type="string">"Math operation failed"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PXE_PGP_SHORT_ELGAMAL_KEY</name></expr>, <expr><literal type="string">"Elgamal keys must be at least 1024 bits long"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PXE_PGP_UNKNOWN_PUBALGO</name></expr>, <expr><literal type="string">"Unknown public-key encryption algorithm"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PXE_PGP_WRONG_KEY</name></expr>, <expr><literal type="string">"Wrong key"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PXE_PGP_MULTIPLE_KEYS</name></expr>,
	<expr><literal type="string">"Several keys given - pgcrypto does not handle keyring"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PXE_PGP_EXPECT_PUBLIC_KEY</name></expr>, <expr><literal type="string">"Refusing to encrypt with secret key"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PXE_PGP_EXPECT_SECRET_KEY</name></expr>, <expr><literal type="string">"Cannot decrypt with public key"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PXE_PGP_NOT_V4_KEYPKT</name></expr>, <expr><literal type="string">"Only V4 key packets are supported"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PXE_PGP_KEYPKT_CORRUPT</name></expr>, <expr><literal type="string">"Corrupt key packet"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PXE_PGP_NO_USABLE_KEY</name></expr>, <expr><literal type="string">"No encryption key found"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PXE_PGP_NEED_SECRET_PSW</name></expr>, <expr><literal type="string">"Need password for secret key"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PXE_PGP_BAD_S2K_MODE</name></expr>, <expr><literal type="string">"Bad S2K mode"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PXE_PGP_UNSUPPORTED_PUBALGO</name></expr>, <expr><literal type="string">"Unsupported public key algorithm"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>PXE_PGP_MULTIPLE_SUBKEYS</name></expr>, <expr><literal type="string">"Several subkeys not supported"</literal></expr>}</block></expr>,

	<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Call ereport(ERROR, ...), with an error code and message corresponding to
 * the PXE_* error code given as argument.
 *
 * This is similar to px_strerror(err), but for some errors, we fill in the
 * error code and detail fields more appropriately.
 */</comment>
<function><type><name>void</name></type>
<name>px_THROW_ERROR</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>PXE_NO_RANDOM</name></expr>)</condition>
	<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_STRONG_RANDOM</name></cpp:ifdef>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not generate a random number"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"generating random data is not supported by this build"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"This functionality requires a source of strong random numbers."</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"You need to rebuild PostgreSQL using --enable-strong-random."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* For other errors, use the message from the above list. */</comment>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_EXTERNAL_ROUTINE_INVOCATION_EXCEPTION</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>px_strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>px_strerror</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>error_desc</name></name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <name>px_err_list</name></expr>;</init> <condition><expr><name><name>e</name><operator>-&gt;</operator><name>desc</name></name></expr>;</condition> <incr><expr><name>e</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>err</name></name> <operator>==</operator> <name>err</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name><name>e</name><operator>-&gt;</operator><name>desc</name></name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
	<return>return <expr><literal type="string">"Bad error code"</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* memset that must not be optimized away */</comment>
<function><type><name>void</name></type>
<name>px_memset</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>px_resolve_alias</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PX_Alias</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<while>while <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name><name>list</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name><name>list</name><operator>-&gt;</operator><name>name</name></name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>list</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>name</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> (<modifier>*</modifier><name>debug_handler</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>

<function><type><name>void</name></type>
<name>px_set_debug_handler</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>handler</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>debug_handler</name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>px_debug</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>va_list</name></type>		<name>ap</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>debug_handler</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>buf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>debug_handler</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * combo - cipher + padding (+ checksum)
 */</comment>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>combo_encrypt_len</name><parameter_list>(<parameter><decl><type><name>PX_Combo</name> <modifier>*</modifier></type><name>cx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>dlen</name> <operator>+</operator> <literal type="number">512</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>combo_decrypt_len</name><parameter_list>(<parameter><decl><type><name>PX_Combo</name> <modifier>*</modifier></type><name>cx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>dlen</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>combo_init</name><parameter_list>(<parameter><decl><type><name>PX_Combo</name> <modifier>*</modifier></type><name>cx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>klen</name></decl></parameter>,
		   <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ivlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>	<name>ks</name></decl>,
				<decl><type ref="prev"/><name>ivs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PX_Cipher</name>  <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>cx</name><operator>-&gt;</operator><name>cipher</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>ivbuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>keybuf</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ks</name> <operator>=</operator> <call><name>px_cipher_key_size</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ivs</name> <operator>=</operator> <call><name>px_cipher_iv_size</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ivs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>ivbuf</name> <operator>=</operator> <call><name>px_alloc</name><argument_list>(<argument><expr><name>ivs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ivbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ivs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ivlen</name> <operator>&gt;</operator> <name>ivs</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ivbuf</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>ivs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>ivlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ivbuf</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>ivlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>klen</name> <operator>&gt;</operator> <name>ks</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>klen</name> <operator>=</operator> <name>ks</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>keybuf</name> <operator>=</operator> <call><name>px_alloc</name><argument_list>(<argument><expr><name>ks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>keybuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>keybuf</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>px_cipher_init</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>keybuf</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>, <argument><expr><name>ivbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>ivbuf</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>ivbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>keybuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>combo_encrypt</name><parameter_list>(<parameter><decl><type><name>PX_Combo</name> <modifier>*</modifier></type><name>cx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dlen</name></decl></parameter>,
			  <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>rlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>bbuf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>	<name>bs</name></decl>,
				<decl><type ref="prev"/><name>bpos</name></decl>,
				<decl><type ref="prev"/><name>i</name></decl>,
				<decl><type ref="prev"/><name>pad</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>PX_Cipher</name>  <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>cx</name><operator>-&gt;</operator><name>cipher</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>bbuf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>px_cipher_block_size</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* encrypt */</comment>
	<if_stmt><if>if <condition>(<expr><name>bs</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>bbuf</name> <operator>=</operator> <call><name>px_alloc</name><argument_list>(<argument><expr><name>bs</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>bpos</name> <operator>=</operator> <name>dlen</name> <operator>%</operator> <name>bs</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>rlen</name> <operator>=</operator> <name>dlen</name> <operator>-</operator> <name>bpos</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>bbuf</name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <operator>*</operator><name>rlen</name></expr></argument>, <argument><expr><name>bpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* encrypt full-block data */</comment>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>rlen</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>px_cipher_encrypt</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>*</operator><name>rlen</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
				<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* bbuf has now bpos bytes of stuff */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>cx</name><operator>-&gt;</operator><name>padding</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>pad</name> <operator>=</operator> <name>bs</name> <operator>-</operator> <operator>(</operator><name>bpos</name> <operator>%</operator> <name>bs</name><operator>)</operator></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pad</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>bbuf</name><index>[<expr><name>bpos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>pad</name></expr>;</expr_stmt></block_content></block></for>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>bpos</name> <operator>%</operator> <name>bs</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* ERROR? */</comment>
			<expr_stmt><expr><name>pad</name> <operator>=</operator> <name>bs</name> <operator>-</operator> <operator>(</operator><name>bpos</name> <operator>%</operator> <name>bs</name><operator>)</operator></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pad</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>bbuf</name><index>[<expr><name>bpos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* encrypt the rest - pad */</comment>
		<if_stmt><if>if <condition>(<expr><name>bpos</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>px_cipher_encrypt</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>bbuf</name></expr></argument>, <argument><expr><name>bpos</name></expr></argument>, <argument><expr><name>res</name> <operator>+</operator> <operator>*</operator><name>rlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>rlen</name> <operator>+=</operator> <name>bpos</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* stream cipher/mode - no pad needed */</comment>
		<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>px_cipher_encrypt</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><name>rlen</name> <operator>=</operator> <name>dlen</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
<label><name>out</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>bbuf</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>bbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>combo_decrypt</name><parameter_list>(<parameter><decl><type><name>PX_Combo</name> <modifier>*</modifier></type><name>cx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dlen</name></decl></parameter>,
			  <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>rlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type>	<name>bs</name></decl>,
				<decl><type ref="prev"/><name>i</name></decl>,
				<decl><type ref="prev"/><name>pad</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>	<name>pad_ok</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>PX_Cipher</name>  <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>cx</name><operator>-&gt;</operator><name>cipher</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* decide whether zero-length input is allowed */</comment>
	<if_stmt><if>if <condition>(<expr><name>dlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* with padding, empty ciphertext is not allowed */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>cx</name><operator>-&gt;</operator><name>padding</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>PXE_DECRYPT_FAILED</name></expr>;</return></block_content></block></if></if_stmt>

		<comment type="block">/* without padding, report empty result */</comment>
		<expr_stmt><expr><operator>*</operator><name>rlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>bs</name> <operator>=</operator> <call><name>px_cipher_block_size</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>bs</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>dlen</name> <operator>%</operator> <name>bs</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>block_error</name>;</goto></block_content></block></if></if_stmt>

	<comment type="block">/* decrypt */</comment>
	<expr_stmt><expr><operator>*</operator><name>rlen</name> <operator>=</operator> <name>dlen</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_cipher_decrypt</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* unpad */</comment>
	<if_stmt><if>if <condition>(<expr><name>bs</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>cx</name><operator>-&gt;</operator><name>padding</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>pad</name> <operator>=</operator> <name><name>res</name><index>[<expr><operator>*</operator><name>rlen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>pad_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>pad</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pad</name> <operator>&lt;=</operator> <name>bs</name> <operator>&amp;&amp;</operator> <name>pad</name> <operator>&lt;=</operator> <operator>*</operator><name>rlen</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>pad_ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>*</operator><name>rlen</name> <operator>-</operator> <name>pad</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>*</operator><name>rlen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<if_stmt><if>if <condition>(<expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>pad</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>pad_ok</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt></block_content></block></for>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>pad_ok</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>rlen</name> <operator>-=</operator> <name>pad</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>block_error</name>:</label>
	<return>return <expr><name>PXE_NOTBLOCKSIZE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>combo_free</name><parameter_list>(<parameter><decl><type><name>PX_Combo</name> <modifier>*</modifier></type><name>cx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>cx</name><operator>-&gt;</operator><name>cipher</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>px_cipher_free</name><argument_list>(<argument><expr><name><name>cx</name><operator>-&gt;</operator><name>cipher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>cx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* PARSER */</comment>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_cipher_name</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>full</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>cipher</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pad</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>p</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>p2</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>cipher</name> <operator>=</operator> <name>full</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>pad</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<while>while <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>q</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>p</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>p</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>p2</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>p2</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>p2</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"pad"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>pad</name> <operator>=</operator> <name>p2</name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<return>return <expr><name>PXE_BAD_OPTION</name></expr>;</return></block_content></block></else></if_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<return>return <expr><name>PXE_BAD_FORMAT</name></expr>;</return></block_content></block></else></if_stmt>

		<expr_stmt><expr><name>p</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* provider */</comment>

<function><type><name>int</name></type>
<name>px_find_combo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>PX_Combo</name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>buf</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>s_cipher</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>s_pad</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>PX_Combo</name>   <modifier>*</modifier></type><name>cx</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cx</name> <operator>=</operator> <call><name>px_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>cx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>cx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>px_alloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>parse_cipher_name</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s_cipher</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s_pad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>err</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>px_find_cipher</name><argument_list>(<argument><expr><name>s_cipher</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cx</name><operator>-&gt;</operator><name>cipher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>err1</name>;</goto></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>s_pad</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>s_pad</name></expr></argument>, <argument><expr><literal type="string">"pkcs"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>cx</name><operator>-&gt;</operator><name>padding</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>s_pad</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>cx</name><operator>-&gt;</operator><name>padding</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<goto>goto <name>err1</name>;</goto></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>cx</name><operator>-&gt;</operator><name>padding</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name><name>cx</name><operator>-&gt;</operator><name>init</name></name> <operator>=</operator> <name>combo_init</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cx</name><operator>-&gt;</operator><name>encrypt</name></name> <operator>=</operator> <name>combo_encrypt</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cx</name><operator>-&gt;</operator><name>decrypt</name></name> <operator>=</operator> <name>combo_decrypt</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cx</name><operator>-&gt;</operator><name>encrypt_len</name></name> <operator>=</operator> <name>combo_encrypt_len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cx</name><operator>-&gt;</operator><name>decrypt_len</name></name> <operator>=</operator> <name>combo_decrypt_len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cx</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>combo_free</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <name>cx</name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>err1</name>:</label>
	<if_stmt><if>if <condition>(<expr><name><name>cx</name><operator>-&gt;</operator><name>cipher</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>px_cipher_free</name><argument_list>(<argument><expr><name><name>cx</name><operator>-&gt;</operator><name>cipher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>PXE_NO_CIPHER</name></expr>;</return>
</block_content>}</block></function>
</unit>
