<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/contrib/pgcrypto/openssl.c"><comment type="block">/*
 * openssl.c
 *		Wrapper for OpenSSL library.
 *
 * Copyright (c) 2001 Marko Kreen
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *	  notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *	  notice, this list of conditions and the following disclaimer in the
 *	  documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * contrib/pgcrypto/openssl.c
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/evp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/rand.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/resowner.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Max lengths we might want to handle.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_KEY</name></cpp:macro>		<cpp:value>(512/8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_IV</name></cpp:macro>		<cpp:value>(128/8)</cpp:value></cpp:define>

<comment type="block">/*
 * Hashes
 */</comment>

<comment type="block">/*
 * To make sure we don't leak OpenSSL handles on abort, we keep OSSLDigest
 * objects in a linked list, allocated in TopMemoryContext. We use the
 * ResourceOwner mechanism to free them on abort.
 */</comment>
<typedef>typedef <type><struct>struct <name>OSSLDigest</name>
<block>{
	<decl_stmt><decl><type><specifier>const</specifier> <name>EVP_MD</name> <modifier>*</modifier></type><name>algo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVP_MD_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>ResourceOwner</name></type> <name>owner</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>OSSLDigest</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>OSSLDigest</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
}</block></struct></type> <name>OSSLDigest</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>OSSLDigest</name> <modifier>*</modifier></type><name>open_digests</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>digest_resowner_callback_registered</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_openssl_digest</name><parameter_list>(<parameter><decl><type><name>OSSLDigest</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>EVP_MD_CTX_destroy</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>digest</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>digest</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>digest</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>open_digests</name> <operator>=</operator> <name><name>digest</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>digest</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>digest</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>digest</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Close any open OpenSSL handles on abort.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>digest_free_callback</name><parameter_list>(<parameter><decl><type><name>ResourceReleasePhase</name></type> <name>phase</name></decl></parameter>,
					 <parameter><decl><type><name>bool</name></type> <name>isCommit</name></decl></parameter>,
					 <parameter><decl><type><name>bool</name></type> <name>isTopLevel</name></decl></parameter>,
					 <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OSSLDigest</name> <modifier>*</modifier></type><name>curr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSSLDigest</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>phase</name> <operator>!=</operator> <name>RESOURCE_RELEASE_AFTER_LOCKS</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>next</name> <operator>=</operator> <name>open_digests</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>next</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>curr</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>owner</name></name> <operator>==</operator> <name>CurrentResourceOwner</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>isCommit</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"pgcrypto digest reference leak: digest %p still referenced"</literal></expr></argument>, <argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>free_openssl_digest</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>digest_result_size</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OSSLDigest</name> <modifier>*</modifier></type><name>digest</name> <init>= <expr><operator>(</operator><name>OSSLDigest</name> <operator>*</operator><operator>)</operator> <name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>EVP_MD_CTX_size</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>digest_block_size</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OSSLDigest</name> <modifier>*</modifier></type><name>digest</name> <init>= <expr><operator>(</operator><name>OSSLDigest</name> <operator>*</operator><operator>)</operator> <name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>EVP_MD_CTX_block_size</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>digest_reset</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OSSLDigest</name> <modifier>*</modifier></type><name>digest</name> <init>= <expr><operator>(</operator><name>OSSLDigest</name> <operator>*</operator><operator>)</operator> <name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>EVP_DigestInit_ex</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name><name>digest</name><operator>-&gt;</operator><name>algo</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>digest_update</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dlen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OSSLDigest</name> <modifier>*</modifier></type><name>digest</name> <init>= <expr><operator>(</operator><name>OSSLDigest</name> <operator>*</operator><operator>)</operator> <name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>EVP_DigestUpdate</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>digest_finish</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OSSLDigest</name> <modifier>*</modifier></type><name>digest</name> <init>= <expr><operator>(</operator><name>OSSLDigest</name> <operator>*</operator><operator>)</operator> <name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>EVP_DigestFinal_ex</name><argument_list>(<argument><expr><name><name>digest</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>digest_free</name><parameter_list>(<parameter><decl><type><name>PX_MD</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OSSLDigest</name> <modifier>*</modifier></type><name>digest</name> <init>= <expr><operator>(</operator><name>OSSLDigest</name> <operator>*</operator><operator>)</operator> <name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>free_openssl_digest</name><argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>px_openssl_initialized</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* PUBLIC functions */</comment>

<function><type><name>int</name></type>
<name>px_find_digest</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>PX_MD</name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>EVP_MD</name> <modifier>*</modifier></type><name>md</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVP_MD_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PX_MD</name>	   <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSSLDigest</name> <modifier>*</modifier></type><name>digest</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>px_openssl_initialized</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>px_openssl_initialized</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>OpenSSL_add_all_algorithms</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>digest_resowner_callback_registered</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>RegisterResourceReleaseCallback</name><argument_list>(<argument><expr><name>digest_free_callback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>digest_resowner_callback_registered</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>md</name> <operator>=</operator> <call><name>EVP_get_digestbyname</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>md</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>PXE_NO_HASH</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Create an OSSLDigest object, an OpenSSL MD object, and a PX_MD object.
	 * The order is crucial, to make sure we don't leak anything on
	 * out-of-memory or other error.
	 */</comment>
	<expr_stmt><expr><name>digest</name> <operator>=</operator> <call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>digest</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>EVP_MD_CTX_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>EVP_DigestInit_ex</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>md</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>digest</name><operator>-&gt;</operator><name>algo</name></name> <operator>=</operator> <name>md</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>digest</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>digest</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <name>CurrentResourceOwner</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>digest</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>open_digests</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>digest</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>open_digests</name> <operator>=</operator> <name>digest</name></expr>;</expr_stmt>

	<comment type="block">/* The PX_MD object is allocated in the current memory context. */</comment>
	<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>px_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>h</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>result_size</name></name> <operator>=</operator> <name>digest_result_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>block_size</name></name> <operator>=</operator> <name>digest_block_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>reset</name></name> <operator>=</operator> <name>digest_reset</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>update</name></name> <operator>=</operator> <name>digest_update</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>finish</name></name> <operator>=</operator> <name>digest_finish</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>digest_free</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>p</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>digest</name></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Ciphers
 *
 * We use OpenSSL's EVP* family of functions for these.
 */</comment>

<comment type="block">/*
 * prototype for the EVP functions that return an algorithm, e.g.
 * EVP_aes_128_cbc().
 */</comment>
<typedef>typedef <function_decl><type><specifier>const</specifier> <name>EVP_CIPHER</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>ossl_EVP_cipher_func</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<comment type="block">/*
 * ossl_cipher contains the static information about each cipher.
 */</comment>
<struct>struct <name>ossl_cipher</name>
<block>{
	<function_decl><type><name>int</name></type>			(<modifier>*</modifier><name>init</name>) <parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>klen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>)</parameter_list>;</function_decl>
	<decl_stmt><decl><type><name>ossl_EVP_cipher_func</name></type> <name>cipher_func</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>block_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>max_key_size</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/*
 * OSSLCipher contains the state for using a cipher. A separate OSSLCipher
 * object is allocated in each px_find_cipher() call.
 *
 * To make sure we don't leak OpenSSL handles on abort, we keep OSSLCipher
 * objects in a linked list, allocated in TopMemoryContext. We use the
 * ResourceOwner mechanism to free them on abort.
 */</comment>
<typedef>typedef <type><struct>struct <name>OSSLCipher</name>
<block>{
	<decl_stmt><decl><type><name>EVP_CIPHER_CTX</name> <modifier>*</modifier></type><name>evp_ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>EVP_CIPHER</name> <modifier>*</modifier></type><name>evp_ciph</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>key</name><index>[<expr><name>MAX_KEY</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>iv</name><index>[<expr><name>MAX_IV</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>	<name>klen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>	<name>init</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ossl_cipher</name></name> <modifier>*</modifier></type><name>ciph</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>ResourceOwner</name></type> <name>owner</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>OSSLCipher</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>OSSLCipher</name></name> <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
}</block></struct></type> <name>OSSLCipher</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>OSSLCipher</name> <modifier>*</modifier></type><name>open_ciphers</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>cipher_resowner_callback_registered</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>free_openssl_cipher</name><parameter_list>(<parameter><decl><type><name>OSSLCipher</name> <modifier>*</modifier></type><name>od</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>EVP_CIPHER_CTX_free</name><argument_list>(<argument><expr><name><name>od</name><operator>-&gt;</operator><name>evp_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>od</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>od</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>od</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>open_ciphers</name> <operator>=</operator> <name><name>od</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>od</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>od</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>od</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>od</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Close any open OpenSSL cipher handles on abort.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>cipher_free_callback</name><parameter_list>(<parameter><decl><type><name>ResourceReleasePhase</name></type> <name>phase</name></decl></parameter>,
					 <parameter><decl><type><name>bool</name></type> <name>isCommit</name></decl></parameter>,
					 <parameter><decl><type><name>bool</name></type> <name>isTopLevel</name></decl></parameter>,
					 <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OSSLCipher</name> <modifier>*</modifier></type><name>curr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSSLCipher</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>phase</name> <operator>!=</operator> <name>RESOURCE_RELEASE_AFTER_LOCKS</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>next</name> <operator>=</operator> <name>open_ciphers</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>next</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>curr</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>curr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>curr</name><operator>-&gt;</operator><name>owner</name></name> <operator>==</operator> <name>CurrentResourceOwner</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>isCommit</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"pgcrypto cipher reference leak: cipher %p still referenced"</literal></expr></argument>, <argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>free_openssl_cipher</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/* Common routines for all algorithms */</comment>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>gen_ossl_block_size</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OSSLCipher</name> <modifier>*</modifier></type><name>od</name> <init>= <expr><operator>(</operator><name>OSSLCipher</name> <operator>*</operator><operator>)</operator> <name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

	<return>return <expr><name><name>od</name><operator>-&gt;</operator><name>ciph</name><operator>-&gt;</operator><name>block_size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>gen_ossl_key_size</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OSSLCipher</name> <modifier>*</modifier></type><name>od</name> <init>= <expr><operator>(</operator><name>OSSLCipher</name> <operator>*</operator><operator>)</operator> <name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

	<return>return <expr><name><name>od</name><operator>-&gt;</operator><name>ciph</name><operator>-&gt;</operator><name>max_key_size</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>
<name>gen_ossl_iv_size</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name></type>	<name>ivlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSSLCipher</name> <modifier>*</modifier></type><name>od</name> <init>= <expr><operator>(</operator><name>OSSLCipher</name> <operator>*</operator><operator>)</operator> <name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>ivlen</name> <operator>=</operator> <name><name>od</name><operator>-&gt;</operator><name>ciph</name><operator>-&gt;</operator><name>block_size</name></name></expr>;</expr_stmt>
	<return>return <expr><name>ivlen</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>gen_ossl_free</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OSSLCipher</name> <modifier>*</modifier></type><name>od</name> <init>= <expr><operator>(</operator><name>OSSLCipher</name> <operator>*</operator><operator>)</operator> <name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>free_openssl_cipher</name><argument_list>(<argument><expr><name>od</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>gen_ossl_decrypt</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dlen</name></decl></parameter>,
				 <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OSSLCipher</name> <modifier>*</modifier></type><name>od</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>outlen</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>od</name><operator>-&gt;</operator><name>init</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVP_DecryptInit_ex</name><argument_list>(<argument><expr><name><name>od</name><operator>-&gt;</operator><name>evp_ctx</name></name></expr></argument>, <argument><expr><name><name>od</name><operator>-&gt;</operator><name>evp_ciph</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>PXE_CIPHER_INIT</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVP_CIPHER_CTX_set_key_length</name><argument_list>(<argument><expr><name><name>od</name><operator>-&gt;</operator><name>evp_ctx</name></name></expr></argument>, <argument><expr><name><name>od</name><operator>-&gt;</operator><name>klen</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>PXE_CIPHER_INIT</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVP_DecryptInit_ex</name><argument_list>(<argument><expr><name><name>od</name><operator>-&gt;</operator><name>evp_ctx</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>od</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>od</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>PXE_CIPHER_INIT</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>od</name><operator>-&gt;</operator><name>init</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVP_DecryptUpdate</name><argument_list>(<argument><expr><name><name>od</name><operator>-&gt;</operator><name>evp_ctx</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outlen</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>PXE_DECRYPT_FAILED</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>gen_ossl_encrypt</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>dlen</name></decl></parameter>,
				 <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OSSLCipher</name> <modifier>*</modifier></type><name>od</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>outlen</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>od</name><operator>-&gt;</operator><name>init</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVP_EncryptInit_ex</name><argument_list>(<argument><expr><name><name>od</name><operator>-&gt;</operator><name>evp_ctx</name></name></expr></argument>, <argument><expr><name><name>od</name><operator>-&gt;</operator><name>evp_ciph</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>PXE_CIPHER_INIT</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVP_CIPHER_CTX_set_key_length</name><argument_list>(<argument><expr><name><name>od</name><operator>-&gt;</operator><name>evp_ctx</name></name></expr></argument>, <argument><expr><name><name>od</name><operator>-&gt;</operator><name>klen</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>PXE_CIPHER_INIT</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVP_EncryptInit_ex</name><argument_list>(<argument><expr><name><name>od</name><operator>-&gt;</operator><name>evp_ctx</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>od</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>od</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>PXE_CIPHER_INIT</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>od</name><operator>-&gt;</operator><name>init</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVP_EncryptUpdate</name><argument_list>(<argument><expr><name><name>od</name><operator>-&gt;</operator><name>evp_ctx</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outlen</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>PXE_ERR_GENERIC</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Blowfish */</comment>

<comment type="block">/*
 * Check if strong crypto is supported. Some OpenSSL installations
 * support only short keys and unfortunately BF_set_key does not return any
 * error value. This function tests if is possible to use strong key.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>bf_check_supported_key_len</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8</name></type> <name><name>key</name><index>[<expr><literal type="number">56</literal></expr>]</index></name> <init>= <expr><block>{
		<expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0xe1</literal></expr>, <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0xc3</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x69</literal></expr>,
		<expr><literal type="number">0x5a</literal></expr>, <expr><literal type="number">0x4b</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0x2d</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x33</literal></expr>,
		<expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">0xfd</literal></expr>,
		<expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0x2f</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x76</literal></expr>,
		<expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>,
		<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>
	}</block></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8</name></type> <name><name>data</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x10</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8</name></type> <name><name>res</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0x53</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>out</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVP_CIPHER_CTX</name> <modifier>*</modifier></type><name>evp_ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>outlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* encrypt with 448bits key and verify output */</comment>
	<expr_stmt><expr><name>evp_ctx</name> <operator>=</operator> <call><name>EVP_CIPHER_CTX_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>evp_ctx</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVP_EncryptInit_ex</name><argument_list>(<argument><expr><name>evp_ctx</name></expr></argument>, <argument><expr><call><name>EVP_bf_ecb</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>leave</name>;</goto></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVP_CIPHER_CTX_set_key_length</name><argument_list>(<argument><expr><name>evp_ctx</name></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>leave</name>;</goto></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVP_EncryptInit_ex</name><argument_list>(<argument><expr><name>evp_ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>leave</name>;</goto></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EVP_EncryptUpdate</name><argument_list>(<argument><expr><name>evp_ctx</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outlen</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>leave</name>;</goto></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>leave</name>;</goto></block_content></block></if></if_stmt>				<comment type="block">/* Output does not match -&gt; strong cipher is
								 * not supported */</comment>
	<expr_stmt><expr><name>status</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<label><name>leave</name>:</label>
	<expr_stmt><expr><call><name>EVP_CIPHER_CTX_free</name><argument_list>(<argument><expr><name>evp_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>status</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>bf_init</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>klen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OSSLCipher</name> <modifier>*</modifier></type><name>od</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>	<name>bs</name> <init>= <expr><call><name>gen_ossl_block_size</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>bf_is_strong</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Test if key len is supported. BF_set_key silently cut large keys and it
	 * could be a problem when user transfer crypted data from one server to
	 * another.
	 */</comment>

	<if_stmt><if>if <condition>(<expr><name>bf_is_strong</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>bf_is_strong</name> <operator>=</operator> <call><name>bf_check_supported_key_len</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bf_is_strong</name> <operator>&amp;&amp;</operator> <name>klen</name> <operator>&gt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>PXE_KEY_TOO_BIG</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Key len is supported. We can use it. */</comment>
	<expr_stmt><expr><name><name>od</name><operator>-&gt;</operator><name>klen</name></name> <operator>=</operator> <name>klen</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>od</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>iv</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>od</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>od</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* DES */</comment>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ossl_des_init</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>klen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OSSLCipher</name> <modifier>*</modifier></type><name>od</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>	<name>bs</name> <init>= <expr><call><name>gen_ossl_block_size</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>od</name><operator>-&gt;</operator><name>klen</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>od</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>od</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><ternary><condition><expr><name>klen</name> <operator>&gt;</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><name>klen</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>iv</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>od</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>od</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* DES3 */</comment>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ossl_des3_init</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>klen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OSSLCipher</name> <modifier>*</modifier></type><name>od</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>	<name>bs</name> <init>= <expr><call><name>gen_ossl_block_size</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>od</name><operator>-&gt;</operator><name>klen</name></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>od</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>od</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><ternary><condition><expr><name>klen</name> <operator>&gt;</operator> <literal type="number">24</literal></expr> ?</condition><then> <expr><literal type="number">24</literal></expr> </then><else>: <expr><name>klen</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>iv</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>od</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>od</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* CAST5 */</comment>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ossl_cast_init</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>klen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OSSLCipher</name> <modifier>*</modifier></type><name>od</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>	<name>bs</name> <init>= <expr><call><name>gen_ossl_block_size</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>od</name><operator>-&gt;</operator><name>klen</name></name> <operator>=</operator> <name>klen</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>od</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>iv</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>od</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>od</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* AES */</comment>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ossl_aes_init</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>klen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OSSLCipher</name> <modifier>*</modifier></type><name>od</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>	<name>bs</name> <init>= <expr><call><name>gen_ossl_block_size</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>klen</name> <operator>&lt;=</operator> <literal type="number">128</literal> <operator>/</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>od</name><operator>-&gt;</operator><name>klen</name></name> <operator>=</operator> <literal type="number">128</literal> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>klen</name> <operator>&lt;=</operator> <literal type="number">192</literal> <operator>/</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>od</name><operator>-&gt;</operator><name>klen</name></name> <operator>=</operator> <literal type="number">192</literal> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>klen</name> <operator>&lt;=</operator> <literal type="number">256</literal> <operator>/</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>od</name><operator>-&gt;</operator><name>klen</name></name> <operator>=</operator> <literal type="number">256</literal> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>PXE_KEY_TOO_BIG</name></expr>;</return></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>od</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>iv</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>od</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>od</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ossl_aes_ecb_init</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>klen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OSSLCipher</name> <modifier>*</modifier></type><name>od</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>err</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ossl_aes_init</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><name><name>od</name><operator>-&gt;</operator><name>klen</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><literal type="number">128</literal> <operator>/</operator> <literal type="number">8</literal></expr>:</case>
			<expr_stmt><expr><name><name>od</name><operator>-&gt;</operator><name>evp_ciph</name></name> <operator>=</operator> <call><name>EVP_aes_128_ecb</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">192</literal> <operator>/</operator> <literal type="number">8</literal></expr>:</case>
			<expr_stmt><expr><name><name>od</name><operator>-&gt;</operator><name>evp_ciph</name></name> <operator>=</operator> <call><name>EVP_aes_192_ecb</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">256</literal> <operator>/</operator> <literal type="number">8</literal></expr>:</case>
			<expr_stmt><expr><name><name>od</name><operator>-&gt;</operator><name>evp_ciph</name></name> <operator>=</operator> <call><name>EVP_aes_256_ecb</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<comment type="block">/* shouldn't happen */</comment>
			<expr_stmt><expr><name>err</name> <operator>=</operator> <name>PXE_CIPHER_INIT</name></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>ossl_aes_cbc_init</name><parameter_list>(<parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>klen</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OSSLCipher</name> <modifier>*</modifier></type><name>od</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>err</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ossl_aes_init</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><name><name>od</name><operator>-&gt;</operator><name>klen</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><literal type="number">128</literal> <operator>/</operator> <literal type="number">8</literal></expr>:</case>
			<expr_stmt><expr><name><name>od</name><operator>-&gt;</operator><name>evp_ciph</name></name> <operator>=</operator> <call><name>EVP_aes_128_cbc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">192</literal> <operator>/</operator> <literal type="number">8</literal></expr>:</case>
			<expr_stmt><expr><name><name>od</name><operator>-&gt;</operator><name>evp_ciph</name></name> <operator>=</operator> <call><name>EVP_aes_192_cbc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">256</literal> <operator>/</operator> <literal type="number">8</literal></expr>:</case>
			<expr_stmt><expr><name><name>od</name><operator>-&gt;</operator><name>evp_ciph</name></name> <operator>=</operator> <call><name>EVP_aes_256_cbc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<comment type="block">/* shouldn't happen */</comment>
			<expr_stmt><expr><name>err</name> <operator>=</operator> <name>PXE_CIPHER_INIT</name></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * aliases
 */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>PX_Alias</name></type> <name><name>ossl_aliases</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="string">"bf"</literal></expr>, <expr><literal type="string">"bf-cbc"</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"blowfish"</literal></expr>, <expr><literal type="string">"bf-cbc"</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"blowfish-cbc"</literal></expr>, <expr><literal type="string">"bf-cbc"</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"blowfish-ecb"</literal></expr>, <expr><literal type="string">"bf-ecb"</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"blowfish-cfb"</literal></expr>, <expr><literal type="string">"bf-cfb"</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"des"</literal></expr>, <expr><literal type="string">"des-cbc"</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"3des"</literal></expr>, <expr><literal type="string">"des3-cbc"</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"3des-ecb"</literal></expr>, <expr><literal type="string">"des3-ecb"</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"3des-cbc"</literal></expr>, <expr><literal type="string">"des3-cbc"</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"cast5"</literal></expr>, <expr><literal type="string">"cast5-cbc"</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"aes"</literal></expr>, <expr><literal type="string">"aes-cbc"</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"rijndael"</literal></expr>, <expr><literal type="string">"aes-cbc"</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"rijndael-cbc"</literal></expr>, <expr><literal type="string">"aes-cbc"</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"rijndael-ecb"</literal></expr>, <expr><literal type="string">"aes-ecb"</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ossl_cipher</name></name></type> <name>ossl_bf_cbc</name> <init>= <expr><block>{
	<expr><name>bf_init</name></expr>,
	<expr><name>EVP_bf_cbc</name></expr>,
	<expr><literal type="number">64</literal> <operator>/</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">448</literal> <operator>/</operator> <literal type="number">8</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ossl_cipher</name></name></type> <name>ossl_bf_ecb</name> <init>= <expr><block>{
	<expr><name>bf_init</name></expr>,
	<expr><name>EVP_bf_ecb</name></expr>,
	<expr><literal type="number">64</literal> <operator>/</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">448</literal> <operator>/</operator> <literal type="number">8</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ossl_cipher</name></name></type> <name>ossl_bf_cfb</name> <init>= <expr><block>{
	<expr><name>bf_init</name></expr>,
	<expr><name>EVP_bf_cfb</name></expr>,
	<expr><literal type="number">64</literal> <operator>/</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">448</literal> <operator>/</operator> <literal type="number">8</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ossl_cipher</name></name></type> <name>ossl_des_ecb</name> <init>= <expr><block>{
	<expr><name>ossl_des_init</name></expr>,
	<expr><name>EVP_des_ecb</name></expr>,
	<expr><literal type="number">64</literal> <operator>/</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">64</literal> <operator>/</operator> <literal type="number">8</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ossl_cipher</name></name></type> <name>ossl_des_cbc</name> <init>= <expr><block>{
	<expr><name>ossl_des_init</name></expr>,
	<expr><name>EVP_des_cbc</name></expr>,
	<expr><literal type="number">64</literal> <operator>/</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">64</literal> <operator>/</operator> <literal type="number">8</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ossl_cipher</name></name></type> <name>ossl_des3_ecb</name> <init>= <expr><block>{
	<expr><name>ossl_des3_init</name></expr>,
	<expr><name>EVP_des_ede3_ecb</name></expr>,
	<expr><literal type="number">64</literal> <operator>/</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">192</literal> <operator>/</operator> <literal type="number">8</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ossl_cipher</name></name></type> <name>ossl_des3_cbc</name> <init>= <expr><block>{
	<expr><name>ossl_des3_init</name></expr>,
	<expr><name>EVP_des_ede3_cbc</name></expr>,
	<expr><literal type="number">64</literal> <operator>/</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">192</literal> <operator>/</operator> <literal type="number">8</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ossl_cipher</name></name></type> <name>ossl_cast_ecb</name> <init>= <expr><block>{
	<expr><name>ossl_cast_init</name></expr>,
	<expr><name>EVP_cast5_ecb</name></expr>,
	<expr><literal type="number">64</literal> <operator>/</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">128</literal> <operator>/</operator> <literal type="number">8</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ossl_cipher</name></name></type> <name>ossl_cast_cbc</name> <init>= <expr><block>{
	<expr><name>ossl_cast_init</name></expr>,
	<expr><name>EVP_cast5_cbc</name></expr>,
	<expr><literal type="number">64</literal> <operator>/</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">128</literal> <operator>/</operator> <literal type="number">8</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ossl_cipher</name></name></type> <name>ossl_aes_ecb</name> <init>= <expr><block>{
	<expr><name>ossl_aes_ecb_init</name></expr>,
	<expr><name>NULL</name></expr>,						<comment type="block">/* EVP_aes_XXX_ecb(), determined in init
								 * function */</comment>
	<expr><literal type="number">128</literal> <operator>/</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">256</literal> <operator>/</operator> <literal type="number">8</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ossl_cipher</name></name></type> <name>ossl_aes_cbc</name> <init>= <expr><block>{
	<expr><name>ossl_aes_cbc_init</name></expr>,
	<expr><name>NULL</name></expr>,						<comment type="block">/* EVP_aes_XXX_cbc(), determined in init
								 * function */</comment>
	<expr><literal type="number">128</literal> <operator>/</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">256</literal> <operator>/</operator> <literal type="number">8</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Special handlers
 */</comment>
<struct>struct <name>ossl_cipher_lookup</name>
<block>{
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ossl_cipher</name></name> <modifier>*</modifier></type><name>ciph</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ossl_cipher_lookup</name></name></type> <name><name>ossl_cipher_types</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="string">"bf-cbc"</literal></expr>, <expr><operator>&amp;</operator><name>ossl_bf_cbc</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"bf-ecb"</literal></expr>, <expr><operator>&amp;</operator><name>ossl_bf_ecb</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"bf-cfb"</literal></expr>, <expr><operator>&amp;</operator><name>ossl_bf_cfb</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"des-ecb"</literal></expr>, <expr><operator>&amp;</operator><name>ossl_des_ecb</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"des-cbc"</literal></expr>, <expr><operator>&amp;</operator><name>ossl_des_cbc</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"des3-ecb"</literal></expr>, <expr><operator>&amp;</operator><name>ossl_des3_ecb</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"des3-cbc"</literal></expr>, <expr><operator>&amp;</operator><name>ossl_des3_cbc</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"cast5-ecb"</literal></expr>, <expr><operator>&amp;</operator><name>ossl_cast_ecb</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"cast5-cbc"</literal></expr>, <expr><operator>&amp;</operator><name>ossl_cast_cbc</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"aes-ecb"</literal></expr>, <expr><operator>&amp;</operator><name>ossl_aes_ecb</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"aes-cbc"</literal></expr>, <expr><operator>&amp;</operator><name>ossl_aes_cbc</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* PUBLIC functions */</comment>

<function><type><name>int</name></type>
<name>px_find_cipher</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>PX_Cipher</name> <modifier>*</modifier><modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ossl_cipher_lookup</name></name> <modifier>*</modifier></type><name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PX_Cipher</name>  <modifier>*</modifier></type><name>c</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>EVP_CIPHER_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OSSLCipher</name> <modifier>*</modifier></type><name>od</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>px_resolve_alias</name><argument_list>(<argument><expr><name>ossl_aliases</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>ossl_cipher_types</name></expr>;</init> <condition><expr><name><name>i</name><operator>-&gt;</operator><name>name</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>i</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
	<if_stmt><if>if <condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>name</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>PXE_NO_CIPHER</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cipher_resowner_callback_registered</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>RegisterResourceReleaseCallback</name><argument_list>(<argument><expr><name>cipher_free_callback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cipher_resowner_callback_registered</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Create an OSSLCipher object, an EVP_CIPHER_CTX object and a PX_Cipher.
	 * The order is crucial, to make sure we don't leak anything on
	 * out-of-memory or other error.
	 */</comment>
	<expr_stmt><expr><name>od</name> <operator>=</operator> <call><name>MemoryContextAllocZero</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>od</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>od</name><operator>-&gt;</operator><name>ciph</name></name> <operator>=</operator> <name><name>i</name><operator>-&gt;</operator><name>ciph</name></name></expr>;</expr_stmt>

	<comment type="block">/* Allocate an EVP_CIPHER_CTX object. */</comment>
	<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>EVP_CIPHER_CTX_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>od</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>PXE_CIPHER_INIT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>od</name><operator>-&gt;</operator><name>evp_ctx</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>od</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <name>CurrentResourceOwner</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>od</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>open_ciphers</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>od</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>open_ciphers</name> <operator>=</operator> <name>od</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>ciph</name><operator>-&gt;</operator><name>cipher_func</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>od</name><operator>-&gt;</operator><name>evp_ciph</name></name> <operator>=</operator> <call><name><name>i</name><operator>-&gt;</operator><name>ciph</name><operator>-&gt;</operator><name>cipher_func</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* The PX_Cipher is allocated in current memory context */</comment>
	<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>px_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>block_size</name></name> <operator>=</operator> <name>gen_ossl_block_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>key_size</name></name> <operator>=</operator> <name>gen_ossl_key_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>iv_size</name></name> <operator>=</operator> <name>gen_ossl_iv_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>gen_ossl_free</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>init</name></name> <operator>=</operator> <name><name>od</name><operator>-&gt;</operator><name>ciph</name><operator>-&gt;</operator><name>init</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>encrypt</name></name> <operator>=</operator> <name>gen_ossl_encrypt</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>decrypt</name></name> <operator>=</operator> <name>gen_ossl_decrypt</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>od</name></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
