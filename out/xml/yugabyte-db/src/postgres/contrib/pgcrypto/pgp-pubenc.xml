<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/contrib/pgcrypto/pgp-pubenc.c"><comment type="block">/*
 * pgp-pubenc.c
 *	  Encrypt session key with public key.
 *
 * Copyright (c) 2005 Marko Kreen
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *	  notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *	  notice, this list of conditions and the following disclaimer in the
 *	  documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * contrib/pgcrypto/pgp-pubenc.c
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgp.h"</cpp:file></cpp:include>

<comment type="block">/*
 * padded msg: 02 || non-zero pad bytes || 00 || msg
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>pad_eme_pkcs1_v15</name><parameter_list>(<parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>data_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>res_len</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier><modifier>*</modifier></type><name>res_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_STRONG_RANDOM</name></cpp:ifdef>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>buf</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>pad_len</name> <init>= <expr><name>res_len</name> <operator>-</operator> <literal type="number">2</literal> <operator>-</operator> <name>data_len</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>pad_len</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>PXE_BUG</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>px_alloc</name><argument_list>(<argument><expr><name>res_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x02</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_strong_random</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pad_len</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>PXE_NO_RANDOM</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* pad must not contain zero bytes */</comment>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>buf</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>pad_len</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_strong_random</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>res_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>PXE_NO_RANDOM</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name><name>buf</name><index>[<expr><name>pad_len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>pad_len</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>res_p</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><name>PXE_NO_RANDOM</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>create_secmsg</name><parameter_list>(<parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>PGP_MPI</name> <modifier>*</modifier><modifier>*</modifier></type><name>msg_p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>full_bytes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>secmsg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>,
				<decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type>	<name>cksum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>klen</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>sess_key_len</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>padded</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGP_MPI</name>    <modifier>*</modifier></type><name>m</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* calc checksum */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>klen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name>cksum</name> <operator>+=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>sess_key</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

	<comment type="block">/*
	 * create "secret message"
	 */</comment>
	<expr_stmt><expr><name>secmsg</name> <operator>=</operator> <call><name>px_alloc</name><argument_list>(<argument><expr><name>klen</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>secmsg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>cipher_algo</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>secmsg</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sess_key</name></name></expr></argument>, <argument><expr><name>klen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>secmsg</name><index>[<expr><name>klen</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>cksum</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>secmsg</name><index>[<expr><name>klen</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>cksum</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * now create a large integer of it
	 */</comment>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pad_eme_pkcs1_v15</name><argument_list>(<argument><expr><name>secmsg</name></expr></argument>, <argument><expr><name>klen</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>full_bytes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>padded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* first byte will be 0x02 */</comment>
		<decl_stmt><decl><type><name>int</name></type>			<name>full_bits</name> <init>= <expr><name>full_bytes</name> <operator>*</operator> <literal type="number">8</literal> <operator>-</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_mpi_create</name><argument_list>(<argument><expr><name>padded</name></expr></argument>, <argument><expr><name>full_bits</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>padded</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>padded</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>full_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>padded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>secmsg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>klen</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>secmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>msg_p</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>encrypt_and_write_elgamal</name><parameter_list>(<parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>PGP_PubKey</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>, <parameter><decl><type><name>PushFilter</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGP_MPI</name>    <modifier>*</modifier></type><name>m</name> <init>= <expr><name>NULL</name></expr></init></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>c1</name> <init>= <expr><name>NULL</name></expr></init></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>c2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* create padded msg */</comment>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>create_secmsg</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>elg</name><operator>.</operator><name>p</name><operator>-&gt;</operator><name>bytes</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

	<comment type="block">/* encrypt it */</comment>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_elgamal_encrypt</name><argument_list>(<argument><expr><name>pk</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

	<comment type="block">/* write out */</comment>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_mpi_write</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_mpi_write</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>err</name>:</label>
	<expr_stmt><expr><call><name>pgp_mpi_free</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pgp_mpi_free</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pgp_mpi_free</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>encrypt_and_write_rsa</name><parameter_list>(<parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>PGP_PubKey</name> <modifier>*</modifier></type><name>pk</name></decl></parameter>, <parameter><decl><type><name>PushFilter</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGP_MPI</name>    <modifier>*</modifier></type><name>m</name> <init>= <expr><name>NULL</name></expr></init></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>c</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* create padded msg */</comment>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>create_secmsg</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>rsa</name><operator>.</operator><name>n</name><operator>-&gt;</operator><name>bytes</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

	<comment type="block">/* encrypt it */</comment>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_rsa_encrypt</name><argument_list>(<argument><expr><name>pk</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

	<comment type="block">/* write out */</comment>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_mpi_write</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>err</name>:</label>
	<expr_stmt><expr><call><name>pgp_mpi_free</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pgp_mpi_free</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pgp_write_pubenc_sesskey</name><parameter_list>(<parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>PushFilter</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGP_PubKey</name> <modifier>*</modifier></type><name>pk</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>pub_key</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name>ver</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PushFilter</name> <modifier>*</modifier></type><name>pkt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name>algo</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>pk</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"no pubkey?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>PXE_BUG</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>algo</name> <operator>=</operator> <name><name>pk</name><operator>-&gt;</operator><name>algo</name></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * now write packet
	 */</comment>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_create_pkt_writer</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>PGP_PKT_PUBENCRYPTED_SESSKEY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pushf_write</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ver</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pushf_write</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>pk</name><operator>-&gt;</operator><name>key_id</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pushf_write</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>algo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><name>algo</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>PGP_PUB_ELG_ENCRYPT</name></expr>:</case>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>encrypt_and_write_elgamal</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pk</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>PGP_PUB_RSA_ENCRYPT</name></expr>:</case>
		<case>case <expr><name>PGP_PUB_RSA_ENCRYPT_SIGN</name></expr>:</case>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>encrypt_and_write_rsa</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pk</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * done, signal packet end
	 */</comment>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pushf_flush</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>err</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>pkt</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pushf_free</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>
</unit>
