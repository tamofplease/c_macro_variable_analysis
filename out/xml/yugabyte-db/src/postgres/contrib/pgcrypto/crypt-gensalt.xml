<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/contrib/pgcrypto/crypt-gensalt.c"><comment type="block">/*
 * Written by Solar Designer and placed in the public domain.
 * See crypt_blowfish.c for more information.
 *
 * contrib/pgcrypto/crypt-gensalt.c
 *
 * This file contains salt generation functions for the traditional and
 * other common crypt(3) algorithms, except for bcrypt which is defined
 * entirely in crypt_blowfish.c.
 *
 * Put bcrypt generator also here as crypt-blowfish.c
 * may not be compiled always.        -- marko
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px-crypt.h"</cpp:file></cpp:include>

<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>BF_word</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>_crypt_itoa64</name><index>[<expr><literal type="number">64</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>=
<expr><literal type="string">"./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"</literal></expr></init></decl>;</decl_stmt>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>yb_crypt_gensalt_traditional_rn</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>count</name></decl></parameter>,
							  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <name>output_size</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>count</name> <operator>&amp;&amp;</operator> <name>count</name> <operator>!=</operator> <literal type="number">25</literal><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>output_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>_crypt_itoa64</name><index>[<expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>_crypt_itoa64</name><index>[<expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	<return>return <expr><name>output</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>yb_crypt_gensalt_extended_rn</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>count</name></decl></parameter>,
						   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>value</name></decl>;</decl_stmt>

<comment type="block">/* Even iteration counts make it easier to detect weak DES keys from a look
 * at the hash, so they should be avoided */</comment>
	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>||</operator> <name>output_size</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal> <operator>||</operator>
		<operator>(</operator><name>count</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>count</name> <operator>&gt;</operator> <literal type="number">0xffffff</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><name>count</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>output_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>count</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">725</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>_crypt_itoa64</name><index>[<expr><name>count</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>_crypt_itoa64</name><index>[<expr><operator>(</operator><name>count</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>_crypt_itoa64</name><index>[<expr><operator>(</operator><name>count</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>_crypt_itoa64</name><index>[<expr><operator>(</operator><name>count</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator>
		<operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator>
		<operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>input</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>_crypt_itoa64</name><index>[<expr><name>value</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>_crypt_itoa64</name><index>[<expr><operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>_crypt_itoa64</name><index>[<expr><operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>_crypt_itoa64</name><index>[<expr><operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	<return>return <expr><name>output</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>yb_crypt_gensalt_md5_rn</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>count</name></decl></parameter>,
					  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>value</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>||</operator> <name>output_size</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>count</name> <operator>&amp;&amp;</operator> <name>count</name> <operator>!=</operator> <literal type="number">1000</literal><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>output_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'$'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'1'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'$'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator>
		<operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator>
		<operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>input</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>_crypt_itoa64</name><index>[<expr><name>value</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>_crypt_itoa64</name><index>[<expr><operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>_crypt_itoa64</name><index>[<expr><operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>_crypt_itoa64</name><index>[<expr><operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <name>output_size</name> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>input</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>|</operator>
			<operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>input</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator>
			<operator>(</operator><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator> <name><name>input</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>_crypt_itoa64</name><index>[<expr><name>value</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>_crypt_itoa64</name><index>[<expr><operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>_crypt_itoa64</name><index>[<expr><operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name><name>_crypt_itoa64</name><index>[<expr><operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>output</name></expr>;</return>
</block_content>}</block></function>



<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>BF_itoa64</name><index>[<expr><literal type="number">64</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>=
<expr><literal type="string">"./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>BF_encode</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BF_word</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>src</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>sptr</name> <operator>+</operator> <name>size</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dptr</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>dst</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>c1</name></decl>,
				<decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>

	<do>do
	<block>{<block_content>
		<expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>*</operator><name>sptr</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>dptr</name><operator>++</operator> <operator>=</operator> <name><name>BF_itoa64</name><index>[<expr><name>c1</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>(</operator><name>c1</name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>sptr</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>dptr</name><operator>++</operator> <operator>=</operator> <name><name>BF_itoa64</name><index>[<expr><name>c1</name></expr>]</index></name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>c2</name> <operator>=</operator> <operator>*</operator><name>sptr</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>c1</name> <operator>|=</operator> <name>c2</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>dptr</name><operator>++</operator> <operator>=</operator> <name><name>BF_itoa64</name><index>[<expr><name>c1</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>c1</name> <operator>=</operator> <operator>(</operator><name>c2</name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>sptr</name> <operator>&gt;=</operator> <name>end</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>dptr</name><operator>++</operator> <operator>=</operator> <name><name>BF_itoa64</name><index>[<expr><name>c1</name></expr>]</index></name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>c2</name> <operator>=</operator> <operator>*</operator><name>sptr</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>c1</name> <operator>|=</operator> <name>c2</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>dptr</name><operator>++</operator> <operator>=</operator> <name><name>BF_itoa64</name><index>[<expr><name>c1</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>dptr</name><operator>++</operator> <operator>=</operator> <name><name>BF_itoa64</name><index>[<expr><name>c2</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name>sptr</name> <operator>&lt;</operator> <name>end</name></expr>)</condition>;</do>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>yb_crypt_gensalt_blowfish_rn</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>count</name></decl></parameter>,
						   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>output_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">16</literal> <operator>||</operator> <name>output_size</name> <operator>&lt;</operator> <literal type="number">7</literal> <operator>+</operator> <literal type="number">22</literal> <operator>+</operator> <literal type="number">1</literal> <operator>||</operator>
		<operator>(</operator><name>count</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>count</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">4</literal> <operator>||</operator> <name>count</name></expr></argument> &gt;</argument_list></name> <literal type="number">31</literal><operator>)</operator><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>output_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>count</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'$'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'2'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'a'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'$'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <name>count</name> <operator>/</operator> <literal type="number">10</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <name>count</name> <operator>%</operator> <literal type="number">10</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'$'</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>BF_encode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>BF_word</name> <operator>*</operator><operator>)</operator> <name>input</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">7</literal> <operator>+</operator> <literal type="number">22</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	<return>return <expr><name>output</name></expr>;</return>
</block_content>}</block></function>
</unit>
