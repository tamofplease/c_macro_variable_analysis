<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/contrib/pgcrypto/crypt-des.c"><comment type="block">/*
 * FreeSec: libcrypt for NetBSD
 *
 * contrib/pgcrypto/crypt-des.c
 *
 * Copyright (c) 1994 David Burren
 * All rights reserved.
 *
 * Adapted for FreeBSD-2.0 by Geoffrey M. Rehmet
 *	this file should now *only* export crypt(), in order to make
 *	binaries of libcrypt exportable from the USA
 *
 * Adapted for FreeBSD-4.0 by Mark R V Murray
 *	this file should now *only* export crypt_des(), in order to make
 *	a module that can be optionally included in libcrypt.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *	  notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *	  notice, this list of conditions and the following disclaimer in the
 *	  documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the author nor the names of other contributors
 *	  may be used to endorse or promote products derived from this software
 *	  without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $FreeBSD: src/secure/lib/libcrypt/crypt-des.c,v 1.12 1999/09/20 12:39:20 markm Exp $
 *
 * This is an original implementation of the DES and the crypt(3) interfaces
 * by David Burren &lt;davidb@werj.com.au&gt;.
 *
 * An excellent reference on the underlying algorithm (and related
 * algorithms) is:
 *
 *	B. Schneier, Applied Cryptography: protocols, algorithms,
 *	and source code in C, John Wiley &amp; Sons, 1994.
 *
 * Note that in that book's description of DES the lookups for the initial,
 * pbox, and final permutations are inverted (this has been brought to the
 * attention of the author).  A list of errata for this book has been
 * posted to the sci.crypt newsgroup by the author and is available for FTP.
 *
 * ARCHITECTURE ASSUMPTIONS:
 *	It is assumed that the 8-byte arrays passed by reference can be
 *	addressed as arrays of uint32's (ie. the CPU is not picky about
 *	alignment).
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"port/pg_bswap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px-crypt.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PASSWORD_EFMT1</name></cpp:macro> <cpp:value>'_'</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>_crypt_a64</name><index>[]</index></name> <init>=
<expr><literal type="string">"./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint8</name></type> <name><name>IP</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><literal type="number">58</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr>,
	<expr><literal type="number">62</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">8</literal></expr>,
	<expr><literal type="number">57</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">3</literal></expr>,
	<expr><literal type="number">61</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">7</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint8</name></type> <name><name>inv_key_perm</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint8</name></type> <name><name>u_key_perm</name><index>[<expr><literal type="number">56</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint8</name></type> <name><name>key_perm</name><index>[<expr><literal type="number">56</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><literal type="number">57</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">18</literal></expr>,
	<expr><literal type="number">10</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">36</literal></expr>,
	<expr><literal type="number">63</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">22</literal></expr>,
	<expr><literal type="number">14</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint8</name></type> <name><name>key_shifts</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint8</name></type> <name><name>inv_comp_perm</name><index>[<expr><literal type="number">56</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint8</name></type> <name><name>comp_perm</name><index>[<expr><literal type="number">48</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><literal type="number">14</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">10</literal></expr>,
	<expr><literal type="number">23</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">2</literal></expr>,
	<expr><literal type="number">41</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">48</literal></expr>,
	<expr><literal type="number">44</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">32</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 *	No E box is used, as it's replaced by some ANDs, shifts, and ORs.
 */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint8</name></type> <name><name>u_sbox</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint8</name></type> <name><name>sbox</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><block>{
		<expr><literal type="number">14</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>,
		<expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>,
		<expr><literal type="number">15</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">13</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="number">15</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">10</literal></expr>,
		<expr><literal type="number">3</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">5</literal></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">15</literal></expr>,
		<expr><literal type="number">13</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">9</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>,
		<expr><literal type="number">13</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">1</literal></expr>,
		<expr><literal type="number">13</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">7</literal></expr>,
		<expr><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">12</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="number">7</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">15</literal></expr>,
		<expr><literal type="number">13</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">9</literal></expr>,
		<expr><literal type="number">10</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>,
		<expr><literal type="number">3</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">14</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="number">2</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">9</literal></expr>,
		<expr><literal type="number">14</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>,
		<expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">14</literal></expr>,
		<expr><literal type="number">11</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="number">12</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">11</literal></expr>,
		<expr><literal type="number">10</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>,
		<expr><literal type="number">9</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">6</literal></expr>,
		<expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">13</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="number">4</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>,
		<expr><literal type="number">13</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>,
		<expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">2</literal></expr>,
		<expr><literal type="number">6</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">12</literal></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="number">13</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">7</literal></expr>,
		<expr><literal type="number">1</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">2</literal></expr>,
		<expr><literal type="number">7</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>,
		<expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">11</literal></expr>
	}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint8</name></type> <name><name>un_pbox</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint8</name></type> <name><name>pbox</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{
	<expr><literal type="number">16</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">10</literal></expr>,
	<expr><literal type="number">2</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">25</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint32</name></type> <name><name>_crypt_bits32</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>=
<expr><block>{
	<expr><literal type="number">0x80000000</literal></expr>, <expr><literal type="number">0x40000000</literal></expr>, <expr><literal type="number">0x20000000</literal></expr>, <expr><literal type="number">0x10000000</literal></expr>,
	<expr><literal type="number">0x08000000</literal></expr>, <expr><literal type="number">0x04000000</literal></expr>, <expr><literal type="number">0x02000000</literal></expr>, <expr><literal type="number">0x01000000</literal></expr>,
	<expr><literal type="number">0x00800000</literal></expr>, <expr><literal type="number">0x00400000</literal></expr>, <expr><literal type="number">0x00200000</literal></expr>, <expr><literal type="number">0x00100000</literal></expr>,
	<expr><literal type="number">0x00080000</literal></expr>, <expr><literal type="number">0x00040000</literal></expr>, <expr><literal type="number">0x00020000</literal></expr>, <expr><literal type="number">0x00010000</literal></expr>,
	<expr><literal type="number">0x00008000</literal></expr>, <expr><literal type="number">0x00004000</literal></expr>, <expr><literal type="number">0x00002000</literal></expr>, <expr><literal type="number">0x00001000</literal></expr>,
	<expr><literal type="number">0x00000800</literal></expr>, <expr><literal type="number">0x00000400</literal></expr>, <expr><literal type="number">0x00000200</literal></expr>, <expr><literal type="number">0x00000100</literal></expr>,
	<expr><literal type="number">0x00000080</literal></expr>, <expr><literal type="number">0x00000040</literal></expr>, <expr><literal type="number">0x00000020</literal></expr>, <expr><literal type="number">0x00000010</literal></expr>,
	<expr><literal type="number">0x00000008</literal></expr>, <expr><literal type="number">0x00000004</literal></expr>, <expr><literal type="number">0x00000002</literal></expr>, <expr><literal type="number">0x00000001</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint8</name></type> <name><name>_crypt_bits8</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint32</name></type> <name>saltbits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>old_salt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint32</name> <modifier>*</modifier></type><name>bits28</name></decl>,
		   <decl><type ref="prev"><modifier>*</modifier></type><name>bits24</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint8</name></type> <name><name>init_perm</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>,
			<decl><type ref="prev"/><name><name>final_perm</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint32</name></type> <name><name>en_keysl</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>,
			<decl><type ref="prev"/><name><name>en_keysr</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint32</name></type> <name><name>de_keysl</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>,
			<decl><type ref="prev"/><name><name>de_keysr</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>des_initialised</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint8</name></type> <name><name>m_sbox</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint32</name></type> <name><name>psbox</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint32</name></type> <name><name>ip_maskl</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>,
			<decl><type ref="prev"/><name><name>ip_maskr</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint32</name></type> <name><name>fp_maskl</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>,
			<decl><type ref="prev"/><name><name>fp_maskr</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint32</name></type> <name><name>key_perm_maskl</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>,
			<decl><type ref="prev"/><name><name>key_perm_maskr</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint32</name></type> <name><name>comp_maskl</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>,
			<decl><type ref="prev"/><name><name>comp_maskr</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint32</name></type> <name>old_rawkey0</name></decl>,
			<decl><type ref="prev"/><name>old_rawkey1</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type>
<name>ascii_to_bin</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;</operator> <literal type="char">'z'</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <literal type="char">'a'</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>ch</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">38</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;</operator> <literal type="char">'Z'</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <literal type="char">'A'</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>ch</name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">12</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>ch</name> <operator>-</operator> <literal type="char">'.'</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>des_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>j</name></decl>,
				<decl><type ref="prev"/><name>b</name></decl>,
				<decl><type ref="prev"/><name>k</name></decl>,
				<decl><type ref="prev"/><name>inbit</name></decl>,
				<decl><type ref="prev"/><name>obit</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name>	   <modifier>*</modifier></type><name>p</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>il</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>ir</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>fl</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>fr</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>old_rawkey0</name> <operator>=</operator> <name>old_rawkey1</name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>saltbits</name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>old_salt</name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>bits24</name> <operator>=</operator> <operator>(</operator><name>bits28</name> <operator>=</operator> <name>_crypt_bits32</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * Invert the S-boxes, reordering the input bits.
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name>j</name> <operator>&amp;</operator> <literal type="number">0x20</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>j</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>u_sbox</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>sbox</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>
		</block_content>}</block></for></block_content></block></for>

	<comment type="block">/*
	 * Convert the inverted S-boxes into 4 arrays of 8 bits. Each will handle
	 * 12 bits of the S-box input.
	 */</comment>
	<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>m_sbox</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <name>j</name></expr>]</index></name> <operator>=</operator>
					<operator>(</operator><name><name>u_sbox</name><index>[<expr><operator>(</operator><name>b</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator>
					<name><name>u_sbox</name><index>[<expr><operator>(</operator><name>b</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for></block_content></block></for>

	<comment type="block">/*
	 * Set up the initial &amp; final permutations into a useful form, and
	 * initialise the inverted key permutation.
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>init_perm</name><index>[<expr><name><name>final_perm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>IP</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>inv_key_perm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * Invert the key permutation and initialise the inverted key compression
	 * permutation.
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">56</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>u_key_perm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>key_perm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>inv_key_perm</name><index>[<expr><name><name>key_perm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>inv_comp_perm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * Invert the key compression permutation.
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">48</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>inv_comp_perm</name><index>[<expr><name><name>comp_perm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>

	<comment type="block">/*
	 * Set up the OR-mask arrays for the initial and final permutations, and
	 * for the key initial and compression permutations.
	 */</comment>
	<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><name>il</name> <operator>=</operator> <operator>&amp;</operator><name><name>ip_maskl</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><name>ir</name> <operator>=</operator> <operator>&amp;</operator><name><name>ip_maskr</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><name>fl</name> <operator>=</operator> <operator>&amp;</operator><name><name>fp_maskl</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><name>fr</name> <operator>=</operator> <operator>&amp;</operator><name><name>fp_maskr</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<expr_stmt><expr><name>inbit</name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <name>k</name> <operator>+</operator> <name>j</name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;</operator> <name><name>_crypt_bits8</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><operator>(</operator><name>obit</name> <operator>=</operator> <name><name>init_perm</name><index>[<expr><name>inbit</name></expr>]</index></name><operator>)</operator> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><operator>*</operator><name>il</name> <operator>|=</operator> <name><name>_crypt_bits32</name><index>[<expr><name>obit</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><operator>*</operator><name>ir</name> <operator>|=</operator> <name><name>_crypt_bits32</name><index>[<expr><name>obit</name> <operator>-</operator> <literal type="number">32</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
					<if_stmt><if>if <condition>(<expr><operator>(</operator><name>obit</name> <operator>=</operator> <name><name>final_perm</name><index>[<expr><name>inbit</name></expr>]</index></name><operator>)</operator> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><operator>*</operator><name>fl</name> <operator>|=</operator> <name><name>_crypt_bits32</name><index>[<expr><name>obit</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><operator>*</operator><name>fr</name> <operator>|=</operator> <name><name>_crypt_bits32</name><index>[<expr><name>obit</name> <operator>-</operator> <literal type="number">32</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
		</block_content>}</block></for>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><name>il</name> <operator>=</operator> <operator>&amp;</operator><name><name>key_perm_maskl</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><name>ir</name> <operator>=</operator> <operator>&amp;</operator><name><name>key_perm_maskr</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<expr_stmt><expr><name>inbit</name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <name>k</name> <operator>+</operator> <name>j</name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;</operator> <name><name>_crypt_bits8</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><operator>(</operator><name>obit</name> <operator>=</operator> <name><name>inv_key_perm</name><index>[<expr><name>inbit</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
						<continue>continue;</continue></block_content></block></if></if_stmt>
					<if_stmt><if>if <condition>(<expr><name>obit</name> <operator>&lt;</operator> <literal type="number">28</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><operator>*</operator><name>il</name> <operator>|=</operator> <name><name>bits28</name><index>[<expr><name>obit</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><operator>*</operator><name>ir</name> <operator>|=</operator> <name><name>bits28</name><index>[<expr><name>obit</name> <operator>-</operator> <literal type="number">28</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><name>il</name> <operator>=</operator> <operator>&amp;</operator><name><name>comp_maskl</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><name>ir</name> <operator>=</operator> <operator>&amp;</operator><name><name>comp_maskr</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<expr_stmt><expr><name>inbit</name> <operator>=</operator> <literal type="number">7</literal> <operator>*</operator> <name>k</name> <operator>+</operator> <name>j</name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;</operator> <name><name>_crypt_bits8</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><operator>(</operator><name>obit</name> <operator>=</operator> <name><name>inv_comp_perm</name><index>[<expr><name>inbit</name></expr>]</index></name><operator>)</operator> <operator>==</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
						<continue>continue;</continue></block_content></block></if></if_stmt>
					<if_stmt><if>if <condition>(<expr><name>obit</name> <operator>&lt;</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><operator>*</operator><name>il</name> <operator>|=</operator> <name><name>bits24</name><index>[<expr><name>obit</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
					<else>else<block type="pseudo"><block_content>
						<expr_stmt><expr><operator>*</operator><name>ir</name> <operator>|=</operator> <name><name>bits24</name><index>[<expr><name>obit</name> <operator>-</operator> <literal type="number">24</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
		</block_content>}</block></for>
	</block_content>}</block></for>

	<comment type="block">/*
	 * Invert the P-box permutation, and convert into OR-masks for handling
	 * the output of the S-box arrays setup above.
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>un_pbox</name><index>[<expr><name><name>pbox</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>

	<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>psbox</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;</operator> <name><name>_crypt_bits8</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>p</name> <operator>|=</operator> <name><name>_crypt_bits32</name><index>[<expr><name><name>un_pbox</name><index>[<expr><literal type="number">8</literal> <operator>*</operator> <name>b</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></for>
		</block_content>}</block></for></block_content></block></for>

	<expr_stmt><expr><name>des_initialised</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>setup_salt</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>salt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>obit</name></decl>,
				<decl><type ref="prev"/><name>saltbit</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>salt</name> <operator>==</operator> <name>old_salt</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>old_salt</name> <operator>=</operator> <name>salt</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>saltbits</name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>saltbit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>obit</name> <operator>=</operator> <literal type="number">0x800000</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">24</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>salt</name> <operator>&amp;</operator> <name>saltbit</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>saltbits</name> <operator>|=</operator> <name>obit</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>saltbit</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>obit</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>des_setkey</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>k0</name></decl>,
				<decl><type ref="prev"/><name>k1</name></decl>,
				<decl><type ref="prev"/><name>rawkey0</name></decl>,
				<decl><type ref="prev"/><name>rawkey1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>shifts</name></decl>,
				<decl><type ref="prev"/><name>round</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>des_initialised</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>des_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>rawkey0</name> <operator>=</operator> <call><name>pg_ntoh32</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint32</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rawkey1</name> <operator>=</operator> <call><name>pg_ntoh32</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>uint32</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>key</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rawkey0</name> <operator>|</operator> <name>rawkey1</name><operator>)</operator>
		<operator>&amp;&amp;</operator> <name>rawkey0</name> <operator>==</operator> <name>old_rawkey0</name>
		<operator>&amp;&amp;</operator> <name>rawkey1</name> <operator>==</operator> <name>old_rawkey1</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Already setup for this key. This optimization fails on a zero key
		 * (which is weak and has bad parity anyway) in order to simplify the
		 * starting conditions.
		 */</comment>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>old_rawkey0</name> <operator>=</operator> <name>rawkey0</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>old_rawkey1</name> <operator>=</operator> <name>rawkey1</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Do key permutation and split into two 28-bit subkeys.
	 */</comment>
	<expr_stmt><expr><name>k0</name> <operator>=</operator> <name><name>key_perm_maskl</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>rawkey0</name> <operator>&gt;&gt;</operator> <literal type="number">25</literal></expr>]</index></name>
		<operator>|</operator> <name><name>key_perm_maskl</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><operator>(</operator><name>rawkey0</name> <operator>&gt;&gt;</operator> <literal type="number">17</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>]</index></name>
		<operator>|</operator> <name><name>key_perm_maskl</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><operator>(</operator><name>rawkey0</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>]</index></name>
		<operator>|</operator> <name><name>key_perm_maskl</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><operator>(</operator><name>rawkey0</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>]</index></name>
		<operator>|</operator> <name><name>key_perm_maskl</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>rawkey1</name> <operator>&gt;&gt;</operator> <literal type="number">25</literal></expr>]</index></name>
		<operator>|</operator> <name><name>key_perm_maskl</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><operator>(</operator><name>rawkey1</name> <operator>&gt;&gt;</operator> <literal type="number">17</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>]</index></name>
		<operator>|</operator> <name><name>key_perm_maskl</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><operator>(</operator><name>rawkey1</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>]</index></name>
		<operator>|</operator> <name><name>key_perm_maskl</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><operator>(</operator><name>rawkey1</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>k1</name> <operator>=</operator> <name><name>key_perm_maskr</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>rawkey0</name> <operator>&gt;&gt;</operator> <literal type="number">25</literal></expr>]</index></name>
		<operator>|</operator> <name><name>key_perm_maskr</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><operator>(</operator><name>rawkey0</name> <operator>&gt;&gt;</operator> <literal type="number">17</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>]</index></name>
		<operator>|</operator> <name><name>key_perm_maskr</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><operator>(</operator><name>rawkey0</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>]</index></name>
		<operator>|</operator> <name><name>key_perm_maskr</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><operator>(</operator><name>rawkey0</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>]</index></name>
		<operator>|</operator> <name><name>key_perm_maskr</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>rawkey1</name> <operator>&gt;&gt;</operator> <literal type="number">25</literal></expr>]</index></name>
		<operator>|</operator> <name><name>key_perm_maskr</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><operator>(</operator><name>rawkey1</name> <operator>&gt;&gt;</operator> <literal type="number">17</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>]</index></name>
		<operator>|</operator> <name><name>key_perm_maskr</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><operator>(</operator><name>rawkey1</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>]</index></name>
		<operator>|</operator> <name><name>key_perm_maskr</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><operator>(</operator><name>rawkey1</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>]</index></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Rotate subkeys and do compression permutation.
	 */</comment>
	<expr_stmt><expr><name>shifts</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>round</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>round</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>round</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>uint32</name></type>		<name>t0</name></decl>,
					<decl><type ref="prev"/><name>t1</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>shifts</name> <operator>+=</operator> <name><name>key_shifts</name><index>[<expr><name>round</name></expr>]</index></name></expr>;</expr_stmt>

		<expr_stmt><expr><name>t0</name> <operator>=</operator> <operator>(</operator><name>k0</name> <operator>&lt;&lt;</operator> <name>shifts</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>k0</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">28</literal> <operator>-</operator> <name>shifts</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>t1</name> <operator>=</operator> <operator>(</operator><name>k1</name> <operator>&lt;&lt;</operator> <name>shifts</name><operator>)</operator> <operator>|</operator> <operator>(</operator><name>k1</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">28</literal> <operator>-</operator> <name>shifts</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>de_keysl</name><index>[<expr><literal type="number">15</literal> <operator>-</operator> <name>round</name></expr>]</index></name> <operator>=</operator>
			<name><name>en_keysl</name><index>[<expr><name>round</name></expr>]</index></name> <operator>=</operator> <name><name>comp_maskl</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><operator>(</operator><name>t0</name> <operator>&gt;&gt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>]</index></name>
			<operator>|</operator> <name><name>comp_maskl</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><operator>(</operator><name>t0</name> <operator>&gt;&gt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>]</index></name>
			<operator>|</operator> <name><name>comp_maskl</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><operator>(</operator><name>t0</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>]</index></name>
			<operator>|</operator> <name><name>comp_maskl</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>t0</name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>]</index></name>
			<operator>|</operator> <name><name>comp_maskl</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><operator>(</operator><name>t1</name> <operator>&gt;&gt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>]</index></name>
			<operator>|</operator> <name><name>comp_maskl</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><operator>(</operator><name>t1</name> <operator>&gt;&gt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>]</index></name>
			<operator>|</operator> <name><name>comp_maskl</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><operator>(</operator><name>t1</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>]</index></name>
			<operator>|</operator> <name><name>comp_maskl</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><name>t1</name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>]</index></name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>de_keysr</name><index>[<expr><literal type="number">15</literal> <operator>-</operator> <name>round</name></expr>]</index></name> <operator>=</operator>
			<name><name>en_keysr</name><index>[<expr><name>round</name></expr>]</index></name> <operator>=</operator> <name><name>comp_maskr</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><operator>(</operator><name>t0</name> <operator>&gt;&gt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>]</index></name>
			<operator>|</operator> <name><name>comp_maskr</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><operator>(</operator><name>t0</name> <operator>&gt;&gt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>]</index></name>
			<operator>|</operator> <name><name>comp_maskr</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><operator>(</operator><name>t0</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>]</index></name>
			<operator>|</operator> <name><name>comp_maskr</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>t0</name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>]</index></name>
			<operator>|</operator> <name><name>comp_maskr</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><operator>(</operator><name>t1</name> <operator>&gt;&gt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>]</index></name>
			<operator>|</operator> <name><name>comp_maskr</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><operator>(</operator><name>t1</name> <operator>&gt;&gt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>]</index></name>
			<operator>|</operator> <name><name>comp_maskr</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><operator>(</operator><name>t1</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>]</index></name>
			<operator>|</operator> <name><name>comp_maskr</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><name>t1</name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>do_des</name><parameter_list>(<parameter><decl><type><name>uint32</name></type> <name>l_in</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>r_in</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>l_out</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>r_out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * l_in, r_in, l_out, and r_out are in pseudo-"big-endian" format.
	 */</comment>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>l</name></decl>,
				<decl><type ref="prev"/><name>r</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>kl</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>kr</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>kl1</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>kr1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>f</name></decl>,
				<decl><type ref="prev"/><name>r48l</name></decl>,
				<decl><type ref="prev"/><name>r48r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>round</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Encrypting
		 */</comment>
		<expr_stmt><expr><name>kl1</name> <operator>=</operator> <name>en_keysl</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>kr1</name> <operator>=</operator> <name>en_keysr</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * Decrypting
		 */</comment>
		<expr_stmt><expr><name>count</name> <operator>=</operator> <operator>-</operator><name>count</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>kl1</name> <operator>=</operator> <name>de_keysl</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>kr1</name> <operator>=</operator> <name>de_keysr</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * Do initial permutation (IP).
	 */</comment>
	<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>ip_maskl</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>l_in</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>]</index></name>
		<operator>|</operator> <name><name>ip_maskl</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><operator>(</operator><name>l_in</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name>
		<operator>|</operator> <name><name>ip_maskl</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><operator>(</operator><name>l_in</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name>
		<operator>|</operator> <name><name>ip_maskl</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>l_in</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name>
		<operator>|</operator> <name><name>ip_maskl</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>r_in</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>]</index></name>
		<operator>|</operator> <name><name>ip_maskl</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><operator>(</operator><name>r_in</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name>
		<operator>|</operator> <name><name>ip_maskl</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><operator>(</operator><name>r_in</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name>
		<operator>|</operator> <name><name>ip_maskl</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><name>r_in</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>ip_maskr</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>l_in</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>]</index></name>
		<operator>|</operator> <name><name>ip_maskr</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><operator>(</operator><name>l_in</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name>
		<operator>|</operator> <name><name>ip_maskr</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><operator>(</operator><name>l_in</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name>
		<operator>|</operator> <name><name>ip_maskr</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>l_in</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name>
		<operator>|</operator> <name><name>ip_maskr</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>r_in</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>]</index></name>
		<operator>|</operator> <name><name>ip_maskr</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><operator>(</operator><name>r_in</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name>
		<operator>|</operator> <name><name>ip_maskr</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><operator>(</operator><name>r_in</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name>
		<operator>|</operator> <name><name>ip_maskr</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><name>r_in</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>count</name><operator>--</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Do each round.
		 */</comment>
		<expr_stmt><expr><name>kl</name> <operator>=</operator> <name>kl1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>kr</name> <operator>=</operator> <name>kr1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>round</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
		<while>while <condition>(<expr><name>round</name><operator>--</operator></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * Expand R to 48 bits (simulate the E-box).
			 */</comment>
			<expr_stmt><expr><name>r48l</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator>
				<operator>|</operator> <operator>(</operator><operator>(</operator><name>r</name> <operator>&amp;</operator> <literal type="number">0xf8000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator>
				<operator>|</operator> <operator>(</operator><operator>(</operator><name>r</name> <operator>&amp;</operator> <literal type="number">0x1f800000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator>
				<operator>|</operator> <operator>(</operator><operator>(</operator><name>r</name> <operator>&amp;</operator> <literal type="number">0x01f80000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">13</literal><operator>)</operator>
				<operator>|</operator> <operator>(</operator><operator>(</operator><name>r</name> <operator>&amp;</operator> <literal type="number">0x001f8000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>

			<expr_stmt><expr><name>r48r</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>r</name> <operator>&amp;</operator> <literal type="number">0x0001f800</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator>
				<operator>|</operator> <operator>(</operator><operator>(</operator><name>r</name> <operator>&amp;</operator> <literal type="number">0x00001f80</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator>
				<operator>|</operator> <operator>(</operator><operator>(</operator><name>r</name> <operator>&amp;</operator> <literal type="number">0x000001f8</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator>
				<operator>|</operator> <operator>(</operator><operator>(</operator><name>r</name> <operator>&amp;</operator> <literal type="number">0x0000001f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator>
				<operator>|</operator> <operator>(</operator><operator>(</operator><name>r</name> <operator>&amp;</operator> <literal type="number">0x80000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>

			<comment type="block">/*
			 * Do salting for crypt() and friends, and XOR with the permuted
			 * key.
			 */</comment>
			<expr_stmt><expr><name>f</name> <operator>=</operator> <operator>(</operator><name>r48l</name> <operator>^</operator> <name>r48r</name><operator>)</operator> <operator>&amp;</operator> <name>saltbits</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>r48l</name> <operator>^=</operator> <name>f</name> <operator>^</operator> <operator>*</operator><name>kl</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>r48r</name> <operator>^=</operator> <name>f</name> <operator>^</operator> <operator>*</operator><name>kr</name><operator>++</operator></expr>;</expr_stmt>

			<comment type="block">/*
			 * Do sbox lookups (which shrink it back to 32 bits) and do the
			 * pbox permutation at the same time.
			 */</comment>
			<expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>psbox</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>m_sbox</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>r48l</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>]</index></name></expr>]</index></name>
				<operator>|</operator> <name><name>psbox</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>m_sbox</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>r48l</name> <operator>&amp;</operator> <literal type="number">0xfff</literal></expr>]</index></name></expr>]</index></name>
				<operator>|</operator> <name><name>psbox</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name><name>m_sbox</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>r48r</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>]</index></name></expr>]</index></name>
				<operator>|</operator> <name><name>psbox</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name><name>m_sbox</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>r48r</name> <operator>&amp;</operator> <literal type="number">0xfff</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

			<comment type="block">/*
			 * Now that we've permuted things, complete f().
			 */</comment>
			<expr_stmt><expr><name>f</name> <operator>^=</operator> <name>l</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>l</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>r</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>l</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/*
	 * Do final permutation (inverse of IP).
	 */</comment>
	<expr_stmt><expr><operator>*</operator><name>l_out</name> <operator>=</operator> <name><name>fp_maskl</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>l</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>]</index></name>
		<operator>|</operator> <name><name>fp_maskl</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><operator>(</operator><name>l</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name>
		<operator>|</operator> <name><name>fp_maskl</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><operator>(</operator><name>l</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name>
		<operator>|</operator> <name><name>fp_maskl</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>l</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name>
		<operator>|</operator> <name><name>fp_maskl</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>r</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>]</index></name>
		<operator>|</operator> <name><name>fp_maskl</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><operator>(</operator><name>r</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name>
		<operator>|</operator> <name><name>fp_maskl</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><operator>(</operator><name>r</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name>
		<operator>|</operator> <name><name>fp_maskl</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><name>r</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>r_out</name> <operator>=</operator> <name><name>fp_maskr</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>l</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>]</index></name>
		<operator>|</operator> <name><name>fp_maskr</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><operator>(</operator><name>l</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name>
		<operator>|</operator> <name><name>fp_maskr</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><operator>(</operator><name>l</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name>
		<operator>|</operator> <name><name>fp_maskr</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>l</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name>
		<operator>|</operator> <name><name>fp_maskr</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>r</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>]</index></name>
		<operator>|</operator> <name><name>fp_maskr</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><operator>(</operator><name>r</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name>
		<operator>|</operator> <name><name>fp_maskr</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><operator>(</operator><name>r</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name>
		<operator>|</operator> <name><name>fp_maskr</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><name>r</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>des_cipher</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>salt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name><name>buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>l_out</name></decl>,
				<decl><type ref="prev"/><name>r_out</name></decl>,
				<decl><type ref="prev"/><name>rawl</name></decl>,
				<decl><type ref="prev"/><name>rawr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>retval</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>des_initialised</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>des_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>setup_salt</name><argument_list>(<argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* copy data to avoid assuming input is word-aligned */</comment>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rawl</name> <operator>=</operator> <call><name>pg_ntoh32</name><argument_list>(<argument><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>rawr</name> <operator>=</operator> <call><name>pg_ntoh32</name><argument_list>(<argument><expr><name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>retval</name> <operator>=</operator> <call><name>do_des</name><argument_list>(<argument><expr><name>rawl</name></expr></argument>, <argument><expr><name>rawr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r_out</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>retval</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>retval</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>pg_hton32</name><argument_list>(<argument><expr><name>l_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>pg_hton32</name><argument_list>(<argument><expr><name>r_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* copy data to avoid assuming output is word-aligned */</comment>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>px_crypt_des</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>setting</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>count</name></decl>,
				<decl><type ref="prev"/><name>salt</name></decl>,
				<decl><type ref="prev"/><name>l</name></decl>,
				<decl><type ref="prev"/><name>r0</name></decl>,
				<decl><type ref="prev"/><name>r1</name></decl>,
				<decl><type ref="prev"/><name><name>keybuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>output</name><index>[<expr><literal type="number">21</literal></expr>]</index></name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>des_initialised</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>des_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


	<comment type="block">/*
	 * Copy the key, shifting each character up by one bit and padding with
	 * zeros.
	 */</comment>
	<expr_stmt><expr><name>q</name> <operator>=</operator> <operator>(</operator><name>uint8</name> <operator>*</operator><operator>)</operator> <name>keybuf</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>q</name> <operator>-</operator> <operator>(</operator><name>uint8</name> <operator>*</operator><operator>)</operator> <name>keybuf</name> <operator>-</operator> <literal type="number">8</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>key</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>key</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>key</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><call><name>des_setkey</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>keybuf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DISABLE_XDES</name></cpp:ifndef>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>setting</name> <operator>==</operator> <name>_PASSWORD_EFMT1</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * "new"-style: setting must be a 9-character (underscore, then 4
		 * bytes of count, then 4 bytes of salt) string. See CRYPT(3) under
		 * the "Extended crypt" heading for further details.
		 *
		 * Unlimited characters of the input key are used. This is known as
		 * the "Extended crypt" DES method.
		 *
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>setting</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid salt"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>count</name> <operator>=</operator> <literal type="number">0L</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><name>count</name> <operator>|=</operator> <call><name>ascii_to_bin</name><argument_list>(<argument><expr><name><name>setting</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></for>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">5</literal></expr><operator>,</operator> <expr><name>salt</name> <operator>=</operator> <literal type="number">0L</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><name>salt</name> <operator>|=</operator> <call><name>ascii_to_bin</name><argument_list>(<argument><expr><name><name>setting</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">5</literal><operator>)</operator> <operator>*</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></for>

		<while>while <condition>(<expr><operator>*</operator><name>key</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * Encrypt the key with itself.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>des_cipher</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>keybuf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>keybuf</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

			<comment type="block">/*
			 * And XOR with the next 8 characters of the key.
			 */</comment>
			<expr_stmt><expr><name>q</name> <operator>=</operator> <operator>(</operator><name>uint8</name> <operator>*</operator><operator>)</operator> <name>keybuf</name></expr>;</expr_stmt>
			<while>while <condition>(<expr><name>q</name> <operator>-</operator> <operator>(</operator><name>uint8</name> <operator>*</operator><operator>)</operator> <name>keybuf</name> <operator>-</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>key</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>^=</operator> <operator>*</operator><name>key</name><operator>++</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></while>

			<if_stmt><if>if <condition>(<expr><call><name>des_setkey</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>keybuf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><call><name>StrNCpy</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>setting</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Double check that we weren't given a short setting. If we were, the
		 * above code will probably have created weird values for count and
		 * salt, but we don't really care. Just make sure the output string
		 * doesn't have an extra NUL in it.
		 */</comment>
		<expr_stmt><expr><name>p</name> <operator>=</operator> <name>output</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* !DISABLE_XDES */</comment>
	<block>{<block_content>
		<comment type="block">/*
		 * "old"-style: setting - 2 bytes of salt key - only up to the first 8
		 * characters of the input key are used.
		 */</comment>
		<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>setting</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid salt"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>salt</name> <operator>=</operator> <operator>(</operator><call><name>ascii_to_bin</name><argument_list>(<argument><expr><name><name>setting</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator>
			<operator>|</operator> <call><name>ascii_to_bin</name><argument_list>(<argument><expr><name><name>setting</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>setting</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

		<comment type="block">/*
		 * If the encrypted password that the salt was extracted from is only
		 * 1 character long, the salt will be corrupted.  We need to ensure
		 * that the output string doesn't have an extra NUL in it!
		 */</comment>
		<expr_stmt><expr><name><name>output</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>setting</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> ?</condition><then> <expr><name><name>setting</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>output</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

		<expr_stmt><expr><name>p</name> <operator>=</operator> <name>output</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>setup_salt</name><argument_list>(<argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Do it.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>do_des</name><argument_list>(<argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>r0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r1</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Now encode the result...
	 */</comment>
	<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><name>r0</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>_crypt_a64</name><index>[<expr><operator>(</operator><name>l</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>_crypt_a64</name><index>[<expr><operator>(</operator><name>l</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>_crypt_a64</name><index>[<expr><operator>(</operator><name>l</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>_crypt_a64</name><index>[<expr><name>l</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><name>r0</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>r1</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>_crypt_a64</name><index>[<expr><operator>(</operator><name>l</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>_crypt_a64</name><index>[<expr><operator>(</operator><name>l</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>_crypt_a64</name><index>[<expr><operator>(</operator><name>l</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>_crypt_a64</name><index>[<expr><name>l</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>l</name> <operator>=</operator> <name>r1</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>_crypt_a64</name><index>[<expr><operator>(</operator><name>l</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>_crypt_a64</name><index>[<expr><operator>(</operator><name>l</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name><name>_crypt_a64</name><index>[<expr><name>l</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<return>return <expr><name>output</name></expr>;</return>
</block_content>}</block></function>
</unit>
