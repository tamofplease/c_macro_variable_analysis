<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/contrib/pgcrypto/pgp-decrypt.c"><comment type="block">/*
 * pgp-decrypt.c
 *	  OpenPGP decrypt.
 *
 * Copyright (c) 2005 Marko Kreen
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *	  notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *	  notice, this list of conditions and the following disclaimer in the
 *	  documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * contrib/pgcrypto/pgp-decrypt.c
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mbuf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgp.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_CTX_SIZE</name></cpp:macro>		<cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOW_CTX_SIZE</name></cpp:macro>	<cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_COMPR</name></cpp:macro>		<cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOW_COMPR</name></cpp:macro>		<cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_MDC</name></cpp:macro>			<cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEED_MDC</name></cpp:macro>		<cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PKT_NORMAL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PKT_STREAM</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PKT_CONTEXT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CHUNK</name></cpp:macro> <cpp:value>(16*1024*1024)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_new_len</name><parameter_list>(<parameter><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>len_p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint8</name></type>		<name>b</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>pkttype</name> <init>= <expr><name>PKT_NORMAL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>GETBYTE</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&lt;=</operator> <literal type="number">191</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>b</name> <operator>&gt;=</operator> <literal type="number">192</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>&lt;=</operator> <literal type="number">223</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator> <operator>(</operator><name>b</name><operator>)</operator> <operator>-</operator> <literal type="number">192</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>GETBYTE</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">192</literal> <operator>+</operator> <name>b</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">255</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>GETBYTE</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>GETBYTE</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>b</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>GETBYTE</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>b</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>GETBYTE</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>b</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>pkttype</name> <operator>=</operator> <name>PKT_STREAM</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>len</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>len</name></expr></argument> &gt;</argument_list></name> <name>MAX_CHUNK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"parse_new_len: weird length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>PXE_PGP_CORRUPT_DATA</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>len_p</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
	<return>return <expr><name>pkttype</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_old_len</name><parameter_list>(<parameter><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>len_p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lentype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint8</name></type>		<name>b</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>GETBYTE</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>lentype</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>GETBYTE</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>b</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>lentype</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>GETBYTE</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>b</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>GETBYTE</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>b</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>GETBYTE</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>len</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name>b</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>len</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>len</name></expr></argument> &gt;</argument_list></name> <name>MAX_CHUNK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"parse_old_len: weird length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>PXE_PGP_CORRUPT_DATA</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><operator>*</operator><name>len_p</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
	<return>return <expr><name>PKT_NORMAL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* returns pkttype or 0 on eof */</comment>
<function><type><name>int</name></type>
<name>pgp_parse_pkt_hdr</name><parameter_list>(<parameter><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>len_p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>allow_ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>lentype</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

	<comment type="block">/* EOF is normal here, thus we don't use GETBYTE */</comment>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pullf_read</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>p</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"pgp_parse_pkt_hdr: not pkt hdr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>PXE_PGP_CORRUPT_DATA</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>&amp;</operator> <literal type="number">0x40</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>tag</name> <operator>=</operator> <operator>*</operator><name>p</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>parse_new_len</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>len_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>lentype</name> <operator>=</operator> <operator>*</operator><name>p</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>tag</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>lentype</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <ternary><condition><expr><name>allow_ctx</name></expr> ?</condition><then> <expr><name>PKT_CONTEXT</name></expr> </then><else>: <expr><name>PXE_PGP_CORRUPT_DATA</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>parse_old_len</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>len_p</name></expr></argument>, <argument><expr><name>lentype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Packet reader
 */</comment>
<struct>struct <name>PktData</name>
<block>{
	<decl_stmt><decl><type><name>int</name></type>			<name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>pktreader_pull</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
			   <parameter><decl><type><name>uint8</name> <modifier>*</modifier><modifier>*</modifier></type><name>data_p</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>PktData</name></name> <modifier>*</modifier></type><name>pkt</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* PKT_CONTEXT means: whatever there is */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PKT_CONTEXT</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>pullf_read</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>data_p</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<while>while <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* this was last chunk in stream */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PKT_NORMAL</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

		<comment type="block">/* next chunk in stream */</comment>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>parse_new_len</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pullf_read</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>data_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>len</name></name> <operator>-=</operator> <name>res</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>pktreader_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>PktData</name></name> <modifier>*</modifier></type><name>pkt</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pkt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>PullFilterOps</name></name></type> <name>pktreader_filter</name> <init>= <expr><block>{
	<expr><name>NULL</name></expr>, <expr><name>pktreader_pull</name></expr>, <expr><name>pktreader_free</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* needs helper function to pass several parameters */</comment>
<function><type><name>int</name></type>
<name>pgp_create_pkt_reader</name><parameter_list>(<parameter><decl><type><name>PullFilter</name> <modifier>*</modifier><modifier>*</modifier></type><name>pf_p</name></decl></parameter>, <parameter><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
					  <parameter><decl><type><name>int</name></type> <name>pkttype</name></decl></parameter>, <parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>PktData</name></name> <modifier>*</modifier></type><name>pkt</name> <init>= <expr><call><name>px_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pkt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>pkttype</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pullf_create</name><argument_list>(<argument><expr><name>pf_p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pktreader_filter</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Prefix check filter
 * https://tools.ietf.org/html/rfc4880#section-5.7
 * https://tools.ietf.org/html/rfc4880#section-5.13
 */</comment>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>prefix_init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>priv_p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>tmpbuf</name><index>[<expr><name>PGP_MAX_BLOCK</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>pgp_get_cipher_block_size</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cipher_algo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>PXE_BUG</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pullf_read_max</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>tmpbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>len</name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"prefix_init: short read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>PXE_PGP_CORRUPT_DATA</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> <operator>||</operator> <name><name>buf</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name><name>buf</name><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"prefix_init: corrupt prefix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* report error in pgp_decrypt() */</comment>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>corrupt_prefix</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>PullFilterOps</name></name></type> <name>prefix_filter</name> <init>= <expr><block>{
	<expr><name>prefix_init</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<comment type="block">/*
 * Decrypt filter
 */</comment>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>decrypt_init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>priv_p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGP_CFB</name>    <modifier>*</modifier></type><name>cfb</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>priv_p</name> <operator>=</operator> <name>cfb</name></expr>;</expr_stmt>

	<comment type="block">/* we need to write somewhere, so ask for a buffer */</comment>
	<return>return <expr><literal type="number">4096</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>decrypt_read</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
			 <parameter><decl><type><name>uint8</name> <modifier>*</modifier><modifier>*</modifier></type><name>data_p</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGP_CFB</name>    <modifier>*</modifier></type><name>cfb</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pullf_read</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pgp_cfb_decrypt</name><argument_list>(<argument><expr><name>cfb</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>data_p</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>struct</name> <name>PullFilterOps</name></name></type> <name>pgp_decrypt_filter</name> <init>= <expr><block>{
	<expr><name>decrypt_init</name></expr>, <expr><name>decrypt_read</name></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<comment type="block">/*
 * MDC hasher filter
 */</comment>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>mdc_init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>priv_p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>priv_p</name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
	<return>return <expr><call><name>pgp_load_digest</name><argument_list>(<argument><expr><name>PGP_DIGEST_SHA1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>mdc_ctx</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>mdc_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>use_mdcbuf_filter</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>px_md_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mdc_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mdc_ctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>mdc_finish</name><parameter_list>(<parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>hash</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>tmpbuf</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

	<comment type="block">/* should not happen */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>use_mdcbuf_filter</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>PXE_BUG</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* It's SHA1 */</comment>
	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">20</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>PXE_PGP_CORRUPT_DATA</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* mdc_read should not call md_update */</comment>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>in_mdc_pkt</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<comment type="block">/* read data */</comment>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pullf_read_max</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>tmpbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"no mdc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>PXE_PGP_CORRUPT_DATA</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* is the packet sane? */</comment>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <literal type="number">20</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"mdc_finish: read failed, res=%d"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>PXE_PGP_CORRUPT_DATA</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * ok, we got the hash, now check
	 */</comment>
	<expr_stmt><expr><call><name>px_md_finish</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mdc_ctx</name></name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"mdc_finish: mdc failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>PXE_PGP_CORRUPT_DATA</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>mdc_checked</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>mdc_read</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
		 <parameter><decl><type><name>uint8</name> <modifier>*</modifier><modifier>*</modifier></type><name>data_p</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* skip this filter? */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>use_mdcbuf_filter</name></name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>in_mdc_pkt</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>pullf_read</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>data_p</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pullf_read</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>data_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"mdc_read: unexpected eof"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>PXE_PGP_CORRUPT_DATA</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>px_md_update</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>mdc_ctx</name></name></expr></argument>, <argument><expr><operator>*</operator><name>data_p</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>PullFilterOps</name></name></type> <name>mdc_filter</name> <init>= <expr><block>{
	<expr><name>mdc_init</name></expr>, <expr><name>mdc_read</name></expr>, <expr><name>mdc_free</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<comment type="block">/*
 * Combined Pkt reader and MDC hasher.
 *
 * For the case of SYMENCRYPTED_MDC packet, where
 * the data part has 'context length', which means
 * that data packet ends 22 bytes before end of parent
 * packet, which is silly.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDCBUF_LEN</name></cpp:macro> <cpp:value>8192</cpp:value></cpp:define>
<struct>struct <name>MDCBufData</name>
<block>{
	<decl_stmt><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>eof</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>buflen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>avail</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>mdc_avail</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>mdc_buf</name><index>[<expr><literal type="number">22</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>buf</name><index>[<expr><name>MDCBUF_LEN</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>mdcbuf_init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>priv_p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>MDCBufData</name></name> <modifier>*</modifier></type><name>st</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>px_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>st</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>st</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>buflen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>priv_p</name> <operator>=</operator> <name>st</name></expr>;</expr_stmt>

	<comment type="block">/* take over the work of mdc_filter */</comment>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>use_mdcbuf_filter</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>mdcbuf_finish</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MDCBufData</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>hash</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>mdc_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0xD3</literal> <operator>||</operator> <name><name>st</name><operator>-&gt;</operator><name>mdc_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x14</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"mdcbuf_finish: bad MDC pkt hdr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>PXE_PGP_CORRUPT_DATA</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>px_md_update</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>mdc_ctx</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>mdc_buf</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_md_finish</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>mdc_ctx</name></name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>mdc_buf</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"mdcbuf_finish: MDC does not match"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <name>PXE_PGP_CORRUPT_DATA</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>mdcbuf_load_data</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MDCBufData</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>dst</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <name><name>st</name><operator>-&gt;</operator><name>avail</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_md_update</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>mdc_ctx</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>avail</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>mdcbuf_load_mdc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MDCBufData</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>mdc_buf</name></name> <operator>+</operator> <name><name>st</name><operator>-&gt;</operator><name>mdc_avail</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>mdc_avail</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>mdcbuf_refill</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>MDCBufData</name></name> <modifier>*</modifier></type><name>st</name></decl></parameter>, <parameter><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>need</name></decl>;</decl_stmt>

	<comment type="block">/* put avail data in start */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>avail</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>st</name><operator>-&gt;</operator><name>pos</name></name> <operator>!=</operator> <name><name>st</name><operator>-&gt;</operator><name>buf</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>avail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>buf</name></name></expr>;</expr_stmt>

	<comment type="block">/* read new data */</comment>
	<expr_stmt><expr><name>need</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>buflen</name></name> <operator>+</operator> <literal type="number">22</literal> <operator>-</operator> <name><name>st</name><operator>-&gt;</operator><name>avail</name></name> <operator>-</operator> <name><name>st</name><operator>-&gt;</operator><name>mdc_avail</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pullf_read</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>need</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>mdcbuf_finish</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* add to buffer */</comment>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&gt;=</operator> <literal type="number">22</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>mdcbuf_load_data</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>mdc_buf</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>mdc_avail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>mdc_avail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>mdcbuf_load_data</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>res</name> <operator>-</operator> <literal type="number">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>mdcbuf_load_mdc</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>res</name> <operator>-</operator> <literal type="number">22</literal></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>canmove</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>mdc_avail</name></name> <operator>+</operator> <name>res</name> <operator>-</operator> <literal type="number">22</literal></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>canmove</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>mdcbuf_load_data</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>mdc_buf</name></name></expr></argument>, <argument><expr><name>canmove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>mdc_avail</name></name> <operator>-=</operator> <name>canmove</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>mdc_buf</name></name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>mdc_buf</name></name> <operator>+</operator> <name>canmove</name></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>mdc_avail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>mdcbuf_load_mdc</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>mdcbuf_read</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,
			<parameter><decl><type><name>uint8</name> <modifier>*</modifier><modifier>*</modifier></type><name>data_p</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>MDCBufData</name></name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>st</name><operator>-&gt;</operator><name>eof</name></name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <name><name>st</name><operator>-&gt;</operator><name>avail</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>mdcbuf_refill</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name><name>st</name><operator>-&gt;</operator><name>avail</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>avail</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>data_p</name> <operator>=</operator> <name><name>st</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>pos</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>avail</name></name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
	<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>mdcbuf_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>MDCBufData</name></name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>px_md_free</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>mdc_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>st</name><operator>-&gt;</operator><name>ctx</name><operator>-&gt;</operator><name>mdc_ctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>st</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>px_free</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>PullFilterOps</name></name></type> <name>mdcbuf_filter</name> <init>= <expr><block>{
	<expr><name>mdcbuf_init</name></expr>, <expr><name>mdcbuf_read</name></expr>, <expr><name>mdcbuf_free</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<comment type="block">/*
 * Decrypt separate session key
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>decrypt_key</name><parameter_list>(<parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name>algo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGP_CFB</name>    <modifier>*</modifier></type><name>cfb</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_cfb_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cfb</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>s2k_cipher_algo</name></name></expr></argument>,
						 <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>s2k</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>s2k</name><operator>.</operator><name>key_len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>pgp_cfb_decrypt</name><argument_list>(<argument><expr><name>cfb</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>algo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>src</name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pgp_cfb_decrypt</name><argument_list>(<argument><expr><name>cfb</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sess_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pgp_cfb_free</name><argument_list>(<argument><expr><name>cfb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sess_key_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cipher_algo</name></name> <operator>=</operator> <name>algo</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>pgp_get_cipher_key_size</name><argument_list>(<argument><expr><name>algo</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>len</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"sesskey bad len: algo=%d, expected=%d, got=%d"</literal></expr></argument>,
				 <argument><expr><name>algo</name></expr></argument>, <argument><expr><call><name>pgp_get_cipher_key_size</name><argument_list>(<argument><expr><name>algo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>PXE_PGP_CORRUPT_DATA</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Handle key packet
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_symenc_sesskey</name><parameter_list>(<parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>tmpbuf</name><index>[<expr><name>PGP_MAX_KEY</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name>ver</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>GETBYTE</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GETBYTE</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>s2k_cipher_algo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ver</name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"bad key pkt ver"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>PXE_PGP_CORRUPT_DATA</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * read S2K info
	 */</comment>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_s2k_read</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>s2k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>s2k_mode</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>s2k</name><operator>.</operator><name>mode</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>s2k_count</name></name> <operator>=</operator> <call><name>s2k_decode_count</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>s2k</name><operator>.</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>s2k_digest_algo</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>s2k</name><operator>.</operator><name>digest_algo</name></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * generate key from password
	 */</comment>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_s2k_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>s2k</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>s2k_cipher_algo</name></name></expr></argument>,
						  <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sym_key</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sym_key_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * do we have separate session key?
	 */</comment>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pullf_read_max</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>PGP_MAX_KEY</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>tmpbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * no, s2k key is session key
		 */</comment>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sess_key</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>s2k</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>s2k</name><operator>.</operator><name>key_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sess_key_len</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>s2k</name><operator>.</operator><name>key_len</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cipher_algo</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>s2k_cipher_algo</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>use_sess_key</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * yes, decrypt it
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>res</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">17</literal> <operator>||</operator> <name>res</name></expr></argument> &gt;</argument_list></name> <name>PGP_MAX_KEY</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"expect key, but bad data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>PXE_PGP_CORRUPT_DATA</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>use_sess_key</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>decrypt_key</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>copy_crlf</name><parameter_list>(<parameter><decl><type><name>MBuf</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_cr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>data_end</name> <init>= <expr><name>data</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>tmpbuf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>tmp_end</name> <init>= <expr><name>tmpbuf</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <name>tmpbuf</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>got_cr</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name> <operator>!=</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><name>got_cr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<while>while <condition>(<expr><name>data</name> <operator>&lt;</operator> <name>data_end</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data</name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>data</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>data_end</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>data</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>got_cr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>data</name><operator>++</operator></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name>tmp_end</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>mbuf_append</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>tmpbuf</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>tmpbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>p</name> <operator>=</operator> <name>tmpbuf</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><name>p</name> <operator>-</operator> <name>tmpbuf</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>mbuf_append</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>tmpbuf</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>tmpbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_literal_data</name><parameter_list>(<parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>MBuf</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>name_len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name><name>tmpbuf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>got_cr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>GETBYTE</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>GETBYTE</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* skip name */</comment>
	<while>while <condition>(<expr><name>name_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pullf_read</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>name_len</name> <operator>-=</operator> <name>res</name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><name>name_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"parse_literal_data: unexpected eof"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>PXE_PGP_CORRUPT_DATA</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* skip date */</comment>
	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pullf_read_max</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>tmpbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"parse_literal_data: unexpected eof"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>PXE_PGP_CORRUPT_DATA</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>px_memset</name><argument_list>(<argument><expr><name>tmpbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If called from an SQL function that returns text, pgp_decrypt() rejects
	 * inputs not self-identifying as text.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>text_mode</name></name></expr>)</condition><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <literal type="char">'t'</literal> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <literal type="char">'u'</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"parse_literal_data: data type=%c"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>unexpected_binary</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>unicode_mode</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>type</name> <operator>==</operator> <literal type="char">'u'</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

	<comment type="block">/* read data */</comment>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pullf_read</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><literal type="number">32</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>text_mode</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>convert_crlf</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>copy_crlf</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>got_cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>mbuf_append</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>got_cr</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>mbuf_append</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8</name> <operator>*</operator><operator>)</operator> <literal type="string">"\r"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* process_data_packets and parse_compressed_data call each other */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>process_data_packets</name><parameter_list>(<parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>MBuf</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
					 <parameter><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>allow_compr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>need_mdc</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_compressed_data</name><parameter_list>(<parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>MBuf</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>pf_decompr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>discard_buf</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>GETBYTE</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>compress_algo</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name>type</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>PGP_COMPR_NONE</name></expr>:</case>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>process_data_packets</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>NO_COMPR</name></expr></argument>, <argument><expr><name>NO_MDC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>PGP_COMPR_ZIP</name></expr>:</case>
		<case>case <expr><name>PGP_COMPR_ZLIB</name></expr>:</case>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_decompress_filter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pf_decompr</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>process_data_packets</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>pf_decompr</name></expr></argument>,
										   <argument><expr><name>NO_COMPR</name></expr></argument>, <argument><expr><name>NO_MDC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>pullf_free</name><argument_list>(<argument><expr><name>pf_decompr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<break>break;</break>

		<case>case <expr><name>PGP_COMPR_BZIP2</name></expr>:</case>
			<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"parse_compressed_data: bzip2 unsupported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* report error in pgp_decrypt() */</comment>
			<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>unsupported_compr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

			<comment type="block">/*
			 * Discard the compressed data, allowing it to first affect any
			 * MDC digest computation.
			 */</comment>
			<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pullf_read</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><literal type="number">32</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>discard_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<break>break;</break></block_content></block></if></if_stmt>
			</block_content>}</block></while>

			<break>break;</break>

		<default>default:</default>
			<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"parse_compressed_data: unknown compr type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <name>PXE_PGP_CORRUPT_DATA</name></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>process_data_packets</name><parameter_list>(<parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>MBuf</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
					 <parameter><decl><type><name>int</name></type> <name>allow_compr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>need_mdc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint8</name></type>		<name>tag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>,
				<decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>got_data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>got_mdc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>pkt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_parse_pkt_hdr</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>ALLOW_CTX_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>


		<comment type="block">/* mdc packet should be last */</comment>
		<if_stmt><if>if <condition>(<expr><name>got_mdc</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"process_data_packets: data after mdc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <name>PXE_PGP_CORRUPT_DATA</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* context length inside SYMENC_MDC needs special handling */</comment>
		<if_stmt><if>if <condition>(<expr><name>need_mdc</name> <operator>&amp;&amp;</operator> <name>res</name> <operator>==</operator> <name>PKT_CONTEXT</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pullf_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mdcbuf_filter</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_create_pkt_reader</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<switch>switch <condition>(<expr><name>tag</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>PGP_PKT_LITERAL_DATA</name></expr>:</case>
				<expr_stmt><expr><name>got_data</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>parse_literal_data</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>PGP_PKT_COMPRESSED_DATA</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><name>allow_compr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"process_data_packets: unexpected compression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>res</name> <operator>=</operator> <name>PXE_PGP_CORRUPT_DATA</name></expr>;</expr_stmt>
				</block_content>}</block></if>
				<if type="elseif">else if <condition>(<expr><name>got_data</name></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/*
					 * compr data must be alone
					 */</comment>
					<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"process_data_packets: only one cmpr pkt allowed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>res</name> <operator>=</operator> <name>PXE_PGP_CORRUPT_DATA</name></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><name>got_data</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>parse_compressed_data</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
				<break>break;</break>
			<case>case <expr><name>PGP_PKT_MDC</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><name>need_mdc</name> <operator>==</operator> <name>NO_MDC</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"process_data_packets: unexpected MDC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>res</name> <operator>=</operator> <name>PXE_PGP_CORRUPT_DATA</name></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>mdc_finish</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>got_mdc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"process_data_packets: unexpected pkt tag=%d"</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <name>PXE_PGP_CORRUPT_DATA</name></expr>;</expr_stmt>
		</block_content>}</block></switch>

		<expr_stmt><expr><call><name>pullf_free</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pkt</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>pkt</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pullf_free</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_data</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"process_data_packets: no data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <name>PXE_PGP_CORRUPT_DATA</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>need_mdc</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>got_mdc</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>use_mdcbuf_filter</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"process_data_packets: got no mdc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <name>PXE_PGP_CORRUPT_DATA</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_symenc_data</name><parameter_list>(<parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>MBuf</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGP_CFB</name>    <modifier>*</modifier></type><name>cfb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>pf_decrypt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>pf_prefix</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_cfb_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cfb</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cipher_algo</name></name></expr></argument>,
						 <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sess_key</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sess_key_len</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pullf_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pf_decrypt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pgp_decrypt_filter</name></expr></argument>, <argument><expr><name>cfb</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pullf_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pf_prefix</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prefix_filter</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pf_decrypt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>process_data_packets</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>pf_prefix</name></expr></argument>, <argument><expr><name>ALLOW_COMPR</name></expr></argument>, <argument><expr><name>NO_MDC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>out</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>pf_prefix</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pullf_free</name><argument_list>(<argument><expr><name>pf_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>pf_decrypt</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pullf_free</name><argument_list>(<argument><expr><name>pf_decrypt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>cfb</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pgp_cfb_free</name><argument_list>(<argument><expr><name>cfb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>parse_symenc_mdc_data</name><parameter_list>(<parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>MBuf</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGP_CFB</name>    <modifier>*</modifier></type><name>cfb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>pf_decrypt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>pf_prefix</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>pf_mdc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name>ver</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>GETBYTE</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>ver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ver</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"parse_symenc_mdc_data: pkt ver != 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>PXE_PGP_CORRUPT_DATA</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_cfb_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cfb</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cipher_algo</name></name></expr></argument>,
						 <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sess_key</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sess_key_len</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pullf_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pf_decrypt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pgp_decrypt_filter</name></expr></argument>, <argument><expr><name>cfb</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pullf_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pf_mdc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mdc_filter</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pf_decrypt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pullf_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pf_prefix</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prefix_filter</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pf_mdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>process_data_packets</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>pf_prefix</name></expr></argument>, <argument><expr><name>ALLOW_COMPR</name></expr></argument>, <argument><expr><name>NEED_MDC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>out</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>pf_prefix</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pullf_free</name><argument_list>(<argument><expr><name>pf_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>pf_mdc</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pullf_free</name><argument_list>(<argument><expr><name>pf_mdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>pf_decrypt</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pullf_free</name><argument_list>(<argument><expr><name>pf_decrypt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>cfb</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pgp_cfb_free</name><argument_list>(<argument><expr><name>cfb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * skip over packet contents
 */</comment>
<function><type><name>int</name></type>
<name>pgp_skip_packet</name><parameter_list>(<parameter><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>res</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pullf_read</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><literal type="number">32</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * expect to be at packet end, any data is error
 */</comment>
<function><type><name>int</name></type>
<name>pgp_expect_packet_end</name><parameter_list>(<parameter><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name>	   <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pullf_read</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><literal type="number">32</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"pgp_expect_packet_end: got data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>PXE_PGP_CORRUPT_DATA</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pgp_decrypt</name><parameter_list>(<parameter><decl><type><name>PGP_Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>MBuf</name> <modifier>*</modifier></type><name>msrc</name></decl></parameter>, <parameter><decl><type><name>MBuf</name> <modifier>*</modifier></type><name>mdst</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PullFilter</name> <modifier>*</modifier></type><name>pkt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name>tag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>got_key</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>got_data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pullf_create_mbuf_reader</name><argument_list>(<argument><expr><operator>&amp;</operator><name>src</name></expr></argument>, <argument><expr><name>msrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>res</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_parse_pkt_hdr</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>NO_CTX_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_create_pkt_reader</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>res</name> <operator>=</operator> <name>PXE_PGP_CORRUPT_DATA</name></expr>;</expr_stmt>
		<switch>switch <condition>(<expr><name>tag</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>PGP_PKT_MARKER</name></expr>:</case>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_skip_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>PGP_PKT_PUBENCRYPTED_SESSKEY</name></expr>:</case>
				<comment type="block">/* fixme: skip those */</comment>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>pgp_parse_pubenc_sesskey</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>got_key</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>PGP_PKT_SYMENCRYPTED_SESSKEY</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><name>got_key</name></expr>)</condition><block type="pseudo"><block_content>

					<comment type="block">/*
					 * Theoretically, there could be several keys, both public
					 * and symmetric, all of which encrypt same session key.
					 * Decrypt should try with each one, before failing.
					 */</comment>
					<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"pgp_decrypt: using first of several keys"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><name>got_key</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>parse_symenc_sesskey</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
				<break>break;</break>
			<case>case <expr><name>PGP_PKT_SYMENCRYPTED_DATA</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_key</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"pgp_decrypt: have data but no key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><name>got_data</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"pgp_decrypt: got second data packet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><name>got_data</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>disable_mdc</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>parse_symenc_data</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>mdst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
				<break>break;</break>
			<case>case <expr><name>PGP_PKT_SYMENCRYPTED_DATA_MDC</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_key</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"pgp_decrypt: have data but no key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<if type="elseif">else if <condition>(<expr><name>got_data</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"pgp_decrypt: several data pkts not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><name>got_data</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>disable_mdc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>parse_symenc_mdc_data</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>mdst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>px_debug</name><argument_list>(<argument><expr><literal type="string">"pgp_decrypt: unknown tag: 0x%02x"</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>
		<expr_stmt><expr><call><name>pullf_free</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pkt</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>pkt</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pullf_free</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>src</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pullf_free</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Report a failure of the prefix_init() "quick check" now, rather than
	 * upon detection, to hinder timing attacks.  pgcrypto is not generally
	 * secure against timing attacks, but this helps.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>got_data</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>corrupt_prefix</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>PXE_PGP_CORRUPT_DATA</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Code interpreting purportedly-decrypted data prior to this stage shall
	 * report no error other than PXE_PGP_CORRUPT_DATA.  (PXE_BUG is okay so
	 * long as it remains unreachable.)  This ensures that an attacker able to
	 * choose a ciphertext and receive a corresponding decryption error
	 * message cannot use that oracle to gather clues about the decryption
	 * key.  See "An Attack on CFB Mode Encryption As Used By OpenPGP" by
	 * Serge Mister and Robert Zuccherato.
	 *
	 * A problematic value in the first octet of a Literal Data or Compressed
	 * Data packet may indicate a simple user error, such as the need to call
	 * pgp_sym_decrypt_bytea instead of pgp_sym_decrypt.  Occasionally,
	 * though, it is the first symptom of the encryption key not matching the
	 * decryption key.  When this was the only problem encountered, report a
	 * specific error to guide the user; otherwise, we will have reported
	 * PXE_PGP_CORRUPT_DATA before now.  A key mismatch makes the other errors
	 * into red herrings, and this avoids leaking clues to attackers.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>unsupported_compr</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>PXE_PGP_UNSUPPORTED_COMPR</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>unexpected_binary</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>PXE_PGP_NOT_TEXT</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>
</unit>
