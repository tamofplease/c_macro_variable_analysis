<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/contrib/yb_pg_metrics/yb_pg_metrics.c"><comment type="line">// Copyright (c) YugaByte, Inc.</comment>
<comment type="line">//</comment>
<comment type="line">// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except</comment>
<comment type="line">// in compliance with the License.  You may obtain a copy of the License at</comment>
<comment type="line">//</comment>
<comment type="line">// http://www.apache.org/licenses/LICENSE-2.0</comment>
<comment type="line">//</comment>
<comment type="line">// Unless required by applicable law or agreed to in writing, software distributed under the License</comment>
<comment type="line">// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express</comment>
<comment type="line">// or implied.  See the License for the specific language governing permissions and limitations</comment>
<comment type="line">// under the License.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/instrument.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_authid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_database.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/ip.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"datatype/timestamp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parsetree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/bgworker.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/postmaster.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/ipc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/latch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/shmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcop/utility.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/catcache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/datetime.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"yb/server/pgsql_webserver_wrapper.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_yb_utils.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YSQL_METRIC_PREFIX</name></cpp:macro> <cpp:value>"handler_latency_yb_ysqlserver_SQLProcessor_"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NumBackendStatSlots</name></cpp:macro> <cpp:value>(MaxBackends + NUM_AUXPROCTYPES)</cpp:value></cpp:define>

<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<typedef>typedef <type><enum>enum <name>statementType</name>
<block>{
  <decl><name>Select</name></decl>,
  <decl><name>Insert</name></decl>,
  <decl><name>Delete</name></decl>,
  <decl><name>Update</name></decl>,
  <decl><name>Begin</name></decl>,
  <decl><name>Commit</name></decl>,
  <decl><name>Rollback</name></decl>,
  <decl><name>Other</name></decl>,
  <decl><name>Single_Shard_Transaction</name></decl>,
  <decl><name>SingleShardTransaction</name></decl>,
  <decl><name>Transaction</name></decl>,
  <decl><name>AggregatePushdown</name></decl>,
  <decl><name>CatCacheMisses</name></decl>,
  <decl><name>kMaxStatementType</name></decl>
}</block></enum></type> <name>statementType</name>;</typedef>
<decl_stmt><decl><type><name>int</name></type> <name>num_entries</name> <init>= <expr><name>kMaxStatementType</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ybpgmEntry</name> <modifier>*</modifier></type><name>ybpgm_table</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* Statement nesting level is used when setting up dml statements.
 * - Some state variables are set up for the top-level query but not the nested query.
 * - Time recorder is initialized and used for top-level query only.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>statement_nesting_level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* Block nesting level is used when setting up execution block such as "DO $$ ... END $$;".
 * - Some state variables are set up for the top level block but not the nested blocks.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>block_nesting_level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Flag to determine whether a transaction block has been entered.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>is_inside_transaction_block</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Flag to determine whether a DML or Other statement type has been executed.
 * Multiple statements will count as a single transaction within a transaction block.
 * DDL statements which are autonomous will be counted as its own transaction
 * even within a transaction block.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>is_statement_executed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>metric_node_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>WebserverWrapper</name></name> <modifier>*</modifier></type><name>webserver</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>port</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>num_backends</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>rpczEntry</name> <modifier>*</modifier></type><name>rpcz</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>MemoryContext</name></type> <name>ybrpczMemoryContext</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PgBackendStatus</name> <modifier>*</modifier><modifier>*</modifier></type><name>backendStatusArrayPointer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>too_many_conn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>MaxConnections</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>last_cache_misses_val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><name>void</name></type>		<name>_PG_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block">/*
 * Variables used for storing the previous values of used hooks.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>shmem_startup_hook_type</name></type> <name>prev_shmem_startup_hook</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ExecutorStart_hook_type</name></type> <name>prev_ExecutorStart</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ExecutorEnd_hook_type</name></type> <name>prev_ExecutorEnd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ExecutorRun_hook_type</name></type> <name>prev_ExecutorRun</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ExecutorFinish_hook_type</name></type> <name>prev_ExecutorFinish</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ProcessUtility_hook_type</name></type> <name>prev_ProcessUtility</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>set_metric_names</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ybpgm_startup_hook</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Size</name></type> <name>ybpgm_memsize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>isTopLevelStatement</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ybpgm_ExecutorStart</name><parameter_list>(<parameter><decl><type><name>QueryDesc</name> <modifier>*</modifier></type><name>queryDesc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ybpgm_ExecutorRun</name><parameter_list>(<parameter><decl><type><name>QueryDesc</name> <modifier>*</modifier></type><name>queryDesc</name></decl></parameter>, <parameter><decl><type><name>ScanDirection</name></type> <name>direction</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>count</name></decl></parameter>,
                              <parameter><decl><type><name>bool</name></type> <name>execute_once</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ybpgm_ExecutorFinish</name><parameter_list>(<parameter><decl><type><name>QueryDesc</name> <modifier>*</modifier></type><name>queryDesc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ybpgm_ExecutorEnd</name><parameter_list>(<parameter><decl><type><name>QueryDesc</name> <modifier>*</modifier></type><name>queryDesc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ybpgm_ProcessUtility</name><parameter_list>(<parameter><decl><type><name>PlannedStmt</name> <modifier>*</modifier></type><name>pstmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>queryString</name></decl></parameter>,
                                 <parameter><decl><type><name>ProcessUtilityContext</name></type> <name>context</name></decl></parameter>,
                                 <parameter><decl><type><name>ParamListInfo</name></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>QueryEnvironment</name> <modifier>*</modifier></type><name>queryEnv</name></decl></parameter>,
                                 <parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>completionTag</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ybpgm_Store</name><parameter_list>(<parameter><decl><type><name>statementType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>rows</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ybpgm_StoreCount</name><parameter_list>(<parameter><decl><type><name>statementType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Function used for checking if the current statement is a top level statement.
 */</comment>
<function><type><name>bool</name></type>
<name>isTopLevelStatement</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name>statement_nesting_level</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>IncStatementNestingLevel</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name>statement_nesting_level</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>DecStatementNestingLevel</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name>statement_nesting_level</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>isTopLevelBlock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><name>block_nesting_level</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>IncBlockNestingLevel</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name>block_nesting_level</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>DecBlockNestingLevel</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><name>block_nesting_level</name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>set_metric_names</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>ybpgm_table</name><index>[<expr><name>Select</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>YSQL_METRIC_PREFIX</name> <literal type="string">"SelectStmt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>ybpgm_table</name><index>[<expr><name>Insert</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>YSQL_METRIC_PREFIX</name> <literal type="string">"InsertStmt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>ybpgm_table</name><index>[<expr><name>Delete</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>YSQL_METRIC_PREFIX</name> <literal type="string">"DeleteStmt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>ybpgm_table</name><index>[<expr><name>Update</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>YSQL_METRIC_PREFIX</name> <literal type="string">"UpdateStmt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>ybpgm_table</name><index>[<expr><name>Begin</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>YSQL_METRIC_PREFIX</name> <literal type="string">"BeginStmt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>ybpgm_table</name><index>[<expr><name>Commit</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>YSQL_METRIC_PREFIX</name> <literal type="string">"CommitStmt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>ybpgm_table</name><index>[<expr><name>Rollback</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>YSQL_METRIC_PREFIX</name> <literal type="string">"RollbackStmt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>ybpgm_table</name><index>[<expr><name>Other</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>YSQL_METRIC_PREFIX</name> <literal type="string">"OtherStmts"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// Deprecated. Names with "_"s may cause confusion to metric conumsers.</comment>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(
      <argument><expr><name><name>ybpgm_table</name><index>[<expr><name>Single_Shard_Transaction</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>YSQL_METRIC_PREFIX</name> <literal type="string">"Single_Shard_Transactions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>ybpgm_table</name><index>[<expr><name>SingleShardTransaction</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>YSQL_METRIC_PREFIX</name> <literal type="string">"SingleShardTransactions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>ybpgm_table</name><index>[<expr><name>Transaction</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>YSQL_METRIC_PREFIX</name> <literal type="string">"Transactions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>ybpgm_table</name><index>[<expr><name>AggregatePushdown</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>YSQL_METRIC_PREFIX</name> <literal type="string">"AggregatePushdowns"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>ybpgm_table</name><index>[<expr><name>CatCacheMisses</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>YSQL_METRIC_PREFIX</name> <literal type="string">"CatalogCacheMisses"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Function to calculate milliseconds elapsed from start_time to stop_time.
 */</comment>
<function><type><name>int64</name></type>
<name>getElapsedMs</name><parameter_list>(<parameter><decl><type><name>TimestampTz</name></type> <name>start_time</name></decl></parameter>, <parameter><decl><type><name>TimestampTz</name></type> <name>stop_time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>long</name></type> <name>secs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>microsecs</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>TimestampDifference</name><argument_list>(<argument><expr><name>start_time</name></expr></argument>, <argument><expr><name>stop_time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>secs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>microsecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>long</name></type> <name>millisecs</name> <init>= <expr><operator>(</operator><name>secs</name> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>microsecs</name> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>millisecs</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>pullRpczEntries</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>backendStatusArrayPointer</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Backend Status Array hasn't been initialized yet."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>ybrpczMemoryContext</name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>,
                                             <argument><expr><literal type="string">"YB RPCz memory context"</literal></expr></argument>,
                                             <argument><expr><name>ALLOCSET_SMALL_SIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name> <init>= <expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>ybrpczMemoryContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>rpcz</name> <operator>=</operator> <operator>(</operator><name>rpczEntry</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rpczEntry</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>NumBackendStatSlots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>num_backends</name> <operator>=</operator> <name>NumBackendStatSlots</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><specifier>volatile</specifier> <name>PgBackendStatus</name> <modifier>*</modifier></type><name>beentry</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>beentry</name> <operator>=</operator> <operator>*</operator><name>backendStatusArrayPointer</name></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NumBackendStatSlots</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{<block_content>
    <comment type="block">/* To prevent locking overhead, the BackendStatusArray in postgres maintains a st_changecount
     * field for each entry. This field is incremented once before a backend starts modifying the
     * entry, and once after it is done modifying the entry. So, we check if st_changecount changes
     * while we're copying the entry or if its odd. The check for odd is needed for when a backend
     * has begun changing the entry but hasn't finished.
     */</comment>
    <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
    <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type>			<name>before_changecount</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type>			<name>after_changecount</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>before_changecount</name> <operator>=</operator> <name><name>beentry</name><operator>-&gt;</operator><name>st_changecount</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>rpcz</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>proc_id</name> <operator>=</operator> <name><name>beentry</name><operator>-&gt;</operator><name>st_procpid</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>rpcz</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>new_conn</name> <operator>=</operator> <name><name>beentry</name><operator>-&gt;</operator><name>yb_new_conn</name></name></expr>;</expr_stmt>

      <comment type="block">/* avoid filling any more fields if invalid */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>beentry</name><operator>-&gt;</operator><name>st_procpid</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name><name>rpcz</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>db_oid</name> <operator>=</operator> <name><name>beentry</name><operator>-&gt;</operator><name>st_databaseid</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>rpcz</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>query</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>pgstat_track_activity_query_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>rpcz</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>query</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>beentry</name><operator>-&gt;</operator><name>st_activity_raw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>rpcz</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>application_name</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>NAMEDATALEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>rpcz</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>application_name</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>beentry</name><operator>-&gt;</operator><name>st_appname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>rpcz</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>db_name</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>NAMEDATALEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>rpcz</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>db_name</name></expr></argument>, <argument><expr><name><name>beentry</name><operator>-&gt;</operator><name>st_databasename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>rpcz</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>process_start_timestamp</name> <operator>=</operator> <name><name>beentry</name><operator>-&gt;</operator><name>st_proc_start_timestamp</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>rpcz</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>transaction_start_timestamp</name> <operator>=</operator> <name><name>beentry</name><operator>-&gt;</operator><name>st_xact_start_timestamp</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>rpcz</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>query_start_timestamp</name> <operator>=</operator> <name><name>beentry</name><operator>-&gt;</operator><name>st_activity_start_timestamp</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>rpcz</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>backend_type</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>rpcz</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>backend_type</name></expr></argument>, <argument><expr><call><name>pgstat_get_backend_desc</name><argument_list>(<argument><expr><name><name>beentry</name><operator>-&gt;</operator><name>st_backendType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>rpcz</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>backend_active</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>rpcz</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>backend_status</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <switch>switch <condition>(<expr><name><name>beentry</name><operator>-&gt;</operator><name>st_state</name></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>STATE_IDLE</name></expr>:</case>
          <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>rpcz</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>backend_status</name></expr></argument>, <argument><expr><literal type="string">"idle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>STATE_RUNNING</name></expr>:</case>
          <expr_stmt><expr><name><name>rpcz</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>backend_active</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>rpcz</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>backend_status</name></expr></argument>, <argument><expr><literal type="string">"active"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>STATE_IDLEINTRANSACTION</name></expr>:</case>
          <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>rpcz</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>backend_status</name></expr></argument>, <argument><expr><literal type="string">"idle in transaction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>STATE_FASTPATH</name></expr>:</case>
          <expr_stmt><expr><name><name>rpcz</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>backend_active</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>rpcz</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>backend_status</name></expr></argument>, <argument><expr><literal type="string">"fastpath function call"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>STATE_IDLEINTRANSACTION_ABORTED</name></expr>:</case>
          <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>rpcz</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>backend_status</name></expr></argument>, <argument><expr><literal type="string">"idle in transaction (aborted)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>STATE_DISABLED</name></expr>:</case>
          <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>rpcz</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>backend_status</name></expr></argument>, <argument><expr><literal type="string">"disabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>STATE_UNDEFINED</name></expr>:</case>
          <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>rpcz</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>backend_status</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
      </block_content>}</block></switch>

      <decl_stmt><decl><type><name>char</name></type> <name><name>remote_host</name><index>[<expr><name>NI_MAXHOST</name></expr>]</index></name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name></type> <name><name>remote_port</name><index>[<expr><name>NI_MAXSERV</name></expr>]</index></name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

      <expr_stmt><expr><name><name>remote_host</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>remote_port</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pg_getnameinfo_all</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr_storage</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>beentry</name><operator>-&gt;</operator><name>st_clientaddr</name><operator>.</operator><name>addr</name></name></expr></argument>,
                               <argument><expr><name><name>beentry</name><operator>-&gt;</operator><name>st_clientaddr</name><operator>.</operator><name>salen</name></name></expr></argument>,
                               <argument><expr><name>remote_host</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>remote_host</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                               <argument><expr><name>remote_port</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>remote_port</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                               <argument><expr><name>NI_NUMERICHOST</name> <operator>|</operator> <name>NI_NUMERICSERV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><name><name>rpcz</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>host</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>NI_MAXHOST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>rpcz</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>port</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>NI_MAXSERV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>clean_ipv6_addr</name><argument_list>(<argument><expr><name><name>beentry</name><operator>-&gt;</operator><name>st_clientaddr</name><operator>.</operator><name>addr</name><operator>.</operator><name>ss_family</name></name></expr></argument>, <argument><expr><name>remote_host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>rpcz</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>host</name></expr></argument>, <argument><expr><name>remote_host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>rpcz</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>, <argument><expr><name>remote_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if>
      <else>else
      <block>{<block_content>
        <expr_stmt><expr><name><name>rpcz</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>host</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>rpcz</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>port</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>after_changecount</name> <operator>=</operator> <name><name>beentry</name><operator>-&gt;</operator><name>st_changecount</name></name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>before_changecount</name> <operator>==</operator> <name>after_changecount</name> <operator>&amp;&amp;</operator>
          <operator>(</operator><name>before_changecount</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>beentry</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>freeRpczEntries</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>MemoryContextDelete</name><argument_list>(<argument><expr><name>ybrpczMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ybrpczMemoryContext</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Function that is executed when the YSQL webserver process is started.
 * We don't use the argument "unused", however, a postgres background worker's function
 * is required to have an argument of type Datum.
 */</comment>
<function><type><name>void</name></type>
<name>webserver_worker_main</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>unused</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/*
   * We need to use a pointer to a pointer here because the shared memory for BackendStatusArray
   * is not allocated when we enter this function. The memory is allocated after the background
   * works are registered.
   */</comment>

  <expr_stmt><expr><call><name>YBCInitThreading</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/*
   * We call YBCInit here so that HandleYBStatus can correctly report potential error.
   */</comment>
  <expr_stmt><expr><call><name>HandleYBStatus</name><argument_list>(<argument><expr><call><name>YBCInit</name><argument_list>(<argument><expr><name>NULL</name></expr></argument> <comment type="block">/* argv[0] */</comment>, <argument><expr><name>palloc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> <comment type="block">/* cstring_to_text_with_len_fn */</comment>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>backendStatusArrayPointer</name> <operator>=</operator> <call><name>getBackendStatusArrayPointer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>BackgroundWorkerUnblockSignals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>webserver</name> <operator>=</operator> <call><name>CreateWebserver</name><argument_list>(<argument><expr><name>ListenAddresses</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>RegisterMetrics</name><argument_list>(<argument><expr><name>ybpgm_table</name></expr></argument>, <argument><expr><name>num_entries</name></expr></argument>, <argument><expr><name>metric_node_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>postgresCallbacks</name></type> <name>callbacks</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>callbacks</name><operator>.</operator><name>pullRpczEntries</name></name>      <operator>=</operator> <name>pullRpczEntries</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>callbacks</name><operator>.</operator><name>freeRpczEntries</name></name>      <operator>=</operator> <name>freeRpczEntries</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>callbacks</name><operator>.</operator><name>getTimestampTz</name></name>       <operator>=</operator> <name>GetCurrentTimestamp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>callbacks</name><operator>.</operator><name>getTimestampTzDiffMs</name></name> <operator>=</operator> <name>getElapsedMs</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>callbacks</name><operator>.</operator><name>getTimestampTzToStr</name></name>  <operator>=</operator> <name>timestamptz_to_str</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>RegisterRpczEntries</name><argument_list>(<argument><expr><operator>&amp;</operator><name>callbacks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_backends</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rpcz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>too_many_conn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>MaxConnections</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>HandleYBStatus</name><argument_list>(<argument><expr><call><name>StartWebserver</name><argument_list>(<argument><expr><name>webserver</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>WaitLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>MyProc</name><operator>-&gt;</operator><name>procLatch</name></name></expr></argument>, <argument><expr><name>WL_POSTMASTER_DEATH</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>PG_WAIT_EXTENSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>rpcz</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>ybrpczMemoryContext</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
  <block>{<block_content>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name> <init>= <expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>ybrpczMemoryContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>rpcz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>proc_exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Module load callback
 */</comment>
<function><type><name>void</name></type>
<name>_PG_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>process_shared_preload_libraries_in_progress</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>RequestAddinShmemSpace</name><argument_list>(<argument><expr><call><name>ybpgm_memsize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*
   * Parameters that we expect to receive from the tserver process when it starts up postmaster.
   * We set the flags GUC_NO_SHOW_ALL, GUC_NO_RESET_ALL, GUC_NOT_IN_SAMPLE, GUC_DISALLOW_IN_FILE
   * so that these parameters arenât visible, resettable, or configurable by our end user.
   */</comment>
  <expr_stmt><expr><call><name>DefineCustomStringVariable</name><argument_list>(<argument><expr><literal type="string">"yb_pg_metrics.node_name"</literal></expr></argument>, <argument><expr><literal type="string">"Node name for YB metrics"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><operator>&amp;</operator><name>metric_node_name</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>PGC_POSTMASTER</name></expr></argument>,
                             <argument><expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NO_RESET_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name>
                             <operator>|</operator> <name>GUC_DISALLOW_IN_FILE</name></expr></argument>,
                             <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(<argument><expr><literal type="string">"yb_pg_metrics.port"</literal></expr></argument>, <argument><expr><literal type="string">"Port for YSQL webserver"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                          <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><name>PGC_POSTMASTER</name></expr></argument>,
                          <argument><expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NO_RESET_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name>
                          <operator>|</operator> <name>GUC_DISALLOW_IN_FILE</name></expr></argument>,
                          <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>BackgroundWorker</name></type> <name>worker</name></decl>;</decl_stmt>

  <comment type="block">/* Registering the YSQL webserver as a background worker */</comment>
  <expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>worker</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BackgroundWorker</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>worker</name><operator>.</operator><name>bgw_name</name></name></expr></argument>, <argument><expr><literal type="string">"YSQL webserver"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>worker</name><operator>.</operator><name>bgw_flags</name></name> <operator>=</operator> <name>BGWORKER_SHMEM_ACCESS</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>worker</name><operator>.</operator><name>bgw_start_time</name></name> <operator>=</operator> <name>BgWorkerStart_PostmasterStart</name></expr>;</expr_stmt>
  <comment type="block">/* Value of 1 allows the background worker for webserver to restart */</comment>
  <expr_stmt><expr><name><name>worker</name><operator>.</operator><name>bgw_restart_time</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>worker</name><operator>.</operator><name>bgw_main_arg</name></name> <operator>=</operator> <operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>worker</name><operator>.</operator><name>bgw_library_name</name></name></expr></argument>, <argument><expr><literal type="string">"yb_pg_metrics"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>worker</name><operator>.</operator><name>bgw_function_name</name></name></expr></argument>, <argument><expr><literal type="string">"webserver_worker_main"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>worker</name><operator>.</operator><name>bgw_notify_pid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RegisterBackgroundWorker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>worker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/*
   * Set the value of the hooks.
   */</comment>
  <expr_stmt><expr><name>prev_shmem_startup_hook</name> <operator>=</operator> <name>shmem_startup_hook</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>shmem_startup_hook</name> <operator>=</operator> <name>ybpgm_startup_hook</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>prev_ExecutorStart</name> <operator>=</operator> <name>ExecutorStart_hook</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>ExecutorStart_hook</name> <operator>=</operator> <name>ybpgm_ExecutorStart</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>prev_ExecutorRun</name> <operator>=</operator> <name>ExecutorRun_hook</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>ExecutorRun_hook</name> <operator>=</operator> <name>ybpgm_ExecutorRun</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>prev_ExecutorFinish</name> <operator>=</operator> <name>ExecutorFinish_hook</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>ExecutorFinish_hook</name> <operator>=</operator> <name>ybpgm_ExecutorFinish</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>prev_ExecutorEnd</name> <operator>=</operator> <name>ExecutorEnd_hook</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>ExecutorEnd_hook</name> <operator>=</operator> <name>ybpgm_ExecutorEnd</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>prev_ProcessUtility</name> <operator>=</operator> <name>ProcessUtility_hook</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>ProcessUtility_hook</name> <operator>=</operator> <name>ybpgm_ProcessUtility</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Allocate or attach to shared memory.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ybpgm_startup_hook</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>prev_shmem_startup_hook</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>prev_shmem_startup_hook</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>ybpgm_table</name> <operator>=</operator> <call><name>ShmemInitStruct</name><argument_list>(<argument><expr><literal type="string">"yb_pg_metrics"</literal></expr></argument>,
                                 <argument><expr><name>num_entries</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>ybpgmEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                                 <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>set_metric_names</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ybpgm_ExecutorStart</name><parameter_list>(<parameter><decl><type><name>QueryDesc</name> <modifier>*</modifier></type><name>queryDesc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eflags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Each PORTAL execution will run the following steps.
   * 1- ExecutorStart()
   * 2- Execute statements in the portal.
   *    Some statement execution (CURSOR execution) can open a nested PORTAL. Our metric routines
   *    will ignore the nested PORTAL for now.
   * 3- ExecutorEnd()
   */</comment>
  <if_stmt><if>if <condition>(<expr><name>prev_ExecutorStart</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>prev_ExecutorStart</name><argument_list>(<argument><expr><name>queryDesc</name></expr></argument>, <argument><expr><name>eflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>standard_ExecutorStart</name><argument_list>(<argument><expr><name>queryDesc</name></expr></argument>, <argument><expr><name>eflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <comment type="block">/* PORTAL run can be nested inside another PORTAL, and we only run metric routines for the top
   * level portal statement. The current design of using global variable "statement_nesting_level"
   * is very flawed as it cannot find the starting and ending point of a top statement execution.
   * For now, as a workaround, "queryDesc" attribute is used as an indicator for logging metric.
   * Whenever "time value" is not null, it is logged at the end of a portal run.
   * - When starting, we allocate "queryDesc-&gt;totaltime".
   * - When ending, we check for "queryDesc-&gt;totaltime". If not null, its metric is log.
   */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>isTopLevelStatement</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>queryDesc</name><operator>-&gt;</operator><name>totaltime</name></name></expr>)</condition>
  <block>{<block_content>
    <decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcxt</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>oldcxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>queryDesc</name><operator>-&gt;</operator><name>estate</name><operator>-&gt;</operator><name>es_query_cxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>queryDesc</name><operator>-&gt;</operator><name>totaltime</name></name> <operator>=</operator> <call><name>InstrAlloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INSTRUMENT_TIMER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ybpgm_ExecutorRun</name><parameter_list>(<parameter><decl><type><name>QueryDesc</name> <modifier>*</modifier></type><name>queryDesc</name></decl></parameter>, <parameter><decl><type><name>ScanDirection</name></type> <name>direction</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>count</name></decl></parameter>,
                 <parameter><decl><type><name>bool</name></type> <name>execute_once</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>IncStatementNestingLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>prev_ExecutorRun</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>prev_ExecutorRun</name><argument_list>(<argument><expr><name>queryDesc</name></expr></argument>, <argument><expr><name>direction</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>execute_once</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>standard_ExecutorRun</name><argument_list>(<argument><expr><name>queryDesc</name></expr></argument>, <argument><expr><name>direction</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>execute_once</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><call><name>DecStatementNestingLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>
  <expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <block>{<block_content>
    <expr_stmt><expr><call><name>DecStatementNestingLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>
  <expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ybpgm_ExecutorFinish</name><parameter_list>(<parameter><decl><type><name>QueryDesc</name> <modifier>*</modifier></type><name>queryDesc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>IncStatementNestingLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>prev_ExecutorFinish</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>prev_ExecutorFinish</name><argument_list>(<argument><expr><name>queryDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>standard_ExecutorFinish</name><argument_list>(<argument><expr><name>queryDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><call><name>DecStatementNestingLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>
  <expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <block>{<block_content>
    <expr_stmt><expr><call><name>DecStatementNestingLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>
  <expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ybpgm_ExecutorEnd</name><parameter_list>(<parameter><decl><type><name>QueryDesc</name> <modifier>*</modifier></type><name>queryDesc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>statementType</name></type> <name>type</name></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name><name>queryDesc</name><operator>-&gt;</operator><name>operation</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>CMD_SELECT</name></expr>:</case>
      <expr_stmt><expr><name>type</name> <operator>=</operator> <name>Select</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>CMD_INSERT</name></expr>:</case>
      <expr_stmt><expr><name>type</name> <operator>=</operator> <name>Insert</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>CMD_DELETE</name></expr>:</case>
      <expr_stmt><expr><name>type</name> <operator>=</operator> <name>Delete</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>CMD_UPDATE</name></expr>:</case>
      <expr_stmt><expr><name>type</name> <operator>=</operator> <name>Update</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><name>type</name> <operator>=</operator> <name>Other</name></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>

  <expr_stmt><expr><name>is_statement_executed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <comment type="block">/* Collecting metric.
   * - Only processing metric for top level statement in top level portal.
   *   For example, CURSOR execution can have many nested portal and nested statement. The metric
   *   for all of the nested items are not processed.
   * - However, it's difficult to know the starting and ending point of a statement, we check for
   *   not null "queryDesc-&gt;totaltime".
   * - The design for this metric module for using global state variables is very flawed, so we
   *   use this not-null check for now.
   */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>isTopLevelStatement</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>queryDesc</name><operator>-&gt;</operator><name>totaltime</name></name></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>InstrEndLoop</name><argument_list>(<argument><expr><name><name>queryDesc</name><operator>-&gt;</operator><name>totaltime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>time</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <operator>(</operator><name><name>queryDesc</name><operator>-&gt;</operator><name>totaltime</name><operator>-&gt;</operator><name>total</name></name> <operator>*</operator> <literal type="number">1000000.0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint64</name></type> <name>rows_count</name> <init>= <expr><name><name>queryDesc</name><operator>-&gt;</operator><name>estate</name><operator>-&gt;</operator><name>es_processed</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ybpgm_Store</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><name>rows_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>queryDesc</name><operator>-&gt;</operator><name>estate</name><operator>-&gt;</operator><name>yb_es_is_single_row_modify_txn</name></name></expr>)</condition> 
  <block>{<block_content>
    <expr_stmt><expr><call><name>ybpgm_Store</name><argument_list>(<argument><expr><name>Single_Shard_Transaction</name></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><name>rows_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ybpgm_Store</name><argument_list>(<argument><expr><name>SingleShardTransaction</name></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><name>rows_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_inside_transaction_block</name></expr>)</condition><block type="pseudo"><block_content>
  <expr_stmt><expr><call><name>ybpgm_Store</name><argument_list>(<argument><expr><name>Transaction</name></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><name>rows_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name><name>queryDesc</name><operator>-&gt;</operator><name>planstate</name></name></expr></argument>, <argument><expr><name>AggState</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
      <call><name>castNode</name><argument_list>(<argument><expr><name>AggState</name></expr></argument>, <argument><expr><name><name>queryDesc</name><operator>-&gt;</operator><name>planstate</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>yb_pushdown_supported</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>ybpgm_Store</name><argument_list>(<argument><expr><name>AggregatePushdown</name></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><name>rows_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>long</name></type> <name>current_cache_misses</name> <init>= <expr><call><name>GetCatCacheMisses</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Currently we set the time parameter to 0 as we don't have metrics
   * for that available
   * TODO: Get timing metrics for catalog cache misses
   */</comment>
  <expr_stmt><expr><call><name>ybpgm_StoreCount</name><argument_list>(<argument><expr><name>CatCacheMisses</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>current_cache_misses</name> <operator>-</operator> <name>last_cache_misses_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>last_cache_misses_val</name> <operator>=</operator> <name>current_cache_misses</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>IncStatementNestingLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>prev_ExecutorEnd</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>prev_ExecutorEnd</name><argument_list>(<argument><expr><name>queryDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>standard_ExecutorEnd</name><argument_list>(<argument><expr><name>queryDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><call><name>DecStatementNestingLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>
  <expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <block>{<block_content>
    <expr_stmt><expr><call><name>DecStatementNestingLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>
  <expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Estimate shared memory space needed.
 */</comment>
<function><type><specifier>static</specifier> <name>Size</name></type>
<name>ybpgm_memsize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>Size</name></type>		<name>size</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><name>num_entries</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>ybpgmEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Get the statement type for a transactional statement.
 */</comment>
<function><type><specifier>static</specifier> <name>statementType</name></type> <name>ybpgm_getStatementType</name><parameter_list>(<parameter><decl><type><name>TransactionStmt</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>statementType</name></type> <name>type</name> <init>= <expr><name>Other</name></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>kind</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TRANS_STMT_BEGIN</name></expr>:</case>
    <case>case <expr><name>TRANS_STMT_START</name></expr>:</case>
      <expr_stmt><expr><name>type</name> <operator>=</operator> <name>Begin</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TRANS_STMT_COMMIT</name></expr>:</case>
    <case>case <expr><name>TRANS_STMT_COMMIT_PREPARED</name></expr>:</case>
      <expr_stmt><expr><name>type</name> <operator>=</operator> <name>Commit</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TRANS_STMT_ROLLBACK</name></expr>:</case>
    <case>case <expr><name>TRANS_STMT_ROLLBACK_TO</name></expr>:</case>
    <case>case <expr><name>TRANS_STMT_ROLLBACK_PREPARED</name></expr>:</case>
      <expr_stmt><expr><name>type</name> <operator>=</operator> <name>Rollback</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TRANS_STMT_SAVEPOINT</name></expr>:</case>
    <case>case <expr><name>TRANS_STMT_RELEASE</name></expr>:</case>
    <case>case <expr><name>TRANS_STMT_PREPARE</name></expr>:</case>
      <expr_stmt><expr><name>type</name> <operator>=</operator> <name>Other</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized statement kind: %d"</literal></expr></argument>, <argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>kind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>
  <return>return <expr><name>type</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Hook used for tracking "Other" statements.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ybpgm_ProcessUtility</name><parameter_list>(<parameter><decl><type><name>PlannedStmt</name> <modifier>*</modifier></type><name>pstmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>queryString</name></decl></parameter>,
                     <parameter><decl><type><name>ProcessUtilityContext</name></type> <name>context</name></decl></parameter>,
                     <parameter><decl><type><name>ParamListInfo</name></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>QueryEnvironment</name> <modifier>*</modifier></type><name>queryEnv</name></decl></parameter>,
                     <parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>completionTag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>isTopLevelBlock</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name><name>pstmt</name><operator>-&gt;</operator><name>utilityStmt</name></name></expr></argument>, <argument><expr><name>ExecuteStmt</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
      <operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name><name>pstmt</name><operator>-&gt;</operator><name>utilityStmt</name></name></expr></argument>, <argument><expr><name>PrepareStmt</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name><name>pstmt</name><operator>-&gt;</operator><name>utilityStmt</name></name></expr></argument>, <argument><expr><name>DeallocateStmt</name></expr></argument>)</argument_list></call></expr>)</condition>
  <block>{<block_content>
    <decl_stmt><decl><type><name>instr_time</name></type> <name>start</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>instr_time</name></type> <name>end</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>statementType</name></type> <name>type</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name><name>pstmt</name><operator>-&gt;</operator><name>utilityStmt</name></name></expr></argument>, <argument><expr><name>TransactionStmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>TransactionStmt</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><operator>(</operator><name>TransactionStmt</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pstmt</name><operator>-&gt;</operator><name>utilityStmt</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>ybpgm_getStatementType</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>type</name> <operator>=</operator> <name>Other</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>INSTR_TIME_SET_CURRENT</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>IncBlockNestingLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>prev_ProcessUtility</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>prev_ProcessUtility</name><argument_list>(<argument><expr><name>pstmt</name></expr></argument>, <argument><expr><name>queryString</name></expr></argument>,
                            <argument><expr><name>context</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>queryEnv</name></expr></argument>,
                            <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>completionTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>standard_ProcessUtility</name><argument_list>(<argument><expr><name>pstmt</name></expr></argument>, <argument><expr><name>queryString</name></expr></argument>,
                                <argument><expr><name>context</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>queryEnv</name></expr></argument>,
                                <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>completionTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
      <expr_stmt><expr><call><name>DecBlockNestingLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
      <expr_stmt><expr><call><name>DecBlockNestingLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>INSTR_TIME_SET_CURRENT</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>INSTR_TIME_SUBTRACT</name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>is_catalog_version_increment</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>is_breaking_catalog_change</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IsTransactionalDdlStatement</name><argument_list>(<argument><expr><name>pstmt</name></expr></argument>,
                                    <argument><expr><operator>&amp;</operator><name>is_catalog_version_increment</name></expr></argument>,
                                    <argument><expr><operator>&amp;</operator><name>is_breaking_catalog_change</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>ybpgm_Store</name><argument_list>(<argument><expr><name>Transaction</name></expr></argument>, <argument><expr><call><name>INSTR_TIME_GET_MICROSEC</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>Other</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>is_statement_executed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>Begin</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_inside_transaction_block</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>is_inside_transaction_block</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>is_statement_executed</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>Rollback</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>is_inside_transaction_block</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>is_statement_executed</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/*
     * TODO: Once savepoint and rollback to specific transaction are supported,
     * transaction block counter needs to be revisited.
     * Current logic is to increment non-empty transaction block by 1
     * if non-DDL statement types executed prior to committing.
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>Commit</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>completionTag</name></expr></argument>, <argument><expr><literal type="string">"ROLLBACK"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
          <name>is_inside_transaction_block</name> <operator>&amp;&amp;</operator>
          <name>is_statement_executed</name></expr>)</condition>
      <block>{<block_content>
        <expr_stmt><expr><call><name>ybpgm_Store</name><argument_list>(<argument><expr><name>Transaction</name></expr></argument>, <argument><expr><call><name>INSTR_TIME_GET_MICROSEC</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>is_inside_transaction_block</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>is_statement_executed</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>ybpgm_Store</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><call><name>INSTR_TIME_GET_MICROSEC</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> <comment type="block">/* rows */</comment>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
  <else>else
  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>prev_ProcessUtility</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>prev_ProcessUtility</name><argument_list>(<argument><expr><name>pstmt</name></expr></argument>, <argument><expr><name>queryString</name></expr></argument>,
                          <argument><expr><name>context</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>queryEnv</name></expr></argument>,
                          <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>completionTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>standard_ProcessUtility</name><argument_list>(<argument><expr><name>pstmt</name></expr></argument>, <argument><expr><name>queryString</name></expr></argument>,
                              <argument><expr><name>context</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>queryEnv</name></expr></argument>,
                              <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>completionTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ybpgm_Store</name><parameter_list>(<parameter><decl><type><name>statementType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>rows</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>ybpgmEntry</name></name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>&amp;</operator><name><name>ybpgm_table</name><index>[<expr><name>type</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>total_time</name></name> <operator>+=</operator> <name>time</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>calls</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>rows</name></name> <operator>+=</operator> <name>rows</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ybpgm_StoreCount</name><parameter_list>(<parameter><decl><type><name>statementType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>ybpgmEntry</name></name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>&amp;</operator><name><name>ybpgm_table</name><index>[<expr><name>type</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>total_time</name></name> <operator>+=</operator> <name>time</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>calls</name></name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>rows</name></name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
