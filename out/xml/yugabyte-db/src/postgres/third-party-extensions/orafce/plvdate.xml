<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/third-party-extensions/orafce/plvdate.c"><comment type="block">/*
  This code implements one part of functonality of
  free available library PL/Vision. Please look www.quest.com

  This library isn't optimalized for big numbers, for working
  with n days (n &gt; 10000), can be slow (on my P4 31ms).

  Original author: Steven Feuerstein, 1996 - 2002
  PostgreSQL implementation author: Pavel Stehule, 2006-2018

  This module is under BSD Licence
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLVDATE_VERSION</name></cpp:macro>  <cpp:value>"PostgreSQL PLVdate, version 3.7, October 2018"</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/date.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"orafce.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"builtins.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>plvdate_add_bizdays</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>plvdate_nearest_bizday</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>plvdate_next_bizday</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>plvdate_bizdays_between</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>plvdate_prev_bizday</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>plvdate_isbizday</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>plvdate_set_nonbizday_dow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>plvdate_unset_nonbizday_dow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>plvdate_set_nonbizday_day</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>plvdate_unset_nonbizday_day</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>plvdate_use_easter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>plvdate_using_easter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>plvdate_use_great_friday</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>plvdate_using_great_friday</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>plvdate_include_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>plvdate_including_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>plvdate_default_holidays</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>plvdate_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>plvdate_days_inmonth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>plvdate_isleapyear</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_SEQ_SEARCH</name><parameter_list>(<parameter><type><name>_l</name></type></parameter>, <parameter><type><name>_s</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>do { \
     if ((_l) &lt; 0) {                                                 \
               ereport(ERROR,                                        \
                     (errcode(ERRCODE_INVALID_DATETIME_FORMAT),      \
                      errmsg("invalid value for %s", (_s))));        \
              }                                                      \
} while (0)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUNDAY</name></cpp:macro>     <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SATURDAY</name></cpp:macro>   <cpp:value>(1 &lt;&lt; 6)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name>nonbizdays</name> <init>= <expr><name>SUNDAY</name> <operator>|</operator> <name>SATURDAY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>use_easter</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>use_great_friday</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>include_start</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>country_id</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>			<comment type="block">/* unknown */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_holidays</name></cpp:macro>   <cpp:value>30</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_EXCEPTIONS</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>char</name></type> <name>day</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>month</name></decl>;</decl_stmt>
}</block></struct></type> <name>holiday_desc</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>nonbizdays</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>use_easter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>use_great_friday</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>holiday_desc</name> <modifier>*</modifier></type><name>holidays</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>holidays_c</name></decl>;</decl_stmt>
}</block></struct></type> <name>cultural_info</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>holiday_desc</name></type> <name><name>holidays</name><index>[<expr><name>MAX_holidays</name></expr>]</index></name></decl>;</decl_stmt>  <comment type="block">/* sorted array */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>DateADT</name></type> <name><name>exceptions</name><index>[<expr><name>MAX_EXCEPTIONS</name></expr>]</index></name></decl>;</decl_stmt>   <comment type="block">/* sorted array */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>holidays_c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>exceptions_c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>holiday_desc</name></type> <name><name>czech_holidays</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>, <comment type="line">// Novy rok</comment>
	<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">5</literal></expr>}</block></expr>, <comment type="line">// Svatek prace</comment>
	<expr><block>{<expr><literal type="number">8</literal></expr>,<expr><literal type="number">5</literal></expr>}</block></expr>, <comment type="line">// Den osvobozeni</comment>
	<expr><block>{<expr><literal type="number">5</literal></expr>,<expr><literal type="number">7</literal></expr>}</block></expr>, <comment type="line">// Den slovanskych verozvestu</comment>
	<expr><block>{<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>}</block></expr>, <comment type="line">// Den upaleni mistra Jana Husa</comment>
	<expr><block>{<expr><literal type="number">28</literal></expr>,<expr><literal type="number">9</literal></expr>}</block></expr>, <comment type="line">// Den ceske statnosti</comment>
	<expr><block>{<expr><literal type="number">28</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>, <comment type="line">// Den vzniku samostatneho ceskoslovenskeho statu</comment>
	<expr><block>{<expr><literal type="number">17</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>, <comment type="line">// Den boje za svobodu a demokracii</comment>
	<expr><block>{<expr><literal type="number">24</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>, <comment type="line">// Stedry den</comment>
	<expr><block>{<expr><literal type="number">25</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>, <comment type="line">// 1. svatek vanocni</comment>
	<expr><block>{<expr><literal type="number">26</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>  <comment type="line">// 2. svatek vanocni</comment>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>holiday_desc</name></type> <name><name>germany_holidays</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">5</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">25</literal></expr>,<expr><literal type="number">5</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">4</literal></expr>,<expr><literal type="number">6</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="number">15</literal></expr>,<expr><literal type="number">8</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">3</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">25</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">26</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>holiday_desc</name></type> <name><name>poland_holidays</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">5</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">3</literal></expr>,<expr><literal type="number">5</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">15</literal></expr>,<expr><literal type="number">6</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">15</literal></expr>,<expr><literal type="number">8</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">11</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">25</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">26</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>holiday_desc</name></type> <name><name>austria_holidays</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">6</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">5</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">25</literal></expr>,<expr><literal type="number">5</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">4</literal></expr>,<expr><literal type="number">6</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">15</literal></expr>,<expr><literal type="number">6</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">15</literal></expr>,<expr><literal type="number">8</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">26</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="number">8</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">25</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">26</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>holiday_desc</name></type> <name><name>slovakia_holidays</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">6</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">5</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">8</literal></expr>,<expr><literal type="number">5</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">5</literal></expr>,<expr><literal type="number">7</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="number">29</literal></expr>,<expr><literal type="number">8</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">9</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">15</literal></expr>,<expr><literal type="number">9</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">17</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="number">24</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">25</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">26</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>holiday_desc</name></type> <name><name>russian_holidays</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">3</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">4</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">5</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="number">7</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">23</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">8</literal></expr>,<expr><literal type="number">3</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">5</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">9</literal></expr>,<expr><literal type="number">5</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="number">12</literal></expr>,<expr><literal type="number">6</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">4</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>holiday_desc</name></type> <name><name>england_holidays</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">5</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">29</literal></expr>,<expr><literal type="number">5</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">28</literal></expr>,<expr><literal type="number">8</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="number">25</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">26</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>holiday_desc</name></type> <name><name>usa_holidays</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">16</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">20</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">29</literal></expr>,<expr><literal type="number">5</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">4</literal></expr>,<expr><literal type="number">7</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="number">4</literal></expr>,<expr><literal type="number">9</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">9</literal></expr>,<expr><literal type="number">10</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">11</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">23</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">25</literal></expr>,<expr><literal type="number">12</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cultural_info</name></type> <name><name>defaults_ci</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>SUNDAY</name> <operator>|</operator> <name>SATURDAY</name></expr>, <expr><name>true</name></expr>, <expr><name>true</name></expr>, <expr><name>czech_holidays</name></expr>, <expr><literal type="number">11</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>SUNDAY</name> <operator>|</operator> <name>SATURDAY</name></expr>, <expr><name>true</name></expr>, <expr><name>true</name></expr>, <expr><name>germany_holidays</name></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>SUNDAY</name> <operator>|</operator> <name>SATURDAY</name></expr>, <expr><name>true</name></expr>, <expr><name>false</name></expr>, <expr><name>poland_holidays</name></expr>, <expr><literal type="number">9</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>SUNDAY</name> <operator>|</operator> <name>SATURDAY</name></expr>, <expr><name>true</name></expr>, <expr><name>false</name></expr>, <expr><name>austria_holidays</name></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>SUNDAY</name> <operator>|</operator> <name>SATURDAY</name></expr>, <expr><name>true</name></expr>, <expr><name>true</name></expr>, <expr><name>slovakia_holidays</name></expr>, <expr><literal type="number">13</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>SUNDAY</name> <operator>|</operator> <name>SATURDAY</name></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr>, <expr><name>russian_holidays</name></expr>, <expr><literal type="number">12</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>SUNDAY</name> <operator>|</operator> <name>SATURDAY</name></expr>, <expr><name>true</name></expr>, <expr><name>true</name></expr>, <expr><name>england_holidays</name></expr>, <expr><literal type="number">7</literal></expr>}</block></expr>,
	<expr><block>{<expr><name>SUNDAY</name> <operator>|</operator> <name>SATURDAY</name></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr>, <expr><name>usa_holidays</name></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>STRING_PTR_FIELD_TYPE</name></type> <name><name>states</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="string">"Czech"</literal></expr>, <expr><literal type="string">"Germany"</literal></expr>, <expr><literal type="string">"Poland"</literal></expr>,
	<expr><literal type="string">"Austria"</literal></expr>, <expr><literal type="string">"Slovakia"</literal></expr>, <expr><literal type="string">"Russia"</literal></expr>,
	<expr><literal type="string">"Gb"</literal></expr>, <expr><literal type="string">"Usa"</literal></expr>,
	<expr><name>NULL</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dateadt_comp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DateADT</name> <modifier>*</modifier></type><name>_a</name> <init>= <expr><operator>(</operator><name>DateADT</name><operator>*</operator><operator>)</operator><name>a</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DateADT</name> <modifier>*</modifier></type><name>_b</name> <init>= <expr><operator>(</operator><name>DateADT</name><operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><operator>*</operator><name>_a</name> <operator>-</operator> <operator>*</operator><name>_b</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>holiday_desc_comp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <operator>(</operator><name>result</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>holiday_desc</name><operator>*</operator><operator>)</operator><name>a</name><operator>)</operator><operator>-&gt;</operator><name>month</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>holiday_desc</name><operator>*</operator><operator>)</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name>month</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>holiday_desc</name><operator>*</operator><operator>)</operator><name>a</name><operator>)</operator><operator>-&gt;</operator><name>day</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>holiday_desc</name><operator>*</operator><operator>)</operator><name>b</name><operator>)</operator><operator>-&gt;</operator><name>day</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>calc_easter_sunday</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>year</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>dd</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>mm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>year</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1900</literal> <operator>||</operator> <name>year</name></expr></argument> &gt;</argument_list></name> <literal type="number">2099</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATETIME_VALUE_OUT_OF_RANGE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"date is out of range"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Easter is defined only for years between 1900 and 2099"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">255</literal> <operator>-</operator> <literal type="number">11</literal> <operator>*</operator> <operator>(</operator><name>year</name> <operator>%</operator> <literal type="number">19</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>b</name> <operator>-</operator> <literal type="number">21</literal><operator>)</operator> <operator>%</operator> <literal type="number">30</literal><operator>)</operator> <operator>+</operator> <literal type="number">21</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&gt;</operator> <literal type="number">38</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>e</name> <operator>=</operator> <operator>(</operator><name>year</name> <operator>+</operator> <name>year</name><operator>/</operator><literal type="number">4</literal> <operator>+</operator> <name>d</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">7</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>q</name> <operator>=</operator> <name>d</name> <operator>+</operator> <literal type="number">7</literal> <operator>-</operator> <name>e</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>q</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>dd</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>mm</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>dd</name> <operator>=</operator> <name>q</name> <operator>-</operator> <literal type="number">31</literal></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>mm</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * returns true, when day d is any easter holiday.
 *
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>easter_holidays</name><parameter_list>(<parameter><decl><type><name>DateADT</name></type> <name>day</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>use_great_friday</name> <operator>||</operator> <name>use_easter</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <literal type="number">3</literal> <operator>||</operator> <name>m</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>easter_sunday_day</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>easter_sunday_month</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>easter_sunday</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>calc_easter_sunday</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>easter_sunday_day</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>easter_sunday_month</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>easter_sunday</name> <operator>=</operator> <call><name>date2j</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>easter_sunday_month</name></expr></argument>, <argument><expr><name>easter_sunday_day</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>POSTGRES_EPOCH_JDATE</name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>use_easter</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>day</name> <operator>==</operator> <name>easter_sunday</name> <operator>||</operator> <name>day</name> <operator>==</operator> <name>easter_sunday</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>use_great_friday</name> <operator>&amp;&amp;</operator> <name>day</name> <operator>==</operator> <name>easter_sunday</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* Great Friday is introduced in Czech Republic in 2016 */</comment>
				<if_stmt><if>if <condition>(<expr><name>country_id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&gt;=</operator> <literal type="number">2016</literal></expr>)</condition><block type="pseudo"><block_content>
						<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
				</block_content>}</block></if>
				<else>else<block type="pseudo"><block_content>
					<return>return <expr><name>true</name></expr>;</return></block_content></block></else></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>DateADT</name></type>
<name>ora_add_bizdays</name><parameter_list>(<parameter><decl><type><name>DateADT</name></type> <name>day</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>days</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>, <decl><type ref="prev"/><name>dx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>auxd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>holiday_desc</name></type> <name>hd</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>j2day</name><argument_list>(<argument><expr><name>day</name><operator>+</operator><name>POSTGRES_EPOCH_JDATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>dx</name> <operator>=</operator> <ternary><condition><expr><name>days</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>days</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>d</name><operator>+</operator><name>dx</name><operator>)</operator> <operator>%</operator> <literal type="number">7</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>d</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>d</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">6</literal></expr></then><else>:<expr><name>d</name></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name>day</name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>d</name><operator>)</operator> <operator>&amp;</operator> <name>nonbizdays</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <call><name>bsearch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>day</name></expr></argument>, <argument><expr><name>exceptions</name></expr></argument>, <argument><expr><name>exceptions_c</name></expr></argument>,
							<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DateADT</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>dateadt_comp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>j2date</name><argument_list>(<argument><expr><name>day</name> <operator>+</operator> <name>POSTGRES_EPOCH_JDATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>auxd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>hd</name><operator>.</operator><name>day</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>auxd</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>hd</name><operator>.</operator><name>month</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>m</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>easter_holidays</name><argument_list>(<argument><expr><name>day</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <call><name>bsearch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hd</name></expr></argument>, <argument><expr><name>holidays</name></expr></argument>, <argument><expr><name>holidays_c</name></expr></argument>,
							<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>holiday_desc</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>holiday_desc_comp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>days</name> <operator>-=</operator> <name>dx</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>day</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>ora_diff_bizdays</name><parameter_list>(<parameter><decl><type><name>DateADT</name></type> <name>day1</name></decl></parameter>, <parameter><decl><type><name>DateADT</name></type> <name>day2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>, <decl><type ref="prev"/><name>days</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>auxd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>holiday_desc</name></type> <name>hd</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>loops</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>start_is_bizday</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>DateADT</name></type> <name>aux_day</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>day1</name> <operator>&gt;</operator> <name>day2</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>aux_day</name> <operator>=</operator> <name>day1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>day1</name> <operator>=</operator> <name>day2</name></expr>;</expr_stmt> <expr_stmt><expr><name>day2</name> <operator>=</operator> <name>aux_day</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* d is incremented on start of cycle, so now I have to decrease one */</comment>
	<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>j2day</name><argument_list>(<argument><expr><name>day1</name><operator>+</operator><name>POSTGRES_EPOCH_JDATE</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>days</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>day1</name> <operator>&lt;=</operator> <name>day2</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>loops</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>day1</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>d</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">7</literal></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>d</name><operator>)</operator> <operator>&amp;</operator> <name>nonbizdays</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <call><name>bsearch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>day1</name></expr></argument>, <argument><expr><name>exceptions</name></expr></argument>, <argument><expr><name>exceptions_c</name></expr></argument>,
							<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DateADT</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>dateadt_comp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>j2date</name><argument_list>(<argument><expr><name>day1</name> <operator>+</operator> <name>POSTGRES_EPOCH_JDATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>auxd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>hd</name><operator>.</operator><name>day</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>auxd</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>hd</name><operator>.</operator><name>month</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>m</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>easter_holidays</name><argument_list>(<argument><expr><name>day1</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <call><name>bsearch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hd</name></expr></argument>, <argument><expr><name>holidays</name></expr></argument>, <argument><expr><name>holidays_c</name></expr></argument>,
							<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>holiday_desc</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>holiday_desc_comp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/* now the day have to be bizday, remember if first day was bizday */</comment>
		<if_stmt><if>if <condition>(<expr><name>loops</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>start_is_bizday</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>days</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/*
	 * decrease result when first day was bizday, but we don't want
	 * calculate first day.
	 */</comment>
	<if_stmt><if>if <condition>( <expr><name>start_is_bizday</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>include_start</name> <operator>&amp;&amp;</operator> <name>days</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>days</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>days</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/****************************************************************
 * PLVdate.add_bizdays
 *
 * Syntax:
 *   FUNCTION add_bizdays(IN dt DATE, IN days int) RETURNS DATE;
 *
 * Purpouse:
 *   Get the date created by adding &lt;n&gt; business days to a date
 *
 ****************************************************************/</comment>


<function><type><name>Datum</name></type>
<name>plvdate_add_bizdays</name> <parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DateADT</name></type> <name>day</name> <init>= <expr><call><name>PG_GETARG_DATEADT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>days</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_DATEADT</name><argument_list>(<argument><expr><call><name>ora_add_bizdays</name><argument_list>(<argument><expr><name>day</name></expr></argument>,<argument><expr><name>days</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" format="doxygen">/****************************************************************
 * PLVdate.nearest_bizday
 *
 * Syntax:
 *   FUNCTION nearest_bizday(IN dt DATE) RETURNS DATE;
 *
 * Purpouse:
 *   Get the nearest business date to a given date, user defined
 *
 ****************************************************************/</comment>

<function><type><name>Datum</name></type>
<name>plvdate_nearest_bizday</name> <parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DateADT</name></type> <name>dt</name> <init>= <expr><call><name>PG_GETARG_DATEADT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DateADT</name></type> <name>d1</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>d1</name> <operator>=</operator> <call><name>ora_add_bizdays</name><argument_list>(<argument><expr><name>dt</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>d2</name> <operator>=</operator> <call><name>ora_add_bizdays</name><argument_list>(<argument><expr><name>dt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>dt</name> <operator>-</operator> <name>d1</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>d2</name> <operator>-</operator> <name>dt</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <name>d2</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <name>d1</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_DATEADT</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" format="doxygen">/****************************************************************
 * PLVdate.next_bizday
 *
 * Syntax:
 *   FUNCTION next_bizday(IN dt DATE) RETURNS DATE;
 *
 * Purpouse:
 *   Get the next business date from a given date, user defined
 *
 ****************************************************************/</comment>

<function><type><name>Datum</name></type>
<name>plvdate_next_bizday</name> <parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DateADT</name></type> <name>day</name> <init>= <expr><call><name>PG_GETARG_DATEADT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_DATEADT</name><argument_list>(<argument><expr><call><name>ora_add_bizdays</name><argument_list>(<argument><expr><name>day</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" format="doxygen">/****************************************************************
 * PLVdate.bizdays_between
 *
 * Syntax:
 *   FUNCTION bizdays_between(IN dt1 DATE, IN dt2 DATE)
 *     RETURNS int;
 *
 * Purpouse:
 *   Get the number of business days between two dates
 *
 ****************************************************************/</comment>

<function><type><name>Datum</name></type>
<name>plvdate_bizdays_between</name> <parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DateADT</name></type> <name>day1</name> <init>= <expr><call><name>PG_GETARG_DATEADT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DateADT</name></type> <name>day2</name> <init>= <expr><call><name>PG_GETARG_DATEADT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><call><name>ora_diff_bizdays</name><argument_list>(<argument><expr><name>day1</name></expr></argument>,<argument><expr><name>day2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" format="doxygen">/****************************************************************
 * PLVdate.prev_bizday
 *
 * Syntax:
 *   FUNCTION prev_bizday(IN dt DATE) RETURNS date;
 *
 * Purpouse:
 *   Get the previous business date from a given date, user
 * defined
 *
 ****************************************************************/</comment>

<function><type><name>Datum</name></type>
<name>plvdate_prev_bizday</name> <parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DateADT</name></type> <name>day</name> <init>= <expr><call><name>PG_GETARG_DATEADT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_DATEADT</name><argument_list>(<argument><expr><call><name>ora_add_bizdays</name><argument_list>(<argument><expr><name>day</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" format="doxygen">/****************************************************************
 * PLVdate.isbizday
 *
 * Syntax:
 *   FUNCTION isbizday(IN dt DATE) RETURNS bool;
 *
 * Purpouse:
 *   Call this function to determine if a date is a business day
 *
 ****************************************************************/</comment>

<function><type><name>Datum</name></type>
<name>plvdate_isbizday</name> <parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DateADT</name></type> <name>day</name> <init>= <expr><call><name>PG_GETARG_DATEADT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>holiday_desc</name></type> <name>hd</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <call><name>j2day</name><argument_list>(<argument><expr><name>day</name><operator>+</operator><name>POSTGRES_EPOCH_JDATE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;</operator> <name>nonbizdays</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <call><name>bsearch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>day</name></expr></argument>, <argument><expr><name>exceptions</name></expr></argument>, <argument><expr><name>exceptions_c</name></expr></argument>,
						<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DateADT</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>dateadt_comp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>j2date</name><argument_list>(<argument><expr><name>day</name> <operator>+</operator> <name>POSTGRES_EPOCH_JDATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hd</name><operator>.</operator><name>month</name></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>hd</name><operator>.</operator><name>day</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>easter_holidays</name><argument_list>(<argument><expr><name>day</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name> <argument_list>(<argument><expr><name>NULL</name> <operator>==</operator> <call><name>bsearch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hd</name></expr></argument>, <argument><expr><name>holidays</name></expr></argument>, <argument><expr><name>holidays_c</name></expr></argument>,
									<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>holiday_desc</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>holiday_desc_comp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" format="doxygen">/****************************************************************
 * PLVdate.set_nonbizday
 *
 * Syntax:
 *   FUNCTION set_nonbizday(IN dow VARCHAR) RETURNS void;
 *
 * Purpouse:
 *   Set day of week as non bussines day
 *
 ****************************************************************/</comment>

<function><type><name>Datum</name></type>
<name>plvdate_set_nonbizday_dow</name> <parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>check</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>day_txt</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><call><name>ora_seq_search</name><argument_list>(<argument><expr><call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>day_txt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ora_days</name></expr></argument>, <argument><expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>day_txt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>CHECK_SEQ_SEARCH</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"DAY/Day/day"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>check</name> <operator>=</operator> <name>nonbizdays</name> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>d</name><operator>)</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>check</name> <operator>==</operator> <literal type="number">0x7f</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATA_EXCEPTION</name></expr></argument>)</argument_list></call><operator>,</operator>
			     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"nonbizday registeration error"</literal></expr></argument>)</argument_list></call><operator>,</operator>
			     <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Constraint violation."</literal></expr></argument>)</argument_list></call><operator>,</operator>
			     <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"One day in week have to be bizday."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>nonbizdays</name> <operator>=</operator> <name>nonbizdays</name> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>d</name><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/****************************************************************
 * PLVdate.unset_nonbizday
 *
 * Syntax:
 *   FUNCTION unset_nonbizday(IN dow VARCHAR) RETURNS void;
 *
 * Purpouse:
 *   Unset day of week as non bussines day
 *
 ****************************************************************/</comment>

<function><type><name>Datum</name></type>
<name>plvdate_unset_nonbizday_dow</name> <parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>day_txt</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><call><name>ora_seq_search</name><argument_list>(<argument><expr><call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>day_txt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ora_days</name></expr></argument>, <argument><expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>day_txt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>CHECK_SEQ_SEARCH</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="string">"DAY/Day/day"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>nonbizdays</name> <operator>=</operator> <operator>(</operator><name>nonbizdays</name> <operator>|</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>d</name><operator>)</operator><operator>)</operator> <operator>^</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>d</name><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/****************************************************************
 * PLVdate.set_nonbizday
 *
 * Syntax:
 *   FUNCTION set_nonbizday(IN day DATE) RETURNS void;
 *   FUNCTION set_nonbizday(IN day DATE, IN repeat := false BOOL) RETURNS void;
 *
 * Purpouse:
 *   Set day as non bussines day, second arg specify year's
 * periodicity
 *
 ****************************************************************/</comment>

<function><type><name>Datum</name></type>
<name>plvdate_set_nonbizday_day</name> <parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DateADT</name></type> <name>arg1</name> <init>= <expr><call><name>PG_GETARG_DATEADT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>arg2</name> <init>= <expr><call><name>PG_GETARG_BOOL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>holiday_desc</name></type> <name>hd</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>arg2</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>holidays_c</name> <operator>==</operator> <name>MAX_holidays</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROGRAM_LIMIT_EXCEEDED</name></expr></argument>)</argument_list></call><operator>,</operator>
				     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"nonbizday registeration error"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				     <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Too much registered nonbizdays."</literal></expr></argument>)</argument_list></call><operator>,</operator>
				     <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Increase MAX_holidays in 'plvdate.c'."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>j2date</name><argument_list>(<argument><expr><name>arg1</name> <operator>+</operator> <name>POSTGRES_EPOCH_JDATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>hd</name><operator>.</operator><name>month</name></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>hd</name><operator>.</operator><name>day</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <call><name>bsearch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hd</name></expr></argument>, <argument><expr><name>holidays</name></expr></argument>, <argument><expr><name>holidays_c</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>holiday_desc</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>holiday_desc_comp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DUPLICATE_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
				     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"nonbizday registeration error"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				     <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Date is registered."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>holidays</name><index>[<expr><name>holidays_c</name></expr>]</index></name><operator>.</operator><name>month</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>holidays</name><index>[<expr><name>holidays_c</name></expr>]</index></name><operator>.</operator><name>day</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>holidays_c</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>holidays</name></expr></argument>, <argument><expr><name>holidays_c</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>holiday_desc</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>holiday_desc_comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>exceptions_c</name> <operator>==</operator> <name>MAX_EXCEPTIONS</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROGRAM_LIMIT_EXCEEDED</name></expr></argument>)</argument_list></call><operator>,</operator>
				     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"nonbizday registeration error"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				     <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Too much registered nonrepeated nonbizdays."</literal></expr></argument>)</argument_list></call><operator>,</operator>
				     <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Increase MAX_EXCEPTIONS in 'plvdate.c'."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <call><name>bsearch</name><argument_list>(<argument><expr><operator>&amp;</operator><name>arg1</name></expr></argument>, <argument><expr><name>exceptions</name></expr></argument>, <argument><expr><name>exceptions_c</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DateADT</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>dateadt_comp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DUPLICATE_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
				     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"nonbizday registeration error"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				     <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Date is registered."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>exceptions</name><index>[<expr><name>exceptions_c</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>arg1</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>exceptions</name></expr></argument>, <argument><expr><name>exceptions_c</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DateADT</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>dateadt_comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/****************************************************************
 * PLVdate.unset_nonbizday
 *
 * Syntax:
 *   FUNCTION unset_nonbizday(IN day DATE) RETURNS void;
 *   FUNCTION unset_nonbizday(IN day DATE, IN repeat := false BOOL) RETURNS void;
 *
 * Purpouse:
 *   Unset day as non bussines day, second arg specify year's
 * periodicity
 *
 ****************************************************************/</comment>

<function><type><name>Datum</name></type>
<name>plvdate_unset_nonbizday_day</name> <parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DateADT</name></type> <name>arg1</name> <init>= <expr><call><name>PG_GETARG_DATEADT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>arg2</name> <init>= <expr><call><name>PG_GETARG_BOOL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>arg2</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>j2date</name><argument_list>(<argument><expr><name>arg1</name> <operator>+</operator> <name>POSTGRES_EPOCH_JDATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>holidays_c</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name> <operator>&amp;&amp;</operator> <name><name>holidays</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>month</name> <operator>==</operator> <name>m</name> <operator>&amp;&amp;</operator> <name><name>holidays</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>day</name> <operator>==</operator> <name>d</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name>found</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>holidays</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>month</name> <operator>=</operator> <name><name>holidays</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>month</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>holidays</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>day</name> <operator>=</operator> <name><name>holidays</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>day</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>holidays_c</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>exceptions_c</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name> <operator>&amp;&amp;</operator> <name><name>exceptions</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>arg1</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>exceptions</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>exceptions</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
		<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>exceptions_c</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			    <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call><operator>,</operator>
			     <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"nonbizday unregisteration error"</literal></expr></argument>)</argument_list></call><operator>,</operator>
			     <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Nonbizday not found."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" format="doxygen">/****************************************************************
 * PLVdate.use_easter
 *
 * Syntax:
 *   FUNCTION unuse_easter() RETURNS void;
 *   FUNCTION use_easter() RETURNS void;
 *   FUNCTION use_easter(IN bool) RETURNS void
 *
 * Purpouse:
 *   Have to use easter as nonbizday?
 *
 ****************************************************************/</comment>

<function><type><name>Datum</name></type>
<name>plvdate_use_easter</name> <parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>use_easter</name> <operator>=</operator> <call><name>PG_GETARG_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" format="doxygen">/****************************************************************
 * PLVdate.using_easter
 *
 * Syntax:
 *   FUNCTION using_easter() RETURNS bool
 *
 * Purpouse:
 *   Use it easter as nonbizday?
 *
 ****************************************************************/</comment>

<function><type><name>Datum</name></type>
<name>plvdate_using_easter</name> <parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>use_easter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" format="doxygen">/****************************************************************
 * PLVdate.use_great_friday
 *
 * Syntax:
 *   FUNCTION unuse_great_friday() RETURNS void;
 *   FUNCTION use_great_friday() RETURNS void;
 *   FUNCTION use_great_friday(IN bool) RETURNS void
 *
 * Purpouse:
 *   Have to use great_friday as nonbizday?
 *
 ****************************************************************/</comment>

<function><type><name>Datum</name></type>
<name>plvdate_use_great_friday</name> <parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>use_great_friday</name> <operator>=</operator> <call><name>PG_GETARG_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" format="doxygen">/****************************************************************
 * PLVdate.using_great_friday
 *
 * Syntax:
 *   FUNCTION using_great_friday() RETURNS bool
 *
 * Purpouse:
 *   Use it great friday as nonbizday?
 *
 ****************************************************************/</comment>

<function><type><name>Datum</name></type>
<name>plvdate_using_great_friday</name> <parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>use_great_friday</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" format="doxygen">/****************************************************************
 * PLVdate.include_start
 *
 * Syntax:
 *   FUNCTION include_start() RETURNS void;
 *   FUNCTION noinclude_start() RETURNS void;
 *   FUNCTION include_start(IN bool) RETURNS void
 *
 * Purpouse:
 *   Have to include current day in bizdays_between calculation?
 *
 ****************************************************************/</comment>

<function><type><name>Datum</name></type>
<name>plvdate_include_start</name> <parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>include_start</name> <operator>=</operator> <call><name>PG_GETARG_BOOL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" format="doxygen">/****************************************************************
 * PLVdate.including_start
 *
 * Syntax:
 *   FUNCTION including_start() RETURNS bool
 *
 * Purpouse:
 *   include current day in bizdays_between calculation?
 *
 ****************************************************************/</comment>

<function><type><name>Datum</name></type>
<name>plvdate_including_start</name> <parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>include_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Load some national configurations
 *
 */</comment>

<function><type><name>Datum</name></type>
<name>plvdate_default_holidays</name> <parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>country</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>country_id</name> <operator>=</operator> <call><name>ora_seq_search</name><argument_list>(<argument><expr><call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>country</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>states</name></expr></argument>, <argument><expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>country</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CHECK_SEQ_SEARCH</name><argument_list>(<argument><expr><name>country_id</name></expr></argument>, <argument><expr><literal type="string">"STATE/State/state"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>nonbizdays</name> <operator>=</operator> <name><name>defaults_ci</name><index>[<expr><name>country_id</name></expr>]</index></name><operator>.</operator><name>nonbizdays</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>use_easter</name> <operator>=</operator> <name><name>defaults_ci</name><index>[<expr><name>country_id</name></expr>]</index></name><operator>.</operator><name>use_easter</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>use_great_friday</name> <operator>=</operator> <name><name>defaults_ci</name><index>[<expr><name>country_id</name></expr>]</index></name><operator>.</operator><name>use_great_friday</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>exceptions_c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>holidays_c</name> <operator>=</operator> <name><name>defaults_ci</name><index>[<expr><name>country_id</name></expr>]</index></name><operator>.</operator><name>holidays_c</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>holidays</name></expr></argument>, <argument><expr><name><name>defaults_ci</name><index>[<expr><name>country_id</name></expr>]</index></name><operator>.</operator><name>holidays</name></expr></argument>, <argument><expr><name>holidays_c</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>holiday_desc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * helper maintaince functions
 */</comment>

<function><type><name>Datum</name></type>
<name>plvdate_version</name> <parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_RETURN_CSTRING</name><argument_list>(<argument><expr><name>PLVDATE_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" format="doxygen">/****************************************************************
 * PLVdate.days_inmonth
 *
 * Syntax:
 *   FUNCTION days_inmonth(date) RETURNS integer
 *
 * Purpouse:
 *   Returns month's length
 *
 ****************************************************************/</comment>

<function><type><name>Datum</name></type>
<name>plvdate_days_inmonth</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DateADT</name></type> <name>day</name> <init>= <expr><call><name>PG_GETARG_DATEADT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>j2date</name><argument_list>(<argument><expr><name>day</name> <operator>+</operator> <name>POSTGRES_EPOCH_JDATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>date2j</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>date2j</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" format="doxygen">/****************************************************************
 * PLVdate.isleapyear
 *
 * Syntax:
 *   FUNCTION isleapyear() RETURNS bool
 *
 * Purpouse:
 *   Returns true, if year is leap
 *
 ****************************************************************/</comment>

<function><type><name>Datum</name></type>
<name>plvdate_isleapyear</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DateADT</name></type> <name>day</name> <init>= <expr><call><name>PG_GETARG_DATEADT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>j2date</name><argument_list>(<argument><expr><name>day</name> <operator>+</operator> <name>POSTGRES_EPOCH_JDATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator> <name>y</name> <operator>%</operator> <literal type="number">4</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>y</name> <operator>%</operator> <literal type="number">100</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>y</name> <operator>/</operator> <literal type="number">400</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/****************************************************************
 * PLVdate.set_nonbizdays
 *
 * Syntax:
 *   FUNCTION set_nonbizdays(IN dow bool[7]) RETURNS void;
 *
 * Purpouse:
 *   Set pattern bussines/nonbussines days in week
 *
 ****************************************************************/</comment>

<comment type="block" format="doxygen">/****************************************************************
 * PLVdate.set_nonbizday
 *
 * Syntax:
 *   FUNCTION set_nonbizdays(IN days DATE[]) RETURNS void;
 *   FUNCTION set_nonbizdays(IN days DATE[], IN repeat := false BOOL) RETURNS void;
 *
 * Purpouse:
 *   Set days as non bussines day, second arg specify year's
 * periodicity
 *
 ****************************************************************/</comment>

<comment type="block" format="doxygen">/****************************************************************
 * PLVdate.display
 *
 * Syntax:
 *   FUNCTION display() RETURNS void;
 *
 * Purpouse:
 *   Show current calendar
 *
 ****************************************************************/</comment>
</unit>
